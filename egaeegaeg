const environments = {
  DEV: "development",
  PROD: "production"
};
const environment = environments.PROD;
function RNG(_0x1b6422) {
  this.m = 2147483648;
  this.a = 1103515245;
  this.c = 12345;
  this.state = _0x1b6422 ? _0x1b6422 : Math.floor(Math.random() * (this.m - 1));
}
RNG.prototype.random = function () {
  this.state = (this.a * this.state + this.c) % this.m;
  return this.state / this.m;
};
RNG.prototype.set_seed = function (_0x1581e1) {
  this.state = _0x1581e1;
};
RAND_SIZE = 10000;
RANDOM = [];
var rrr = new RNG();
rrr.set_seed(new Date().getTime());
for (var k = 0; k < RAND_SIZE; k++) {
  RANDOM.push(rrr.random());
}
function fun18_token(_0x4cf3d8, _0x5b0a1e, _0xc882d6, _0x4b4bd9) {
  const _0x1427f6 = ~(_0x4cf3d8 & 59259) & _0x4cf3d8 | ~(_0x4cf3d8 & 59259) & 59259;
  const _0x380f8f = ~(_0x5b0a1e & 56097) & _0x5b0a1e | ~(_0x5b0a1e & 56097) & 56097;
  const _0x509f6c = ((43315 + _0xc882d6) * 1664525 + 1013904223) % 4294967296;
  const _0xc822b0 = (8 << (_0x4b4bd9 >> 24 & 255)) + (32 << (_0x4b4bd9 >> 32 & 255)) + (24 << (_0x4b4bd9 >> 8 & 255)) + (16 << (_0x4b4bd9 >> 16 & 255));
  const _0x14a898 = fun19_token(_0x1427f6, _0x380f8f, _0x509f6c, _0xc822b0, _0x1427f6, _0x380f8f);
  const _0x10ae08 = fun22_token(_0x509f6c, _0xc822b0, _0x1427f6, _0x380f8f, _0x509f6c);
  const _0x45a8e3 = fun20_token(_0xc822b0, _0x1427f6, _0x380f8f, _0x509f6c, _0xc822b0, _0x1427f6);
  const _0x29a523 = (1013904223 + ((_0x14a898 ^ _0x10ae08) + 26191) * 1664525) % 4294967296;
  const _0x579e5e = (_0x29a523 | 38630) & ~(_0x29a523 & 38630);
  return _0x579e5e;
}
function fun13_token(_0x1b78a4, _0x45ca01, _0xe34dee, _0x381683, _0x1e624e, _0x589817) {
  const _0x379c3a = ((39488 + _0x1b78a4) * 214013 + 2531011) % 4294967296;
  const _0x5c82d0 = ~(_0x45ca01 & 49976) & _0x45ca01 | ~(_0x45ca01 & 49976) & 49976;
  const _0x24e1b8 = ~(_0xe34dee & 35856) & _0xe34dee | ~(_0xe34dee & 35856) & 35856;
  const _0x4d8e81 = _0x381683 ^ 52219;
  const _0x46f0a2 = (_0x1e624e + 3575) % 65503;
  const _0x4c64d4 = ~(_0x589817 & 6932) & _0x589817 | ~(_0x589817 & 6932) & 6932;
  const _0x3aca8a = fun15_token(_0x379c3a, _0x5c82d0, _0x24e1b8, _0x4d8e81, _0x46f0a2);
  const _0x369d37 = fun14_token(_0x4c64d4, _0x379c3a, _0x5c82d0, _0x24e1b8, _0x4d8e81, _0x46f0a2);
  const _0x376c58 = fun35_token(_0x4c64d4, _0x379c3a, _0x5c82d0, _0x24e1b8, _0x4d8e81, _0x46f0a2);
  const _0x1024db = (1013904223 + ((_0x3aca8a ^ _0x369d37) + 60709) * 1664525) % 4294967296;
  const _0x3cf85c = ~(_0x1024db & 42138) & _0x1024db | ~(_0x1024db & 42138) & 42138;
  return _0x3cf85c;
}
function fun16_token(_0x102bde, _0x4cc162, _0x54f2f8, _0x1e2905, _0x471c77) {
  const _0x387cfd = ((_0x102bde + 14772) * 2147483629 + 2147483587) % 2147483647;
  const _0x1f69c1 = _0x4cc162 ^ 63080;
  const _0x446b63 = ((_0x54f2f8 + 60304) * 22695477 + 1) % 4294967296;
  const _0x52f7fa = ~(_0x1e2905 & 5467) & 5467 | ~(_0x1e2905 & 5467) & _0x1e2905;
  const _0xc34a6b = (_0x471c77 | 40165) & ~(_0x471c77 & 40165);
  const _0xafcefc = fun17_token(_0x387cfd, _0x1f69c1, _0x446b63, _0x52f7fa);
  const _0x10b1a8 = fun22_token(_0xc34a6b, _0x387cfd, _0x1f69c1, _0x446b63, _0x52f7fa);
  const _0x433ed9 = fun33_token(_0xc34a6b, _0x387cfd, _0x1f69c1, _0x446b63, _0x52f7fa, _0xc34a6b);
  const _0x5c3fee = (16 << ((_0xafcefc ^ _0x10b1a8) >> 24 & 255)) + (8 << ((_0xafcefc ^ _0x10b1a8) >> 16 & 255)) + (24 << ((_0xafcefc ^ _0x10b1a8) >> 32 & 255)) + (32 << ((_0xafcefc ^ _0x10b1a8) >> 8 & 255));
  const _0x4338c9 = ((28765 + (_0x5c3fee ^ _0x433ed9)) * 1664525 + 1013904223) % 4294967296;
  return _0x4338c9;
}
function fun11_token(_0x5a5529, _0x1fc6a5) {
  const _0x2775f9 = ~(_0x5a5529 & 41406) & _0x5a5529 | ~(_0x5a5529 & 41406) & 41406;
  const _0x57e639 = ((_0x1fc6a5 + 17922) * 1103515245 + 12345) % 2147483648;
  const _0x4cf3b3 = fun25_token(_0x2775f9, _0x57e639, _0x2775f9);
  const _0x4fb323 = fun12_token(_0x57e639, _0x2775f9, _0x57e639, _0x2775f9);
  const _0x2a40f4 = fun31_token(_0x57e639, _0x2775f9, _0x57e639, _0x2775f9, _0x57e639);
  const _0x237dab = _0x4cf3b3 ^ 18573;
  const _0x33a203 = ((42346 + (_0x237dab ^ _0x2a40f4)) * 2147483629 + 2147483587) % 2147483647;
  return _0x33a203;
}
function fun9_token(_0x78610, _0x12ffa3, _0x22b16f, _0x2091de, _0x3f94ea) {
  const _0x44a3ac = (12345 + (23101 + _0x78610) * 1103515245) % 2147483648;
  const _0x4868d6 = _0x12ffa3 ^ 58614;
  const _0x4b0d30 = ((_0x22b16f + 45267) * 214013 + 2531011) % 4294967296;
  const _0x3703c1 = _0x2091de ^ 40810;
  const _0xa7e8d9 = (24 << (_0x3f94ea >> 24 & 255)) + (8 << (_0x3f94ea >> 32 & 255)) + (32 << (_0x3f94ea >> 8 & 255)) + (16 << (_0x3f94ea >> 16 & 255));
  const _0x3f2a5d = fun23_token(_0x44a3ac, _0x4868d6);
  const _0x117efa = fun18_token(_0x4b0d30, _0x3703c1, _0xa7e8d9, _0x44a3ac);
  const _0x169497 = fun10_token(_0x4868d6, _0x4b0d30, _0x3703c1, _0xa7e8d9);
  const _0xb19c2e = (24 << ((_0x3f2a5d ^ _0x117efa) >> 24 & 255)) + (32 << ((_0x3f2a5d ^ _0x117efa) >> 16 & 255)) + (8 << ((_0x3f2a5d ^ _0x117efa) >> 32 & 255)) + (16 << ((_0x3f2a5d ^ _0x117efa) >> 8 & 255));
  const _0x44c8dc = ~(_0xb19c2e & 13644) & _0xb19c2e | ~(_0xb19c2e & 13644) & 13644;
  return _0x44c8dc;
}
function fun36_token(_0x428812, _0xc042ab, _0x33f8ed, _0x2e4b73) {
  const _0x196495 = _0x428812 ^ 11762;
  const _0x2d2fc4 = ~(_0xc042ab & 19425) & 19425 | ~(_0xc042ab & 19425) & _0xc042ab;
  const _0x1407b8 = (32 << (_0x33f8ed >> 16 & 255)) + (8 << (_0x33f8ed >> 32 & 255)) + (24 << (_0x33f8ed >> 24 & 255)) + (16 << (_0x33f8ed >> 8 & 255));
  const _0x3731e3 = ~(_0x2e4b73 & 259) & 259 | ~(_0x2e4b73 & 259) & _0x2e4b73;
  const _0xc0c027 = (32 << ((_0x196495 ^ _0x2d2fc4) >> 32 & 255)) + (8 << ((_0x196495 ^ _0x2d2fc4) >> 8 & 255)) + (24 << ((_0x196495 ^ _0x2d2fc4) >> 24 & 255)) + (16 << ((_0x196495 ^ _0x2d2fc4) >> 16 & 255));
  const _0x3e2424 = ((17757 + (_0xc0c027 ^ _0x1407b8)) * 1664525 + 1013904223) % 4294967296;
  const _0x4064ab = ((55182 + (_0x3e2424 ^ _0x3731e3)) * 1664525 + 1013904223) % 4294967296;
  return _0x4064ab;
}
function fun31_token(_0x3df408, _0x3f043d, _0x34a40d, _0x4ffe09, _0x53409d) {
  const _0x19cd18 = (32 << (_0x3df408 >> 24 & 255)) + (16 << (_0x3df408 >> 8 & 255)) + (24 << (_0x3df408 >> 16 & 255)) + (8 << (_0x3df408 >> 32 & 255));
  const _0xb8ffd6 = (_0x3f043d + 39144) % 65406;
  const _0x2f9805 = _0x34a40d ^ 34575;
  const _0x48b526 = ~(_0x4ffe09 & 37841) & _0x4ffe09 | ~(_0x4ffe09 & 37841) & 37841;
  const _0x391ce6 = (_0x53409d | 25975) & ~(_0x53409d & 25975);
  const _0x251573 = fun36_token(_0x19cd18, _0xb8ffd6, _0x2f9805, _0x48b526);
  const _0x2c6b2c = fun32_token(_0x391ce6, _0x19cd18, _0xb8ffd6, _0x2f9805, _0x48b526);
  const _0x281c47 = fun35_token(_0x391ce6, _0x19cd18, _0xb8ffd6, _0x2f9805, _0x48b526, _0x391ce6);
  const _0x27904f = (_0x251573 | 19326) & ~(_0x251573 & 19326);
  const _0x1bc84c = _0x27904f ^ 36297;
  return _0x1bc84c;
}
function fun26_token(_0x462ab3, _0x346bc5, _0x23e53e, _0x3c101c, _0x1c6157) {
  const _0xe74ce1 = (24 << (_0x462ab3 >> 24 & 255)) + (32 << (_0x462ab3 >> 16 & 255)) + (16 << (_0x462ab3 >> 8 & 255)) + (8 << (_0x462ab3 >> 32 & 255));
  const _0x3bebf9 = (12345 + (_0x346bc5 + 3024) * 1103515245) % 2147483648;
  const _0x5d3843 = (8 << (_0x23e53e >> 8 & 255)) + (32 << (_0x23e53e >> 32 & 255)) + (24 << (_0x23e53e >> 16 & 255)) + (16 << (_0x23e53e >> 24 & 255));
  const _0x22472a = (1 + (_0x3c101c + 41324) * 22695477) % 4294967296;
  const _0x57d87b = (_0x1c6157 | 19607) & ~(_0x1c6157 & 19607);
  const _0x2953d0 = fun27_token(_0xe74ce1, _0x3bebf9);
  const _0x3f9523 = fun32_token(_0x5d3843, _0x22472a, _0x57d87b, _0xe74ce1, _0x3bebf9);
  const _0x535ab8 = fun30_token(_0x5d3843, _0x22472a, _0x57d87b, _0xe74ce1, _0x3bebf9, _0x5d3843);
  const _0x5ddcde = ~(_0x2953d0 & 49323) & 49323 | ~(_0x2953d0 & 49323) & _0x2953d0;
  const _0x5d9947 = ~(_0x5ddcde & 46567) & (_0x5ddcde | 46567);
  return _0x5d9947;
}
function fun17_token(_0x5f41f7, _0x15335f, _0x274e29, _0x486dc6) {
  const _0x140160 = (_0x5f41f7 | 57611) & ~(_0x5f41f7 & 57611);
  const _0x169322 = ((_0x15335f + 56889) * 1664525 + 1013904223) % 4294967296;
  const _0x142d3f = _0x274e29 ^ 62842;
  const _0x30d281 = ~(_0x486dc6 & 1179) & _0x486dc6 | ~(_0x486dc6 & 1179) & 1179;
  const _0x35dce9 = fun36_token(_0x140160, _0x169322, _0x142d3f, _0x30d281);
  const _0x52d486 = fun21_token(_0x140160, _0x169322, _0x142d3f, _0x30d281);
  const _0x5e9eee = fun18_token(_0x140160, _0x169322, _0x142d3f, _0x30d281);
  const _0x12f7b5 = (24 << ((_0x35dce9 ^ _0x52d486) >> 24 & 255)) + (8 << ((_0x35dce9 ^ _0x52d486) >> 16 & 255)) + (16 << ((_0x35dce9 ^ _0x52d486) >> 32 & 255)) + (32 << ((_0x35dce9 ^ _0x52d486) >> 8 & 255));
  const _0x11b8e6 = ~(_0x12f7b5 & 63304) & (_0x12f7b5 | 63304);
  return _0x11b8e6;
}
function fun0_token(_0x39519a, _0x287194, _0x23ab56, _0x1c722e, _0x36452a, _0x4b9a54) {
  const _0x515fc2 = (1013904223 + (_0x39519a + 28824) * 1664525) % 4294967296;
  const _0x38fe81 = (1013904223 + (13210 + _0x287194) * 1664525) % 4294967296;
  const _0x5a351d = ~(_0x23ab56 & 32165) & 32165 | ~(_0x23ab56 & 32165) & _0x23ab56;
  const _0x36368d = (24 << (_0x1c722e >> 24 & 255)) + (16 << (_0x1c722e >> 8 & 255)) + (8 << (_0x1c722e >> 16 & 255)) + (32 << (_0x1c722e >> 32 & 255));
  const _0x390155 = (1 + (39199 + _0x36452a) * 22695477) % 4294967296;
  const _0x3d7d83 = _0x4b9a54 ^ 33037;
  const _0x205781 = fun1_token(_0x515fc2, _0x38fe81, _0x5a351d);
  const _0x329bf6 = fun21_token(_0x36368d, _0x390155, _0x3d7d83, _0x515fc2);
  const _0x3145fd = fun7_token(_0x38fe81, _0x5a351d, _0x36368d, _0x390155);
  const _0x2d3a6b = _0x205781 ^ 2959;
  const _0x6a5fee = ((34159 + (_0x2d3a6b ^ _0x3145fd)) * 1103515245 + 12345) % 2147483648;
  return _0x6a5fee;
}
function fun19_token(_0x2177a0, _0x14895e, _0x1f4863, _0x389ff7, _0x4158ba, _0x36041d) {
  const _0x53e240 = _0x2177a0 ^ 10715;
  const _0x3f9f46 = (24 << (_0x14895e >> 16 & 255)) + (16 << (_0x14895e >> 32 & 255)) + (32 << (_0x14895e >> 8 & 255)) + (8 << (_0x14895e >> 24 & 255));
  const _0x4c4535 = (8 << (_0x1f4863 >> 16 & 255)) + (32 << (_0x1f4863 >> 24 & 255)) + (16 << (_0x1f4863 >> 8 & 255)) + (24 << (_0x1f4863 >> 32 & 255));
  const _0x4f9143 = _0x389ff7 ^ 40782;
  const _0x5bbd37 = _0x4158ba ^ 41301;
  const _0x3d0eb9 = ~(_0x36041d & 12091) & (_0x36041d | 12091);
  const _0x41a9f9 = fun20_token(_0x53e240, _0x3f9f46, _0x4c4535, _0x4f9143, _0x5bbd37, _0x3d0eb9);
  const _0x196e0 = fun20_token(_0x53e240, _0x3f9f46, _0x4c4535, _0x4f9143, _0x5bbd37, _0x3d0eb9);
  const _0x4e0d69 = fun29_token(_0x53e240, _0x3f9f46, _0x4c4535, _0x4f9143, _0x5bbd37);
  const _0x49ddd8 = (_0x41a9f9 | 3006) & ~(_0x41a9f9 & 3006);
  const _0x7f4f36 = ~(_0x49ddd8 & 24460) & (_0x49ddd8 | 24460);
  return _0x7f4f36;
}
function fun7_token(_0x1dd34e, _0x4b163d, _0x3729bf, _0x55a99b) {
  const _0x221fd9 = ~(_0x1dd34e & 33107) & (_0x1dd34e | 33107);
  const _0x1fd1f4 = (24 << (_0x4b163d >> 32 & 255)) + (32 << (_0x4b163d >> 8 & 255)) + (8 << (_0x4b163d >> 16 & 255)) + (16 << (_0x4b163d >> 24 & 255));
  const _0x16123a = ~(_0x3729bf & 32053) & (_0x3729bf | 32053);
  const _0x339116 = _0x55a99b ^ 12240;
  const _0x6201ea = fun8_token(_0x221fd9, _0x1fd1f4, _0x16123a, _0x339116);
  const _0x29ea3d = fun21_token(_0x221fd9, _0x1fd1f4, _0x16123a, _0x339116);
  const _0x402d57 = fun15_token(_0x221fd9, _0x1fd1f4, _0x16123a, _0x339116, _0x221fd9);
  const _0x4e9056 = ~(_0x6201ea & 64131) & 64131 | ~(_0x6201ea & 64131) & _0x6201ea;
  const _0xdf72d2 = (2531011 + (44352 + (_0x4e9056 ^ _0x402d57)) * 214013) % 4294967296;
  return _0xdf72d2;
}
function fun20_token(_0xf7e564, _0x260de9, _0x12c871, _0x2cfa81, _0x1352a9, _0x109193) {
  const _0x422337 = ~(_0xf7e564 & 36133) & (_0xf7e564 | 36133);
  const _0x2b8848 = (_0x260de9 | 13670) & ~(_0x260de9 & 13670);
  const _0x19e983 = (_0x12c871 | 31390) & ~(_0x12c871 & 31390);
  const _0x1aedde = _0x2cfa81 ^ 64081;
  const _0x23d772 = _0x1352a9 ^ 7550;
  const _0x9cdfd4 = (2147483587 + (_0x109193 + 63950) * 2147483629) % 2147483647;
  const _0x27f018 = fun28_token(_0x422337, _0x2b8848, _0x19e983, _0x1aedde, _0x23d772);
  const _0x5f543d = fun21_token(_0x9cdfd4, _0x422337, _0x2b8848, _0x19e983);
  const _0x5d220d = fun29_token(_0x1aedde, _0x23d772, _0x9cdfd4, _0x422337, _0x2b8848);
  const _0x184fdd = ((62552 + (_0x27f018 ^ _0x5f543d)) * 2147483629 + 2147483587) % 2147483647;
  const _0x492be5 = (12345 + (36760 + (_0x184fdd ^ _0x5d220d)) * 1103515245) % 2147483648;
  return _0x492be5;
}
function fun5_token(_0xab928c, _0x334f70, _0x32385b) {
  const _0x5a0ca9 = ((5294 + _0xab928c) * 1664525 + 1013904223) % 4294967296;
  const _0x2b5e0b = (_0x334f70 | 55665) & ~(_0x334f70 & 55665);
  const _0xbcd629 = (_0x32385b + 54633) % 65404;
  const _0x3e9f51 = fun16_token(_0x5a0ca9, _0x2b5e0b, _0xbcd629, _0x5a0ca9, _0x2b5e0b);
  const _0x18b6e8 = fun6_token(_0xbcd629, _0x5a0ca9, _0x2b5e0b, _0xbcd629, _0x5a0ca9, _0x2b5e0b);
  const _0xe1ade8 = fun21_token(_0xbcd629, _0x5a0ca9, _0x2b5e0b, _0xbcd629);
  const _0x580102 = ~(_0x3e9f51 & 43875) & (_0x3e9f51 | 43875);
  const _0x12b808 = _0x580102 ^ 15116;
  return _0x12b808;
}
function fun12_token(_0x58c0fa, _0x3c693e, _0x2f7206, _0x23b2a9) {
  const _0x3cae59 = (_0x58c0fa | 15432) & ~(_0x58c0fa & 15432);
  const _0x1b4a33 = _0x3c693e ^ 12315;
  const _0x1c3cd9 = _0x2f7206 ^ 38714;
  const _0x2e2221 = _0x23b2a9 ^ 58084;
  const _0x55bcaf = fun13_token(_0x3cae59, _0x1b4a33, _0x1c3cd9, _0x2e2221, _0x3cae59, _0x1b4a33);
  const _0x1ce341 = fun21_token(_0x1c3cd9, _0x2e2221, _0x3cae59, _0x1b4a33);
  const _0x4c9d79 = fun35_token(_0x1c3cd9, _0x2e2221, _0x3cae59, _0x1b4a33, _0x1c3cd9, _0x2e2221);
  const _0x2d49df = ~(_0x55bcaf & 41134) & _0x55bcaf | ~(_0x55bcaf & 41134) & 41134;
  const _0x531e6d = ((34681 + (_0x2d49df ^ _0x4c9d79)) * 214013 + 2531011) % 4294967296;
  return _0x531e6d;
}
function fun4_token(_0x41501b, _0x16f84d) {
  const _0x2c75d6 = ((_0x41501b + 49468) * 1103515245 + 12345) % 2147483648;
  const _0x16a63e = ((_0x16f84d + 30513) * 214013 + 2531011) % 4294967296;
  const _0x224eeb = fun5_token(_0x2c75d6, _0x16a63e, _0x2c75d6);
  const _0x49332f = fun29_token(_0x16a63e, _0x2c75d6, _0x16a63e, _0x2c75d6, _0x16a63e);
  const _0x5bff6d = fun36_token(_0x2c75d6, _0x16a63e, _0x2c75d6, _0x16a63e);
  const _0x2255a2 = (_0x224eeb | 17943) & ~(_0x224eeb & 17943);
  const _0x2adcb1 = _0x2255a2 ^ 21791;
  return _0x2adcb1;
}
function fun10_token(_0x34297a, _0x12bb46, _0x457965, _0x37a6d9) {
  const _0x4a1d02 = (_0x34297a + 34282) % 65336;
  const _0xb9dac0 = ~(_0x12bb46 & 45181) & 45181 | ~(_0x12bb46 & 45181) & _0x12bb46;
  const _0xf84938 = (16 << (_0x457965 >> 8 & 255)) + (32 << (_0x457965 >> 24 & 255)) + (8 << (_0x457965 >> 32 & 255)) + (24 << (_0x457965 >> 16 & 255));
  const _0x2f73fc = ~(_0x37a6d9 & 25475) & 25475 | ~(_0x37a6d9 & 25475) & _0x37a6d9;
  const _0xb17600 = fun11_token(_0x4a1d02, _0xb9dac0);
  const _0x517bdf = fun32_token(_0xf84938, _0x2f73fc, _0x4a1d02, _0xb9dac0, _0xf84938);
  const _0x58fa25 = fun23_token(_0x2f73fc, _0x4a1d02);
  const _0x4d5176 = (58498 + (_0xb17600 ^ _0x517bdf)) % 65531;
  const _0x49490b = ~(_0x4d5176 & 37009) & 37009 | ~(_0x4d5176 & 37009) & _0x4d5176;
  return _0x49490b;
}
function fun35_token(_0x35202b, _0x239a59, _0x162a32, _0x5663e5, _0x41af8e, _0x402f6b) {
  const _0x926d9f = _0x35202b ^ 23409;
  const _0x241d4a = _0x239a59 ^ 26380;
  const _0x19a022 = _0x162a32 ^ 53590;
  const _0xfb634f = _0x5663e5 ^ 36633;
  const _0x2fe719 = ((_0x41af8e + 33017) * 1103515245 + 12345) % 2147483648;
  const _0x127e68 = _0x402f6b ^ 42490;
  const _0x2032ad = fun36_token(_0x926d9f, _0x241d4a, _0x19a022, _0xfb634f);
  const _0x4ce57c = fun36_token(_0x2fe719, _0x127e68, _0x926d9f, _0x241d4a);
  const _0x4bd5c3 = ((19056 + (_0x2032ad ^ _0x4ce57c)) * 22695477 + 1) % 4294967296;
  return _0x4bd5c3;
}
function fun24_token(_0x4453b, _0x4b6e24, _0xc74c2c, _0x1107de, _0x27e707) {
  const _0x237048 = ((9716 + _0x4453b) * 1664525 + 1013904223) % 4294967296;
  const _0x71af23 = ~(_0x4b6e24 & 7703) & _0x4b6e24 | ~(_0x4b6e24 & 7703) & 7703;
  const _0x318599 = (_0xc74c2c | 31275) & ~(_0xc74c2c & 31275);
  const _0x30675d = ~(_0x1107de & 25693) & 25693 | ~(_0x1107de & 25693) & _0x1107de;
  const _0x56d959 = (8 << (_0x27e707 >> 8 & 255)) + (32 << (_0x27e707 >> 24 & 255)) + (24 << (_0x27e707 >> 16 & 255)) + (16 << (_0x27e707 >> 32 & 255));
  const _0x36bf9d = fun35_token(_0x237048, _0x71af23, _0x318599, _0x30675d, _0x56d959, _0x237048);
  const _0x4239fb = fun36_token(_0x71af23, _0x318599, _0x30675d, _0x56d959);
  const _0x338040 = fun25_token(_0x237048, _0x71af23, _0x318599);
  const _0x4ff560 = (24 << ((_0x36bf9d ^ _0x4239fb) >> 16 & 255)) + (8 << ((_0x36bf9d ^ _0x4239fb) >> 8 & 255)) + (32 << ((_0x36bf9d ^ _0x4239fb) >> 24 & 255)) + (16 << ((_0x36bf9d ^ _0x4239fb) >> 32 & 255));
  const _0x263b99 = _0x4ff560 ^ 31710;
  return _0x263b99;
}
function fun34_token(_0x41efd9, _0x54df1e) {
  const _0x423c0f = (2531011 + (_0x41efd9 + 62874) * 214013) % 4294967296;
  const _0x39ab9c = (24 << (_0x54df1e >> 24 & 255)) + (16 << (_0x54df1e >> 32 & 255)) + (8 << (_0x54df1e >> 8 & 255)) + (32 << (_0x54df1e >> 16 & 255));
  const _0x1544d3 = fun35_token(_0x423c0f, _0x39ab9c, _0x423c0f, _0x39ab9c, _0x423c0f, _0x39ab9c);
  const _0x24f24f = fun35_token(_0x423c0f, _0x39ab9c, _0x423c0f, _0x39ab9c, _0x423c0f, _0x39ab9c);
  const _0x4dd1a9 = fun36_token(_0x423c0f, _0x39ab9c, _0x423c0f, _0x39ab9c);
  const _0x51d0b9 = (16 << ((_0x1544d3 ^ _0x24f24f) >> 32 & 255)) + (8 << ((_0x1544d3 ^ _0x24f24f) >> 24 & 255)) + (24 << ((_0x1544d3 ^ _0x24f24f) >> 16 & 255)) + (32 << ((_0x1544d3 ^ _0x24f24f) >> 8 & 255));
  const _0x3e88ff = ~(_0x51d0b9 & 55949) & 55949 | ~(_0x51d0b9 & 55949) & _0x51d0b9;
  return _0x3e88ff;
}
function fun30_token(_0x3a3a5a, _0xa8668d, _0x2a25d3, _0x321bc9, _0x4a1b80, _0x44f869) {
  const _0xc91f83 = (24 << (_0x3a3a5a >> 24 & 255)) + (32 << (_0x3a3a5a >> 16 & 255)) + (16 << (_0x3a3a5a >> 8 & 255)) + (8 << (_0x3a3a5a >> 32 & 255));
  const _0x177ba9 = (_0xa8668d | 41551) & ~(_0xa8668d & 41551);
  const _0x55074a = (24 << (_0x2a25d3 >> 24 & 255)) + (16 << (_0x2a25d3 >> 32 & 255)) + (8 << (_0x2a25d3 >> 16 & 255)) + (32 << (_0x2a25d3 >> 8 & 255));
  const _0x273567 = ~(_0x321bc9 & 32641) & (_0x321bc9 | 32641);
  const _0x11522c = ((_0x4a1b80 + 35582) * 214013 + 2531011) % 4294967296;
  const _0x1a1685 = ~(_0x44f869 & 1090) & (_0x44f869 | 1090);
  const _0x127b8a = fun33_token(_0xc91f83, _0x177ba9, _0x55074a, _0x273567, _0x11522c, _0x1a1685);
  const _0x4c3701 = fun31_token(_0xc91f83, _0x177ba9, _0x55074a, _0x273567, _0x11522c);
  const _0x5c93b9 = fun36_token(_0x1a1685, _0xc91f83, _0x177ba9, _0x55074a);
  const _0x49994f = ~(_0x127b8a & 8077) & 8077 | ~(_0x127b8a & 8077) & _0x127b8a;
  const _0x374ab0 = ~(_0x49994f & 3708) & (_0x49994f | 3708);
  return _0x374ab0;
}
function fun14_token(_0x1ec402, _0xf38856, _0x3c8b47, _0xca1a38, _0x329265, _0x4c44a4) {
  const _0x14fb26 = _0x1ec402 ^ 30142;
  const _0x3b9b5f = (_0xf38856 + 63025) % 65493;
  const _0xcfbe43 = _0x3c8b47 ^ 30777;
  const _0x549c25 = ((45939 + _0xca1a38) * 22695477 + 1) % 4294967296;
  const _0x504052 = (8 << (_0x329265 >> 16 & 255)) + (32 << (_0x329265 >> 24 & 255)) + (24 << (_0x329265 >> 32 & 255)) + (16 << (_0x329265 >> 8 & 255));
  const _0x12ce38 = (_0x4c44a4 | 45652) & ~(_0x4c44a4 & 45652);
  const _0x233c51 = fun15_token(_0x14fb26, _0x3b9b5f, _0xcfbe43, _0x549c25, _0x504052);
  const _0x2132ca = fun16_token(_0x12ce38, _0x14fb26, _0x3b9b5f, _0xcfbe43, _0x549c25);
  const _0x340202 = fun30_token(_0x504052, _0x12ce38, _0x14fb26, _0x3b9b5f, _0xcfbe43, _0x549c25);
  const _0x411d69 = _0x233c51 ^ 46918;
  const _0x51aa7b = _0x411d69 ^ 24022;
  return _0x51aa7b;
}
function entrypoint(_0x35db32) {
  return fun0_token(_0x35db32, 8260, 46947, 8004, 37330, 5330);
}
function fun6_token(_0x22bf46, _0x5e89a2, _0x1fbcaf, _0x5f091f, _0x283e9a, _0x8eec3f) {
  const _0x149614 = (2531011 + (_0x22bf46 + 16955) * 214013) % 4294967296;
  const _0x4e8728 = ((9436 + _0x5e89a2) * 1103515245 + 12345) % 2147483648;
  const _0x324e22 = (_0x1fbcaf | 14774) & ~(_0x1fbcaf & 14774);
  const _0x32f4e9 = (_0x5f091f | 48802) & ~(_0x5f091f & 48802);
  const _0x532aa2 = ~(_0x283e9a & 24998) & (_0x283e9a | 24998);
  const _0x3a3eba = (8 << (_0x8eec3f >> 8 & 255)) + (16 << (_0x8eec3f >> 16 & 255)) + (32 << (_0x8eec3f >> 32 & 255)) + (24 << (_0x8eec3f >> 24 & 255));
  const _0x2133b9 = fun7_token(_0x149614, _0x4e8728, _0x324e22, _0x32f4e9);
  const _0x161823 = fun32_token(_0x532aa2, _0x3a3eba, _0x149614, _0x4e8728, _0x324e22);
  const _0x2a9d68 = fun7_token(_0x32f4e9, _0x532aa2, _0x3a3eba, _0x149614);
  const _0x9cfe0a = (24 << ((_0x2133b9 ^ _0x161823) >> 24 & 255)) + (8 << ((_0x2133b9 ^ _0x161823) >> 32 & 255)) + (16 << ((_0x2133b9 ^ _0x161823) >> 8 & 255)) + (32 << ((_0x2133b9 ^ _0x161823) >> 16 & 255));
  const _0xb783d0 = (((_0x9cfe0a ^ _0x2a9d68) + 35404) * 214013 + 2531011) % 4294967296;
  return _0xb783d0;
}
function fun3_token(_0x1c5be5, _0x4daa0e, _0x1d9ea3, _0x34964c, _0x501d5d) {
  const _0x1ce9ec = _0x1c5be5 ^ 64570;
  const _0x40d235 = (2531011 + (_0x4daa0e + 41768) * 214013) % 4294967296;
  const _0x123b3a = (1013904223 + (_0x1d9ea3 + 43923) * 1664525) % 4294967296;
  const _0x1d5c88 = (16 << (_0x34964c >> 32 & 255)) + (8 << (_0x34964c >> 24 & 255)) + (32 << (_0x34964c >> 16 & 255)) + (24 << (_0x34964c >> 8 & 255));
  const _0x50c725 = (_0x501d5d | 21896) & ~(_0x501d5d & 21896);
  const _0x211302 = fun4_token(_0x1ce9ec, _0x40d235);
  const _0x5d9fd3 = fun12_token(_0x123b3a, _0x1d5c88, _0x50c725, _0x1ce9ec);
  const _0x5e483a = fun26_token(_0x40d235, _0x123b3a, _0x1d5c88, _0x50c725, _0x1ce9ec);
  const _0x5ea517 = ~(_0x211302 & 52206) & (_0x211302 | 52206);
  const _0xed8a6e = (12345 + (7491 + (_0x5ea517 ^ _0x5e483a)) * 1103515245) % 2147483648;
  return _0xed8a6e;
}
function fun29_token(_0x2e69b1, _0xe14d, _0x17e779, _0x98bf9, _0xd9aae9) {
  const _0x11a853 = (2147483587 + (_0x2e69b1 + 64762) * 2147483629) % 2147483647;
  const _0x143fb7 = ((18197 + _0xe14d) * 214013 + 2531011) % 4294967296;
  const _0x418341 = (2531011 + (22845 + _0x17e779) * 214013) % 4294967296;
  const _0x13977a = (32 << (_0x98bf9 >> 16 & 255)) + (16 << (_0x98bf9 >> 8 & 255)) + (8 << (_0x98bf9 >> 32 & 255)) + (24 << (_0x98bf9 >> 24 & 255));
  const _0x4e0f63 = ~(_0xd9aae9 & 11999) & _0xd9aae9 | ~(_0xd9aae9 & 11999) & 11999;
  const _0x3f3129 = fun35_token(_0x11a853, _0x143fb7, _0x418341, _0x13977a, _0x4e0f63, _0x11a853);
  const _0x245606 = fun30_token(_0x143fb7, _0x418341, _0x13977a, _0x4e0f63, _0x11a853, _0x143fb7);
  const _0xb68c6e = fun36_token(_0x418341, _0x13977a, _0x4e0f63, _0x11a853);
  const _0x225217 = (8 << ((_0x3f3129 ^ _0x245606) >> 24 & 255)) + (16 << ((_0x3f3129 ^ _0x245606) >> 16 & 255)) + (24 << ((_0x3f3129 ^ _0x245606) >> 8 & 255)) + (32 << ((_0x3f3129 ^ _0x245606) >> 32 & 255));
  const _0x3b9599 = _0x225217 ^ 35444;
  return _0x3b9599;
}
function fun21_token(_0x4c3896, _0x26f7ad, _0x1a7a02, _0x8e0b87) {
  const _0x332428 = (2147483587 + (37418 + _0x4c3896) * 2147483629) % 2147483647;
  const _0x7bded4 = _0x26f7ad ^ 57623;
  const _0x501b3a = ~(_0x1a7a02 & 40280) & _0x1a7a02 | ~(_0x1a7a02 & 40280) & 40280;
  const _0x260901 = ~(_0x8e0b87 & 24601) & _0x8e0b87 | ~(_0x8e0b87 & 24601) & 24601;
  const _0x11f7b8 = fun27_token(_0x332428, _0x7bded4);
  const _0x1509cf = fun27_token(_0x501b3a, _0x260901);
  const _0x591ce9 = fun22_token(_0x332428, _0x7bded4, _0x501b3a, _0x260901, _0x332428);
  const _0x1533ed = ~(_0x11f7b8 & 43902) & 43902 | ~(_0x11f7b8 & 43902) & _0x11f7b8;
  const _0x71b2f2 = (_0x1533ed | 8862) & ~(_0x1533ed & 8862);
  return _0x71b2f2;
}
function fun8_token(_0x3c6fa7, _0x437bba, _0x4c680a, _0x2bdb0f) {
  const _0x157734 = (32 << (_0x3c6fa7 >> 32 & 255)) + (16 << (_0x3c6fa7 >> 16 & 255)) + (24 << (_0x3c6fa7 >> 24 & 255)) + (8 << (_0x3c6fa7 >> 8 & 255));
  const _0x4db973 = (1 + (50595 + _0x437bba) * 22695477) % 4294967296;
  const _0x1294c6 = ~(_0x4c680a & 40066) & _0x4c680a | ~(_0x4c680a & 40066) & 40066;
  const _0x3daf74 = _0x2bdb0f ^ 18768;
  const _0x2b26e4 = fun15_token(_0x157734, _0x4db973, _0x1294c6, _0x3daf74, _0x157734);
  const _0x37fe4a = fun9_token(_0x4db973, _0x1294c6, _0x3daf74, _0x157734, _0x4db973);
  const _0x5bf997 = fun34_token(_0x1294c6, _0x3daf74);
  const _0x4ce2c4 = (2531011 + ((_0x2b26e4 ^ _0x37fe4a) + 35287) * 214013) % 4294967296;
  const _0x48c170 = (((_0x4ce2c4 ^ _0x5bf997) + 16767) * 1664525 + 1013904223) % 4294967296;
  return _0x48c170;
}
function fun1_token(_0x32202a, _0x2cf800, _0xbb64f7) {
  const _0x3dcf36 = (12345 + (39051 + _0x32202a) * 1103515245) % 2147483648;
  const _0x248792 = (_0x2cf800 | 44117) & ~(_0x2cf800 & 44117);
  const _0x419768 = (24 << (_0xbb64f7 >> 24 & 255)) + (8 << (_0xbb64f7 >> 16 & 255)) + (16 << (_0xbb64f7 >> 32 & 255)) + (32 << (_0xbb64f7 >> 8 & 255));
  const _0xa41861 = fun24_token(_0x3dcf36, _0x248792, _0x419768, _0x3dcf36, _0x248792);
  const _0x2e3fa9 = fun33_token(_0x419768, _0x3dcf36, _0x248792, _0x419768, _0x3dcf36, _0x248792);
  const _0x18e9fa = fun2_token(_0x419768, _0x3dcf36);
  const _0x181d52 = (16 << ((_0xa41861 ^ _0x2e3fa9) >> 32 & 255)) + (24 << ((_0xa41861 ^ _0x2e3fa9) >> 24 & 255)) + (32 << ((_0xa41861 ^ _0x2e3fa9) >> 8 & 255)) + (8 << ((_0xa41861 ^ _0x2e3fa9) >> 16 & 255));
  const _0x3c57fa = (8 << ((_0x181d52 ^ _0x18e9fa) >> 32 & 255)) + (16 << ((_0x181d52 ^ _0x18e9fa) >> 8 & 255)) + (32 << ((_0x181d52 ^ _0x18e9fa) >> 16 & 255)) + (24 << ((_0x181d52 ^ _0x18e9fa) >> 24 & 255));
  return _0x3c57fa;
}
function fun15_token(_0x4e1003, _0xd5ed0b, _0x2e95e5, _0x326f97, _0x34d3cf) {
  const _0x23b7b5 = _0x4e1003 ^ 62008;
  const _0x520326 = (24 << (_0xd5ed0b >> 32 & 255)) + (8 << (_0xd5ed0b >> 16 & 255)) + (32 << (_0xd5ed0b >> 8 & 255)) + (16 << (_0xd5ed0b >> 24 & 255));
  const _0xc237ea = ((_0x2e95e5 + 46531) * 22695477 + 1) % 4294967296;
  const _0x22331c = ~(_0x326f97 & 1884) & 1884 | ~(_0x326f97 & 1884) & _0x326f97;
  const _0x2dd13c = ~(_0x34d3cf & 55588) & 55588 | ~(_0x34d3cf & 55588) & _0x34d3cf;
  const _0x10bb82 = fun16_token(_0x23b7b5, _0x520326, _0xc237ea, _0x22331c, _0x2dd13c);
  const _0x16ee9a = fun33_token(_0x23b7b5, _0x520326, _0xc237ea, _0x22331c, _0x2dd13c, _0x23b7b5);
  const _0x1fcfbd = fun22_token(_0x520326, _0xc237ea, _0x22331c, _0x2dd13c, _0x23b7b5);
  const _0x462f00 = _0x10bb82 ^ 57467;
  const _0x17611e = (((_0x462f00 ^ _0x1fcfbd) + 3037) * 1664525 + 1013904223) % 4294967296;
  return _0x17611e;
}
function fun27_token(_0x39a288, _0x164213) {
  const _0x1ea0a0 = ((_0x39a288 + 44664) * 1664525 + 1013904223) % 4294967296;
  const _0x4afe23 = _0x164213 ^ 53080;
  const _0x58f0dd = fun28_token(_0x1ea0a0, _0x4afe23, _0x1ea0a0, _0x4afe23, _0x1ea0a0);
  const _0xca23df = fun32_token(_0x4afe23, _0x1ea0a0, _0x4afe23, _0x1ea0a0, _0x4afe23);
  const _0x27542d = fun36_token(_0x1ea0a0, _0x4afe23, _0x1ea0a0, _0x4afe23);
  const _0x58b70a = ((_0x58f0dd ^ _0xca23df) + 17769) % 65357;
  const _0x316442 = (1 + ((_0x58b70a ^ _0x27542d) + 57525) * 22695477) % 4294967296;
  return _0x316442;
}
function fun32_token(_0x49984f, _0xcaf2e8, _0x42542e, _0x333457, _0x28e5a6) {
  const _0xf789fe = ~(_0x49984f & 42203) & _0x49984f | ~(_0x49984f & 42203) & 42203;
  const _0x190bc3 = _0xcaf2e8 ^ 50118;
  const _0x216eca = _0x42542e ^ 41620;
  const _0x54b1e8 = ((_0x333457 + 34240) * 2147483629 + 2147483587) % 2147483647;
  const _0x2da405 = (32 << (_0x28e5a6 >> 16 & 255)) + (16 << (_0x28e5a6 >> 8 & 255)) + (8 << (_0x28e5a6 >> 32 & 255)) + (24 << (_0x28e5a6 >> 24 & 255));
  const _0x5f3b21 = fun33_token(_0xf789fe, _0x190bc3, _0x216eca, _0x54b1e8, _0x2da405, _0xf789fe);
  const _0x48061f = fun33_token(_0x190bc3, _0x216eca, _0x54b1e8, _0x2da405, _0xf789fe, _0x190bc3);
  const _0x58d222 = fun36_token(_0x216eca, _0x54b1e8, _0x2da405, _0xf789fe);
  const _0x535892 = (_0x5f3b21 | 43477) & ~(_0x5f3b21 & 43477);
  const _0x4534e5 = (2531011 + ((_0x535892 ^ _0x58d222) + 53616) * 214013) % 4294967296;
  return _0x4534e5;
}
function fun28_token(_0x14152f, _0x10fb25, _0x2b0193, _0x2d0ab1, _0x1101fd) {
  const _0x487aca = (16 << (_0x14152f >> 32 & 255)) + (24 << (_0x14152f >> 24 & 255)) + (8 << (_0x14152f >> 8 & 255)) + (32 << (_0x14152f >> 16 & 255));
  const _0x362750 = _0x10fb25 ^ 55978;
  const _0x13b075 = ((_0x2b0193 + 2934) * 1664525 + 1013904223) % 4294967296;
  const _0x39030e = ~(_0x2d0ab1 & 30642) & (_0x2d0ab1 | 30642);
  const _0xf0ecd4 = (8 << (_0x1101fd >> 8 & 255)) + (24 << (_0x1101fd >> 32 & 255)) + (16 << (_0x1101fd >> 24 & 255)) + (32 << (_0x1101fd >> 16 & 255));
  const _0x1b6b71 = fun32_token(_0x487aca, _0x362750, _0x13b075, _0x39030e, _0xf0ecd4);
  const _0x30e8dc = fun29_token(_0x487aca, _0x362750, _0x13b075, _0x39030e, _0xf0ecd4);
  const _0x19c247 = fun36_token(_0x487aca, _0x362750, _0x13b075, _0x39030e);
  const _0x1cc27f = (16 << ((_0x1b6b71 ^ _0x30e8dc) >> 32 & 255)) + (24 << ((_0x1b6b71 ^ _0x30e8dc) >> 8 & 255)) + (8 << ((_0x1b6b71 ^ _0x30e8dc) >> 24 & 255)) + (32 << ((_0x1b6b71 ^ _0x30e8dc) >> 16 & 255));
  const _0x2b3d9b = ~(_0x1cc27f & 23686) & (_0x1cc27f | 23686);
  return _0x2b3d9b;
}
function fun22_token(_0x47e9e0, _0x15dd6e, _0x30a1ba, _0x4209a6, _0x3f4931) {
  const _0x56829c = ((_0x47e9e0 + 49173) * 1103515245 + 12345) % 2147483648;
  const _0x463f12 = (_0x15dd6e + 52922) % 65337;
  const _0x7d0e0a = _0x30a1ba ^ 25250;
  const _0x5966cf = ~(_0x4209a6 & 10903) & 10903 | ~(_0x4209a6 & 10903) & _0x4209a6;
  const _0x57c814 = ~(_0x3f4931 & 33814) & 33814 | ~(_0x3f4931 & 33814) & _0x3f4931;
  const _0x2b9652 = fun31_token(_0x56829c, _0x463f12, _0x7d0e0a, _0x5966cf, _0x57c814);
  const _0x28433c = fun23_token(_0x56829c, _0x463f12);
  const _0x441eeb = fun31_token(_0x7d0e0a, _0x5966cf, _0x57c814, _0x56829c, _0x463f12);
  const _0x45e637 = (1 + ((_0x2b9652 ^ _0x28433c) + 19675) * 22695477) % 4294967296;
  const _0x266010 = ~(_0x45e637 & 7922) & _0x45e637 | ~(_0x45e637 & 7922) & 7922;
  return _0x266010;
}
function fun23_token(_0x24f0aa, _0x140af1) {
  const _0xa2b556 = _0x24f0aa ^ 24508;
  const _0x261735 = (16 << (_0x140af1 >> 16 & 255)) + (24 << (_0x140af1 >> 8 & 255)) + (32 << (_0x140af1 >> 32 & 255)) + (8 << (_0x140af1 >> 24 & 255));
  const _0x26016a = fun26_token(_0xa2b556, _0x261735, _0xa2b556, _0x261735, _0xa2b556);
  const _0x19d00b = fun28_token(_0x261735, _0xa2b556, _0x261735, _0xa2b556, _0x261735);
  const _0x1cb54e = fun24_token(_0xa2b556, _0x261735, _0xa2b556, _0x261735, _0xa2b556);
  const _0x1f0958 = (((_0x26016a ^ _0x19d00b) + 11269) * 2147483629 + 2147483587) % 2147483647;
  const _0x366806 = ~(_0x1f0958 & 40927) & 40927 | ~(_0x1f0958 & 40927) & _0x1f0958;
  return _0x366806;
}
function fun25_token(_0x48335a, _0x119db3, _0x308ed2) {
  const _0x5e7b38 = _0x48335a ^ 23323;
  const _0x50db66 = (2531011 + (61713 + _0x119db3) * 214013) % 4294967296;
  const _0xbe2367 = (_0x308ed2 | 24198) & ~(_0x308ed2 & 24198);
  const _0x1687b9 = fun26_token(_0x5e7b38, _0x50db66, _0xbe2367, _0x5e7b38, _0x50db66);
  const _0x3f1117 = fun26_token(_0xbe2367, _0x5e7b38, _0x50db66, _0xbe2367, _0x5e7b38);
  const _0x21877a = fun26_token(_0x50db66, _0xbe2367, _0x5e7b38, _0x50db66, _0xbe2367);
  const _0x4aa322 = (16 << ((_0x1687b9 ^ _0x3f1117) >> 32 & 255)) + (8 << ((_0x1687b9 ^ _0x3f1117) >> 8 & 255)) + (24 << ((_0x1687b9 ^ _0x3f1117) >> 24 & 255)) + (32 << ((_0x1687b9 ^ _0x3f1117) >> 16 & 255));
  const _0x23a1af = _0x4aa322 ^ 31181;
  return _0x23a1af;
}
function fun33_token(_0x146402, _0xb0281c, _0x89a19b, _0x382a98, _0x269bfe, _0x39713e) {
  const _0x3a7fff = (_0x146402 + 52483) % 65496;
  const _0x2fa0ce = (16 << (_0xb0281c >> 16 & 255)) + (24 << (_0xb0281c >> 8 & 255)) + (32 << (_0xb0281c >> 24 & 255)) + (8 << (_0xb0281c >> 32 & 255));
  const _0xae902b = _0x89a19b ^ 8102;
  const _0xfb4a4a = (24 << (_0x382a98 >> 16 & 255)) + (32 << (_0x382a98 >> 32 & 255)) + (8 << (_0x382a98 >> 24 & 255)) + (16 << (_0x382a98 >> 8 & 255));
  const _0x9ae9e7 = ~(_0x269bfe & 29687) & 29687 | ~(_0x269bfe & 29687) & _0x269bfe;
  const _0x4947b0 = (1 + (62237 + _0x39713e) * 22695477) % 4294967296;
  const _0x29707e = fun34_token(_0x3a7fff, _0x2fa0ce);
  const _0xa39f12 = fun34_token(_0xae902b, _0xfb4a4a);
  const _0x4a0978 = fun34_token(_0x9ae9e7, _0x4947b0);
  const _0x2c750f = (45290 + (_0x29707e ^ _0xa39f12)) % 65334;
  const _0x3cd329 = _0x2c750f ^ 55575;
  return _0x3cd329;
}
function fun2_token(_0x12d472, _0x4b9511) {
  const _0x358838 = (16 << (_0x12d472 >> 8 & 255)) + (32 << (_0x12d472 >> 16 & 255)) + (8 << (_0x12d472 >> 32 & 255)) + (24 << (_0x12d472 >> 24 & 255));
  const _0x109b63 = (32 << (_0x4b9511 >> 32 & 255)) + (24 << (_0x4b9511 >> 24 & 255)) + (8 << (_0x4b9511 >> 8 & 255)) + (16 << (_0x4b9511 >> 16 & 255));
  const _0x250d3d = fun30_token(_0x358838, _0x109b63, _0x358838, _0x109b63, _0x358838, _0x109b63);
  const _0x554316 = fun3_token(_0x358838, _0x109b63, _0x358838, _0x109b63, _0x358838);
  const _0xb7f171 = fun27_token(_0x109b63, _0x358838);
  const _0x2f7f2b = (_0x250d3d | 58283) & ~(_0x250d3d & 58283);
  const _0x3102fa = _0x2f7f2b ^ 8337;
  return _0x3102fa;
}
Utils = {
  get_recaptcha_token: get_recaptcha_token,
  open_in_new_tab: function (_0x36ac33) {
    var _0x4f90c4 = window.open(_0x36ac33, "_blank");
    _0x4f90c4.focus();
  },
  open_in_new_box: function (_0x299ff7) {
    window.open(_0x299ff7, "_blank", "location=yes,height=570,width=520,scrollbars=yes,status=yes");
  },
  compare_object: function (_0x46a0fa, _0x157b85) {
    for (var _0x4b1a47 in _0x46a0fa) {
      if (_0x46a0fa[_0x4b1a47] != _0x157b85[_0x4b1a47]) {
        return false;
      }
    }
    return true;
  },
  compare_array: function (_0x2edb0c, _0x5095d2) {
    if (_0x2edb0c.length != _0x5095d2.length) {
      return false;
    }
    for (var _0x1c6a5b = 0; _0x1c6a5b < _0x2edb0c.length; _0x1c6a5b++) {
      if (typeof _0x2edb0c == "object") {
        if (!this.compare_object(_0x2edb0c[_0x1c6a5b], _0x5095d2[_0x1c6a5b])) {
          return false;
        }
      } else if (_0x2edb0c[_0x1c6a5b] != _0x5095d2[_0x1c6a5b]) {
        return false;
      }
    }
    return true;
  },
  copy_vector: function (_0x3d8975, _0x2c88ef) {
    _0x2c88ef.x = _0x3d8975.x;
    _0x2c88ef.y = _0x3d8975.y;
  },
  get_vector: function (_0x40f290, _0x224f3e) {
    return {
      x: _0x40f290.x - _0x224f3e.x,
      y: _0x40f290.y - _0x224f3e.y
    };
  },
  mul_vector: function (_0x6109be, _0x5c3578) {
    _0x6109be.x *= _0x5c3578;
    _0x6109be.y *= _0x5c3578;
  },
  scalar_product: function (_0x1c9818, _0x18ca1d) {
    return _0x1c9818.x * _0x18ca1d.x + _0x1c9818.y * _0x18ca1d.y;
  },
  norm: function (_0x37441e) {
    return Math.sqrt(_0x37441e.x * _0x37441e.x + _0x37441e.y * _0x37441e.y);
  },
  sign: function (_0x3d24a1) {
    if (_0x3d24a1 < 0) {
      return -1;
    } else {
      return 1;
    }
  },
  cross_product: function (_0x26d320, _0x7db13a) {
    return _0x26d320.x * _0x7db13a.y - _0x26d320.y * _0x7db13a.x;
  },
  get_angle_2: function (_0x2afb24, _0x595fe1, _0x2cb5fa, _0x5bf083) {
    var _0x367802 = _0x5bf083 - _0x595fe1;
    var _0x39e188 = _0x2cb5fa - _0x2afb24;
    return Math.atan2(_0x367802, _0x39e188);
  },
  get_angle: function (_0x284214, _0x36cb25) {
    return Math.acos(this.scalar_product(_0x284214, _0x36cb25) / (this.norm(_0x284214) * this.norm(_0x36cb25))) * this.sign(this.cross_product(_0x284214, _0x36cb25));
  },
  getURLData: function (_0x4a6295) {
    _url = location.href;
    _0x4a6295 = _0x4a6295.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var _0x328ca7 = "[\\?&]" + _0x4a6295 + "=([^&#]*)";
    var _0x65b52d = new RegExp(_0x328ca7);
    var _0x473946 = _0x65b52d.exec(_url);
    if (_0x473946 === null) {
      return null;
    } else {
      return _0x473946[1];
    }
  },
  reduceAngle: function (_0x2cf3fa, _0x387229) {
    var _0x3a0180 = Math.PI * 2;
    _0x387229 = (_0x387229 % _0x3a0180 + _0x3a0180) % _0x3a0180;
    if (Math.abs(_0x2cf3fa - _0x387229) > Math.PI) {
      if (_0x2cf3fa > _0x387229) {
        return _0x387229 + _0x3a0180;
      } else {
        return _0x387229 - _0x3a0180;
      }
    }
    return _0x387229;
  },
  get_std_angle: function (_0x3609c5, _0x2d35a1) {
    return this.get_angle({
      x: 1,
      y: 0
    }, this.get_vector(_0x3609c5, _0x2d35a1));
  },
  dist: function (_0x1e4a76, _0x59daf2) {
    return Math.sqrt((_0x59daf2.x - _0x1e4a76.x) * (_0x59daf2.x - _0x1e4a76.x) + (_0x59daf2.y - _0x1e4a76.y) * (_0x59daf2.y - _0x1e4a76.y));
  },
  build_vector: function (_0x4f0c2d, _0x379e78) {
    return {
      x: Math.cos(_0x379e78) * _0x4f0c2d,
      y: Math.sin(_0x379e78) * _0x4f0c2d
    };
  },
  add_vector: function (_0x3a01e7, _0x5deae3) {
    _0x3a01e7.x += _0x5deae3.x;
    _0x3a01e7.y += _0x5deae3.y;
  },
  sub_vector: function (_0x59f4bf, _0x3a6699) {
    _0x59f4bf.x -= _0x3a6699.x;
    _0x59f4bf.y -= _0x3a6699.y;
  },
  translate_vector: function (_0xc39fb1, _0x5e5716, _0x1987fa) {
    _0xc39fb1.x += _0x5e5716;
    _0xc39fb1.y += _0x1987fa;
  },
  translate_new_vector: function (_0x47555e, _0x5287db, _0x210e02) {
    return {
      x: _0x47555e.x + _0x5287db,
      y: _0x47555e.y + _0x210e02
    };
  },
  move: function (_0x32165a, _0x48587e, _0x4b5c57) {
    _0x32165a.x += Math.cos(_0x4b5c57) * _0x48587e;
    _0x32165a.y += Math.sin(_0x4b5c57) * _0x48587e;
  },
  middle: function (_0x5da142, _0x19205a) {
    return Math.floor((_0x5da142 - _0x19205a) / 2);
  },
  middle_point: function (_0x1f003c, _0x17053f) {
    return {
      x: (_0x1f003c.x + _0x17053f.x) / 2,
      y: (_0x1f003c.y + _0x17053f.y) / 2
    };
  },
  rand_sign: function () {
    if (Math.random() > 0.5) {
      return 1;
    } else {
      return -1;
    }
  },
  get_rand_pos_in_circle: function (_0x3a1396, _0x3eb35c, _0x307231) {
    var _0x22f078 = this.rand_sign();
    var _0x452dbc = this.rand_sign();
    var _0x4c23ad = Math.random() * Math.PI / 2;
    return {
      x: Math.floor(_0x3a1396 + Math.cos(_0x4c23ad) * _0x22f078 * _0x307231),
      y: Math.floor(_0x3eb35c + Math.sin(_0x4c23ad) * _0x452dbc * _0x307231)
    };
  },
  Box: function (_0x57f768, _0x133dca, _0xf6acc7, _0x181f14) {
    this.x = _0x57f768;
    this.y = _0x133dca;
    this.w = _0xf6acc7;
    this.h = _0x181f14;
  },
  randomize_list: function (_0x47abe5) {
    a = [];
    a.push.apply(a, _0x47abe5);
    var _0x41fea7 = [];
    while (a.length > 0) {
      var _0x348d47 = Math.floor(Math.random() * a.length);
      _0x41fea7.push(a[_0x348d47]);
      a.splice(_0x348d47, 1);
    }
    return _0x41fea7;
  },
  restore_number: function (_0x5dba91) {
    if (_0x5dba91 >= 20000) {
      _0x5dba91 = (_0x5dba91 - 20000) * 1000;
    } else if (_0x5dba91 >= 10000) {
      _0x5dba91 = (_0x5dba91 - 10000) * 100;
    }
    return _0x5dba91;
  },
  simplify_number: function (_0x40a1df) {
    if (typeof _0x40a1df !== "number") {
      return "0";
    } else if (_0x40a1df >= 10000) {
      var _0x541d27 = Math.floor(Math.log10(_0x40a1df)) - 2;
      var _0x2cd0aa = Math.max(0, 3 - _0x541d27);
      var _0x4344c7 = Math.floor(_0x40a1df / 1000).toString();
      if (_0x2cd0aa) {
        _0x4344c7 += "." + (_0x40a1df % 1000 / 1000).toString().substring(2).substring(0, _0x2cd0aa);
        ;
        for (var _0x51b6e0 = _0x4344c7.length - 1, _0x4e9479 = 0; _0x51b6e0 > 0; _0x51b6e0--) {
          if (_0x4344c7[_0x51b6e0] != "0") {
            break;
          } else {
            _0x4e9479++;
          }
        }
        _0x4344c7 = _0x4344c7.substring(0, _0x4344c7.length - _0x4e9479);
        if (_0x4344c7[_0x4344c7.length - 1] == ".") {
          _0x4344c7 = _0x4344c7.substring(0, _0x4344c7.length - 1);
        }
      }
      _0x4344c7 += "k";
      return _0x4344c7;
    } else {
      return _0x40a1df.toString();
    }
  },
  ease_out_quad: function (_0x6e227e) {
    return _0x6e227e * (2 - _0x6e227e);
  },
  ease_out_cubic: function (_0x618bc) {
    return --_0x618bc * _0x618bc * _0x618bc + 1;
  },
  ease_in_out_quad: function (_0x4be3e2) {
    if (_0x4be3e2 < 0.5) {
      return _0x4be3e2 * 2 * _0x4be3e2;
    } else {
      return -1 + (4 - _0x4be3e2 * 2) * _0x4be3e2;
    }
  },
  ease_in_out_cubic: function (_0x285370) {
    if (_0x285370 < 0.5) {
      return _0x285370 * 4 * _0x285370 * _0x285370;
    } else {
      return (_0x285370 - 1) * (_0x285370 * 2 - 2) * (_0x285370 * 2 - 2) + 1;
    }
  },
  ease_in_out_quart: function (_0x5eee00) {
    if (_0x5eee00 < 0.5) {
      return _0x5eee00 * 8 * _0x5eee00 * _0x5eee00 * _0x5eee00;
    } else {
      return 1 - --_0x5eee00 * 8 * _0x5eee00 * _0x5eee00 * _0x5eee00;
    }
  },
  ease_out_quart: function (_0x3d785a) {
    return 1 - --_0x3d785a * _0x3d785a * _0x3d785a * _0x3d785a;
  },
  ease_out_quint: function (_0x1337e1) {
    return 1 + --_0x1337e1 * _0x1337e1 * _0x1337e1 * _0x1337e1 * _0x1337e1;
  },
  LinearAnimation: function (_0x3940ee, _0xdf054, _0x225ff7, _0xdb4055, _0x4ad07f, _0x2cdca9) {
    this.o = _0x3940ee;
    this.v = _0xdf054;
    this.max = _0x225ff7;
    this.min = _0xdb4055;
    this.max_speed = _0x4ad07f;
    this.min_speed = _0x2cdca9;
    this.last = 0;
    this.update = function () {
      if (this.o) {
        var _0x1b2c15 = this.v + delta * this.max_speed;
        if (_0x1b2c15 > this.max) {
          this.v = this.max;
          this.o = false;
          return true;
        } else {
          this.v = _0x1b2c15;
        }
      } else {
        var _0x1b2c15 = this.v - delta * this.min_speed;
        if (_0x1b2c15 < this.min) {
          this.v = this.min;
          this.o = true;
        } else {
          this.v = _0x1b2c15;
        }
      }
    };
    return false;
  },
  Ease: function (_0x4ba6b5, _0xe03f89, _0x3f4084, _0x53d693, _0x5d7860, _0x4e0854) {
    this.fun = _0x4ba6b5;
    this.ed = _0xe03f89;
    this.em = _0x3f4084;
    this.sx = _0x53d693;
    this.x = _0x5d7860;
    this.ex = _0x4e0854;
    this.restart = function () {
      this.x = this.sex;
      this.ed = 0;
    };
    this.ease = function (_0x116e70) {
      if (_0x116e70 !== this.ex) {
        this.ex = _0x116e70;
        this.sx = this.x;
        this.ed = 0;
      }
      if (this.ex !== this.x) {
        this.ed += delta;
        if (this.ed > this.em) {
          this.x = this.ex;
        } else {
          var _0x478246 = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * _0x478246;
        }
      }
    };
  },
  Ease2d: function (_0x469050, _0x55e7b0, _0x12655c, _0x4bda4b, _0x1d5743, _0x48bddf, _0x1d2e45, _0x5d8bda, _0x164a9f) {
    this.fun = _0x469050;
    this.ed = _0x55e7b0;
    this.em = _0x12655c;
    this.sx = _0x4bda4b;
    this.sy = _0x1d5743;
    this.x = _0x48bddf;
    this.y = _0x1d2e45;
    this.ex = _0x5d8bda;
    this.ey = _0x164a9f;
    this.ease = function (_0x38bfac) {
      if (_0x38bfac.x != this.ex || _0x38bfac.y != this.ey) {
        this.ex = _0x38bfac.x;
        this.ey = _0x38bfac.y;
        this.sx = this.x;
        this.sy = this.y;
        this.ed = 0;
      }
      if (this.ex != this.x || this.ey != this.y) {
        this.ed += delta;
        if (this.ed > this.em) {
          this.x = this.ex;
          this.y = this.ey;
        } else {
          var _0xafbc04 = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * _0xafbc04;
          this.y = this.sy + (this.ey - this.sy) * _0xafbc04;
        }
      }
    };
  },
  generate_token: function (_0x540270) {
    var _0x1bf3a0 = "";
    for (var _0x46d7d0 = 0; _0x46d7d0 < _0x540270; _0x46d7d0++) {
      _0x1bf3a0 += String.fromCharCode(48 + Math.floor(Math.random() * 74));
    }
    return _0x1bf3a0;
  },
  gup: function (_0x43b974, _0x43a98d) {
    if (!_0x43a98d) {
      _0x43a98d = location.href;
    }
    _0x43b974 = _0x43b974.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var _0x4206a7 = "[\\?&]" + _0x43b974 + "=([^&#]*)";
    var _0x23e332 = new RegExp(_0x4206a7);
    var _0x10695c = _0x23e332.exec(_0x43a98d);
    if (_0x10695c == null) {
      return null;
    } else {
      return _0x10695c[1];
    }
  },
  inside_box: function (_0x5c6265, _0x3b2c08) {
    if (_0x5c6265.x >= _0x3b2c08.x && _0x5c6265.x <= _0x3b2c08.x + _0x3b2c08.w && _0x5c6265.y >= _0x3b2c08.y && _0x5c6265.y <= _0x3b2c08.y + _0x3b2c08.h) {
      return true;
    }
    return false;
  },
  intersect_aabb: function (_0x5d489b, _0x4858c5, _0x5e0037, _0x2a021f, _0x1f6013, _0x106f8a, _0x2c544b, _0x170ccd) {
    if (Math.max(_0x5d489b, _0x1f6013) < Math.min(_0x4858c5, _0x106f8a) && Math.max(_0x5e0037, _0x2c544b) < Math.min(_0x2a021f, _0x170ccd)) {
      return 1;
    }
    return 0;
  },
  lerp: function (_0xe820e3, _0x531ab4, _0x4b4836) {
    return (1 - _0x4b4836) * _0xe820e3 + _0x4b4836 * _0x531ab4;
  },
  escape_html: function (_0x5659bc) {
    return _0x5659bc.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
  }
};
Math.sign = Math.sign || function (_0x3d848c) {
  if (_0x3d848c === 0) {
    return 0;
  } else if (_0x3d848c > 0) {
    return 1;
  } else {
    return -1;
  }
};
Math.log10 = Math.log10 || function (_0x38a277) {
  return Math.log(_0x38a277) / Math.LOG10;
};
;
(function (_0x173e00) {
  var _0xb7674d = false;
  if (typeof define === "function" && define.amd) {
    define(_0x173e00);
    _0xb7674d = true;
  }
  if (typeof exports === "object") {
    module.exports = _0x173e00();
    _0xb7674d = true;
  }
  if (!_0xb7674d) {
    var _0x8f251b = window.Cookies;
    var _0x3ac33a = window.Cookies = _0x173e00();
    _0x3ac33a.noConflict = function () {
      window.Cookies = _0x8f251b;
      return _0x3ac33a;
    };
  }
})(function () {
  function _0x14ba41() {
    var _0x5c4f89 = 0;
    var _0x41be43 = {};
    for (; _0x5c4f89 < arguments.length; _0x5c4f89++) {
      var _0x378e53 = arguments[_0x5c4f89];
      for (var _0x176801 in _0x378e53) {
        _0x41be43[_0x176801] = _0x378e53[_0x176801];
      }
    }
    return _0x41be43;
  }
  function _0x190cbc(_0xcf9c34) {
    function _0x13710d(_0x2f9083, _0x13a4a6, _0x5166ed) {
      var _0x489fca;
      if (typeof document === "undefined") {
        return;
      }
      if (arguments.length > 1) {
        _0x5166ed = _0x14ba41({
          path: "/"
        }, _0x13710d.defaults, _0x5166ed);
        if (typeof _0x5166ed.expires === "number") {
          var _0x10d1d3 = new Date();
          _0x10d1d3.setMilliseconds(_0x10d1d3.getMilliseconds() + _0x5166ed.expires * 86400000);
          _0x5166ed.expires = _0x10d1d3;
        }
        try {
          _0x489fca = JSON.stringify(_0x13a4a6);
          if (/^[\{\[]/.test(_0x489fca)) {
            _0x13a4a6 = _0x489fca;
          }
        } catch (_0x5e8a9a) {}
        if (!_0xcf9c34.write) {
          _0x13a4a6 = encodeURIComponent(String(_0x13a4a6)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
        } else {
          _0x13a4a6 = _0xcf9c34.write(_0x13a4a6, _0x2f9083);
        }
        _0x2f9083 = encodeURIComponent(String(_0x2f9083));
        _0x2f9083 = _0x2f9083.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
        _0x2f9083 = _0x2f9083.replace(/[\(\)]/g, escape);
        return document.cookie = [_0x2f9083, "=", _0x13a4a6, _0x5166ed.expires ? "; expires=" + _0x5166ed.expires.toUTCString() : "", _0x5166ed.path ? "; path=" + _0x5166ed.path : "", _0x5166ed.domain ? "; domain=" + _0x5166ed.domain : "", _0x5166ed.secure ? "; secure" : ""].join("");
      }
      if (!_0x2f9083) {
        _0x489fca = {};
      }
      var _0x3f0369 = document.cookie ? document.cookie.split("; ") : [];
      var _0x40c6e2 = /(%[0-9A-Z]{2})+/g;
      var _0x56a9c6 = 0;
      for (; _0x56a9c6 < _0x3f0369.length; _0x56a9c6++) {
        var _0x3ad5cf = _0x3f0369[_0x56a9c6].split("=");
        var _0x278b38 = _0x3ad5cf.slice(1).join("=");
        if (_0x278b38.charAt(0) === "\"") {
          _0x278b38 = _0x278b38.slice(1, -1);
        }
        try {
          var _0x48da32 = _0x3ad5cf[0].replace(_0x40c6e2, decodeURIComponent);
          _0x278b38 = _0xcf9c34.read ? _0xcf9c34.read(_0x278b38, _0x48da32) : _0xcf9c34(_0x278b38, _0x48da32) || _0x278b38.replace(_0x40c6e2, decodeURIComponent);
          if (this.json) {
            try {
              _0x278b38 = JSON.parse(_0x278b38);
            } catch (_0x8c6e9) {}
          }
          if (_0x2f9083 === _0x48da32) {
            _0x489fca = _0x278b38;
            break;
          }
          if (!_0x2f9083) {
            _0x489fca[_0x48da32] = _0x278b38;
          }
        } catch (_0x23b41b) {}
      }
      return _0x489fca;
    }
    _0x13710d.set = _0x13710d;
    _0x13710d.get = function (_0x1dd9c0) {
      return _0x13710d.call(_0x13710d, _0x1dd9c0);
    };
    _0x13710d.getJSON = function () {
      return _0x13710d.apply({
        json: true
      }, [].slice.call(arguments));
    };
    _0x13710d.defaults = {};
    _0x13710d.remove = function (_0x2c04b5, _0x1fc692) {
      _0x13710d(_0x2c04b5, "", _0x14ba41(_0x1fc692, {
        expires: -1
      }));
    };
    _0x13710d.withConverter = _0x190cbc;
    return _0x13710d;
  }
  return _0x190cbc(function () {});
});
function Mouse() {
  this.DOWN = 0;
  this.UP = 1;
  this.IDLE = 2;
  this.IN = 0;
  this.OUT = 1;
  this.pos = {
    x: 0,
    y: 0
  };
  this.x_old = 0;
  this.y_old = 0;
  this.angle = 0;
  this.state = this.IDLE;
  this.dist = this.IN;
  this.down = function () {
    this.state = this.DOWN;
  };
  this.up = function () {
    this.state = this.UP;
  };
  this.update = function () {
    if (this.pos.x != this.x_old || this.pos.y != this.y_old) {
      this.x_old = this.pos.x;
      this.y_old = this.pos.y;
      return true;
    }
    return false;
  };
}
function Keyboard() {
  this.set_azerty = function () {
    this.LEFT = 81;
    this.RIGHT = 68;
    this.TOP = 90;
    this.DOWN = 83;
  };
  this.set_qwerty = function () {
    this.LEFT = 65;
    this.RIGHT = 68;
    this.TOP = 87;
    this.BOTTOM = 83;
  };
  this.UP = 0;
  this.DOWN = 1;
  this._1 = 49;
  this._2 = 50;
  this._3 = 51;
  this._4 = 52;
  this._5 = 53;
  this.CTRL = 17;
  this.ARROW_LEFT = 37;
  this.ARROW_RIGHT = 39;
  this.ARROW_TOP = 38;
  this.ARROW_BOTTOM = 40;
  this.SPACE = 32;
  this.R = 82;
  this.G = 71;
  this.V = 86;
  this.B = 66;
  this.set_qwerty();
  this.keys = new Array(255);
  for (var _0x446ee0 = 0; _0x446ee0 < 255; _0x446ee0++) {
    this.keys[_0x446ee0] = this.UP;
  }
  this.up = function (_0x1afe70) {
    var _0x32bf06 = Math.min(_0x1afe70.charCode || _0x1afe70.keyCode, 255);
    this.keys[_0x32bf06] = this.UP;
  };
  this.down = function (_0x5ac994) {
    var _0x1940b5 = Math.min(_0x5ac994.charCode || _0x5ac994.keyCode, 255);
    if (_0x1940b5 == this.LEFT || _0x1940b5 == this.ARROW_LEFT) {
      this.press_left();
    } else if (_0x1940b5 == this.TOP || _0x1940b5 == this.ARROW_TOP) {
      this.press_top();
    } else if (_0x1940b5 == this.DOWN || _0x1940b5 == this.ARROW_DOWN) {
      this.press_bottom();
    } else if (_0x1940b5 == this.RIGHT || _0x1940b5 == this.ARROW_RIGHT) {
      this.press_right();
    }
    this.keys[_0x1940b5] = this.DOWN;
    return _0x1940b5;
  };
  this.press_left = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
  };
  this.press_right = function () {
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
  };
  this.press_bottom = function () {
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
  };
  this.press_top = function () {
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.clear_directionnal = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.is_left = function () {
    return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
  };
  this.is_right = function () {
    return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
  };
  this.is_top = function () {
    return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
  };
  this.is_bottom = function () {
    return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
  };
  this.is_ctrl = function () {
    return this.keys[this.CTRL];
  };
  this.is_1 = function () {
    return this.keys[this._1];
  };
  this.is_2 = function () {
    return this.keys[this._2];
  };
  this.is_3 = function () {
    return this.keys[this._3];
  };
  this.is_4 = function () {
    return this.keys[this._4];
  };
  this.is_space = function () {
    return this.keys[this.SPACE];
  };
  this.is_r = function () {
    return this.keys[this.R];
  };
  this.is_g = function () {
    return this.keys[this.G];
  };
  this.is_v = function () {
    return this.keys[this.V];
  };
  this.is_b = function () {
    return this.keys[this.B];
  };
}
var can = document.getElementById("game_canvas");
var ctx = can.getContext("2d");
var canw = can.width;
var canh = can.height;
var canw2 = can.width / 2;
var canh2 = can.height / 2;
var canm = {
  x: canw2,
  y: canh2
};
var scale = 1;
var ratio = 1;
var ratio_opt = -1;
var JUNK10;
var JUNK8 = "J" + JUNK3;
var JUNK6 = "S" + JUNK4;
var WINDOW1 = window;
var JUNK4;
var JSONWORD2;
var JUNK1 = "O";
var JUNK2 = JUNK1 + "N";
var JSONWORD1 = "O";
var JSONWORD12 = 0;
var JUNK3;
var WINDOW2 = WINDOW1;
var JUNK4;
var JSONWORD3;
var JUNK6 = "N";
var JUNK7 = "J";
var JUNK1 = "O" + JUNK3;
var JUNK8;
var WINDOW3 = WINDOW2;
var JUNK9;
var JUNK10;
var JSONWORD4;
var JUNK5;
var JUNK4;
var JUNK3;
var WINDOW4 = WINDOW3;
var JUNK2 = "N" + JUNK5;
var JUNK2;
var WINDOW5 = WINDOW4;
var JSONWORD5;
var JUNK1;
var JUNK10;
var JUNK9 = "";
var JSONWORD6;
var WINDOW6 = WINDOW5;
var JSONWORD7;
var JUNK4;
var JUNK3;
var WINDOW7 = WINDOW6;
var JUNK1;
var JSONWORD8;
var JUNK8;
var WINDOW8 = WINDOW7;
var JUNK7 = "O";
var JUNK10 = "J";
var JUNK6;
var JSONWORD9;
var JUNK10;
var WINDOW8 = WINDOW7;
var JSONWORD9 = "S";
var WINDOW9 = WINDOW8;
var JUNK5;
var JSONWORD10;
var WINDOW10 = WINDOW9;
var JUNK4 = JUNK10 + JSONWORD9;
can.oncontextmenu = function () {
  return false;
};
JUNK8 = JUNK10;
JUNK9 = JUNK8;
function CTI(_0x172bea) {
  var _0x107c18 = new Image();
  _0x107c18.src = _0x172bea.toDataURL("image/png");
  _0x107c18.width = _0x172bea.width;
  _0x107c18.height = _0x172bea.height;
  _0x107c18.isLoaded = 1;
  return _0x107c18;
}
JUNK8 = JUNK6;
JUNK7 = JUNK7 + JUNK8;
JSONWORD1 = JUNK4 + JUNK7;
JSONWORD2 = JSONWORD1;
JUNK1 = JUNK2;
JSONWORD3 = JSONWORD2;
JUNK2 = JUNK3;
JUNK3 = JUNK4;
JSONWORD5 = JUNK4 + JUNK7;
JUNK3 = JUNK4;
JUNK1 = JUNK4;
JSONWORD4 = JSONWORD5;
JUNK6 = JUNK7 + JUNK8;
JSONWORD6 = JSONWORD2;
JUNK1 = JUNK4 + JUNK7;
JSONWORD7 = JSONWORD1;
JUNK2 = JUNK4 + JUNK7;
JSONWORD8 = JSONWORD3;
JUNK7 = JUNK3;
JSONWORD9 = JSONWORD1;
JSONWORD10 = JSONWORD2;
JUNK8 = JUNK1;
var devicePixelRatio = window.devicePixelRatio || 1;
var backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;
function resize_canvas() {
  if (can.width != window.innerWidth) {
    can.width = window.innerWidth;
    canw = can.width;
    canw2 = can.width / 2;
  }
  if (can.height != window.innerHeight) {
    can.height = window.innerHeight;
    canh = can.height;
    canh2 = can.height / 2;
  }
  canm = {
    x: canw2,
    y: canh2
  };
  var _0x2c89a5 = can.width;
  var _0x5ddb06 = can.height;
  if (ratio_opt === -1) {
    ratio = devicePixelRatio / backingStoreRatio;
  } else {
    ratio = ratio_opt;
  }
  can.width = _0x2c89a5 * ratio;
  can.height = _0x5ddb06 * ratio;
  can.style.width = _0x2c89a5 + "px";
  can.style.height = _0x5ddb06 + "px";
  ctx.scale(ratio, ratio);
  if (user) {
    user.cam.rw = _0x2c89a5;
    user.cam.rh = _0x5ddb06;
  }
  if (loader.is_run) {
    loader.update();
  } else if (ui.is_run) {
    ui.update();
  } else if (game.is_run) {
    game.update();
  } else if (scoreboard.is_run) {
    scoreboard.update();
  }
}
var game_body = document.getElementById("game_body");
game_body.ondragstart = function () {
  return false;
};
game_body.ondrop = function () {
  return false;
};
game_body.onresize = resize_canvas;
(function () {
  var _0x180eca = 0;
  var _0xa46d45 = ["ms", "moz", "webkit", "o"];
  for (var _0x2ccf02 = 0; _0x2ccf02 < _0xa46d45.length && !window.requestAnimationFrame; ++_0x2ccf02) {
    window.requestAnimationFrame = window[_0xa46d45[_0x2ccf02] + "RequestAnimationFrame"];
    window.cancelAnimationFrame = window[_0xa46d45[_0x2ccf02] + "CancelAnimationFrame"] || window[_0xa46d45[_0x2ccf02] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (_0x1c59ec, _0x5006b7) {
      var _0xa5158d = new Date().getTime();
      var _0x25f1e3 = Math.max(0, 16 - (_0xa5158d - _0x180eca));
      var _0x4ae97b = window.setTimeout(function () {
        _0x1c59ec(_0xa5158d + _0x25f1e3);
      }, _0x25f1e3);
      _0x180eca = _0xa5158d + _0x25f1e3;
      return _0x4ae97b;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (_0x2aa666) {
      clearTimeout(_0x2aa666);
    };
  }
})();
var lang = navigator.language || navigator.userLanguage;
var timezone = -(new Date().getTimezoneOffset() / 60);
var TZ_EU = "Europe";
var TZ_RU = "Russia";
var TZ_NA = "North America";
var TZ_SA = "South America";
var TZ_WA = "West America";
var TZ_AS = "Asia";
var TZ_AU = "Australia";
var TZ = TZ_EU;
if (timezone >= -2 && timezone <= 2) {
  TZ = TZ_EU;
} else if (timezone > 2 && timezone <= 5) {
  TZ = TZ_RU;
} else if (timezone > 5 && timezone <= 9) {
  TZ = TZ_AS;
} else if (timezone > 9) {
  TZ = TZ_AU;
} else if (timezone >= -5 && timezone < -2) {
  if (lang === "pt-BR" || lang === "pt-br" || lang === "pt" || lang === "pt-pt") {
    TZ = TZ_SA;
  } else {
    TZ = TZ_NA;
  }
} else if (timezone < -5) {
  if (lang === "pt-BR" || lang === "pt-br" || lang === "pt" || lang === "pt-pt") {
    TZ = TZ_SA;
  } else {
    TZ = TZ_WA;
  }
}
var RNG = function () {
  function _0x19aac8(_0x427e9a) {
    var _0x6950e9 = 2147483648;
    var _0x29a172 = 1103515245;
    var _0x504ff6 = 12345;
    var _0x3df363 = _0x427e9a ? _0x427e9a : Math.floor(Math.random() * (_0x6950e9 - 1));
    this.init = function (_0x39feae) {
      _0x3df363 = _0x39feae ? _0x39feae : Math.floor(Math.random() * (_0x6950e9 - 1));
    };
    this.get = function () {
      _0x3df363 = (_0x29a172 * _0x3df363 + _0x504ff6) % _0x6950e9;
      return _0x3df363 / _0x6950e9;
    };
  }
  ;
  return {
    Random: _0x19aac8
  };
}();
var ___MAP___ = [[0, "DRAGON", 18, 6, 66, 35, 0], [0, "WINTER", 91, 18, 5, 40, 8], [0, "DESERT", 135, 180, 89, 124, 5], [0, "LAVA", 142, 6, 82, 99, 6], [0, "FOREST", 6, 150, 90, 154, 8], [0, "WINTER", 6, 6, 90, 150, 0], [1, "b", 0, 5, 175, 0], [1, "t", 2, 5, 174, 0], [1, "t", 5, 5, 173, 0], [1, "b", 3, 5, 176, 0], [1, "t", 0, 5, 177, 0], [1, "t", 3, 5, 178, 0], [1, "t", 4, 5, 179, 0], [1, "b", 0, 5, 180, 0], [1, "t", 5, 5, 181, 0], [1, "b", 2, 5, 182, 0], [1, "b", 1, 5, 183, 0], [1, "b", 2, 5, 184, 0], [1, "t", 5, 5, 185, 0], [1, "t", 2, 5, 186, 0], [1, "t", 0, 5, 187, 0], [1, "t", 5, 5, 188, 0], [1, "t", 1, 5, 189, 0], [1, "b", 2, 5, 190, 0], [1, "t", 4, 5, 191, 0], [1, "b", 3, 5, 192, 0], [1, "t", 5, 5, 193, 0], [1, "t", 0, 5, 194, 0], [1, "t", 3, 5, 195, 0], [1, "b", 0, 5, 196, 0], [1, "t", 5, 5, 197, 0], [1, "t", 2, 5, 198, 0], [1, "b", 2, 5, 199, 0], [1, "t", 4, 5, 200, 0], [1, "t", 1, 5, 201, 0], [1, "b", 1, 5, 202, 0], [1, "t", 5, 5, 203, 0], [1, "t", 2, 5, 204, 0], [1, "t", 4, 5, 205, 0], [1, "b", 2, 5, 206, 0], [1, "t", 1, 5, 207, 0], [1, "t", 4, 5, 208, 0], [1, "t", 2, 5, 209, 0], [1, "b", 0, 5, 210, 0], [1, "t", 5, 5, 211, 0], [1, "t", 1, 5, 212, 0], [1, "t", 2, 5, 213, 0], [1, "b", 3, 5, 214, 0], [1, "t", 5, 5, 215, 0], [1, "b", 0, 5, 216, 0], [1, "t", 4, 5, 217, 0], [1, "t", 2, 5, 218, 0], [1, "t", 1, 5, 219, 0], [1, "t", 3, 5, 220, 0], [1, "t", 5, 5, 221, 0], [1, "t", 2, 5, 222, 0], [1, "t", 4, 5, 223, 0], [1, "b", 3, 5, 224, 0], [1, "t", 1, 5, 225, 0], [1, "t", 3, 5, 226, 0], [1, "b", 0, 5, 227, 0], [1, "t", 3, 5, 228, 0], [1, "t", 5, 5, 229, 0], [1, "t", 2, 5, 230, 0], [1, "t", 0, 5, 231, 0], [1, "b", 2, 5, 232, 0], [1, "t", 1, 5, 233, 0], [1, "t", 4, 5, 234, 0], [1, "b", 1, 5, 235, 0], [1, "t", 4, 5, 236, 0], [1, "t", 2, 5, 237, 0], [1, "t", 0, 5, 238, 0], [1, "t", 4, 5, 239, 0], [1, "b", 2, 5, 240, 0], [1, "t", 5, 5, 241, 0], [1, "b", 1, 5, 242, 0], [1, "t", 4, 5, 243, 0], [1, "t", 2, 5, 244, 0], [1, "t", 1, 5, 245, 0], [1, "b", 1, 5, 246, 0], [1, "t", 3, 5, 247, 0], [1, "b", 2, 5, 248, 0], [1, "t", 5, 5, 249, 0], [1, "t", 2, 5, 250, 0], [1, "t", 4, 5, 251, 0], [1, "b", 1, 5, 252, 0], [1, "t", 4, 5, 253, 0], [1, "t", 1, 5, 254, 0], [1, "t", 3, 5, 255, 0], [1, "t", 5, 5, 256, 0], [1, "b", 2, 5, 257, 0], [1, "t", 4, 5, 258, 0], [1, "b", 3, 5, 259, 0], [1, "t", 5, 5, 260, 0], [1, "b", 0, 5, 261, 0], [1, "t", 3, 5, 262, 0], [1, "t", 4, 5, 263, 0], [1, "t", 2, 5, 264, 0], [1, "b", 1, 5, 265, 0], [1, "b", 2, 5, 266, 0], [1, "t", 3, 5, 267, 0], [1, "t", 4, 5, 268, 0], [1, "t", 0, 5, 269, 0], [1, "t", 5, 5, 270, 0], [1, "t", 3, 5, 271, 0], [1, "t", 4, 5, 272, 0], [1, "t", 1, 5, 273, 0], [1, "b", 2, 5, 274, 0], [1, "t", 1, 5, 275, 0], [1, "t", 4, 5, 276, 0], [1, "b", 1, 5, 277, 0], [1, "b", 2, 5, 278, 0], [1, "t", 1, 5, 279, 0], [1, "t", 4, 5, 280, 0], [1, "t", 2, 5, 281, 0], [1, "t", 5, 5, 282, 0], [1, "b", 2, 5, 283, 0], [1, "t", 1, 5, 284, 0], [1, "b", 3, 5, 285, 0], [1, "t", 4, 5, 286, 0], [1, "t", 0, 5, 287, 0], [1, "t", 5, 5, 288, 0], [1, "t", 2, 5, 289, 0], [1, "b", 1, 5, 290, 0], [1, "t", 4, 5, 292, 0], [1, "t", 2, 5, 291, 0], [1, "b", 2, 5, 293, 0], [1, "t", 1, 5, 294, 0], [1, "t", 3, 5, 295, 0], [1, "t", 5, 5, 296, 0], [1, "b", 0, 5, 297, 0], [1, "b", 3, 5, 298, 0], [1, "t", 4, 5, 299, 0], [1, "t", 2, 5, 300, 0], [1, "t", 4, 5, 301, 0], [1, "b", 0, 5, 302, 0], [1, "b", 2, 5, 303, 0], [1, "t", 1, 6, 303, 0], [1, "t", 2, 7, 303, 0], [1, "t", 1, 5, 304, 0], [1, "t", 3, 6, 304, 0], [1, "t", 4, 7, 304, 0], [1, "t", 5, 8, 303, 0], [1, "b", 1, 8, 304, 0], [1, "b", 2, 9, 304, 0], [1, "b", 3, 12, 303, 0], [1, "b", 3, 17, 304, 0], [1, "t", 1, 9, 303, 0], [1, "t", 1, 15, 304, 0], [1, "t", 1, 13, 303, 0], [1, "t", 3, 10, 303, 0], [1, "t", 3, 14, 304, 0], [1, "t", 4, 10, 304, 0], [1, "t", 5, 11, 304, 0], [1, "t", 5, 14, 303, 0], [1, "t", 5, 16, 304, 0], [1, "t", 5, 13, 304, 0], [1, "t", 2, 12, 304, 0], [1, "t", 1, 11, 303, 0], [1, "b", 3, 15, 303, 0], [1, "b", 0, 16, 303, 0], [1, "t", 3, 17, 303, 0], [1, "t", 4, 18, 303, 0], [1, "t", 2, 19, 303, 0], [1, "t", 1, 20, 303, 0], [1, "b", 1, 21, 303, 0], [1, "t", 2, 22, 303, 0], [1, "t", 4, 23, 303, 0], [1, "b", 3, 24, 303, 0], [1, "t", 5, 25, 303, 0], [1, "t", 1, 26, 303, 0], [1, "t", 2, 27, 303, 0], [1, "t", 4, 28, 303, 0], [1, "b", 0, 18, 304, 0], [1, "t", 2, 19, 304, 0], [1, "t", 5, 20, 304, 0], [1, "b", 2, 21, 304, 0], [1, "t", 4, 22, 304, 0], [1, "t", 2, 23, 304, 0], [1, "t", 1, 24, 304, 0], [1, "t", 3, 25, 304, 0], [1, "t", 0, 27, 304, 0], [1, "t", 5, 26, 304, 0], [1, "b", 2, 28, 304, 0], [1, "t", 1, 29, 304, 0], [1, "b", 1, 29, 303, 0], [1, "b", 2, 30, 303, 0], [1, "t", 4, 31, 303, 0], [1, "t", 0, 32, 303, 0], [1, "t", 5, 33, 303, 0], [1, "t", 2, 34, 303, 0], [1, "t", 4, 35, 303, 0], [1, "t", 1, 36, 303, 0], [1, "b", 3, 37, 303, 0], [1, "t", 2, 32, 304, 0], [1, "t", 4, 30, 304, 0], [1, "t", 1, 31, 304, 0], [1, "b", 1, 33, 304, 0], [1, "t", 2, 35, 304, 0], [1, "t", 5, 34, 304, 0], [1, "b", 2, 36, 304, 0], [1, "t", 5, 37, 304, 0], [1, "t", 1, 38, 304, 0], [1, "b", 1, 40, 303, 0], [1, "t", 3, 39, 303, 0], [1, "t", 3, 42, 304, 0], [1, "t", 5, 38, 303, 0], [1, "t", 5, 39, 304, 0], [1, "t", 5, 41, 303, 0], [1, "t", 4, 41, 304, 0], [1, "t", 4, 44, 303, 0], [1, "b", 2, 40, 304, 0], [1, "b", 2, 43, 303, 0], [1, "t", 1, 42, 303, 0], [1, "t", 1, 43, 304, 0], [1, "t", 5, 44, 304, 0], [1, "b", 1, 45, 303, 0], [1, "t", 2, 45, 304, 0], [1, "t", 2, 46, 303, 0], [1, "t", 4, 47, 303, 0], [1, "b", 0, 48, 303, 0], [1, "t", 5, 49, 303, 0], [1, "t", 2, 50, 303, 0], [1, "t", 1, 51, 303, 0], [1, "t", 4, 52, 303, 0], [1, "t", 5, 46, 304, 0], [1, "t", 2, 47, 304, 0], [1, "t", 5, 48, 304, 0], [1, "t", 1, 49, 304, 0], [1, "t", 2, 50, 304, 0], [1, "b", 1, 53, 303, 0], [1, "b", 2, 51, 304, 0], [1, "t", 5, 52, 304, 0], [1, "t", 3, 53, 304, 0], [1, "b", 2, 54, 303, 0], [1, "t", 5, 54, 304, 0], [1, "t", 5, 55, 303, 0], [1, "t", 3, 56, 303, 0], [1, "t", 4, 57, 303, 0], [1, "t", 5, 58, 303, 0], [1, "b", 1, 55, 304, 0], [1, "t", 2, 56, 304, 0], [1, "t", 0, 57, 304, 0], [1, "t", 3, 58, 304, 0], [1, "t", 3, 63, 304, 0], [1, "t", 3, 59, 303, 0], [1, "t", 4, 59, 304, 0], [1, "t", 5, 60, 303, 0], [1, "t", 0, 60, 304, 0], [1, "t", 0, 66, 303, 0], [1, "t", 0, 70, 304, 0], [1, "t", 3, 61, 304, 0], [1, "t", 3, 67, 303, 0], [1, "t", 3, 73, 304, 0], [1, "t", 3, 76, 303, 0], [1, "t", 3, 78, 304, 0], [1, "t", 1, 61, 303, 0], [1, "t", 1, 73, 303, 0], [1, "t", 1, 79, 303, 0], [1, "b", 2, 62, 304, 0], [1, "b", 2, 70, 303, 0], [1, "t", 5, 62, 303, 0], [1, "t", 5, 68, 303, 0], [1, "t", 5, 71, 304, 0], [1, "t", 5, 77, 304, 0], [1, "t", 5, 75, 303, 0], [1, "t", 5, 64, 304, 0], [1, "t", 5, 65, 303, 0], [1, "t", 5, 80, 303, 0], [1, "t", 1, 76, 304, 0], [1, "t", 3, 63, 303, 0], [1, "t", 5, 82, 304, 0], [1, "b", 2, 65, 304, 0], [1, "t", 1, 64, 303, 0], [1, "t", 1, 68, 304, 0], [1, "t", 2, 69, 304, 0], [1, "t", 4, 69, 303, 0], [1, "t", 5, 66, 304, 0], [1, "t", 0, 67, 304, 0], [1, "b", 2, 72, 304, 0], [1, "t", 0, 71, 303, 0], [1, "t", 4, 72, 303, 0], [1, "t", 4, 74, 304, 0], [1, "t", 2, 74, 303, 0], [1, "t", 3, 75, 304, 0], [1, "t", 1, 77, 303, 0], [1, "t", 4, 78, 303, 0], [1, "t", 4, 79, 304, 0], [1, "t", 2, 80, 304, 0], [1, "b", 1, 81, 304, 0], [1, "t", 2, 81, 303, 0], [1, "t", 5, 82, 303, 0], [1, "t", 1, 83, 303, 0], [1, "b", 2, 83, 304, 0], [1, "t", 1, 84, 304, 0], [1, "t", 4, 84, 303, 0], [1, "t", 5, 85, 304, 0], [1, "t", 3, 85, 303, 0], [1, "b", 2, 86, 304, 0], [1, "t", 1, 86, 303, 0], [1, "b", 3, 87, 303, 0], [1, "t", 4, 87, 304, 0], [1, "t", 4, 88, 303, 0], [1, "t", 0, 88, 304, 0], [1, "b", 1, 89, 303, 0], [1, "t", 3, 89, 304, 0], [1, "t", 3, 90, 303, 0], [1, "t", 4, 90, 304, 0], [1, "t", 4, 91, 303, 0], [1, "t", 0, 91, 304, 0], [1, "b", 2, 92, 303, 0], [1, "t", 4, 92, 304, 0], [1, "t", 5, 93, 303, 0], [1, "t", 0, 93, 304, 0], [1, "b", 3, 94, 303, 0], [1, "b", 0, 94, 304, 0], [1, "b", 0, 95, 303, 0], [1, "t", 2, 95, 304, 0], [1, "f", 1, 5, 151, 1], [1, "f", 2, 5, 153, 1], [1, "f", 0, 5, 152, 1], [1, "f", 0, 5, 147, 1], [1, "f", 0, 5, 144, 1], [1, "f", 0, 5, 140, 1], [1, "f", 1, 5, 149, 1], [1, "f", 1, 5, 146, 1], [1, "f", 1, 5, 143, 1], [1, "f", 1, 5, 141, 1], [1, "f", 2, 5, 150, 1], [1, "f", 2, 5, 148, 1], [1, "f", 2, 5, 145, 1], [1, "f", 2, 5, 142, 1], [1, "f", 2, 5, 139, 1], [1, "f", 2, 5, 136, 1], [1, "f", 2, 5, 133, 1], [1, "f", 2, 5, 131, 1], [1, "f", 2, 5, 127, 1], [1, "f", 2, 5, 125, 1], [1, "f", 1, 5, 138, 1], [1, "f", 1, 5, 135, 1], [1, "f", 1, 5, 132, 1], [1, "f", 1, 5, 130, 1], [1, "f", 1, 5, 128, 1], [1, "f", 1, 5, 126, 1], [1, "f", 1, 5, 124, 1], [1, "f", 0, 5, 129, 1], [1, "f", 0, 5, 134, 1], [1, "f", 0, 5, 137, 1], [1, "f", 0, 5, 123, 1], [1, "f", 1, 5, 122, 1], [1, "f", 1, 5, 120, 1], [1, "f", 1, 5, 117, 1], [1, "f", 1, 5, 115, 1], [1, "f", 1, 5, 111, 1], [1, "f", 1, 5, 108, 1], [1, "f", 2, 5, 121, 1], [1, "f", 2, 5, 118, 1], [1, "f", 2, 5, 116, 1], [1, "f", 2, 5, 113, 1], [1, "f", 2, 5, 110, 1], [1, "f", 0, 5, 119, 1], [1, "f", 0, 5, 114, 1], [1, "f", 0, 5, 112, 1], [1, "f", 0, 5, 109, 1], [1, "f", 1, 5, 106, 1], [1, "f", 1, 5, 103, 1], [1, "f", 1, 5, 100, 1], [1, "f", 1, 5, 97, 1], [1, "f", 1, 5, 95, 1], [1, "f", 2, 5, 107, 1], [1, "f", 2, 5, 105, 1], [1, "f", 2, 5, 102, 1], [1, "f", 2, 5, 99, 1], [1, "f", 2, 5, 96, 1], [1, "f", 2, 5, 94, 1], [1, "f", 0, 5, 104, 1], [1, "f", 0, 5, 101, 1], [1, "f", 0, 5, 98, 1], [1, "f", 0, 5, 93, 1], [1, "f", 1, 5, 92, 1], [1, "f", 1, 5, 89, 1], [1, "f", 1, 5, 86, 1], [1, "f", 1, 5, 83, 1], [1, "f", 1, 5, 80, 1], [1, "f", 1, 5, 78, 1], [1, "f", 2, 5, 90, 1], [1, "f", 2, 5, 88, 1], [1, "f", 2, 5, 85, 1], [1, "f", 2, 5, 82, 1], [1, "f", 2, 5, 79, 1], [1, "f", 2, 5, 77, 1], [1, "f", 2, 5, 75, 1], [1, "f", 2, 5, 72, 1], [1, "f", 0, 5, 91, 1], [1, "f", 0, 5, 87, 1], [1, "f", 0, 5, 84, 1], [1, "f", 0, 5, 81, 1], [1, "f", 0, 5, 76, 1], [1, "f", 0, 5, 74, 1], [1, "f", 1, 5, 73, 1], [1, "f", 1, 5, 71, 1], [1, "f", 1, 5, 68, 1], [1, "f", 1, 5, 66, 1], [1, "f", 1, 5, 62, 1], [1, "f", 1, 5, 59, 1], [1, "f", 1, 5, 56, 1], [1, "f", 1, 5, 53, 1], [1, "f", 1, 5, 50, 1], [1, "f", 2, 5, 70, 1], [1, "f", 2, 5, 67, 1], [1, "f", 2, 5, 65, 1], [1, "f", 2, 5, 63, 1], [1, "f", 2, 5, 60, 1], [1, "f", 2, 5, 57, 1], [1, "f", 2, 5, 54, 1], [1, "f", 2, 5, 51, 1], [1, "f", 0, 5, 69, 1], [1, "f", 0, 5, 64, 1], [1, "f", 0, 5, 61, 1], [1, "f", 0, 5, 58, 1], [1, "f", 0, 5, 55, 1], [1, "f", 0, 5, 52, 1], [1, "f", 0, 5, 49, 1], [1, "f", 0, 5, 45, 1], [1, "f", 0, 5, 42, 1], [1, "f", 0, 5, 38, 1], [1, "f", 0, 5, 34, 1], [1, "f", 0, 5, 31, 1], [1, "f", 1, 5, 48, 1], [1, "f", 1, 5, 44, 1], [1, "f", 1, 5, 41, 1], [1, "f", 1, 5, 37, 1], [1, "f", 1, 5, 33, 1], [1, "f", 1, 5, 29, 1], [1, "f", 2, 5, 30, 1], [1, "f", 2, 5, 32, 1], [1, "f", 2, 5, 35, 1], [1, "f", 2, 5, 39, 1], [1, "f", 2, 5, 46, 1], [1, "f", 2, 5, 43, 1], [1, "f", 1, 5, 47, 1], [1, "f", 0, 5, 40, 1], [1, "f", 0, 5, 36, 1], [1, "f", 0, 5, 28, 1], [1, "f", 1, 5, 25, 1], [1, "f", 1, 5, 22, 1], [1, "f", 1, 5, 20, 1], [1, "f", 1, 5, 16, 1], [1, "f", 1, 5, 13, 1], [1, "f", 1, 5, 10, 1], [1, "f", 2, 5, 27, 1], [1, "f", 2, 5, 24, 1], [1, "f", 2, 5, 21, 1], [1, "f", 2, 5, 19, 1], [1, "f", 2, 5, 15, 1], [1, "f", 2, 5, 12, 1], [1, "f", 2, 5, 9, 1], [1, "f", 0, 5, 26, 1], [1, "f", 0, 5, 23, 1], [1, "f", 0, 5, 14, 1], [1, "f", 0, 5, 11, 1], [1, "f", 0, 5, 17, 1], [1, "f", 1, 5, 18, 1], [1, "f", 1, 5, 8, 1], [1, "f", 0, 5, 7, 1], [1, "f", 1, 5, 6, 1], [1, "f", 0, 5, 5, 1], [1, "f", 1, 6, 5, 1], [1, "f", 2, 7, 5, 1], [1, "f", 0, 8, 5, 1], [1, "f", 1, 9, 5, 1], [1, "f", 1, 12, 5, 1], [1, "f", 1, 15, 5, 1], [1, "f", 1, 17, 5, 1], [1, "f", 1, 22, 5, 1], [1, "f", 1, 26, 5, 1], [1, "f", 2, 10, 5, 1], [1, "f", 2, 13, 5, 1], [1, "f", 2, 16, 5, 1], [1, "f", 2, 18, 5, 1], [1, "f", 2, 21, 5, 1], [1, "f", 2, 23, 5, 1], [1, "f", 2, 25, 5, 1], [1, "f", 2, 27, 5, 1], [1, "f", 0, 11, 5, 1], [1, "f", 0, 14, 5, 1], [1, "f", 0, 19, 5, 1], [1, "f", 0, 24, 5, 1], [1, "f", 0, 28, 5, 1], [1, "f", 1, 20, 5, 1], [1, "f", 1, 29, 5, 1], [1, "f", 1, 32, 5, 1], [1, "f", 1, 35, 5, 1], [1, "f", 1, 38, 5, 1], [1, "f", 1, 41, 5, 1], [1, "f", 1, 45, 5, 1], [1, "f", 2, 30, 5, 1], [1, "f", 2, 33, 5, 1], [1, "f", 2, 36, 5, 1], [1, "f", 2, 39, 5, 1], [1, "f", 2, 42, 5, 1], [1, "f", 2, 44, 5, 1], [1, "f", 2, 46, 5, 1], [1, "f", 0, 43, 5, 1], [1, "f", 0, 40, 5, 1], [1, "f", 0, 37, 5, 1], [1, "f", 0, 34, 5, 1], [1, "f", 0, 31, 5, 1], [1, "f", 0, 47, 5, 1], [1, "f", 1, 48, 5, 1], [1, "f", 1, 51, 5, 1], [1, "f", 1, 53, 5, 1], [1, "f", 1, 57, 5, 1], [1, "f", 1, 60, 5, 1], [1, "f", 1, 63, 5, 1], [1, "f", 1, 65, 5, 1], [1, "f", 2, 64, 5, 1], [1, "f", 2, 62, 5, 1], [1, "f", 2, 59, 5, 1], [1, "f", 2, 56, 5, 1], [1, "f", 2, 52, 5, 1], [1, "f", 2, 49, 5, 1], [1, "f", 2, 54, 5, 1], [1, "f", 0, 50, 5, 1], [1, "f", 0, 55, 5, 1], [1, "f", 0, 58, 5, 1], [1, "f", 0, 61, 5, 1], [1, "f", 0, 66, 5, 1], [1, "f", 1, 67, 5, 1], [1, "f", 1, 70, 5, 1], [1, "f", 1, 72, 5, 1], [1, "f", 1, 75, 5, 1], [1, "f", 1, 79, 5, 1], [1, "f", 2, 68, 5, 1], [1, "f", 2, 71, 5, 1], [1, "f", 2, 74, 5, 1], [1, "f", 2, 76, 5, 1], [1, "f", 2, 78, 5, 1], [1, "f", 0, 69, 5, 1], [1, "f", 0, 73, 5, 1], [1, "f", 0, 77, 5, 1], [1, "f", 0, 80, 5, 1], [1, "f", 1, 81, 5, 1], [1, "f", 1, 84, 5, 1], [1, "f", 1, 87, 5, 1], [1, "f", 1, 89, 5, 1], [1, "f", 1, 92, 5, 1], [1, "f", 1, 94, 5, 1], [1, "f", 0, 82, 5, 1], [1, "f", 2, 83, 5, 1], [1, "f", 2, 85, 5, 1], [1, "f", 2, 88, 5, 1], [1, "f", 2, 90, 5, 1], [1, "f", 2, 93, 5, 1], [1, "f", 2, 95, 5, 1], [1, "f", 0, 86, 5, 1], [1, "f", 0, 91, 5, 1], [1, "f", 2, 6, 153, 1], [1, "f", 1, 6, 152, 1], [1, "t", 1, 93, 301, 0], [1, "t", 3, 94, 302, 0], [1, "t", 5, 95, 302, 0], [1, "t", 5, 93, 302, 0], [1, "b", 3, 92, 302, 0], [1, "t", 1, 91, 302, 0], [1, "t", 5, 90, 302, 0], [1, "b", 2, 92, 301, 0], [1, "t", 1, 91, 301, 0], [1, "t", 2, 90, 301, 0], [1, "b", 2, 89, 302, 0], [1, "t", 4, 89, 301, 0], [1, "t", 1, 88, 302, 0], [1, "t", 2, 88, 301, 0], [1, "t", 3, 87, 302, 0], [1, "t", 4, 87, 299, 0], [1, "t", 4, 86, 302, 0], [1, "t", 1, 85, 302, 0], [1, "t", 5, 85, 301, 0], [1, "b", 2, 84, 302, 0], [1, "t", 5, 83, 302, 0], [1, "t", 1, 82, 302, 0], [1, "t", 5, 81, 302, 0], [1, "t", 2, 80, 302, 0], [1, "t", 4, 79, 302, 0], [1, "t", 2, 78, 302, 0], [1, "b", 1, 77, 302, 0], [1, "b", 2, 76, 302, 0], [1, "t", 2, 75, 302, 0], [1, "t", 4, 74, 302, 0], [1, "b", 1, 73, 302, 0], [1, "t", 2, 72, 302, 0], [1, "t", 4, 71, 302, 0], [1, "b", 3, 70, 302, 0], [1, "t", 1, 69, 302, 0], [1, "t", 2, 68, 302, 0], [1, "t", 5, 67, 302, 0], [1, "b", 1, 66, 302, 0], [1, "t", 2, 65, 302, 0], [1, "t", 4, 64, 302, 0], [1, "b", 3, 63, 302, 0], [1, "t", 5, 62, 302, 0], [1, "b", 1, 61, 302, 0], [1, "t", 3, 60, 302, 0], [1, "t", 4, 59, 302, 0], [1, "b", 2, 58, 302, 0], [1, "t", 5, 57, 302, 0], [1, "t", 1, 56, 302, 0], [1, "t", 3, 55, 302, 0], [1, "t", 4, 54, 302, 0], [1, "t", 1, 53, 302, 0], [1, "t", 5, 52, 302, 0], [1, "t", 2, 51, 302, 0], [1, "t", 4, 50, 302, 0], [1, "t", 2, 49, 302, 0], [1, "b", 1, 48, 302, 0], [1, "t", 3, 47, 302, 0], [1, "t", 4, 46, 302, 0], [1, "t", 1, 45, 302, 0], [1, "t", 2, 44, 302, 0], [1, "t", 5, 43, 302, 0], [1, "t", 2, 42, 302, 0], [1, "t", 1, 41, 302, 0], [1, "t", 4, 40, 302, 0], [1, "b", 2, 39, 302, 0], [1, "t", 5, 38, 302, 0], [1, "t", 1, 37, 302, 0], [1, "t", 2, 36, 302, 0], [1, "t", 5, 35, 302, 0], [1, "t", 0, 34, 302, 0], [1, "t", 3, 33, 302, 0], [1, "t", 4, 32, 302, 0], [1, "b", 1, 31, 302, 0], [1, "t", 2, 30, 302, 0], [1, "t", 4, 29, 302, 0], [1, "t", 2, 28, 302, 0], [1, "t", 5, 27, 302, 0], [1, "b", 3, 26, 302, 0], [1, "t", 1, 25, 302, 0], [1, "t", 4, 24, 302, 0], [1, "t", 2, 23, 302, 0], [1, "t", 1, 22, 302, 0], [1, "t", 5, 21, 302, 0], [1, "t", 2, 20, 302, 0], [1, "t", 4, 19, 302, 0], [1, "b", 1, 18, 302, 0], [1, "t", 5, 17, 302, 0], [1, "t", 3, 16, 302, 0], [1, "t", 1, 15, 302, 0], [1, "t", 5, 14, 302, 0], [1, "t", 3, 13, 302, 0], [1, "t", 4, 12, 302, 0], [1, "t", 1, 11, 302, 0], [1, "t", 2, 10, 302, 0], [1, "t", 4, 9, 302, 0], [1, "b", 3, 8, 302, 0], [1, "t", 5, 8, 302, 0], [1, "t", 5, 7, 302, 0], [1, "b", 2, 6, 302, 0], [1, "t", 1, 6, 301, 0], [1, "t", 4, 6, 300, 0], [1, "t", 2, 6, 299, 0], [1, "b", 0, 6, 298, 0], [1, "t", 5, 6, 297, 0], [1, "t", 2, 6, 296, 0], [1, "t", 0, 6, 295, 0], [1, "b", 2, 6, 294, 0], [1, "t", 5, 6, 293, 0], [1, "t", 1, 6, 292, 0], [1, "b", 0, 6, 291, 0], [1, "t", 2, 6, 290, 0], [1, "t", 5, 6, 289, 0], [1, "t", 1, 6, 288, 0], [1, "t", 4, 6, 287, 0], [1, "t", 2, 6, 286, 0], [1, "t", 5, 6, 285, 0], [1, "t", 2, 6, 284, 0], [1, "b", 0, 6, 283, 0], [1, "t", 2, 6, 282, 0], [1, "t", 5, 6, 281, 0], [1, "b", 2, 6, 280, 0], [1, "t", 5, 6, 279, 0], [1, "t", 1, 6, 278, 0], [1, "t", 4, 6, 277, 0], [1, "t", 3, 6, 276, 0], [1, "t", 5, 6, 275, 0], [1, "b", 0, 6, 274, 0], [1, "t", 5, 6, 273, 0], [1, "t", 1, 6, 272, 0], [1, "t", 4, 6, 271, 0], [1, "b", 3, 6, 270, 0], [1, "t", 5, 6, 269, 0], [1, "t", 1, 6, 268, 0], [1, "t", 4, 6, 267, 0], [1, "t", 1, 6, 266, 0], [1, "t", 3, 6, 265, 0], [1, "t", 4, 6, 264, 0], [1, "b", 2, 6, 263, 0], [1, "t", 5, 6, 262, 0], [1, "t", 3, 6, 261, 0], [1, "t", 0, 6, 260, 0], [1, "t", 5, 6, 259, 0], [1, "t", 1, 6, 258, 0], [1, "t", 3, 6, 257, 0], [1, "t", 4, 6, 255, 0], [1, "t", 3, 6, 254, 0], [1, "t", 5, 6, 253, 0], [1, "b", 2, 6, 252, 0], [1, "t", 5, 6, 251, 0], [1, "t", 1, 6, 250, 0], [1, "t", 3, 6, 249, 0], [1, "t", 4, 6, 248, 0], [1, "b", 3, 6, 247, 0], [1, "t", 5, 6, 246, 0], [1, "t", 3, 6, 245, 0], [1, "t", 5, 6, 244, 0], [1, "t", 0, 6, 243, 0], [1, "t", 4, 6, 242, 0], [1, "t", 3, 6, 241, 0], [1, "t", 5, 6, 240, 0], [1, "b", 0, 6, 239, 0], [1, "t", 3, 6, 238, 0], [1, "t", 4, 6, 237, 0], [1, "t", 1, 6, 236, 0], [1, "t", 5, 6, 235, 0], [1, "b", 2, 6, 234, 0], [1, "t", 2, 6, 233, 0], [1, "t", 4, 6, 232, 0], [1, "b", 3, 6, 231, 0], [1, "t", 5, 6, 230, 0], [1, "t", 1, 6, 229, 0], [1, "t", 2, 6, 228, 0], [1, "t", 5, 6, 227, 0], [1, "b", 2, 6, 226, 0], [1, "t", 4, 6, 225, 0], [1, "t", 0, 6, 224, 0], [1, "t", 2, 6, 223, 0], [1, "t", 0, 6, 222, 0], [1, "b", 2, 6, 221, 0], [1, "t", 4, 6, 220, 0], [1, "b", 3, 6, 219, 0], [1, "t", 5, 6, 218, 0], [1, "t", 0, 6, 217, 0], [1, "t", 3, 6, 216, 0], [1, "b", 0, 6, 215, 0], [1, "t", 4, 6, 214, 0], [1, "t", 2, 6, 213, 0], [1, "t", 0, 6, 212, 0], [1, "t", 2, 6, 211, 0], [1, "b", 3, 6, 210, 0], [1, "t", 0, 6, 209, 0], [1, "t", 5, 6, 207, 0], [1, "t", 2, 6, 208, 0], [1, "t", 0, 6, 206, 0], [1, "t", 2, 6, 205, 0], [1, "t", 2, 6, 203, 0], [1, "b", 0, 6, 202, 0], [1, "t", 3, 6, 201, 0], [1, "t", 4, 6, 199, 0], [1, "t", 0, 6, 198, 0], [1, "t", 2, 6, 197, 0], [1, "t", 4, 6, 196, 0], [1, "t", 1, 6, 195, 0], [1, "t", 3, 6, 194, 0], [1, "t", 4, 6, 192, 0], [1, "t", 2, 6, 191, 0], [1, "b", 0, 6, 190, 0], [1, "t", 3, 6, 189, 0], [1, "t", 4, 6, 187, 0], [1, "b", 0, 6, 186, 0], [1, "t", 2, 6, 185, 0], [1, "t", 4, 6, 184, 0], [1, "t", 2, 6, 183, 0], [1, "t", 0, 6, 182, 0], [1, "b", 2, 6, 181, 0], [1, "t", 5, 6, 180, 0], [1, "t", 2, 6, 179, 0], [1, "t", 0, 6, 178, 0], [1, "t", 2, 6, 177, 0], [1, "t", 4, 6, 176, 0], [1, "b", 2, 6, 175, 0], [1, "t", 1, 6, 174, 0], [1, "t", 5, 6, 173, 0], [1, "t", 2, 6, 256, 0], [1, "t", 4, 6, 204, 0], [1, "t", 4, 6, 200, 0], [1, "t", 2, 6, 193, 0], [1, "t", 2, 6, 188, 0], [1, "f", 1, 6, 150, 1], [1, "f", 2, 6, 151, 1], [1, "f", 2, 6, 149, 1], [1, "f", 1, 6, 148, 1], [1, "f", 2, 6, 147, 1], [1, "f", 2, 6, 145, 1], [1, "f", 2, 6, 143, 1], [1, "f", 1, 6, 146, 1], [1, "f", 1, 6, 144, 1], [1, "f", 1, 6, 142, 1], [1, "f", 2, 6, 141, 1], [1, "f", 2, 6, 139, 1], [1, "f", 2, 6, 137, 1], [1, "f", 2, 6, 135, 1], [1, "f", 2, 6, 133, 1], [1, "f", 1, 6, 140, 1], [1, "f", 1, 6, 138, 1], [1, "f", 1, 6, 136, 1], [1, "f", 1, 6, 134, 1], [1, "f", 1, 6, 132, 1], [1, "f", 2, 6, 131, 1], [1, "f", 2, 6, 129, 1], [1, "f", 2, 6, 127, 1], [1, "f", 2, 6, 125, 1], [1, "f", 2, 6, 123, 1], [1, "f", 2, 6, 121, 1], [1, "f", 1, 6, 130, 1], [1, "f", 1, 6, 128, 1], [1, "f", 1, 6, 126, 1], [1, "f", 1, 6, 124, 1], [1, "f", 1, 6, 122, 1], [1, "f", 1, 6, 120, 1], [1, "f", 2, 6, 119, 1], [1, "f", 2, 6, 117, 1], [1, "f", 2, 6, 115, 1], [1, "f", 2, 6, 113, 1], [1, "f", 2, 6, 111, 1], [1, "f", 2, 6, 109, 1], [1, "f", 1, 6, 118, 1], [1, "f", 1, 6, 116, 1], [1, "f", 1, 6, 114, 1], [1, "f", 1, 6, 112, 1], [1, "f", 1, 6, 110, 1], [1, "f", 1, 6, 108, 1], [1, "f", 1, 6, 106, 1], [1, "f", 1, 6, 104, 1], [1, "f", 2, 6, 107, 1], [1, "f", 2, 6, 105, 1], [1, "f", 2, 6, 103, 1], [1, "f", 2, 6, 101, 1], [1, "f", 2, 6, 99, 1], [1, "f", 2, 6, 97, 1], [1, "f", 2, 6, 95, 1], [1, "f", 2, 6, 93, 1], [1, "f", 2, 6, 91, 1], [1, "f", 1, 6, 102, 1], [1, "f", 1, 6, 100, 1], [1, "f", 1, 6, 98, 1], [1, "f", 1, 6, 96, 1], [1, "f", 1, 6, 94, 1], [1, "f", 1, 6, 92, 1], [1, "f", 1, 6, 90, 1], [1, "f", 1, 6, 88, 1], [1, "f", 1, 6, 86, 1], [1, "f", 2, 6, 89, 1], [1, "f", 2, 6, 87, 1], [1, "f", 2, 6, 85, 1], [1, "f", 2, 6, 83, 1], [1, "f", 2, 6, 81, 1], [1, "f", 2, 6, 79, 1], [1, "f", 2, 6, 77, 1], [1, "f", 1, 6, 84, 1], [1, "f", 1, 6, 82, 1], [1, "f", 1, 6, 80, 1], [1, "f", 1, 6, 78, 1], [1, "f", 1, 6, 76, 1], [1, "f", 2, 6, 75, 1], [1, "f", 2, 6, 73, 1], [1, "f", 2, 6, 71, 1], [1, "f", 2, 6, 69, 1], [1, "f", 2, 6, 67, 1], [1, "f", 2, 6, 65, 1], [1, "f", 1, 6, 74, 1], [1, "f", 1, 6, 72, 1], [1, "f", 1, 6, 70, 1], [1, "f", 1, 6, 68, 1], [1, "f", 1, 6, 66, 1], [1, "f", 1, 6, 64, 1], [1, "f", 2, 6, 63, 1], [1, "f", 2, 6, 61, 1], [1, "f", 2, 6, 59, 1], [1, "f", 2, 6, 57, 1], [1, "f", 2, 6, 55, 1], [1, "f", 2, 6, 53, 1], [1, "f", 2, 6, 51, 1], [1, "f", 1, 6, 62, 1], [1, "f", 1, 6, 60, 1], [1, "f", 1, 6, 58, 1], [1, "f", 1, 6, 56, 1], [1, "f", 1, 6, 54, 1], [1, "f", 1, 6, 52, 1], [1, "f", 1, 6, 50, 1], [1, "f", 2, 6, 49, 1], [1, "f", 2, 6, 47, 1], [1, "f", 2, 6, 45, 1], [1, "f", 2, 6, 43, 1], [1, "f", 2, 6, 41, 1], [1, "f", 2, 6, 39, 1], [1, "f", 1, 6, 48, 1], [1, "f", 1, 6, 46, 1], [1, "f", 1, 6, 44, 1], [1, "f", 1, 6, 42, 1], [1, "f", 1, 6, 40, 1], [1, "f", 1, 6, 38, 1], [1, "f", 2, 6, 37, 1], [1, "f", 2, 6, 35, 1], [1, "f", 2, 6, 33, 1], [1, "f", 2, 6, 31, 1], [1, "f", 2, 6, 29, 1], [1, "f", 2, 6, 27, 1], [1, "f", 1, 6, 36, 1], [1, "f", 1, 6, 34, 1], [1, "f", 1, 6, 32, 1], [1, "f", 1, 6, 30, 1], [1, "f", 1, 6, 28, 1], [1, "f", 1, 6, 26, 1], [1, "f", 2, 6, 25, 1], [1, "f", 2, 6, 23, 1], [1, "f", 2, 6, 21, 1], [1, "f", 2, 6, 19, 1], [1, "f", 2, 6, 17, 1], [1, "f", 2, 6, 15, 1], [1, "f", 1, 6, 24, 1], [1, "f", 1, 6, 22, 1], [1, "f", 1, 6, 20, 1], [1, "f", 1, 6, 18, 1], [1, "f", 1, 6, 16, 1], [1, "f", 2, 6, 13, 1], [1, "f", 2, 6, 11, 1], [1, "f", 2, 6, 9, 1], [1, "f", 2, 6, 7, 1], [1, "f", 1, 6, 14, 1], [1, "f", 1, 6, 12, 1], [1, "f", 1, 6, 10, 1], [1, "f", 1, 6, 8, 1], [1, "f", 1, 6, 6, 1], [1, "f", 1, 8, 6, 1], [1, "f", 2, 7, 6, 1], [1, "f", 2, 9, 6, 1], [1, "f", 2, 11, 6, 1], [1, "f", 2, 13, 6, 1], [1, "f", 2, 15, 6, 1], [1, "f", 1, 10, 6, 1], [1, "f", 1, 12, 6, 1], [1, "f", 1, 14, 6, 1], [1, "f", 1, 16, 6, 1], [1, "f", 1, 18, 6, 1], [1, "f", 1, 20, 6, 1], [1, "f", 1, 22, 6, 1], [1, "f", 1, 24, 6, 1], [1, "f", 1, 26, 6, 1], [1, "f", 2, 17, 6, 1], [1, "f", 2, 19, 6, 1], [1, "f", 2, 21, 6, 1], [1, "f", 2, 23, 6, 1], [1, "f", 2, 25, 6, 1], [1, "f", 2, 27, 6, 1], [1, "f", 2, 29, 6, 1], [1, "f", 2, 31, 6, 1], [1, "f", 2, 33, 6, 1], [1, "f", 1, 28, 6, 1], [1, "f", 1, 30, 6, 1], [1, "f", 1, 32, 6, 1], [1, "f", 1, 34, 6, 1], [1, "f", 2, 67, 6, 1], [1, "f", 2, 69, 6, 1], [1, "f", 2, 71, 6, 1], [1, "f", 2, 73, 6, 1], [1, "f", 2, 75, 6, 1], [1, "f", 1, 68, 6, 1], [1, "f", 1, 70, 6, 1], [1, "f", 1, 72, 6, 1], [1, "f", 1, 74, 6, 1], [1, "f", 1, 76, 6, 1], [1, "f", 2, 77, 6, 1], [1, "f", 2, 79, 6, 1], [1, "f", 2, 81, 6, 1], [1, "f", 2, 83, 6, 1], [1, "f", 2, 85, 6, 1], [1, "f", 1, 78, 6, 1], [1, "f", 1, 80, 6, 1], [1, "f", 1, 82, 6, 1], [1, "f", 1, 84, 6, 1], [1, "f", 1, 86, 6, 1], [1, "f", 2, 87, 6, 1], [1, "f", 2, 89, 6, 1], [1, "f", 2, 91, 6, 1], [1, "f", 2, 93, 6, 1], [1, "f", 1, 88, 6, 1], [1, "f", 1, 90, 6, 1], [1, "f", 1, 92, 6, 1], [1, "f", 1, 94, 6, 1], [1, "f", 2, 95, 6, 1], [1, "f", 1, 95, 7, 1], [1, "f", 1, 83, 7, 1], [1, "f", 1, 81, 7, 1], [1, "f", 1, 79, 7, 1], [1, "f", 1, 77, 7, 1], [1, "f", 1, 75, 7, 1], [1, "f", 1, 73, 7, 1], [1, "f", 1, 71, 7, 1], [1, "f", 1, 69, 7, 1], [1, "f", 1, 33, 7, 1], [1, "f", 1, 31, 7, 1], [1, "f", 1, 29, 7, 1], [1, "f", 1, 27, 7, 1], [1, "f", 1, 25, 7, 1], [1, "f", 1, 23, 7, 1], [1, "f", 1, 21, 7, 1], [1, "f", 1, 19, 7, 1], [1, "f", 1, 17, 7, 1], [1, "f", 1, 15, 7, 1], [1, "f", 1, 13, 7, 1], [1, "f", 1, 11, 7, 1], [1, "f", 1, 9, 7, 1], [1, "f", 1, 7, 7, 1], [1, "s", 0, 7, 8, 1], [1, "t", 4, 7, 174, 0], [1, "t", 5, 7, 175, 0], [1, "t", 4, 7, 176, 0], [1, "b", 2, 7, 177, 0], [1, "t", 3, 94, 301, 0], [1, "b", 3, 95, 301, 0], [1, "t", 4, 96, 301, 0], [1, "t", 1, 97, 301, 0], [1, "t", 2, 98, 301, 0], [1, "t", 4, 99, 301, 0], [1, "t", 2, 100, 301, 0], [1, "t", 4, 96, 304, 0], [1, "t", 2, 96, 302, 0], [1, "t", 2, 97, 304, 0], [1, "t", 2, 96, 303, 0], [1, "t", 5, 97, 303, 0], [1, "t", 5, 98, 304, 0], [1, "b", 2, 97, 302, 0], [1, "b", 2, 99, 304, 0], [1, "t", 1, 98, 303, 0], [1, "t", 4, 98, 302, 0], [1, "t", 4, 99, 303, 0], [1, "t", 4, 100, 304, 0], [1, "t", 5, 99, 302, 0], [1, "t", 5, 101, 303, 0], [1, "t", 2, 100, 303, 0], [1, "t", 0, 100, 302, 0], [1, "t", 0, 101, 304, 0], [1, "t", 4, 102, 304, 0], [1, "f", 0, 94, 7, 1], [1, "f", 1, 93, 7, 1], [1, "f", 1, 92, 7, 1], [1, "f", 0, 91, 7, 1], [1, "f", 1, 90, 7, 1], [1, "f", 1, 89, 7, 1], [1, "f", 0, 88, 7, 1], [1, "f", 1, 87, 7, 1], [1, "f", 1, 86, 7, 1], [1, "f", 1, 85, 7, 1], [1, "f", 0, 84, 7, 1], [1, "f", 1, 82, 7, 1], [1, "f", 0, 80, 7, 1], [1, "f", 1, 78, 7, 1], [1, "f", 0, 76, 7, 1], [1, "f", 1, 74, 7, 1], [1, "f", 0, 72, 7, 1], [1, "f", 0, 70, 7, 1], [1, "f", 1, 68, 7, 1], [1, "f", 1, 32, 7, 1], [1, "f", 0, 30, 7, 1], [1, "f", 1, 28, 7, 1], [1, "f", 0, 26, 7, 1], [1, "f", 1, 24, 7, 1], [1, "f", 0, 22, 7, 1], [1, "f", 1, 20, 7, 1], [1, "f", 0, 18, 7, 1], [1, "f", 1, 16, 7, 1], [1, "f", 0, 14, 7, 1], [1, "f", 1, 12, 7, 1], [1, "f", 0, 10, 7, 1], [1, "f", 1, 8, 7, 1], [1, "s", 1, 7, 9, 1], [1, "f", 0, 95, 152, 1], [1, "f", 1, 95, 151, 1], [1, "f", 0, 95, 11, 1], [1, "f", 1, 95, 12, 1], [1, "f", 1, 95, 14, 1], [1, "f", 1, 95, 19, 1], [1, "f", 0, 95, 15, 1], [1, "f", 0, 95, 20, 1], [1, "f", 1, 95, 21, 1], [1, "f", 1, 95, 26, 1], [1, "f", 1, 95, 37, 1], [1, "f", 0, 95, 44, 1], [1, "f", 1, 95, 50, 1], [1, "f", 1, 95, 52, 1], [1, "f", 0, 95, 53, 1], [1, "f", 1, 95, 54, 1], [1, "f", 1, 95, 62, 1], [1, "f", 0, 95, 55, 1], [1, "f", 1, 95, 64, 1], [1, "f", 0, 95, 58, 1], [1, "f", 0, 95, 61, 1], [1, "f", 0, 95, 68, 1], [1, "f", 0, 95, 72, 1], [1, "f", 0, 95, 78, 1], [1, "f", 1, 95, 115, 1], [1, "f", 1, 95, 117, 1], [1, "f", 1, 95, 128, 1], [1, "f", 0, 95, 85, 1], [1, "f", 0, 95, 91, 1], [1, "f", 0, 95, 95, 1], [1, "f", 0, 95, 114, 1], [1, "f", 2, 95, 113, 1], [1, "f", 1, 95, 119, 1], [1, "f", 0, 95, 120, 1], [1, "f", 1, 95, 121, 1], [1, "f", 0, 95, 127, 1], [1, "f", 1, 95, 130, 1], [1, "f", 0, 95, 131, 1], [1, "f", 1, 95, 132, 1], [1, "f", 1, 95, 136, 1], [1, "f", 0, 95, 137, 1], [1, "f", 0, 95, 143, 1], [1, "f", 0, 95, 147, 1], [1, "f", 1, 95, 138, 1], [1, "f", 1, 95, 144, 1], [1, "f", 1, 95, 10, 1], [1, "f", 0, 95, 8, 1], [1, "f", 1, 95, 9, 1], [1, "f", 0, 95, 13, 1], [1, "f", 1, 95, 16, 1], [1, "f", 1, 95, 17, 1], [1, "f", 0, 95, 18, 1], [1, "f", 1, 95, 45, 1], [1, "f", 0, 95, 51, 1], [1, "f", 1, 95, 56, 1], [1, "f", 1, 95, 57, 1], [1, "f", 1, 95, 59, 1], [1, "f", 1, 95, 60, 1], [1, "f", 1, 95, 63, 1], [1, "f", 0, 95, 65, 1], [1, "f", 1, 95, 66, 1], [1, "f", 1, 95, 67, 1], [1, "f", 1, 95, 69, 1], [1, "f", 1, 95, 70, 1], [1, "f", 0, 95, 71, 1], [1, "f", 1, 95, 73, 1], [1, "f", 1, 95, 74, 1], [1, "f", 0, 95, 75, 1], [1, "f", 1, 95, 76, 1], [1, "f", 1, 95, 77, 1], [1, "f", 1, 95, 79, 1], [1, "f", 1, 95, 80, 1], [1, "f", 0, 95, 81, 1], [1, "f", 1, 95, 82, 1], [1, "f", 0, 95, 83, 1], [1, "f", 1, 95, 84, 1], [1, "f", 1, 95, 86, 1], [1, "f", 1, 95, 88, 1], [1, "f", 0, 95, 87, 1], [1, "f", 1, 95, 89, 1], [1, "f", 1, 95, 90, 1], [1, "f", 1, 95, 92, 1], [1, "f", 1, 95, 93, 1], [1, "f", 1, 95, 94, 1], [1, "f", 1, 95, 96, 1], [1, "f", 1, 95, 97, 1], [1, "f", 0, 95, 98, 1], [1, "f", 1, 95, 99, 1], [1, "f", 1, 95, 100, 1], [1, "f", 0, 95, 101, 1], [1, "f", 1, 95, 102, 1], [1, "f", 0, 95, 103, 1], [1, "f", 1, 95, 104, 1], [1, "f", 1, 95, 105, 1], [1, "f", 0, 95, 106, 1], [1, "f", 1, 95, 107, 1], [1, "f", 1, 95, 108, 1], [1, "f", 1, 95, 109, 1], [1, "f", 0, 95, 110, 1], [1, "f", 1, 95, 111, 1], [1, "f", 0, 95, 112, 1], [1, "f", 1, 95, 116, 1], [1, "f", 0, 95, 118, 1], [1, "f", 0, 95, 122, 1], [1, "f", 1, 95, 123, 1], [1, "f", 1, 95, 124, 1], [1, "f", 0, 95, 125, 1], [1, "f", 1, 95, 126, 1], [1, "f", 1, 95, 129, 1], [1, "f", 1, 95, 133, 1], [1, "f", 0, 95, 134, 1], [1, "f", 1, 95, 135, 1], [1, "f", 1, 95, 139, 1], [1, "f", 0, 95, 140, 1], [1, "f", 1, 95, 141, 1], [1, "f", 1, 95, 142, 1], [1, "f", 1, 95, 146, 1], [1, "f", 0, 95, 145, 1], [1, "f", 1, 95, 148, 1], [1, "f", 1, 95, 149, 1], [1, "f", 1, 95, 150, 1], [1, "f", 1, 95, 153, 1], [1, "cs", 0, 64, 9, 1], [1, "cs", 1, 64, 10, 1], [1, "cs", 2, 64, 16, 1], [1, "cs", 2, 64, 19, 1], [1, "cs", 0, 64, 20, 1], [1, "cs", 1, 64, 21, 1], [1, "cs", 2, 64, 22, 1], [1, "cs", 0, 64, 23, 1], [1, "cs", 2, 64, 24, 1], [1, "cs", 1, 64, 29, 1], [1, "cs", 2, 64, 30, 1], [1, "cs", 3, 64, 31, 1], [1, "cs", 0, 64, 32, 1], [1, "cs", 1, 64, 33, 1], [1, "cs", 2, 64, 34, 1], [1, "cs", 0, 64, 35, 1], [1, "cs", 2, 64, 8, 1], [1, "cs", 2, 65, 8, 1], [1, "cs", 1, 65, 9, 1], [1, "cs", 2, 65, 10, 1], [1, "cs", 3, 65, 11, 1], [1, "cs", 1, 65, 16, 1], [1, "cs", 0, 64, 17, 1], [1, "cs", 3, 65, 17, 1], [1, "cs", 2, 64, 18, 1], [1, "cs", 2, 65, 18, 1], [1, "cs", 0, 65, 19, 1], [1, "cs", 1, 65, 20, 1], [1, "cs", 3, 65, 21, 1], [1, "cs", 2, 65, 22, 1], [1, "cs", 3, 65, 23, 1], [1, "cs", 0, 65, 24, 1], [1, "cs", 2, 65, 29, 1], [1, "cs", 3, 65, 30, 1], [1, "cs", 0, 65, 31, 1], [1, "cs", 1, 65, 32, 1], [1, "cs", 2, 65, 33, 1], [1, "cs", 3, 65, 34, 1], [1, "cs", 2, 63, 9, 1], [1, "cs", 0, 62, 9, 1], [1, "cs", 2, 61, 9, 1], [1, "cs", 0, 60, 9, 1], [1, "cs", 2, 59, 9, 1], [1, "cs", 2, 58, 9, 1], [1, "cs", 0, 57, 9, 1], [1, "cs", 2, 56, 9, 1], [1, "cs", 2, 55, 9, 1], [1, "cs", 2, 54, 9, 1], [1, "cs", 0, 53, 9, 1], [1, "cs", 0, 51, 9, 1], [1, "cs", 2, 52, 9, 1], [1, "cs", 2, 50, 9, 1], [1, "cs", 2, 48, 9, 1], [1, "cs", 2, 49, 9, 1], [1, "cs", 0, 47, 9, 1], [1, "cs", 0, 45, 9, 1], [1, "cs", 0, 43, 9, 1], [1, "cs", 2, 46, 9, 1], [1, "cs", 2, 44, 9, 1], [1, "cs", 2, 42, 9, 1], [1, "cs", 2, 41, 9, 1], [1, "cs", 0, 40, 9, 1], [1, "cs", 2, 39, 9, 1], [1, "cs", 2, 38, 9, 1], [1, "cs", 0, 37, 9, 1], [1, "cs", 0, 63, 8, 1], [1, "cs", 2, 65, 7, 1], [1, "cs", 3, 64, 7, 1], [1, "cs", 2, 62, 8, 1], [1, "cs", 3, 61, 8, 1], [1, "cs", 1, 62, 7, 1], [1, "cs", 2, 63, 7, 1], [1, "cs", 0, 64, 6, 1], [1, "cs", 3, 65, 6, 1], [1, "cs", 2, 63, 6, 1], [1, "cs", 2, 62, 6, 1], [1, "cs", 2, 61, 6, 1], [1, "cs", 2, 60, 6, 1], [1, "cs", 2, 59, 6, 1], [1, "cs", 2, 61, 7, 1], [1, "cs", 0, 60, 7, 1], [1, "cs", 2, 60, 8, 1], [1, "cs", 2, 59, 7, 1], [1, "cs", 2, 59, 8, 1], [1, "cs", 1, 58, 8, 1], [1, "cs", 1, 57, 6, 1], [1, "cs", 1, 55, 7, 1], [1, "cs", 0, 56, 6, 1], [1, "cs", 2, 58, 6, 1], [1, "cs", 2, 58, 7, 1], [1, "cs", 2, 57, 7, 1], [1, "cs", 2, 56, 7, 1], [1, "cs", 2, 55, 6, 1], [1, "cs", 2, 57, 8, 1], [1, "cs", 2, 56, 8, 1], [1, "cs", 2, 55, 8, 1], [1, "cs", 0, 54, 8, 1], [1, "cs", 0, 50, 7, 1], [1, "cs", 0, 53, 6, 1], [1, "cs", 2, 54, 6, 1], [1, "cs", 2, 54, 7, 1], [1, "cs", 2, 53, 7, 1], [1, "cs", 2, 52, 7, 1], [1, "cs", 2, 52, 6, 1], [1, "cs", 1, 52, 8, 1], [1, "cs", 2, 53, 8, 1], [1, "cs", 2, 51, 8, 1], [1, "cs", 2, 51, 7, 1], [1, "cs", 2, 51, 6, 1], [1, "cs", 2, 50, 6, 1], [1, "cs", 2, 50, 8, 1], [1, "cs", 2, 49, 8, 1], [1, "cs", 2, 49, 7, 1], [1, "cs", 2, 49, 6, 1], [1, "cs", 0, 46, 7, 1], [1, "cs", 1, 48, 8, 1], [1, "cs", 1, 44, 7, 1], [1, "cs", 1, 41, 8, 1], [1, "cs", 2, 48, 7, 1], [1, "cs", 2, 48, 6, 1], [1, "cs", 2, 47, 6, 1], [1, "cs", 2, 47, 7, 1], [1, "cs", 2, 47, 8, 1], [1, "cs", 2, 46, 8, 1], [1, "cs", 2, 45, 8, 1], [1, "cs", 2, 45, 7, 1], [1, "cs", 2, 45, 6, 1], [1, "cs", 2, 46, 6, 1], [1, "cs", 2, 44, 6, 1], [1, "cs", 2, 44, 8, 1], [1, "cs", 2, 43, 8, 1], [1, "cs", 2, 43, 7, 1], [1, "cs", 2, 43, 6, 1], [1, "cs", 2, 42, 6, 1], [1, "cs", 2, 42, 7, 1], [1, "cs", 2, 42, 8, 1], [1, "cs", 2, 41, 7, 1], [1, "cs", 2, 41, 6, 1], [1, "cs", 2, 40, 6, 1], [1, "cs", 2, 40, 7, 1], [1, "cs", 2, 40, 8, 1], [1, "cs", 2, 39, 8, 1], [1, "cs", 0, 39, 7, 1], [1, "cs", 1, 38, 8, 1], [1, "cs", 2, 39, 6, 1], [1, "cs", 2, 38, 6, 1], [1, "cs", 2, 37, 6, 1], [1, "cs", 2, 38, 7, 1], [1, "cs", 2, 37, 7, 1], [1, "cs", 2, 37, 8, 1], [1, "cs", 2, 37, 10, 1], [1, "cs", 2, 38, 10, 1], [1, "cs", 0, 38, 11, 1], [1, "cs", 0, 38, 17, 1], [1, "cs", 1, 37, 18, 1], [1, "cs", 0, 38, 19, 1], [1, "cs", 2, 37, 11, 1], [1, "cs", 2, 37, 16, 1], [1, "cs", 2, 37, 17, 1], [1, "cs", 2, 38, 18, 1], [1, "cs", 2, 37, 19, 1], [1, "cs", 3, 38, 16, 1], [1, "cs", 0, 37, 21, 1], [1, "cs", 0, 38, 22, 1], [1, "cs", 0, 38, 24, 1], [1, "cs", 2, 37, 20, 1], [1, "cs", 2, 38, 20, 1], [1, "cs", 2, 38, 21, 1], [1, "cs", 1, 37, 23, 1], [1, "cs", 3, 37, 22, 1], [1, "cs", 3, 38, 23, 1], [1, "cs", 2, 37, 24, 1], [1, "cs", 0, 38, 30, 1], [1, "cs", 0, 38, 32, 1], [1, "cs", 0, 37, 31, 1], [1, "cs", 1, 38, 34, 1], [1, "cs", 1, 37, 29, 1], [1, "cs", 2, 38, 29, 1], [1, "cs", 2, 37, 30, 1], [1, "cs", 2, 38, 31, 1], [1, "cs", 2, 37, 32, 1], [1, "cs", 3, 38, 33, 1], [1, "cs", 3, 38, 35, 1], [1, "cs", 2, 37, 33, 1], [1, "cs", 2, 36, 8, 1], [1, "cs", 0, 36, 11, 1], [1, "cs", 0, 35, 9, 1], [1, "cs", 2, 36, 9, 1], [1, "cs", 2, 36, 10, 1], [1, "cs", 2, 35, 10, 1], [1, "cs", 1, 33, 8, 1], [1, "cs", 3, 34, 9, 1], [1, "cs", 3, 35, 8, 1], [1, "cs", 2, 34, 8, 1], [1, "cs", 0, 36, 7, 1], [1, "cs", 1, 34, 7, 1], [1, "cs", 2, 35, 7, 1], [1, "cs", 2, 35, 6, 1], [1, "cs", 2, 36, 6, 1], [1, "cs", 2, 68, 9, 1], [1, "cs", 2, 66, 10, 1], [1, "cs", 3, 66, 9, 1], [1, "cs", 0, 67, 9, 1], [1, "cs", 0, 66, 8, 1], [1, "cs", 2, 67, 8, 1], [1, "cs", 1, 68, 8, 1], [1, "cs", 1, 66, 11, 1], [1, "cs", 2, 67, 10, 1], [1, "cs", 0, 66, 6, 1], [1, "cs", 2, 66, 7, 1], [1, "cs", 2, 67, 7, 1], [1, "cs", 2, 69, 8, 1], [1, "cs", 2, 63, 32, 1], [1, "cs", 2, 62, 34, 1], [1, "cs", 2, 60, 35, 1], [1, "cs", 3, 59, 35, 1], [1, "cs", 0, 61, 35, 1], [1, "cs", 0, 63, 34, 1], [1, "cs", 2, 63, 33, 1], [1, "cs", 2, 63, 35, 1], [1, "cs", 2, 62, 35, 1], [1, "cs", 2, 58, 36, 1], [1, "cs", 1, 59, 36, 1], [1, "cs", 1, 62, 36, 1], [1, "cs", 2, 60, 36, 1], [1, "cs", 2, 61, 34, 1], [1, "cs", 3, 62, 33, 1], [1, "cs", 3, 63, 36, 1], [1, "cs", 3, 61, 36, 1], [1, "cs", 0, 42, 36, 1], [1, "cs", 1, 39, 36, 1], [1, "cs", 2, 41, 36, 1], [1, "cs", 3, 39, 35, 1], [1, "cs", 3, 40, 36, 1], [1, "cs", 3, 43, 36, 1], [1, "cs", 1, 40, 35, 1], [1, "cs", 2, 41, 35, 1], [1, "cs", 2, 40, 34, 1], [1, "cs", 2, 39, 34, 1], [1, "cs", 2, 39, 33, 1], [1, "cs", 2, 39, 32, 1], [1, "cs", 0, 40, 33, 1], [1, "cs", 2, 41, 34, 1], [1, "cs", 1, 44, 36, 1], [1, "cs", 3, 43, 35, 1], [1, "cs", 2, 42, 35, 1], [1, "cs", 0, 37, 34, 1], [1, "cs", 3, 59, 30, 1], [1, "cs", 0, 60, 29, 1], [1, "cs", 2, 60, 28, 1], [1, "cs", 3, 60, 27, 1], [1, "cs", 0, 60, 26, 1], [1, "cs", 2, 54, 25, 1], [1, "cs", 2, 48, 25, 1], [1, "cs", 2, 42, 26, 1], [1, "cs", 0, 55, 25, 1], [1, "cs", 2, 59, 26, 1], [1, "cs", 0, 43, 26, 1], [1, "cs", 1, 42, 27, 1], [1, "cs", 2, 42, 28, 1], [1, "cs", 2, 43, 30, 1], [1, "cs", 0, 42, 29, 1], [1, "cs", 0, 54, 24, 1], [1, "cs", 0, 48, 24, 1], [1, "cs", 2, 54, 23, 1], [1, "cs", 2, 48, 23, 1], [1, "cs", 2, 63, 22, 1], [1, "cs", 2, 63, 21, 1], [1, "cs", 2, 39, 21, 1], [1, "cs", 3, 57, 18, 1], [1, "cs", 2, 56, 18, 1], [1, "cs", 3, 51, 21, 1], [1, "cs", 0, 51, 20, 1], [1, "cs", 2, 51, 19, 1], [1, "cs", 3, 51, 18, 1], [1, "cs", 2, 63, 16, 1], [1, "cs", 2, 63, 10, 1], [1, "cs", 2, 56, 13, 1], [1, "cs", 3, 57, 13, 1], [1, "cs", 1, 45, 18, 1], [1, "cs", 2, 47, 18, 1], [1, "cs", 2, 46, 18, 1], [1, "cs", 0, 46, 13, 1], [1, "cs", 2, 45, 13, 1], [1, "cs", 2, 39, 10, 1], [1, "cs", 2, 39, 16, 1], [1, "cs", 2, 47, 17, 1], [1, "a", 0, 51, 15, 1], [1, "a", 1, 53, 14, 1], [1, "a", 1, 49, 14, 1], [1, "de", 8, 55, 15, 0], [1, "de", 9, 48, 28, 0], [1, "de", 10, 58, 26, 0], [1, "de", 11, 59, 29, 0], [1, "de", 11, 55, 34, 0], [1, "de", 10, 48, 33, 0], [1, "de", 9, 41, 32, 0], [1, "de", 9, 56, 24, 0], [1, "de", 9, 62, 16, 0], [1, "de", 9, 45, 11, 0], [1, "de", 9, 44, 17, 0], [1, "de", 10, 44, 13, 0], [1, "de", 10, 58, 13, 0], [1, "de", 10, 63, 31, 0], [1, "de", 8, 60, 30, 0], [1, "de", 8, 43, 26, 0], [1, "de", 10, 43, 29, 0], [1, "de", 10, 53, 29, 0], [1, "de", 10, 53, 24, 0], [1, "de", 9, 53, 19, 0], [1, "de", 11, 49, 19, 0], [1, "de", 10, 39, 26, 0], [1, "de", 9, 46, 24, 0], [1, "de", 9, 62, 10, 0], [1, "de", 8, 40, 14, 0], [1, "de", 32, 55, 35, 0], [1, "de", 32, 60, 33, 0], [1, "de", 32, 63, 28, 0], [1, "de", 32, 63, 24, 0], [1, "de", 32, 58, 22, 0], [1, "de", 32, 59, 17, 0], [1, "de", 32, 63, 13, 0], [1, "de", 32, 59, 10, 0], [1, "de", 32, 56, 12, 0], [1, "de", 32, 52, 17, 0], [1, "de", 32, 51, 14, 0], [1, "de", 32, 39, 12, 0], [1, "de", 32, 39, 18, 0], [1, "de", 32, 41, 25, 0], [1, "de", 32, 39, 30, 0], [1, "de", 32, 50, 29, 0], [1, "de", 32, 43, 34, 0], [1, "de", 32, 47, 34, 0], [1, "de", 31, 54, 33, 0], [1, "de", 31, 59, 24, 0], [1, "de", 31, 63, 19, 0], [1, "de", 31, 47, 15, 0], [1, "de", 31, 43, 17, 0], [1, "de", 31, 39, 27, 0], [1, "de", 31, 48, 27, 0], [1, "de", 31, 57, 27, 0], [1, "de", 32, 44, 27, 0], [1, "d", 0, 12, 13, 1], [1, "d", 0, 89, 13, 1], [1, "d", 1, 91, 21, 1], [1, "d", 1, 10, 22, 1], [1, "f", 2, 89, 18, 1], [1, "f", 0, 88, 19, 1], [1, "g", 1, 85, 22, 1], [1, "s", 1, 90, 29, 1], [1, "s", 1, 92, 15, 1], [1, "s", 0, 91, 31, 1], [1, "s", 2, 90, 38, 1], [1, "s", 0, 91, 42, 1], [1, "s", 0, 90, 49, 1], [1, "f", 1, 86, 43, 1], [1, "f", 0, 81, 45, 1], [1, "f", 2, 66, 44, 1], [1, "f", 2, 55, 49, 1], [1, "f", 1, 54, 50, 1], [1, "f", 2, 43, 45, 1], [1, "f", 2, 31, 48, 1], [1, "f", 1, 27, 39, 1], [1, "f", 1, 80, 46, 1], [1, "f", 1, 69, 48, 1], [1, "g", 0, 80, 40, 1], [1, "g", 2, 81, 40, 1], [1, "s", 2, 77, 39, 1], [1, "s", 0, 68, 43, 1], [1, "s", 2, 57, 41, 1], [1, "s", 1, 56, 42, 1], [1, "s", 1, 40, 41, 1], [1, "s", 2, 48, 48, 1], [1, "f", 2, 17, 12, 1], [1, "f", 0, 13, 31, 1], [1, "f", 1, 14, 32, 1], [1, "s", 0, 15, 27, 1], [1, "s", 0, 13, 39, 1], [1, "f", 2, 11, 17, 1], [1, "f", 1, 12, 18, 1], [1, "g", 2, 12, 25, 1], [1, "f", 0, 16, 45, 1], [1, "f", 1, 17, 46, 1], [1, "s", 1, 74, 48, 1], [1, "s", 1, 20, 47, 1], [1, "g", 0, 58, 59, 1], [1, "g", 0, 46, 72, 1], [1, "g", 0, 69, 79, 1], [1, "g", 0, 72, 74, 1], [1, "g", 0, 26, 88, 1], [1, "g", 0, 20, 74, 1], [1, "g", 0, 28, 67, 1], [1, "g", 0, 49, 86, 1], [1, "g", 0, 77, 90, 1], [1, "g", 0, 87, 72, 1], [1, "g", 0, 14, 85, 1], [1, "g", 1, 85, 97, 1], [1, "g", 1, 68, 104, 1], [1, "g", 1, 63, 91, 1], [1, "g", 1, 39, 90, 1], [1, "g", 1, 34, 99, 1], [1, "g", 1, 17, 103, 1], [1, "g", 2, 77, 60, 1], [1, "g", 2, 19, 56, 1], [1, "g", 2, 39, 60, 1], [1, "g", 2, 87, 57, 1], [1, "f", 0, 9, 62, 1], [1, "f", 0, 12, 81, 1], [1, "f", 0, 26, 59, 1], [1, "f", 0, 35, 53, 1], [1, "f", 0, 44, 58, 1], [1, "f", 0, 88, 62, 1], [1, "f", 0, 91, 82, 1], [1, "f", 0, 84, 85, 1], [1, "f", 0, 79, 69, 1], [1, "f", 0, 64, 71, 1], [1, "f", 0, 62, 83, 1], [1, "f", 0, 34, 81, 1], [1, "f", 0, 39, 71, 1], [1, "f", 0, 54, 94, 1], [1, "f", 1, 81, 70, 1], [1, "f", 1, 91, 72, 1], [1, "f", 1, 8, 91, 1], [1, "f", 1, 14, 81, 1], [1, "f", 1, 29, 79, 1], [1, "f", 1, 13, 65, 1], [1, "f", 1, 46, 97, 1], [1, "f", 1, 43, 73, 1], [1, "f", 1, 60, 69, 1], [1, "f", 1, 70, 96, 1], [1, "f", 1, 58, 84, 1], [1, "s", 1, 56, 76, 1], [1, "s", 1, 85, 74, 1], [1, "s", 0, 72, 71, 1], [1, "s", 0, 41, 62, 1], [1, "s", 0, 60, 61, 1], [1, "s", 0, 20, 66, 1], [1, "s", 0, 47, 83, 1], [1, "s", 0, 29, 86, 1], [1, "s", 0, 78, 92, 1], [1, "s", 0, 62, 102, 1], [1, "s", 0, 18, 95, 1], [1, "s", 2, 64, 101, 1], [1, "s", 2, 78, 84, 1], [1, "s", 2, 49, 83, 1], [1, "s", 2, 15, 76, 1], [1, "s", 2, 21, 84, 1], [1, "f", 1, 26, 94, 1], [1, "f", 2, 23, 96, 1], [1, "f", 2, 25, 72, 1], [1, "f", 2, 85, 77, 1], [1, "f", 2, 79, 95, 1], [1, "f", 2, 51, 65, 1], [1, "f", 2, 69, 60, 1], [1, "f", 1, 25, 105, 1], [1, "s", 1, 18, 68, 1], [1, "s", 0, 55, 76, 1], [1, "s", 0, 74, 59, 1], [1, "f", 1, 46, 142, 1], [1, "f", 1, 19, 140, 1], [1, "f", 1, 77, 137, 1], [1, "f", 0, 75, 137, 1], [1, "f", 0, 55, 138, 1], [1, "f", 0, 33, 127, 1], [1, "f", 0, 76, 121, 1], [1, "f", 0, 55, 121, 1], [1, "f", 0, 13, 123, 1], [1, "f", 0, 18, 141, 1], [1, "f", 0, 40, 137, 1], [1, "f", 2, 76, 142, 1], [1, "f", 2, 57, 140, 1], [1, "f", 2, 39, 138, 1], [1, "f", 2, 16, 143, 1], [1, "f", 2, 29, 131, 1], [1, "f", 0, 70, 150, 1], [1, "f", 0, 28, 146, 1], [1, "f", 0, 12, 132, 1], [1, "f", 0, 90, 129, 1], [1, "f", 1, 87, 131, 1], [1, "f", 0, 91, 143, 1], [1, "f", 2, 87, 145, 1], [1, "f", 1, 89, 141, 1], [1, "f", 1, 63, 130, 1], [1, "f", 1, 75, 122, 1], [1, "f", 1, 52, 124, 1], [1, "f", 1, 34, 127, 1], [1, "f", 1, 14, 123, 1], [1, "f", 1, 24, 122, 1], [1, "f", 0, 83, 108, 1], [1, "f", 0, 89, 118, 1], [1, "f", 0, 56, 107, 1], [1, "f", 0, 38, 113, 1], [1, "f", 0, 16, 110, 1], [1, "f", 1, 80, 105, 1], [1, "f", 1, 82, 109, 1], [1, "f", 1, 87, 118, 1], [1, "f", 1, 59, 110, 1], [1, "f", 1, 29, 111, 1], [1, "f", 2, 28, 112, 1], [1, "f", 2, 70, 112, 1], [1, "f", 2, 42, 111, 1], [1, "s", 0, 68, 157, 1], [1, "s", 0, 81, 158, 1], [1, "s", 0, 25, 172, 1], [1, "s", 0, 22, 161, 1], [1, "s", 0, 35, 152, 1], [1, "s", 0, 66, 144, 1], [1, "s", 0, 87, 145, 1], [1, "s", 0, 86, 145, 1], [1, "s", 0, 84, 135, 1], [1, "s", 0, 69, 133, 1], [1, "s", 0, 84, 122, 1], [1, "s", 0, 68, 121, 1], [1, "s", 0, 48, 124, 1], [1, "s", 0, 26, 129, 1], [1, "s", 0, 9, 127, 1], [1, "s", 0, 11, 144, 1], [1, "s", 0, 9, 109, 1], [1, "s", 0, 35, 101, 1], [1, "s", 0, 47, 109, 1], [1, "s", 0, 58, 111, 1], [1, "s", 0, 84, 110, 1], [1, "s", 0, 28, 114, 1], [1, "s", 1, 30, 116, 1], [1, "s", 1, 46, 112, 1], [1, "s", 1, 81, 111, 1], [1, "s", 1, 70, 123, 1], [1, "s", 1, 49, 127, 1], [1, "s", 1, 66, 134, 1], [1, "s", 1, 67, 144, 1], [1, "s", 1, 38, 152, 1], [1, "s", 1, 21, 164, 1], [1, "s", 1, 12, 147, 1], [1, "s", 1, 24, 130, 1], [1, "s", 1, 12, 125, 1], [1, "s", 1, 65, 158, 1], [1, "s", 1, 83, 167, 1], [1, "s", 1, 65, 167, 1], [1, "s", 1, 47, 164, 1], [1, "s", 1, 56, 168, 1], [1, "s", 2, 54, 169, 1], [1, "s", 2, 88, 170, 1], [1, "s", 2, 91, 162, 1], [1, "s", 2, 79, 149, 1], [1, "s", 2, 75, 144, 1], [1, "s", 2, 57, 150, 1], [1, "s", 2, 47, 143, 1], [1, "s", 2, 31, 145, 1], [1, "s", 2, 36, 138, 1], [1, "s", 2, 10, 163, 1], [1, "s", 2, 22, 142, 1], [1, "g", 2, 78, 132, 1], [1, "g", 1, 48, 135, 1], [1, "g", 2, 16, 136, 1], [1, "g", 0, 62, 92, 1], [1, "g", 2, 70, 80, 1], [1, "g", 2, 15, 86, 1], [1, "g", 2, 47, 75, 1], [1, "g", 2, 36, 89, 1], [1, "g", 2, 80, 90, 1], [1, "f", 1, 39, 118, 1], [1, "d", 2, 84, 54, 1], [1, "d", 2, 16, 54, 1], [1, "de", 7, 13, 13, 0], [1, "de", 5, 16, 28, 0], [1, "de", 5, 9, 25, 0], [1, "de", 5, 34, 41, 0], [1, "de", 4, 28, 40, 0], [1, "de", 6, 31, 47, 0], [1, "de", 6, 12, 39, 0], [1, "de", 4, 16, 47, 0], [1, "de", 4, 7, 46, 0], [1, "de", 6, 7, 33, 0], [1, "de", 6, 40, 42, 0], [1, "de", 7, 20, 48, 0], [1, "de", 7, 29, 59, 0], [1, "de", 6, 27, 58, 0], [1, "de", 6, 15, 54, 0], [1, "de", 5, 12, 66, 0], [1, "de", 5, 37, 53, 0], [1, "de", 4, 10, 63, 0], [1, "de", 7, 49, 48, 0], [1, "de", 7, 37, 63, 0], [1, "de", 6, 33, 68, 0], [1, "de", 6, 56, 52, 0], [1, "de", 5, 59, 58, 0], [1, "de", 6, 48, 58, 0], [1, "de", 4, 53, 63, 0], [1, "de", 4, 67, 44, 0], [1, "de", 5, 70, 49, 0], [1, "de", 5, 82, 55, 0], [1, "de", 5, 79, 41, 0], [1, "de", 5, 91, 29, 0], [1, "de", 7, 91, 43, 0], [1, "de", 6, 85, 44, 0], [1, "de", 6, 74, 60, 0], [1, "de", 6, 90, 8, 0], [1, "de", 5, 91, 15, 0], [1, "de", 4, 87, 20, 0], [1, "de", 7, 93, 11, 0], [1, "de", 6, 91, 21, 0], [1, "de", 6, 85, 35, 0], [1, "de", 5, 93, 58, 0], [1, "de", 5, 87, 63, 0], [1, "de", 7, 77, 62, 0], [1, "de", 6, 68, 61, 0], [1, "de", 5, 90, 73, 0], [1, "de", 4, 87, 71, 0], [1, "de", 7, 80, 71, 0], [1, "de", 7, 83, 77, 0], [1, "de", 7, 89, 83, 0], [1, "de", 4, 71, 80, 0], [1, "de", 4, 71, 70, 0], [1, "de", 5, 63, 72, 0], [1, "de", 4, 54, 75, 0], [1, "de", 5, 44, 83, 0], [1, "de", 5, 42, 74, 0], [1, "de", 5, 15, 81, 0], [1, "de", 4, 29, 80, 0], [1, "de", 4, 37, 90, 0], [1, "de", 4, 7, 75, 0], [1, "de", 6, 22, 74, 0], [1, "de", 6, 43, 95, 0], [1, "de", 6, 57, 85, 0], [1, "de", 6, 19, 94, 0], [1, "de", 6, 9, 92, 0], [1, "de", 5, 26, 89, 0], [1, "de", 5, 31, 112, 0], [1, "de", 5, 54, 108, 0], [1, "de", 5, 55, 95, 0], [1, "de", 5, 35, 104, 0], [1, "de", 5, 13, 110, 0], [1, "de", 7, 27, 107, 0], [1, "de", 7, 47, 99, 0], [1, "de", 7, 11, 104, 0], [1, "de", 7, 9, 111, 0], [1, "de", 7, 40, 114, 0], [1, "de", 7, 28, 117, 0], [1, "de", 7, 47, 113, 0], [1, "de", 7, 63, 104, 0], [1, "de", 4, 64, 92, 0], [1, "de", 6, 86, 97, 0], [1, "de", 5, 76, 91, 0], [1, "de", 5, 85, 86, 0], [1, "de", 6, 78, 83, 0], [1, "de", 6, 71, 97, 0], [1, "de", 4, 69, 105, 0], [1, "de", 4, 79, 104, 0], [1, "de", 4, 86, 109, 0], [1, "de", 4, 86, 118, 0], [1, "de", 5, 70, 113, 0], [1, "de", 6, 69, 121, 0], [1, "de", 6, 76, 122, 0], [1, "de", 7, 87, 130, 0], [1, "de", 4, 84, 123, 0], [1, "de", 4, 57, 121, 0], [1, "de", 5, 53, 125, 0], [1, "de", 5, 62, 131, 0], [1, "de", 6, 67, 143, 0], [1, "de", 5, 77, 143, 0], [1, "de", 5, 85, 136, 0], [1, "de", 6, 87, 147, 0], [1, "de", 6, 92, 140, 0], [1, "de", 4, 93, 127, 0], [1, "de", 5, 93, 106, 0], [1, "de", 5, 45, 144, 0], [1, "de", 4, 41, 139, 0], [1, "de", 4, 54, 138, 0], [1, "de", 6, 29, 145, 0], [1, "de", 6, 29, 132, 0], [1, "de", 6, 35, 127, 0], [1, "de", 6, 64, 142, 0], [1, "de", 5, 23, 131, 0], [1, "de", 5, 9, 134, 0], [1, "de", 6, 11, 121, 0], [1, "de", 4, 26, 121, 0], [1, "de", 35, 58, 150, 0], [1, "de", 33, 48, 156, 0], [1, "de", 33, 25, 158, 0], [1, "de", 33, 36, 154, 0], [1, "de", 34, 9, 154, 0], [1, "de", 34, 13, 148, 0], [1, "de", 34, 21, 142, 0], [1, "de", 34, 38, 139, 0], [1, "de", 34, 47, 144, 0], [1, "de", 34, 68, 142, 0], [1, "de", 36, 70, 135, 0], [1, "de", 36, 64, 132, 0], [1, "de", 36, 86, 134, 0], [1, "de", 36, 90, 141, 0], [1, "de", 36, 93, 131, 0], [1, "de", 36, 91, 125, 0], [1, "de", 36, 76, 123, 0], [1, "de", 33, 82, 122, 0], [1, "de", 35, 56, 122, 0], [1, "de", 35, 40, 119, 0], [1, "de", 35, 17, 112, 0], [1, "de", 35, 37, 102, 0], [1, "de", 33, 18, 97, 0], [1, "de", 34, 10, 83, 0], [1, "de", 33, 19, 73, 0], [1, "de", 33, 10, 60, 0], [1, "de", 35, 24, 60, 0], [1, "de", 36, 14, 45, 0], [1, "de", 36, 21, 42, 0], [1, "de", 35, 8, 32, 0], [1, "de", 33, 9, 24, 0], [1, "de", 35, 35, 27, 0], [1, "de", 33, 56, 35, 0], [1, "de", 36, 53, 36, 0], [1, "de", 33, 45, 35, 0], [1, "de", 35, 53, 39, 0], [1, "de", 36, 57, 30, 0], [1, "de", 33, 86, 108, 0], [1, "de", 33, 68, 112, 0], [1, "de", 33, 49, 109, 0], [1, "de", 33, 46, 95, 0], [1, "de", 33, 90, 76, 0], [1, "de", 36, 76, 83, 0], [1, "de", 36, 70, 72, 0], [1, "de", 36, 78, 63, 0], [1, "de", 36, 90, 64, 0], [1, "de", 36, 60, 70, 0], [1, "de", 35, 75, 90, 0], [1, "de", 35, 81, 58, 0], [1, "de", 35, 91, 51, 0], [1, "de", 35, 93, 56, 0], [1, "de", 35, 61, 60, 0], [1, "de", 35, 66, 46, 0], [1, "de", 33, 90, 19, 0], [1, "de", 34, 92, 9, 0], [1, "de", 35, 75, 39, 0], [1, "de", 35, 67, 42, 0], [1, "de", 35, 93, 37, 0], [1, "de", 36, 89, 28, 0], [1, "de", 36, 42, 61, 0], [1, "de", 33, 49, 50, 0], [1, "de", 33, 44, 75, 0], [1, "de", 33, 46, 85, 0], [1, "de", 33, 64, 84, 0], [1, "de", 33, 56, 94, 0], [1, "de", 33, 25, 90, 0], [1, "de", 33, 31, 69, 0], [1, "de", 35, 34, 54, 0], [1, "de", 35, 29, 47, 0], [1, "de", 36, 42, 41, 0], [1, "de", 36, 29, 34, 0], [1, "de", 35, 20, 55, 0], [1, "de", 35, 14, 52, 0], [1, "s", 2, 12, 171, 1], [1, "r", 20, 188, 0], [1, "r", 21, 188, 0], [1, "r", 22, 188, 0], [1, "r", 23, 188, 0], [1, "r", 24, 188, 0], [1, "r", 25, 189, 0], [1, "r", 24, 189, 0], [1, "r", 23, 189, 0], [1, "r", 22, 189, 0], [1, "r", 21, 189, 0], [1, "r", 20, 189, 0], [1, "r", 19, 189, 0], [1, "r", 19, 190, 0], [1, "r", 19, 191, 0], [1, "r", 20, 191, 0], [1, "r", 21, 191, 0], [1, "r", 22, 191, 0], [1, "r", 24, 191, 0], [1, "r", 23, 191, 0], [1, "r", 25, 191, 0], [1, "r", 25, 190, 0], [1, "r", 24, 190, 0], [1, "r", 23, 190, 0], [1, "r", 22, 190, 0], [1, "r", 21, 190, 0], [1, "r", 20, 190, 0], [1, "r", 26, 190, 0], [1, "r", 26, 191, 0], [1, "r", 24, 193, 0], [1, "r", 23, 193, 0], [1, "r", 22, 193, 0], [1, "r", 20, 192, 0], [1, "r", 21, 192, 0], [1, "r", 22, 192, 0], [1, "r", 23, 192, 0], [1, "r", 24, 192, 0], [1, "r", 25, 192, 0], [1, "r", 53, 199, 0], [1, "r", 52, 200, 0], [1, "r", 54, 199, 0], [1, "r", 55, 199, 0], [1, "r", 55, 200, 0], [1, "r", 54, 200, 0], [1, "r", 53, 200, 0], [1, "r", 51, 200, 0], [1, "r", 56, 200, 0], [1, "r", 55, 201, 0], [1, "r", 54, 201, 0], [1, "r", 55, 202, 0], [1, "r", 54, 203, 0], [1, "r", 54, 204, 0], [1, "r", 54, 202, 0], [1, "r", 53, 202, 0], [1, "r", 52, 202, 0], [1, "r", 53, 201, 0], [1, "r", 52, 201, 0], [1, "r", 51, 201, 0], [1, "r", 51, 202, 0], [1, "r", 50, 202, 0], [1, "r", 50, 201, 0], [1, "r", 56, 201, 0], [1, "r", 53, 203, 0], [1, "r", 52, 203, 0], [1, "r", 51, 203, 0], [1, "r", 56, 202, 0], [1, "r", 55, 203, 0], [1, "r", 53, 204, 0], [1, "r", 52, 204, 0], [1, "r", 55, 204, 0], [1, "r", 56, 203, 0], [1, "r", 56, 244, 0], [1, "r", 54, 246, 0], [1, "r", 50, 248, 0], [1, "r", 48, 248, 0], [1, "r", 43, 248, 0], [1, "r", 45, 238, 0], [1, "r", 44, 238, 0], [1, "r", 43, 238, 0], [1, "r", 46, 238, 0], [1, "r", 47, 238, 0], [1, "r", 48, 238, 0], [1, "r", 49, 238, 0], [1, "r", 50, 238, 0], [1, "r", 51, 238, 0], [1, "r", 52, 238, 0], [1, "r", 53, 238, 0], [1, "r", 54, 239, 0], [1, "r", 53, 240, 0], [1, "r", 53, 239, 0], [1, "r", 52, 239, 0], [1, "r", 51, 239, 0], [1, "r", 50, 239, 0], [1, "r", 49, 239, 0], [1, "r", 48, 239, 0], [1, "r", 47, 239, 0], [1, "r", 46, 239, 0], [1, "r", 45, 239, 0], [1, "r", 44, 239, 0], [1, "r", 43, 239, 0], [1, "r", 42, 239, 0], [1, "r", 41, 240, 0], [1, "r", 42, 240, 0], [1, "r", 43, 240, 0], [1, "r", 44, 240, 0], [1, "r", 45, 240, 0], [1, "r", 46, 240, 0], [1, "r", 47, 240, 0], [1, "r", 48, 240, 0], [1, "r", 49, 240, 0], [1, "r", 50, 240, 0], [1, "r", 51, 240, 0], [1, "r", 52, 240, 0], [1, "r", 54, 240, 0], [1, "r", 55, 240, 0], [1, "r", 56, 241, 0], [1, "r", 55, 241, 0], [1, "r", 54, 241, 0], [1, "r", 53, 241, 0], [1, "r", 52, 241, 0], [1, "r", 51, 241, 0], [1, "r", 49, 241, 0], [1, "r", 50, 241, 0], [1, "r", 48, 241, 0], [1, "r", 47, 241, 0], [1, "r", 46, 241, 0], [1, "r", 45, 241, 0], [1, "r", 44, 241, 0], [1, "r", 43, 241, 0], [1, "r", 42, 241, 0], [1, "r", 41, 241, 0], [1, "r", 40, 242, 0], [1, "r", 41, 242, 0], [1, "r", 42, 242, 0], [1, "r", 43, 242, 0], [1, "r", 44, 242, 0], [1, "r", 45, 242, 0], [1, "r", 46, 242, 0], [1, "r", 47, 242, 0], [1, "r", 48, 242, 0], [1, "r", 49, 242, 0], [1, "r", 50, 242, 0], [1, "r", 51, 242, 0], [1, "r", 52, 242, 0], [1, "r", 53, 242, 0], [1, "r", 54, 242, 0], [1, "r", 55, 242, 0], [1, "r", 56, 242, 0], [1, "r", 56, 243, 0], [1, "r", 55, 243, 0], [1, "r", 54, 243, 0], [1, "r", 53, 243, 0], [1, "r", 52, 243, 0], [1, "r", 51, 243, 0], [1, "r", 50, 243, 0], [1, "r", 49, 243, 0], [1, "r", 48, 243, 0], [1, "r", 47, 243, 0], [1, "r", 46, 243, 0], [1, "r", 45, 243, 0], [1, "r", 44, 243, 0], [1, "r", 43, 243, 0], [1, "r", 42, 243, 0], [1, "r", 41, 243, 0], [1, "r", 40, 243, 0], [1, "r", 40, 244, 0], [1, "r", 41, 244, 0], [1, "r", 43, 244, 0], [1, "r", 44, 244, 0], [1, "r", 45, 244, 0], [1, "r", 46, 244, 0], [1, "r", 47, 244, 0], [1, "r", 48, 244, 0], [1, "r", 49, 244, 0], [1, "r", 50, 244, 0], [1, "r", 51, 244, 0], [1, "r", 52, 244, 0], [1, "r", 53, 244, 0], [1, "r", 54, 244, 0], [1, "r", 55, 244, 0], [1, "r", 42, 244, 0], [1, "r", 40, 245, 0], [1, "r", 41, 245, 0], [1, "r", 42, 245, 0], [1, "r", 43, 245, 0], [1, "r", 44, 245, 0], [1, "r", 45, 245, 0], [1, "r", 46, 245, 0], [1, "r", 47, 245, 0], [1, "r", 48, 245, 0], [1, "r", 49, 245, 0], [1, "r", 50, 245, 0], [1, "r", 51, 245, 0], [1, "r", 52, 246, 0], [1, "r", 52, 245, 0], [1, "r", 53, 245, 0], [1, "r", 54, 245, 0], [1, "r", 55, 245, 0], [1, "r", 53, 246, 0], [1, "r", 51, 246, 0], [1, "r", 50, 246, 0], [1, "r", 49, 246, 0], [1, "r", 48, 246, 0], [1, "r", 47, 246, 0], [1, "r", 45, 246, 0], [1, "r", 46, 246, 0], [1, "r", 44, 246, 0], [1, "r", 43, 246, 0], [1, "r", 42, 246, 0], [1, "r", 41, 246, 0], [1, "r", 42, 247, 0], [1, "r", 43, 247, 0], [1, "r", 44, 247, 0], [1, "r", 45, 247, 0], [1, "r", 46, 247, 0], [1, "r", 47, 247, 0], [1, "r", 48, 247, 0], [1, "r", 50, 247, 0], [1, "r", 51, 247, 0], [1, "r", 52, 247, 0], [1, "r", 53, 247, 0], [1, "r", 54, 247, 0], [1, "r", 49, 247, 0], [1, "r", 49, 248, 0], [1, "r", 47, 248, 0], [1, "r", 46, 248, 0], [1, "r", 45, 248, 0], [1, "r", 51, 248, 0], [1, "r", 55, 246, 1], [1, "r", 55, 247, 1], [1, "r", 56, 247, 1], [1, "r", 56, 248, 1], [1, "r", 95, 270, 1], [1, "r", 93, 270, 1], [1, "r", 94, 270, 1], [1, "r", 95, 271, 1], [1, "r", 94, 271, 1], [1, "r", 93, 271, 1], [1, "r", 94, 282, 1], [1, "r", 93, 282, 1], [1, "r", 93, 281, 1], [1, "r", 92, 281, 1], [1, "r", 92, 280, 1], [1, "r", 91, 280, 1], [1, "r", 90, 279, 1], [1, "r", 95, 275, 1], [1, "r", 95, 274, 1], [1, "r", 95, 273, 1], [1, "r", 95, 272, 1], [1, "r", 94, 274, 1], [1, "r", 94, 273, 1], [1, "r", 94, 272, 1], [1, "r", 93, 272, 1], [1, "r", 93, 273, 1], [1, "r", 93, 274, 1], [1, "r", 92, 273, 1], [1, "r", 92, 272, 1], [1, "r", 92, 270, 1], [1, "r", 92, 271, 1], [1, "r", 92, 269, 1], [1, "r", 90, 269, 1], [1, "r", 91, 269, 1], [1, "r", 91, 271, 1], [1, "r", 91, 270, 1], [1, "r", 95, 278, 1], [1, "r", 95, 277, 1], [1, "r", 95, 276, 1], [1, "r", 94, 276, 1], [1, "r", 94, 275, 1], [1, "r", 93, 275, 1], [1, "r", 92, 274, 1], [1, "r", 92, 275, 1], [1, "r", 91, 275, 1], [1, "r", 90, 275, 1], [1, "r", 89, 274, 1], [1, "r", 90, 274, 1], [1, "r", 89, 275, 1], [1, "r", 88, 274, 1], [1, "r", 88, 273, 1], [1, "r", 86, 272, 1], [1, "r", 85, 271, 1], [1, "r", 86, 271, 1], [1, "r", 87, 272, 1], [1, "r", 55, 248, 1], [1, "r", 54, 248, 1], [1, "r", 56, 249, 1], [1, "r", 55, 249, 1], [1, "r", 55, 250, 1], [1, "r", 56, 250, 1], [1, "r", 57, 250, 1], [1, "r", 57, 249, 1], [1, "r", 59, 250, 1], [1, "r", 58, 250, 1], [1, "r", 60, 250, 1], [1, "r", 61, 251, 1], [1, "r", 60, 251, 1], [1, "r", 62, 251, 1], [1, "r", 62, 252, 1], [1, "r", 63, 252, 1], [1, "r", 58, 251, 1], [1, "r", 57, 251, 1], [1, "r", 56, 251, 1], [1, "r", 58, 252, 1], [1, "r", 57, 252, 1], [1, "r", 57, 253, 1], [1, "r", 58, 253, 1], [1, "r", 58, 254, 1], [1, "r", 59, 255, 1], [1, "r", 58, 255, 1], [1, "r", 57, 254, 1], [1, "r", 56, 252, 1], [1, "r", 55, 251, 1], [1, "r", 60, 255, 1], [1, "r", 61, 255, 1], [1, "r", 61, 256, 1], [1, "r", 60, 256, 1], [1, "r", 62, 256, 1], [1, "r", 62, 257, 1], [1, "r", 61, 257, 1], [1, "r", 64, 253, 1], [1, "r", 64, 254, 1], [1, "r", 65, 254, 1], [1, "r", 61, 250, 1], [1, "r", 64, 252, 1], [1, "r", 65, 253, 1], [1, "r", 66, 254, 1], [1, "r", 65, 255, 1], [1, "r", 64, 255, 1], [1, "r", 64, 256, 1], [1, "r", 65, 256, 1], [1, "r", 65, 257, 1], [1, "r", 64, 257, 1], [1, "r", 63, 257, 1], [1, "r", 62, 258, 1], [1, "r", 63, 258, 1], [1, "r", 64, 258, 1], [1, "r", 66, 255, 1], [1, "r", 66, 256, 1], [1, "r", 66, 257, 1], [1, "r", 66, 258, 1], [1, "r", 65, 258, 1], [1, "r", 67, 258, 1], [1, "r", 67, 257, 1], [1, "r", 67, 259, 1], [1, "r", 66, 259, 1], [1, "r", 65, 259, 1], [1, "r", 56, 246, 1], [1, "r", 56, 245, 1], [1, "r", 68, 258, 1], [1, "r", 68, 259, 1], [1, "r", 68, 260, 1], [1, "r", 69, 260, 1], [1, "r", 69, 261, 1], [1, "r", 70, 261, 1], [1, "r", 71, 261, 1], [1, "r", 67, 260, 1], [1, "r", 89, 269, 1], [1, "r", 89, 268, 1], [1, "r", 90, 268, 1], [1, "r", 82, 267, 1], [1, "r", 83, 267, 1], [1, "r", 80, 266, 1], [1, "r", 81, 266, 1], [1, "r", 81, 267, 1], [1, "r", 79, 266, 1], [1, "r", 78, 265, 1], [1, "r", 77, 265, 1], [1, "r", 76, 264, 1], [1, "r", 75, 264, 1], [1, "r", 75, 263, 1], [1, "r", 74, 263, 1], [1, "r", 74, 262, 1], [1, "r", 72, 262, 1], [1, "r", 73, 262, 1], [1, "r", 71, 262, 1], [1, "r", 85, 270, 1], [1, "r", 84, 270, 1], [1, "r", 84, 269, 1], [1, "r", 83, 269, 1], [1, "r", 82, 269, 1], [1, "r", 81, 269, 1], [1, "r", 81, 268, 1], [1, "r", 82, 268, 1], [1, "r", 83, 268, 1], [1, "r", 80, 268, 1], [1, "r", 80, 267, 1], [1, "r", 79, 267, 1], [1, "r", 78, 266, 1], [1, "r", 76, 265, 1], [1, "r", 75, 262, 1], [1, "r", 90, 280, 1], [1, "r", 89, 280, 1], [1, "r", 89, 279, 1], [1, "r", 88, 279, 1], [1, "r", 88, 278, 1], [1, "r", 87, 277, 1], [1, "r", 86, 276, 1], [1, "r", 86, 275, 1], [1, "r", 86, 274, 1], [1, "r", 86, 273, 1], [1, "r", 85, 273, 1], [1, "r", 85, 272, 1], [1, "r", 85, 274, 1], [1, "r", 86, 277, 1], [1, "r", 87, 278, 1], [1, "r", 84, 271, 1], [1, "r", 83, 270, 1], [1, "r", 87, 273, 1], [1, "r", 91, 274, 1], [1, "r", 89, 273, 1], [1, "r", 88, 272, 1], [1, "r", 91, 281, 1], [1, "r", 92, 282, 1], [1, "r", 88, 280, 1], [1, "r", 87, 279, 1], [1, "r", 85, 275, 1], [1, "r", 84, 273, 1], [1, "r", 84, 272, 1], [1, "r", 83, 271, 1], [1, "r", 82, 270, 1], [1, "r", 84, 267, 0], [1, "r", 85, 267, 0], [1, "r", 76, 262, 0], [1, "r", 77, 262, 0], [1, "r", 88, 268, 0], [1, "r", 78, 262, 0], [1, "r", 79, 262, 0], [1, "r", 80, 262, 0], [1, "r", 80, 263, 0], [1, "r", 81, 263, 0], [1, "r", 82, 263, 0], [1, "r", 83, 263, 0], [1, "r", 84, 263, 0], [1, "r", 85, 263, 0], [1, "r", 88, 262, 0], [1, "r", 89, 262, 0], [1, "r", 90, 262, 0], [1, "r", 87, 262, 0], [1, "r", 86, 262, 0], [1, "r", 86, 263, 0], [1, "r", 87, 263, 0], [1, "r", 91, 262, 0], [1, "r", 95, 262, 0], [1, "r", 94, 262, 0], [1, "r", 86, 267, 0], [1, "r", 87, 267, 0], [1, "r", 87, 268, 0], [1, "r", 86, 268, 0], [1, "r", 74, 189, 0], [1, "r", 75, 189, 0], [1, "r", 76, 189, 0], [1, "r", 77, 189, 0], [1, "r", 78, 190, 0], [1, "r", 77, 190, 0], [1, "r", 75, 190, 0], [1, "r", 76, 190, 0], [1, "r", 74, 190, 0], [1, "r", 73, 190, 0], [1, "r", 78, 191, 0], [1, "r", 76, 191, 0], [1, "r", 77, 191, 0], [1, "r", 75, 191, 0], [1, "r", 74, 191, 0], [1, "r", 78, 192, 0], [1, "r", 77, 192, 0], [1, "r", 76, 192, 0], [1, "r", 75, 192, 0], [1, "r", 74, 192, 0], [1, "r", 73, 191, 0], [1, "f", 1, 96, 22, 1], [1, "s", 1, 97, 22, 1], [1, "f", 1, 98, 22, 1], [1, "s", 0, 99, 22, 1], [1, "s", 1, 100, 21, 1], [1, "s", 1, 96, 49, 1], [1, "s", 1, 100, 50, 1], [1, "s", 0, 99, 49, 1], [1, "s", 0, 97, 49, 1], [1, "f", 1, 98, 49, 1], [1, "r", 70, 218, 0], [1, "r", 71, 218, 0], [1, "r", 72, 218, 0], [1, "r", 73, 218, 0], [1, "r", 74, 219, 0], [1, "r", 73, 219, 0], [1, "r", 72, 219, 0], [1, "r", 71, 219, 0], [1, "r", 70, 219, 0], [1, "r", 73, 220, 0], [1, "r", 72, 220, 0], [1, "r", 71, 220, 0], [1, "r", 72, 221, 0], [1, "r", 71, 221, 0], [1, "r", 70, 221, 0], [1, "r", 69, 221, 0], [1, "r", 68, 221, 0], [1, "r", 70, 220, 0], [1, "r", 69, 220, 0], [1, "r", 69, 219, 0], [1, "r", 68, 220, 0], [1, "r", 73, 221, 0], [1, "r", 73, 222, 0], [1, "r", 71, 222, 0], [1, "r", 72, 222, 0], [1, "r", 74, 221, 0], [1, "r", 74, 220, 0], [1, "r", 75, 220, 0], [1, "r", 75, 221, 0], [1, "r", 70, 222, 0], [1, "r", 69, 222, 0], [1, "r", 29, 217, 0], [1, "r", 30, 217, 0], [1, "r", 31, 217, 0], [1, "r", 32, 217, 0], [1, "r", 31, 219, 0], [1, "r", 30, 219, 0], [1, "r", 29, 219, 0], [1, "r", 27, 219, 0], [1, "r", 25, 219, 0], [1, "r", 26, 219, 0], [1, "r", 28, 219, 0], [1, "r", 26, 218, 0], [1, "r", 27, 218, 0], [1, "r", 28, 218, 0], [1, "r", 29, 218, 0], [1, "r", 30, 218, 0], [1, "r", 28, 217, 0], [1, "r", 26, 217, 0], [1, "r", 27, 217, 0], [1, "r", 28, 216, 0], [1, "r", 29, 216, 0], [1, "r", 30, 216, 0], [1, "r", 31, 218, 0], [1, "r", 32, 218, 0], [1, "r", 31, 216, 0], [1, "r", 31, 221, 0], [1, "r", 31, 220, 0], [1, "r", 30, 220, 0], [1, "r", 29, 220, 0], [1, "r", 28, 220, 0], [1, "r", 27, 220, 0], [1, "r", 26, 220, 0], [1, "r", 25, 218, 0], [1, "r", 27, 221, 0], [1, "r", 28, 221, 0], [1, "r", 29, 221, 0], [1, "r", 30, 221, 0], [1, "r", 32, 220, 0], [1, "r", 32, 219, 0], [1, "r", 33, 218, 0], [1, "r", 33, 219, 0], [1, "r", 75, 238, 0], [1, "r", 76, 238, 0], [1, "r", 77, 239, 0], [1, "r", 76, 239, 0], [1, "r", 75, 239, 0], [1, "r", 74, 239, 0], [1, "r", 76, 240, 0], [1, "r", 77, 240, 0], [1, "r", 78, 240, 0], [1, "r", 77, 241, 0], [1, "r", 76, 241, 0], [1, "r", 75, 241, 0], [1, "r", 75, 240, 0], [1, "r", 74, 240, 0], [1, "r", 78, 239, 0], [1, "r", 77, 238, 0], [1, "r", 18, 253, 0], [1, "r", 19, 252, 0], [1, "r", 20, 252, 0], [1, "r", 21, 253, 0], [1, "r", 23, 254, 0], [1, "r", 20, 254, 0], [1, "r", 19, 254, 0], [1, "r", 22, 254, 0], [1, "r", 18, 254, 0], [1, "r", 19, 253, 0], [1, "r", 20, 253, 0], [1, "r", 21, 254, 0], [1, "r", 22, 253, 0], [1, "r", 21, 255, 0], [1, "r", 20, 255, 0], [1, "r", 19, 255, 0], [1, "r", 18, 255, 0], [1, "r", 17, 255, 0], [1, "r", 17, 254, 0], [1, "r", 22, 255, 0], [1, "r", 19, 256, 0], [1, "r", 20, 256, 0], [1, "r", 21, 256, 0], [1, "r", 39, 270, 0], [1, "r", 40, 270, 0], [1, "r", 41, 270, 0], [1, "r", 43, 270, 0], [1, "r", 44, 270, 0], [1, "r", 46, 270, 0], [1, "r", 42, 270, 0], [1, "r", 45, 270, 0], [1, "r", 44, 269, 0], [1, "r", 43, 269, 0], [1, "r", 42, 269, 0], [1, "r", 40, 269, 0], [1, "r", 41, 269, 0], [1, "r", 45, 271, 0], [1, "r", 44, 271, 0], [1, "r", 43, 271, 0], [1, "r", 42, 271, 0], [1, "r", 41, 271, 0], [1, "r", 40, 271, 0], [1, "r", 39, 271, 0], [1, "r", 46, 271, 0], [1, "r", 45, 272, 0], [1, "r", 44, 272, 0], [1, "r", 43, 272, 0], [1, "r", 42, 272, 0], [1, "r", 19, 284, 0], [1, "r", 20, 284, 0], [1, "r", 21, 285, 0], [1, "r", 22, 285, 0], [1, "r", 23, 286, 0], [1, "r", 22, 288, 0], [1, "r", 20, 288, 0], [1, "r", 18, 288, 0], [1, "r", 17, 287, 0], [1, "r", 16, 287, 0], [1, "r", 16, 286, 0], [1, "r", 17, 286, 0], [1, "r", 18, 286, 0], [1, "r", 19, 286, 0], [1, "r", 20, 286, 0], [1, "r", 21, 286, 0], [1, "r", 22, 286, 0], [1, "r", 20, 285, 0], [1, "r", 19, 285, 0], [1, "r", 18, 285, 0], [1, "r", 17, 285, 0], [1, "r", 19, 287, 0], [1, "r", 18, 287, 0], [1, "r", 20, 287, 0], [1, "r", 21, 287, 0], [1, "r", 22, 287, 0], [1, "r", 23, 287, 0], [1, "r", 21, 288, 0], [1, "r", 19, 288, 0], [1, "r", 17, 288, 0], [1, "r", 19, 289, 0], [1, "r", 21, 289, 0], [1, "r", 22, 289, 0], [1, "r", 20, 289, 0], [1, "r", 23, 288, 0], [1, "r", 24, 287, 0], [1, "r", 24, 286, 0], [1, "r", 23, 285, 0], [1, "r", 66, 286, 0], [1, "r", 64, 287, 0], [1, "r", 63, 287, 0], [1, "r", 60, 287, 0], [1, "r", 59, 285, 0], [1, "r", 58, 284, 0], [1, "r", 59, 283, 0], [1, "r", 65, 283, 0], [1, "r", 64, 283, 0], [1, "r", 63, 283, 0], [1, "r", 62, 283, 0], [1, "r", 61, 283, 0], [1, "r", 60, 283, 0], [1, "r", 59, 284, 0], [1, "r", 58, 285, 0], [1, "r", 60, 286, 0], [1, "r", 59, 286, 0], [1, "r", 61, 287, 0], [1, "r", 62, 287, 0], [1, "r", 61, 286, 0], [1, "r", 62, 286, 0], [1, "r", 63, 286, 0], [1, "r", 64, 286, 0], [1, "r", 65, 286, 0], [1, "r", 67, 285, 0], [1, "r", 66, 285, 0], [1, "r", 65, 285, 0], [1, "r", 64, 285, 0], [1, "r", 63, 285, 0], [1, "r", 62, 285, 0], [1, "r", 61, 285, 0], [1, "r", 60, 285, 0], [1, "r", 60, 284, 0], [1, "r", 61, 284, 0], [1, "r", 62, 284, 0], [1, "r", 63, 284, 0], [1, "r", 64, 284, 0], [1, "r", 65, 284, 0], [1, "r", 66, 284, 0], [1, "r", 65, 287, 0], [1, "r", 67, 286, 0], [1, "p", 0, 13, 189, 1], [1, "p", 0, 32, 184, 1], [1, "p", 0, 47, 191, 1], [1, "p", 0, 64, 184, 1], [1, "p", 0, 84, 192, 1], [1, "p", 0, 78, 207, 1], [1, "p", 0, 58, 216, 1], [1, "p", 0, 41, 211, 1], [1, "p", 0, 18, 211, 1], [1, "p", 0, 14, 230, 1], [1, "p", 0, 29, 237, 1], [1, "p", 0, 50, 230, 1], [1, "p", 0, 78, 241, 1], [1, "p", 0, 74, 256, 1], [1, "p", 0, 68, 266, 1], [1, "p", 0, 48, 259, 1], [1, "p", 0, 31, 263, 1], [1, "p", 0, 18, 274, 1], [1, "p", 0, 33, 283, 1], [1, "p", 0, 66, 287, 1], [1, "p", 0, 82, 291, 1], [1, "p", 0, 16, 295, 1], [1, "p", 0, 45, 294, 1], [1, "p", 0, 18, 252, 1], [1, "p", 0, 79, 227, 1], [1, "p", 0, 32, 200, 1], [1, "p", 0, 64, 200, 1], [1, "s", 0, 21, 193, 1], [1, "s", 1, 18, 189, 1], [1, "s", 2, 26, 189, 1], [1, "b", 1, 15, 181, 0], [1, "b", 2, 18, 190, 0], [1, "b", 2, 29, 193, 0], [1, "t", 3, 16, 182, 0], [1, "t", 3, 13, 195, 0], [1, "t", 4, 16, 183, 0], [1, "t", 5, 10, 184, 0], [1, "t", 5, 23, 182, 0], [1, "t", 4, 30, 187, 0], [1, "t", 1, 26, 192, 0], [1, "b", 1, 25, 188, 0], [1, "s", 1, 24, 181, 1], [1, "t", 3, 33, 183, 0], [1, "b", 1, 36, 189, 0], [1, "t", 2, 35, 190, 0], [1, "b", 3, 19, 200, 0], [1, "s", 0, 28, 194, 1], [1, "s", 1, 32, 196, 1], [1, "s", 1, 36, 183, 1], [1, "s", 2, 38, 184, 1], [1, "s", 2, 10, 192, 1], [1, "s", 2, 12, 183, 1], [1, "s", 1, 15, 199, 1], [1, "b", 0, 12, 202, 0], [1, "t", 2, 13, 203, 0], [1, "t", 4, 20, 200, 0], [1, "t", 4, 12, 194, 0], [1, "t", 5, 15, 205, 0], [1, "t", 5, 29, 200, 0], [1, "t", 3, 28, 201, 0], [1, "s", 2, 25, 199, 1], [1, "s", 1, 22, 204, 1], [1, "g", 2, 25, 205, 1], [1, "b", 1, 27, 216, 0], [1, "s", 1, 25, 217, 1], [1, "s", 1, 33, 217, 1], [1, "s", 2, 35, 215, 1], [1, "s", 0, 32, 221, 1], [1, "t", 2, 31, 222, 0], [1, "t", 4, 26, 221, 0], [1, "b", 3, 27, 222, 0], [1, "b", 0, 17, 217, 0], [1, "t", 3, 18, 216, 0], [1, "t", 4, 13, 215, 0], [1, "t", 5, 30, 213, 0], [1, "t", 5, 24, 208, 0], [1, "s", 1, 12, 216, 1], [1, "s", 2, 11, 210, 1], [1, "s", 2, 34, 223, 1], [1, "b", 2, 36, 218, 0], [1, "t", 4, 40, 206, 0], [1, "t", 5, 35, 203, 0], [1, "t", 3, 39, 206, 0], [1, "b", 1, 34, 204, 0], [1, "s", 1, 33, 206, 1], [1, "s", 1, 42, 203, 1], [1, "s", 0, 47, 196, 1], [1, "b", 2, 40, 196, 0], [1, "t", 4, 39, 197, 0], [1, "t", 5, 44, 187, 0], [1, "b", 1, 46, 181, 0], [1, "t", 2, 47, 182, 0], [1, "b", 0, 57, 182, 0], [1, "b", 3, 56, 183, 0], [1, "t", 4, 55, 184, 0], [1, "t", 5, 62, 195, 0], [1, "s", 1, 51, 185, 1], [1, "s", 2, 62, 180, 1], [1, "s", 2, 61, 188, 1], [1, "s", 1, 61, 189, 1], [1, "s", 2, 48, 195, 1], [1, "b", 1, 51, 199, 0], [1, "t", 2, 52, 199, 0], [1, "t", 3, 56, 204, 0], [1, "t", 4, 57, 204, 0], [1, "t", 4, 51, 204, 0], [1, "s", 1, 52, 205, 1], [1, "s", 2, 57, 200, 1], [1, "s", 1, 56, 199, 1], [1, "b", 0, 55, 192, 0], [1, "t", 3, 56, 193, 0], [1, "t", 4, 50, 190, 0], [1, "b", 1, 76, 188, 0], [1, "t", 2, 75, 188, 0], [1, "t", 2, 73, 192, 0], [1, "t", 4, 72, 191, 0], [1, "t", 5, 78, 193, 0], [1, "b", 0, 79, 192, 0], [1, "s", 2, 79, 190, 1], [1, "s", 1, 74, 194, 1], [1, "s", 1, 72, 187, 1], [1, "s", 0, 74, 183, 1], [1, "s", 1, 75, 183, 1], [1, "t", 2, 69, 181, 0], [1, "t", 4, 70, 182, 0], [1, "t", 5, 69, 180, 0], [1, "b", 1, 65, 189, 0], [1, "b", 2, 66, 189, 0], [1, "t", 3, 64, 188, 0], [1, "t", 4, 67, 192, 0], [1, "b", 2, 85, 183, 0], [1, "t", 1, 84, 184, 0], [1, "t", 4, 81, 180, 0], [1, "t", 5, 89, 180, 0], [1, "t", 0, 90, 188, 0], [1, "t", 3, 89, 190, 0], [1, "s", 1, 87, 187, 1], [1, "s", 2, 87, 197, 1], [1, "b", 1, 84, 200, 0], [1, "t", 2, 83, 201, 0], [1, "t", 4, 87, 207, 0], [1, "s", 2, 79, 202, 1], [1, "s", 1, 80, 203, 1], [1, "t", 0, 71, 200, 0], [1, "b", 2, 72, 201, 0], [1, "t", 2, 65, 205, 0], [1, "t", 1, 66, 206, 0], [1, "t", 4, 63, 209, 0], [1, "t", 5, 73, 203, 0], [1, "s", 0, 70, 207, 1], [1, "s", 1, 71, 206, 1], [1, "s", 2, 68, 199, 1], [1, "s", 1, 64, 213, 1], [1, "t", 0, 85, 213, 0], [1, "b", 2, 84, 212, 0], [1, "t", 3, 77, 209, 0], [1, "t", 4, 83, 216, 0], [1, "t", 4, 73, 209, 0], [1, "b", 0, 86, 222, 0], [1, "b", 3, 87, 221, 0], [1, "s", 1, 80, 214, 1], [1, "s", 2, 87, 216, 1], [1, "s", 2, 84, 224, 1], [1, "s", 1, 77, 227, 1], [1, "t", 1, 74, 222, 0], [1, "b", 1, 69, 218, 0], [1, "b", 2, 75, 219, 0], [1, "s", 2, 74, 218, 1], [1, "s", 1, 69, 223, 1], [1, "s", 1, 77, 221, 1], [1, "b", 1, 72, 211, 0], [1, "b", 1, 85, 232, 0], [1, "t", 2, 84, 233, 0], [1, "t", 2, 78, 238, 0], [1, "b", 1, 77, 237, 0], [1, "t", 5, 87, 236, 0], [1, "t", 5, 76, 229, 0], [1, "b", 2, 74, 241, 0], [1, "s", 0, 73, 242, 1], [1, "s", 0, 81, 238, 1], [1, "s", 1, 82, 237, 1], [1, "s", 2, 72, 237, 1], [1, "s", 2, 78, 242, 1], [1, "b", 1, 66, 230, 0], [1, "b", 2, 62, 229, 0], [1, "t", 4, 67, 231, 0], [1, "t", 4, 62, 228, 0], [1, "t", 5, 64, 233, 0], [1, "t", 2, 65, 234, 0], [1, "t", 2, 51, 220, 0], [1, "t", 1, 50, 218, 0], [1, "b", 1, 45, 223, 0], [1, "b", 2, 46, 224, 0], [1, "t", 4, 49, 218, 0], [1, "t", 4, 47, 225, 0], [1, "s", 1, 50, 215, 1], [1, "s", 2, 51, 213, 1], [1, "s", 2, 42, 227, 1], [1, "s", 1, 44, 227, 1], [1, "s", 1, 60, 230, 1], [1, "s", 2, 59, 231, 1], [1, "b", 1, 85, 252, 0], [1, "t", 2, 84, 251, 0], [1, "t", 2, 74, 250, 0], [1, "t", 0, 75, 251, 0], [1, "b", 0, 83, 246, 0], [1, "t", 3, 82, 247, 0], [1, "t", 4, 81, 259, 0], [1, "t", 4, 69, 249, 0], [1, "t", 5, 87, 246, 0], [1, "t", 5, 75, 252, 0], [1, "s", 1, 79, 257, 1], [1, "s", 2, 78, 249, 1], [1, "s", 2, 80, 258, 1], [1, "s", 1, 88, 254, 1], [1, "s", 1, 85, 264, 1], [1, "s", 2, 89, 263, 1], [1, "s", 2, 87, 269, 1], [1, "s", 0, 84, 268, 1], [1, "s", 2, 76, 267, 1], [1, "s", 1, 66, 261, 1], [1, "s", 1, 87, 274, 1], [1, "s", 1, 76, 263, 1], [1, "s", 1, 59, 251, 1], [1, "s", 0, 59, 252, 1], [1, "t", 2, 86, 265, 0], [1, "t", 0, 78, 270, 0], [1, "t", 2, 79, 271, 0], [1, "t", 0, 77, 260, 0], [1, "t", 3, 78, 261, 0], [1, "b", 1, 71, 264, 0], [1, "b", 1, 88, 269, 0], [1, "t", 5, 84, 264, 0], [1, "t", 5, 79, 261, 0], [1, "t", 5, 72, 265, 0], [1, "t", 5, 77, 270, 0], [1, "t", 0, 87, 261, 0], [1, "t", 2, 86, 260, 0], [1, "t", 4, 84, 255, 0], [1, "t", 4, 68, 255, 0], [1, "t", 1, 67, 254, 0], [1, "t", 2, 65, 262, 0], [1, "t", 1, 57, 260, 0], [1, "t", 2, 58, 259, 0], [1, "b", 1, 63, 256, 0], [1, "b", 1, 52, 248, 0], [1, "t", 2, 53, 248, 0], [1, "s", 1, 50, 253, 1], [1, "s", 2, 67, 263, 1], [1, "s", 2, 52, 252, 1], [1, "s", 2, 71, 244, 1], [1, "b", 0, 57, 245, 0], [1, "t", 2, 58, 244, 0], [1, "b", 1, 53, 237, 0], [1, "t", 2, 54, 237, 0], [1, "t", 2, 41, 238, 0], [1, "t", 1, 42, 237, 0], [1, "t", 5, 57, 235, 0], [1, "t", 5, 60, 246, 0], [1, "t", 5, 50, 252, 0], [1, "t", 1, 42, 248, 0], [1, "b", 1, 43, 249, 0], [1, "b", 3, 37, 243, 0], [1, "s", 0, 50, 236, 1], [1, "s", 2, 39, 247, 1], [1, "s", 2, 51, 235, 1], [1, "s", 2, 60, 243, 1], [1, "s", 2, 36, 240, 1], [1, "s", 2, 43, 254, 1], [1, "s", 1, 42, 254, 1], [1, "t", 1, 38, 233, 0], [1, "t", 2, 35, 235, 0], [1, "t", 4, 33, 228, 0], [1, "t", 4, 33, 245, 0], [1, "t", 4, 43, 235, 0], [1, "t", 5, 45, 249, 0], [1, "t", 5, 41, 253, 0], [1, "b", 1, 20, 227, 0], [1, "b", 1, 14, 240, 0], [1, "t", 3, 21, 227, 0], [1, "t", 3, 27, 234, 0], [1, "t", 3, 15, 241, 0], [1, "t", 3, 12, 229, 0], [1, "t", 4, 17, 224, 0], [1, "t", 4, 11, 231, 0], [1, "t", 4, 22, 238, 0], [1, "t", 4, 11, 239, 0], [1, "t", 1, 22, 243, 0], [1, "b", 2, 23, 242, 0], [1, "s", 1, 23, 238, 1], [1, "s", 1, 22, 228, 1], [1, "s", 2, 24, 228, 1], [1, "s", 2, 21, 236, 1], [1, "s", 0, 13, 228, 1], [1, "s", 0, 16, 242, 1], [1, "s", 1, 15, 244, 1], [1, "s", 1, 34, 236, 1], [1, "t", 1, 26, 249, 0], [1, "t", 1, 22, 256, 0], [1, "t", 2, 23, 255, 0], [1, "b", 1, 17, 256, 0], [1, "b", 2, 18, 256, 0], [1, "s", 0, 21, 252, 1], [1, "s", 2, 20, 250, 1], [1, "s", 2, 23, 259, 1], [1, "s", 1, 13, 257, 1], [1, "t", 1, 31, 254, 0], [1, "t", 2, 32, 254, 0], [1, "t", 4, 28, 254, 0], [1, "t", 4, 34, 258, 0], [1, "t", 0, 29, 260, 0], [1, "b", 2, 30, 261, 0], [1, "t", 0, 43, 262, 0], [1, "t", 2, 42, 263, 0], [1, "t", 4, 46, 264, 0], [1, "b", 1, 39, 265, 0], [1, "b", 1, 58, 267, 0], [1, "t", 2, 57, 268, 0], [1, "t", 4, 62, 270, 0], [1, "t", 5, 52, 273, 0], [1, "s", 1, 52, 269, 1], [1, "s", 1, 41, 272, 1], [1, "s", 2, 41, 274, 1], [1, "t", 2, 42, 268, 0], [1, "t", 0, 43, 268, 0], [1, "b", 1, 46, 272, 0], [1, "b", 1, 14, 265, 0], [1, "t", 2, 15, 266, 0], [1, "t", 4, 19, 264, 0], [1, "t", 4, 29, 263, 0], [1, "t", 4, 11, 269, 0], [1, "t", 1, 29, 271, 0], [1, "b", 2, 28, 272, 0], [1, "t", 2, 24, 267, 0], [1, "t", 2, 20, 279, 0], [1, "t", 0, 19, 278, 0], [1, "t", 3, 13, 278, 0], [1, "b", 0, 21, 284, 0], [1, "b", 0, 18, 289, 0], [1, "t", 2, 20, 283, 0], [1, "t", 2, 19, 290, 0], [1, "t", 4, 19, 283, 0], [1, "t", 4, 20, 290, 0], [1, "s", 1, 16, 285, 1], [1, "s", 1, 24, 288, 1], [1, "s", 2, 26, 287, 1], [1, "s", 2, 16, 278, 1], [1, "s", 1, 21, 268, 1], [1, "s", 2, 19, 268, 1], [1, "t", 0, 12, 294, 0], [1, "b", 1, 13, 295, 0], [1, "t", 3, 13, 291, 0], [1, "t", 3, 10, 299, 0], [1, "t", 4, 11, 287, 0], [1, "t", 4, 17, 298, 0], [1, "t", 1, 27, 294, 0], [1, "b", 2, 26, 295, 0], [1, "t", 3, 33, 297, 0], [1, "b", 1, 48, 278, 0], [1, "b", 0, 46, 280, 0], [1, "b", 2, 50, 280, 0], [1, "t", 0, 44, 282, 0], [1, "b", 1, 49, 283, 0], [1, "b", 0, 51, 278, 0], [1, "b", 3, 50, 279, 0], [1, "b", 3, 44, 284, 0], [1, "b", 0, 47, 284, 0], [1, "b", 2, 42, 283, 0], [1, "t", 4, 51, 277, 0], [1, "b", 1, 44, 286, 0], [1, "b", 2, 46, 286, 0], [1, "b", 1, 42, 285, 0], [1, "b", 3, 41, 286, 0], [1, "t", 5, 42, 287, 0], [1, "b", 1, 42, 278, 0], [1, "b", 2, 43, 279, 0], [1, "b", 0, 40, 280, 0], [1, "t", 4, 39, 283, 0], [1, "t", 4, 39, 279, 0], [1, "t", 5, 43, 277, 0], [1, "t", 5, 47, 287, 0], [1, "t", 4, 46, 277, 0], [1, "t", 4, 45, 290, 0], [1, "t", 4, 36, 285, 0], [1, "t", 3, 35, 284, 0], [1, "t", 3, 36, 272, 0], [1, "t", 4, 35, 271, 0], [1, "t", 1, 29, 279, 0], [1, "b", 1, 32, 277, 0], [1, "t", 3, 31, 278, 0], [1, "b", 2, 28, 280, 0], [1, "t", 4, 29, 286, 0], [1, "t", 5, 28, 275, 0], [1, "t", 3, 37, 292, 0], [1, "b", 1, 36, 291, 0], [1, "b", 0, 34, 298, 0], [1, "t", 4, 31, 292, 0], [1, "t", 4, 46, 295, 0], [1, "t", 4, 59, 287, 0], [1, "b", 1, 58, 286, 0], [1, "s", 1, 68, 284, 1], [1, "s", 2, 70, 286, 1], [1, "s", 0, 67, 284, 1], [1, "t", 3, 66, 283, 0], [1, "t", 1, 65, 282, 0], [1, "b", 1, 64, 288, 0], [1, "t", 3, 60, 293, 0], [1, "t", 1, 61, 294, 0], [1, "b", 1, 76, 294, 0], [1, "t", 5, 75, 295, 0], [1, "t", 5, 56, 293, 0], [1, "t", 5, 59, 281, 0], [1, "t", 5, 67, 291, 0], [1, "b", 0, 88, 293, 0], [1, "t", 2, 89, 292, 0], [1, "t", 2, 85, 286, 0], [1, "t", 4, 88, 289, 0], [1, "t", 4, 79, 287, 0], [1, "b", 1, 84, 285, 0], [1, "t", 3, 75, 284, 0], [1, "b", 0, 75, 278, 0], [1, "t", 3, 74, 277, 0], [1, "t", 4, 81, 276, 0], [1, "t", 2, 65, 276, 0], [1, "b", 1, 66, 275, 0], [1, "g", 0, 45, 261, 1], [1, "g", 1, 39, 258, 1], [1, "g", 0, 35, 250, 1], [1, "g", 2, 22, 247, 1], [1, "g", 2, 27, 227, 1], [1, "g", 2, 63, 218, 1], [1, "g", 1, 56, 224, 1], [1, "g", 0, 46, 231, 1], [1, "g", 1, 65, 240, 1], [1, "g", 2, 67, 238, 1], [1, "g", 2, 79, 232, 1], [1, "g", 2, 72, 253, 1], [1, "g", 2, 62, 264, 1], [1, "g", 2, 28, 267, 1], [1, "g", 2, 58, 274, 1], [1, "de", 2, 14, 182, 0], [1, "de", 2, 24, 182, 0], [1, "de", 0, 11, 185, 0], [1, "de", 0, 14, 194, 0], [1, "de", 1, 25, 196, 0], [1, "de", 3, 31, 183, 0], [1, "de", 0, 38, 181, 0], [1, "de", 2, 45, 186, 0], [1, "de", 1, 38, 191, 0], [1, "de", 0, 56, 181, 0], [1, "de", 1, 68, 182, 0], [1, "de", 2, 80, 181, 0], [1, "de", 3, 86, 187, 0], [1, "de", 0, 84, 193, 0], [1, "de", 1, 82, 201, 0], [1, "de", 2, 64, 191, 0], [1, "de", 2, 72, 200, 0], [1, "de", 3, 64, 201, 0], [1, "de", 2, 76, 209, 0], [1, "de", 3, 71, 212, 0], [1, "de", 1, 86, 214, 0], [1, "de", 0, 57, 208, 0], [1, "de", 0, 41, 203, 0], [1, "de", 1, 15, 206, 0], [1, "de", 2, 25, 209, 0], [1, "de", 3, 16, 218, 0], [1, "de", 3, 11, 227, 0], [1, "de", 0, 22, 229, 0], [1, "de", 1, 15, 239, 0], [1, "de", 2, 24, 238, 0], [1, "de", 3, 22, 246, 0], [1, "de", 3, 10, 253, 0], [1, "de", 1, 18, 258, 0], [1, "de", 1, 28, 261, 0], [1, "de", 1, 14, 267, 0], [1, "de", 0, 24, 268, 0], [1, "de", 0, 15, 278, 0], [1, "de", 2, 21, 279, 0], [1, "de", 2, 30, 272, 0], [1, "de", 2, 29, 281, 0], [1, "de", 2, 15, 284, 0], [1, "de", 3, 12, 291, 0], [1, "de", 3, 30, 287, 0], [1, "de", 3, 27, 293, 0], [1, "de", 0, 25, 296, 0], [1, "de", 0, 11, 298, 0], [1, "de", 0, 8, 286, 0], [1, "de", 2, 36, 299, 0], [1, "de", 2, 37, 280, 0], [1, "de", 3, 38, 291, 0], [1, "de", 1, 48, 287, 0], [1, "de", 1, 46, 277, 0], [1, "de", 1, 53, 278, 0], [1, "de", 3, 48, 295, 0], [1, "de", 0, 57, 294, 0], [1, "de", 1, 65, 290, 0], [1, "de", 1, 84, 292, 0], [1, "de", 2, 77, 295, 0], [1, "de", 2, 84, 287, 0], [1, "de", 0, 74, 279, 0], [1, "de", 3, 65, 274, 0], [1, "de", 2, 71, 267, 0], [1, "de", 2, 65, 261, 0], [1, "de", 2, 47, 264, 0], [1, "de", 3, 47, 258, 0], [1, "de", 3, 53, 251, 0], [1, "de", 2, 40, 253, 0], [1, "de", 0, 35, 244, 0], [1, "de", 0, 37, 233, 0], [1, "de", 3, 44, 226, 0], [1, "de", 2, 37, 219, 0], [1, "de", 2, 54, 234, 0], [1, "de", 1, 66, 234, 0], [1, "de", 2, 65, 241, 0], [1, "de", 0, 68, 249, 0], [1, "de", 3, 78, 257, 0], [1, "de", 2, 86, 253, 0], [1, "de", 2, 83, 245, 0], [1, "de", 1, 82, 238, 0], [1, "de", 3, 76, 235, 0], [1, "de", 2, 86, 232, 0], [1, "de", 0, 86, 224, 0], [1, "de", 2, 76, 226, 0], [1, "de", 2, 61, 228, 0], [1, "de", 2, 58, 217, 0], [1, "de", 0, 49, 217, 0], [1, "de", 19, 11, 179, 0], [1, "de", 20, 17, 180, 0], [1, "de", 22, 18, 181, 0], [1, "de", 19, 30, 184, 0], [1, "de", 19, 27, 187, 0], [1, "de", 19, 30, 195, 0], [1, "de", 19, 18, 192, 0], [1, "de", 19, 44, 182, 0], [1, "de", 19, 49, 182, 0], [1, "de", 19, 54, 182, 0], [1, "de", 19, 59, 183, 0], [1, "de", 19, 56, 186, 0], [1, "de", 19, 46, 188, 0], [1, "de", 19, 58, 193, 0], [1, "de", 19, 67, 187, 0], [1, "de", 19, 65, 192, 0], [1, "de", 19, 71, 180, 0], [1, "de", 19, 78, 187, 0], [1, "de", 19, 80, 194, 0], [1, "de", 19, 72, 193, 0], [1, "de", 19, 82, 182, 0], [1, "de", 19, 88, 185, 0], [1, "de", 19, 87, 189, 0], [1, "de", 19, 86, 197, 0], [1, "de", 19, 85, 203, 0], [1, "de", 19, 74, 200, 0], [1, "de", 19, 70, 202, 0], [1, "de", 19, 83, 199, 0], [1, "de", 19, 86, 208, 0], [1, "de", 19, 84, 214, 0], [1, "de", 19, 83, 211, 0], [1, "de", 19, 84, 217, 0], [1, "de", 19, 77, 210, 0], [1, "de", 19, 71, 210, 0], [1, "de", 19, 73, 213, 0], [1, "de", 19, 66, 207, 0], [1, "de", 19, 66, 204, 0], [1, "de", 19, 62, 209, 0], [1, "de", 19, 63, 201, 0], [1, "de", 19, 56, 205, 0], [1, "de", 19, 49, 199, 0], [1, "de", 19, 50, 205, 0], [1, "de", 19, 40, 197, 0], [1, "de", 19, 38, 198, 0], [1, "de", 19, 40, 208, 0], [1, "de", 19, 36, 204, 0], [1, "de", 19, 33, 204, 0], [1, "de", 19, 29, 202, 0], [1, "de", 19, 27, 200, 0], [1, "de", 19, 26, 193, 0], [1, "de", 19, 18, 201, 0], [1, "de", 19, 20, 199, 0], [1, "de", 19, 12, 196, 0], [1, "de", 19, 12, 204, 0], [1, "de", 19, 11, 201, 0], [1, "de", 19, 23, 208, 0], [1, "de", 19, 31, 214, 0], [1, "de", 19, 26, 215, 0], [1, "de", 19, 36, 217, 0], [1, "de", 19, 32, 223, 0], [1, "de", 19, 26, 223, 0], [1, "de", 19, 18, 218, 0], [1, "de", 19, 15, 215, 0], [1, "de", 19, 17, 212, 0], [1, "de", 19, 15, 224, 0], [1, "de", 19, 19, 229, 0], [1, "de", 19, 10, 230, 0], [1, "de", 19, 22, 240, 0], [1, "de", 19, 13, 238, 0], [1, "de", 19, 13, 243, 0], [1, "de", 19, 24, 244, 0], [1, "de", 19, 24, 250, 0], [1, "de", 19, 28, 253, 0], [1, "de", 19, 33, 255, 0], [1, "de", 19, 34, 260, 0], [1, "de", 19, 31, 260, 0], [1, "de", 19, 38, 267, 0], [1, "de", 19, 44, 264, 0], [1, "de", 19, 43, 261, 0], [1, "de", 19, 16, 257, 0], [1, "de", 19, 22, 258, 0], [1, "de", 19, 12, 253, 0], [1, "de", 19, 8, 242, 0], [1, "de", 19, 8, 255, 0], [1, "de", 19, 15, 264, 0], [1, "de", 19, 20, 265, 0], [1, "de", 19, 12, 271, 0], [1, "de", 19, 8, 272, 0], [1, "de", 19, 13, 277, 0], [1, "de", 19, 21, 277, 0], [1, "de", 19, 21, 281, 0], [1, "de", 19, 27, 282, 0], [1, "de", 19, 29, 278, 0], [1, "de", 19, 29, 273, 0], [1, "de", 19, 36, 271, 0], [1, "de", 19, 8, 278, 0], [1, "de", 19, 11, 286, 0], [1, "de", 19, 17, 291, 0], [1, "de", 19, 14, 294, 0], [1, "de", 19, 8, 292, 0], [1, "de", 19, 12, 300, 0], [1, "de", 19, 18, 298, 0], [1, "de", 19, 16, 301, 0], [1, "de", 19, 27, 296, 0], [1, "de", 19, 25, 292, 0], [1, "de", 19, 23, 301, 0], [1, "de", 19, 28, 301, 0], [1, "de", 19, 35, 297, 0], [1, "de", 19, 37, 301, 0], [1, "de", 19, 43, 301, 0], [1, "de", 19, 46, 294, 0], [1, "de", 19, 46, 288, 0], [1, "de", 19, 40, 287, 0], [1, "de", 19, 50, 301, 0], [1, "de", 19, 58, 301, 0], [1, "de", 19, 64, 301, 0], [1, "de", 19, 71, 301, 0], [1, "de", 19, 80, 301, 0], [1, "de", 19, 87, 301, 0], [1, "de", 19, 86, 294, 0], [1, "de", 19, 87, 290, 0], [1, "de", 19, 82, 286, 0], [1, "de", 19, 75, 285, 0], [1, "de", 19, 66, 292, 0], [1, "de", 19, 66, 288, 0], [1, "de", 19, 58, 288, 0], [1, "de", 19, 67, 282, 0], [1, "de", 19, 61, 281, 0], [1, "de", 19, 60, 295, 0], [1, "de", 19, 50, 282, 0], [1, "de", 19, 47, 283, 0], [1, "de", 19, 48, 281, 0], [1, "de", 19, 44, 277, 0], [1, "de", 19, 41, 282, 0], [1, "de", 19, 38, 281, 0], [1, "de", 19, 42, 288, 0], [1, "de", 19, 52, 281, 0], [1, "de", 19, 50, 275, 0], [1, "de", 19, 39, 277, 0], [1, "de", 19, 38, 284, 0], [1, "de", 19, 51, 285, 0], [1, "de", 19, 38, 278, 0], [1, "de", 19, 47, 272, 0], [1, "de", 19, 44, 267, 0], [1, "de", 19, 76, 280, 0], [1, "de", 19, 78, 272, 0], [1, "de", 19, 68, 275, 0], [1, "de", 19, 70, 265, 0], [1, "de", 19, 65, 263, 0], [1, "de", 19, 64, 262, 0], [1, "de", 19, 60, 268, 0], [1, "de", 19, 56, 266, 0], [1, "de", 19, 55, 260, 0], [1, "de", 19, 59, 258, 0], [1, "de", 19, 62, 255, 0], [1, "de", 19, 67, 253, 0], [1, "de", 19, 69, 256, 0], [1, "de", 19, 44, 253, 0], [1, "de", 19, 44, 250, 0], [1, "de", 19, 36, 245, 0], [1, "de", 19, 39, 239, 0], [1, "de", 19, 42, 234, 0], [1, "de", 19, 37, 235, 0], [1, "de", 19, 45, 226, 0], [1, "de", 19, 46, 222, 0], [1, "de", 19, 51, 218, 0], [1, "de", 19, 68, 218, 0], [1, "de", 19, 74, 224, 0], [1, "de", 19, 76, 218, 0], [1, "de", 19, 84, 221, 0], [1, "de", 19, 88, 223, 0], [1, "de", 19, 76, 230, 0], [1, "de", 19, 86, 234, 0], [1, "de", 19, 79, 237, 0], [1, "de", 19, 75, 243, 0], [1, "de", 19, 81, 245, 0], [1, "de", 19, 83, 247, 0], [1, "de", 19, 88, 247, 0], [1, "de", 19, 84, 254, 0], [1, "de", 19, 86, 251, 0], [1, "de", 19, 85, 260, 0], [1, "de", 19, 79, 260, 0], [1, "de", 19, 76, 251, 0], [1, "de", 19, 72, 251, 0], [1, "de", 19, 69, 251, 0], [1, "de", 19, 87, 266, 0], [1, "de", 19, 89, 270, 0], [1, "de", 19, 87, 271, 0], [1, "de", 19, 82, 277, 0], [1, "de", 19, 87, 284, 0], [1, "de", 19, 87, 237, 0], [1, "de", 19, 88, 179, 0], [1, "de", 19, 50, 191, 0], [1, "de", 19, 52, 221, 0], [1, "de", 19, 34, 234, 0], [1, "de", 19, 27, 233, 0], [1, "de", 19, 37, 293, 0], [1, "de", 29, 13, 181, 0], [1, "de", 29, 8, 180, 0], [1, "de", 30, 13, 186, 0], [1, "de", 31, 24, 183, 0], [1, "de", 32, 33, 185, 0], [1, "de", 32, 37, 182, 0], [1, "de", 29, 45, 183, 0], [1, "de", 30, 48, 183, 0], [1, "de", 30, 58, 181, 0], [1, "de", 30, 66, 188, 0], [1, "de", 30, 66, 182, 0], [1, "de", 29, 63, 196, 0], [1, "de", 29, 54, 194, 0], [1, "de", 30, 79, 189, 0], [1, "de", 30, 87, 182, 0], [1, "de", 30, 83, 185, 0], [1, "de", 29, 88, 189, 0], [1, "de", 29, 85, 202, 0], [1, "de", 31, 82, 203, 0], [1, "de", 32, 80, 201, 0], [1, "de", 32, 87, 209, 0], [1, "de", 32, 83, 214, 0], [1, "de", 30, 88, 220, 0], [1, "de", 30, 78, 229, 0], [1, "de", 30, 73, 223, 0], [1, "de", 29, 74, 217, 0], [1, "de", 29, 67, 217, 0], [1, "de", 30, 72, 208, 0], [1, "de", 30, 73, 199, 0], [1, "de", 30, 65, 207, 0], [1, "de", 29, 63, 210, 0], [1, "de", 29, 50, 204, 0], [1, "de", 30, 41, 205, 0], [1, "de", 29, 35, 205, 0], [1, "de", 30, 27, 202, 0], [1, "de", 30, 20, 201, 0], [1, "de", 29, 10, 203, 0], [1, "de", 29, 14, 196, 0], [1, "de", 29, 24, 187, 0], [1, "de", 29, 28, 223, 0], [1, "de", 29, 32, 212, 0], [1, "de", 30, 28, 214, 0], [1, "de", 31, 24, 218, 0], [1, "de", 29, 36, 219, 0], [1, "de", 29, 37, 217, 0], [1, "de", 29, 52, 217, 0], [1, "de", 29, 59, 217, 0], [1, "de", 29, 69, 231, 0], [1, "de", 29, 64, 242, 0], [1, "de", 30, 53, 253, 0], [1, "de", 30, 45, 250, 0], [1, "de", 30, 58, 261, 0], [1, "de", 30, 73, 276, 0], [1, "de", 30, 64, 276, 0], [1, "de", 30, 82, 285, 0], [1, "de", 30, 65, 293, 0], [1, "de", 30, 56, 288, 0], [1, "de", 30, 45, 296, 0], [1, "de", 30, 40, 288, 0], [1, "de", 30, 37, 283, 0], [1, "de", 30, 53, 280, 0], [1, "de", 30, 41, 277, 0], [1, "de", 29, 28, 296, 0], [1, "de", 29, 18, 292, 0], [1, "de", 29, 24, 284, 0], [1, "de", 30, 10, 295, 0], [1, "de", 30, 10, 286, 0], [1, "de", 30, 15, 279, 0], [1, "de", 30, 15, 269, 0], [1, "de", 30, 21, 259, 0], [1, "de", 30, 12, 256, 0], [1, "de", 30, 31, 245, 0], [1, "de", 30, 12, 240, 0], [1, "de", 30, 28, 235, 0], [1, "de", 30, 13, 226, 0], [1, "de", 30, 39, 231, 0], [1, "de", 30, 61, 226, 0], [1, "r", 96, 262, 0], [1, "r", 97, 262, 0], [1, "r", 98, 262, 0], [1, "r", 97, 270, 0], [1, "r", 97, 271, 0], [1, "r", 97, 272, 0], [1, "r", 97, 273, 0], [1, "r", 97, 274, 0], [1, "r", 97, 275, 0], [1, "r", 97, 276, 0], [1, "r", 97, 277, 0], [1, "r", 97, 278, 0], [1, "r", 98, 270, 0], [1, "r", 98, 271, 0], [1, "r", 98, 272, 0], [1, "r", 98, 273, 0], [1, "r", 98, 274, 0], [1, "r", 98, 275, 0], [1, "r", 98, 276, 0], [1, "r", 98, 277, 0], [1, "r", 98, 278, 0], [1, "r", 96, 283, 0], [1, "r", 97, 283, 0], [1, "r", 97, 284, 0], [1, "r", 97, 285, 0], [1, "r", 98, 283, 0], [1, "r", 98, 284, 0], [1, "r", 98, 285, 0], [1, "r", 96, 270, 0], [1, "r", 96, 271, 0], [1, "r", 96, 272, 0], [1, "r", 96, 273, 0], [1, "r", 96, 274, 0], [1, "r", 96, 275, 0], [1, "r", 96, 276, 0], [1, "r", 96, 277, 0], [1, "r", 96, 278, 0], [1, "r", 44, 248, 0], [1, "de", 16, 94, 290, 0], [1, "de", 16, 94, 252, 0], [1, "de", 16, 94, 228, 0], [1, "de", 17, 94, 200, 0], [1, "r", 95, 282, 1], [1, "r", 95, 281, 1], [1, "r", 94, 281, 1], [1, "r", 90, 281, 1], [1, "r", 91, 282, 1], [1, "r", 89, 281, 1], [1, "r", 85, 276, 1], [1, "r", 85, 277, 1], [1, "r", 86, 278, 1], [1, "p", 0, 85, 279, 1], [1, "r", 86, 279, 1], [1, "r", 87, 280, 1], [1, "r", 96, 281, 0], [1, "r", 97, 281, 0], [1, "r", 98, 281, 0], [1, "r", 98, 282, 0], [1, "r", 97, 282, 0], [1, "r", 96, 282, 0], [1, "r", 68, 261, 1], [1, "fo", 1, 94, 168, 0], [1, "fo", 2, 94, 151, 0], [1, "fo", 1, 94, 138, 0], [1, "fo", 1, 93, 124, 0], [1, "fo", 1, 94, 129, 0], [1, "fo", 1, 93, 113, 0], [1, "fo", 1, 94, 102, 0], [1, "fo", 1, 94, 93, 0], [1, "fo", 1, 93, 90, 0], [1, "fo", 1, 94, 79, 0], [1, "fo", 1, 94, 76, 0], [1, "fo", 1, 93, 70, 0], [1, "fo", 1, 93, 63, 0], [1, "fo", 1, 94, 53, 0], [1, "fo", 1, 93, 10, 0], [1, "fo", 1, 85, 8, 0], [1, "fo", 1, 94, 12, 0], [1, "fo", 1, 66, 13, 0], [1, "fo", 1, 69, 9, 0], [1, "fo", 2, 68, 14, 0], [1, "fo", 2, 66, 25, 0], [1, "fo", 2, 92, 9, 0], [1, "fo", 2, 94, 14, 0], [1, "fo", 2, 87, 9, 0], [1, "fo", 2, 71, 9, 0], [1, "fo", 2, 90, 12, 0], [1, "fo", 2, 91, 13, 0], [1, "fo", 1, 74, 12, 0], [1, "fo", 2, 72, 12, 0], [1, "fo", 2, 75, 13, 0], [1, "fo", 2, 74, 15, 0], [1, "fo", 2, 84, 12, 0], [1, "fo", 2, 81, 14, 0], [1, "fo", 1, 84, 13, 0], [1, "fo", 1, 84, 19, 0], [1, "fo", 1, 11, 9, 0], [1, "fo", 1, 7, 14, 0], [1, "fo", 1, 8, 22, 0], [1, "fo", 1, 7, 34, 0], [1, "fo", 1, 12, 24, 0], [1, "fo", 2, 8, 24, 0], [1, "fo", 2, 9, 21, 0], [1, "fo", 2, 31, 10, 0], [1, "fo", 2, 33, 27, 0], [1, "fo", 2, 9, 34, 0], [1, "fo", 2, 8, 19, 0], [1, "fo", 1, 14, 10, 0], [1, "fo", 2, 13, 9, 0], [1, "fo", 2, 15, 11, 0], [1, "fo", 2, 9, 9, 0], [1, "fo", 2, 9, 10, 0], [1, "fo", 2, 9, 15, 0], [1, "fo", 2, 10, 23, 0], [1, "fo", 2, 34, 29, 0], [1, "fo", 2, 27, 18, 0], [1, "fo", 2, 25, 21, 0], [1, "fo", 2, 20, 18, 0], [1, "fo", 2, 18, 21, 0], [1, "fo", 2, 29, 9, 0], [1, "fo", 2, 13, 14, 0], [1, "fo", 2, 9, 38, 0], [1, "fo", 2, 21, 39, 0], [1, "fo", 2, 84, 26, 0], [1, "fo", 2, 77, 25, 0], [1, "fo", 2, 86, 35, 0], [1, "fo", 1, 70, 35, 0], [1, "fo", 2, 72, 36, 0], [1, "fo", 2, 73, 31, 0], [1, "fo", 2, 89, 39, 0], [1, "fo", 2, 65, 40, 0], [1, "fo", 2, 92, 32, 0], [1, "fo", 2, 90, 28, 0], [1, "de", 22, 25, 266, 0], [1, "de", 22, 17, 206, 0], [1, "de", 19, 8, 184, 0], [1, "de", 19, 22, 183, 0], [1, "de", 19, 35, 188, 0], [1, "de", 19, 36, 192, 0], [1, "de", 19, 50, 277, 0], [1, "de", 19, 35, 279, 0], [1, "t", 4, 7, 178, 0], [1, "t", 1, 7, 179, 0], [1, "t", 3, 7, 180, 0], [1, "t", 2, 7, 181, 0], [1, "t", 5, 7, 182, 0], [1, "t", 4, 7, 183, 0], [1, "t", 3, 7, 184, 0], [1, "t", 4, 7, 185, 0], [1, "t", 2, 7, 186, 0], [1, "t", 1, 7, 187, 0], [1, "t", 4, 7, 188, 0], [1, "t", 3, 7, 189, 0], [1, "t", 5, 7, 190, 0], [1, "t", 1, 7, 191, 0], [1, "t", 3, 7, 192, 0], [1, "t", 4, 7, 193, 0], [1, "t", 3, 7, 194, 0], [1, "t", 5, 7, 195, 0], [1, "t", 2, 7, 196, 0], [1, "t", 4, 7, 197, 0], [1, "b", 2, 7, 198, 0], [1, "t", 4, 7, 199, 0], [1, "t", 2, 7, 200, 0], [1, "t", 5, 7, 201, 0], [1, "t", 2, 7, 202, 0], [1, "t", 4, 7, 203, 0], [1, "t", 2, 7, 204, 0], [1, "t", 5, 7, 205, 0], [1, "t", 2, 7, 206, 0], [1, "t", 1, 7, 207, 0], [1, "t", 4, 7, 208, 0], [1, "t", 3, 7, 209, 0], [1, "t", 1, 7, 210, 0], [1, "b", 0, 7, 211, 0], [1, "t", 3, 7, 212, 0], [1, "t", 4, 7, 213, 0], [1, "t", 3, 7, 214, 0], [1, "t", 5, 7, 215, 0], [1, "t", 5, 7, 216, 0], [1, "t", 3, 7, 217, 0], [1, "t", 1, 7, 218, 0], [1, "t", 4, 7, 219, 0], [1, "b", 2, 7, 220, 0], [1, "t", 1, 7, 221, 0], [1, "t", 2, 7, 222, 0], [1, "t", 4, 7, 223, 0], [1, "t", 3, 7, 224, 0], [1, "t", 1, 7, 225, 0], [1, "t", 4, 7, 226, 0], [1, "t", 2, 7, 227, 0], [1, "t", 5, 7, 228, 0], [1, "t", 3, 7, 229, 0], [1, "t", 1, 7, 230, 0], [1, "t", 4, 7, 231, 0], [1, "b", 2, 7, 232, 0], [1, "t", 5, 7, 233, 0], [1, "t", 1, 7, 234, 0], [1, "t", 3, 7, 235, 0], [1, "t", 4, 7, 236, 0], [1, "t", 2, 7, 237, 0], [1, "t", 5, 7, 238, 0], [1, "b", 3, 7, 239, 0], [1, "t", 2, 7, 240, 0], [1, "t", 1, 7, 241, 0], [1, "t", 2, 7, 242, 0], [1, "t", 4, 7, 243, 0], [1, "t", 3, 7, 244, 0], [1, "t", 4, 7, 245, 0], [1, "t", 1, 7, 246, 0], [1, "b", 0, 7, 247, 0], [1, "t", 3, 7, 248, 0], [1, "t", 5, 7, 249, 0], [1, "t", 2, 7, 250, 0], [1, "t", 1, 7, 251, 0], [1, "t", 4, 7, 252, 0], [1, "t", 3, 7, 253, 0], [1, "t", 5, 7, 254, 0], [1, "t", 1, 7, 255, 0], [1, "t", 4, 7, 256, 0], [1, "t", 1, 7, 257, 0], [1, "t", 2, 7, 258, 0], [1, "t", 5, 7, 260, 0], [1, "t", 3, 7, 259, 0], [1, "t", 1, 7, 261, 0], [1, "t", 3, 7, 262, 0], [1, "t", 4, 7, 263, 0], [1, "t", 1, 7, 264, 0], [1, "t", 2, 7, 265, 0], [1, "t", 5, 7, 266, 0], [1, "t", 2, 7, 267, 0], [1, "t", 2, 7, 269, 0], [1, "b", 2, 7, 268, 0], [1, "t", 4, 7, 270, 0], [1, "t", 1, 7, 271, 0], [1, "t", 5, 7, 272, 0], [1, "b", 2, 7, 273, 0], [1, "t", 4, 7, 274, 0], [1, "t", 2, 7, 275, 0], [1, "t", 5, 7, 276, 0], [1, "t", 5, 7, 277, 0], [1, "t", 2, 7, 278, 0], [1, "t", 1, 7, 279, 0], [1, "t", 4, 7, 280, 0], [1, "b", 1, 7, 281, 0], [1, "t", 3, 7, 282, 0], [1, "t", 4, 7, 283, 0], [1, "t", 1, 7, 284, 0], [1, "t", 3, 7, 285, 0], [1, "t", 5, 7, 286, 0], [1, "t", 4, 7, 288, 0], [1, "t", 2, 7, 287, 0], [1, "b", 0, 7, 289, 0], [1, "t", 4, 7, 290, 0], [1, "t", 2, 7, 291, 0], [1, "t", 5, 7, 292, 0], [1, "t", 3, 7, 293, 0], [1, "t", 1, 7, 294, 0], [1, "t", 4, 7, 295, 0], [1, "t", 3, 7, 296, 0], [1, "t", 1, 7, 297, 0], [1, "t", 4, 7, 298, 0], [1, "t", 2, 7, 299, 0], [1, "b", 0, 7, 300, 0], [1, "t", 2, 7, 301, 0], [1, "r", 196, 271, 0], [1, "r", 199, 274, 0], [1, "r", 167, 238, 0], [1, "r", 171, 240, 0], [1, "r", 189, 207, 0], [1, "r", 192, 209, 0], [1, "r", 198, 271, 0], [1, "r", 197, 271, 0], [1, "r", 198, 272, 0], [1, "r", 197, 272, 0], [1, "r", 196, 272, 0], [1, "r", 195, 272, 0], [1, "r", 199, 272, 0], [1, "r", 199, 273, 0], [1, "r", 198, 273, 0], [1, "r", 197, 273, 0], [1, "r", 196, 273, 0], [1, "r", 198, 274, 0], [1, "r", 197, 274, 0], [1, "r", 195, 273, 0], [1, "r", 196, 274, 0], [1, "r", 198, 275, 0], [1, "r", 197, 275, 0], [1, "r", 200, 274, 0], [1, "r", 200, 273, 0], [1, "r", 199, 275, 0], [1, "plm", 2, 200, 272, 0], [1, "plm", 1, 195, 271, 0], [1, "plm", 0, 199, 268, 0], [1, "plm", 0, 193, 277, 0], [1, "plm", 1, 199, 276, 0], [1, "s", 1, 200, 275, 1], [1, "s", 1, 194, 272, 1], [1, "s", 2, 193, 270, 1], [1, "g", 2, 193, 273, 1], [1, "g", 2, 201, 267, 1], [1, "m", 2, 220, 298, 1], [1, "m", 1, 219, 292, 1], [1, "m", 1, 214, 297, 1], [1, "r", 168, 238, 0], [1, "r", 169, 238, 0], [1, "r", 170, 238, 0], [1, "r", 171, 239, 0], [1, "r", 170, 239, 0], [1, "r", 169, 239, 0], [1, "r", 168, 239, 0], [1, "r", 167, 239, 0], [1, "r", 166, 239, 0], [1, "r", 166, 240, 0], [1, "r", 167, 240, 0], [1, "r", 168, 240, 0], [1, "r", 169, 240, 0], [1, "r", 170, 240, 0], [1, "r", 168, 241, 0], [1, "r", 169, 241, 0], [1, "r", 170, 241, 0], [1, "r", 171, 241, 0], [1, "plm", 2, 171, 238, 0], [1, "plm", 1, 166, 238, 0], [1, "plm", 0, 167, 237, 0], [1, "plm", 0, 171, 242, 0], [1, "plm", 0, 165, 243, 0], [1, "plm", 0, 171, 235, 0], [1, "plm", 0, 174, 241, 0], [1, "s", 1, 165, 239, 1], [1, "s", 1, 172, 241, 1], [1, "s", 0, 170, 237, 1], [1, "s", 1, 171, 237, 1], [1, "s", 2, 174, 236, 1], [1, "s", 2, 162, 241, 1], [1, "s", 2, 170, 246, 1], [1, "s", 2, 167, 235, 1], [1, "s", 2, 176, 243, 1], [1, "r", 190, 207, 0], [1, "r", 191, 207, 0], [1, "r", 192, 208, 0], [1, "r", 191, 208, 0], [1, "r", 190, 208, 0], [1, "r", 189, 208, 0], [1, "r", 188, 208, 0], [1, "r", 189, 209, 0], [1, "r", 190, 209, 0], [1, "r", 191, 209, 0], [1, "r", 188, 209, 0], [1, "r", 190, 210, 0], [1, "r", 191, 210, 0], [1, "r", 192, 210, 0], [1, "plm", 2, 189, 210, 0], [1, "plm", 2, 192, 205, 0], [1, "plm", 1, 192, 207, 0], [1, "plm", 0, 193, 210, 0], [1, "plm", 0, 187, 208, 0], [1, "plm", 0, 197, 206, 0], [1, "plm", 0, 191, 213, 0], [1, "plm", 0, 190, 204, 0], [1, "s", 1, 188, 207, 1], [1, "s", 1, 190, 211, 1], [1, "s", 2, 188, 213, 1], [1, "s", 2, 187, 205, 1], [1, "s", 0, 194, 210, 1], [1, "s", 0, 198, 207, 1], [1, "s", 1, 193, 204, 1], [1, "s", 1, 193, 213, 1], [1, "s", 2, 198, 212, 1], [1, "s", 2, 182, 208, 1], [1, "s", 1, 204, 271, 1], [1, "s", 0, 203, 272, 1], [1, "s", 0, 189, 275, 1], [1, "s", 0, 195, 265, 1], [1, "s", 2, 196, 264, 1], [1, "s", 2, 186, 274, 1], [1, "s", 2, 197, 280, 1], [1, "s", 0, 217, 282, 1], [1, "s", 1, 214, 285, 1], [1, "s", 1, 214, 274, 1], [1, "s", 1, 203, 282, 1], [1, "s", 1, 205, 290, 1], [1, "s", 0, 207, 292, 1], [1, "s", 0, 197, 297, 1], [1, "s", 0, 184, 287, 1], [1, "s", 2, 213, 289, 1], [1, "s", 2, 196, 294, 1], [1, "s", 2, 187, 286, 1], [1, "s", 1, 192, 289, 1], [1, "s", 1, 189, 299, 1], [1, "s", 0, 213, 273, 1], [1, "g", 2, 212, 278, 1], [1, "g", 1, 200, 288, 1], [1, "g", 2, 215, 265, 1], [1, "g", 2, 183, 281, 1], [1, "s", 0, 178, 295, 1], [1, "s", 0, 167, 281, 1], [1, "s", 0, 175, 263, 1], [1, "s", 1, 176, 293, 1], [1, "s", 1, 163, 285, 1], [1, "s", 1, 177, 266, 1], [1, "s", 1, 161, 272, 1], [1, "s", 2, 185, 261, 1], [1, "c", 0, 217, 270, 1], [1, "c", 0, 220, 278, 1], [1, "c", 0, 217, 283, 1], [1, "c", 0, 220, 287, 1], [1, "c", 0, 210, 292, 1], [1, "c", 0, 205, 297, 1], [1, "c", 0, 198, 293, 1], [1, "c", 0, 208, 283, 1], [1, "c", 0, 197, 283, 1], [1, "c", 0, 190, 289, 1], [1, "c", 0, 183, 296, 1], [1, "c", 0, 189, 291, 1], [1, "c", 0, 178, 284, 1], [1, "c", 0, 208, 265, 1], [1, "c", 0, 169, 292, 1], [1, "s", 1, 158, 294, 1], [1, "s", 0, 151, 297, 1], [1, "s", 0, 147, 288, 1], [1, "c", 0, 150, 289, 1], [1, "c", 0, 160, 282, 1], [1, "c", 0, 146, 274, 1], [1, "c", 0, 167, 264, 1], [1, "c", 0, 165, 267, 1], [1, "g", 0, 189, 257, 1], [1, "g", 1, 197, 248, 1], [1, "g", 2, 170, 255, 1], [1, "g", 2, 212, 234, 1], [1, "g", 2, 189, 230, 1], [1, "g", 2, 173, 221, 1], [1, "g", 1, 210, 214, 1], [1, "s", 1, 153, 257, 1], [1, "s", 0, 158, 255, 1], [1, "s", 0, 184, 248, 1], [1, "s", 0, 212, 254, 1], [1, "s", 1, 203, 249, 1], [1, "s", 2, 204, 252, 1], [1, "s", 2, 187, 248, 1], [1, "s", 0, 206, 237, 1], [1, "s", 0, 196, 227, 1], [1, "s", 0, 181, 228, 1], [1, "s", 1, 199, 227, 1], [1, "s", 1, 208, 238, 1], [1, "s", 1, 179, 222, 1], [1, "s", 1, 213, 223, 1], [1, "s", 2, 182, 222, 1], [1, "s", 2, 211, 226, 1], [1, "s", 2, 214, 214, 1], [1, "s", 2, 201, 216, 1], [1, "s", 2, 215, 192, 1], [1, "s", 1, 210, 198, 1], [1, "s", 1, 198, 196, 1], [1, "s", 2, 208, 199, 1], [1, "s", 2, 187, 192, 1], [1, "s", 1, 179, 198, 1], [1, "s", 2, 177, 197, 1], [1, "s", 0, 164, 197, 1], [1, "s", 1, 159, 193, 1], [1, "s", 1, 149, 206, 1], [1, "s", 1, 164, 209, 1], [1, "s", 2, 165, 210, 1], [1, "s", 2, 161, 191, 1], [1, "s", 1, 162, 224, 1], [1, "s", 0, 150, 236, 1], [1, "s", 1, 149, 239, 1], [1, "s", 2, 153, 236, 1], [1, "s", 2, 160, 223, 1], [1, "s", 2, 151, 207, 1], [1, "s", 2, 147, 220, 1], [1, "s", 2, 145, 265, 1], [1, "s", 2, 145, 285, 1], [1, "c", 0, 152, 266, 1], [1, "c", 0, 185, 271, 1], [1, "c", 0, 210, 254, 1], [1, "c", 0, 209, 256, 1], [1, "c", 0, 198, 254, 1], [1, "c", 0, 213, 246, 1], [1, "c", 0, 216, 237, 1], [1, "c", 0, 204, 240, 1], [1, "c", 0, 196, 234, 1], [1, "c", 0, 188, 238, 1], [1, "c", 0, 182, 245, 1], [1, "c", 0, 173, 252, 1], [1, "c", 0, 153, 248, 1], [1, "c", 0, 158, 233, 1], [1, "c", 0, 147, 230, 1], [1, "c", 0, 151, 224, 1], [1, "c", 0, 157, 214, 1], [1, "c", 0, 167, 219, 1], [1, "c", 0, 171, 208, 1], [1, "c", 0, 179, 219, 1], [1, "c", 0, 176, 229, 1], [1, "c", 0, 195, 221, 1], [1, "c", 0, 207, 222, 1], [1, "c", 0, 214, 207, 1], [1, "c", 0, 205, 210, 1], [1, "c", 0, 204, 196, 1], [1, "c", 0, 214, 196, 1], [1, "c", 0, 190, 199, 1], [1, "c", 0, 184, 194, 1], [1, "c", 0, 172, 199, 1], [1, "c", 0, 161, 204, 1], [1, "c", 0, 157, 196, 1], [1, "c", 0, 149, 194, 1], [1, "c", 0, 147, 208, 1], [1, "c", 0, 207, 274, 1], [1, "c", 0, 217, 258, 1], [1, "c", 0, 201, 260, 1], [1, "c", 0, 178, 276, 1], [1, "c", 0, 187, 265, 1], [1, "s", 1, 204, 260, 1], [1, "s", 1, 216, 260, 1], [1, "s", 1, 187, 255, 1], [1, "s", 2, 189, 254, 1], [1, "s", 2, 212, 257, 1], [1, "s", 2, 182, 286, 1], [1, "s", 2, 169, 280, 1], [1, "s", 2, 217, 273, 1], [1, "s", 2, 215, 282, 1], [1, "s", 2, 172, 263, 1], [1, "s", 2, 176, 267, 1], [1, "s", 2, 215, 251, 1], [1, "fod", 1, 221, 282, 0], [1, "fod", 1, 222, 284, 0], [1, "fod", 1, 221, 290, 0], [1, "fod", 1, 222, 294, 0], [1, "fod", 1, 221, 297, 0], [1, "fod", 1, 223, 298, 0], [1, "fod", 1, 222, 300, 0], [1, "fod", 1, 218, 301, 0], [1, "fod", 1, 217, 299, 0], [1, "fod", 1, 215, 301, 0], [1, "fod", 1, 212, 300, 0], [1, "fod", 1, 206, 300, 0], [1, "fod", 1, 209, 301, 0], [1, "fod", 1, 204, 299, 0], [1, "fod", 1, 202, 301, 0], [1, "fod", 1, 199, 301, 0], [1, "fod", 1, 222, 282, 0], [1, "fod", 1, 207, 301, 0], [1, "fod", 1, 197, 301, 0], [1, "fod", 1, 215, 291, 0], [1, "fod", 1, 216, 286, 0], [1, "fod", 1, 214, 292, 0], [1, "fod", 1, 210, 289, 0], [1, "fod", 1, 208, 294, 0], [1, "fod", 1, 210, 298, 0], [1, "fod", 1, 212, 281, 0], [1, "fod", 1, 219, 278, 0], [1, "fod", 1, 219, 282, 0], [1, "fod", 1, 205, 286, 0], [1, "fod", 1, 202, 293, 0], [1, "fod", 1, 198, 295, 0], [1, "fod", 2, 213, 282, 0], [1, "fod", 2, 213, 291, 0], [1, "fod", 2, 216, 289, 0], [1, "fod", 2, 219, 289, 0], [1, "fod", 2, 218, 285, 0], [1, "fod", 2, 220, 283, 0], [1, "fod", 2, 211, 283, 0], [1, "fod", 2, 215, 281, 0], [1, "fod", 2, 217, 279, 0], [1, "fod", 2, 208, 290, 0], [1, "fod", 2, 211, 296, 0], [1, "fod", 2, 215, 294, 0], [1, "fod", 2, 212, 298, 0], [1, "fod", 2, 203, 294, 0], [1, "fod", 2, 204, 288, 0], [1, "fod", 2, 200, 294, 0], [1, "fod", 2, 198, 297, 0], [1, "fod", 2, 202, 299, 0], [1, "fod", 2, 200, 299, 0], [1, "fod", 2, 220, 300, 0], [1, "fod", 2, 220, 295, 0], [1, "fod", 2, 220, 292, 0], [1, "fod", 2, 219, 287, 0], [1, "fod", 2, 211, 288, 0], [1, "fod", 2, 213, 287, 0], [1, "fod", 2, 211, 289, 0], [1, "fod", 2, 212, 290, 0], [1, "fod", 2, 195, 296, 0], [1, "fod", 2, 196, 299, 0], [1, "fod", 2, 194, 300, 0], [1, "fod", 2, 195, 300, 0], [1, "fod", 2, 213, 279, 0], [1, "fod", 2, 211, 279, 0], [1, "fod", 0, 218, 290, 0], [1, "fod", 0, 212, 294, 0], [1, "fod", 1, 213, 295, 0], [1, "fod", 1, 217, 292, 0], [1, "fod", 1, 218, 288, 0], [1, "fod", 1, 210, 295, 0], [1, "fod", 1, 213, 292, 0], [1, "fod", 1, 212, 289, 0], [1, "fod", 1, 205, 295, 0], [1, "fod", 2, 206, 296, 0], [1, "fod", 2, 208, 296, 0], [1, "fod", 2, 221, 288, 0], [1, "fod", 2, 209, 299, 0], [1, "fod", 2, 211, 291, 0], [1, "fod", 1, 203, 275, 0], [1, "fod", 1, 204, 272, 0], [1, "fod", 2, 205, 273, 0], [1, "fod", 2, 204, 276, 0], [1, "fod", 2, 202, 276, 0], [1, "fod", 2, 199, 277, 0], [1, "fod", 2, 202, 273, 0], [1, "fod", 2, 199, 270, 0], [1, "fod", 2, 194, 274, 0], [1, "fod", 2, 194, 277, 0], [1, "fod", 1, 192, 274, 0], [1, "fod", 1, 194, 267, 0], [1, "fod", 2, 194, 265, 0], [1, "fod", 2, 190, 272, 0], [1, "fod", 2, 191, 275, 0], [1, "fod", 2, 195, 274, 0], [1, "fod", 2, 200, 271, 0], [1, "fod", 1, 168, 243, 0], [1, "fod", 1, 175, 240, 0], [1, "fod", 1, 169, 234, 0], [1, "fod", 1, 162, 235, 0], [1, "fod", 2, 169, 236, 0], [1, "fod", 2, 171, 234, 0], [1, "fod", 2, 165, 238, 0], [1, "fod", 2, 173, 241, 0], [1, "fod", 2, 174, 238, 0], [1, "fod", 2, 176, 240, 0], [1, "fod", 2, 169, 244, 0], [1, "fod", 2, 166, 243, 0], [1, "fod", 2, 162, 236, 0], [1, "fod", 2, 164, 235, 0], [1, "fod", 2, 162, 233, 0], [1, "fod", 2, 163, 236, 0], [1, "fod", 2, 174, 242, 0], [1, "fod", 2, 171, 243, 0], [1, "fod", 1, 194, 206, 0], [1, "fod", 1, 190, 214, 0], [1, "fod", 1, 186, 206, 0], [1, "fod", 1, 197, 207, 0], [1, "fod", 2, 196, 208, 0], [1, "fod", 2, 198, 206, 0], [1, "fod", 2, 198, 208, 0], [1, "fod", 2, 194, 204, 0], [1, "fod", 2, 187, 206, 0], [1, "fod", 2, 186, 204, 0], [1, "fod", 2, 189, 214, 0], [1, "fod", 2, 189, 213, 0], [1, "fod", 2, 193, 215, 0], [1, "fod", 2, 194, 214, 0], [1, "fod", 2, 187, 215, 0], [1, "fod", 2, 193, 209, 0], [1, "fod", 2, 189, 211, 0], [1, "fod", 2, 187, 209, 0], [1, "fod", 2, 187, 207, 0], [1, "fod", 2, 191, 205, 0], [1, "fod", 2, 189, 203, 0], [1, "cs", 2, 224, 176, 1], [1, "cs", 0, 224, 177, 1], [1, "cs", 3, 224, 178, 1], [1, "cs", 2, 224, 179, 1], [1, "cs", 1, 224, 180, 1], [1, "cs", 2, 224, 181, 1], [1, "cs", 0, 224, 182, 1], [1, "cs", 2, 224, 183, 1], [1, "cs", 0, 224, 184, 1], [1, "cs", 3, 224, 185, 1], [1, "cs", 2, 224, 186, 1], [1, "cs", 0, 224, 187, 1], [1, "cs", 2, 224, 188, 1], [1, "cs", 0, 224, 189, 1], [1, "cs", 1, 224, 190, 1], [1, "cs", 2, 224, 191, 1], [1, "cs", 0, 224, 192, 1], [1, "cs", 2, 224, 193, 1], [1, "cs", 2, 224, 194, 1], [1, "cs", 1, 224, 195, 1], [1, "cs", 2, 224, 196, 1], [1, "cs", 0, 224, 197, 1], [1, "cs", 3, 224, 198, 1], [1, "cs", 2, 224, 199, 1], [1, "cs", 1, 224, 200, 1], [1, "cs", 2, 224, 201, 1], [1, "cs", 3, 224, 202, 1], [1, "cs", 0, 224, 203, 1], [1, "cs", 1, 224, 204, 1], [1, "cs", 2, 224, 205, 1], [1, "cs", 0, 224, 206, 1], [1, "cs", 1, 224, 207, 1], [1, "cs", 3, 224, 208, 1], [1, "cs", 2, 224, 209, 1], [1, "cs", 2, 224, 210, 1], [1, "cs", 0, 223, 211, 1], [1, "cs", 1, 224, 211, 1], [1, "cs", 2, 224, 212, 1], [1, "cs", 2, 224, 213, 1], [1, "cs", 1, 224, 214, 1], [1, "cs", 3, 224, 215, 1], [1, "cs", 0, 224, 216, 1], [1, "cs", 1, 224, 217, 1], [1, "cs", 2, 224, 218, 1], [1, "cs", 3, 224, 219, 1], [1, "cs", 0, 223, 215, 1], [1, "cs", 2, 223, 214, 1], [1, "cs", 2, 223, 212, 1], [1, "cs", 2, 223, 216, 1], [1, "cs", 3, 223, 217, 1], [1, "cs", 0, 223, 218, 1], [1, "cs", 0, 224, 220, 1], [1, "cs", 0, 224, 222, 1], [1, "cs", 0, 223, 209, 1], [1, "cs", 0, 223, 205, 1], [1, "cs", 2, 224, 221, 1], [1, "cs", 2, 223, 219, 1], [1, "cs", 2, 223, 220, 1], [1, "cs", 2, 223, 213, 1], [1, "cs", 2, 223, 210, 1], [1, "cs", 1, 223, 178, 1], [1, "cs", 3, 223, 179, 1], [1, "cs", 3, 223, 181, 1], [1, "cs", 3, 223, 182, 1], [1, "cs", 1, 223, 185, 1], [1, "cs", 2, 223, 184, 1], [1, "cs", 2, 223, 186, 1], [1, "cs", 0, 223, 180, 1], [1, "cs", 0, 223, 183, 1], [1, "cs", 2, 223, 187, 1], [1, "cs", 1, 223, 188, 1], [1, "cs", 2, 223, 189, 1], [1, "cs", 2, 223, 190, 1], [1, "cs", 3, 223, 191, 1], [1, "cs", 1, 223, 192, 1], [1, "cs", 2, 223, 193, 1], [1, "cs", 2, 223, 194, 1], [1, "cs", 3, 223, 195, 1], [1, "cs", 1, 223, 196, 1], [1, "cs", 2, 223, 197, 1], [1, "cs", 2, 223, 199, 1], [1, "cs", 2, 223, 198, 1], [1, "cs", 0, 223, 200, 1], [1, "cs", 2, 223, 201, 1], [1, "cs", 0, 223, 202, 1], [1, "cs", 3, 223, 203, 1], [1, "cs", 3, 223, 204, 1], [1, "cs", 3, 223, 206, 1], [1, "cs", 3, 223, 207, 1], [1, "cs", 3, 223, 208, 1], [1, "cs", 2, 223, 221, 1], [1, "cs", 2, 223, 222, 1], [1, "cs", 0, 223, 224, 1], [1, "cs", 0, 224, 228, 1], [1, "cs", 0, 224, 230, 1], [1, "cs", 0, 223, 234, 1], [1, "cs", 2, 223, 223, 1], [1, "cs", 2, 224, 223, 1], [1, "cs", 2, 224, 224, 1], [1, "cs", 2, 224, 225, 1], [1, "cs", 1, 223, 226, 1], [1, "cs", 1, 224, 231, 1], [1, "cs", 1, 223, 232, 1], [1, "cs", 3, 223, 225, 1], [1, "cs", 3, 224, 226, 1], [1, "cs", 3, 223, 227, 1], [1, "cs", 3, 224, 227, 1], [1, "cs", 3, 223, 229, 1], [1, "cs", 3, 223, 228, 1], [1, "cs", 3, 224, 229, 1], [1, "cs", 3, 223, 230, 1], [1, "cs", 3, 223, 231, 1], [1, "cs", 3, 224, 232, 1], [1, "cs", 3, 224, 233, 1], [1, "cs", 3, 223, 233, 1], [1, "cs", 3, 224, 234, 1], [1, "cs", 3, 224, 235, 1], [1, "cs", 3, 223, 235, 1], [1, "cs", 1, 224, 236, 1], [1, "cs", 2, 223, 236, 1], [1, "cs", 2, 223, 237, 1], [1, "cs", 3, 224, 237, 1], [1, "cs", 3, 224, 238, 1], [1, "cs", 0, 224, 239, 1], [1, "cs", 1, 223, 241, 1], [1, "cs", 0, 224, 243, 1], [1, "cs", 0, 223, 245, 1], [1, "cs", 0, 224, 247, 1], [1, "cs", 2, 223, 240, 1], [1, "cs", 2, 223, 239, 1], [1, "cs", 2, 224, 240, 1], [1, "cs", 2, 224, 241, 1], [1, "cs", 2, 224, 242, 1], [1, "cs", 2, 223, 242, 1], [1, "cs", 2, 223, 243, 1], [1, "cs", 2, 223, 244, 1], [1, "cs", 2, 224, 244, 1], [1, "cs", 2, 224, 245, 1], [1, "cs", 2, 224, 246, 1], [1, "cs", 3, 223, 238, 1], [1, "cs", 3, 223, 246, 1], [1, "cs", 2, 223, 247, 1], [1, "cs", 1, 223, 249, 1], [1, "cs", 1, 224, 253, 1], [1, "cs", 1, 223, 256, 1], [1, "cs", 0, 223, 254, 1], [1, "cs", 0, 224, 250, 1], [1, "cs", 3, 223, 248, 1], [1, "cs", 3, 223, 250, 1], [1, "cs", 3, 223, 252, 1], [1, "cs", 3, 223, 255, 1], [1, "cs", 3, 223, 257, 1], [1, "cs", 2, 224, 248, 1], [1, "cs", 2, 224, 249, 1], [1, "cs", 2, 223, 251, 1], [1, "cs", 2, 224, 251, 1], [1, "cs", 2, 224, 252, 1], [1, "cs", 2, 223, 253, 1], [1, "cs", 2, 224, 254, 1], [1, "cs", 2, 224, 255, 1], [1, "cs", 2, 224, 256, 1], [1, "cs", 2, 224, 257, 1], [1, "cs", 0, 224, 258, 1], [1, "cs", 0, 223, 261, 1], [1, "cs", 0, 224, 263, 1], [1, "cs", 0, 224, 266, 1], [1, "cs", 0, 224, 272, 1], [1, "cs", 0, 223, 270, 1], [1, "cs", 0, 223, 275, 1], [1, "cs", 1, 223, 259, 1], [1, "cs", 1, 223, 264, 1], [1, "cs", 1, 223, 268, 1], [1, "cs", 1, 224, 274, 1], [1, "cs", 2, 223, 258, 1], [1, "cs", 2, 223, 260, 1], [1, "cs", 2, 223, 263, 1], [1, "cs", 2, 223, 265, 1], [1, "cs", 2, 223, 267, 1], [1, "cs", 2, 223, 271, 1], [1, "cs", 2, 223, 273, 1], [1, "cs", 3, 223, 262, 1], [1, "cs", 3, 223, 266, 1], [1, "cs", 3, 223, 269, 1], [1, "cs", 3, 223, 272, 1], [1, "cs", 3, 223, 274, 1], [1, "cs", 3, 224, 275, 1], [1, "cs", 3, 224, 273, 1], [1, "cs", 3, 224, 271, 1], [1, "cs", 3, 224, 270, 1], [1, "cs", 3, 224, 269, 1], [1, "cs", 3, 224, 268, 1], [1, "cs", 3, 224, 267, 1], [1, "cs", 3, 224, 265, 1], [1, "cs", 3, 224, 264, 1], [1, "cs", 3, 224, 262, 1], [1, "cs", 3, 224, 261, 1], [1, "cs", 3, 224, 260, 1], [1, "cs", 3, 224, 259, 1], [1, "cs", 2, 223, 276, 1], [1, "cs", 1, 224, 276, 1], [1, "cs", 1, 224, 280, 1], [1, "cs", 1, 223, 281, 1], [1, "cs", 1, 224, 286, 1], [1, "cs", 0, 223, 280, 1], [1, "cs", 0, 223, 284, 1], [1, "cs", 0, 224, 288, 1], [1, "cs", 0, 224, 279, 1], [1, "cs", 2, 223, 277, 1], [1, "cs", 2, 224, 277, 1], [1, "cs", 2, 224, 278, 1], [1, "cs", 2, 224, 281, 1], [1, "cs", 2, 224, 283, 1], [1, "cs", 2, 224, 282, 1], [1, "cs", 2, 224, 284, 1], [1, "cs", 2, 224, 285, 1], [1, "cs", 2, 224, 287, 1], [1, "cs", 2, 223, 287, 1], [1, "cs", 2, 223, 285, 1], [1, "cs", 2, 223, 283, 1], [1, "cs", 2, 223, 279, 1], [1, "cs", 3, 223, 278, 1], [1, "cs", 3, 223, 282, 1], [1, "cs", 3, 223, 286, 1], [1, "cs", 3, 223, 289, 1], [1, "cs", 3, 224, 289, 1], [1, "cs", 2, 223, 288, 1], [1, "cs", 2, 224, 290, 1], [1, "cs", 1, 223, 290, 1], [1, "cs", 0, 224, 292, 1], [1, "cs", 0, 223, 294, 1], [1, "cs", 0, 224, 297, 1], [1, "cs", 0, 223, 299, 1], [1, "cs", 2, 223, 291, 1], [1, "cs", 2, 224, 291, 1], [1, "cs", 2, 223, 292, 1], [1, "cs", 2, 223, 293, 1], [1, "cs", 2, 224, 293, 1], [1, "cs", 2, 224, 294, 1], [1, "cs", 1, 224, 295, 1], [1, "cs", 2, 223, 295, 1], [1, "cs", 2, 223, 296, 1], [1, "cs", 2, 224, 296, 1], [1, "cs", 2, 223, 297, 1], [1, "cs", 2, 223, 298, 1], [1, "cs", 2, 224, 298, 1], [1, "cs", 2, 224, 299, 1], [1, "cs", 2, 223, 300, 1], [1, "cs", 1, 224, 300, 1], [1, "cs", 0, 223, 301, 1], [1, "cs", 0, 224, 302, 1], [1, "cs", 0, 224, 304, 1], [1, "cs", 3, 224, 301, 1], [1, "cs", 3, 224, 303, 1], [1, "cs", 0, 221, 303, 1], [1, "cs", 0, 219, 304, 1], [1, "cs", 1, 222, 304, 1], [1, "cs", 1, 222, 302, 1], [1, "cs", 2, 223, 302, 1], [1, "cs", 2, 223, 303, 1], [1, "cs", 2, 222, 303, 1], [1, "cs", 2, 223, 304, 1], [1, "cs", 2, 221, 304, 1], [1, "cs", 2, 220, 304, 1], [1, "cs", 2, 220, 303, 1], [1, "cs", 2, 220, 302, 1], [1, "cs", 2, 221, 302, 1], [1, "cs", 2, 219, 303, 1], [1, "cs", 0, 217, 302, 1], [1, "cs", 0, 215, 304, 1], [1, "cs", 0, 214, 302, 1], [1, "cs", 1, 218, 302, 1], [1, "cs", 1, 217, 304, 1], [1, "cs", 1, 215, 302, 1], [1, "cs", 2, 219, 302, 1], [1, "cs", 2, 218, 303, 1], [1, "cs", 2, 218, 304, 1], [1, "cs", 2, 217, 303, 1], [1, "cs", 2, 216, 304, 1], [1, "cs", 2, 215, 303, 1], [1, "cs", 2, 216, 303, 1], [1, "cs", 2, 216, 302, 1], [1, "cs", 2, 214, 303, 1], [1, "cs", 2, 214, 304, 1], [1, "cs", 0, 212, 302, 1], [1, "cs", 0, 210, 303, 1], [1, "cs", 0, 212, 304, 1], [1, "cs", 0, 208, 304, 1], [1, "cs", 1, 210, 302, 1], [1, "cs", 1, 208, 303, 1], [1, "cs", 2, 213, 302, 1], [1, "cs", 2, 213, 303, 1], [1, "cs", 2, 213, 304, 1], [1, "cs", 2, 212, 303, 1], [1, "cs", 2, 211, 304, 1], [1, "cs", 2, 211, 303, 1], [1, "cs", 2, 211, 302, 1], [1, "cs", 2, 209, 302, 1], [1, "cs", 2, 209, 303, 1], [1, "cs", 2, 209, 304, 1], [1, "cs", 2, 210, 304, 1], [1, "cs", 2, 208, 302, 1], [1, "cs", 0, 206, 303, 1], [1, "cs", 0, 203, 304, 1], [1, "cs", 0, 200, 303, 1], [1, "cs", 0, 199, 304, 1], [1, "cs", 0, 195, 304, 1], [1, "cs", 0, 191, 303, 1], [1, "cs", 0, 193, 304, 1], [1, "cs", 0, 189, 304, 1], [1, "cs", 1, 204, 303, 1], [1, "cs", 0, 197, 302, 1], [1, "cs", 0, 202, 302, 1], [1, "cs", 0, 188, 302, 1], [1, "cs", 0, 194, 302, 1], [1, "cs", 1, 197, 303, 1], [1, "cs", 1, 201, 304, 1], [1, "cs", 1, 192, 302, 1], [1, "cs", 1, 189, 303, 1], [1, "cs", 1, 205, 302, 1], [1, "cs", 1, 188, 304, 1], [1, "cs", 2, 207, 302, 1], [1, "cs", 2, 207, 303, 1], [1, "cs", 2, 207, 304, 1], [1, "cs", 2, 206, 304, 1], [1, "cs", 2, 206, 302, 1], [1, "cs", 2, 205, 303, 1], [1, "cs", 2, 204, 304, 1], [1, "cs", 2, 205, 304, 1], [1, "cs", 2, 204, 302, 1], [1, "cs", 2, 203, 302, 1], [1, "cs", 2, 203, 303, 1], [1, "cs", 2, 202, 303, 1], [1, "cs", 2, 201, 303, 1], [1, "cs", 2, 201, 302, 1], [1, "cs", 2, 200, 302, 1], [1, "cs", 2, 199, 302, 1], [1, "cs", 2, 198, 303, 1], [1, "cs", 2, 198, 302, 1], [1, "cs", 2, 199, 303, 1], [1, "cs", 2, 200, 304, 1], [1, "cs", 2, 202, 304, 1], [1, "cs", 2, 197, 304, 1], [1, "cs", 2, 198, 304, 1], [1, "cs", 2, 196, 304, 1], [1, "cs", 2, 196, 303, 1], [1, "cs", 2, 196, 302, 1], [1, "cs", 2, 195, 302, 1], [1, "cs", 2, 195, 303, 1], [1, "cs", 2, 194, 303, 1], [1, "cs", 2, 194, 304, 1], [1, "cs", 2, 193, 303, 1], [1, "cs", 2, 193, 302, 1], [1, "cs", 2, 192, 303, 1], [1, "cs", 2, 192, 304, 1], [1, "cs", 2, 191, 304, 1], [1, "cs", 2, 190, 304, 1], [1, "cs", 2, 190, 303, 1], [1, "cs", 2, 189, 302, 1], [1, "cs", 2, 190, 302, 1], [1, "cs", 2, 191, 302, 1], [1, "cs", 2, 188, 303, 1], [1, "cs", 0, 186, 303, 1], [1, "cs", 0, 183, 304, 1], [1, "cs", 0, 184, 302, 1], [1, "cs", 0, 181, 302, 1], [1, "cs", 0, 176, 302, 1], [1, "cs", 0, 178, 303, 1], [1, "cs", 0, 173, 304, 1], [1, "cs", 0, 170, 303, 1], [1, "cs", 0, 172, 302, 1], [1, "cs", 1, 182, 303, 1], [1, "cs", 1, 178, 304, 1], [1, "cs", 1, 175, 304, 1], [1, "cs", 1, 173, 302, 1], [1, "cs", 1, 185, 304, 1], [1, "cs", 1, 169, 304, 1], [1, "cs", 3, 187, 304, 1], [1, "cs", 3, 186, 304, 1], [1, "cs", 3, 187, 303, 1], [1, "cs", 3, 187, 302, 1], [1, "cs", 3, 186, 302, 1], [1, "cs", 3, 185, 302, 1], [1, "cs", 3, 185, 303, 1], [1, "cs", 3, 184, 303, 1], [1, "cs", 3, 183, 303, 1], [1, "cs", 3, 183, 302, 1], [1, "cs", 3, 182, 302, 1], [1, "cs", 3, 184, 304, 1], [1, "cs", 3, 182, 304, 1], [1, "cs", 3, 181, 304, 1], [1, "cs", 3, 179, 304, 1], [1, "cs", 3, 180, 304, 1], [1, "cs", 3, 181, 303, 1], [1, "cs", 3, 180, 303, 1], [1, "cs", 3, 179, 303, 1], [1, "cs", 3, 180, 302, 1], [1, "cs", 3, 179, 302, 1], [1, "cs", 3, 178, 302, 1], [1, "cs", 3, 177, 302, 1], [1, "cs", 3, 177, 304, 1], [1, "cs", 3, 177, 303, 1], [1, "cs", 3, 176, 303, 1], [1, "cs", 3, 176, 304, 1], [1, "cs", 3, 174, 304, 1], [1, "cs", 3, 175, 303, 1], [1, "cs", 3, 174, 303, 1], [1, "cs", 3, 173, 303, 1], [1, "cs", 3, 172, 303, 1], [1, "cs", 3, 171, 303, 1], [1, "cs", 3, 170, 304, 1], [1, "cs", 3, 171, 304, 1], [1, "cs", 3, 172, 304, 1], [1, "cs", 3, 174, 302, 1], [1, "cs", 3, 175, 302, 1], [1, "cs", 3, 171, 302, 1], [1, "cs", 3, 170, 302, 1], [1, "cs", 3, 169, 302, 1], [1, "cs", 3, 169, 303, 1], [1, "cs", 0, 168, 302, 1], [1, "cs", 0, 166, 303, 1], [1, "cs", 0, 163, 304, 1], [1, "cs", 0, 161, 302, 1], [1, "cs", 0, 159, 303, 1], [1, "cs", 0, 152, 304, 1], [1, "cs", 0, 155, 303, 1], [1, "cs", 1, 164, 303, 1], [1, "cs", 1, 162, 303, 1], [1, "cs", 1, 158, 304, 1], [1, "cs", 1, 156, 302, 1], [1, "cs", 1, 153, 302, 1], [1, "cs", 1, 154, 304, 1], [1, "cs", 2, 168, 304, 1], [1, "cs", 2, 168, 303, 1], [1, "cs", 2, 167, 303, 1], [1, "cs", 2, 167, 304, 1], [1, "cs", 2, 166, 304, 1], [1, "cs", 2, 165, 304, 1], [1, "cs", 2, 164, 304, 1], [1, "cs", 2, 165, 303, 1], [1, "cs", 2, 167, 302, 1], [1, "cs", 2, 166, 302, 1], [1, "cs", 2, 165, 302, 1], [1, "cs", 2, 164, 302, 1], [1, "cs", 2, 163, 302, 1], [1, "cs", 2, 162, 302, 1], [1, "cs", 2, 163, 303, 1], [1, "cs", 2, 162, 304, 1], [1, "cs", 2, 160, 304, 1], [1, "cs", 2, 159, 304, 1], [1, "cs", 2, 161, 304, 1], [1, "cs", 2, 161, 303, 1], [1, "cs", 2, 160, 303, 1], [1, "cs", 2, 160, 302, 1], [1, "cs", 2, 158, 302, 1], [1, "cs", 2, 159, 302, 1], [1, "cs", 2, 157, 302, 1], [1, "cs", 2, 156, 303, 1], [1, "cs", 2, 157, 303, 1], [1, "cs", 2, 158, 303, 1], [1, "cs", 2, 157, 304, 1], [1, "cs", 2, 156, 304, 1], [1, "cs", 2, 155, 304, 1], [1, "cs", 2, 153, 304, 1], [1, "cs", 2, 153, 303, 1], [1, "cs", 2, 154, 303, 1], [1, "cs", 2, 154, 302, 1], [1, "cs", 2, 155, 302, 1], [1, "cs", 2, 152, 303, 1], [1, "cs", 2, 152, 302, 1], [1, "cs", 0, 151, 302, 1], [1, "cs", 0, 149, 303, 1], [1, "cs", 0, 145, 304, 1], [1, "cs", 0, 147, 302, 1], [1, "cs", 0, 143, 303, 1], [1, "cs", 0, 141, 303, 1], [1, "cs", 1, 147, 304, 1], [1, "cs", 1, 145, 302, 1], [1, "cs", 1, 142, 302, 1], [1, "cs", 1, 150, 304, 1], [1, "cs", 2, 151, 304, 1], [1, "cs", 2, 151, 303, 1], [1, "cs", 2, 150, 303, 1], [1, "cs", 2, 150, 302, 1], [1, "cs", 2, 148, 302, 1], [1, "cs", 2, 146, 302, 1], [1, "cs", 2, 144, 302, 1], [1, "cs", 2, 141, 302, 1], [1, "cs", 2, 141, 304, 1], [1, "cs", 2, 142, 304, 1], [1, "cs", 2, 142, 303, 1], [1, "cs", 2, 143, 304, 1], [1, "cs", 2, 144, 304, 1], [1, "cs", 2, 144, 303, 1], [1, "cs", 2, 148, 304, 1], [1, "cs", 2, 148, 303, 1], [1, "cs", 2, 146, 303, 1], [1, "cs", 2, 145, 303, 1], [1, "cs", 2, 147, 303, 1], [1, "cs", 2, 146, 304, 1], [1, "cs", 2, 149, 304, 1], [1, "cs", 3, 149, 302, 1], [1, "cs", 3, 143, 302, 1], [1, "cs", 0, 139, 304, 1], [1, "cs", 0, 138, 302, 1], [1, "cs", 1, 139, 302, 1], [1, "cs", 2, 140, 302, 1], [1, "cs", 2, 140, 303, 1], [1, "cs", 2, 139, 303, 1], [1, "cs", 2, 138, 303, 1], [1, "cs", 2, 138, 304, 1], [1, "cs", 2, 140, 304, 1], [1, "cs", 0, 137, 304, 1], [1, "cs", 0, 135, 303, 1], [1, "cs", 0, 133, 304, 1], [1, "cs", 1, 135, 304, 1], [1, "cs", 1, 136, 302, 1], [1, "cs", 2, 137, 302, 1], [1, "cs", 2, 136, 303, 1], [1, "cs", 2, 137, 303, 1], [1, "cs", 2, 136, 304, 1], [1, "cs", 2, 134, 304, 1], [1, "cs", 2, 134, 303, 1], [1, "cs", 2, 133, 303, 1], [1, "cs", 2, 132, 304, 1], [1, "cs", 0, 131, 302, 1], [1, "cs", 0, 134, 302, 1], [1, "cs", 0, 129, 304, 1], [1, "cs", 1, 130, 303, 1], [1, "cs", 1, 132, 302, 1], [1, "cs", 2, 135, 302, 1], [1, "cs", 2, 133, 302, 1], [1, "cs", 2, 132, 303, 1], [1, "cs", 2, 131, 303, 1], [1, "cs", 2, 130, 304, 1], [1, "cs", 2, 131, 304, 1], [1, "cs", 2, 128, 304, 1], [1, "cs", 2, 129, 303, 1], [1, "cs", 2, 130, 302, 1], [1, "cs", 3, 127, 304, 1], [1, "cs", 2, 132, 301, 1], [1, "cs", 2, 133, 301, 1], [1, "cs", 2, 134, 301, 1], [1, "cs", 2, 135, 301, 1], [1, "cs", 3, 131, 301, 1], [1, "cs", 3, 136, 301, 1], [1, "cs", 3, 136, 178, 1], [1, "cs", 0, 136, 183, 1], [1, "cs", 2, 136, 182, 1], [1, "cs", 1, 136, 181, 1], [1, "cs", 0, 136, 179, 1], [1, "cs", 3, 136, 180, 1], [1, "cs", 2, 135, 183, 1], [1, "cs", 1, 135, 182, 1], [1, "cs", 3, 135, 180, 1], [1, "cs", 0, 134, 183, 1], [1, "cs", 2, 133, 183, 1], [1, "cs", 3, 133, 182, 1], [1, "cs", 1, 132, 183, 1], [1, "cs", 3, 131, 183, 1], [1, "cs", 2, 135, 181, 1], [1, "cs", 2, 134, 182, 1], [1, "cs", 3, 134, 181, 1], [1, "fod", 0, 213, 301, 0], [1, "fod", 0, 204, 301, 0], [1, "fod", 1, 196, 288, 0], [1, "fod", 1, 198, 283, 0], [1, "fod", 1, 190, 288, 0], [1, "fod", 1, 189, 296, 0], [1, "fod", 1, 193, 293, 0], [1, "fod", 1, 183, 292, 0], [1, "fod", 1, 186, 287, 0], [1, "fod", 1, 190, 290, 0], [1, "fod", 1, 218, 271, 0], [1, "fod", 1, 220, 266, 0], [1, "fod", 1, 211, 268, 0], [1, "fod", 1, 210, 274, 0], [1, "fod", 1, 205, 263, 0], [1, "fod", 1, 216, 258, 0], [1, "fod", 2, 201, 294, 0], [1, "fod", 2, 190, 296, 0], [1, "fod", 2, 188, 299, 0], [1, "fod", 2, 186, 297, 0], [1, "fod", 2, 188, 296, 0], [1, "fod", 2, 189, 291, 0], [1, "fod", 2, 189, 286, 0], [1, "fod", 2, 191, 286, 0], [1, "fod", 2, 197, 286, 0], [1, "fod", 2, 195, 290, 0], [1, "fod", 2, 186, 288, 0], [1, "fod", 2, 184, 290, 0], [1, "fod", 2, 183, 293, 0], [1, "fod", 2, 198, 286, 0], [1, "fod", 2, 196, 283, 0], [1, "fod", 2, 196, 281, 0], [1, "fod", 2, 201, 280, 0], [1, "fod", 2, 205, 287, 0], [1, "fod", 2, 209, 283, 0], [1, "fod", 2, 212, 280, 0], [1, "fod", 2, 209, 277, 0], [1, "fod", 2, 217, 278, 0], [1, "fod", 2, 219, 275, 0], [1, "fod", 2, 220, 271, 0], [1, "fod", 2, 220, 267, 0], [1, "fod", 2, 217, 265, 0], [1, "fod", 2, 213, 267, 0], [1, "fod", 2, 208, 264, 0], [1, "fod", 2, 206, 261, 0], [1, "fod", 2, 203, 265, 0], [1, "fod", 2, 204, 270, 0], [1, "fod", 2, 196, 267, 0], [1, "fod", 2, 214, 261, 0], [1, "fod", 2, 211, 260, 0], [1, "fod", 2, 218, 256, 0], [1, "fod", 2, 219, 262, 0], [1, "fod", 2, 220, 253, 0], [1, "fod", 2, 211, 257, 0], [1, "la", 3, 198, 27, 1], [1, "la", 3, 201, 30, 1], [1, "la", 3, 200, 32, 1], [1, "la", 3, 198, 33, 1], [1, "la", 3, 196, 33, 1], [1, "la", 3, 194, 32, 1], [1, "la", 3, 194, 28, 1], [1, "la", 0, 200, 28, 1], [1, "la", 0, 193, 30, 1], [1, "la", 3, 196, 27, 1], [1, "la", 3, 199, 30, 1], [1, "la", 3, 197, 29, 1], [1, "la", 3, 195, 30, 1], [1, "la", 3, 197, 31, 1], [1, "la", 2, 201, 33, 1], [1, "la", 4, 202, 34, 1], [1, "la", 4, 202, 35, 1], [1, "la", 4, 203, 36, 1], [1, "la", 4, 204, 37, 1], [1, "la", 2, 205, 38, 1], [1, "la", 5, 205, 39, 1], [1, "la", 5, 205, 40, 1], [1, "la", 2, 206, 41, 1], [1, "la", 1, 207, 42, 1], [1, "la", 1, 205, 41, 1], [1, "la", 4, 208, 43, 1], [1, "la", 4, 209, 43, 1], [1, "la", 1, 210, 43, 1], [1, "la", 2, 211, 43, 1], [1, "la", 5, 212, 43, 1], [1, "la", 4, 213, 44, 1], [1, "la", 3, 223, 54, 1], [1, "la", 3, 221, 53, 1], [1, "la", 3, 219, 53, 1], [1, "la", 4, 218, 52, 1], [1, "la", 4, 217, 51, 1], [1, "la", 4, 216, 51, 1], [1, "la", 1, 215, 50, 1], [1, "la", 4, 212, 46, 1], [1, "la", 1, 210, 44, 1], [1, "la", 3, 206, 50, 1], [1, "re", 0, 217, 24, 1], [1, "re", 0, 207, 16, 1], [1, "de", 44, 54, 14, 0], [1, "de", 44, 53, 13, 0], [1, "de", 44, 51, 16, 0], [1, "de", 44, 49, 13, 0], [1, "de", 44, 48, 14, 0], [1, "de", 21, 78, 293, 0], [1, "cs", 0, 221, 8, 1], [1, "cs", 0, 224, 9, 1], [1, "cs", 1, 223, 8, 1], [1, "cs", 2, 224, 8, 1], [1, "cs", 2, 222, 8, 1], [1, "cs", 0, 224, 6, 1], [1, "cs", 0, 222, 5, 1], [1, "cs", 0, 219, 7, 1], [1, "cs", 1, 220, 5, 1], [1, "cs", 1, 217, 7, 1], [1, "cs", 2, 224, 5, 1], [1, "cs", 2, 223, 5, 1], [1, "cs", 2, 224, 7, 1], [1, "cs", 2, 223, 7, 1], [1, "cs", 2, 223, 6, 1], [1, "cs", 2, 222, 6, 1], [1, "cs", 2, 222, 7, 1], [1, "cs", 2, 221, 7, 1], [1, "cs", 2, 221, 6, 1], [1, "cs", 2, 221, 5, 1], [1, "cs", 2, 220, 6, 1], [1, "cs", 2, 220, 7, 1], [1, "cs", 2, 220, 8, 1], [1, "cs", 2, 219, 8, 1], [1, "cs", 2, 219, 6, 1], [1, "cs", 2, 219, 5, 1], [1, "cs", 0, 218, 5, 1], [1, "cs", 0, 216, 8, 1], [1, "cs", 2, 218, 8, 1], [1, "cs", 2, 217, 8, 1], [1, "cs", 2, 218, 7, 1], [1, "cs", 2, 218, 6, 1], [1, "cs", 2, 217, 6, 1], [1, "cs", 2, 217, 5, 1], [1, "cs", 1, 215, 6, 1], [1, "cs", 1, 213, 5, 1], [1, "cs", 0, 214, 6, 1], [1, "cs", 0, 216, 5, 1], [1, "cs", 0, 213, 8, 1], [1, "cs", 0, 211, 7, 1], [1, "cs", 0, 209, 5, 1], [1, "cs", 0, 208, 7, 1], [1, "cs", 0, 207, 8, 1], [1, "cs", 2, 216, 6, 1], [1, "cs", 2, 216, 7, 1], [1, "cs", 2, 215, 7, 1], [1, "cs", 2, 215, 8, 1], [1, "cs", 2, 214, 8, 1], [1, "cs", 2, 214, 7, 1], [1, "cs", 2, 215, 5, 1], [1, "cs", 2, 214, 5, 1], [1, "cs", 2, 213, 6, 1], [1, "cs", 2, 213, 7, 1], [1, "cs", 2, 212, 7, 1], [1, "cs", 1, 211, 5, 1], [1, "cs", 1, 209, 8, 1], [1, "cs", 2, 212, 8, 1], [1, "cs", 2, 211, 8, 1], [1, "cs", 2, 210, 8, 1], [1, "cs", 2, 209, 7, 1], [1, "cs", 2, 210, 7, 1], [1, "cs", 2, 210, 6, 1], [1, "cs", 2, 212, 6, 1], [1, "cs", 2, 212, 5, 1], [1, "cs", 2, 211, 6, 1], [1, "cs", 2, 210, 5, 1], [1, "cs", 2, 209, 6, 1], [1, "cs", 2, 208, 6, 1], [1, "cs", 2, 208, 5, 1], [1, "cs", 2, 207, 7, 1], [1, "cs", 2, 207, 6, 1], [1, "cs", 2, 207, 5, 1], [1, "cs", 2, 206, 5, 1], [1, "cs", 2, 208, 8, 1], [1, "cs", 2, 206, 6, 1], [1, "cs", 0, 204, 8, 1], [1, "cs", 0, 205, 6, 1], [1, "cs", 0, 203, 5, 1], [1, "cs", 0, 202, 7, 1], [1, "cs", 0, 199, 8, 1], [1, "cs", 0, 200, 6, 1], [1, "cs", 0, 197, 6, 1], [1, "cs", 0, 195, 8, 1], [1, "cs", 0, 194, 6, 1], [1, "cs", 1, 202, 8, 1], [1, "cs", 1, 206, 7, 1], [1, "cs", 1, 201, 5, 1], [1, "cs", 1, 197, 8, 1], [1, "cs", 1, 192, 7, 1], [1, "cs", 1, 195, 5, 1], [1, "cs", 2, 205, 7, 1], [1, "cs", 2, 205, 8, 1], [1, "cs", 2, 206, 8, 1], [1, "cs", 2, 204, 7, 1], [1, "cs", 2, 204, 6, 1], [1, "cs", 2, 204, 5, 1], [1, "cs", 2, 205, 5, 1], [1, "cs", 2, 203, 6, 1], [1, "cs", 2, 203, 7, 1], [1, "cs", 2, 203, 8, 1], [1, "cs", 2, 201, 8, 1], [1, "cs", 2, 200, 8, 1], [1, "cs", 2, 200, 7, 1], [1, "cs", 2, 201, 7, 1], [1, "cs", 2, 201, 6, 1], [1, "cs", 2, 202, 5, 1], [1, "cs", 2, 202, 6, 1], [1, "cs", 2, 200, 5, 1], [1, "cs", 2, 199, 5, 1], [1, "cs", 2, 197, 5, 1], [1, "cs", 2, 196, 5, 1], [1, "cs", 2, 198, 5, 1], [1, "cs", 2, 198, 6, 1], [1, "cs", 2, 199, 6, 1], [1, "cs", 2, 199, 7, 1], [1, "cs", 2, 198, 7, 1], [1, "cs", 2, 198, 8, 1], [1, "cs", 2, 197, 7, 1], [1, "cs", 2, 196, 7, 1], [1, "cs", 2, 196, 8, 1], [1, "cs", 2, 196, 6, 1], [1, "cs", 2, 195, 6, 1], [1, "cs", 2, 195, 7, 1], [1, "cs", 2, 194, 7, 1], [1, "cs", 2, 193, 8, 1], [1, "cs", 2, 194, 8, 1], [1, "cs", 2, 193, 7, 1], [1, "cs", 2, 193, 6, 1], [1, "cs", 2, 193, 5, 1], [1, "cs", 2, 194, 5, 1], [1, "cs", 0, 192, 5, 1], [1, "cs", 0, 191, 8, 1], [1, "cs", 0, 190, 6, 1], [1, "cs", 0, 188, 7, 1], [1, "cs", 0, 186, 8, 1], [1, "cs", 0, 186, 5, 1], [1, "cs", 0, 184, 7, 1], [1, "cs", 0, 182, 8, 1], [1, "cs", 0, 181, 6, 1], [1, "cs", 1, 189, 8, 1], [1, "cs", 1, 183, 8, 1], [1, "cs", 1, 188, 5, 1], [1, "cs", 1, 185, 6, 1], [1, "cs", 1, 180, 7, 1], [1, "cs", 1, 183, 5, 1], [1, "cs", 1, 178, 8, 1], [1, "cs", 1, 177, 6, 1], [1, "cs", 1, 173, 7, 1], [1, "cs", 1, 171, 7, 1], [1, "cs", 0, 177, 8, 1], [1, "cs", 0, 175, 7, 1], [1, "cs", 0, 179, 5, 1], [1, "cs", 0, 174, 5, 1], [1, "cs", 0, 176, 5, 1], [1, "cs", 0, 172, 8, 1], [1, "cs", 0, 170, 8, 1], [1, "cs", 0, 169, 6, 1], [1, "cs", 2, 192, 6, 1], [1, "cs", 2, 192, 8, 1], [1, "cs", 2, 191, 7, 1], [1, "cs", 2, 191, 6, 1], [1, "cs", 2, 191, 5, 1], [1, "cs", 2, 190, 5, 1], [1, "cs", 2, 189, 5, 1], [1, "cs", 2, 189, 6, 1], [1, "cs", 2, 189, 7, 1], [1, "cs", 2, 190, 7, 1], [1, "cs", 2, 190, 8, 1], [1, "cs", 2, 188, 8, 1], [1, "cs", 2, 187, 8, 1], [1, "cs", 2, 187, 7, 1], [1, "cs", 2, 187, 6, 1], [1, "cs", 2, 188, 6, 1], [1, "cs", 2, 187, 5, 1], [1, "cs", 2, 186, 6, 1], [1, "cs", 2, 186, 7, 1], [1, "cs", 2, 185, 7, 1], [1, "cs", 2, 185, 8, 1], [1, "cs", 2, 184, 8, 1], [1, "cs", 2, 183, 7, 1], [1, "cs", 2, 183, 6, 1], [1, "cs", 2, 184, 6, 1], [1, "cs", 2, 184, 5, 1], [1, "cs", 2, 185, 5, 1], [1, "cs", 2, 182, 6, 1], [1, "cs", 2, 182, 7, 1], [1, "cs", 2, 181, 7, 1], [1, "cs", 2, 181, 8, 1], [1, "cs", 2, 180, 8, 1], [1, "cs", 2, 179, 8, 1], [1, "cs", 2, 182, 5, 1], [1, "cs", 2, 181, 5, 1], [1, "cs", 2, 180, 5, 1], [1, "cs", 2, 180, 6, 1], [1, "cs", 2, 179, 6, 1], [1, "cs", 2, 179, 7, 1], [1, "cs", 2, 178, 7, 1], [1, "cs", 2, 178, 6, 1], [1, "cs", 2, 178, 5, 1], [1, "cs", 2, 177, 5, 1], [1, "cs", 2, 177, 7, 1], [1, "cs", 2, 176, 7, 1], [1, "cs", 2, 176, 6, 1], [1, "cs", 2, 175, 6, 1], [1, "cs", 2, 175, 5, 1], [1, "cs", 2, 176, 8, 1], [1, "cs", 2, 174, 8, 1], [1, "cs", 2, 175, 8, 1], [1, "cs", 2, 173, 8, 1], [1, "cs", 2, 174, 7, 1], [1, "cs", 2, 173, 6, 1], [1, "cs", 2, 174, 6, 1], [1, "cs", 2, 172, 5, 1], [1, "cs", 2, 173, 5, 1], [1, "cs", 2, 172, 6, 1], [1, "cs", 2, 172, 7, 1], [1, "cs", 2, 171, 8, 1], [1, "cs", 2, 170, 7, 1], [1, "cs", 2, 170, 6, 1], [1, "cs", 2, 170, 5, 1], [1, "cs", 2, 171, 5, 1], [1, "cs", 2, 171, 6, 1], [1, "cs", 2, 169, 5, 1], [1, "cs", 2, 169, 7, 1], [1, "cs", 2, 169, 8, 1], [1, "cs", 1, 168, 7, 1], [1, "cs", 1, 166, 5, 1], [1, "cs", 1, 164, 7, 1], [1, "cs", 1, 160, 7, 1], [1, "cs", 1, 156, 8, 1], [1, "cs", 0, 166, 8, 1], [1, "cs", 0, 168, 5, 1], [1, "cs", 0, 164, 6, 1], [1, "cs", 0, 162, 7, 1], [1, "cs", 0, 158, 8, 1], [1, "cs", 0, 157, 6, 1], [1, "cs", 0, 161, 5, 1], [1, "cs", 0, 159, 5, 1], [1, "cs", 0, 155, 7, 1], [1, "cs", 0, 154, 5, 1], [1, "cs", 0, 151, 7, 1], [1, "cs", 1, 153, 8, 1], [1, "cs", 1, 151, 5, 1], [1, "cs", 2, 168, 6, 1], [1, "cs", 2, 168, 8, 1], [1, "cs", 2, 167, 8, 1], [1, "cs", 2, 167, 7, 1], [1, "cs", 2, 167, 6, 1], [1, "cs", 2, 167, 5, 1], [1, "cs", 2, 166, 6, 1], [1, "cs", 2, 166, 7, 1], [1, "cs", 2, 165, 7, 1], [1, "cs", 2, 165, 6, 1], [1, "cs", 2, 165, 5, 1], [1, "cs", 2, 164, 5, 1], [1, "cs", 2, 163, 5, 1], [1, "cs", 2, 162, 5, 1], [1, "cs", 2, 162, 6, 1], [1, "cs", 2, 163, 6, 1], [1, "cs", 2, 163, 7, 1], [1, "cs", 2, 163, 8, 1], [1, "cs", 2, 164, 8, 1], [1, "cs", 2, 165, 8, 1], [1, "cs", 2, 161, 8, 1], [1, "cs", 2, 162, 8, 1], [1, "cs", 2, 160, 8, 1], [1, "cs", 2, 159, 8, 1], [1, "cs", 2, 159, 7, 1], [1, "cs", 2, 159, 6, 1], [1, "cs", 2, 160, 5, 1], [1, "cs", 2, 160, 6, 1], [1, "cs", 2, 161, 6, 1], [1, "cs", 2, 161, 7, 1], [1, "cs", 2, 157, 7, 1], [1, "cs", 2, 158, 7, 1], [1, "cs", 2, 158, 6, 1], [1, "cs", 2, 158, 5, 1], [1, "cs", 2, 155, 5, 1], [1, "cs", 2, 155, 6, 1], [1, "cs", 2, 156, 6, 1], [1, "cs", 2, 156, 7, 1], [1, "cs", 2, 157, 8, 1], [1, "cs", 2, 155, 8, 1], [1, "cs", 2, 154, 8, 1], [1, "cs", 2, 154, 7, 1], [1, "cs", 2, 154, 6, 1], [1, "cs", 2, 152, 8, 1], [1, "cs", 2, 153, 7, 1], [1, "cs", 2, 153, 6, 1], [1, "cs", 2, 153, 5, 1], [1, "cs", 2, 152, 5, 1], [1, "cs", 2, 152, 6, 1], [1, "cs", 2, 152, 7, 1], [1, "cs", 2, 151, 6, 1], [1, "cs", 2, 157, 5, 1], [1, "cs", 1, 156, 5, 1], [1, "cs", 0, 150, 5, 1], [1, "cs", 0, 149, 7, 1], [1, "cs", 0, 147, 8, 1], [1, "cs", 0, 146, 5, 1], [1, "cs", 0, 144, 7, 1], [1, "cs", 0, 142, 5, 1], [1, "cs", 1, 147, 6, 1], [1, "cs", 1, 145, 8, 1], [1, "cs", 1, 144, 5, 1], [1, "cs", 2, 148, 5, 1], [1, "cs", 2, 149, 5, 1], [1, "cs", 2, 150, 6, 1], [1, "cs", 2, 150, 8, 1], [1, "cs", 2, 151, 8, 1], [1, "cs", 2, 150, 7, 1], [1, "cs", 2, 149, 8, 1], [1, "cs", 2, 148, 8, 1], [1, "cs", 2, 149, 6, 1], [1, "cs", 2, 148, 6, 1], [1, "cs", 2, 148, 7, 1], [1, "cs", 2, 147, 7, 1], [1, "cs", 2, 147, 5, 1], [1, "cs", 2, 146, 6, 1], [1, "cs", 2, 146, 7, 1], [1, "cs", 2, 146, 8, 1], [1, "cs", 2, 145, 7, 1], [1, "cs", 2, 145, 6, 1], [1, "cs", 2, 145, 5, 1], [1, "cs", 2, 144, 6, 1], [1, "cs", 2, 143, 5, 1], [1, "cs", 2, 143, 6, 1], [1, "cs", 2, 142, 6, 1], [1, "cs", 2, 141, 5, 1], [1, "cs", 2, 224, 10, 1], [1, "cs", 0, 224, 11, 1], [1, "cs", 0, 224, 13, 1], [1, "cs", 0, 224, 17, 1], [1, "cs", 0, 224, 19, 1], [1, "cs", 0, 224, 22, 1], [1, "cs", 0, 224, 24, 1], [1, "cs", 0, 224, 29, 1], [1, "cs", 0, 224, 33, 1], [1, "cs", 0, 224, 35, 1], [1, "cs", 0, 224, 38, 1], [1, "cs", 1, 224, 14, 1], [1, "cs", 1, 224, 20, 1], [1, "cs", 1, 224, 27, 1], [1, "cs", 1, 224, 31, 1], [1, "cs", 1, 224, 36, 1], [1, "cs", 2, 224, 12, 1], [1, "cs", 2, 224, 15, 1], [1, "cs", 2, 224, 16, 1], [1, "cs", 2, 224, 18, 1], [1, "cs", 2, 224, 21, 1], [1, "cs", 2, 224, 23, 1], [1, "cs", 2, 224, 25, 1], [1, "cs", 2, 224, 26, 1], [1, "cs", 2, 224, 28, 1], [1, "cs", 2, 224, 30, 1], [1, "cs", 2, 224, 32, 1], [1, "cs", 2, 224, 34, 1], [1, "cs", 2, 224, 37, 1], [1, "cs", 2, 224, 39, 1], [1, "cs", 0, 224, 41, 1], [1, "cs", 0, 224, 44, 1], [1, "cs", 0, 224, 46, 1], [1, "cs", 0, 224, 52, 1], [1, "cs", 0, 224, 57, 1], [1, "cs", 1, 224, 47, 1], [1, "cs", 2, 224, 40, 1], [1, "cs", 2, 224, 42, 1], [1, "cs", 2, 224, 43, 1], [1, "cs", 2, 224, 45, 1], [1, "cs", 2, 224, 49, 1], [1, "cs", 1, 224, 50, 1], [1, "cs", 2, 224, 51, 1], [1, "la", 3, 224, 54, 1], [1, "cs", 2, 224, 56, 1], [1, "cs", 2, 224, 58, 1], [1, "cs", 2, 224, 61, 1], [1, "cs", 0, 224, 60, 1], [1, "cs", 0, 224, 64, 1], [1, "cs", 0, 224, 66, 1], [1, "cs", 0, 224, 70, 1], [1, "cs", 0, 224, 74, 1], [1, "cs", 0, 224, 77, 1], [1, "cs", 1, 224, 62, 1], [1, "cs", 1, 224, 68, 1], [1, "cs", 1, 224, 72, 1], [1, "cs", 1, 224, 76, 1], [1, "cs", 1, 224, 80, 1], [1, "cs", 1, 224, 83, 1], [1, "cs", 1, 224, 91, 1], [1, "cs", 1, 224, 95, 1], [1, "cs", 1, 224, 97, 1], [1, "cs", 0, 224, 85, 1], [1, "cs", 0, 224, 88, 1], [1, "cs", 0, 224, 93, 1], [1, "cs", 0, 224, 98, 1], [1, "cs", 2, 224, 59, 1], [1, "cs", 2, 224, 63, 1], [1, "cs", 2, 224, 65, 1], [1, "cs", 2, 224, 67, 1], [1, "cs", 2, 224, 69, 1], [1, "cs", 2, 224, 71, 1], [1, "cs", 2, 224, 73, 1], [1, "cs", 2, 224, 75, 1], [1, "cs", 2, 224, 78, 1], [1, "cs", 2, 224, 79, 1], [1, "cs", 2, 224, 81, 1], [1, "cs", 2, 224, 82, 1], [1, "cs", 2, 224, 84, 1], [1, "cs", 2, 224, 86, 1], [1, "cs", 2, 224, 87, 1], [1, "cs", 2, 224, 89, 1], [1, "cs", 2, 224, 90, 1], [1, "cs", 2, 224, 92, 1], [1, "cs", 2, 224, 94, 1], [1, "cs", 2, 224, 96, 1], [1, "cs", 2, 224, 99, 1], [1, "cs", 2, 224, 100, 1], [1, "cs", 0, 224, 101, 1], [1, "cs", 1, 224, 103, 1], [1, "cs", 2, 224, 102, 1], [1, "cs", 0, 222, 10, 1], [1, "cs", 2, 223, 9, 1], [1, "cs", 2, 222, 9, 1], [1, "cs", 2, 221, 9, 1], [1, "cs", 2, 223, 10, 1], [1, "cs", 2, 223, 11, 1], [1, "cs", 2, 223, 12, 1], [1, "cs", 3, 223, 13, 1], [1, "cs", 3, 222, 11, 1], [1, "cs", 3, 220, 9, 1], [1, "cs", 3, 219, 9, 1], [1, "cs", 3, 221, 10, 1], [1, "re", 2, 219, 13, 1], [1, "re", 1, 218, 18, 1], [1, "re", 1, 214, 13, 1], [1, "cs", 0, 221, 20, 1], [1, "cs", 1, 223, 18, 1], [1, "cs", 2, 222, 19, 1], [1, "cs", 2, 223, 19, 1], [1, "cs", 2, 223, 20, 1], [1, "cs", 2, 222, 20, 1], [1, "cs", 2, 220, 21, 1], [1, "cs", 0, 219, 21, 1], [1, "cs", 3, 221, 21, 1], [1, "cs", 3, 218, 21, 1], [1, "cs", 3, 222, 21, 1], [1, "cs", 3, 220, 22, 1], [1, "cs", 3, 219, 22, 1], [1, "cs", 3, 221, 22, 1], [1, "cs", 0, 211, 9, 1], [1, "cs", 1, 211, 10, 1], [1, "cs", 1, 210, 12, 1], [1, "cs", 0, 211, 13, 1], [1, "cs", 2, 210, 9, 1], [1, "cs", 2, 210, 10, 1], [1, "cs", 2, 210, 11, 1], [1, "cs", 2, 212, 9, 1], [1, "cs", 2, 210, 13, 1], [1, "cs", 2, 211, 12, 1], [1, "cs", 2, 211, 11, 1], [1, "cs", 2, 211, 14, 1], [1, "cs", 2, 212, 15, 1], [1, "cs", 2, 210, 14, 1], [1, "cs", 3, 211, 15, 1], [1, "cs", 3, 213, 9, 1], [1, "cs", 3, 212, 10, 1], [1, "cs", 3, 223, 21, 1], [1, "cs", 3, 209, 9, 1], [1, "la", 3, 223, 22, 1], [1, "la", 3, 221, 23, 1], [1, "la", 3, 207, 9, 1], [1, "la", 3, 209, 10, 1], [1, "la", 0, 209, 12, 1], [1, "la", 4, 209, 14, 1], [1, "la", 4, 219, 23, 1], [1, "la", 3, 210, 15, 1], [1, "la", 3, 217, 22, 1], [1, "la", 4, 212, 16, 1], [1, "la", 2, 214, 19, 1], [1, "la", 4, 213, 20, 1], [1, "la", 1, 212, 21, 1], [1, "la", 4, 215, 18, 1], [1, "la", 2, 216, 17, 1], [1, "la", 5, 216, 16, 1], [1, "la", 5, 216, 15, 1], [1, "la", 1, 217, 16, 1], [1, "la", 2, 218, 16, 1], [1, "la", 2, 216, 14, 1], [1, "la", 2, 219, 16, 1], [1, "la", 5, 220, 16, 1], [1, "la", 5, 216, 13, 1], [1, "la", 4, 217, 15, 1], [1, "cs", 0, 211, 44, 1], [1, "cs", 1, 212, 45, 1], [1, "cs", 2, 213, 45, 1], [1, "cs", 0, 214, 46, 1], [1, "cs", 2, 215, 46, 1], [1, "cs", 3, 213, 46, 1], [1, "cs", 3, 214, 47, 1], [1, "cs", 3, 214, 48, 1], [1, "cs", 3, 216, 46, 1], [1, "cs", 0, 208, 20, 1], [1, "cs", 0, 210, 21, 1], [1, "cs", 0, 212, 23, 1], [1, "cs", 0, 213, 25, 1], [1, "cs", 2, 213, 24, 1], [1, "cs", 2, 211, 22, 1], [1, "cs", 2, 210, 20, 1], [1, "cs", 2, 209, 21, 1], [1, "cs", 2, 209, 20, 1], [1, "cs", 2, 211, 21, 1], [1, "cs", 2, 212, 22, 1], [1, "cs", 2, 213, 23, 1], [1, "cs", 3, 213, 26, 1], [1, "cs", 3, 207, 20, 1], [1, "la", 4, 192, 33, 1], [1, "la", 4, 191, 34, 1], [1, "la", 4, 190, 35, 1], [1, "la", 3, 189, 37, 1], [1, "la", 3, 188, 39, 1], [1, "la", 4, 186, 40, 1], [1, "la", 4, 185, 39, 1], [1, "la", 4, 184, 39, 1], [1, "la", 2, 183, 39, 1], [1, "la", 1, 182, 40, 1], [1, "la", 2, 181, 41, 1], [1, "la", 5, 180, 41, 1], [1, "la", 5, 179, 41, 1], [1, "la", 4, 192, 28, 1], [1, "la", 4, 191, 28, 1], [1, "la", 4, 190, 27, 1], [1, "la", 3, 188, 27, 1], [1, "la", 4, 187, 26, 1], [1, "la", 4, 186, 25, 1], [1, "la", 4, 185, 25, 1], [1, "la", 4, 184, 24, 1], [1, "la", 5, 184, 23, 1], [1, "la", 2, 184, 22, 1], [1, "la", 5, 184, 21, 1], [1, "la", 1, 183, 20, 1], [1, "la", 5, 182, 20, 1], [1, "la", 2, 181, 20, 1], [1, "la", 5, 180, 20, 1], [1, "la", 2, 179, 20, 1], [1, "la", 4, 178, 19, 1], [1, "la", 3, 178, 17, 1], [1, "la", 3, 176, 18, 1], [1, "cs", 0, 177, 15, 1], [1, "cs", 0, 175, 17, 1], [1, "cs", 0, 180, 16, 1], [1, "cs", 0, 174, 19, 1], [1, "cs", 0, 172, 20, 1], [1, "cs", 1, 175, 15, 1], [1, "cs", 1, 172, 18, 1], [1, "cs", 1, 181, 15, 1], [1, "cs", 2, 179, 15, 1], [1, "cs", 2, 177, 16, 1], [1, "cs", 2, 176, 16, 1], [1, "cs", 2, 174, 18, 1], [1, "cs", 2, 173, 19, 1], [1, "cs", 2, 172, 19, 1], [1, "cs", 2, 173, 18, 1], [1, "cs", 2, 173, 17, 1], [1, "cs", 2, 174, 17, 1], [1, "cs", 2, 174, 16, 1], [1, "cs", 2, 175, 16, 1], [1, "cs", 2, 176, 15, 1], [1, "cs", 2, 178, 15, 1], [1, "cs", 2, 178, 16, 1], [1, "cs", 2, 179, 16, 1], [1, "cs", 2, 180, 15, 1], [1, "cs", 2, 181, 16, 1], [1, "cs", 3, 182, 16, 1], [1, "cs", 3, 172, 21, 1], [1, "la", 1, 175, 19, 1], [1, "la", 2, 174, 20, 1], [1, "la", 2, 173, 20, 1], [1, "la", 1, 180, 17, 1], [1, "la", 2, 181, 17, 1], [1, "la", 3, 191, 20, 1], [1, "s", 0, 217, 30, 1], [1, "s", 0, 208, 35, 1], [1, "s", 0, 204, 24, 1], [1, "s", 1, 218, 32, 1], [1, "s", 1, 207, 34, 1], [1, "s", 1, 202, 23, 1], [1, "s", 1, 195, 16, 1], [1, "s", 2, 222, 28, 1], [1, "s", 2, 212, 38, 1], [1, "s", 2, 207, 23, 1], [1, "s", 2, 202, 12, 1], [1, "s", 2, 195, 18, 1], [1, "s", 1, 191, 12, 1], [1, "s", 0, 187, 16, 1], [1, "s", 2, 188, 16, 1], [1, "s", 1, 186, 14, 1], [1, "s", 1, 201, 16, 1], [1, "g", 1, 216, 31, 1], [1, "g", 0, 200, 15, 1], [1, "g", 0, 202, 40, 1], [1, "g", 0, 189, 32, 1], [1, "g", 0, 204, 28, 1], [1, "g", 0, 196, 24, 1], [1, "g", 2, 198, 37, 1], [1, "s", 0, 193, 39, 1], [1, "s", 0, 201, 45, 1], [1, "a", 0, 210, 29, 1], [1, "a", 0, 200, 20, 1], [1, "cs", 0, 200, 34, 1], [1, "cs", 0, 193, 27, 1], [1, "cs", 1, 203, 30, 1], [1, "cs", 1, 191, 31, 1], [1, "cs", 2, 202, 32, 1], [1, "cs", 2, 194, 26, 1], [1, "cs", 2, 192, 27, 1], [1, "cs", 2, 192, 32, 1], [1, "cs", 2, 203, 31, 1], [1, "cs", 2, 202, 31, 1], [1, "cs", 2, 202, 30, 1], [1, "cs", 3, 202, 29, 1], [1, "cs", 3, 201, 32, 1], [1, "cs", 3, 199, 35, 1], [1, "cs", 0, 193, 34, 1], [1, "cs", 2, 194, 34, 1], [1, "cs", 2, 198, 35, 1], [1, "cs", 3, 199, 34, 1], [1, "cs", 3, 191, 29, 1], [1, "cs", 0, 191, 30, 1], [1, "cs", 3, 190, 29, 1], [1, "la", 3, 180, 69, 1], [1, "la", 3, 182, 68, 1], [1, "la", 3, 184, 68, 1], [1, "la", 3, 186, 70, 1], [1, "la", 3, 184, 72, 1], [1, "la", 3, 182, 72, 1], [1, "la", 3, 180, 71, 1], [1, "cs", 0, 186, 68, 1], [1, "cs", 0, 187, 70, 1], [1, "cs", 0, 183, 74, 1], [1, "cs", 0, 178, 70, 1], [1, "cs", 2, 182, 66, 1], [1, "cs", 2, 182, 74, 1], [1, "cs", 2, 181, 73, 1], [1, "cs", 2, 180, 74, 1], [1, "cs", 2, 181, 74, 1], [1, "la", 0, 184, 70, 1], [1, "la", 3, 182, 70, 1], [1, "cs", 2, 181, 67, 1], [1, "cs", 3, 184, 67, 1], [1, "cs", 3, 182, 67, 1], [1, "la", 4, 187, 69, 1], [1, "la", 1, 188, 68, 1], [1, "la", 4, 189, 68, 1], [1, "la", 2, 190, 68, 1], [1, "la", 1, 191, 68, 1], [1, "la", 4, 192, 68, 1], [1, "la", 2, 193, 68, 1], [1, "la", 4, 194, 69, 1], [1, "la", 2, 194, 70, 1], [1, "la", 5, 195, 71, 1], [1, "la", 1, 194, 71, 1], [1, "la", 2, 196, 72, 1], [1, "la", 4, 196, 71, 1], [1, "la", 1, 197, 73, 1], [1, "la", 5, 196, 73, 1], [1, "la", 5, 198, 73, 1], [1, "la", 3, 201, 73, 1], [1, "la", 3, 203, 72, 1], [1, "la", 4, 199, 73, 1], [1, "la", 1, 205, 72, 1], [1, "la", 2, 206, 72, 1], [1, "la", 5, 207, 72, 1], [1, "la", 1, 208, 72, 1], [1, "la", 1, 209, 73, 1], [1, "la", 2, 209, 74, 1], [1, "la", 5, 211, 76, 1], [1, "la", 4, 210, 75, 1], [1, "la", 5, 212, 76, 1], [1, "la", 4, 202, 75, 1], [1, "la", 2, 203, 76, 1], [1, "la", 4, 204, 77, 1], [1, "la", 2, 204, 78, 1], [1, "la", 2, 204, 79, 1], [1, "la", 5, 204, 80, 1], [1, "cs", 0, 202, 74, 1], [1, "cs", 1, 203, 74, 1], [1, "cs", 2, 204, 73, 1], [1, "cs", 2, 203, 75, 1], [1, "cs", 3, 204, 76, 1], [1, "cs", 3, 205, 73, 1], [1, "cs", 0, 205, 74, 1], [1, "cs", 2, 204, 74, 1], [1, "cs", 2, 204, 75, 1], [1, "cs", 2, 206, 73, 1], [1, "cs", 3, 207, 73, 1], [1, "cs", 2, 205, 76, 1], [1, "cs", 3, 205, 77, 1], [1, "la", 3, 183, 66, 1], [1, "la", 4, 183, 65, 1], [1, "la", 4, 184, 64, 1], [1, "la", 4, 185, 63, 1], [1, "la", 1, 185, 62, 1], [1, "la", 2, 185, 61, 1], [1, "la", 2, 185, 60, 1], [1, "la", 4, 186, 59, 1], [1, "la", 1, 187, 58, 1], [1, "la", 2, 187, 57, 1], [1, "la", 2, 187, 56, 1], [1, "s", 0, 191, 60, 1], [1, "s", 1, 195, 58, 1], [1, "s", 1, 199, 46, 1], [1, "s", 2, 202, 49, 1], [1, "g", 2, 197, 55, 1], [1, "g", 1, 213, 55, 1], [1, "g", 0, 192, 45, 1], [1, "g", 0, 210, 61, 1], [1, "g", 0, 182, 52, 1], [1, "g", 0, 180, 35, 1], [1, "g", 0, 175, 25, 1], [1, "g", 0, 168, 32, 1], [1, "g", 1, 179, 28, 1], [1, "g", 1, 161, 16, 1], [1, "g", 2, 172, 12, 1], [1, "g", 2, 160, 25, 1], [1, "g", 2, 157, 39, 1], [1, "g", 2, 170, 43, 1], [1, "g", 2, 202, 67, 1], [1, "g", 2, 217, 72, 1], [1, "g", 2, 214, 82, 1], [1, "g", 2, 193, 86, 1], [1, "g", 2, 168, 60, 1], [1, "g", 2, 165, 78, 1], [1, "g", 2, 173, 88, 1], [1, "s", 0, 185, 51, 1], [1, "s", 0, 175, 44, 1], [1, "s", 0, 165, 50, 1], [1, "s", 0, 160, 32, 1], [1, "s", 1, 162, 30, 1], [1, "s", 1, 176, 28, 1], [1, "s", 1, 154, 17, 1], [1, "s", 1, 184, 49, 1], [1, "s", 1, 192, 62, 1], [1, "s", 1, 216, 62, 1], [1, "s", 1, 204, 65, 1], [1, "s", 1, 217, 79, 1], [1, "s", 1, 206, 86, 1], [1, "la", 3, 211, 69, 1], [1, "la", 4, 215, 69, 1], [1, "la", 5, 201, 81, 1], [1, "la", 1, 207, 83, 1], [1, "la", 3, 173, 32, 1], [1, "la", 2, 181, 45, 1], [1, "la", 1, 178, 38, 1], [1, "la", 1, 213, 69, 1], [1, "la", 5, 214, 69, 1], [1, "la", 4, 216, 68, 1], [1, "la", 0, 191, 78, 1], [1, "la", 3, 191, 80, 1], [1, "la", 3, 189, 79, 1], [1, "g", 2, 150, 29, 1], [1, "g", 2, 154, 67, 1], [1, "g", 2, 202, 94, 1], [1, "g", 2, 155, 90, 1], [1, "s", 2, 215, 80, 1], [1, "s", 2, 204, 62, 1], [1, "s", 2, 218, 60, 1], [1, "s", 2, 194, 62, 1], [1, "s", 0, 216, 86, 1], [1, "s", 0, 211, 93, 1], [1, "la", 0, 216, 92, 1], [1, "la", 0, 151, 96, 1], [1, "la", 1, 155, 95, 1], [1, "la", 4, 214, 88, 1], [1, "s", 0, 205, 99, 1], [1, "s", 1, 217, 88, 1], [1, "s", 1, 213, 94, 1], [1, "s", 1, 202, 97, 1], [1, "s", 0, 199, 85, 1], [1, "s", 0, 190, 93, 1], [1, "s", 1, 199, 87, 1], [1, "s", 1, 192, 97, 1], [1, "la", 3, 196, 92, 1], [1, "la", 1, 199, 91, 1], [1, "la", 1, 220, 91, 1], [1, "la", 0, 219, 77, 1], [1, "la", 0, 200, 59, 1], [1, "la", 3, 188, 87, 1], [1, "la", 0, 183, 94, 1], [1, "la", 1, 187, 83, 1], [1, "la", 1, 175, 82, 1], [1, "la", 1, 172, 94, 1], [1, "la", 2, 179, 78, 1], [1, "la", 0, 166, 87, 1], [1, "la", 3, 159, 80, 1], [1, "la", 3, 167, 15, 1], [1, "la", 1, 164, 17, 1], [1, "la", 1, 172, 28, 1], [1, "la", 3, 153, 24, 1], [1, "la", 4, 164, 91, 1], [1, "la", 4, 156, 82, 1], [1, "la", 4, 149, 90, 1], [1, "s", 0, 178, 85, 1], [1, "s", 1, 180, 85, 1], [1, "s", 0, 163, 96, 1], [1, "s", 0, 159, 86, 1], [1, "s", 0, 185, 78, 1], [1, "s", 1, 194, 75, 1], [1, "s", 2, 195, 76, 1], [1, "s", 2, 181, 78, 1], [1, "s", 2, 161, 87, 1], [1, "s", 2, 166, 97, 1], [1, "s", 2, 177, 97, 1], [1, "s", 0, 149, 85, 1], [1, "s", 1, 151, 83, 1], [1, "s", 1, 175, 74, 1], [1, "s", 0, 174, 72, 1], [1, "la", 3, 168, 71, 1], [1, "la", 3, 180, 60, 1], [1, "s", 0, 156, 63, 1], [1, "s", 0, 151, 47, 1], [1, "s", 1, 158, 64, 1], [1, "s", 1, 161, 75, 1], [1, "s", 1, 162, 51, 1], [1, "s", 1, 175, 45, 1], [1, "s", 1, 152, 47, 1], [1, "s", 1, 159, 33, 1], [1, "s", 1, 152, 18, 1], [1, "s", 0, 151, 13, 1], [1, "s", 0, 166, 22, 1], [1, "s", 0, 170, 63, 1], [1, "s", 2, 172, 62, 1], [1, "s", 2, 155, 61, 1], [1, "s", 2, 167, 51, 1], [1, "s", 2, 150, 52, 1], [1, "la", 4, 178, 69, 1], [1, "la", 4, 177, 68, 1], [1, "la", 3, 176, 67, 1], [1, "la", 0, 174, 67, 1], [1, "la", 1, 172, 67, 1], [1, "la", 4, 171, 67, 1], [1, "la", 4, 170, 66, 1], [1, "la", 4, 169, 66, 1], [1, "la", 1, 168, 66, 1], [1, "la", 4, 167, 67, 1], [1, "la", 1, 166, 67, 1], [1, "la", 4, 165, 68, 1], [1, "la", 5, 164, 68, 1], [1, "la", 2, 163, 68, 1], [1, "la", 5, 162, 68, 1], [1, "la", 2, 161, 68, 1], [1, "la", 3, 153, 72, 1], [1, "la", 3, 163, 60, 1], [1, "la", 3, 164, 42, 1], [1, "la", 0, 155, 51, 1], [1, "la", 1, 168, 42, 1], [1, "la", 4, 158, 48, 1], [1, "la", 4, 178, 57, 1], [1, "la", 4, 151, 69, 1], [1, "la", 2, 170, 74, 1], [1, "la", 2, 160, 84, 1], [1, "la", 2, 174, 92, 1], [1, "la", 2, 188, 90, 1], [1, "la", 2, 209, 84, 1], [1, "la", 2, 206, 93, 1], [1, "la", 5, 156, 70, 1], [1, "la", 5, 165, 57, 1], [1, "la", 5, 182, 58, 1], [1, "la", 5, 166, 44, 1], [1, "la", 1, 163, 39, 1], [1, "la", 1, 152, 53, 1], [1, "la", 1, 152, 37, 1], [1, "la", 2, 163, 13, 1], [1, "de", 12, 219, 12, 0], [1, "de", 14, 203, 13, 0], [1, "de", 15, 220, 19, 0], [1, "de", 12, 223, 15, 0], [1, "de", 12, 213, 10, 0], [1, "de", 37, 217, 19, 0], [1, "de", 38, 220, 14, 0], [1, "de", 38, 215, 10, 0], [1, "de", 40, 214, 14, 0], [1, "de", 40, 222, 16, 0], [1, "de", 40, 209, 18, 0], [1, "de", 37, 212, 18, 0], [1, "de", 38, 215, 26, 0], [1, "de", 37, 222, 25, 0], [1, "de", 40, 221, 29, 0], [1, "de", 12, 220, 27, 0], [1, "de", 13, 213, 27, 0], [1, "de", 14, 215, 30, 0], [1, "de", 15, 219, 33, 0], [1, "de", 38, 220, 31, 0], [1, "de", 38, 217, 35, 0], [1, "de", 40, 221, 34, 0], [1, "de", 39, 215, 32, 0], [1, "de", 37, 211, 35, 0], [1, "de", 12, 223, 38, 0], [1, "de", 13, 213, 38, 0], [1, "de", 14, 222, 44, 0], [1, "de", 15, 208, 33, 0], [1, "de", 15, 206, 23, 0], [1, "de", 13, 205, 28, 0], [1, "de", 14, 211, 23, 0], [1, "de", 14, 201, 20, 0], [1, "de", 15, 198, 9, 0], [1, "de", 15, 199, 16, 0], [1, "de", 12, 194, 15, 0], [1, "de", 12, 197, 23, 0], [1, "de", 37, 205, 13, 0], [1, "de", 39, 204, 9, 0], [1, "de", 40, 196, 12, 0], [1, "de", 40, 198, 18, 0], [1, "de", 37, 192, 11, 0], [1, "de", 37, 199, 24, 0], [1, "de", 37, 209, 24, 0], [1, "de", 39, 209, 30, 0], [1, "de", 39, 204, 31, 0], [1, "de", 39, 192, 24, 0], [1, "de", 40, 187, 23, 0], [1, "de", 38, 187, 18, 0], [1, "de", 39, 192, 18, 0], [1, "de", 37, 185, 15, 0], [1, "de", 12, 188, 15, 0], [1, "de", 13, 185, 13, 0], [1, "de", 14, 189, 9, 0], [1, "de", 15, 187, 22, 0], [1, "de", 15, 180, 9, 0], [1, "de", 12, 177, 14, 0], [1, "de", 14, 173, 9, 0], [1, "de", 14, 171, 15, 0], [1, "de", 40, 182, 9, 0], [1, "de", 39, 179, 13, 0], [1, "de", 39, 175, 9, 0], [1, "de", 40, 173, 14, 0], [1, "de", 37, 169, 11, 0], [1, "de", 37, 163, 10, 0], [1, "de", 38, 164, 15, 0], [1, "de", 39, 170, 20, 0], [1, "de", 40, 160, 17, 0], [1, "de", 40, 154, 10, 0], [1, "de", 40, 165, 23, 0], [1, "de", 40, 150, 19, 0], [1, "de", 37, 155, 16, 0], [1, "de", 39, 146, 10, 0], [1, "de", 12, 159, 12, 0], [1, "de", 13, 151, 9, 0], [1, "de", 14, 150, 14, 0], [1, "de", 15, 153, 19, 0], [1, "de", 13, 161, 25, 0], [1, "de", 14, 169, 25, 0], [1, "de", 15, 176, 25, 0], [1, "de", 12, 180, 29, 0], [1, "de", 12, 188, 31, 0], [1, "de", 14, 181, 36, 0], [1, "de", 37, 186, 33, 0], [1, "de", 38, 183, 26, 0], [1, "de", 39, 177, 21, 0], [1, "de", 40, 175, 31, 0], [1, "de", 37, 176, 39, 0], [1, "de", 37, 168, 34, 0], [1, "de", 38, 162, 32, 0], [1, "de", 38, 168, 45, 0], [1, "de", 38, 173, 45, 0], [1, "de", 39, 160, 35, 0], [1, "de", 40, 161, 42, 0], [1, "de", 40, 170, 39, 0], [1, "de", 40, 181, 43, 0], [1, "de", 40, 156, 26, 0], [1, "de", 40, 150, 32, 0], [1, "de", 37, 159, 26, 0], [1, "de", 37, 155, 40, 0], [1, "de", 37, 154, 45, 0], [1, "de", 39, 149, 45, 0], [1, "de", 40, 150, 50, 0], [1, "de", 40, 160, 52, 0], [1, "de", 37, 164, 52, 0], [1, "de", 38, 168, 50, 0], [1, "de", 12, 176, 45, 0], [1, "de", 12, 167, 32, 0], [1, "de", 13, 158, 32, 0], [1, "de", 14, 149, 28, 0], [1, "de", 15, 163, 30, 0], [1, "de", 14, 158, 39, 0], [1, "de", 12, 171, 43, 0], [1, "de", 12, 174, 36, 0], [1, "de", 12, 151, 43, 0], [1, "de", 13, 152, 48, 0], [1, "de", 14, 164, 49, 0], [1, "de", 15, 149, 52, 0], [1, "de", 12, 174, 49, 0], [1, "de", 13, 183, 51, 0], [1, "de", 14, 186, 48, 0], [1, "de", 37, 182, 48, 0], [1, "de", 38, 187, 52, 0], [1, "de", 39, 188, 43, 0], [1, "de", 37, 200, 38, 0], [1, "de", 40, 194, 37, 0], [1, "de", 39, 199, 44, 0], [1, "de", 38, 200, 49, 0], [1, "de", 37, 196, 54, 0], [1, "de", 12, 194, 40, 0], [1, "de", 13, 202, 45, 0], [1, "de", 14, 198, 47, 0], [1, "de", 15, 198, 55, 0], [1, "de", 15, 212, 54, 0], [1, "de", 15, 216, 63, 0], [1, "de", 14, 209, 62, 0], [1, "de", 12, 219, 60, 0], [1, "de", 12, 206, 56, 0], [1, "de", 12, 218, 72, 0], [1, "de", 12, 223, 67, 0], [1, "de", 12, 205, 64, 0], [1, "de", 12, 193, 63, 0], [1, "de", 14, 216, 80, 0], [1, "de", 14, 222, 87, 0], [1, "de", 38, 210, 53, 0], [1, "de", 37, 210, 47, 0], [1, "de", 37, 200, 63, 0], [1, "de", 37, 218, 62, 0], [1, "de", 37, 222, 60, 0], [1, "de", 37, 207, 70, 0], [1, "de", 38, 203, 68, 0], [1, "de", 38, 195, 66, 0], [1, "de", 38, 218, 55, 0], [1, "de", 38, 212, 61, 0], [1, "de", 38, 222, 70, 0], [1, "de", 38, 218, 70, 0], [1, "de", 40, 222, 81, 0], [1, "de", 38, 214, 79, 0], [1, "de", 39, 213, 83, 0], [1, "de", 39, 207, 76, 0], [1, "de", 39, 208, 86, 0], [1, "de", 39, 218, 87, 0], [1, "de", 39, 222, 93, 0], [1, "de", 39, 216, 96, 0], [1, "de", 39, 209, 94, 0], [1, "de", 39, 201, 87, 0], [1, "de", 39, 198, 82, 0], [1, "de", 39, 207, 99, 0], [1, "de", 39, 200, 97, 0], [1, "de", 39, 202, 92, 0], [1, "de", 37, 194, 97, 0], [1, "de", 39, 204, 88, 0], [1, "de", 39, 189, 90, 0], [1, "de", 39, 194, 81, 0], [1, "de", 39, 188, 98, 0], [1, "de", 37, 183, 91, 0], [1, "de", 37, 186, 80, 0], [1, "de", 37, 191, 72, 0], [1, "de", 38, 184, 77, 0], [1, "de", 38, 180, 80, 0], [1, "de", 39, 173, 75, 0], [1, "de", 40, 178, 87, 0], [1, "de", 40, 174, 94, 0], [1, "de", 40, 192, 93, 0], [1, "de", 40, 165, 92, 0], [1, "de", 37, 160, 89, 0], [1, "de", 38, 161, 85, 0], [1, "de", 38, 164, 98, 0], [1, "de", 38, 151, 99, 0], [1, "de", 38, 151, 85, 0], [1, "de", 40, 148, 83, 0], [1, "de", 40, 160, 77, 0], [1, "de", 40, 167, 77, 0], [1, "de", 40, 153, 69, 0], [1, "de", 40, 149, 74, 0], [1, "de", 37, 161, 64, 0], [1, "de", 37, 154, 61, 0], [1, "de", 39, 157, 55, 0], [1, "de", 39, 174, 64, 0], [1, "de", 39, 175, 56, 0], [1, "de", 39, 149, 67, 0], [1, "de", 12, 218, 96, 0], [1, "de", 13, 212, 95, 0], [1, "de", 14, 204, 85, 0], [1, "de", 15, 215, 85, 0], [1, "de", 15, 197, 97, 0], [1, "de", 12, 198, 87, 0], [1, "de", 14, 196, 77, 0], [1, "de", 13, 194, 86, 0], [1, "de", 15, 181, 84, 0], [1, "de", 14, 184, 79, 0], [1, "de", 14, 188, 93, 0], [1, "de", 13, 180, 87, 0], [1, "de", 13, 178, 96, 0], [1, "de", 13, 163, 95, 0], [1, "de", 15, 172, 88, 0], [1, "de", 15, 176, 75, 0], [1, "de", 14, 172, 72, 0], [1, "de", 14, 169, 82, 0], [1, "de", 13, 164, 78, 0], [1, "de", 13, 158, 87, 0], [1, "de", 13, 149, 86, 0], [1, "de", 15, 154, 91, 0], [1, "de", 15, 160, 74, 0], [1, "de", 14, 152, 76, 0], [1, "de", 14, 158, 63, 0], [1, "de", 14, 150, 60, 0], [1, "de", 12, 169, 59, 0], [1, "de", 13, 173, 61, 0], [1, "cs", 1, 143, 104, 1], [1, "cs", 0, 141, 102, 1], [1, "cs", 3, 138, 102, 1], [1, "cs", 2, 139, 102, 1], [1, "cs", 2, 140, 102, 1], [1, "cs", 3, 143, 107, 1], [1, "cs", 0, 143, 106, 1], [1, "cs", 2, 143, 105, 1], [1, "cs", 2, 142, 103, 1], [1, "cs", 0, 142, 104, 1], [1, "cs", 2, 141, 103, 1], [1, "cs", 3, 142, 105, 1], [1, "cs", 3, 140, 103, 1], [1, "cs", 3, 141, 104, 1], [1, "la", 4, 151, 23, 1], [1, "la", 4, 150, 22, 1], [1, "la", 1, 149, 21, 1], [1, "la", 4, 148, 21, 1], [1, "la", 2, 147, 20, 1], [1, "la", 4, 147, 19, 1], [1, "la", 5, 147, 18, 1], [1, "la", 1, 147, 17, 1], [1, "la", 3, 144, 9, 1], [1, "la", 5, 147, 16, 1], [1, "la", 2, 147, 15, 1], [1, "la", 4, 147, 14, 1], [1, "la", 4, 145, 11, 1], [1, "la", 5, 145, 12, 1], [1, "la", 1, 146, 13, 1], [1, "la", 2, 145, 13, 1], [1, "la", 3, 155, 25, 1], [1, "la", 0, 155, 24, 1], [1, "la", 3, 153, 26, 1], [1, "cs", 0, 151, 24, 1], [1, "cs", 0, 153, 22, 1], [1, "cs", 3, 152, 22, 1], [1, "cs", 3, 154, 22, 1], [1, "cs", 1, 157, 26, 1], [1, "cs", 2, 157, 24, 1], [1, "cs", 2, 156, 26, 1], [1, "cs", 2, 154, 28, 1], [1, "cs", 2, 151, 26, 1], [1, "cs", 2, 152, 25, 1], [1, "cs", 2, 151, 25, 1], [1, "cs", 2, 156, 27, 1], [1, "cs", 2, 157, 23, 1], [1, "cs", 2, 157, 22, 1], [1, "cs", 3, 150, 24, 1], [1, "cs", 3, 150, 23, 1], [1, "de", 38, 155, 29, 0], [1, "de", 12, 157, 27, 0], [1, "de", 14, 153, 29, 0], [1, "de", 15, 158, 23, 0], [1, "de", 13, 156, 21, 0], [1, "de", 13, 147, 36, 0], [1, "de", 13, 161, 56, 0], [1, "de", 13, 147, 79, 0], [1, "de", 12, 157, 99, 0], [1, "de", 12, 172, 99, 0], [1, "la", 3, 143, 102, 1], [1, "la", 4, 149, 96, 1], [1, "la", 4, 145, 102, 1], [1, "la", 1, 148, 97, 1], [1, "la", 5, 148, 98, 1], [1, "cs", 3, 144, 104, 1], [1, "cs", 3, 144, 103, 1], [1, "cs", 3, 145, 103, 1], [1, "cs", 3, 145, 104, 1], [1, "cs", 3, 142, 101, 1], [1, "cs", 3, 143, 100, 1], [1, "cs", 3, 141, 101, 1], [1, "cs", 3, 142, 100, 1], [1, "cs", 0, 141, 100, 1], [1, "cs", 2, 140, 101, 1], [1, "cs", 2, 144, 105, 1], [1, "cs", 3, 146, 103, 1], [1, "cs", 3, 146, 102, 1], [1, "cs", 3, 150, 95, 1], [1, "cs", 0, 150, 97, 1], [1, "cs", 2, 151, 98, 1], [1, "cs", 0, 153, 97, 1], [1, "cs", 3, 153, 96, 1], [1, "cs", 2, 149, 95, 1], [1, "s", 0, 213, 127, 1], [1, "plm", 1, 214, 131, 0], [1, "plm", 1, 207, 128, 0], [1, "plm", 0, 208, 127, 0], [1, "s", 1, 207, 132, 1], [1, "s", 2, 208, 133, 1], [1, "plm", 0, 217, 132, 0], [1, "plm", 2, 186, 158, 0], [1, "plm", 0, 184, 160, 0], [1, "s", 1, 183, 156, 1], [1, "s", 2, 186, 159, 1], [1, "p", 0, 182, 157, 1], [1, "p", 0, 114, 205, 1], [1, "plm", 1, 117, 204, 0], [1, "plm", 0, 117, 205, 0], [1, "plm", 2, 112, 204, 0], [1, "s", 2, 114, 207, 1], [1, "s", 2, 115, 204, 1], [1, "plm", 2, 122, 151, 0], [1, "plm", 1, 123, 150, 0], [1, "plm", 1, 117, 151, 0], [1, "s", 0, 118, 150, 1], [1, "s", 1, 122, 152, 1], [1, "plm", 2, 156, 130, 0], [1, "plm", 1, 154, 127, 0], [1, "s", 0, 153, 128, 1], [1, "s", 2, 152, 130, 1], [1, "p", 0, 123, 65, 1], [1, "plm", 2, 125, 62, 0], [1, "plm", 1, 124, 62, 0], [1, "plm", 0, 120, 65, 0], [1, "s", 1, 125, 63, 1], [1, "s", 1, 121, 64, 1], [1, "s", 2, 122, 62, 1], [1, "cs", 0, 140, 106, 1], [1, "cs", 2, 144, 106, 1], [1, "cs", 2, 145, 105, 1], [1, "cs", 2, 144, 107, 1], [1, "cs", 2, 141, 106, 1], [1, "cs", 2, 141, 105, 1], [1, "cs", 2, 140, 105, 1], [1, "cs", 2, 140, 104, 1], [1, "cs", 1, 138, 103, 1], [1, "cs", 0, 139, 104, 1], [1, "cs", 2, 139, 103, 1], [1, "cs", 2, 139, 105, 1], [1, "cs", 2, 142, 106, 1], [1, "cs", 2, 142, 107, 1], [1, "cs", 2, 139, 101, 1], [1, "de", 19, 27, 264, 0], [1, "la", 4, 147, 99, 1], [1, "la", 1, 146, 100, 1], [1, "la", 4, 145, 101, 1], [1, "cs", 1, 215, 47, 1], [1, "cs", 2, 216, 47, 1], [1, "cs", 2, 215, 48, 1], [1, "la", 4, 214, 45, 1], [1, "la", 4, 215, 45, 1], [1, "la", 0, 216, 46, 1], [1, "la", 4, 216, 48, 1], [1, "la", 4, 216, 49, 1], [1, "la", 4, 217, 50, 1], [1, "la", 3, 214, 49, 1], [1, "la", 4, 211, 45, 1], [1, "la", 3, 213, 47, 1], [1, "cs", 2, 224, 48, 1], [1, "plm", 2, 111, 243, 0], [1, "plm", 1, 108, 246, 0], [1, "s", 1, 110, 243, 1], [1, "s", 0, 108, 245, 1], [1, "s", 0, 121, 276, 1], [1, "plm", 2, 122, 277, 0], [1, "plm", 2, 117, 276, 0], [1, "plm", 1, 118, 277, 0], [1, "s", 1, 118, 278, 1], [1, "cs", 2, 66, 16, 1], [1, "cs", 3, 67, 16, 1], [1, "cs", 0, 67, 17, 1], [1, "cs", 2, 66, 17, 1], [1, "cs", 3, 66, 18, 1], [1, "cs", 3, 68, 17, 1], [1, "cs", 0, 36, 16, 1], [1, "cs", 2, 36, 17, 1], [1, "cs", 2, 36, 18, 1], [1, "cs", 3, 35, 17, 1], [1, "cs", 3, 36, 19, 1], [1, "cs", 3, 35, 18, 1], [1, "cs", 2, 66, 30, 1], [1, "cs", 2, 66, 23, 1], [1, "cs", 3, 66, 22, 1], [1, "cs", 3, 66, 31, 1], [1, "cs", 2, 36, 30, 1], [1, "cs", 2, 36, 23, 1], [1, "cs", 1, 36, 22, 1], [1, "cs", 2, 36, 31, 1], [1, "cs", 3, 42, 13, 1], [1, "cs", 0, 43, 13, 1], [1, "cs", 2, 44, 13, 1], [1, "cs", 3, 42, 16, 1], [1, "cs", 3, 41, 16, 1], [1, "cs", 3, 40, 16, 1], [1, "cs", 0, 42, 19, 1], [1, "cs", 3, 43, 19, 1], [1, "cs", 3, 44, 19, 1], [1, "cs", 3, 45, 19, 1], [1, "cs", 2, 46, 19, 1], [1, "cs", 0, 43, 22, 1], [1, "cs", 2, 42, 22, 1], [1, "cs", 1, 41, 22, 1], [1, "cs", 0, 40, 22, 1], [1, "cs", 3, 39, 17, 1], [1, "cs", 1, 44, 26, 1], [1, "cs", 2, 45, 26, 1], [1, "cs", 3, 46, 26, 1], [1, "cs", 0, 47, 26, 1], [1, "cs", 2, 48, 26, 1], [1, "cs", 3, 47, 25, 1], [1, "cs", 3, 43, 27, 1], [1, "cs", 1, 49, 32, 1], [1, "cs", 2, 50, 32, 1], [1, "cs", 2, 51, 32, 1], [1, "cs", 2, 52, 32, 1], [1, "d", 0, 51, 29, 1], [1, "d", 1, 53, 29, 1], [1, "d", 1, 49, 29, 1], [1, "cs", 3, 55, 31, 1], [1, "cs", 3, 54, 32, 1], [1, "cs", 3, 47, 31, 1], [1, "cs", 3, 48, 32, 1], [1, "cs", 0, 51, 33, 1], [1, "cs", 2, 52, 33, 1], [1, "cs", 2, 50, 33, 1], [1, "cs", 3, 56, 30, 1], [1, "cs", 3, 56, 31, 1], [1, "cs", 3, 46, 30, 1], [1, "cs", 3, 46, 31, 1], [1, "cs", 1, 53, 33, 1], [1, "cs", 2, 49, 33, 1], [1, "cs", 2, 53, 32, 1], [1, "cs", 0, 55, 32, 1], [1, "cs", 0, 47, 32, 1], [1, "d", 1, 54, 35, 1], [1, "fo", 2, 35, 15, 0], [1, "fo", 2, 36, 12, 0], [1, "fo", 2, 67, 15, 0], [1, "cs", 3, 60, 13, 1], [1, "cs", 2, 59, 13, 1], [1, "cs", 1, 58, 13, 1], [1, "cs", 3, 62, 16, 1], [1, "cs", 0, 61, 16, 1], [1, "cs", 3, 60, 16, 1], [1, "cs", 3, 63, 17, 1], [1, "cs", 2, 60, 19, 1], [1, "cs", 1, 59, 19, 1], [1, "cs", 3, 58, 19, 1], [1, "cs", 2, 57, 19, 1], [1, "cs", 2, 56, 19, 1], [1, "cs", 0, 55, 18, 1], [1, "cs", 2, 55, 17, 1], [1, "cs", 2, 63, 23, 1], [1, "cs", 0, 62, 22, 1], [1, "cs", 2, 61, 22, 1], [1, "cs", 1, 60, 22, 1], [1, "cs", 0, 59, 22, 1], [1, "cs", 2, 54, 26, 1], [1, "cs", 2, 55, 26, 1], [1, "cs", 2, 56, 26, 1], [1, "cs", 1, 57, 26, 1], [1, "cs", 2, 58, 26, 1], [1, "cs", 2, 59, 27, 1], [1, "cs", 2, 68, 16, 1], [1, "cs", 2, 68, 15, 1], [1, "cs", 3, 69, 15, 1], [1, "cs", 3, 70, 15, 1], [1, "cs", 3, 70, 14, 1], [1, "cs", 1, 69, 14, 1], [1, "cs", 1, 69, 16, 1], [1, "cs", 2, 71, 13, 1], [1, "cs", 2, 71, 14, 1], [1, "cs", 3, 72, 13, 1], [1, "cs", 3, 70, 8, 1], [1, "cs", 3, 71, 8, 1], [1, "cs", 2, 72, 8, 1], [1, "cs", 0, 73, 8, 1], [1, "cs", 3, 74, 9, 1], [1, "cs", 3, 74, 8, 1], [1, "cs", 0, 75, 8, 1], [1, "cs", 3, 76, 8, 1], [1, "cs", 3, 75, 9, 1], [1, "cs", 3, 75, 10, 1], [1, "cs", 0, 76, 10, 1], [1, "cs", 0, 76, 16, 1], [1, "cs", 3, 76, 15, 1], [1, "cs", 3, 75, 16, 1], [1, "cs", 2, 77, 11, 1], [1, "cs", 2, 77, 14, 1], [1, "cs", 3, 77, 12, 1], [1, "cs", 3, 77, 13, 1], [1, "cs", 3, 77, 15, 1], [1, "cs", 0, 74, 18, 1], [1, "cs", 1, 75, 17, 1], [1, "cs", 2, 74, 17, 1], [1, "cs", 3, 73, 19, 1], [1, "cs", 3, 67, 23, 1], [1, "cs", 0, 68, 23, 1], [1, "cs", 0, 72, 20, 1], [1, "cs", 2, 73, 20, 1], [1, "cs", 2, 74, 19, 1], [1, "cs", 2, 74, 36, 1], [1, "cs", 2, 77, 27, 1], [1, "cs", 2, 76, 26, 1], [1, "cs", 2, 75, 26, 1], [1, "cs", 0, 74, 26, 1], [1, "cs", 2, 75, 25, 1], [1, "cs", 0, 76, 25, 1], [1, "cs", 1, 77, 23, 1], [1, "cs", 2, 77, 16, 1], [1, "cs", 2, 76, 17, 1], [1, "cs", 2, 76, 24, 1], [1, "cs", 2, 77, 24, 1], [1, "cs", 2, 77, 25, 1], [1, "cs", 2, 77, 26, 1], [1, "cs", 1, 75, 27, 1], [1, "cs", 3, 76, 27, 1], [1, "cs", 2, 67, 24, 1], [1, "cs", 2, 66, 24, 1], [1, "cs", 2, 73, 26, 1], [1, "cs", 2, 74, 27, 1], [1, "cs", 2, 74, 25, 1], [1, "cs", 2, 66, 19, 1], [1, "cs", 2, 66, 20, 1], [1, "cs", 2, 66, 21, 1], [1, "cs", 2, 67, 18, 1], [1, "cs", 2, 67, 22, 1], [1, "cs", 0, 77, 36, 1], [1, "cs", 0, 77, 32, 1], [1, "cs", 1, 75, 35, 1], [1, "cs", 2, 75, 36, 1], [1, "cs", 2, 76, 36, 1], [1, "cs", 2, 77, 35, 1], [1, "cs", 2, 77, 34, 1], [1, "cs", 2, 76, 35, 1], [1, "cs", 2, 77, 33, 1], [1, "cs", 2, 77, 31, 1], [1, "cs", 0, 77, 29, 1], [1, "cs", 0, 71, 32, 1], [1, "cs", 0, 76, 34, 1], [1, "cs", 2, 77, 30, 1], [1, "cs", 2, 77, 28, 1], [1, "cs", 2, 76, 28, 1], [1, "cs", 2, 75, 28, 1], [1, "cs", 2, 76, 29, 1], [1, "cs", 2, 76, 33, 1], [1, "cs", 2, 70, 32, 1], [1, "cs", 2, 69, 31, 1], [1, "cs", 0, 68, 31, 1], [1, "cs", 2, 67, 31, 1], [1, "cs", 2, 67, 30, 1], [1, "cs", 2, 69, 32, 1], [1, "cs", 1, 67, 32, 1], [1, "cs", 2, 68, 32, 1], [1, "cs", 2, 66, 32, 1], [1, "cs", 2, 66, 33, 1], [1, "cs", 2, 67, 33, 1], [1, "cs", 2, 70, 33, 1], [1, "cs", 2, 69, 33, 1], [1, "cs", 2, 68, 33, 1], [1, "cs", 0, 68, 34, 1], [1, "cs", 1, 66, 35, 1], [1, "cs", 2, 67, 34, 1], [1, "cs", 2, 66, 34, 1], [1, "cs", 2, 65, 35, 1], [1, "cs", 2, 64, 36, 1], [1, "cs", 2, 65, 36, 1], [1, "cs", 2, 67, 35, 1], [1, "cs", 2, 66, 36, 1], [1, "cs", 2, 69, 34, 1], [1, "cs", 2, 68, 35, 1], [1, "cs", 2, 76, 9, 1], [1, "cs", 2, 77, 9, 1], [1, "cs", 2, 77, 8, 1], [1, "cs", 2, 77, 10, 1], [1, "cs", 2, 78, 8, 1], [1, "cs", 2, 78, 9, 1], [1, "cs", 2, 78, 10, 1], [1, "cs", 2, 78, 11, 1], [1, "cs", 2, 78, 12, 1], [1, "cs", 2, 78, 13, 1], [1, "cs", 0, 79, 9, 1], [1, "cs", 1, 79, 11, 1], [1, "cs", 3, 79, 8, 1], [1, "cs", 3, 79, 10, 1], [1, "cs", 3, 79, 12, 1], [1, "cs", 3, 80, 8, 1], [1, "cs", 1, 80, 10, 1], [1, "cs", 2, 80, 9, 1], [1, "cs", 2, 80, 11, 1], [1, "cs", 2, 81, 8, 1], [1, "cs", 2, 81, 9, 1], [1, "cs", 2, 81, 10, 1], [1, "cs", 2, 78, 14, 1], [1, "cs", 2, 79, 13, 1], [1, "cs", 2, 78, 15, 1], [1, "cs", 2, 80, 12, 1], [1, "cs", 0, 79, 14, 1], [1, "cs", 0, 82, 9, 1], [1, "cs", 2, 82, 8, 1], [1, "cs", 2, 82, 10, 1], [1, "cs", 2, 81, 11, 1], [1, "cs", 3, 80, 13, 1], [1, "cs", 1, 78, 30, 1], [1, "cs", 1, 78, 34, 1], [1, "cs", 1, 78, 27, 1], [1, "cs", 0, 78, 25, 1], [1, "cs", 0, 79, 29, 1], [1, "cs", 0, 79, 32, 1], [1, "cs", 0, 79, 35, 1], [1, "cs", 2, 78, 35, 1], [1, "cs", 2, 78, 36, 1], [1, "cs", 2, 79, 34, 1], [1, "cs", 2, 78, 33, 1], [1, "cs", 2, 79, 33, 1], [1, "cs", 2, 78, 32, 1], [1, "cs", 2, 78, 31, 1], [1, "cs", 2, 79, 31, 1], [1, "cs", 2, 79, 30, 1], [1, "cs", 2, 78, 29, 1], [1, "cs", 2, 78, 28, 1], [1, "cs", 2, 79, 28, 1], [1, "cs", 2, 79, 27, 1], [1, "cs", 2, 78, 26, 1], [1, "cs", 2, 79, 26, 1], [1, "cs", 2, 78, 24, 1], [1, "cs", 2, 80, 34, 1], [1, "cs", 2, 80, 33, 1], [1, "cs", 2, 80, 31, 1], [1, "cs", 2, 80, 30, 1], [1, "cs", 2, 80, 32, 1], [1, "cs", 2, 80, 29, 1], [1, "cs", 2, 80, 28, 1], [1, "cs", 2, 80, 27, 1], [1, "cs", 0, 81, 30, 1], [1, "cs", 1, 81, 32, 1], [1, "cs", 1, 81, 28, 1], [1, "cs", 2, 81, 29, 1], [1, "cs", 2, 81, 31, 1], [1, "cs", 2, 81, 33, 1], [1, "cs", 2, 82, 30, 1], [1, "cs", 2, 82, 31, 1], [1, "cs", 2, 82, 32, 1], [1, "cs", 0, 37, 36, 1], [1, "cs", 2, 38, 36, 1], [1, "cs", 2, 37, 35, 1], [1, "cs", 2, 36, 36, 1], [1, "cs", 2, 34, 35, 1], [1, "cs", 2, 35, 35, 1], [1, "cs", 2, 36, 35, 1], [1, "cs", 0, 33, 34, 1], [1, "cs", 1, 35, 34, 1], [1, "cs", 2, 36, 34, 1], [1, "cs", 2, 34, 34, 1], [1, "cs", 2, 36, 33, 1], [1, "cs", 2, 35, 33, 1], [1, "cs", 2, 34, 33, 1], [1, "cs", 2, 33, 33, 1], [1, "cs", 2, 31, 32, 1], [1, "cs", 1, 36, 32, 1], [1, "cs", 1, 32, 32, 1], [1, "cs", 2, 35, 32, 1], [1, "cs", 2, 33, 32, 1], [1, "cs", 2, 32, 33, 1], [1, "cs", 2, 33, 31, 1], [1, "cs", 2, 34, 31, 1], [1, "cs", 2, 35, 31, 1], [1, "cs", 0, 34, 32, 1], [1, "cs", 2, 35, 30, 1], [1, "cs", 1, 39, 23, 1], [1, "cs", 3, 39, 22, 1], [1, "cs", 3, 36, 24, 1], [1, "cs", 3, 35, 24, 1], [1, "cs", 2, 34, 23, 1], [1, "cs", 2, 35, 23, 1], [1, "cs", 2, 36, 20, 1], [1, "cs", 2, 36, 21, 1], [1, "cs", 2, 35, 22, 1], [1, "cs", 2, 35, 16, 1], [1, "cs", 2, 34, 16, 1], [1, "cs", 2, 33, 16, 1], [1, "cs", 0, 34, 17, 1], [1, "cs", 0, 32, 15, 1], [1, "cs", 2, 31, 14, 1], [1, "cs", 3, 30, 13, 1], [1, "cs", 1, 33, 15, 1], [1, "cs", 1, 31, 13, 1], [1, "cs", 2, 32, 14, 1], [1, "cs", 0, 31, 8, 1], [1, "cs", 2, 32, 8, 1], [1, "cs", 2, 25, 13, 1], [1, "cs", 0, 25, 12, 1], [1, "cs", 2, 25, 11, 1], [1, "cs", 3, 25, 10, 1], [1, "cs", 0, 25, 9, 1], [1, "cs", 2, 25, 8, 1], [1, "cs", 2, 26, 8, 1], [1, "cs", 2, 27, 8, 1], [1, "cs", 2, 28, 8, 1], [1, "cs", 2, 29, 8, 1], [1, "cs", 2, 30, 8, 1], [1, "cs", 2, 26, 9, 1], [1, "cs", 2, 27, 9, 1], [1, "cs", 2, 26, 10, 1], [1, "cs", 1, 27, 10, 1], [1, "cs", 3, 28, 9, 1], [1, "cs", 3, 25, 14, 1], [1, "cs", 0, 25, 15, 1], [1, "cs", 2, 26, 15, 1], [1, "cs", 3, 27, 16, 1], [1, "cs", 0, 28, 17, 1], [1, "cs", 1, 29, 18, 1], [1, "cs", 2, 26, 16, 1], [1, "cs", 2, 25, 16, 1], [1, "cs", 2, 27, 17, 1], [1, "cs", 2, 26, 17, 1], [1, "cs", 1, 27, 18, 1], [1, "cs", 2, 28, 18, 1], [1, "cs", 2, 30, 19, 1], [1, "cs", 2, 29, 19, 1], [1, "cs", 2, 24, 14, 1], [1, "cs", 2, 24, 15, 1], [1, "cs", 0, 23, 14, 1], [1, "cs", 2, 24, 10, 1], [1, "cs", 2, 24, 11, 1], [1, "cs", 2, 24, 12, 1], [1, "cs", 2, 24, 13, 1], [1, "cs", 1, 23, 10, 1], [1, "cs", 0, 22, 8, 1], [1, "cs", 0, 22, 12, 1], [1, "cs", 1, 23, 8, 1], [1, "cs", 2, 24, 8, 1], [1, "cs", 2, 24, 9, 1], [1, "cs", 2, 23, 9, 1], [1, "cs", 2, 22, 9, 1], [1, "cs", 2, 22, 10, 1], [1, "cs", 2, 22, 11, 1], [1, "cs", 2, 23, 11, 1], [1, "cs", 2, 23, 12, 1], [1, "cs", 2, 23, 13, 1], [1, "cs", 2, 22, 13, 1], [1, "cs", 2, 21, 9, 1], [1, "cs", 2, 21, 8, 1], [1, "cs", 2, 29, 25, 1], [1, "cs", 2, 25, 24, 1], [1, "cs", 2, 26, 25, 1], [1, "cs", 2, 27, 25, 1], [1, "cs", 0, 28, 25, 1], [1, "cs", 1, 25, 23, 1], [1, "cs", 2, 26, 24, 1], [1, "cs", 0, 24, 25, 1], [1, "cs", 3, 23, 24, 1], [1, "cs", 3, 24, 24, 1], [1, "cs", 3, 25, 25, 1], [1, "cs", 3, 23, 25, 1], [1, "cs", 1, 22, 26, 1], [1, "cs", 1, 26, 26, 1], [1, "cs", 1, 29, 26, 1], [1, "cs", 2, 23, 26, 1], [1, "cs", 2, 24, 26, 1], [1, "cs", 2, 25, 26, 1], [1, "cs", 2, 27, 26, 1], [1, "cs", 2, 28, 26, 1], [1, "cs", 2, 30, 26, 1], [1, "cs", 2, 29, 27, 1], [1, "cs", 2, 28, 28, 1], [1, "cs", 1, 26, 29, 1], [1, "cs", 0, 28, 27, 1], [1, "cs", 2, 27, 28, 1], [1, "cs", 2, 27, 27, 1], [1, "cs", 2, 26, 28, 1], [1, "cs", 2, 26, 27, 1], [1, "cs", 2, 25, 28, 1], [1, "cs", 2, 25, 27, 1], [1, "cs", 2, 23, 27, 1], [1, "cs", 2, 22, 27, 1], [1, "cs", 2, 24, 27, 1], [1, "cs", 0, 24, 28, 1], [1, "cs", 0, 25, 32, 1], [1, "cs", 1, 24, 30, 1], [1, "cs", 2, 25, 31, 1], [1, "cs", 2, 25, 30, 1], [1, "cs", 2, 25, 29, 1], [1, "cs", 2, 24, 29, 1], [1, "cs", 2, 23, 29, 1], [1, "cs", 2, 26, 33, 1], [1, "cs", 0, 26, 34, 1], [1, "cs", 2, 27, 35, 1], [1, "cs", 2, 22, 28, 1], [1, "cs", 2, 23, 28, 1], [1, "cs", 2, 24, 31, 1], [1, "cs", 2, 24, 32, 1], [1, "cs", 2, 25, 33, 1], [1, "cs", 2, 26, 35, 1], [1, "cs", 2, 24, 33, 1], [1, "cs", 2, 25, 34, 1], [1, "cs", 1, 22, 29, 1], [1, "cs", 1, 24, 34, 1], [1, "cs", 0, 23, 35, 1], [1, "cs", 2, 25, 35, 1], [1, "cs", 2, 24, 35, 1], [1, "cs", 2, 23, 34, 1], [1, "cs", 2, 23, 33, 1], [1, "cs", 0, 22, 33, 1], [1, "cs", 1, 23, 32, 1], [1, "cs", 2, 22, 32, 1], [1, "cs", 2, 23, 31, 1], [1, "cs", 2, 23, 30, 1], [1, "cs", 2, 22, 30, 1], [1, "cs", 2, 22, 31, 1], [1, "cs", 1, 21, 31, 1], [1, "cs", 0, 21, 29, 1], [1, "cs", 2, 21, 30, 1], [1, "cs", 2, 24, 36, 1], [1, "cs", 2, 26, 36, 1], [1, "cs", 2, 25, 36, 1], [1, "cs", 2, 27, 36, 1], [1, "cs", 2, 28, 36, 1], [1, "d", 2, 83, 65, 1], [1, "d", 2, 16, 67, 1], [1, "g", 0, 15, 17, 1], [1, "s", 0, 18, 13, 1], [1, "s", 0, 85, 11, 1], [1, "f", 0, 41, 102, 1], [1, "f", 0, 42, 124, 1], [1, "f", 0, 64, 116, 1], [1, "f", 0, 74, 104, 1], [1, "f", 0, 70, 87, 1], [1, "f", 0, 27, 96, 1], [1, "f", 0, 22, 79, 1], [1, "f", 0, 20, 117, 1], [1, "f", 0, 30, 137, 1], [1, "f", 0, 59, 146, 1], [1, "f", 0, 52, 147, 1], [1, "f", 0, 20, 149, 1], [1, "f", 0, 36, 146, 1], [1, "f", 0, 62, 124, 1], [1, "g", 1, 34, 121, 1], [1, "g", 1, 52, 116, 1], [1, "g", 1, 78, 116, 1], [1, "g", 1, 71, 129, 1], [1, "s", 0, 53, 100, 1], [1, "s", 0, 73, 111, 1], [1, "s", 0, 77, 126, 1], [1, "s", 0, 48, 90, 1], [1, "s", 0, 19, 102, 1], [1, "s", 0, 18, 127, 1], [1, "s", 0, 35, 159, 1], [1, "s", 0, 65, 54, 1], [1, "s", 0, 44, 52, 1], [1, "s", 0, 26, 51, 1], [1, "f", 1, 56, 136, 1], [1, "f", 1, 41, 133, 1], [1, "f", 1, 80, 120, 1], [1, "f", 1, 16, 117, 1], [1, "f", 1, 13, 99, 1], [1, "f", 1, 17, 89, 1], [1, "f", 1, 90, 98, 1], [1, "f", 1, 84, 95, 1], [1, "f", 1, 16, 57, 1], [1, "f", 1, 77, 53, 1], [1, "d", 1, 48, 35, 1], [1, "de", 8, 33, 13, 0], [1, "de", 8, 30, 9, 0], [1, "de", 9, 32, 30, 0], [1, "de", 10, 30, 25, 0], [1, "de", 10, 33, 21, 0], [1, "de", 8, 31, 34, 0], [1, "de", 8, 67, 29, 0], [1, "de", 9, 70, 22, 0], [1, "de", 10, 70, 16, 0], [1, "de", 10, 75, 11, 0], [1, "de", 8, 68, 10, 0], [1, "de", 8, 75, 30, 0], [1, "de", 11, 71, 33, 0], [1, "de", 11, 72, 25, 0], [1, "de", 11, 64, 25, 0], [1, "de", 11, 52, 10, 0], [1, "de", 11, 31, 15, 0], [1, "de", 30, 29, 14, 0], [1, "de", 30, 36, 15, 0], [1, "de", 30, 34, 29, 0], [1, "de", 30, 30, 29, 0], [1, "de", 30, 71, 29, 0], [1, "de", 28, 68, 25, 0], [1, "de", 28, 75, 15, 0], [1, "de", 27, 67, 19, 0], [1, "de", 29, 72, 10, 0], [1, "de", 29, 75, 32, 0], [1, "de", 29, 32, 20, 0], [1, "fo", 1, 39, 12, 0], [1, "fo", 1, 34, 14, 0], [1, "fo", 1, 74, 28, 0], [1, "fo", 2, 74, 29, 0], [1, "fo", 2, 69, 30, 0], [1, "fo", 2, 77, 22, 0], [1, "fo", 2, 74, 21, 0], [1, "fo", 2, 76, 18, 0], [1, "fo", 1, 78, 17, 0], [1, "fo", 1, 28, 19, 0], [1, "fo", 2, 27, 24, 0], [1, "fo", 2, 24, 17, 0], [1, "fo", 2, 29, 21, 0], [1, "fo", 1, 27, 32, 0], [1, "fo", 2, 30, 33, 0], [1, "fo", 1, 29, 28, 0], [1, "fo", 2, 28, 31, 0], [1, "fo", 2, 20, 24, 0], [1, "fo", 2, 20, 26, 0], [1, "fo", 2, 23, 16, 0], [1, "fo", 2, 11, 25, 0], [1, "de", 33, 29, 22, 0], [1, "de", 34, 32, 25, 0], [1, "de", 34, 30, 18, 0], [1, "de", 33, 78, 18, 0], [1, "de", 33, 73, 35, 0], [1, "de", 36, 72, 23, 0], [1, "de", 35, 25, 18, 0], [1, "d", 1, 83, 41, 1], [1, "d", 1, 17, 40, 1], [1, "cs", 2, 224, 104, 1], [1, "cs", 0, 224, 105, 1], [1, "cs", 3, 224, 106, 1], [1, "la", 3, 216, 128, 1], [1, "la", 0, 215, 126, 1], [1, "s", 0, 216, 130, 1], [1, "s", 1, 217, 129, 1], [1, "s", 0, 218, 128, 1], [1, "s", 1, 217, 127, 1], [1, "s", 0, 217, 126, 1], [1, "s", 1, 217, 125, 1], [1, "s", 0, 216, 124, 1], [1, "s", 1, 215, 124, 1], [1, "s", 0, 214, 124, 1], [1, "s", 1, 213, 125, 1], [1, "s", 0, 213, 126, 1], [1, "plm", 2, 217, 130, 0], [1, "plm", 2, 212, 125, 0], [1, "p", 0, 214, 134, 1], [1, "s", 1, 211, 126, 1], [1, "b", 1, 45, 277, 0], [1, "b", 1, 50, 286, 0], [1, "b", 2, 51, 284, 0], [1, "b", 1, 47, 287, 0], [1, "b", 0, 39, 285, 0], [1, "b", 3, 40, 283, 0], [1, "b", 0, 52, 283, 0], [1, "b", 1, 51, 280, 0], [1, "g", 0, 45, 269, 1], [1, "p", 0, 55, 281, 1], [1, "b", 1, 5, 172, 0], [1, "b", 2, 6, 172, 0], [1, "t", 5, 6, 171, 0], [1, "t", 1, 5, 170, 0], [1, "t", 1, 5, 164, 0], [1, "t", 3, 6, 164, 0], [1, "b", 0, 6, 165, 0], [1, "t", 3, 5, 165, 0], [1, "b", 2, 6, 166, 0], [1, "t", 4, 5, 166, 0], [1, "t", 4, 6, 167, 0], [1, "t", 2, 6, 168, 0], [1, "t", 0, 6, 169, 0], [1, "t", 4, 6, 170, 0], [1, "t", 0, 5, 167, 0], [1, "t", 2, 5, 169, 0], [1, "b", 0, 5, 168, 0], [1, "s", 1, 7, 153, 1], [1, "s", 2, 7, 151, 1], [1, "de", 5, 7, 152, 0], [1, "t", 1, 5, 154, 0], [1, "b", 0, 6, 154, 0], [1, "t", 2, 6, 155, 0], [1, "b", 2, 6, 156, 0], [1, "t", 2, 5, 157, 0], [1, "t", 4, 5, 155, 0], [1, "b", 0, 6, 157, 0], [1, "t", 1, 5, 156, 0], [1, "t", 5, 6, 158, 0], [1, "b", 2, 6, 159, 0], [1, "b", 0, 6, 162, 0], [1, "t", 4, 6, 163, 0], [1, "t", 4, 6, 161, 0], [1, "b", 1, 6, 160, 0], [1, "b", 2, 5, 163, 0], [1, "b", 2, 5, 158, 0], [1, "b", 2, 5, 161, 0], [1, "t", 1, 5, 162, 0], [1, "t", 1, 5, 160, 0], [1, "b", 1, 85, 176, 0], [1, "b", 2, 83, 178, 0], [1, "s", 1, 82, 177, 1], [1, "b", 0, 76, 172, 0], [1, "b", 3, 76, 174, 0], [1, "t", 3, 73, 174, 0], [1, "t", 5, 72, 175, 0], [1, "t", 5, 87, 173, 0], [1, "de", 2, 76, 175, 0], [1, "de", 3, 77, 171, 0], [1, "de", 3, 86, 177, 0], [1, "de", 2, 71, 175, 0], [1, "s", 1, 70, 174, 1], [1, "r", 48, 174, 0], [1, "r", 49, 175, 0], [1, "r", 50, 175, 0], [1, "r", 51, 175, 0], [1, "r", 51, 174, 0], [1, "r", 50, 174, 0], [1, "r", 49, 174, 0], [1, "r", 52, 175, 0], [1, "r", 52, 176, 0], [1, "r", 51, 176, 0], [1, "r", 50, 176, 0], [1, "r", 49, 176, 0], [1, "r", 48, 175, 0], [1, "r", 47, 175, 0], [1, "r", 48, 176, 0], [1, "r", 69, 163, 0], [1, "r", 70, 163, 0], [1, "r", 71, 163, 0], [1, "r", 73, 163, 0], [1, "r", 72, 163, 0], [1, "r", 73, 164, 0], [1, "r", 72, 164, 0], [1, "r", 71, 164, 0], [1, "r", 70, 164, 0], [1, "r", 69, 164, 0], [1, "r", 68, 164, 0], [1, "r", 68, 165, 0], [1, "r", 69, 165, 0], [1, "r", 70, 165, 0], [1, "r", 71, 165, 0], [1, "r", 72, 165, 0], [1, "r", 74, 164, 0], [1, "r", 73, 165, 0], [1, "r", 72, 166, 0], [1, "r", 71, 166, 0], [1, "r", 70, 166, 0], [1, "r", 74, 165, 0], [1, "r", 24, 164, 0], [1, "r", 25, 164, 0], [1, "r", 27, 164, 0], [1, "r", 26, 164, 0], [1, "r", 28, 165, 0], [1, "r", 26, 165, 0], [1, "r", 27, 165, 0], [1, "r", 25, 165, 0], [1, "r", 24, 165, 0], [1, "r", 23, 165, 0], [1, "r", 22, 165, 0], [1, "r", 21, 165, 0], [1, "r", 21, 166, 0], [1, "r", 22, 166, 0], [1, "r", 23, 166, 0], [1, "r", 24, 166, 0], [1, "r", 25, 166, 0], [1, "r", 26, 166, 0], [1, "r", 27, 166, 0], [1, "r", 28, 166, 0], [1, "r", 28, 167, 0], [1, "r", 26, 167, 0], [1, "r", 25, 167, 0], [1, "r", 24, 167, 0], [1, "r", 23, 167, 0], [1, "r", 22, 167, 0], [1, "r", 27, 167, 0], [1, "r", 29, 166, 0], [1, "r", 29, 167, 0], [1, "r", 28, 168, 0], [1, "r", 27, 168, 0], [1, "r", 26, 168, 0], [1, "r", 25, 168, 0], [1, "r", 24, 168, 0], [1, "r", 23, 168, 0], [1, "r", 27, 169, 0], [1, "r", 26, 169, 0], [1, "r", 25, 169, 0], [1, "r", 24, 169, 0], [1, "r", 23, 169, 0], [1, "r", 22, 168, 0], [1, "r", 21, 167, 0], [1, "s", 1, 52, 174, 1], [1, "t", 3, 50, 177, 0], [1, "t", 4, 49, 177, 0], [1, "b", 0, 47, 174, 0], [1, "b", 0, 69, 166, 0], [1, "t", 2, 68, 166, 0], [1, "t", 5, 74, 163, 0], [1, "t", 1, 73, 162, 0], [1, "s", 0, 73, 166, 1], [1, "s", 2, 76, 165, 1], [1, "g", 2, 59, 175, 1], [1, "p", 0, 78, 168, 1], [1, "p", 0, 61, 162, 1], [1, "p", 0, 42, 170, 1], [1, "p", 0, 20, 174, 1], [1, "p", 0, 16, 160, 1], [1, "b", 1, 23, 164, 0], [1, "b", 1, 28, 169, 0], [1, "b", 2, 29, 168, 0], [1, "b", 2, 16, 170, 0], [1, "t", 1, 15, 171, 0], [1, "t", 5, 13, 175, 0], [1, "t", 5, 19, 166, 0], [1, "t", 5, 26, 163, 0], [1, "s", 1, 29, 165, 1], [1, "t", 5, 11, 167, 0], [1, "t", 0, 29, 176, 0], [1, "b", 2, 30, 175, 0], [1, "t", 2, 24, 177, 0], [1, "b", 1, 37, 174, 0], [1, "b", 0, 35, 172, 0], [1, "b", 3, 37, 170, 0], [1, "t", 4, 38, 169, 0], [1, "t", 4, 34, 173, 0], [1, "t", 5, 38, 175, 0], [1, "b", 2, 39, 173, 0], [1, "t", 3, 37, 176, 0], [1, "t", 4, 30, 168, 0], [1, "s", 2, 35, 176, 1], [1, "s", 1, 41, 175, 1], [1, "b", 2, 53, 176, 0], [1, "t", 5, 55, 173, 0], [1, "t", 5, 45, 170, 0], [1, "b", 1, 53, 162, 0], [1, "b", 0, 50, 164, 0], [1, "t", 2, 54, 163, 0], [1, "t", 3, 49, 165, 0], [1, "t", 4, 48, 160, 0], [1, "t", 4, 57, 164, 0], [1, "t", 4, 66, 162, 0], [1, "b", 1, 86, 161, 0], [1, "b", 2, 81, 163, 0], [1, "t", 3, 85, 162, 0], [1, "t", 5, 81, 162, 0], [1, "t", 5, 88, 163, 0], [1, "t", 1, 84, 166, 0], [1, "t", 5, 72, 160, 0], [1, "t", 5, 70, 170, 0], [1, "s", 1, 57, 162, 1], [1, "b", 1, 39, 161, 0], [1, "b", 0, 34, 164, 0], [1, "b", 2, 54, 164, 0], [1, "t", 1, 59, 169, 0], [1, "t", 3, 60, 170, 0], [1, "t", 4, 63, 169, 0], [1, "t", 4, 63, 174, 0], [1, "t", 1, 62, 175, 0], [1, "t", 5, 40, 162, 0], [1, "t", 1, 63, 180, 0], [1, "t", 2, 64, 179, 0], [1, "t", 2, 35, 165, 0], [1, "s", 1, 63, 173, 1], [1, "s", 2, 40, 165, 1], [1, "b", 0, 46, 169, 0], [1, "de", 22, 74, 168, 0], [1, "de", 22, 86, 168, 0], [1, "de", 22, 83, 175, 0], [1, "de", 22, 78, 175, 0], [1, "de", 19, 72, 176, 0], [1, "de", 19, 68, 168, 0], [1, "de", 19, 65, 163, 0], [1, "de", 19, 75, 162, 0], [1, "de", 19, 80, 162, 0], [1, "de", 19, 88, 159, 0], [1, "de", 19, 87, 164, 0], [1, "de", 19, 61, 177, 0], [1, "de", 19, 59, 172, 0], [1, "de", 19, 59, 167, 0], [1, "de", 19, 53, 165, 0], [1, "de", 19, 56, 163, 0], [1, "de", 19, 51, 161, 0], [1, "de", 19, 48, 167, 0], [1, "de", 19, 47, 170, 0], [1, "de", 19, 41, 163, 0], [1, "de", 19, 37, 161, 0], [1, "de", 19, 36, 166, 0], [1, "de", 19, 36, 171, 0], [1, "de", 19, 34, 174, 0], [1, "de", 19, 40, 172, 0], [1, "de", 19, 38, 177, 0], [1, "de", 19, 42, 176, 0], [1, "de", 19, 53, 178, 0], [1, "de", 19, 53, 172, 0], [1, "de", 19, 64, 181, 0], [1, "de", 19, 64, 175, 0], [1, "de", 19, 79, 172, 0], [1, "de", 19, 30, 170, 0], [1, "de", 19, 17, 168, 0], [1, "de", 19, 14, 173, 0], [1, "de", 19, 12, 162, 0], [1, "de", 19, 9, 167, 0], [1, "de", 19, 20, 161, 0], [1, "de", 19, 27, 162, 0], [1, "de", 19, 83, 195, 0], [1, "de", 2, 85, 163, 0], [1, "de", 2, 80, 164, 0], [1, "de", 2, 84, 169, 0], [1, "de", 2, 55, 165, 0], [1, "de", 3, 46, 163, 0], [1, "de", 2, 66, 169, 0], [1, "de", 0, 63, 175, 0], [1, "de", 0, 34, 164, 0], [1, "de", 0, 18, 160, 0], [1, "de", 2, 40, 160, 0], [1, "de", 2, 53, 160, 0], [1, "de", 2, 14, 170, 0], [1, "de", 2, 19, 175, 0], [1, "de", 2, 23, 176, 0], [1, "de", 5, 60, 147, 0], [1, "de", 33, 59, 160, 0], [1, "de", 33, 85, 157, 0], [1, "de", 33, 29, 143, 0], [1, "de", 33, 62, 140, 0], [1, "de", 33, 43, 127, 0], [1, "de", 33, 18, 129, 0], [1, "de", 33, 50, 134, 0], [1, "de", 33, 79, 127, 0], [1, "de", 33, 89, 139, 0], [1, "b", 1, 44, 156, 0], [1, "t", 2, 45, 157, 0], [1, "b", 0, 75, 156, 0], [1, "t", 3, 76, 157, 0], [1, "t", 5, 62, 157, 0], [1, "t", 5, 79, 156, 0], [1, "t", 5, 41, 156, 0], [1, "b", 1, 28, 156, 0], [1, "t", 2, 27, 157, 0], [1, "t", 4, 21, 156, 0], [1, "t", 4, 56, 159, 0], [1, "f", 1, 94, 153, 1], [1, "f", 2, 93, 153, 1], [1, "f", 2, 99, 153, 1], [1, "f", 1, 98, 153, 1], [1, "f", 0, 97, 153, 1], [1, "f", 1, 96, 153, 1], [1, "s", 1, 7, 149, 1], [1, "de", 4, 7, 150, 0], [1, "b", 3, 43, 281, 0], [1, "de", 50, 24, 39, 0], [1, "de", 50, 21, 39, 0], [1, "de", 50, 22, 43, 0], [1, "de", 50, 15, 34, 0], [1, "de", 50, 18, 26, 0], [1, "de", 50, 44, 42, 0], [1, "de", 50, 57, 39, 0], [1, "de", 50, 62, 43, 0], [1, "de", 50, 77, 44, 0], [1, "de", 50, 71, 41, 0], [1, "de", 50, 55, 39, 0], [1, "de", 50, 22, 39, 0], [1, "de", 50, 20, 41, 0], [1, "de", 50, 18, 21, 0], [1, "de", 50, 15, 21, 0], [1, "de", 50, 18, 19, 0], [1, "de", 50, 17, 17, 0], [1, "de", 50, 18, 10, 0], [1, "de", 50, 18, 9, 0], [1, "de", 50, 52, 41, 0], [1, "de", 50, 82, 39, 0], [1, "de", 50, 86, 38, 0], [1, "de", 50, 84, 31, 0], [1, "de", 50, 86, 30, 0], [1, "de", 50, 84, 26, 0], [1, "de", 50, 86, 23, 0], [1, "de", 50, 86, 14, 0], [1, "de", 50, 29, 42, 0], [1, "de", 9, 74, 37, 0], [1, "de", 9, 76, 22, 0], [1, "de", 10, 79, 24, 0], [1, "de", 11, 77, 17, 0], [1, "de", 36, 81, 25, 0], [1, "de", 36, 80, 36, 0], [1, "de", 36, 21, 36, 0], [1, "de", 28, 23, 22, 0], [1, "de", 28, 27, 31, 0], [1, "de", 28, 69, 36, 0], [1, "de", 28, 80, 20, 0], [1, "de", 51, 24, 155, 0], [1, "de", 51, 7, 154, 0], [1, "de", 51, 11, 154, 0], [1, "de", 51, 12, 156, 0], [1, "de", 51, 16, 154, 0], [1, "de", 51, 20, 154, 0], [1, "de", 51, 23, 154, 0], [1, "de", 51, 18, 157, 0], [1, "de", 51, 31, 154, 0], [1, "de", 51, 32, 157, 0], [1, "de", 51, 86, 154, 0], [1, "de", 51, 88, 156, 0], [1, "de", 51, 82, 154, 0], [1, "de", 51, 80, 154, 0], [1, "de", 51, 77, 154, 0], [1, "de", 51, 74, 154, 0], [1, "de", 51, 71, 154, 0], [1, "de", 51, 67, 154, 0], [1, "de", 51, 60, 154, 0], [1, "de", 51, 57, 154, 0], [1, "de", 51, 65, 154, 0], [1, "de", 51, 68, 156, 0], [1, "de", 51, 59, 156, 0], [1, "de", 51, 55, 154, 0], [1, "de", 51, 54, 154, 0], [1, "de", 51, 52, 154, 0], [1, "de", 51, 55, 155, 0], [1, "de", 51, 54, 157, 0], [1, "de", 51, 49, 154, 0], [1, "de", 51, 46, 154, 0], [1, "de", 51, 44, 154, 0], [1, "de", 51, 43, 154, 0], [1, "de", 51, 41, 154, 0], [1, "de", 51, 38, 154, 0], [1, "de", 51, 39, 156, 0], [1, "de", 51, 34, 154, 0], [1, "de", 5, 19, 142, 0], [1, "de", 5, 37, 147, 0], [1, "de", 7, 53, 147, 0], [1, "de", 6, 69, 150, 0], [1, "de", 4, 94, 148, 0], [1, "de", 4, 66, 147, 0], [1, "de", 4, 10, 145, 0], [1, "de", 4, 28, 137, 0], [1, "de", 4, 15, 137, 0], [1, "de", 4, 48, 134, 0], [1, "de", 5, 67, 135, 0], [1, "de", 34, 84, 155, 0], [1, "de", 35, 70, 156, 0], [1, "de", 35, 51, 156, 0], [1, "de", 35, 56, 157, 0], [1, "de", 35, 65, 159, 0], [1, "de", 35, 23, 156, 0], [1, "de", 35, 15, 155, 0], [1, "de", 35, 8, 155, 0], [1, "de", 33, 13, 155, 0], [1, "de", 33, 33, 158, 0], [1, "de", 36, 78, 155, 0], [1, "de", 36, 87, 157, 0], [1, "fo", 1, 73, 36, 0], [1, "fo", 1, 80, 24, 0], [1, "fo", 2, 67, 36, 0], [1, "fo", 2, 45, 36, 0], [1, "fo", 2, 53, 34, 0], [1, "fo", 1, 51, 35, 0], [1, "fo", 1, 58, 35, 0], [1, "fo", 1, 33, 35, 0], [1, "fo", 1, 31, 33, 0], [1, "fo", 2, 29, 36, 0], [1, "fo", 2, 56, 36, 0], [1, "fo", 2, 60, 37, 0], [1, "fo", 2, 45, 32, 0], [1, "fo", 2, 22, 25, 0], [1, "fo", 2, 21, 35, 0], [1, "de", 52, 90, 208, 0], [1, "de", 18, 94, 250, 0], [1, "de", 17, 95, 253, 0], [1, "cs", 0, 140, 5, 1], [1, "cs", 2, 139, 5, 1], [1, "cs", 2, 138, 5, 1], [1, "cs", 2, 138, 6, 1], [1, "cs", 2, 139, 6, 1], [1, "cs", 2, 141, 6, 1], [1, "cs", 2, 140, 6, 1], [1, "la", 3, 143, 7, 1], [1, "la", 3, 139, 7, 1], [1, "cs", 0, 137, 7, 1], [1, "cs", 1, 138, 8, 1], [1, "cs", 2, 137, 6, 1], [1, "cs", 2, 137, 8, 1], [1, "cs", 2, 136, 7, 1], [1, "cs", 2, 138, 9, 1], [1, "cs", 3, 139, 9, 1], [1, "cs", 3, 136, 8, 1], [1, "cs", 3, 137, 9, 1], [1, "de", 53, 92, 165, 0], [1, "de", 53, 92, 180, 0], [1, "de", 53, 92, 188, 0], [1, "de", 54, 92, 153, 0], [1, "de", 54, 91, 153, 0], [1, "de", 54, 90, 153, 0], [1, "de", 54, 89, 153, 0], [1, "de", 54, 88, 153, 0], [1, "de", 54, 87, 153, 0], [1, "de", 54, 86, 153, 0], [1, "de", 54, 85, 153, 0], [1, "de", 54, 84, 153, 0], [1, "de", 54, 83, 153, 0], [1, "de", 54, 82, 153, 0], [1, "de", 54, 81, 153, 0], [1, "de", 54, 80, 153, 0], [1, "de", 54, 79, 153, 0], [1, "de", 54, 78, 153, 0], [1, "de", 54, 77, 153, 0], [1, "de", 54, 76, 153, 0], [1, "de", 54, 75, 153, 0], [1, "de", 54, 74, 153, 0], [1, "de", 54, 73, 153, 0], [1, "de", 54, 72, 153, 0], [1, "de", 54, 70, 153, 0], [1, "de", 54, 71, 153, 0], [1, "de", 54, 69, 153, 0], [1, "de", 54, 68, 153, 0], [1, "de", 54, 67, 153, 0], [1, "de", 54, 66, 153, 0], [1, "de", 54, 65, 153, 0], [1, "de", 54, 64, 153, 0], [1, "de", 54, 63, 153, 0], [1, "de", 54, 61, 153, 0], [1, "de", 54, 62, 153, 0], [1, "de", 54, 60, 153, 0], [1, "de", 54, 59, 153, 0], [1, "de", 54, 57, 153, 0], [1, "de", 54, 58, 153, 0], [1, "de", 54, 56, 153, 0], [1, "de", 54, 55, 153, 0], [1, "de", 54, 54, 153, 0], [1, "de", 54, 53, 153, 0], [1, "de", 54, 52, 153, 0], [1, "de", 54, 51, 153, 0], [1, "de", 54, 50, 153, 0], [1, "de", 54, 49, 153, 0], [1, "de", 54, 48, 153, 0], [1, "de", 54, 47, 153, 0], [1, "de", 54, 46, 153, 0], [1, "de", 54, 45, 153, 0], [1, "de", 54, 44, 153, 0], [1, "de", 54, 43, 153, 0], [1, "de", 54, 42, 153, 0], [1, "de", 54, 41, 153, 0], [1, "de", 54, 40, 153, 0], [1, "de", 54, 39, 153, 0], [1, "de", 54, 37, 153, 0], [1, "de", 54, 38, 153, 0], [1, "de", 54, 36, 153, 0], [1, "de", 54, 35, 153, 0], [1, "de", 54, 34, 153, 0], [1, "de", 54, 33, 153, 0], [1, "de", 54, 32, 153, 0], [1, "de", 54, 31, 153, 0], [1, "de", 54, 30, 153, 0], [1, "de", 54, 29, 153, 0], [1, "de", 54, 28, 153, 0], [1, "de", 54, 27, 153, 0], [1, "de", 54, 26, 153, 0], [1, "de", 54, 25, 153, 0], [1, "de", 54, 24, 153, 0], [1, "de", 54, 23, 153, 0], [1, "de", 54, 22, 153, 0], [1, "de", 54, 21, 153, 0], [1, "de", 54, 20, 153, 0], [1, "de", 54, 19, 153, 0], [1, "de", 54, 18, 153, 0], [1, "de", 54, 17, 153, 0], [1, "de", 54, 16, 153, 0], [1, "de", 54, 15, 153, 0], [1, "de", 54, 14, 153, 0], [1, "de", 54, 13, 153, 0], [1, "de", 54, 12, 153, 0], [1, "de", 54, 11, 153, 0], [1, "de", 54, 10, 153, 0], [1, "de", 54, 8, 153, 0], [1, "de", 54, 9, 153, 0], [1, "de", 55, 83, 8, 0], [1, "de", 55, 83, 9, 0], [1, "de", 55, 83, 10, 0], [1, "de", 55, 83, 11, 0], [1, "de", 55, 83, 12, 0], [1, "de", 55, 83, 13, 0], [1, "de", 55, 83, 14, 0], [1, "de", 55, 83, 15, 0], [1, "de", 55, 83, 16, 0], [1, "de", 55, 83, 17, 0], [1, "de", 55, 83, 19, 0], [1, "de", 55, 83, 18, 0], [1, "de", 55, 83, 20, 0], [1, "de", 55, 83, 21, 0], [1, "de", 55, 83, 22, 0], [1, "de", 55, 83, 23, 0], [1, "de", 55, 83, 24, 0], [1, "de", 55, 83, 25, 0], [1, "de", 55, 83, 26, 0], [1, "de", 55, 83, 27, 0], [1, "de", 55, 83, 28, 0], [1, "de", 55, 83, 29, 0], [1, "de", 55, 83, 30, 0], [1, "de", 55, 83, 31, 0], [1, "de", 55, 83, 32, 0], [1, "de", 55, 83, 33, 0], [1, "de", 55, 83, 34, 0], [1, "de", 55, 83, 36, 0], [1, "de", 55, 83, 35, 0], [1, "de", 55, 83, 37, 0], [1, "de", 55, 83, 38, 0], [1, "de", 55, 81, 38, 0], [1, "de", 55, 82, 38, 0], [1, "de", 55, 80, 38, 0], [1, "de", 55, 79, 38, 0], [1, "de", 55, 78, 38, 0], [1, "de", 55, 77, 38, 0], [1, "de", 55, 76, 38, 0], [1, "de", 55, 75, 38, 0], [1, "de", 55, 73, 38, 0], [1, "de", 55, 74, 38, 0], [1, "de", 55, 72, 38, 0], [1, "de", 55, 71, 38, 0], [1, "de", 55, 70, 38, 0], [1, "de", 55, 68, 38, 0], [1, "de", 55, 69, 38, 0], [1, "de", 55, 67, 38, 0], [1, "de", 55, 66, 38, 0], [1, "de", 55, 65, 38, 0], [1, "de", 55, 64, 38, 0], [1, "de", 55, 63, 38, 0], [1, "de", 55, 62, 38, 0], [1, "de", 55, 60, 38, 0], [1, "de", 55, 61, 38, 0], [1, "de", 55, 59, 38, 0], [1, "de", 55, 57, 38, 0], [1, "de", 55, 58, 38, 0], [1, "de", 55, 56, 38, 0], [1, "de", 55, 55, 38, 0], [1, "de", 55, 54, 38, 0], [1, "de", 55, 53, 38, 0], [1, "de", 55, 52, 38, 0], [1, "de", 55, 51, 38, 0], [1, "de", 55, 49, 38, 0], [1, "de", 55, 50, 38, 0], [1, "de", 55, 48, 38, 0], [1, "de", 55, 47, 38, 0], [1, "de", 55, 46, 38, 0], [1, "de", 55, 45, 38, 0], [1, "de", 55, 44, 38, 0], [1, "de", 55, 43, 38, 0], [1, "de", 55, 42, 38, 0], [1, "de", 55, 41, 38, 0], [1, "de", 55, 40, 38, 0], [1, "de", 55, 39, 38, 0], [1, "de", 55, 38, 38, 0], [1, "de", 55, 37, 38, 0], [1, "de", 55, 36, 38, 0], [1, "de", 55, 34, 38, 0], [1, "de", 55, 35, 38, 0], [1, "de", 55, 33, 38, 0], [1, "de", 55, 31, 38, 0], [1, "de", 55, 32, 38, 0], [1, "de", 55, 30, 38, 0], [1, "de", 55, 29, 38, 0], [1, "de", 55, 28, 38, 0], [1, "de", 55, 27, 38, 0], [1, "de", 55, 26, 38, 0], [1, "de", 55, 25, 38, 0], [1, "de", 55, 24, 38, 0], [1, "de", 55, 23, 38, 0], [1, "de", 55, 21, 38, 0], [1, "de", 55, 22, 38, 0], [1, "de", 55, 20, 38, 0], [1, "de", 55, 19, 38, 0], [1, "de", 55, 19, 37, 0], [1, "de", 55, 19, 36, 0], [1, "de", 55, 19, 35, 0], [1, "de", 55, 19, 34, 0], [1, "de", 55, 19, 33, 0], [1, "de", 55, 19, 32, 0], [1, "de", 55, 19, 31, 0], [1, "de", 55, 19, 30, 0], [1, "de", 55, 19, 28, 0], [1, "de", 55, 19, 29, 0], [1, "de", 55, 19, 27, 0], [1, "de", 55, 19, 26, 0], [1, "de", 55, 19, 25, 0], [1, "de", 55, 19, 24, 0], [1, "de", 55, 19, 23, 0], [1, "de", 55, 19, 22, 0], [1, "de", 55, 19, 21, 0], [1, "de", 55, 19, 20, 0], [1, "de", 55, 19, 18, 0], [1, "de", 55, 19, 19, 0], [1, "de", 55, 19, 16, 0], [1, "de", 55, 19, 17, 0], [1, "de", 55, 19, 15, 0], [1, "de", 55, 19, 14, 0], [1, "de", 55, 19, 13, 0], [1, "de", 55, 19, 12, 0], [1, "de", 55, 19, 11, 0], [1, "de", 55, 19, 10, 0], [1, "de", 55, 19, 9, 0], [1, "de", 55, 19, 8, 0], [1, "de", 55, 84, 35, 0], [1, "de", 55, 84, 32, 0], [1, "de", 55, 84, 25, 0], [1, "de", 50, 84, 24, 0], [1, "de", 55, 84, 20, 0], [1, "de", 55, 84, 17, 0], [1, "de", 55, 84, 16, 0], [1, "de", 50, 84, 15, 0], [1, "de", 55, 84, 8, 0], [1, "de", 55, 84, 9, 0], [1, "de", 50, 85, 11, 0], [1, "de", 55, 81, 39, 0], [1, "de", 50, 83, 40, 0], [1, "de", 55, 72, 39, 0], [1, "de", 55, 74, 39, 0], [1, "de", 55, 66, 39, 0], [1, "de", 55, 65, 39, 0], [1, "de", 50, 67, 41, 0], [1, "de", 55, 56, 39, 0], [1, "de", 55, 58, 39, 0], [1, "de", 55, 50, 39, 0], [1, "de", 50, 49, 39, 0], [1, "de", 55, 44, 39, 0], [1, "de", 55, 42, 39, 0], [1, "de", 50, 43, 39, 0], [1, "de", 50, 41, 39, 0], [1, "de", 50, 37, 39, 0], [1, "de", 55, 36, 39, 0], [1, "de", 55, 32, 39, 0], [1, "de", 50, 31, 39, 0], [1, "de", 55, 23, 39, 0], [1, "de", 55, 18, 37, 0], [1, "de", 50, 18, 36, 0], [1, "de", 55, 18, 35, 0], [1, "de", 50, 18, 34, 0], [1, "de", 55, 18, 31, 0], [1, "de", 50, 18, 30, 0], [1, "de", 55, 18, 25, 0], [1, "de", 50, 18, 24, 0], [1, "de", 55, 18, 20, 0], [1, "de", 55, 18, 14, 0], [1, "de", 50, 18, 15, 0], [1, "de", 55, 18, 8, 0], [1, "de", 54, 90, 154, 0], [1, "de", 51, 89, 154, 0], [1, "de", 54, 85, 154, 0], [1, "de", 54, 81, 154, 0], [1, "de", 54, 76, 154, 0], [1, "de", 54, 70, 154, 0], [1, "de", 54, 66, 154, 0], [1, "de", 54, 61, 154, 0], [1, "de", 54, 56, 154, 0], [1, "de", 54, 53, 154, 0], [1, "de", 54, 45, 154, 0], [1, "de", 54, 42, 154, 0], [1, "de", 54, 37, 154, 0], [1, "de", 54, 30, 154, 0], [1, "de", 54, 25, 154, 0], [1, "de", 54, 17, 154, 0], [1, "de", 54, 10, 154, 0], [1, "de", 54, 8, 154, 0], [1, "de", 55, 20, 9, 0], [1, "de", 53, 93, 154, 0], [1, "de", 53, 93, 156, 0], [1, "de", 53, 93, 158, 0], [1, "de", 52, 91, 157, 0], [1, "de", 53, 93, 159, 0], [1, "de", 53, 93, 161, 0], [1, "de", 53, 93, 162, 0], [1, "de", 53, 93, 163, 0], [1, "de", 53, 93, 164, 0], [1, "de", 53, 93, 165, 0], [1, "de", 53, 93, 166, 0], [1, "de", 53, 93, 167, 0], [1, "de", 52, 91, 167, 0], [1, "de", 53, 93, 169, 0], [1, "de", 53, 93, 168, 0], [1, "de", 53, 93, 170, 0], [1, "de", 53, 93, 171, 0], [1, "de", 53, 93, 173, 0], [1, "de", 53, 93, 176, 0], [1, "de", 53, 93, 175, 0], [1, "de", 53, 92, 169, 0], [1, "de", 53, 93, 178, 0], [1, "de", 53, 93, 179, 0], [1, "de", 53, 93, 180, 0], [1, "de", 53, 93, 181, 0], [1, "de", 53, 93, 183, 0], [1, "de", 53, 93, 184, 0], [1, "de", 53, 93, 186, 0], [1, "de", 18, 95, 185, 0], [1, "de", 53, 93, 187, 0], [1, "de", 53, 93, 188, 0], [1, "de", 52, 91, 186, 0], [1, "de", 53, 93, 190, 0], [1, "de", 53, 93, 192, 0], [1, "de", 53, 93, 195, 0], [1, "de", 53, 93, 194, 0], [1, "de", 52, 91, 196, 0], [1, "de", 53, 93, 197, 0], [1, "de", 53, 93, 200, 0], [1, "de", 53, 93, 198, 0], [1, "de", 53, 93, 201, 0], [1, "de", 53, 93, 202, 0], [1, "de", 53, 93, 203, 0], [1, "de", 53, 93, 204, 0], [1, "de", 53, 93, 206, 0], [1, "de", 53, 93, 205, 0], [1, "de", 53, 93, 207, 0], [1, "de", 53, 93, 209, 0], [1, "de", 53, 93, 210, 0], [1, "de", 53, 93, 212, 0], [1, "de", 52, 91, 204, 0], [1, "de", 53, 93, 213, 0], [1, "de", 53, 93, 214, 0], [1, "de", 53, 93, 215, 0], [1, "de", 53, 93, 216, 0], [1, "de", 53, 93, 217, 0], [1, "de", 53, 93, 218, 0], [1, "de", 53, 93, 219, 0], [1, "de", 53, 93, 220, 0], [1, "de", 52, 92, 213, 0], [1, "de", 52, 92, 206, 0], [1, "de", 52, 92, 202, 0], [1, "de", 53, 92, 201, 0], [1, "de", 52, 92, 194, 0], [1, "de", 52, 92, 178, 0], [1, "de", 52, 92, 171, 0], [1, "de", 53, 93, 221, 0], [1, "de", 53, 93, 222, 0], [1, "de", 53, 93, 223, 0], [1, "de", 53, 93, 225, 0], [1, "de", 53, 93, 228, 0], [1, "de", 53, 93, 227, 0], [1, "de", 52, 92, 217, 0], [1, "de", 53, 92, 218, 0], [1, "de", 52, 92, 221, 0], [1, "de", 52, 92, 225, 0], [1, "de", 52, 93, 226, 0], [1, "de", 52, 93, 224, 0], [1, "de", 52, 93, 208, 0], [1, "de", 52, 93, 211, 0], [1, "de", 52, 93, 196, 0], [1, "de", 52, 93, 199, 0], [1, "de", 52, 93, 189, 0], [1, "de", 52, 93, 191, 0], [1, "de", 52, 93, 193, 0], [1, "de", 52, 93, 182, 0], [1, "de", 52, 93, 185, 0], [1, "de", 52, 93, 172, 0], [1, "de", 52, 93, 174, 0], [1, "de", 52, 93, 177, 0], [1, "de", 52, 93, 155, 0], [1, "de", 52, 93, 157, 0], [1, "de", 52, 93, 160, 0], [1, "de", 52, 92, 162, 0], [1, "de", 53, 93, 229, 0], [1, "de", 53, 93, 231, 0], [1, "de", 53, 93, 232, 0], [1, "de", 53, 93, 234, 0], [1, "de", 52, 93, 230, 0], [1, "de", 52, 92, 228, 0], [1, "de", 53, 93, 235, 0], [1, "de", 53, 93, 236, 0], [1, "de", 53, 93, 237, 0], [1, "de", 53, 93, 239, 0], [1, "de", 53, 93, 240, 0], [1, "de", 52, 93, 238, 0], [1, "de", 53, 93, 241, 0], [1, "de", 52, 93, 242, 0], [1, "de", 52, 93, 243, 0], [1, "de", 53, 93, 244, 0], [1, "de", 53, 93, 246, 0], [1, "de", 53, 93, 245, 0], [1, "de", 52, 93, 247, 0], [1, "de", 53, 93, 248, 0], [1, "de", 52, 92, 235, 0], [1, "de", 52, 92, 245, 0], [1, "de", 52, 93, 249, 0], [1, "de", 53, 93, 250, 0], [1, "de", 53, 93, 251, 0], [1, "de", 53, 93, 252, 0], [1, "de", 53, 93, 254, 0], [1, "de", 52, 93, 253, 0], [1, "de", 52, 93, 255, 0], [1, "de", 53, 93, 257, 0], [1, "de", 53, 93, 256, 0], [1, "de", 52, 93, 258, 0], [1, "de", 53, 93, 259, 0], [1, "de", 52, 93, 260, 0], [1, "de", 53, 93, 263, 0], [1, "de", 53, 93, 264, 0], [1, "de", 53, 93, 265, 0], [1, "de", 52, 93, 266, 0], [1, "de", 53, 93, 267, 0], [1, "de", 52, 93, 268, 0], [1, "de", 52, 93, 269, 0], [1, "de", 53, 93, 276, 0], [1, "de", 53, 93, 277, 0], [1, "de", 52, 93, 278, 0], [1, "de", 53, 93, 279, 0], [1, "de", 52, 93, 280, 0], [1, "de", 52, 93, 283, 0], [1, "de", 53, 93, 284, 0], [1, "de", 53, 93, 285, 0], [1, "de", 53, 93, 286, 0], [1, "de", 52, 93, 287, 0], [1, "de", 53, 93, 288, 0], [1, "de", 53, 93, 289, 0], [1, "de", 52, 93, 290, 0], [1, "de", 52, 93, 291, 0], [1, "de", 53, 93, 292, 0], [1, "de", 52, 93, 293, 0], [1, "de", 53, 93, 294, 0], [1, "de", 52, 93, 295, 0], [1, "de", 52, 93, 296, 0], [1, "de", 53, 93, 297, 0], [1, "de", 53, 93, 298, 0], [1, "de", 52, 93, 299, 0], [1, "de", 53, 93, 300, 0], [1, "de", 52, 92, 298, 0], [1, "de", 52, 92, 293, 0], [1, "r", 92, 262, 0], [1, "r", 93, 262, 0], [1, "de", 52, 93, 261, 0], [1, "cs", 0, 223, 104, 1], [1, "cs", 2, 223, 105, 1], [1, "cs", 2, 223, 102, 1], [1, "cs", 2, 223, 103, 1], [1, "la", 3, 141, 8, 1], [1, "cs", 2, 140, 9, 1], [1, "la", 4, 142, 9, 1], [1, "de", 4, 81, 149, 0], [1, "f", 0, 83, 148, 1], [1, "f", 1, 82, 149, 1], [1, "de", 34, 81, 156, 0], [1, "de", 51, 17, 9, 0], [1, "de", 54, 16, 9, 0], [1, "de", 54, 15, 9, 0], [1, "cs", 3, 223, 106, 1], [1, "p", 0, 119, 279, 1], [1, "p", 0, 109, 242, 1], [1, "cs", 1, 29, 9, 1], [1, "cs", 2, 30, 9, 1], [1, "cs", 2, 31, 9, 1], [1, "cs", 2, 32, 9, 1], [1, "cs", 2, 33, 9, 1], [1, "cs", 2, 69, 9, 1], [1, "cs", 2, 71, 9, 1], [1, "cs", 2, 70, 9, 1], [1, "cs", 1, 72, 9, 1], [1, "cs", 2, 73, 9, 1], [1, "de", 10, 31, 10, 0], [1, "de", 10, 29, 10, 0], [1, "de", 10, 44, 10, 0], [1, "de", 4, 87, 10, 0], [1, "de", 4, 86, 10, 0], [1, "de", 5, 87, 9, 0], [1, "de", 5, 13, 10, 0], [1, "de", 4, 14, 11, 0], [1, "de", 4, 16, 10, 0], [1, "de", 4, 17, 10, 0], [1, "cs", 2, 146, 9, 1], [1, "cs", 2, 148, 9, 1], [1, "cs", 2, 150, 9, 1], [1, "cs", 2, 153, 9, 1], [1, "cs", 2, 155, 9, 1], [1, "cs", 1, 149, 9, 1], [1, "cs", 1, 154, 9, 1], [1, "cs", 3, 147, 9, 1], [1, "cs", 3, 151, 9, 1], [1, "cs", 3, 152, 9, 1], [1, "cs", 3, 156, 9, 1], [1, "cs", 3, 157, 9, 1], [1, "cs", 3, 158, 9, 1], [1, "cs", 3, 159, 9, 1], [1, "cs", 3, 160, 9, 1], [1, "cs", 0, 161, 9, 1], [1, "cs", 2, 162, 9, 1], [1, "cs", 2, 163, 9, 1], [1, "cs", 1, 164, 9, 1], [1, "cs", 2, 165, 9, 1], [1, "cs", 3, 166, 9, 1], [1, "cs", 3, 168, 9, 1], [1, "cs", 3, 170, 9, 1], [1, "cs", 1, 169, 9, 1], [1, "cs", 2, 167, 9, 1], [1, "cs", 2, 171, 9, 1], [1, "cs", 2, 173, 9, 1], [1, "cs", 2, 172, 9, 1], [1, "cs", 2, 174, 9, 1], [1, "cs", 1, 175, 9, 1], [1, "cs", 3, 176, 9, 1], [1, "cs", 3, 178, 9, 1], [1, "cs", 3, 179, 9, 1], [1, "cs", 0, 180, 9, 1], [1, "cs", 2, 177, 9, 1], [1, "cs", 2, 182, 9, 1], [1, "cs", 2, 181, 9, 1], [1, "cs", 2, 183, 9, 1], [1, "cs", 2, 184, 9, 1], [1, "cs", 2, 185, 9, 1], [1, "cs", 2, 186, 9, 1], [1, "cs", 1, 187, 9, 1], [1, "cs", 2, 188, 9, 1], [1, "cs", 3, 189, 9, 1], [1, "cs", 3, 190, 9, 1], [1, "cs", 3, 191, 9, 1], [1, "cs", 2, 192, 9, 1], [1, "cs", 0, 193, 9, 1], [1, "cs", 2, 194, 9, 1], [1, "cs", 2, 196, 9, 1], [1, "cs", 2, 198, 9, 1], [1, "cs", 2, 200, 9, 1], [1, "cs", 3, 195, 9, 1], [1, "cs", 3, 197, 9, 1], [1, "cs", 3, 199, 9, 1], [1, "cs", 0, 201, 9, 1], [1, "cs", 2, 202, 9, 1], [1, "cs", 2, 203, 9, 1], [1, "cs", 3, 208, 9, 1], [1, "cs", 3, 207, 9, 1], [1, "cs", 3, 206, 9, 1], [1, "cs", 3, 205, 9, 1], [1, "cs", 3, 204, 9, 1], [1, "cs", 3, 214, 9, 1], [1, "cs", 3, 215, 9, 1], [1, "cs", 3, 216, 9, 1], [1, "cs", 3, 217, 9, 1], [1, "cs", 3, 218, 9, 1], [1, "b", 0, 5, 159, 0], [1, "b", 0, 5, 171, 0], [2, "isl", 1, 122, 63, 0], [2, "isl", 2, 119, 277, 0], [2, "isl", 2, 109, 244, 0], [2, "isl", 2, 114, 205, 0], [2, "isl", 1, 120, 150, 0], [2, "isl", 2, 154, 129, 0], [2, "isl", 0, 184, 158, 0], [2, "isl", 1, 208, 128, 0], [2, "isl", 1, 215, 132, 0], [2, "isl", 1, 214, 128, 0], [2, "isl", 1, 209, 132, 0], [1, "la", 3, 217, 20, 1], [1, "la", 1, 215, 19, 1], [1, "la", 0, 212, 18, 1], [1, "la", 4, 214, 18, 1], [1, "la", 4, 216, 19, 1], [1, "la", 4, 211, 20, 1], [1, "la", 3, 210, 19, 1], [1, "la", 3, 215, 21, 1], [1, "la", 1, 214, 20, 1], [1, "la", 3, 214, 22, 1], [1, "la", 3, 214, 24, 1], [1, "la", 4, 214, 26, 1], [1, "la", 4, 213, 27, 1], [1, "la", 1, 212, 28, 1], [1, "la", 2, 212, 29, 1], [1, "la", 5, 212, 30, 1], [1, "la", 4, 208, 19, 1], [1, "la", 4, 207, 19, 1], [1, "la", 1, 206, 19, 1], [1, "la", 1, 205, 19, 1], [1, "la", 2, 204, 19, 1], [1, "la", 5, 203, 19, 1], [1, "la", 3, 210, 17, 1]];
var COUNTER = 0;
var SPRITE = {
  GROUND: ["#133A2B", "#042b30"],
  SNOW_GROUND: ["#EBF2F0", "#136167"],
  CRAFT_LOADING: ["#4EB687", "#187484"],
  BROWN_LIFE: ["#664516", "#13474C"],
  SAND_COLOR: ["#FCEFBB", "#0F4D48"],
  SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
  GRD_SHOVEL_CO: ["#594837", "#163A3A"],
  ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
  WATER_3_COLOR: ["#0B6A84", "#09373F"],
  WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
  WATER_1_COLOR: ["#A9D6D3", "#115E60"],
  FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
  WEAPON_LOADING: ["#FFF", "#FFF"],
  HELMET_LOADING: ["#FFF", "#FFF"],
  SWIM_COLOR: ["#1C9BA4", "#00272F"],
  LAVA_GROUND: ["#2D2017", "#031C1E"],
  DAY: 0,
  NIGHT: 1,
  DRAGON_DEN_X: 2300,
  DRAGON_DEN_Y: 2290,
  FLAKES_NUMBER: 34,
  FLAKES_SIZES: 5,
  SAND_NUMBER: 68,
  ASHES_NUMBER: 34,
  ASHES_SIZES: 5,
  SMOG: 1,
  SMOG_PUSH: 0.6,
  SMOG_SPEED: 0.25,
  STEP_SPACE: 50,
  TRAIL_SPACE: 10,
  SWIM_SPACE: 75,
  GHOST_BUBBLES: 20,
  BUBBLES_SIZES: 5,
  SWORD: COUNTER++,
  PICK: COUNTER++,
  FUR: COUNTER++,
  PICK_GOLD: COUNTER++,
  PICK_DIAMOND: COUNTER++,
  SWORD_GOLD: COUNTER++,
  SWORD_DIAMOND: COUNTER++,
  HAND: COUNTER++,
  PICK_WOOD: COUNTER++,
  PIRATE_SWORD: COUNTER++,
  EARMUFFS: COUNTER++,
  COAT: COUNTER++,
  WOOD_SPEAR: COUNTER++,
  SPEAR: COUNTER++,
  GOLD_SPEAR: COUNTER++,
  DIAMOND_SPEAR: COUNTER++,
  DRAGON_SPEAR: COUNTER++,
  LAVA_SPEAR: COUNTER++,
  CRAB_SPEAR: COUNTER++,
  REIDITE_SWORD: COUNTER++,
  DIAMOND_PROTECTION: COUNTER++,
  AMETHYST_PROTECTION: COUNTER++,
  REIDITE_PROTECTION: COUNTER++,
  EXPLORER_HAT: COUNTER++,
  PIRATE_HAT: COUNTER++,
  STONE_HELMET: COUNTER++,
  GOLD_HELMET: COUNTER++,
  DIAMOND_HELMET: COUNTER++,
  BOOK: COUNTER++,
  BAG: COUNTER++,
  SWORD_AMETHYST: COUNTER++,
  PICK_AMETHYST: COUNTER++,
  PICK_REIDITE: COUNTER++,
  AMETHYST_SPEAR: COUNTER++,
  REIDITE_SPEAR: COUNTER++,
  HAMMER: COUNTER++,
  HAMMER_GOLD: COUNTER++,
  HAMMER_DIAMOND: COUNTER++,
  HAMMER_AMETHYST: COUNTER++,
  HAMMER_REIDITE: COUNTER++,
  CAP_SCARF: COUNTER++,
  CHRISTMAS_HAT: COUNTER++,
  ELF_HAT: COUNTER++,
  AMETHYST_HELMET: COUNTER++,
  REIDITE_HELMET: COUNTER++,
  SUPER_HAMMER: COUNTER++,
  SHOVEL: COUNTER++,
  SUPER_DIVING_SUIT: COUNTER++,
  DIVING_MASK: COUNTER++,
  WATERING_CAN_FULL: COUNTER++,
  SHOVEL_GOLD: COUNTER++,
  SHOVEL_DIAMOND: COUNTER++,
  SHOVEL_AMETHYST: COUNTER++,
  PITCHFORK: COUNTER++,
  PITCHFORK2: COUNTER++,
  SPANNER: COUNTER++,
  MACHETE: COUNTER++,
  SWORD_WOOD: COUNTER++,
  WOOD_HELMET: COUNTER++,
  DRAGON_HELMET: COUNTER++,
  LAVA_HELMET: COUNTER++,
  CROWN_CRAB: COUNTER++,
  DRAGON_SWORD: COUNTER++,
  LAVA_SWORD: COUNTER++,
  WOOD_BOW: COUNTER++,
  STONE_BOW: COUNTER++,
  GOLD_BOW: COUNTER++,
  DIAMOND_BOW: COUNTER++,
  AMETHYST_BOW: COUNTER++,
  REIDITE_BOW: COUNTER++,
  DRAGON_BOW: COUNTER++,
  WOOD_SHIELD: COUNTER++,
  STONE_SHIELD: COUNTER++,
  GOLD_SHIELD: COUNTER++,
  DIAMOND_SHIELD: COUNTER++,
  AMETHYST_SHIELD: COUNTER++,
  REIDITE_SHIELD: COUNTER++,
  CROWN_GREEN: COUNTER++,
  CROWN_ORANGE: COUNTER++,
  CROWN_BLUE: COUNTER++,
  TURBAN1: COUNTER++,
  TURBAN2: COUNTER++,
  PILOT_HELMET: COUNTER++,
  HOOD: COUNTER++,
  PEASANT: COUNTER++,
  WINTER_HOOD: COUNTER++,
  WINTER_PEASANT: COUNTER++,
  FLOWER_HAT: COUNTER++,
  FUR_HAT: COUNTER++,
  SADDLE: COUNTER++,
  WITCH: COUNTER++,
  NIMBUS: COUNTER++,
  WAND1: COUNTER++,
  WAND2: COUNTER++,
  FIREFLY_ITEM: COUNTER++,
  WOOD_ARROW: COUNTER++,
  STONE_ARROW: COUNTER++,
  GOLD_ARROW: COUNTER++,
  DIAMOND_ARROW: COUNTER++,
  AMETHYST_ARROW: COUNTER++,
  REIDITE_ARROW: COUNTER++,
  DRAGON_ARROW: COUNTER++,
  STONES: COUNTER++,
  TREE: COUNTER++,
  PLANT: COUNTER++,
  GOLD: COUNTER++,
  DIAMOND: COUNTER++,
  WOOD_FIRE: COUNTER++,
  WORKBENCH: COUNTER++,
  PLANT_SEED: COUNTER++,
  MEAT: COUNTER++,
  COOKED_MEAT: COUNTER++,
  BIG_FIRE_WOOD: COUNTER++,
  FURNACE_OFF: COUNTER++,
  PAPER: COUNTER++,
  AMETHYST: COUNTER++,
  AMETHYST_WALL: COUNTER++,
  AMETHYST_SPIKE: COUNTER++,
  DOOR_AMETHYST_CLOSE: COUNTER++,
  BRIDGE: COUNTER++,
  SAND: COUNTER++,
  BOTTLE_FULL: COUNTER++,
  BOTTLE_EMPTY: COUNTER++,
  KRAKEN_SKIN: COUNTER++,
  WATERING_CAN: COUNTER++,
  FLOUR: COUNTER++,
  WHEAT_SEED: COUNTER++,
  COOKIE: COUNTER++,
  WILD_WHEAT: COUNTER++,
  WINDMILL: COUNTER++,
  CAKE: COUNTER++,
  FOODFISH: COUNTER++,
  FOODFISH_COOKED: COUNTER++,
  SCALES: COUNTER++,
  INV_GROUND: COUNTER++,
  PLOT: COUNTER++,
  INV_ICE: COUNTER++,
  INV_BREAD: COUNTER++,
  BREAD_OVEN_OFF: COUNTER++,
  INV_SANDWICH: COUNTER++,
  FUR_WINTER: COUNTER++,
  BLUE_CORD: COUNTER++,
  LOCK: COUNTER++,
  DRAGON_HEART: COUNTER++,
  LAVA_HEART: COUNTER++,
  RESURRECTION: COUNTER++,
  EMERALD_MACHINE: COUNTER++,
  EXTRACTOR_MACHINE_STONE: COUNTER++,
  EXTRACTOR_MACHINE_GOLD: COUNTER++,
  EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  LOCKPICK: COUNTER++,
  TOTEM: COUNTER++,
  SPIKE: COUNTER++,
  CORD: COUNTER++,
  WALL: COUNTER++,
  STONE_WALL: COUNTER++,
  GOLD_WALL: COUNTER++,
  DIAMOND_WALL: COUNTER++,
  DOOR_WOOD_CLOSE: COUNTER++,
  CHEST: COUNTER++,
  STONE_SPIKE: COUNTER++,
  GOLD_SPIKE: COUNTER++,
  DIAMOND_SPIKE: COUNTER++,
  DOOR_STONE_CLOSE: COUNTER++,
  DOOR_GOLD_CLOSE: COUNTER++,
  DOOR_DIAMOND_CLOSE: COUNTER++,
  FUR_WOLF: COUNTER++,
  INV_GEMME_BLUE: COUNTER++,
  INV_GEMME_GREEN: COUNTER++,
  INV_GEMME_ORANGE: COUNTER++,
  INV_SPECIAL_FUR: COUNTER++,
  INV_SPECIAL_FUR_2: COUNTER++,
  INV_BUCKET_FULL: COUNTER++,
  INV_BUCKET_EMPTY: COUNTER++,
  WELL_EMPTY: COUNTER++,
  SIGN: COUNTER++,
  DRAGON_CUBE: COUNTER++,
  DRAGON_ORB: COUNTER++,
  LAVA_CUBE: COUNTER++,
  LAVA_ORB: COUNTER++,
  PLANT_PUMPKIN: COUNTER++,
  PUMPKIN: COUNTER++,
  ROOF: COUNTER++,
  PLANT_GARLIC: COUNTER++,
  GARLIC: COUNTER++,
  PLANT_THORNBUSH: COUNTER++,
  THORNBUSH: COUNTER++,
  BANDAGE: COUNTER++,
  INV_CRAB_STICK: COUNTER++,
  INV_CRAB_LOOT: COUNTER++,
  BED: COUNTER++,
  SUGAR_CAN: COUNTER++,
  INV_CANDY: COUNTER++,
  GARLAND: COUNTER++,
  REIDITE: COUNTER++,
  MAGMA: COUNTER++,
  PLANT_CARROT: COUNTER++,
  CARROT: COUNTER++,
  PLANT_TOMATO: COUNTER++,
  TOMATO: COUNTER++,
  PLANT_WATERMELON: COUNTER++,
  WATERMELON: COUNTER++,
  PLANT_ALOE_VERA: COUNTER++,
  ALOE_VERA_GROWN: COUNTER++,
  WOOD_DOOR_SPIKE: COUNTER++,
  STONE_DOOR_SPIKE: COUNTER++,
  GOLD_DOOR_SPIKE: COUNTER++,
  DIAMOND_DOOR_SPIKE: COUNTER++,
  AMETHYST_DOOR_SPIKE: COUNTER++,
  REIDITE_WALL: COUNTER++,
  REIDITE_DOOR: COUNTER++,
  REIDITE_SPIKE: COUNTER++,
  REIDITE_DOOR_SPIKE: COUNTER++,
  WOOD_TOWER: COUNTER++,
  PENGUIN_FEATHER: COUNTER++,
  BOAT: COUNTER++,
  SLED: COUNTER++,
  BOAT_WAVE: COUNTER++,
  SLED_WAVE: COUNTER++,
  MOUNT_BOAR: COUNTER++,
  BOAR_STEP: COUNTER++,
  CRAB_STICK: COUNTER++,
  CRAB_LOOT: COUNTER++,
  CRAB_BOSS: COUNTER++,
  BABY_DRAGON: COUNTER++,
  BABY_LAVA: COUNTER++,
  CRAB_STEP: COUNTER++,
  HAWK: COUNTER++,
  PLANE: COUNTER++,
  HAWK_FEATHER: COUNTER++,
  VULTURE: COUNTER++,
  ALOE_VERA: COUNTER++,
  VULTURE_FEATHER: COUNTER++,
  EMERALD: COUNTER++,
  FUR_BOAR: COUNTER++,
  DECORATION: COUNTER++,
  FOD: COUNTER++,
  FIREFLY: COUNTER++,
  HURT_FIREFLY: COUNTER++,
  SPELL: COUNTER++,
  BABY_MAMMOTH: COUNTER++,
  BABY_MAMMOTH_STEP: COUNTER++,
  CRATE: COUNTER++,
  SEED: COUNTER++,
  INV_DRAGON_ORB: COUNTER++,
  INV_LAVA_ORB: COUNTER++,
  CRAFT_SWORD: COUNTER++,
  BODY: COUNTER++,
  CRAFT_PICK: COUNTER++,
  CRAFT_PICK_DIAMOND: COUNTER++,
  INV_PICK_GOLD: COUNTER++,
  MINIMAP: COUNTER++,
  SPIDER: COUNTER++,
  INV_SWORD: COUNTER++,
  CRAFT_WORK: COUNTER++,
  CRAFT_STONE_WALL: COUNTER++,
  RABBIT: COUNTER++,
  CRAFT_GOLD_WALL: COUNTER++,
  WEB: COUNTER++,
  GAUGES: COUNTER++,
  CRAFT_DOOR_WOOD_CLOSE: COUNTER++,
  CHEST_PLANT: COUNTER++,
  CHEST_GOLD: COUNTER++,
  CHEST_DIAMOND: COUNTER++,
  CHEST_PICK_GOLD: COUNTER++,
  CHEST_FIRE: COUNTER++,
  CHEST_PICK_WOOD: COUNTER++,
  CHEST_MEAT: COUNTER++,
  CHEST_BIG_FIRE: COUNTER++,
  INV_PLANT: COUNTER++,
  LEADERBOARD: COUNTER++,
  HURT: COUNTER++,
  COLD: COUNTER++,
  HUNGER: COUNTER++,
  GROUND_FIRE: COUNTER++,
  COUNTER: COUNTER++,
  CRAFT_SEED: COUNTER++,
  HERB: COUNTER++,
  HAND_SHADOW: COUNTER++,
  PLANT_MINI: COUNTER++,
  FIRE: COUNTER++,
  HALO_FIRE: COUNTER++,
  CRAFT_SWORD_GOLD: COUNTER++,
  CRAFT_SWORD_DIAMOND: COUNTER++,
  INV_SWORD_GOLD: COUNTER++,
  INV_SWORD_DIAMOND: COUNTER++,
  FRUIT: COUNTER++,
  CRAFT_PICK_GOLD: COUNTER++,
  INV_PICK_DIAMOND: COUNTER++,
  INV_GOLD: COUNTER++,
  INV_DIAMOND: COUNTER++,
  WOLF: COUNTER++,
  INV_MEAT: COUNTER++,
  GEAR2: COUNTER++,
  CRAFT_FIRE: COUNTER++,
  INV_BANDAGE: COUNTER++,
  CRAFT_BANDAGE: COUNTER++,
  INV_CORD: COUNTER++,
  YOUR_SCORE: COUNTER++,
  TREE_BRANCH: COUNTER++,
  HEAL: COUNTER++,
  INV_FIRE: COUNTER++,
  INV_WORK: COUNTER++,
  INV_SEED: COUNTER++,
  INV_PICK: COUNTER++,
  INV_PICK_WOOD: COUNTER++,
  CRAFT_PICK_WOOD: COUNTER++,
  INV_STONE: COUNTER++,
  INV_WOOD: COUNTER++,
  INV_WALL: COUNTER++,
  CRAFT_WALL: COUNTER++,
  INV_SPIKE: COUNTER++,
  CRAFT_SPIKE: COUNTER++,
  WHEAT_MOB: COUNTER++,
  HURT_RABBIT: COUNTER++,
  INV_COOKED_MEAT: COUNTER++,
  GEAR: COUNTER++,
  CRAFT_COOKED_MEAT: COUNTER++,
  HURT_WOLF: COUNTER++,
  CRAFT_BIG_FIRE: COUNTER++,
  INV_BIG_FIRE: COUNTER++,
  INV_STONE_WALL: COUNTER++,
  INV_GOLD_WALL: COUNTER++,
  INV_DIAMOND_WALL: COUNTER++,
  CRAFT_DIAMOND_WALL: COUNTER++,
  HURT_SPIDER: COUNTER++,
  EMPTY_SLOT: COUNTER++,
  INV_DOOR_WOOD_CLOSE: COUNTER++,
  DOOR_WOOD_OPEN: COUNTER++,
  INV_CHEST: COUNTER++,
  CRAFT_CHEST: COUNTER++,
  CHEST_SLOT: COUNTER++,
  CHEST_SWORD: COUNTER++,
  CHEST_PICK: COUNTER++,
  CHEST_STONE: COUNTER++,
  CHEST_WOOD: COUNTER++,
  CHEST_PICK_DIAMOND: COUNTER++,
  CHEST_SWORD_GOLD: COUNTER++,
  CHEST_SWORD_DIAMOND: COUNTER++,
  CHEST_WORK: COUNTER++,
  CHEST_SEED: COUNTER++,
  CHEST_WALL: COUNTER++,
  CHEST_SPIKE: COUNTER++,
  CHEST_COOKED_MEAT: COUNTER++,
  CHEST_BANDAGE: COUNTER++,
  CHEST_CORD: COUNTER++,
  CHEST_STONE_WALL: COUNTER++,
  CHEST_GOLD_WALL: COUNTER++,
  CHEST_DIAMOND_WALL: COUNTER++,
  CHEST_DOOR_WOOD_CLOSE: COUNTER++,
  CHEST_WORKBENCH: COUNTER++,
  CHEST_CHEST: COUNTER++,
  CRAFT_STONE_SPIKE: COUNTER++,
  INV_STONE_SPIKE: COUNTER++,
  INV_GOLD_SPIKE: COUNTER++,
  CRAFT_GOLD_SPIKE: COUNTER++,
  INV_DIAMOND_SPIKE: COUNTER++,
  CRAFT_DIAMOND_SPIKE: COUNTER++,
  CHEST_PLUS: COUNTER++,
  CRAFT_BAG: COUNTER++,
  INV_FUR: COUNTER++,
  INV_EARMUFFS: COUNTER++,
  CRAFT_EARMUFFS: COUNTER++,
  CRAFT_DOOR_STONE_CLOSE: COUNTER++,
  INV_DOOR_STONE_CLOSE: COUNTER++,
  DOOR_STONE_OPEN: COUNTER++,
  CRAFT_DOOR_GOLD_CLOSE: COUNTER++,
  INV_DOOR_GOLD_CLOSE: COUNTER++,
  DOOR_GOLD_OPEN: COUNTER++,
  CRAFT_DOOR_DIAMOND_CLOSE: COUNTER++,
  INV_DOOR_DIAMOND_CLOSE: COUNTER++,
  DOOR_DIAMOND_OPEN: COUNTER++,
  CRAFT_COAT: COUNTER++,
  INV_COAT: COUNTER++,
  CHEST_STONE_SPIKE: COUNTER++,
  CHEST_GOLD_SPIKE: COUNTER++,
  CHEST_DIAMOND_SPIKE: COUNTER++,
  CHEST_BAG: COUNTER++,
  CHEST_FUR: COUNTER++,
  CHEST_EARMUFFS: COUNTER++,
  CHEST_DOOR_STONE_CLOSE: COUNTER++,
  CHEST_DOOR_GOLD_CLOSE: COUNTER++,
  CHEST_DOOR_DIAMOND_CLOSE: COUNTER++,
  CHEST_COAT: COUNTER++,
  INV_BAG: COUNTER++,
  INV_FUR_WOLF: COUNTER++,
  CHEST_FUR_WOLF: COUNTER++,
  INV_SPEAR: COUNTER++,
  CRAFT_SPEAR: COUNTER++,
  CHEST_SPEAR: COUNTER++,
  INV_GOLD_SPEAR: COUNTER++,
  CRAFT_GOLD_SPEAR: COUNTER++,
  CHEST_GOLD_SPEAR: COUNTER++,
  INV_WOOD_SPEAR: COUNTER++,
  CRAFT_WOOD_SPEAR: COUNTER++,
  CHEST_WOOD_SPEAR: COUNTER++,
  INV_DIAMOND_SPEAR: COUNTER++,
  CRAFT_DIAMOND_SPEAR: COUNTER++,
  CHEST_DIAMOND_SPEAR: COUNTER++,
  FURNACE_ON: COUNTER++,
  INV_FURNACE: COUNTER++,
  CRAFT_FURNACE: COUNTER++,
  CHEST_FURNACE: COUNTER++,
  FURNACE_SLOT: COUNTER++,
  FURNACE_BUTTON: COUNTER++,
  FIR: COUNTER++,
  STONES_WINTER: COUNTER++,
  GOLD_WINTER: COUNTER++,
  DIAMOND_WINTER: COUNTER++,
  GROUND_FIRE_WINTER: COUNTER++,
  INV_AMETHYST: COUNTER++,
  FOX: COUNTER++,
  INV_EXPLORER_HAT: COUNTER++,
  CRAFT_EXPLORER_HAT: COUNTER++,
  CHEST_EXPLORER_HAT: COUNTER++,
  INV_PIRATE_HAT: COUNTER++,
  CRAFT_PIRATE_HAT: COUNTER++,
  CHEST_PIRATE_HAT: COUNTER++,
  INV_PILOT_HELMET: COUNTER++,
  CRAFT_PILOT_HELMET: COUNTER++,
  CHEST_PILOT_HELMET: COUNTER++,
  INV_STONE_HELMET: COUNTER++,
  CRAFT_STONE_HELMET: COUNTER++,
  CHEST_STONE_HELMET: COUNTER++,
  INV_GOLD_HELMET: COUNTER++,
  CRAFT_GOLD_HELMET: COUNTER++,
  CHEST_GOLD_HELMET: COUNTER++,
  INV_DIAMOND_HELMET: COUNTER++,
  CRAFT_DIAMOND_HELMET: COUNTER++,
  CHEST_DIAMOND_HELMET: COUNTER++,
  INV_BOOK: COUNTER++,
  CRAFT_BOOK: COUNTER++,
  CHEST_BOOK: COUNTER++,
  INV_PAPER: COUNTER++,
  CRAFT_PAPER: COUNTER++,
  CHEST_PAPER: COUNTER++,
  HERB_WINTER: COUNTER++,
  BEAR: COUNTER++,
  CHEST_AMETHYST: COUNTER++,
  SNOW: COUNTER++,
  DRAGON_GROUND: COUNTER++,
  DRAGON: COUNTER++,
  LAVA_DRAGON: COUNTER++,
  WING_LEFT: COUNTER++,
  WING_RIGHT: COUNTER++,
  LAVA_WING_LEFT: COUNTER++,
  LAVA_WING_RIGHT: COUNTER++,
  INV_SWORD_AMETHYST: COUNTER++,
  CRAFT_SWORD_AMETHYST: COUNTER++,
  CHEST_SWORD_AMETHYST: COUNTER++,
  INV_PICK_AMETHYST: COUNTER++,
  CHEST_PICK_AMETHYST: COUNTER++,
  CRAFT_PICK_AMETHYST: COUNTER++,
  HURT_FOX: COUNTER++,
  HURT_BEAR: COUNTER++,
  HURT_DRAGON: COUNTER++,
  HURT_LAVA_DRAGON: COUNTER++,
  SLOT_NUMBER: COUNTER++,
  HURT_WING_LEFT: COUNTER++,
  HURT_WING_RIGHT: COUNTER++,
  HURT_LAVA_WING_LEFT: COUNTER++,
  HURT_LAVA_WING_RIGHT: COUNTER++,
  FLAKES: COUNTER++,
  DESERT: COUNTER++,
  INV_AMETHYST_SPEAR: COUNTER++,
  CRAFT_AMETHYST_SPEAR: COUNTER++,
  CHEST_AMETHYST_SPEAR: COUNTER++,
  SNOW_STEP: COUNTER++,
  LAVA_STEP: COUNTER++,
  INV_HAMMER: COUNTER++,
  CRAFT_HAMMER: COUNTER++,
  CHEST_HAMMER: COUNTER++,
  INV_HAMMER_GOLD: COUNTER++,
  CRAFT_HAMMER_GOLD: COUNTER++,
  CHEST_HAMMER_GOLD: COUNTER++,
  INV_HAMMER_DIAMOND: COUNTER++,
  CRAFT_HAMMER_DIAMOND: COUNTER++,
  CHEST_HAMMER_DIAMOND: COUNTER++,
  INV_HAMMER_AMETHYST: COUNTER++,
  CRAFT_HAMMER_AMETHYST: COUNTER++,
  CHEST_HAMMER_AMETHYST: COUNTER++,
  INV_HAMMER_REIDITE: COUNTER++,
  CRAFT_HAMMER_REIDITE: COUNTER++,
  CHEST_HAMMER_REIDITE: COUNTER++,
  INV_AMETHYST_WALL: COUNTER++,
  CRAFT_AMETHYST_WALL: COUNTER++,
  CHEST_AMETHYST_WALL: COUNTER++,
  INV_AMETHYST_SPIKE: COUNTER++,
  CRAFT_AMETHYST_SPIKE: COUNTER++,
  CHEST_AMETHYST_SPIKE: COUNTER++,
  CRAFT_DOOR_AMETHYST_CLOSE: COUNTER++,
  INV_DOOR_AMETHYST_CLOSE: COUNTER++,
  DOOR_AMETHYST_OPEN: COUNTER++,
  CHEST_DOOR_AMETHYST_CLOSE: COUNTER++,
  INV_CAP_SCARF: COUNTER++,
  CRAFT_CAP_SCARF: COUNTER++,
  CHEST_CAP_SCARF: COUNTER++,
  INV_FUR_WINTER: COUNTER++,
  CHEST_FUR_WINTER: COUNTER++,
  SLOT_NUMBER: COUNTER++,
  DOOR_WOOD_OPEN_WINTER: COUNTER++,
  DOOR_STONE_OPEN_WINTER: COUNTER++,
  DOOR_GOLD_OPEN_WINTER: COUNTER++,
  DOOR_DIAMOND_OPEN_WINTER: COUNTER++,
  DOOR_AMETHYST_OPEN_WINTER: COUNTER++,
  INV_BLUE_CORD: COUNTER++,
  CHEST_BLUE_CORD: COUNTER++,
  CRAFT_BLUE_CORD: COUNTER++,
  BIGMAP: COUNTER++,
  SHOW_SPECTATORS: COUNTER++,
  INV_LOCK: COUNTER++,
  CRAFT_LOCK: COUNTER++,
  CHEST_LOCK: COUNTER++,
  INV_DRAGON_HEART: COUNTER++,
  CHEST_DRAGON_HEART: COUNTER++,
  INV_LAVA_HEART: COUNTER++,
  CHEST_LAVA_HEART: COUNTER++,
  RECONNECT: COUNTER++,
  RESURRECTION_GROUND: COUNTER++,
  RESURRECTION_HOLE: COUNTER++,
  RESURRECTION_ROTATE: COUNTER++,
  INV_RESURRECTION: COUNTER++,
  CRAFT_RESURRECTION: COUNTER++,
  CHEST_RESURRECTION: COUNTER++,
  INV_LOCKPICK: COUNTER++,
  CRAFT_LOCKPICK: COUNTER++,
  CHEST_LOCKPICK: COUNTER++,
  KEY: COUNTER++,
  PADLOCK: COUNTER++,
  DELAY_WEAPON: COUNTER++,
  LOCKED: COUNTER++,
  PADLOCK_ON_CHEST: COUNTER++,
  BUBBLES: COUNTER++,
  INV_AMETHYST_HELMET: COUNTER++,
  CRAFT_AMETHYST_HELMET: COUNTER++,
  CHEST_AMETHYST_HELMET: COUNTER++,
  SPECIAL_ITEMS: COUNTER++,
  POINTS: COUNTER++,
  AUTO_FEED: COUNTER++,
  BANDAGE_ACTIVATED: COUNTER++,
  STOP_REGENERATION: COUNTER++,
  STOP_REGENERATION_BLIZZARD: COUNTER++,
  INV_SUPER_HAMMER: COUNTER++,
  CRAFT_SUPER_HAMMER: COUNTER++,
  CHEST_SUPER_HAMMER: COUNTER++,
  INV_TOTEM: COUNTER++,
  CHEST_TOTEM: COUNTER++,
  CRAFT_TOTEM: COUNTER++,
  TEAM_BUTTON: COUNTER++,
  MANAGE_TEAM_BUTTON: COUNTER++,
  ICON_MEMBER: COUNTER++,
  ICON_LEADER: COUNTER++,
  FULL_TEAM_BUTTON: COUNTER++,
  SHOW_TEAM_BUTTON: COUNTER++,
  DELAY_TEAM: COUNTER++,
  INV_DRAGON_SWORD: COUNTER++,
  CRAFT_DRAGON_SWORD: COUNTER++,
  CHEST_DRAGON_SWORD: COUNTER++,
  INV_LAVA_SWORD: COUNTER++,
  CRAFT_LAVA_SWORD: COUNTER++,
  CHEST_LAVA_SWORD: COUNTER++,
  INV_WOOD_BOW: COUNTER++,
  CRAFT_WOOD_BOW: COUNTER++,
  CHEST_WOOD_BOW: COUNTER++,
  INV_STONE_BOW: COUNTER++,
  CRAFT_STONE_BOW: COUNTER++,
  CHEST_STONE_BOW: COUNTER++,
  INV_GOLD_BOW: COUNTER++,
  CRAFT_GOLD_BOW: COUNTER++,
  CHEST_GOLD_BOW: COUNTER++,
  INV_DIAMOND_BOW: COUNTER++,
  CRAFT_DIAMOND_BOW: COUNTER++,
  CHEST_DIAMOND_BOW: COUNTER++,
  INV_AMETHYST_BOW: COUNTER++,
  CRAFT_AMETHYST_BOW: COUNTER++,
  CHEST_AMETHYST_BOW: COUNTER++,
  INV_REIDITE_BOW: COUNTER++,
  CRAFT_REIDITE_BOW: COUNTER++,
  CHEST_REIDITE_BOW: COUNTER++,
  INV_DRAGON_BOW: COUNTER++,
  CRAFT_DRAGON_BOW: COUNTER++,
  CHEST_DRAGON_BOW: COUNTER++,
  CHEST_DRAGON_ORB: COUNTER++,
  CHEST_LAVA_ORB: COUNTER++,
  SHOP: COUNTER++,
  CURSED_SWORD: COUNTER++,
  INV_CURSED_SWORD: COUNTER++,
  CRAFT_CURSED_SWORD: COUNTER++,
  CHEST_CURSED_SWORD: COUNTER++,
  ITEM1: COUNTER++,
  ITEM2: COUNTER++,
  ITEM3: COUNTER++,
  ITEM4: COUNTER++,
  SAND_BORDER: COUNTER++,
  SAND_STEP: COUNTER++,
  OCEAN: COUNTER++,
  CRAFT_BRIDGE: COUNTER++,
  INV_BRIDGE: COUNTER++,
  CHEST_BRIDGE: COUNTER++,
  LACK: COUNTER++,
  OXYGEN: COUNTER++,
  INV_SAND: COUNTER++,
  CHEST_SAND: COUNTER++,
  CRAFT_BOTTLE_EMPTY: COUNTER++,
  INV_BOTTLE_EMPTY: COUNTER++,
  INV_BOTTLE_FULL: COUNTER++,
  CHEST_BOTTLE_EMPTY: COUNTER++,
  CHEST_BOTTLE_FULL: COUNTER++,
  INV_SHOVEL: COUNTER++,
  CHEST_SHOVEL: COUNTER++,
  CRAFT_SHOVEL: COUNTER++,
  LAKE_DEEP: COUNTER++,
  LAKE: COUNTER++,
  LAKE_EDGE: COUNTER++,
  SHINGLE: COUNTER++,
  DRIED_PLANT: COUNTER++,
  INV_KRAKEN_SKIN: COUNTER++,
  CHEST_KRAKEN_SKIN: COUNTER++,
  INV_WATERING_CAN: COUNTER++,
  CRAFT_WATERING_CAN: COUNTER++,
  CHEST_WATERING_CAN: COUNTER++,
  INV_FLOUR: COUNTER++,
  CHEST_FLOUR: COUNTER++,
  INV_WHEAT_SEED: COUNTER++,
  CRAFT_WHEAT_SEED: COUNTER++,
  CHEST_WHEAT_SEED: COUNTER++,
  INV_COOKIE: COUNTER++,
  CRAFT_COOKIE: COUNTER++,
  CHEST_COOKIE: COUNTER++,
  KRAKEN: COUNTER++,
  DRIED_WHEAT: COUNTER++,
  INV_WILD_WHEAT: COUNTER++,
  CHEST_WILD_WHEAT: COUNTER++,
  WINDMILL_WINGS: COUNTER++,
  WINDMILL_HEAD: COUNTER++,
  CRAFT_WINDMILL: COUNTER++,
  INV_WINDMILL: COUNTER++,
  CHEST_WINDMILL: COUNTER++,
  INV_SUPER_DIVING_SUIT: COUNTER++,
  CRAFT_SUPER_DIVING_SUIT: COUNTER++,
  CHEST_SUPER_DIVING_SUIT: COUNTER++,
  INV_DIVING_MASK: COUNTER++,
  CRAFT_DIVING_MASK: COUNTER++,
  CHEST_DIVING_MASK: COUNTER++,
  INV_WATERING_CAN_FULL: COUNTER++,
  CHEST_WATERING_CAN_FULL: COUNTER++,
  CRAFT_WATERING_CAN_FULL: COUNTER++,
  WINDMILL_CASES: COUNTER++,
  EXTRACTOR_CASES: COUNTER++,
  WINDMILL_WHEAT_SEED: COUNTER++,
  WINDMILL_FLOUR: COUNTER++,
  INV_CAKE: COUNTER++,
  CRAFT_CAKE: COUNTER++,
  CHEST_CAKE: COUNTER++,
  INV_FOODFISH: COUNTER++,
  CHEST_FOODFISH: COUNTER++,
  INV_FOODFISH_COOKED: COUNTER++,
  CHEST_FOODFISH_COOKED: COUNTER++,
  CRAFT_FOODFISH_COOKED: COUNTER++,
  DELAY_DRINK: COUNTER++,
  WHEAT_SEED_DRIED: COUNTER++,
  HEART_SYMBOL_HUD: COUNTER++,
  COLD_SYMBOL_HUD: COUNTER++,
  FOOD_SYMBOL_HUD: COUNTER++,
  WATER_SYMBOL_HUD: COUNTER++,
  PIRANHA: COUNTER++,
  INV_SCALES: COUNTER++,
  CHEST_SCALES: COUNTER++,
  CAVE_STONES: COUNTER++,
  HERB_CAVE: COUNTER++,
  WATERBLOCK: COUNTER++,
  SHADOW_CAVE_STONES: COUNTER++,
  CAVE_STEP: COUNTER++,
  DELAY_SPIKE: COUNTER++,
  CHEST_GROUND: COUNTER++,
  CHEST_PLOT: COUNTER++,
  CRAFT_PLOT: COUNTER++,
  INV_PLOT: COUNTER++,
  CHEST_ICE: COUNTER++,
  HURT_KRAKEN: COUNTER++,
  HURT_PIRANHA: COUNTER++,
  CHEST_BREAD: COUNTER++,
  CRAFT_BREAD: COUNTER++,
  TREASURE_CHEST: COUNTER++,
  ISLAND: COUNTER++,
  PALM: COUNTER++,
  WAVE_ONE: COUNTER++,
  WAVE_TWO: COUNTER++,
  ISLAND_BLOCK: COUNTER++,
  HURT_TREASURE_CHEST: COUNTER++,
  ISLAND_STEP: COUNTER++,
  INV_SHOVEL_GOLD: COUNTER++,
  CRAFT_SHOVEL_GOLD: COUNTER++,
  CHEST_SHOVEL_GOLD: COUNTER++,
  INV_SHOVEL_DIAMOND: COUNTER++,
  CHEST_SHOVEL_DIAMOND: COUNTER++,
  CRAFT_SHOVEL_DIAMOND: COUNTER++,
  INV_SHOVEL_AMETHYST: COUNTER++,
  CRAFT_SHOVEL_AMETHYST: COUNTER++,
  CHEST_SHOVEL_AMETHYST: COUNTER++,
  RECIPE_BUTTON: COUNTER++,
  INV_SPANNER: COUNTER++,
  CHEST_SPANNER: COUNTER++,
  CRAFT_SPANNER: COUNTER++,
  INV_MACHETE: COUNTER++,
  CHEST_MACHETE: COUNTER++,
  CRAFT_MACHETE: COUNTER++,
  CRAFT_BOTTLE_FULL: COUNTER++,
  BREAD_OVEN_ON: COUNTER++,
  INV_BREAD_OVEN: COUNTER++,
  CRAFT_BREAD_OVEN: COUNTER++,
  CHEST_BREAD_OVEN: COUNTER++,
  BREAD_LIGHT_UP: COUNTER++,
  BREAD_LIGHT_DOWN: COUNTER++,
  BREAD_OVEN_UI: COUNTER++,
  BREAD_OVEN_WOOD: COUNTER++,
  BREAD_OVEN_BREAD: COUNTER++,
  CLOCK: COUNTER++,
  ARROW_CLOCK: COUNTER++,
  OPTION_BUTTON: COUNTER++,
  DEAD_BOX: COUNTER++,
  HURT_DEAD_BOX: COUNTER++,
  CRAFT_SANDWICH: COUNTER++,
  CHEST_SANDWICH: COUNTER++,
  INV_DRAGON_HELMET: COUNTER++,
  CHEST_DRAGON_HELMET: COUNTER++,
  CRAFT_DRAGON_HELMET: COUNTER++,
  INV_LAVA_HELMET: COUNTER++,
  CHEST_LAVA_HELMET: COUNTER++,
  CRAFT_LAVA_HELMET: COUNTER++,
  INV_WITCH: COUNTER++,
  CHEST_WITCH: COUNTER++,
  CRAFT_WITCH: COUNTER++,
  INV_NIMBUS: COUNTER++,
  CHEST_NIMBUS: COUNTER++,
  CRAFT_NIMBUS: COUNTER++,
  INV_WAND1: COUNTER++,
  CHEST_WAND1: COUNTER++,
  CRAFT_WAND1: COUNTER++,
  INV_WAND2: COUNTER++,
  CHEST_WAND2: COUNTER++,
  CRAFT_WAND2: COUNTER++,
  DRAGON_SWORD_HALO: COUNTER++,
  INV_DRAGON_CUBE: COUNTER++,
  CHEST_DRAGON_CUBE: COUNTER++,
  INV_LAVA_CUBE: COUNTER++,
  CHEST_LAVA_CUBE: COUNTER++,
  QUEST_BUTTON: COUNTER++,
  INV_CROWN_GREEN: COUNTER++,
  CHEST_CROWN_GREEN: COUNTER++,
  CRAFT_CROWN_GREEN: COUNTER++,
  CHEST_GEMME_GREEN: COUNTER++,
  INV_CROWN_ORANGE: COUNTER++,
  CHEST_CROWN_ORANGE: COUNTER++,
  CRAFT_CROWN_ORANGE: COUNTER++,
  CHEST_GEMME_ORANGE: COUNTER++,
  INV_CROWN_BLUE: COUNTER++,
  CHEST_CROWN_BLUE: COUNTER++,
  CHEST_GEMME_BLUE: COUNTER++,
  INV_HOOD: COUNTER++,
  CRAFT_HOOD: COUNTER++,
  CHEST_HOOD: COUNTER++,
  CRAFT_CROWN_BLUE: COUNTER++,
  INV_PEASANT: COUNTER++,
  CRAFT_PEASANT: COUNTER++,
  CHEST_PEASANT: COUNTER++,
  CHEST_SPECIAL_FUR: COUNTER++,
  CHEST_SPECIAL_FUR_2: COUNTER++,
  INV_WINTER_PEASANT: COUNTER++,
  CRAFT_WINTER_PEASANT: COUNTER++,
  CHEST_WINTER_PEASANT: COUNTER++,
  INV_WINTER_HOOD: COUNTER++,
  CRAFT_WINTER_HOOD: COUNTER++,
  CHEST_WINTER_HOOD: COUNTER++,
  SOUND_BUTTON_ON: COUNTER++,
  SOUND_BUTTON_OFF: COUNTER++,
  CRAFT_BUCKET_FULL: COUNTER++,
  CRAFT_BUCKET_EMPTY: COUNTER++,
  CHEST_BUCKET_FULL: COUNTER++,
  CHEST_BUCKET_EMPTY: COUNTER++,
  WELL_FULL: COUNTER++,
  INV_WELL: COUNTER++,
  CHEST_WELL: COUNTER++,
  CRAFT_WELL: COUNTER++,
  DELAY_HELMET: COUNTER++,
  GLOVES_HOOD: COUNTER++,
  DELAY_WALL: COUNTER++,
  MARKET_BUTTON: COUNTER++,
  ACCESSORY: COUNTER++,
  MARKET_BGD: COUNTER++,
  DEAD_BOX_UI: COUNTER++,
  CRAFT_SIGN: COUNTER++,
  INV_SIGN: COUNTER++,
  CHEST_SIGN: COUNTER++,
  SYMBOLS: COUNTER++,
  SIGN_BUTTON: COUNTER++,
  TREE_WEB1: COUNTER++,
  TREE_WEB2: COUNTER++,
  TREE_BRANCH_WEB1: COUNTER++,
  TREE_BRANCH_WEB2: COUNTER++,
  INV_PUMPKIN_SEED: COUNTER++,
  CRAFT_PUMPKIN_SEED: COUNTER++,
  CHEST_PUMPKIN_SEED: COUNTER++,
  PUMPKIN_SEED_MOB: COUNTER++,
  PLANT_PUMPKIN_DRIED: COUNTER++,
  DRIED_PUMPKIN: COUNTER++,
  INV_PUMPKIN: COUNTER++,
  CHEST_PUMPKIN: COUNTER++,
  HALO_FIRE_PUMPKIN: COUNTER++,
  GROUND_FIRE_PUMPKIN: COUNTER++,
  MINIMAP_CTX: COUNTER++,
  BIGMAP_CTX: COUNTER++,
  ZOMBIE_BODY: COUNTER++,
  ZOMBIE_HEAD: COUNTER++,
  ZOMBIE_HAND: COUNTER++,
  ZOMBIE_HURT: COUNTER++,
  ZOMBIE_HUNGER: COUNTER++,
  ZOMBIE_HEAL: COUNTER++,
  INV_WOOD_HELMET: COUNTER++,
  CRAFT_WOOD_HELMET: COUNTER++,
  CHEST_WOOD_HELMET: COUNTER++,
  INV_SWORD_WOOD: COUNTER++,
  CRAFT_SWORD_WOOD: COUNTER++,
  CHEST_SWORD_WOOD: COUNTER++,
  ZOMBIE_PLAYER: COUNTER++,
  VAMPIRE: COUNTER++,
  INV_GARLIC_SEED: COUNTER++,
  CRAFT_GARLIC_SEED: COUNTER++,
  CHEST_GARLIC_SEED: COUNTER++,
  GARLIC_SEED_MOB: COUNTER++,
  PLANT_GARLIC_DRIED: COUNTER++,
  DRIED_GARLIC: COUNTER++,
  INV_GARLIC: COUNTER++,
  CHEST_GARLIC: COUNTER++,
  INV_ROOF: COUNTER++,
  CRAFT_ROOF: COUNTER++,
  CHEST_ROOF: COUNTER++,
  INV_THORNBUSH_SEED: COUNTER++,
  CRAFT_THORNBUSH_SEED: COUNTER++,
  CHEST_THORNBUSH_SEED: COUNTER++,
  THORNBUSH_SEED_MOB: COUNTER++,
  PLANT_THORNBUSH_DRIED: COUNTER++,
  INV_THORNBUSH: COUNTER++,
  CHEST_THORNBUSH: COUNTER++,
  CRAFT_THORNBUSH: COUNTER++,
  ROOFS: COUNTER++,
  GIFT: COUNTER++,
  TREE_SNOW1: COUNTER++,
  TREE_SNOW2: COUNTER++,
  TREE_BRANCH_SNOW1: COUNTER++,
  TREE_BRANCH_SNOW2: COUNTER++,
  HURT_GIFT: COUNTER++,
  INV_PIRATE_SWORD: COUNTER++,
  CRAFT_PIRATE_SWORD: COUNTER++,
  CHEST_PIRATE_SWORD: COUNTER++,
  CHEST_SUGAR_CAN: COUNTER++,
  CRAFT_SUGAR_CAN: COUNTER++,
  INV_SUGAR_CAN: COUNTER++,
  INV_FERRERO: COUNTER++,
  CHEST_FERRERO: COUNTER++,
  CHEST_CANDY: COUNTER++,
  DRIED_THORNBUSH: COUNTER++,
  INV_GARLAND: COUNTER++,
  CHEST_GARLAND: COUNTER++,
  GARLANDS: COUNTER++,
  GARLANDS_LIGHT: COUNTER++,
  INV_DRAGON_SPEAR: COUNTER++,
  CHEST_DRAGON_SPEAR: COUNTER++,
  CRAFT_DRAGON_SPEAR: COUNTER++,
  INV_LAVA_SPEAR: COUNTER++,
  CHEST_LAVA_SPEAR: COUNTER++,
  CRAFT_LAVA_SPEAR: COUNTER++,
  INV_CHRISTMAS_HAT: COUNTER++,
  CHEST_CHRISTMAS_HAT: COUNTER++,
  INV_ELF_HAT: COUNTER++,
  CHEST_ELF_HAT: COUNTER++,
  ROBOT_SKIN: COUNTER++,
  VERIFIED: COUNTER++,
  CRAB_ATTACK: COUNTER++,
  CRAB: COUNTER++,
  HURT_CRAB: COUNTER++,
  HURT_CRAB_CLAW_LEFT: COUNTER++,
  HURT_CRAB_CLAW_RIGHT: COUNTER++,
  HEAL_CRAB: COUNTER++,
  HEAL_CRAB_CLAW_LEFT: COUNTER++,
  HEAL_CRAB_CLAW_RIGHT: COUNTER++,
  CRAB_CLAW_LEFT: COUNTER++,
  CRAB_CLAW_RIGHT: COUNTER++,
  CRAB_CLAW_LEFT_ATTACK: COUNTER++,
  CRAB_CLAW_RIGHT_ATTACK: COUNTER++,
  CHEST_CRAB_STICK: COUNTER++,
  CHEST_CRAB_SPEAR: COUNTER++,
  CRAFT_CRAB_SPEAR: COUNTER++,
  INV_CRAB_SPEAR: COUNTER++,
  FISH1: COUNTER++,
  FISH2: COUNTER++,
  HURT_FISH1: COUNTER++,
  HURT_FISH2: COUNTER++,
  CHEST_CRAB_LOOT: COUNTER++,
  INV_BED: COUNTER++,
  CHEST_BED: COUNTER++,
  CRAFT_BED: COUNTER++,
  INV_CROWN_CRAB: COUNTER++,
  CHEST_CROWN_CRAB: COUNTER++,
  CRAFT_CROWN_CRAB: COUNTER++,
  BED_TOP: COUNTER++,
  HURT_RABBIT_SKIN: COUNTER++,
  COLD_RABBIT_SKIN: COUNTER++,
  HUNGER_RABBIT_SKIN: COUNTER++,
  HEAL_RABBIT_SKIN: COUNTER++,
  FIRE_MOB: COUNTER++,
  HURT_FIRE_MOB: COUNTER++,
  GLOVES_DIAMOND_PROTECTION: COUNTER++,
  INV_DIAMOND_PROTECTION: COUNTER++,
  CRAFT_DIAMOND_PROTECTION: COUNTER++,
  CHEST_DIAMOND_PROTECTION: COUNTER++,
  GLOVES_AMETHYST_PROTECTION: COUNTER++,
  INV_AMETHYST_PROTECTION: COUNTER++,
  CRAFT_AMETHYST_PROTECTION: COUNTER++,
  CHEST_AMETHYST_PROTECTION: COUNTER++,
  GLOVES_REIDITE_PROTECTION: COUNTER++,
  INV_REIDITE_PROTECTION: COUNTER++,
  CRAFT_REIDITE_PROTECTION: COUNTER++,
  CHEST_REIDITE_PROTECTION: COUNTER++,
  INV_REIDITE_SWORD: COUNTER++,
  CRAFT_REIDITE_SWORD: COUNTER++,
  CHEST_REIDITE_SWORD: COUNTER++,
  LAVA_SHINGLE: COUNTER++,
  INV_FLAME: COUNTER++,
  CHEST_FLAME: COUNTER++,
  INV_REIDITE: COUNTER++,
  CHEST_REIDITE: COUNTER++,
  HERB_LAVA: COUNTER++,
  LAVA_BUBBLE: COUNTER++,
  ASHES: COUNTER++,
  INV_REIDITE_SPEAR: COUNTER++,
  CRAFT_REIDITE_SPEAR: COUNTER++,
  CHEST_REIDITE_SPEAR: COUNTER++,
  INV_REIDITE_HELMET: COUNTER++,
  CRAFT_REIDITE_HELMET: COUNTER++,
  CHEST_REIDITE_HELMET: COUNTER++,
  INV_CARROT_SEED: COUNTER++,
  CRAFT_CARROT_SEED: COUNTER++,
  CHEST_CARROT_SEED: COUNTER++,
  CARROT_SEED_MOB: COUNTER++,
  PLANT_CARROT_DRIED: COUNTER++,
  DRIED_CARROT: COUNTER++,
  INV_CARROT: COUNTER++,
  CHEST_CARROT: COUNTER++,
  TOMATO_MINI: COUNTER++,
  DRIED_TOMATO_MINI: COUNTER++,
  INV_TOMATO_SEED: COUNTER++,
  CRAFT_TOMATO_SEED: COUNTER++,
  CHEST_TOMATO_SEED: COUNTER++,
  TOMATO_SEED_MOB: COUNTER++,
  PLANT_TOMATO_DRIED: COUNTER++,
  DRIED_TOMATO: COUNTER++,
  INV_TOMATO: COUNTER++,
  INV_WATERMELON_SEED: COUNTER++,
  CRAFT_WATERMELON_SEED: COUNTER++,
  CHEST_WATERMELON_SEED: COUNTER++,
  WATERMELON_SEED_MOB: COUNTER++,
  PLANT_WATERMELON_DRIED: COUNTER++,
  DRIED_WATERMELON: COUNTER++,
  INV_WATERMELON: COUNTER++,
  CHEST_WATERMELON: COUNTER++,
  CHEST_TOMATO: COUNTER++,
  INV_PITCHFORK: COUNTER++,
  CHEST_PITCHFORK: COUNTER++,
  CRAFT_PITCHFORK: COUNTER++,
  INV_PITCHFORK2: COUNTER++,
  CHEST_PITCHFORK2: COUNTER++,
  CRAFT_PITCHFORK2: COUNTER++,
  INV_ALOE_VERA_SEED: COUNTER++,
  CRAFT_ALOE_VERA_SEED: COUNTER++,
  CHEST_ALOE_VERA_SEED: COUNTER++,
  ALOE_VERA_SEED_MOB: COUNTER++,
  PLANT_ALOE_VERA_DRIED: COUNTER++,
  DRIED_ALOE_VERA: COUNTER++,
  INV_ALOE_VERA: COUNTER++,
  CHEST_ALOE_VERA: COUNTER++,
  CACTUS: COUNTER++,
  CRAFT_WOOD_DOOR_SPIKE: COUNTER++,
  INV_WOOD_DOOR_SPIKE: COUNTER++,
  CHEST_WOOD_DOOR_SPIKE: COUNTER++,
  CRAFT_STONE_DOOR_SPIKE: COUNTER++,
  INV_STONE_DOOR_SPIKE: COUNTER++,
  CHEST_STONE_DOOR_SPIKE: COUNTER++,
  CRAFT_GOLD_DOOR_SPIKE: COUNTER++,
  INV_GOLD_DOOR_SPIKE: COUNTER++,
  CHEST_GOLD_DOOR_SPIKE: COUNTER++,
  CRAFT_DIAMOND_DOOR_SPIKE: COUNTER++,
  INV_DIAMOND_DOOR_SPIKE: COUNTER++,
  CHEST_DIAMOND_DOOR_SPIKE: COUNTER++,
  CRAFT_AMETHYST_DOOR_SPIKE: COUNTER++,
  INV_AMETHYST_DOOR_SPIKE: COUNTER++,
  CHEST_AMETHYST_DOOR_SPIKE: COUNTER++,
  CRAFT_REIDITE_DOOR_SPIKE: COUNTER++,
  INV_REIDITE_DOOR_SPIKE: COUNTER++,
  CHEST_REIDITE_DOOR_SPIKE: COUNTER++,
  CRAFT_REIDITE_DOOR: COUNTER++,
  INV_REIDITE_DOOR: COUNTER++,
  CHEST_REIDITE_DOOR: COUNTER++,
  CRAFT_REIDITE_SPIKE: COUNTER++,
  INV_REIDITE_SPIKE: COUNTER++,
  CHEST_REIDITE_SPIKE: COUNTER++,
  CRAFT_REIDITE_WALL: COUNTER++,
  INV_REIDITE_WALL: COUNTER++,
  CHEST_REIDITE_WALL: COUNTER++,
  INV_PICK_REIDITE: COUNTER++,
  CHEST_PICK_REIDITE: COUNTER++,
  CRAFT_PICK_REIDITE: COUNTER++,
  GOLDEN_HEN: COUNTER++,
  GOLDEN_CHICKEN: COUNTER++,
  HURT_GOLDEN_HEN: COUNTER++,
  HURT_GOLDEN_CHICKEN: COUNTER++,
  RIVER: COUNTER++,
  RIVER_DECO: COUNTER++,
  RIVER_WAVE: COUNTER++,
  CRAFT_BOAT: COUNTER++,
  INV_BOAT: COUNTER++,
  CHEST_BOAT: COUNTER++,
  CRAFT_SLED: COUNTER++,
  INV_SLED: COUNTER++,
  CHEST_SLED: COUNTER++,
  PENGUIN: COUNTER++,
  HURT_PENGUIN: COUNTER++,
  INV_PENGUIN_FEATHER: COUNTER++,
  CHEST_PENGUIN_FEATHER: COUNTER++,
  INV_HAWK_FEATHER: COUNTER++,
  CHEST_HAWK_FEATHER: COUNTER++,
  INV_VULTURE_FEATHER: COUNTER++,
  CHEST_VULTURE_FEATHER: COUNTER++,
  FOG: COUNTER++,
  BOAR: COUNTER++,
  BOAR_TAMED: COUNTER++,
  BOAR_ATTACK: COUNTER++,
  HURT_BOAR: COUNTER++,
  INV_SADDLE: COUNTER++,
  CHEST_SADDLE: COUNTER++,
  CRAFT_SADDLE: COUNTER++,
  INV_MOUNT_BOAR: COUNTER++,
  CHEST_MOUNT_BOAR: COUNTER++,
  CRAFT_MOUNT_BOAR: COUNTER++,
  MARKER: COUNTER++,
  CRAB_BOSS_ATTACK: COUNTER++,
  CRAB_BOSS: COUNTER++,
  CRAB_BOSS_TAMED: COUNTER++,
  HURT_CRAB_BOSS: COUNTER++,
  HURT_CRAB_BOSS_CLAW_LEFT: COUNTER++,
  HURT_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
  CRAB_BOSS_CLAW_LEFT_ATTACK: COUNTER++,
  CRAB_BOSS_CLAW_LEFT: COUNTER++,
  CRAB_BOSS_CLAW_LEFT_TAMED: COUNTER++,
  CRAB_BOSS_CLAW_RIGHT_ATTACK: COUNTER++,
  CRAB_BOSS_CLAW_RIGHT: COUNTER++,
  CRAB_BOSS_CLAW_RIGHT_TAMED: COUNTER++,
  HEAL_CRAB_BOSS: COUNTER++,
  HEAL_CRAB_BOSS_CLAW_LEFT: COUNTER++,
  HEAL_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
  BABY_DRAGON_ATTACK: COUNTER++,
  BABY_DRAGON: COUNTER++,
  BABY_DRAGON_TAMED: COUNTER++,
  BABY_DRAGON_WING_LEFT_ATTACK: COUNTER++,
  BABY_DRAGON_WING_LEFT: COUNTER++,
  BABY_DRAGON_WING_LEFT_TAMED: COUNTER++,
  BABY_DRAGON_WING_RIGHT_ATTACK: COUNTER++,
  BABY_DRAGON_WING_RIGHT: COUNTER++,
  BABY_DRAGON_WING_RIGHT_TAMED: COUNTER++,
  HURT_BABY_DRAGON: COUNTER++,
  HURT_BABY_DRAGON_WING_LEFT: COUNTER++,
  HURT_BABY_DRAGON_WING_RIGHT: COUNTER++,
  INV_BABY_DRAGON: COUNTER++,
  CHEST_BABY_DRAGON: COUNTER++,
  CRAFT_BABY_DRAGON: COUNTER++,
  BABY_LAVA_ATTACK: COUNTER++,
  BABY_LAVA: COUNTER++,
  BABY_LAVA_TAMED: COUNTER++,
  BABY_LAVA_WING_LEFT_ATTACK: COUNTER++,
  BABY_LAVA_WING_LEFT: COUNTER++,
  BABY_LAVA_WING_LEFT_TAMED: COUNTER++,
  BABY_LAVA_WING_RIGHT_ATTACK: COUNTER++,
  BABY_LAVA_WING_RIGHT: COUNTER++,
  BABY_LAVA_WING_RIGHT_TAMED: COUNTER++,
  HURT_BABY_LAVA: COUNTER++,
  HURT_BABY_LAVA_WING_LEFT: COUNTER++,
  HURT_BABY_LAVA_WING_RIGHT: COUNTER++,
  INV_BABY_LAVA: COUNTER++,
  CHEST_BABY_LAVA: COUNTER++,
  CRAFT_BABY_LAVA: COUNTER++,
  HAWK_ATTACK: COUNTER++,
  HAWK: COUNTER++,
  HAWK_TAMED: COUNTER++,
  HAWK_WING_LEFT_ATTACK: COUNTER++,
  HAWK_WING_LEFT: COUNTER++,
  HAWK_WING_LEFT_TAMED: COUNTER++,
  HAWK_WING_RIGHT_ATTACK: COUNTER++,
  HAWK_WING_RIGHT: COUNTER++,
  HAWK_WING_RIGHT_TAMED: COUNTER++,
  HURT_HAWK: COUNTER++,
  HURT_HAWK_WING_LEFT: COUNTER++,
  HURT_HAWK_WING_RIGHT: COUNTER++,
  INV_HAWK: COUNTER++,
  CHEST_HAWK: COUNTER++,
  CRAFT_HAWK: COUNTER++,
  HAWK_GROUND: COUNTER++,
  HAWK_GROUND_ATTACK: COUNTER++,
  HURT_HAWK_GROUND: COUNTER++,
  CRAFT_PLANE: COUNTER++,
  INV_PLANE: COUNTER++,
  CHEST_PLANE: COUNTER++,
  VULTURE_ATTACK: COUNTER++,
  VULTURE: COUNTER++,
  VULTURE_TAMED: COUNTER++,
  VULTURE_WING_LEFT_ATTACK: COUNTER++,
  VULTURE_WING_LEFT: COUNTER++,
  VULTURE_WING_LEFT_TAMED: COUNTER++,
  VULTURE_WING_RIGHT_ATTACK: COUNTER++,
  VULTURE_WING_RIGHT: COUNTER++,
  VULTURE_WING_RIGHT_TAMED: COUNTER++,
  HURT_VULTURE: COUNTER++,
  HURT_VULTURE_WING_LEFT: COUNTER++,
  HURT_VULTURE_WING_RIGHT: COUNTER++,
  INV_VULTURE: COUNTER++,
  CHEST_VULTURE: COUNTER++,
  CRAFT_VULTURE: COUNTER++,
  VULTURE_GROUND: COUNTER++,
  VULTURE_GROUND_ATTACK: COUNTER++,
  HURT_VULTURE_GROUND: COUNTER++,
  INV_TURBAN1: COUNTER++,
  CRAFT_TURBAN1: COUNTER++,
  CHEST_TURBAN1: COUNTER++,
  INV_TURBAN2: COUNTER++,
  CRAFT_TURBAN2: COUNTER++,
  CHEST_TURBAN2: COUNTER++,
  SCORPION: COUNTER++,
  HURT_SCORPION: COUNTER++,
  SCORPION_HAND_LEFT: COUNTER++,
  SCORPION_HAND_RIGHT: COUNTER++,
  HURT_SCORPION_HAND_LEFT: COUNTER++,
  HURT_SCORPION_HAND_RIGHT: COUNTER++,
  SAND_WORM_GROUND: ["#E9CF96", "#144940"],
  HURT_SAND_WORM0: COUNTER++,
  SAND_WORM1: COUNTER++,
  HURT_SAND_WORM1: COUNTER++,
  SAND_WORM2: COUNTER++,
  HURT_SAND_WORM2: COUNTER++,
  INV_CACTUS: COUNTER++,
  CHEST_CACTUS: COUNTER++,
  INV_EMERALD: COUNTER++,
  CHEST_EMERALD: COUNTER++,
  INV_PITCHFORK_PART: COUNTER++,
  CHEST_PITCHFORK_PART: COUNTER++,
  INV_PILOT_GLASSES: COUNTER++,
  CHEST_PILOT_GLASSES: COUNTER++,
  INV_FUR_BOAR: COUNTER++,
  CHEST_FUR_BOAR: COUNTER++,
  INV_FIREFLY: COUNTER++,
  CHEST_FIREFLY: COUNTER++,
  INV_WOOD_ARROW: COUNTER++,
  CHEST_WOOD_ARROW: COUNTER++,
  CRAFT_WOOD_ARROW: COUNTER++,
  INV_STONE_ARROW: COUNTER++,
  CHEST_STONE_ARROW: COUNTER++,
  CRAFT_STONE_ARROW: COUNTER++,
  INV_GOLD_ARROW: COUNTER++,
  CHEST_GOLD_ARROW: COUNTER++,
  CRAFT_GOLD_ARROW: COUNTER++,
  INV_DIAMOND_ARROW: COUNTER++,
  CHEST_DIAMOND_ARROW: COUNTER++,
  CRAFT_DIAMOND_ARROW: COUNTER++,
  INV_AMETHYST_ARROW: COUNTER++,
  CHEST_AMETHYST_ARROW: COUNTER++,
  CRAFT_AMETHYST_ARROW: COUNTER++,
  INV_REIDITE_ARROW: COUNTER++,
  CHEST_REIDITE_ARROW: COUNTER++,
  CRAFT_REIDITE_ARROW: COUNTER++,
  INV_DRAGON_ARROW: COUNTER++,
  CHEST_DRAGON_ARROW: COUNTER++,
  CRAFT_DRAGON_ARROW: COUNTER++,
  INV_SANDWORM_JUICE: COUNTER++,
  CHEST_SANDWORM_JUICE: COUNTER++,
  INV_CRAB_BOSS: COUNTER++,
  CHEST_CRAB_BOSS: COUNTER++,
  CRAFT_CRAB_BOSS: COUNTER++,
  EMERALD_MACHINE_GROUND: COUNTER++,
  EMERALD_MACHINE_HOLE: COUNTER++,
  EMERALD_MACHINE_ROTATE: COUNTER++,
  INV_EMERALD_MACHINE: COUNTER++,
  CRAFT_EMERALD_MACHINE: COUNTER++,
  CHEST_EMERALD_MACHINE: COUNTER++,
  EXTRACTOR_MACHINE0_STONE: COUNTER++,
  INV_EXTRACTOR_MACHINE_STONE: COUNTER++,
  CRAFT_EXTRACTOR_MACHINE_STONE: COUNTER++,
  CHEST_EXTRACTOR_MACHINE_STONE: COUNTER++,
  EXTRACTOR_MACHINE0_GOLD: COUNTER++,
  INV_EXTRACTOR_MACHINE_GOLD: COUNTER++,
  CRAFT_EXTRACTOR_MACHINE_GOLD: COUNTER++,
  CHEST_EXTRACTOR_MACHINE_GOLD: COUNTER++,
  EXTRACTOR_MACHINE0_DIAMOND: COUNTER++,
  INV_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  CRAFT_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  CHEST_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  EXTRACTOR_MACHINE0_AMETHYST: COUNTER++,
  INV_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  CRAFT_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  CHEST_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  EXTRACTOR_MACHINE0_REIDITE: COUNTER++,
  INV_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  CRAFT_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  CHEST_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  MAMMOTH: COUNTER++,
  HURT_MAMMOTH: COUNTER++,
  BABY_MAMMOTH: COUNTER++,
  BABY_MAMMOTH_TAMED: COUNTER++,
  BABY_MAMMOTH_ATTACK: COUNTER++,
  HURT_BABY_MAMMOTH: COUNTER++,
  INV_BABY_MAMMOTH: COUNTER++,
  CHEST_BABY_MAMMOTH: COUNTER++,
  CRAFT_BABY_MAMMOTH: COUNTER++,
  INV_FLOWER_HAT: COUNTER++,
  CRAFT_FLOWER_HAT: COUNTER++,
  CHEST_FLOWER_HAT: COUNTER++,
  INV_FUR_HAT: COUNTER++,
  CRAFT_FUR_HAT: COUNTER++,
  CHEST_FUR_HAT: COUNTER++,
  INV_FUR_MAMMOTH: COUNTER++,
  CHEST_FUR_MAMMOTH: COUNTER++,
  CRAFT_WOOD_TOWER: COUNTER++,
  INV_WOOD_TOWER: COUNTER++,
  CHEST_WOOD_TOWER: COUNTER++,
  CRAFT_WOOD_SHIELD: COUNTER++,
  INV_WOOD_SHIELD: COUNTER++,
  CHEST_WOOD_SHIELD: COUNTER++,
  CRAFT_STONE_SHIELD: COUNTER++,
  INV_STONE_SHIELD: COUNTER++,
  CHEST_STONE_SHIELD: COUNTER++,
  CRAFT_GOLD_SHIELD: COUNTER++,
  INV_GOLD_SHIELD: COUNTER++,
  CHEST_GOLD_SHIELD: COUNTER++,
  CRAFT_DIAMOND_SHIELD: COUNTER++,
  INV_DIAMOND_SHIELD: COUNTER++,
  CHEST_DIAMOND_SHIELD: COUNTER++,
  CRAFT_AMETHYST_SHIELD: COUNTER++,
  INV_AMETHYST_SHIELD: COUNTER++,
  CHEST_AMETHYST_SHIELD: COUNTER++,
  CRAFT_REIDITE_SHIELD: COUNTER++,
  INV_REIDITE_SHIELD: COUNTER++,
  CHEST_REIDITE_SHIELD: COUNTER++
};
var COUNTER = 0;
var CRAFT = {
  FIRE: COUNTER++,
  BIG_FIRE: COUNTER++,
  FURNACE: COUNTER++,
  WORKBENCH: COUNTER++,
  PICK_WOOD: COUNTER++,
  PICK: COUNTER++,
  PICK_GOLD: COUNTER++,
  PICK_DIAMOND: COUNTER++,
  PICK_AMETHYST: COUNTER++,
  PICK_REIDITE: COUNTER++,
  HAMMER: COUNTER++,
  HAMMER_GOLD: COUNTER++,
  HAMMER_DIAMOND: COUNTER++,
  HAMMER_AMETHYST: COUNTER++,
  HAMMER_REIDITE: COUNTER++,
  SUPER_HAMMER: COUNTER++,
  SHOVEL: COUNTER++,
  SHOVEL_GOLD: COUNTER++,
  SHOVEL_DIAMOND: COUNTER++,
  SHOVEL_AMETHYST: COUNTER++,
  WATERING_CAN: COUNTER++,
  WATERING_CAN_FULL: COUNTER++,
  PITCHFORK: COUNTER++,
  PITCHFORK2: COUNTER++,
  BOOK: COUNTER++,
  WOOD_SPEAR: COUNTER++,
  SPEAR: COUNTER++,
  GOLD_SPEAR: COUNTER++,
  DIAMOND_SPEAR: COUNTER++,
  AMETHYST_SPEAR: COUNTER++,
  REIDITE_SPEAR: COUNTER++,
  DRAGON_SPEAR: COUNTER++,
  LAVA_SPEAR: COUNTER++,
  CRAB_SPEAR: COUNTER++,
  SWORD_WOOD: COUNTER++,
  SWORD: COUNTER++,
  SWORD_GOLD: COUNTER++,
  SWORD_DIAMOND: COUNTER++,
  SWORD_AMETHYST: COUNTER++,
  REIDITE_SWORD: COUNTER++,
  SEED: COUNTER++,
  WHEAT_SEED: COUNTER++,
  PUMPKIN_SEED: COUNTER++,
  GARLIC_SEED: COUNTER++,
  THORNBUSH_SEED: COUNTER++,
  CARROT_SEED: COUNTER++,
  TOMATO_SEED: COUNTER++,
  WATERMELON_SEED: COUNTER++,
  ALOE_VERA_SEED: COUNTER++,
  COOKED_MEAT: COUNTER++,
  FOODFISH_COOKED: COUNTER++,
  BREAD: COUNTER++,
  COOKIE: COUNTER++,
  CAKE: COUNTER++,
  BANDAGE: COUNTER++,
  WALL: COUNTER++,
  STONE_WALL: COUNTER++,
  GOLD_WALL: COUNTER++,
  DIAMOND_WALL: COUNTER++,
  AMETHYST_WALL: COUNTER++,
  REIDITE_WALL: COUNTER++,
  WOOD_DOOR: COUNTER++,
  STONE_DOOR: COUNTER++,
  GOLD_DOOR: COUNTER++,
  DIAMOND_DOOR: COUNTER++,
  AMETHYST_DOOR: COUNTER++,
  REIDITE_DOOR: COUNTER++,
  SPIKE: COUNTER++,
  STONE_SPIKE: COUNTER++,
  GOLD_SPIKE: COUNTER++,
  DIAMOND_SPIKE: COUNTER++,
  AMETHYST_SPIKE: COUNTER++,
  REIDITE_SPIKE: COUNTER++,
  WOOD_DOOR_SPIKE: COUNTER++,
  STONE_DOOR_SPIKE: COUNTER++,
  GOLD_DOOR_SPIKE: COUNTER++,
  DIAMOND_DOOR_SPIKE: COUNTER++,
  AMETHYST_DOOR_SPIKE: COUNTER++,
  REIDITE_DOOR_SPIKE: COUNTER++,
  CHEST: COUNTER++,
  EXPLORER_HAT: COUNTER++,
  PIRATE_HAT: COUNTER++,
  PILOT_HELMET: COUNTER++,
  EARMUFFS: COUNTER++,
  COAT: COUNTER++,
  CAP_SCARF: COUNTER++,
  FUR_HAT: COUNTER++,
  WOOD_HELMET: COUNTER++,
  STONE_HELMET: COUNTER++,
  GOLD_HELMET: COUNTER++,
  DIAMOND_HELMET: COUNTER++,
  AMETHYST_HELMET: COUNTER++,
  REIDITE_HELMET: COUNTER++,
  DIVING_MASK: COUNTER++,
  SUPER_DIVING_SUIT: COUNTER++,
  DIAMOND_PROTECTION: COUNTER++,
  AMETHYST_PROTECTION: COUNTER++,
  REIDITE_PROTECTION: COUNTER++,
  TURBAN1: COUNTER++,
  TURBAN2: COUNTER++,
  BAG: COUNTER++,
  PAPER: COUNTER++,
  BLUE_CORD: COUNTER++,
  LOCK: COUNTER++,
  LOCKPICK: COUNTER++,
  TOTEM: COUNTER++,
  BRIDGE: COUNTER++,
  ROOF: COUNTER++,
  WOOD_TOWER: COUNTER++,
  PLOT: COUNTER++,
  BOTTLE_EMPTY: COUNTER++,
  BOTTLE_FULL: COUNTER++,
  BOTTLE_FULL_2: COUNTER++,
  BOTTLE_FULL_3: COUNTER++,
  WINDMILL: COUNTER++,
  RESURRECTION: COUNTER++,
  EMERALD_MACHINE: COUNTER++,
  EXTRACTOR_MACHINE_STONE: COUNTER++,
  EXTRACTOR_MACHINE_GOLD: COUNTER++,
  EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  SPANNER: COUNTER++,
  MACHETE: COUNTER++,
  BREAD_OVEN: COUNTER++,
  SANDWICH: COUNTER++,
  DRAGON_HELMET: COUNTER++,
  LAVA_HELMET: COUNTER++,
  CROWN_CRAB: COUNTER++,
  DRAGON_SWORD: COUNTER++,
  LAVA_SWORD: COUNTER++,
  WOOD_BOW: COUNTER++,
  WOOD_ARROW: COUNTER++,
  STONE_BOW: COUNTER++,
  STONE_ARROW: COUNTER++,
  GOLD_BOW: COUNTER++,
  GOLD_ARROW: COUNTER++,
  DIAMOND_BOW: COUNTER++,
  DIAMOND_ARROW: COUNTER++,
  AMETHYST_BOW: COUNTER++,
  AMETHYST_ARROW: COUNTER++,
  REIDITE_BOW: COUNTER++,
  REIDITE_ARROW: COUNTER++,
  DRAGON_BOW: COUNTER++,
  DRAGON_ARROW: COUNTER++,
  WOOD_SHIELD: COUNTER++,
  STONE_SHIELD: COUNTER++,
  GOLD_SHIELD: COUNTER++,
  DIAMOND_SHIELD: COUNTER++,
  AMETHYST_SHIELD: COUNTER++,
  REIDITE_SHIELD: COUNTER++,
  CROWN_GREEN: COUNTER++,
  CROWN_ORANGE: COUNTER++,
  CROWN_BLUE: COUNTER++,
  HOOD: COUNTER++,
  PEASANT: COUNTER++,
  WINTER_HOOD: COUNTER++,
  WINTER_PEASANT: COUNTER++,
  BUCKET_FULL: COUNTER++,
  BUCKET_EMPTY: COUNTER++,
  WELL: COUNTER++,
  SIGN: COUNTER++,
  BED: COUNTER++,
  BOAT: COUNTER++,
  SLED: COUNTER++,
  SADDLE: COUNTER++,
  PLANE: COUNTER++,
  WITCH: COUNTER++,
  WAND1: COUNTER++,
  WAND2: COUNTER++,
  NIMBUS: COUNTER++
};
var COUNTER = 0;
var INV = {
  SWORD: COUNTER++,
  PICK: COUNTER++,
  FUR: COUNTER++,
  PICK_GOLD: COUNTER++,
  PICK_DIAMOND: COUNTER++,
  SWORD_GOLD: COUNTER++,
  SWORD_DIAMOND: COUNTER++,
  HAND: COUNTER++,
  PICK_WOOD: COUNTER++,
  PIRATE_SWORD: COUNTER++,
  EARMUFFS: COUNTER++,
  COAT: COUNTER++,
  WOOD_SPEAR: COUNTER++,
  SPEAR: COUNTER++,
  GOLD_SPEAR: COUNTER++,
  DIAMOND_SPEAR: COUNTER++,
  DRAGON_SPEAR: COUNTER++,
  LAVA_SPEAR: COUNTER++,
  CRAB_SPEAR: COUNTER++,
  REIDITE_SWORD: COUNTER++,
  DIAMOND_PROTECTION: COUNTER++,
  AMETHYST_PROTECTION: COUNTER++,
  REIDITE_PROTECTION: COUNTER++,
  EXPLORER_HAT: COUNTER++,
  PIRATE_HAT: COUNTER++,
  STONE_HELMET: COUNTER++,
  GOLD_HELMET: COUNTER++,
  DIAMOND_HELMET: COUNTER++,
  BOOK: COUNTER++,
  BAG: COUNTER++,
  SWORD_AMETHYST: COUNTER++,
  PICK_AMETHYST: COUNTER++,
  PICK_REIDITE: COUNTER++,
  AMETHYST_SPEAR: COUNTER++,
  REIDITE_SPEAR: COUNTER++,
  HAMMER: COUNTER++,
  HAMMER_GOLD: COUNTER++,
  HAMMER_DIAMOND: COUNTER++,
  HAMMER_AMETHYST: COUNTER++,
  HAMMER_REIDITE: COUNTER++,
  CAP_SCARF: COUNTER++,
  CHRISTMAS_HAT: COUNTER++,
  ELF_HAT: COUNTER++,
  AMETHYST_HELMET: COUNTER++,
  REIDITE_HELMET: COUNTER++,
  SUPER_HAMMER: COUNTER++,
  SHOVEL: COUNTER++,
  SUPER_DIVING_SUIT: COUNTER++,
  DIVING_MASK: COUNTER++,
  WATERING_CAN_FULL: COUNTER++,
  SHOVEL_GOLD: COUNTER++,
  SHOVEL_DIAMOND: COUNTER++,
  SHOVEL_AMETHYST: COUNTER++,
  PITCHFORK: COUNTER++,
  PITCHFORK2: COUNTER++,
  SPANNER: COUNTER++,
  MACHETE: COUNTER++,
  SWORD_WOOD: COUNTER++,
  WOOD_HELMET: COUNTER++,
  DRAGON_HELMET: COUNTER++,
  LAVA_HELMET: COUNTER++,
  CROWN_CRAB: COUNTER++,
  DRAGON_SWORD: COUNTER++,
  LAVA_SWORD: COUNTER++,
  WOOD_BOW: COUNTER++,
  STONE_BOW: COUNTER++,
  GOLD_BOW: COUNTER++,
  DIAMOND_BOW: COUNTER++,
  AMETHYST_BOW: COUNTER++,
  REIDITE_BOW: COUNTER++,
  DRAGON_BOW: COUNTER++,
  WOOD_SHIELD: COUNTER++,
  STONE_SHIELD: COUNTER++,
  GOLD_SHIELD: COUNTER++,
  DIAMOND_SHIELD: COUNTER++,
  AMETHYST_SHIELD: COUNTER++,
  REIDITE_SHIELD: COUNTER++,
  CROWN_GREEN: COUNTER++,
  CROWN_ORANGE: COUNTER++,
  CROWN_BLUE: COUNTER++,
  TURBAN1: COUNTER++,
  TURBAN2: COUNTER++,
  PILOT_HELMET: COUNTER++,
  HOOD: COUNTER++,
  PEASANT: COUNTER++,
  WINTER_HOOD: COUNTER++,
  WINTER_PEASANT: COUNTER++,
  FLOWER_HAT: COUNTER++,
  FUR_HAT: COUNTER++,
  SADDLE: COUNTER++,
  WITCH: COUNTER++,
  NIMBUS: COUNTER++,
  WAND1: COUNTER++,
  WAND2: COUNTER++,
  FIREFLY: COUNTER++,
  WOOD_ARROW: COUNTER++,
  STONE_ARROW: COUNTER++,
  GOLD_ARROW: COUNTER++,
  DIAMOND_ARROW: COUNTER++,
  AMETHYST_ARROW: COUNTER++,
  REIDITE_ARROW: COUNTER++,
  DRAGON_ARROW: COUNTER++,
  STONE: COUNTER++,
  WOOD: COUNTER++,
  PLANT: COUNTER++,
  GOLD: COUNTER++,
  DIAMOND: COUNTER++,
  FIRE: COUNTER++,
  WORKBENCH: COUNTER++,
  SEED: COUNTER++,
  MEAT: COUNTER++,
  COOKED_MEAT: COUNTER++,
  BIG_FIRE: COUNTER++,
  FURNACE: COUNTER++,
  PAPER: COUNTER++,
  AMETHYST: COUNTER++,
  AMETHYST_WALL: COUNTER++,
  AMETHYST_SPIKE: COUNTER++,
  AMETHYST_DOOR: COUNTER++,
  BRIDGE: COUNTER++,
  SAND: COUNTER++,
  BOTTLE_FULL: COUNTER++,
  BOTTLE_EMPTY: COUNTER++,
  KRAKEN_SKIN: COUNTER++,
  WATERING_CAN: COUNTER++,
  FLOUR: COUNTER++,
  WHEAT_SEED: COUNTER++,
  COOKIE: COUNTER++,
  WILD_WHEAT: COUNTER++,
  WINDMILL: COUNTER++,
  CAKE: COUNTER++,
  FOODFISH: COUNTER++,
  FOODFISH_COOKED: COUNTER++,
  SCALES: COUNTER++,
  GROUND: COUNTER++,
  PLOT: COUNTER++,
  ICE: COUNTER++,
  BREAD: COUNTER++,
  BREAD_OVEN: COUNTER++,
  SANDWICH: COUNTER++,
  FUR_WINTER: COUNTER++,
  BLUE_CORD: COUNTER++,
  LOCK: COUNTER++,
  DRAGON_HEART: COUNTER++,
  LAVA_HEART: COUNTER++,
  RESURRECTION: COUNTER++,
  EMERALD_MACHINE: COUNTER++,
  EXTRACTOR_MACHINE_STONE: COUNTER++,
  EXTRACTOR_MACHINE_GOLD: COUNTER++,
  EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
  EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
  EXTRACTOR_MACHINE_REIDITE: COUNTER++,
  LOCKPICK: COUNTER++,
  TOTEM: COUNTER++,
  SPIKE: COUNTER++,
  CORD: COUNTER++,
  WALL: COUNTER++,
  STONE_WALL: COUNTER++,
  GOLD_WALL: COUNTER++,
  DIAMOND_WALL: COUNTER++,
  WOOD_DOOR: COUNTER++,
  CHEST: COUNTER++,
  STONE_SPIKE: COUNTER++,
  GOLD_SPIKE: COUNTER++,
  DIAMOND_SPIKE: COUNTER++,
  STONE_DOOR: COUNTER++,
  GOLD_DOOR: COUNTER++,
  DIAMOND_DOOR: COUNTER++,
  FUR_WOLF: COUNTER++,
  GEMME_GREEN: COUNTER++,
  GEMME_ORANGE: COUNTER++,
  GEMME_BLUE: COUNTER++,
  SPECIAL_FUR: COUNTER++,
  SPECIAL_FUR_2: COUNTER++,
  BUCKET_FULL: COUNTER++,
  BUCKET_EMPTY: COUNTER++,
  WELL: COUNTER++,
  SIGN: COUNTER++,
  DRAGON_CUBE: COUNTER++,
  DRAGON_ORB: COUNTER++,
  LAVA_CUBE: COUNTER++,
  LAVA_ORB: COUNTER++,
  PUMPKIN_SEED: COUNTER++,
  PUMPKIN: COUNTER++,
  ROOF: COUNTER++,
  GARLIC_SEED: COUNTER++,
  GARLIC: COUNTER++,
  THORNBUSH_SEED: COUNTER++,
  THORNBUSH: COUNTER++,
  BANDAGE: COUNTER++,
  CRAB_STICK: COUNTER++,
  CRAB_LOOT: COUNTER++,
  BED: COUNTER++,
  SUGAR_CAN: COUNTER++,
  CANDY: COUNTER++,
  GARLAND: COUNTER++,
  REIDITE: COUNTER++,
  FLAME: COUNTER++,
  CARROT_SEED: COUNTER++,
  CARROT: COUNTER++,
  TOMATO_SEED: COUNTER++,
  TOMATO: COUNTER++,
  WATERMELON_SEED: COUNTER++,
  WATERMELON: COUNTER++,
  ALOE_VERA_SEED: COUNTER++,
  ALOE_VERA: COUNTER++,
  WOOD_DOOR_SPIKE: COUNTER++,
  STONE_DOOR_SPIKE: COUNTER++,
  GOLD_DOOR_SPIKE: COUNTER++,
  DIAMOND_DOOR_SPIKE: COUNTER++,
  AMETHYST_DOOR_SPIKE: COUNTER++,
  REIDITE_WALL: COUNTER++,
  REIDITE_DOOR: COUNTER++,
  REIDITE_SPIKE: COUNTER++,
  REIDITE_DOOR_SPIKE: COUNTER++,
  WOOD_TOWER: COUNTER++,
  PENGUIN_FEATHER: COUNTER++,
  BOAT: COUNTER++,
  SLED: COUNTER++,
  MOUNT_BOAR: COUNTER++,
  CRAB_BOSS: COUNTER++,
  BABY_DRAGON: COUNTER++,
  BABY_LAVA: COUNTER++,
  HAWK: COUNTER++,
  PLANE: COUNTER++,
  HAWK_FEATHER: COUNTER++,
  VULTURE_FEATHER: COUNTER++,
  CACTUS: COUNTER++,
  EMERALD: COUNTER++,
  PITCHFORK_PART: COUNTER++,
  PILOT_GLASSES: COUNTER++,
  FUR_BOAR: COUNTER++,
  SANDWORM_JUICE: COUNTER++,
  BABY_MAMMOTH: COUNTER++,
  FUR_MAMMOTH: COUNTER++
};
var CATEGORY = {
  TOOLS: 0,
  WEAPONS: 1,
  CLOTHES: 2,
  FOODS: 3,
  UTILS: 4,
  BASES: 5
};
var INV_INFOS = [];
INV_INFOS[INV.WOOD] = {
  name: "Wood",
  img: SPRITE.INV_WOOD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.STONE] = {
  name: "Stone",
  img: SPRITE.INV_STONE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GOLD] = {
  name: "Gold",
  img: SPRITE.INV_GOLD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DIAMOND] = {
  name: "Diamond",
  img: SPRITE.INV_DIAMOND,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.AMETHYST] = {
  name: "Amethyst",
  img: SPRITE.INV_AMETHYST,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FUR] = {
  name: "Rabbit fur",
  img: SPRITE.INV_FUR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FUR_WOLF] = {
  name: "Wolf fur",
  img: SPRITE.INV_FUR_WOLF,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FUR_BOAR] = {
  name: "Boar fur",
  img: SPRITE.INV_FUR_BOAR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FIREFLY] = {
  name: "Firefly",
  img: SPRITE.INV_FIREFLY,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WOOD_ARROW] = {
  name: "Wood arrow",
  img: SPRITE.INV_WOOD_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_ARROW] = {
  name: "Stone arrow",
  img: SPRITE.INV_STONE_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_ARROW] = {
  name: "Gold arrow",
  img: SPRITE.INV_GOLD_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_ARROW] = {
  name: "Diamond arrow",
  img: SPRITE.INV_DIAMOND_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_ARROW] = {
  name: "Amethyst arrow",
  img: SPRITE.INV_AMETHYST_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_ARROW] = {
  name: "Reidite arrow",
  img: SPRITE.INV_REIDITE_ARROW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DRAGON_ARROW] = {
  name: "Dragon arrow",
  img: SPRITE.INV_DRAGON_ARROW,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FUR_WINTER] = {
  name: "Winter fur",
  img: SPRITE.INV_FUR_WINTER,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FUR_MAMMOTH] = {
  name: "Fur mammoth",
  img: SPRITE.INV_FUR_MAMMOTH,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CORD] = {
  name: "Web",
  img: SPRITE.INV_CORD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.MEAT] = {
  name: "Meat",
  img: SPRITE.INV_MEAT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FOODFISH] = {
  name: "Fish",
  img: SPRITE.INV_FOODFISH,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.KRAKEN_SKIN] = {
  name: "Kraken skin",
  img: SPRITE.INV_KRAKEN_SKIN,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SCALES] = {
  name: "Piranha scales",
  img: SPRITE.INV_SCALES,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.ICE] = {
  name: "Ice",
  img: SPRITE.INV_ICE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SAND] = {
  name: "Sand",
  img: SPRITE.INV_SAND,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GROUND] = {
  name: "Dirt",
  img: SPRITE.INV_GROUND,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PLANT] = {
  name: "Berrie",
  img: SPRITE.INV_PLANT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FLOUR] = {
  name: "Flour",
  img: SPRITE.INV_FLOUR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WILD_WHEAT] = {
  name: "Flour",
  img: SPRITE.INV_WILD_WHEAT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SPECIAL_FUR] = {
  name: "Special fur peasant",
  img: SPRITE.INV_SPECIAL_FUR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SPECIAL_FUR_2] = {
  name: "Special fur hood",
  img: SPRITE.INV_SPECIAL_FUR_2,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PUMPKIN] = {
  name: "Pumpkin",
  img: SPRITE.INV_PUMPKIN,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GARLIC] = {
  name: "Garlic",
  img: SPRITE.INV_GARLIC,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.THORNBUSH] = {
  name: "Thornbush",
  img: SPRITE.INV_THORNBUSH,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CARROT] = {
  name: "Carrot",
  img: SPRITE.INV_CARROT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.TOMATO] = {
  name: "Tomato",
  img: SPRITE.INV_TOMATO,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WATERMELON] = {
  name: "Watermelon",
  img: SPRITE.INV_WATERMELON,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.ALOE_VERA] = {
  name: "Aloe Vera",
  img: SPRITE.INV_ALOE_VERA,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PENGUIN_FEATHER] = {
  name: "Penguin Feather",
  img: SPRITE.INV_PENGUIN_FEATHER,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.HAWK_FEATHER] = {
  name: "Hawk Feather",
  img: SPRITE.INV_HAWK_FEATHER,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.VULTURE_FEATHER] = {
  name: "Vulture Feather",
  img: SPRITE.INV_VULTURE_FEATHER,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CACTUS] = {
  name: "Cactus",
  img: SPRITE.INV_CACTUS,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PILOT_GLASSES] = {
  name: "Cactus",
  img: SPRITE.INV_PILOT_GLASSES,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PITCHFORK_PART] = {
  name: "Pitchfork Part",
  img: SPRITE.INV_PITCHFORK_PART,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SANDWORM_JUICE] = {
  name: "Emerald Machine",
  img: SPRITE.INV_SANDWORM_JUICE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.EMERALD] = {
  name: "Emerald",
  img: SPRITE.INV_EMERALD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CHRISTMAS_HAT] = {
  name: "Christmas Hat",
  img: SPRITE.INV_CHRISTMAS_HAT,
  recycle: 0
};
INV_INFOS[INV.ELF_HAT] = {
  name: "Elf Hat",
  img: SPRITE.INV_ELF_HAT,
  recycle: 0
};
INV_INFOS[INV.GARLAND] = {
  name: "Garland",
  img: SPRITE.INV_GARLAND,
  recycle: 0,
  grid: 0
};
INV_INFOS[INV.CANDY] = {
  name: "Candy",
  img: SPRITE.INV_CANDY,
  recycle: 0
};
INV_INFOS[INV.SUGAR_CAN] = {
  name: "Sugar Cane",
  img: SPRITE.INV_SUGAR_CAN,
  recycle: 0
};
INV_INFOS[INV.PIRATE_SWORD] = {
  name: "Pirate Sword",
  img: SPRITE.INV_PIRATE_SWORD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CRAB_STICK] = {
  name: "Crab Stick",
  img: SPRITE.INV_CRAB_STICK,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.REIDITE] = {
  name: "Reidite",
  img: SPRITE.INV_REIDITE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FLAME] = {
  name: "Flame",
  img: SPRITE.INV_FLAME,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FIRE] = {
  name: "Campfire",
  img: SPRITE.CRAFT_FIRE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BED] = {
  name: "Bed",
  img: SPRITE.CRAFT_BED,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WORKBENCH] = {
  name: "Workbench",
  img: SPRITE.CRAFT_WORK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SWORD] = {
  name: "Stone sword",
  img: SPRITE.CRAFT_SWORD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PICK] = {
  name: "Stone pick",
  img: SPRITE.CRAFT_PICK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SEED] = {
  name: "Berries bush",
  img: SPRITE.CRAFT_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PICK_GOLD] = {
  name: "Gold pick",
  img: SPRITE.CRAFT_PICK_GOLD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PICK_DIAMOND] = {
  name: "Diamond pick",
  img: SPRITE.CRAFT_PICK_DIAMOND,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SWORD_WOOD] = {
  name: "Wood sword",
  img: SPRITE.CRAFT_SWORD_WOOD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SWORD_GOLD] = {
  name: "Gold sword",
  img: SPRITE.CRAFT_SWORD_GOLD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SWORD_DIAMOND] = {
  name: "Diamond sword",
  img: SPRITE.CRAFT_SWORD_DIAMOND,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PICK_WOOD] = {
  name: "Wood pick",
  img: SPRITE.CRAFT_PICK_WOOD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WALL] = {
  name: "Wood wall",
  img: SPRITE.CRAFT_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SPIKE] = {
  name: "Wood spike",
  img: SPRITE.CRAFT_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.COOKED_MEAT] = {
  name: "Cooked meat",
  img: SPRITE.CRAFT_COOKED_MEAT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BIG_FIRE] = {
  name: "Big campfire",
  img: SPRITE.CRAFT_BIG_FIRE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BANDAGE] = {
  name: "Bandage",
  img: SPRITE.CRAFT_BANDAGE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_WALL] = {
  name: "Stone wall",
  img: SPRITE.CRAFT_STONE_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_WALL] = {
  name: "Gold wall",
  img: SPRITE.CRAFT_GOLD_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_WALL] = {
  name: "Diamond wall",
  img: SPRITE.CRAFT_DIAMOND_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WOOD_DOOR] = {
  name: "Wood door",
  img: SPRITE.CRAFT_DOOR_WOOD_CLOSE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.CHEST] = {
  name: "Chest",
  img: SPRITE.CRAFT_CHEST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_SPIKE] = {
  name: "Stone spike",
  img: SPRITE.CRAFT_STONE_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_SPIKE] = {
  name: "Gold spike",
  img: SPRITE.CRAFT_GOLD_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_SPIKE] = {
  name: "Diamond spike",
  img: SPRITE.CRAFT_DIAMOND_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_DOOR] = {
  name: "Stone door",
  img: SPRITE.CRAFT_DOOR_STONE_CLOSE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_DOOR] = {
  name: "Gold door",
  img: SPRITE.CRAFT_DOOR_GOLD_CLOSE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_DOOR] = {
  name: "Diamond door",
  img: SPRITE.CRAFT_DOOR_DIAMOND_CLOSE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EARMUFFS] = {
  name: "Chapka",
  img: SPRITE.CRAFT_EARMUFFS,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.COAT] = {
  name: "Big Chapka",
  img: SPRITE.CRAFT_COAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WOOD_SPEAR] = {
  name: "Wood spear",
  img: SPRITE.CRAFT_WOOD_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SPEAR] = {
  name: "Stone spear",
  img: SPRITE.CRAFT_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_SPEAR] = {
  name: "Gold spear",
  img: SPRITE.CRAFT_GOLD_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_SPEAR] = {
  name: "Diamond spear",
  img: SPRITE.CRAFT_DIAMOND_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DRAGON_SPEAR] = {
  name: "Dragon spear",
  img: SPRITE.CRAFT_DRAGON_SPEAR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_SPEAR] = {
  name: "Dragon spear",
  img: SPRITE.CRAFT_LAVA_SPEAR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CRAB_SPEAR] = {
  name: "Crab spear",
  img: SPRITE.CRAFT_CRAB_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.CRAB_LOOT] = {
  name: "Crab loot",
  img: SPRITE.INV_CRAB_LOOT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FURNACE] = {
  name: "Furnace",
  img: SPRITE.CRAFT_FURNACE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EXPLORER_HAT] = {
  name: "Explorer hat",
  img: SPRITE.CRAFT_EXPLORER_HAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PIRATE_HAT] = {
  name: "Pirate hat",
  img: SPRITE.CRAFT_PIRATE_HAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.FLOWER_HAT] = {
  name: "Flower hat",
  img: SPRITE.CRAFT_FLOWER_HAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.FUR_HAT] = {
  name: "Fur hat",
  img: SPRITE.CRAFT_FUR_HAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WOOD_HELMET] = {
  name: "Wood helmet",
  img: SPRITE.CRAFT_WOOD_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_HELMET] = {
  name: "Stone helmet",
  img: SPRITE.CRAFT_STONE_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_HELMET] = {
  name: "Gold helmet",
  img: SPRITE.CRAFT_GOLD_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_HELMET] = {
  name: "Diamond helmet",
  img: SPRITE.CRAFT_DIAMOND_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BOOK] = {
  name: "Book",
  img: SPRITE.CRAFT_BOOK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PAPER] = {
  name: "Paper",
  img: SPRITE.CRAFT_PAPER,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BAG] = {
  name: "Bag",
  img: SPRITE.CRAFT_BAG,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SWORD_AMETHYST] = {
  name: "Amethyst sword",
  img: SPRITE.CRAFT_SWORD_AMETHYST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PICK_AMETHYST] = {
  name: "Amethyst pick",
  img: SPRITE.CRAFT_PICK_AMETHYST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_SPEAR] = {
  name: "Amethyst spear",
  img: SPRITE.CRAFT_AMETHYST_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.HAMMER] = {
  name: "Stone hammer",
  img: SPRITE.CRAFT_HAMMER,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.HAMMER_GOLD] = {
  name: "Gold hammer",
  img: SPRITE.CRAFT_HAMMER_GOLD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.HAMMER_DIAMOND] = {
  name: "Diamond hammer",
  img: SPRITE.CRAFT_HAMMER_DIAMOND,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.HAMMER_AMETHYST] = {
  name: "Amethyst hammer",
  img: SPRITE.CRAFT_HAMMER_AMETHYST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.HAMMER_REIDITE] = {
  name: "Reidite hammer",
  img: SPRITE.CRAFT_HAMMER_REIDITE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_WALL] = {
  name: "Amethyst wall",
  img: SPRITE.CRAFT_AMETHYST_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_SPIKE] = {
  name: "Amethyst spike",
  img: SPRITE.CRAFT_AMETHYST_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_DOOR] = {
  name: "Amethyst door",
  img: SPRITE.CRAFT_DOOR_AMETHYST_CLOSE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.CAP_SCARF] = {
  name: "Cap & scarf",
  img: SPRITE.CRAFT_CAP_SCARF,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BLUE_CORD] = {
  name: "Blue cord",
  img: SPRITE.CRAFT_BLUE_CORD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LOCK] = {
  name: "Lock",
  img: SPRITE.CRAFT_LOCK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.RESURRECTION] = {
  name: "Resurrection",
  img: SPRITE.CRAFT_RESURRECTION,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.LOCKPICK] = {
  name: "Lockpick",
  img: SPRITE.CRAFT_LOCKPICK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.TOTEM] = {
  name: "Totem",
  img: SPRITE.CRAFT_TOTEM,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_HELMET] = {
  name: "Amethyst helmet",
  img: SPRITE.CRAFT_AMETHYST_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SUPER_HAMMER] = {
  name: "Super hammer",
  img: SPRITE.CRAFT_SUPER_HAMMER,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BRIDGE] = {
  name: "Bridge",
  img: SPRITE.CRAFT_BRIDGE,
  grid: 1,
  recycle: 1
};
INV_INFOS[INV.WOOD_TOWER] = {
  name: "Wood Tower",
  img: SPRITE.CRAFT_WOOD_TOWER,
  grid: 1,
  recycle: 1
};
INV_INFOS[INV.BOTTLE_FULL] = {
  name: "Bottle full",
  img: SPRITE.CRAFT_BOTTLE_FULL,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BOTTLE_EMPTY] = {
  name: "Bottle empty",
  img: SPRITE.CRAFT_BOTTLE_EMPTY,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.SHOVEL] = {
  name: "Stone shovel",
  img: SPRITE.CRAFT_SHOVEL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WATERING_CAN] = {
  name: "Watering can",
  img: SPRITE.CRAFT_WATERING_CAN,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WHEAT_SEED] = {
  name: "Wheat",
  img: SPRITE.CRAFT_WHEAT_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.COOKIE] = {
  name: "Cookie",
  img: SPRITE.CRAFT_COOKIE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WINDMILL] = {
  name: "Windmill",
  img: SPRITE.CRAFT_WINDMILL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SUPER_DIVING_SUIT] = {
  name: "Super diving suit",
  img: SPRITE.CRAFT_SUPER_DIVING_SUIT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIVING_MASK] = {
  name: "Diving mask",
  img: SPRITE.CRAFT_DIVING_MASK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WATERING_CAN_FULL] = {
  name: "Watering can full",
  img: SPRITE.CRAFT_WATERING_CAN_FULL,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CAKE] = {
  name: "Cake",
  img: SPRITE.CRAFT_CAKE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.FOODFISH_COOKED] = {
  name: "Foodfish cooked",
  img: SPRITE.CRAFT_FOODFISH_COOKED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PLOT] = {
  name: "Plot",
  img: SPRITE.CRAFT_PLOT,
  grid: 1,
  recycle: 1
};
INV_INFOS[INV.BREAD] = {
  name: "Bread",
  img: SPRITE.CRAFT_BREAD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BOTTLE_FULL_2] = {
  name: "Bottle full (with ice)",
  img: SPRITE.CRAFT_BOTTLE_FULL_2,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BOTTLE_FULL_3] = {
  name: "Bottle full (with well)",
  img: SPRITE.CRAFT_BOTTLE_FULL_3,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SHOVEL_GOLD] = {
  name: "Gold shovel",
  img: SPRITE.CRAFT_SHOVEL_GOLD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SHOVEL_DIAMOND] = {
  name: "Diamond shovel",
  img: SPRITE.CRAFT_SHOVEL_DIAMOND,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SHOVEL_AMETHYST] = {
  name: "Amethyst shovel",
  img: SPRITE.CRAFT_SHOVEL_AMETHYST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SPANNER] = {
  name: "Spanner",
  img: SPRITE.CRAFT_SPANNER,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.MACHETE] = {
  name: "Machete",
  img: SPRITE.CRAFT_MACHETE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BREAD_OVEN] = {
  name: "Bread oven",
  img: SPRITE.CRAFT_BREAD_OVEN,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SANDWICH] = {
  name: "Sandwich",
  img: SPRITE.CRAFT_SANDWICH,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DRAGON_HELMET] = {
  name: "Dragon helmet",
  img: SPRITE.CRAFT_DRAGON_HELMET,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_HELMET] = {
  name: "Dragon helmet",
  img: SPRITE.CRAFT_LAVA_HELMET,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WITCH] = {
  name: "Witch",
  img: SPRITE.CRAFT_WITCH,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.NIMBUS] = {
  name: "Nimbus",
  img: SPRITE.CRAFT_NIMBUS,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WAND1] = {
  name: "Wand1",
  img: SPRITE.CRAFT_WAND1,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WAND2] = {
  name: "Wand2",
  img: SPRITE.CRAFT_WAND2,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DRAGON_SWORD] = {
  name: "Dragon sword",
  img: SPRITE.CRAFT_DRAGON_SWORD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_SWORD] = {
  name: "Dragon sword",
  img: SPRITE.CRAFT_LAVA_SWORD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WOOD_SHIELD] = {
  name: "Wood shield",
  img: SPRITE.CRAFT_WOOD_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_SHIELD] = {
  name: "Stone shield",
  img: SPRITE.CRAFT_STONE_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_SHIELD] = {
  name: "Gold shield",
  img: SPRITE.CRAFT_GOLD_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_SHIELD] = {
  name: "Diamond shield",
  img: SPRITE.CRAFT_DIAMOND_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_SHIELD] = {
  name: "Amethyst shield",
  img: SPRITE.CRAFT_AMETHYST_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_SHIELD] = {
  name: "Reidite shield",
  img: SPRITE.CRAFT_REIDITE_SHIELD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WOOD_BOW] = {
  name: "Wood bow",
  img: SPRITE.CRAFT_WOOD_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_BOW] = {
  name: "Stone bow",
  img: SPRITE.CRAFT_STONE_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_BOW] = {
  name: "Gold bow",
  img: SPRITE.CRAFT_GOLD_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_BOW] = {
  name: "Diamond bow",
  img: SPRITE.CRAFT_DIAMOND_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_BOW] = {
  name: "Amethyst bow",
  img: SPRITE.CRAFT_AMETHYST_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_BOW] = {
  name: "Reidite bow",
  img: SPRITE.CRAFT_REIDITE_BOW,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DRAGON_BOW] = {
  name: "Dragon bow",
  img: SPRITE.CRAFT_DRAGON_BOW,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CROWN_GREEN] = {
  name: "Crown of life",
  img: SPRITE.CRAFT_CROWN_GREEN,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GEMME_GREEN] = {
  name: "Gem of life",
  img: SPRITE.INV_GEMME_GREEN,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DRAGON_ORB] = {
  name: "Orb of the dragon",
  img: SPRITE.INV_DRAGON_ORB,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_ORB] = {
  name: "Orb of the dragon",
  img: SPRITE.INV_LAVA_ORB,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DRAGON_CUBE] = {
  name: "Cube of the dragon",
  img: SPRITE.INV_DRAGON_CUBE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_CUBE] = {
  name: "Cube of the dragon",
  img: SPRITE.INV_LAVA_CUBE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CROWN_ORANGE] = {
  name: "Crown of luck",
  img: SPRITE.CRAFT_CROWN_ORANGE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GEMME_ORANGE] = {
  name: "Gem of luck",
  img: SPRITE.INV_GEMME_ORANGE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CROWN_BLUE] = {
  name: "Crown of the angel",
  img: SPRITE.CRAFT_CROWN_BLUE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GEMME_BLUE] = {
  name: "Gem of the angel",
  img: SPRITE.INV_GEMME_BLUE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.DRAGON_HEART] = {
  name: "Dragon heart",
  img: SPRITE.INV_DRAGON_HEART,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.LAVA_HEART] = {
  name: "Lava heart",
  img: SPRITE.INV_LAVA_HEART,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.HOOD] = {
  name: "Hood",
  img: SPRITE.CRAFT_HOOD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PEASANT] = {
  name: "Peasant",
  img: SPRITE.CRAFT_PEASANT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WINTER_PEASANT] = {
  name: "Winter peasant",
  img: SPRITE.CRAFT_WINTER_PEASANT,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WINTER_HOOD] = {
  name: "Winter hood",
  img: SPRITE.CRAFT_WINTER_HOOD,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BUCKET_FULL] = {
  name: "Bucket full",
  img: SPRITE.CRAFT_BUCKET_FULL,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BUCKET_EMPTY] = {
  name: "Bucket empty",
  img: SPRITE.CRAFT_BUCKET_EMPTY,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WELL] = {
  name: "Well",
  img: SPRITE.CRAFT_WELL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SIGN] = {
  name: "Sign",
  img: SPRITE.CRAFT_SIGN,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PUMPKIN_SEED] = {
  name: "Pumpkin Seed",
  img: SPRITE.CRAFT_PUMPKIN_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.GARLIC_SEED] = {
  name: "Garlic Seed",
  img: SPRITE.CRAFT_GARLIC_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.THORNBUSH_SEED] = {
  name: "Thorbushes Seed",
  img: SPRITE.CRAFT_THORNBUSH_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.ROOF] = {
  name: "Roof",
  img: SPRITE.CRAFT_ROOF,
  grid: 1,
  recycle: 1
};
INV_INFOS[INV.CROWN_CRAB] = {
  name: "Crab Crown",
  img: SPRITE.CRAFT_CROWN_CRAB,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.CARROT_SEED] = {
  name: "Carrot Seed",
  img: SPRITE.CRAFT_CARROT_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.TOMATO_SEED] = {
  name: "Tomato Seed",
  img: SPRITE.CRAFT_TOMATO_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.WATERMELON_SEED] = {
  name: "Watermelon Seed",
  img: SPRITE.CRAFT_WATERMELON_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.ALOE_VERA_SEED] = {
  name: "Aloe Vera Seed",
  img: SPRITE.CRAFT_ALOE_VERA_SEED,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.TURBAN1] = {
  name: "Cap",
  img: SPRITE.CRAFT_TURBAN1,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.TURBAN2] = {
  name: "Turban",
  img: SPRITE.CRAFT_TURBAN2,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PILOT_HELMET] = {
  name: "Pilot Helmet",
  img: SPRITE.CRAFT_PILOT_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EMERALD_MACHINE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EMERALD_MACHINE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.EXTRACTOR_MACHINE_STONE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EXTRACTOR_MACHINE_GOLD] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EXTRACTOR_MACHINE_DIAMOND] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EXTRACTOR_MACHINE_AMETHYST] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.EXTRACTOR_MACHINE_REIDITE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PITCHFORK] = {
  name: "Pitchfork",
  img: SPRITE.CRAFT_PITCHFORK,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.WOOD_DOOR_SPIKE] = {
  name: "Wood Door Spike",
  img: SPRITE.CRAFT_WOOD_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.STONE_DOOR_SPIKE] = {
  name: "Stone Door Spike",
  img: SPRITE.CRAFT_STONE_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.GOLD_DOOR_SPIKE] = {
  name: "Gold Door Spike",
  img: SPRITE.CRAFT_GOLD_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_DOOR_SPIKE] = {
  name: "Diamond Door Spike",
  img: SPRITE.CRAFT_DIAMOND_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_DOOR_SPIKE] = {
  name: "Amethyst Door Spike",
  img: SPRITE.CRAFT_AMETHYST_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.DIAMOND_PROTECTION] = {
  name: "Diamond Fire Protection ",
  img: SPRITE.CRAFT_DIAMOND_PROTECTION,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.AMETHYST_PROTECTION] = {
  name: "Amethyst Fire Protection ",
  img: SPRITE.CRAFT_AMETHYST_PROTECTION,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_PROTECTION] = {
  name: "Amethyst Fire Protection ",
  img: SPRITE.CRAFT_REIDITE_PROTECTION,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_SWORD] = {
  name: "Reidite Sword",
  img: SPRITE.CRAFT_REIDITE_SWORD,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_SPEAR] = {
  name: "Reidite Spear",
  img: SPRITE.CRAFT_REIDITE_SPEAR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_HELMET] = {
  name: "Reidite Helmet",
  img: SPRITE.CRAFT_REIDITE_HELMET,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_DOOR_SPIKE] = {
  name: "Reidite Door Spike",
  img: SPRITE.CRAFT_REIDITE_DOOR_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_DOOR] = {
  name: "Reidite Door",
  img: SPRITE.CRAFT_REIDITE_DOOR,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_SPIKE] = {
  name: "Reidite Spike",
  img: SPRITE.CRAFT_REIDITE_SPIKE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.REIDITE_WALL] = {
  name: "Reidite Wall",
  img: SPRITE.CRAFT_REIDITE_WALL,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.PICK_REIDITE] = {
  name: "Reidite pick",
  img: SPRITE.CRAFT_PICK_REIDITE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.BOAT] = {
  name: "Boat",
  img: SPRITE.CRAFT_BOAT,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SLED] = {
  name: "Sled",
  img: SPRITE.CRAFT_SLED,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.SADDLE] = {
  name: "Saddle",
  img: SPRITE.CRAFT_SADDLE,
  grid: 0,
  recycle: 1
};
INV_INFOS[INV.MOUNT_BOAR] = {
  name: "Mount Boar",
  img: SPRITE.CRAFT_MOUNT_BOAR,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.CRAB_BOSS] = {
  name: "Mount King Crab",
  img: SPRITE.CRAFT_CRAB_BOSS,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BABY_DRAGON] = {
  name: "Mount Baby Dragon",
  img: SPRITE.CRAFT_BABY_DRAGON,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BABY_LAVA] = {
  name: "Mount Baby Lava",
  img: SPRITE.CRAFT_BABY_LAVA,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.HAWK] = {
  name: "Mount Hawk",
  img: SPRITE.CRAFT_HAWK,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PLANE] = {
  name: "Plane",
  img: SPRITE.CRAFT_PLANE,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.PITCHFORK2] = {
  name: "Pitchfork 2",
  img: SPRITE.CRAFT_PITCHFORK2,
  grid: 0,
  recycle: 0
};
INV_INFOS[INV.BABY_MAMMOTH] = {
  name: "Baby Mammoth",
  img: SPRITE.CRAFT_BABY_MAMMOTH,
  grid: 0,
  recycle: 0
};
var OLD_RECIPES = undefined;
var RECIPES = [{
  r: [[INV.WOOD, 25], [INV.STONE, 5]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.FIRE,
  id2: INV.FIRE,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.FIRE, 1], [INV.WOOD, 35], [INV.STONE, 10]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BIG_FIRE,
  id2: INV.BIG_FIRE,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 150], [INV.STONE, 50], [INV.GOLD, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.FURNACE,
  id2: INV.FURNACE,
  time: 1 / 20,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 20], [INV.STONE, 10]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WORKBENCH,
  id2: INV.WORKBENCH,
  time: 1 / 6,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 10]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK_WOOD,
  id2: INV.PICK_WOOD,
  time: 1 / 3,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.PICK_WOOD, 1], [INV.WOOD, 50], [INV.STONE, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK,
  id2: INV.PICK,
  time: 1 / 8,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 40], [INV.GOLD, 20], [INV.STONE, 30], [INV.PICK, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK_GOLD,
  id2: INV.PICK_GOLD,
  time: 1 / 12,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.DIAMOND, 20], [INV.GOLD, 50], [INV.STONE, 80], [INV.PICK_GOLD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK_DIAMOND,
  id2: INV.PICK_DIAMOND,
  time: 1 / 20,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.DIAMOND, 40], [INV.GOLD, 60], [INV.AMETHYST, 30], [INV.PICK_DIAMOND, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK_AMETHYST,
  id2: INV.PICK_AMETHYST,
  time: 1 / 60,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.AMETHYST, 30], [INV.DIAMOND, 40], [INV.REIDITE, 30], [INV.PICK_AMETHYST, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PICK_REIDITE,
  id2: INV.PICK_REIDITE,
  time: 1 / 90,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 90], [INV.STONE, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HAMMER,
  id2: INV.HAMMER,
  time: 1 / 10,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 160], [INV.STONE, 120], [INV.GOLD, 80], [INV.HAMMER, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HAMMER_GOLD,
  id2: INV.HAMMER_GOLD,
  time: 1 / 15,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.DIAMOND, 80], [INV.STONE, 200], [INV.GOLD, 150], [INV.HAMMER_GOLD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HAMMER_DIAMOND,
  id2: INV.HAMMER_DIAMOND,
  time: 1 / 20,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.DIAMOND, 160], [INV.AMETHYST, 60], [INV.GOLD, 250], [INV.HAMMER_DIAMOND, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HAMMER_AMETHYST,
  id2: INV.HAMMER_AMETHYST,
  time: 1 / 60,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.AMETHYST, 160], [INV.REIDITE, 60], [INV.DIAMOND, 250], [INV.HAMMER_AMETHYST, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HAMMER_REIDITE,
  id2: INV.HAMMER_REIDITE,
  time: 1 / 90,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.HAMMER_REIDITE, 1], [INV.BOTTLE_FULL, 1], [INV.KRAKEN_SKIN, 1], [INV.SCALES, 10], [INV.AMETHYST, 20]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.SUPER_HAMMER,
  id2: INV.SUPER_HAMMER,
  time: 1 / 120,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 30], [INV.STONE, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SHOVEL,
  id2: INV.SHOVEL,
  time: 1 / 5,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.SHOVEL, 1], [INV.GOLD, 20], [INV.STONE, 30], [INV.WOOD, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SHOVEL_GOLD,
  id2: INV.SHOVEL_GOLD,
  time: 1 / 10,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.SHOVEL_GOLD, 1], [INV.DIAMOND, 20], [INV.GOLD, 50], [INV.STONE, 80]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SHOVEL_DIAMOND,
  id2: INV.SHOVEL_DIAMOND,
  time: 1 / 20,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.SHOVEL_DIAMOND, 1], [INV.GOLD, 60], [INV.AMETHYST, 30], [INV.DIAMOND, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SHOVEL_AMETHYST,
  id2: INV.SHOVEL_AMETHYST,
  time: 1 / 40,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WATERING_CAN,
  id2: INV.WATERING_CAN,
  time: 1 / 5,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WATERING_CAN, 1]],
  w: 0,
  f: 0,
  o: 1,
  e: 0,
  id: CRAFT.WATERING_CAN_FULL,
  id2: INV.WATERING_CAN_FULL,
  time: 1 / 5,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 100], [INV.STONE, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PITCHFORK,
  id2: INV.PITCHFORK,
  time: 1 / 10,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.PITCHFORK, 1], [INV.PITCHFORK_PART, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PITCHFORK2,
  id2: INV.PITCHFORK2,
  time: 1 / 60,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.PAPER, 4], [INV.CORD, 4], [INV.FUR_WOLF, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BOOK,
  id2: INV.BOOK,
  time: 1 / 15,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 40]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_SPEAR,
  id2: INV.WOOD_SPEAR,
  time: 1 / 5,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD_SPEAR, 1], [INV.WOOD, 60], [INV.STONE, 10]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SPEAR,
  id2: INV.SPEAR,
  time: 1 / 10,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 80], [INV.GOLD, 30], [INV.STONE, 30], [INV.SPEAR, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_SPEAR,
  id2: INV.GOLD_SPEAR,
  t: CATEGORY.WEAPONS,
  time: 1 / 20
}, {
  r: [[INV.WOOD, 200], [INV.DIAMOND, 40], [INV.GOLD, 60], [INV.GOLD_SPEAR, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_SPEAR,
  id2: INV.DIAMOND_SPEAR,
  time: 1 / 30,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.AMETHYST, 40], [INV.DIAMOND, 80], [INV.GOLD, 90], [INV.DIAMOND_SPEAR, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_SPEAR,
  id2: INV.AMETHYST_SPEAR,
  time: 1 / 60,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.REIDITE, 40], [INV.AMETHYST, 80], [INV.DIAMOND, 90], [INV.AMETHYST_SPEAR, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_SPEAR,
  id2: INV.REIDITE_SPEAR,
  time: 1 / 90,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.BLUE_CORD, 20], [INV.DRAGON_ORB, 1], [INV.AMETHYST, 100], [INV.DRAGON_HEART, 3]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.DRAGON_SPEAR,
  id2: INV.DRAGON_SPEAR,
  time: 1 / 120,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DRAGON_SPEAR, 1], [INV.LAVA_ORB, 1], [INV.REIDITE, 100], [INV.LAVA_HEART, 2]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.LAVA_SPEAR,
  id2: INV.LAVA_SPEAR,
  time: 1 / 200,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD_SPEAR, 1], [INV.CRAB_LOOT, 5], [INV.CORD, 6]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.CRAB_SPEAR,
  id2: INV.CRAB_SPEAR,
  time: 1 / 30,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 30]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SWORD_WOOD,
  id2: INV.SWORD_WOOD,
  time: 1 / 5,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 50], [INV.STONE, 25], [INV.SWORD_WOOD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SWORD,
  id2: INV.SWORD,
  time: 1 / 10,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 60], [INV.GOLD, 40], [INV.STONE, 50], [INV.SWORD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SWORD_GOLD,
  id2: INV.SWORD_GOLD,
  time: 1 / 20,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND, 40], [INV.GOLD, 60], [INV.STONE, 80], [INV.SWORD_GOLD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SWORD_DIAMOND,
  id2: INV.SWORD_DIAMOND,
  time: 1 / 30,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND, 60], [INV.GOLD, 100], [INV.AMETHYST, 40], [INV.SWORD_DIAMOND, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SWORD_AMETHYST,
  id2: INV.SWORD_AMETHYST,
  time: 1 / 60,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND, 100], [INV.AMETHYST, 80], [INV.REIDITE, 40], [INV.SWORD_AMETHYST, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_SWORD,
  id2: INV.REIDITE_SWORD,
  time: 1 / 90,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.PLANT, 3]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.SEED,
  id2: INV.SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.WILD_WHEAT, 3]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.WHEAT_SEED,
  id2: INV.WHEAT_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.PUMPKIN, 8]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.PUMPKIN_SEED,
  id2: INV.PUMPKIN_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.GARLIC, 8]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.GARLIC_SEED,
  id2: INV.GARLIC_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.THORNBUSH, 8]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.THORNBUSH_SEED,
  id2: INV.THORNBUSH_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.CARROT, 8]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.CARROT_SEED,
  id2: INV.CARROT_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.TOMATO, 8]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.TOMATO_SEED,
  id2: INV.TOMATO_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.WATERMELON, 16]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.WATERMELON_SEED,
  id2: INV.WATERMELON_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.ALOE_VERA, 16]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.ALOE_VERA_SEED,
  id2: INV.ALOE_VERA_SEED,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.MEAT, 1]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.COOKED_MEAT,
  id2: INV.COOKED_MEAT,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.FOODFISH, 1]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.FOODFISH_COOKED,
  id2: INV.FOODFISH_COOKED,
  time: 1 / 3,
  t: CATEGORY.FOODS
}, {
  r: [[INV.FLOUR, 3]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.BREAD,
  id2: INV.BREAD,
  time: 1 / 3,
  t: CATEGORY.FOODS
}, {
  r: [[INV.FLOUR, 3], [INV.PLANT, 1]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.COOKIE,
  id2: INV.COOKIE,
  time: 1 / 3,
  t: CATEGORY.FOODS
}, {
  r: [[INV.FLOUR, 5], [INV.PLANT, 2], [INV.ICE, 2]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.CAKE,
  id2: INV.CAKE,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.CORD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BANDAGE,
  id2: INV.BANDAGE,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 20]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WALL,
  id2: INV.WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.WALL, 1], [INV.STONE, 17]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_WALL,
  id2: INV.STONE_WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.STONE_WALL, 1], [INV.GOLD, 14]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_WALL,
  id2: INV.GOLD_WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.GOLD_WALL, 1], [INV.DIAMOND, 11]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_WALL,
  id2: INV.DIAMOND_WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.DIAMOND_WALL, 1], [INV.AMETHYST, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_WALL,
  id2: INV.AMETHYST_WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.AMETHYST_WALL, 1], [INV.REIDITE, 5]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_WALL,
  id2: INV.REIDITE_WALL,
  time: 1 / 5,
  t: CATEGORY.BASES
}, {
  r: [[INV.WOOD, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_DOOR,
  id2: INV.WOOD_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.WOOD_DOOR, 1], [INV.STONE, 27]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_DOOR,
  id2: INV.STONE_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.STONE_DOOR, 1], [INV.GOLD, 24]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_DOOR,
  id2: INV.GOLD_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.GOLD_DOOR, 1], [INV.DIAMOND, 21]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_DOOR,
  id2: INV.DIAMOND_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.DIAMOND_DOOR, 1], [INV.AMETHYST, 18]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_DOOR,
  id2: INV.AMETHYST_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.AMETHYST_DOOR, 1], [INV.REIDITE, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_DOOR,
  id2: INV.REIDITE_DOOR,
  time: 1 / 8,
  t: CATEGORY.BASES
}, {
  r: [[INV.WALL, 1], [INV.WOOD, 40], [INV.STONE, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SPIKE,
  id2: INV.SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.STONE_WALL, 1], [INV.STONE, 70]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_SPIKE,
  id2: INV.STONE_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.GOLD_WALL, 1], [INV.GOLD, 40], [INV.STONE, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_SPIKE,
  id2: INV.GOLD_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.DIAMOND_WALL, 1], [INV.DIAMOND, 40], [INV.STONE, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_SPIKE,
  id2: INV.DIAMOND_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.AMETHYST_WALL, 1], [INV.AMETHYST, 40], [INV.STONE, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_SPIKE,
  id2: INV.AMETHYST_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.REIDITE_WALL, 1], [INV.REIDITE, 40], [INV.GOLD, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_SPIKE,
  id2: INV.REIDITE_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.WOOD_DOOR, 1], [INV.WOOD, 80], [INV.STONE, 60]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_DOOR_SPIKE,
  id2: INV.WOOD_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.STONE_DOOR, 1], [INV.STONE, 140]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_DOOR_SPIKE,
  id2: INV.STONE_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.GOLD_DOOR, 1], [INV.GOLD, 80], [INV.STONE, 60]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_DOOR_SPIKE,
  id2: INV.GOLD_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.DIAMOND_DOOR, 1], [INV.DIAMOND, 80], [INV.STONE, 60]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_DOOR_SPIKE,
  id2: INV.DIAMOND_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.AMETHYST_DOOR, 1], [INV.AMETHYST, 80], [INV.STONE, 60]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_DOOR_SPIKE,
  id2: INV.AMETHYST_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.REIDITE_DOOR, 1], [INV.REIDITE, 80], [INV.GOLD, 60]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_DOOR_SPIKE,
  id2: INV.REIDITE_DOOR_SPIKE,
  time: 1 / 20,
  t: CATEGORY.BASES
}, {
  r: [[INV.WOOD, 25], [INV.GOLD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.CHEST,
  id2: INV.CHEST,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.PAPER, 1], [INV.FUR, 1], [INV.CORD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXPLORER_HAT,
  id2: INV.EXPLORER_HAT,
  time: 1 / 5,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.PAPER, 5], [INV.PENGUIN_FEATHER, 20], [INV.BLUE_CORD, 5], [INV.FUR, 5]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PIRATE_HAT,
  id2: INV.PIRATE_HAT,
  time: 1 / 30,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.PILOT_GLASSES, 1], [INV.HAWK_FEATHER, 8], [INV.VULTURE_FEATHER, 8], [INV.PENGUIN_FEATHER, 8], [INV.CORD, 6]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PILOT_HELMET,
  id2: INV.PILOT_HELMET,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.FUR, 1], [INV.CORD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EARMUFFS,
  id2: INV.EARMUFFS,
  time: 1 / 5,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.EARMUFFS, 1], [INV.FUR_WOLF, 5], [INV.CORD, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.COAT,
  id2: INV.COAT,
  time: 1 / 12,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.COAT, 1], [INV.FUR_WINTER, 5], [INV.BLUE_CORD, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.CAP_SCARF,
  id2: INV.CAP_SCARF,
  time: 1 / 30,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.CAP_SCARF, 1], [INV.FUR_WINTER, 5], [INV.FUR_MAMMOTH, 10], [INV.BLUE_CORD, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.FUR_HAT,
  id2: INV.FUR_HAT,
  time: 1 / 50,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.WOOD, 50]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_HELMET,
  id2: INV.WOOD_HELMET,
  time: 1 / 5,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.STONE, 75], [INV.WOOD, 75], [INV.WOOD_HELMET, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_HELMET,
  id2: INV.STONE_HELMET,
  time: 1 / 10,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.STONE, 90], [INV.WOOD, 90], [INV.GOLD, 90], [INV.STONE_HELMET, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_HELMET,
  id2: INV.GOLD_HELMET,
  time: 1 / 20,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.STONE, 100], [INV.GOLD, 100], [INV.DIAMOND, 100], [INV.GOLD_HELMET, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_HELMET,
  id2: INV.DIAMOND_HELMET,
  time: 1 / 30,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.AMETHYST, 80], [INV.GOLD, 150], [INV.DIAMOND, 120], [INV.DIAMOND_HELMET, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_HELMET,
  id2: INV.AMETHYST_HELMET,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.REIDITE, 80], [INV.DIAMOND, 150], [INV.AMETHYST, 120], [INV.AMETHYST_HELMET, 1]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_HELMET,
  id2: INV.REIDITE_HELMET,
  time: 1 / 90,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.SCALES, 2], [INV.DIAMOND, 40], [INV.CORD, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIVING_MASK,
  id2: INV.DIVING_MASK,
  time: 1 / 20,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.DIVING_MASK, 1], [INV.GOLD, 80], [INV.KRAKEN_SKIN, 1], [INV.AMETHYST, 20]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SUPER_DIVING_SUIT,
  id2: INV.SUPER_DIVING_SUIT,
  time: 1 / 90,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.FLAME, 5], [INV.DIAMOND, 50], [INV.BLUE_CORD, 5]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_PROTECTION,
  id2: INV.DIAMOND_PROTECTION,
  time: 1 / 20,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.DIAMOND_PROTECTION, 1], [INV.FLAME, 10], [INV.AMETHYST, 50]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_PROTECTION,
  id2: INV.AMETHYST_PROTECTION,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.AMETHYST_PROTECTION, 1], [INV.FLAME, 15], [INV.AMETHYST, 50], [INV.REIDITE, 50]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_PROTECTION,
  id2: INV.REIDITE_PROTECTION,
  time: 1 / 90,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.CORD, 4], [INV.FUR_BOAR, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.TURBAN1,
  id2: INV.TURBAN1,
  time: 1 / 15,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.TURBAN1, 1], [INV.CORD, 6], [INV.FUR_BOAR, 4], [INV.VULTURE_FEATHER, 12], [INV.PENGUIN_FEATHER, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.TURBAN2,
  id2: INV.TURBAN2,
  time: 1 / 150,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.CORD, 6], [INV.FUR_WOLF, 5]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BAG,
  id2: INV.BAG,
  time: 1 / 15,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.WOOD, 20]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.PAPER,
  id2: INV.PAPER,
  time: 1 / 3,
  t: CATEGORY.UTILS
}, {
  r: [[INV.DIAMOND, 1], [INV.CORD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BLUE_CORD,
  id2: INV.BLUE_CORD,
  time: 1 / 3,
  t: CATEGORY.UTILS
}, {
  r: [[INV.GOLD, 10]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.LOCK,
  id2: INV.LOCK,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.GOLD, 250]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.LOCKPICK,
  id2: INV.LOCKPICK,
  time: 1 / 60,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.TOTEM,
  id2: INV.TOTEM,
  time: 1 / 10,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BRIDGE,
  id2: INV.BRIDGE,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.ROOF,
  id2: INV.ROOF,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 120]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_TOWER,
  id2: INV.WOOD_TOWER,
  time: 1 / 15,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 20], [INV.GROUND, 15]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PLOT,
  id2: INV.PLOT,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.SAND, 25]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.BOTTLE_EMPTY,
  id2: INV.BOTTLE_EMPTY,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.BOTTLE_EMPTY, 1]],
  w: 0,
  f: 0,
  o: 1,
  e: 0,
  id: CRAFT.BOTTLE_FULL,
  id2: INV.BOTTLE_FULL,
  time: 1 / 5,
  t: CATEGORY.FOODS
}, {
  r: [[INV.ICE, 20], [INV.BOTTLE_EMPTY, 1]],
  w: 0,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.BOTTLE_FULL_2,
  id2: INV.BOTTLE_FULL,
  time: 1 / 10,
  t: CATEGORY.FOODS
}, {
  r: [[INV.BOTTLE_EMPTY, 1]],
  w: 0,
  f: 0,
  o: 0,
  e: 1,
  id: CRAFT.BOTTLE_FULL_3,
  id2: INV.BOTTLE_FULL,
  time: 1 / 3,
  t: CATEGORY.FOODS
}, {
  r: [[INV.WOOD, 60], [INV.STONE, 20], [INV.CORD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WINDMILL,
  id2: INV.WINDMILL,
  time: 1 / 10,
  t: CATEGORY.UTILS
}, {
  r: [[INV.DIAMOND, 40], [INV.STONE, 45]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.RESURRECTION,
  id2: INV.RESURRECTION,
  time: 1 / 20,
  t: CATEGORY.UTILS
}, {
  r: [[INV.RESURRECTION, 1], [INV.EMERALD, 40], [INV.SANDWORM_JUICE, 1]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.EMERALD_MACHINE,
  id2: INV.EMERALD_MACHINE,
  time: 1 / 200,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 50], [INV.STONE, 100]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXTRACTOR_MACHINE_STONE,
  id2: INV.EXTRACTOR_MACHINE_STONE,
  time: 1 / 90,
  t: CATEGORY.UTILS
}, {
  r: [[INV.STONE, 60], [INV.GOLD, 120]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXTRACTOR_MACHINE_GOLD,
  id2: INV.EXTRACTOR_MACHINE_GOLD,
  time: 1 / 90,
  t: CATEGORY.UTILS
}, {
  r: [[INV.GOLD, 70], [INV.DIAMOND, 140]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXTRACTOR_MACHINE_DIAMOND,
  id2: INV.EXTRACTOR_MACHINE_DIAMOND,
  time: 1 / 90,
  t: CATEGORY.UTILS
}, {
  r: [[INV.DIAMOND, 80], [INV.AMETHYST, 160]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXTRACTOR_MACHINE_AMETHYST,
  id2: INV.EXTRACTOR_MACHINE_AMETHYST,
  time: 1 / 90,
  t: CATEGORY.UTILS
}, {
  r: [[INV.AMETHYST, 90], [INV.REIDITE, 180]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.EXTRACTOR_MACHINE_REIDITE,
  id2: INV.EXTRACTOR_MACHINE_REIDITE,
  time: 1 / 90,
  t: CATEGORY.UTILS
}, {
  r: [[INV.STONE, 70]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SPANNER,
  id2: INV.SPANNER,
  time: 1 / 10,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.STONE, 70], [INV.WOOD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.MACHETE,
  id2: INV.MACHETE,
  time: 1 / 10,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 40], [INV.STONE, 40]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BREAD_OVEN,
  id2: INV.BREAD_OVEN,
  time: 1 / 10,
  t: CATEGORY.UTILS
}, {
  r: [[INV.BREAD, 1], [INV.COOKED_MEAT, 1]],
  w: 0,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SANDWICH,
  id2: INV.SANDWICH,
  time: 1 / 3,
  t: CATEGORY.FOODS
}, {
  r: [[INV.BLUE_CORD, 30], [INV.DRAGON_CUBE, 1], [INV.AMETHYST, 150], [INV.DRAGON_HEART, 3]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.DRAGON_HELMET,
  id2: INV.DRAGON_HELMET,
  time: 1 / 120,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.DRAGON_HELMET, 1], [INV.LAVA_CUBE, 1], [INV.REIDITE, 150], [INV.LAVA_HEART, 2]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.LAVA_HELMET,
  id2: INV.LAVA_HELMET,
  time: 1 / 180,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.GOLD_HELMET, 1], [INV.CRAB_LOOT, 10], [INV.CRAB_STICK, 10], [INV.CORD, 10]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.CROWN_CRAB,
  id2: INV.CROWN_CRAB,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.BLUE_CORD, 20], [INV.DRAGON_ORB, 1], [INV.AMETHYST, 150], [INV.DRAGON_HEART, 3]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.DRAGON_SWORD,
  id2: INV.DRAGON_SWORD,
  time: 1 / 120,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DRAGON_SWORD, 1], [INV.LAVA_ORB, 1], [INV.REIDITE, 150], [INV.LAVA_HEART, 2]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.LAVA_SWORD,
  id2: INV.LAVA_SWORD,
  time: 1 / 180,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 100], [INV.CORD, 4]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_BOW,
  id2: INV.WOOD_BOW,
  time: 1 / 20,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 30]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_ARROW,
  id2: INV.WOOD_ARROW,
  time: 1 / 5,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.STONE, 200], [INV.CORD, 8], [INV.PENGUIN_FEATHER, 4], [INV.WOOD_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_BOW,
  id2: INV.STONE_BOW,
  time: 1 / 25,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.STONE, 20], [INV.HAWK_FEATHER, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_ARROW,
  id2: INV.STONE_ARROW,
  time: 1 / 5,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.GOLD, 200], [INV.CORD, 12], [INV.HAWK_FEATHER, 4], [INV.PENGUIN_FEATHER, 4], [INV.STONE_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_BOW,
  id2: INV.GOLD_BOW,
  time: 1 / 30,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.GOLD, 20], [INV.PENGUIN_FEATHER, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_ARROW,
  id2: INV.GOLD_ARROW,
  time: 1 / 10,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND, 200], [INV.BLUE_CORD, 10], [INV.HAWK_FEATHER, 8], [INV.PENGUIN_FEATHER, 8], [INV.GOLD_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_BOW,
  id2: INV.DIAMOND_BOW,
  time: 1 / 35,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND, 10], [INV.PENGUIN_FEATHER, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_ARROW,
  id2: INV.DIAMOND_ARROW,
  time: 1 / 10,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.AMETHYST, 200], [INV.BLUE_CORD, 10], [INV.PENGUIN_FEATHER, 8], [INV.VULTURE_FEATHER, 8], [INV.DIAMOND_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_BOW,
  id2: INV.AMETHYST_BOW,
  time: 1 / 40,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.AMETHYST, 10], [INV.VULTURE_FEATHER, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_ARROW,
  id2: INV.AMETHYST_ARROW,
  time: 1 / 15,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.REIDITE, 200], [INV.BLUE_CORD, 10], [INV.KRAKEN_SKIN, 1], [INV.AMETHYST_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_BOW,
  id2: INV.REIDITE_BOW,
  time: 1 / 45,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.REIDITE, 10], [INV.VULTURE_FEATHER, 1], [INV.FLAME, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_ARROW,
  id2: INV.REIDITE_ARROW,
  time: 1 / 15,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.EMERALD, 200], [INV.BLUE_CORD, 10], [INV.DRAGON_ORB, 1], [INV.REIDITE_BOW, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DRAGON_BOW,
  id2: INV.DRAGON_BOW,
  time: 1 / 50,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.EMERALD, 10], [INV.SANDWORM_JUICE, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DRAGON_ARROW,
  id2: INV.DRAGON_ARROW,
  time: 1 / 20,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD, 100]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WOOD_SHIELD,
  id2: INV.WOOD_SHIELD,
  time: 1 / 25,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.WOOD_SHIELD, 1], [INV.STONE, 100], [INV.WOOD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.STONE_SHIELD,
  id2: INV.STONE_SHIELD,
  time: 1 / 40,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.STONE_SHIELD, 1], [INV.GOLD, 50], [INV.STONE, 50], [INV.WOOD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.GOLD_SHIELD,
  id2: INV.GOLD_SHIELD,
  time: 1 / 50,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.GOLD_SHIELD, 1], [INV.DIAMOND, 50], [INV.GOLD, 50], [INV.STONE, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.DIAMOND_SHIELD,
  id2: INV.DIAMOND_SHIELD,
  time: 1 / 70,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.DIAMOND_SHIELD, 1], [INV.AMETHYST, 50], [INV.DIAMOND, 50], [INV.GOLD, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.AMETHYST_SHIELD,
  id2: INV.AMETHYST_SHIELD,
  time: 1 / 90,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.AMETHYST_SHIELD, 1], [INV.REIDITE, 50], [INV.AMETHYST, 50], [INV.DIAMOND, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.REIDITE_SHIELD,
  id2: INV.REIDITE_SHIELD,
  time: 1 / 120,
  t: CATEGORY.WEAPONS
}, {
  r: [[INV.GEMME_GREEN, 1], [INV.GOLD, 200]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.CROWN_GREEN,
  id2: INV.CROWN_GREEN,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.GEMME_ORANGE, 1], [INV.GOLD, 200]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.CROWN_ORANGE,
  id2: INV.CROWN_ORANGE,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.GEMME_BLUE, 1], [INV.GOLD, 200], [INV.DRAGON_HEART, 1]],
  w: 1,
  f: 1,
  o: 1,
  e: 0,
  id: CRAFT.CROWN_BLUE,
  id2: INV.CROWN_BLUE,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.FUR_WOLF, 10], [INV.FUR, 5], [INV.CORD, 6]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.HOOD,
  id2: INV.HOOD,
  time: 1 / 10,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.FUR, 3], [INV.CORD, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PEASANT,
  id2: INV.PEASANT,
  time: 1 / 10,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.HOOD, 1], [INV.SPECIAL_FUR_2, 1], [INV.FUR_WINTER, 15], [INV.BLUE_CORD, 5], [INV.PENGUIN_FEATHER, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WINTER_HOOD,
  id2: INV.WINTER_HOOD,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.PEASANT, 1], [INV.SPECIAL_FUR, 1], [INV.FUR_WINTER, 10], [INV.BLUE_CORD, 5], [INV.PENGUIN_FEATHER, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.WINTER_PEASANT,
  id2: INV.WINTER_PEASANT,
  time: 1 / 60,
  t: CATEGORY.CLOTHES
}, {
  r: [[INV.BUCKET_EMPTY, 1]],
  w: 0,
  f: 0,
  o: 1,
  e: 0,
  id: CRAFT.BUCKET_FULL,
  id2: INV.BUCKET_FULL,
  time: 1 / 5,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.WOOD, 20], [INV.CORD, 1]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BUCKET_EMPTY,
  id2: INV.BUCKET_EMPTY,
  time: 1 / 5,
  t: CATEGORY.TOOLS
}, {
  r: [[INV.STONE, 100], [INV.GROUND, 30]],
  w: 1,
  f: 1,
  o: 0,
  e: 0,
  id: CRAFT.WELL,
  id2: INV.WELL,
  time: 1 / 10,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 20]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SIGN,
  id2: INV.SIGN,
  time: 1 / 5,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 100], [INV.STONE, 50], [INV.FUR, 5], [INV.FUR_WOLF, 5], [INV.CORD, 6]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BED,
  id2: INV.BED,
  time: 1 / 20,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 250], [INV.BLUE_CORD, 10], [INV.FUR_WINTER, 2], [INV.SCALES, 2]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.BOAT,
  id2: INV.BOAT,
  time: 1 / 50,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 250], [INV.CORD, 10], [INV.FUR_WINTER, 2], [INV.PENGUIN_FEATHER, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SLED,
  id2: INV.SLED,
  time: 1 / 50,
  t: CATEGORY.UTILS
}, {
  r: [[INV.CORD, 10], [INV.FUR_WOLF, 6], [INV.FUR, 4], [INV.SAND, 50]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.SADDLE,
  id2: INV.SADDLE,
  time: 1 / 20,
  t: CATEGORY.UTILS
}, {
  r: [[INV.WOOD, 250], [INV.CORD, 10], [INV.PAPER, 10], [INV.HAWK_FEATHER, 8]],
  w: 1,
  f: 0,
  o: 0,
  e: 0,
  id: CRAFT.PLANE,
  id2: INV.PLANE,
  time: 1 / 50,
  t: CATEGORY.UTILS
}];
var COUNTER = 300;
TEXT = {
  YOU_CANNOT_JOIN: COUNTER++,
  KICKED: COUNTER++,
  KEY_ALREADY: COUNTER++,
  KEY_WRONG: COUNTER++,
  OLD_VERSION: COUNTER++,
  NO_MORE_RESOURCES: COUNTER++,
  SURVIVED_1DAY: COUNTER++,
  SURVIVED: COUNTER++,
  DAYS: COUNTER++,
  DEAD_SAD: COUNTER++,
  SPAM_ME: COUNTER++,
  SPAM_ME2: COUNTER++,
  EMPTY: COUNTER++,
  INV_FULL: COUNTER++,
  DEAD: COUNTER++,
  WRONG_TOOL: COUNTER++,
  JOIN_TEAM: COUNTER++,
  YOU_DEAD: COUNTER++,
  JOINED_TEAM: COUNTER++,
  TEAM_DESTROYED: COUNTER++,
  LEFT_TEAM: COUNTER++,
  LEFT_TEAM2: COUNTER++,
  TOKEN: COUNTER++,
  CHOOSE: COUNTER++,
  PLAYERS: COUNTER++,
  TOTAL_PLAYERS: COUNTER++,
  TOTAL_MODE: COUNTER++,
  COMMING_SOON: COUNTER++,
  BACK_TO_THE_GAME: COUNTER++,
  TWITTER: COUNTER++,
  FACEBOOK: COUNTER++,
  KIT_NEXT: COUNTER++,
  POINTS: COUNTER++,
  SCORE: COUNTER++,
  KILL: COUNTER++,
  DAYS_SURVIVED: COUNTER++,
  MODE_FREE: COUNTER++,
  MODE_GRID: COUNTER++,
  NEW_VERSION: COUNTER++,
  WRONG_PASSWORD: COUNTER++,
  TEMPEST_OFF: COUNTER++,
  TEMPEST_ON: COUNTER++,
  BLIZZARD_OFF: COUNTER++,
  BLIZZARD_ON: COUNTER++
};
function set_english() {
  LANG[INV.EXTRACTOR_MACHINE_STONE] = ["Stone Extractor", "Can produce stone with wood", "It takes 10 seconds to drill Stone", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_GOLD] = ["Gold Extractor", "Can produce gold with wood", "It takes 10 seconds to drill Gold", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_DIAMOND] = ["Diamond Extractor", "Can produce diamond with wood", "It takes 10 seconds to drill Diamond", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_AMETHYST] = ["Amethyst Extractor", "Can produce amethyst with wood", "It takes 10 seconds to drill Amethyst", "Durability: 2000"];
  LANG[INV.EXTRACTOR_MACHINE_REIDITE] = ["Reidite Extractor", "Can produce reidite with wood", "It takes 10 seconds to drill Reidite", "Durability: 2000"];
  LANG[INV.REIDITE_SHIELD] = ["Reidite Shield", "A must for the pros of the getaway", "You can not attack when you use it", "Damage: 6", "Players Defense: 6"];
  LANG[INV.AMETHYST_SHIELD] = ["Amethyst Shield", "Because you know how to run away in style", "You can not attack when you use it", "Damage: 5", "Players Defense: 5"];
  LANG[INV.DIAMOND_SHIELD] = ["Diamond Shield", "Run or attack, you've obviously made your choice.", "You can not attack when you use it", "Damage: 4", "Players Defense: 4"];
  LANG[INV.GOLD_SHIELD] = ["Gold Shield", "When it's golden, it's always better.", "You can not attack when you use it", "Damage: 3", "Players Defense: 3"];
  LANG[INV.STONE_SHIELD] = ["Stone Shield", "Protects you a bit more", "You can not attack when you use it", "Damage: 2", "Players Defense: 2"];
  LANG[INV.WOOD_SHIELD] = ["Wood Shield", "Protects you a bit", "You can not attack when you use it", "Damage: 1", "Players Defense: 1"];
  LANG[INV.MACHETE] = ["Machete", "You gather more from mob boxes", "Useless to attack mobs", "Damage against Players: 5"];
  LANG[INV.WOOD_TOWER] = ["Tower", "Allows you to shoot over walls with a bow", "Does not allow to pass through roofs"];
  LANG[INV.DRAGON_ARROW] = ["Dragon Arrow", "Must be used with a Dragon Bow", "Damage: 45", "Mobs Damage: 1200", "Building Damage: 45"];
  LANG[INV.DRAGON_BOW] = ["Dragon Bow", "Also called the One-Shot-Monster", "Requiers arrows to be used"];
  LANG[INV.REIDITE_ARROW] = ["Reidite Arrow", "Must be used with a Reidite or a Dragon Bow", "Damage: 40", "Mobs Damage: 900", "Building Damage: 40"];
  LANG[INV.REIDITE_BOW] = ["Reidite Bow", "Makes the most terrifying monster cry.", "Requiers any arrows, except dragon arrows, to be used"];
  LANG[INV.AMETHYST_ARROW] = ["Amethyst Arrow", "Must be used with Amethyst, Reidite or Dragon Bow", "Damage: 35", "Mobs Damage: 600", "Building Damage: 35"];
  LANG[INV.AMETHYST_BOW] = ["Amethyst Bow", "It's super efficient!", "Requiers any arrows, except dragon and reidite arrows, to be used"];
  LANG[INV.DIAMOND_ARROW] = ["Diamond Arrow", "Must be used with Diamond, Amethyst, Reidite or Dragon Bow", "Damage: 30", "Mobs Damage: 300", "Building Damage: 30"];
  LANG[INV.DIAMOND_BOW] = ["Diamond Bow", "Like a Robin Wood who would keep the diamonds", "Requiers wood, stone, gold or diamond arrows to be used"];
  LANG[INV.GOLD_ARROW] = ["Gold Arrow", "Must be used with a Bow, except a wooden and stone one", "Damage: 25", "Mobs Damage: 200", "Building Damage: 25"];
  LANG[INV.GOLD_BOW] = ["Gold Bow", "When it's golden, it's better.", "Requiers wood, stone or gold arrows to be used"];
  LANG[INV.STONE_ARROW] = ["Stone Arrow", "Must be used with a Bow, except a wooden one", "Damage: 20", "Mobs Damage: 100", "Building Damage: 20"];
  LANG[INV.STONE_BOW] = ["Stone Bow", "Like Robin Wood", "Requiers wood and stone arrows to be used"];
  LANG[INV.WOOD_ARROW] = ["Wood Arrow", "Must be used with any bow", "Damage: 15", "Mobs Damage: 20", "Building Damage: 15"];
  LANG[INV.WOOD_BOW] = ["Wood Bow", "A little bow that does not do many damages.", "Requiers wood arrows to be used"];
  LANG[INV.EMERALD_MACHINE] = ["Emerald Machine", "Allows to automatically generate score points.", "Be careful, you can only build one.", "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.", "The machine can't be build in the sea", "You earn more points in the desert, than in the lava, than in winter, than in the forest."];
  LANG[INV.FUR_BOAR] = ["Boar fur", "Hakuna Matata, well, he can no longer say it"];
  LANG[INV.FUR_MAMMOTH] = ["Mammoth fur", "Soft and warm. Perfect for a hat."];
  LANG[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
  LANG[INV.EMERALD] = ["Emerald", "How many golden breads can you get from it?"];
  LANG[INV.SANDWORM_JUICE] = ["Sand Worm Juice", "I don't want to know how you got this."];
  LANG[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."];
  LANG[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
  LANG[INV.PILOT_HELMET] = ["Pilot Hat", "Take off and land with flying objects much faster."];
  LANG[INV.PILOT_GLASSES] = ["Pilot Glasses"];
  LANG[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
  LANG[INV.BABY_MAMMOTH] = ["Tamed Baby Mammoth", "Fast on lands and slow on water."];
  LANG[INV.CRAB_BOSS] = ["Tamed Crab Boss", "Fast on lands and water, and slow on winter.", "Gives a +10 damage bonus of the Crab Spear", "when holding a Crab Helmet"];
  LANG[INV.BABY_DRAGON] = ["Tamed Baby Dragon", "You can fly with it.", "Faster than a hawk", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.BABY_LAVA] = ["Tamed Baby Lava Dragon", "You can fly with it.", "Faster than a baby dragon", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.HAWK] = ["Tamed Hawk", "You can fly with it.", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
  LANG[INV.WITCH] = ["Witch Hat", "You're a wizard Starvy!"];
  LANG[INV.NIMBUS] = ["Nimbus 2000", "That's not just a broomstick, Starvy, it's a Nimbus 2000!", "Only works with the witch hat."];
  LANG[INV.WAND1] = ["Wand of life", "Soon we must all choose between what is right and what is easy.", "You need the witch hat and firefly to cast spell"];
  LANG[INV.WAND2] = ["Death Wand", "The wand of He-Who-Must-Not-Be-Named... Lapa...", "You need the witch hat and firefly to cast spell"];
  LANG[INV.FIREFLY] = ["Firefly", "They make a cute little squeak.", "However, you must tear off his wings to make magical projectiles for use with magic wands."];
  LANG[INV.PIRATE_HAT] = ["Pirate hat", "You are faster with it in a boat", "Warm outside water and in winter"];
  LANG[INV.SLED] = ["Sled", "You are faster with it in the snow"];
  LANG[INV.BOAT] = ["Boat", "You are faster with it in the water"];
  LANG[INV.PLANE] = ["Plane", "Fly in the forest, ocean and winter", "Can't fly in desert or lava biome", "When you are flying,", " you can only hit people who are flying too"];
  LANG[INV.HAMMER_REIDITE] = ["Reidite Hammer", "Useful to destroy buildings", "Damage: 6", "Building Damage: 60"];
  LANG[INV.PENGUIN_FEATHER] = ["Penguin Feather", "From a deadly cute penguin."];
  LANG[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
  LANG[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
  LANG[INV.ALOE_VERA] = ["Aloe Vera", "Allows you to heal a little", "Heal : 30"];
  LANG[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
  LANG[INV.WATERMELON] = ["Watermelon", "Like a melon, but with water", "Food : 15", "Water : 8"];
  LANG[INV.WATERMELON_SEED] = ["Watermelon Seed", "Grows into Watermelon", "Birth: 4min", "Growth: 180s", "Need water: 3min 20s", "Durability: 400", "Lifetime: 8 days"];
  LANG[INV.REIDITE_DOOR] = ["Reidite Door", "Noboby can destroy it. Except very reckless", "Damage: 5", "On-Hit Damage: 1", "Durability: 4000"];
  LANG[INV.REIDITE_WALL] = ["Reidite Wall", "Better wall in StarveLand", "Durability: 4000"];
  LANG[INV.REIDITE_SPIKE] = ["Reidite Spike", "It hurts", "Damage: 60", "On-Hit Damage: 5", "Durability: 3000"];
  LANG[INV.REIDITE_DOOR_SPIKE] = ["Reidite Door Spike", "Painful and useful at the same time", "Damage: 35", "On-Hit Damage: 4", "Durability: 2000"];
  LANG[INV.PICK_REIDITE] = ["Reidite Pickaxe", "Can also harvest reidite, better look!", "Damage: 6", "Building Damage: 1"];
  LANG[INV.WOOD_DOOR_SPIKE] = ["Wood Door Spike", "Can be opened or closed by you or your friends", "Damage: 5", "On-Hit Damage: 1", "Durability: 100"];
  LANG[INV.STONE_DOOR_SPIKE] = ["Stone Door Spike", "A stronger door is more serious", "Damage: 10", "On-Hit Damage: 2", "Durability: 200"];
  LANG[INV.GOLD_DOOR_SPIKE] = ["Gold Door Spike", "Are you rebuilding the \"el dorado?\"", "Damage: 15", "On-Hit Damage: 2", "Durability: 400"];
  LANG[INV.DIAMOND_DOOR_SPIKE] = ["Diamond Door Spike", "For a shining house", "Damage: 25", "On-Hit Damage: 3", "Durability: 800"];
  LANG[INV.AMETHYST_DOOR_SPIKE] = ["Amethyst Door Spike", "Is your house a locked safe?", "Damage: 30", "On-Hit Damage: 3", "Durability: 1600"];
  LANG[INV.CARROT] = ["Carrot", "Eat it or sell it in exchange for Tomato Seed or Diamond", "Food : 20"];
  LANG[INV.TOMATO] = ["Tomato", "Eat it or sell it in exchange for Thornbush Seed or Amethyst", "Food : 16"];
  LANG[INV.CARROT_SEED] = ["Carrot Seed", "Grows into Carrot", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.TOMATO_SEED] = ["Tomato Seed", "Grows into Tomato", "Birth: 4min", "Growth: 30s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
  LANG[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."];
  LANG[INV.PITCHFORK_PART] = ["Pitchfork Part", "Shaped by the gods. You'll never be hungry again."];
  LANG[INV.EGG0] = ["Easter Egg", "Eat it or sell it in exchange for wood or stone", "Food : 12"];
  LANG[INV.EGG1] = ["Easter Egg", "Eat it or sell it in exchange for gold", "Food : 25"];
  LANG[INV.EGG2] = ["Easter Egg", "Eat it or sell it in exchange for diamond", "Food : 50"];
  LANG[INV.EGG3] = ["Easter Egg", "Eat it or sell it in exchange for amethyst", "Food : 75"];
  LANG[INV.EGG4] = ["Easter Egg", "Eat it or sell it in exchange for reidite", "Food : 100"];
  LANG[INV.LAVA_CUBE] = ["Lava Cube", "You feel an immense power emanating from this cube"];
  LANG[INV.LAVA_ORB] = ["Lava Orb", "You feel an immense power emanating from this orb"];
  LANG[INV.LAVA_SWORD] = ["Lava Sword", "Don't be too mean with that.", "Damage: 33", "Building Damage: 11"];
  LANG[INV.LAVA_SPEAR] = ["Lava Spear", "Doing good or doing evil", "Damage: 24", "Building Damage: 8"];
  LANG[INV.LAVA_HEART] = ["Lava Heart", "You can feel a strange force.", "A huge power emanates from it.", "We must not find the secret."];
  LANG[INV.LAVA_HELMET] = ["Lava Helmet", "You will conquer the world", "Players Defense: 9", "Animals Defense: 30"];
  LANG[INV.REIDITE_SPEAR] = ["Reidite Spear", "Really useful against Lava Monsters", "Damage: 22", "Building Damage: 7"];
  LANG[INV.REIDITE_SWORD] = ["Reidite Sword", "Really useful against Lava Monsters", "Damage: 30", "Building Damage: 10"];
  LANG[INV.FLAME] = ["Flame", "It's hot!"];
  LANG[INV.DIAMOND_PROTECTION] = ["Diamond Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 2, Animals Defense: 8"];
  LANG[INV.AMETHYST_PROTECTION] = ["Amethyst Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 5, Animals Defense: 13"];
  LANG[INV.REIDITE_PROTECTION] = ["Reidite Protection", "You can survive longer in lava", "Cools down in lava biome", "Players Defense: 6, Animals Defense: 19"];
  LANG[INV.REIDITE] = ["Reidite", "The ultimate ore"];
  LANG[INV.DRAGON_CUBE] = ["Dragon Cube", "You feel a great power emanating from this cube"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  DIE[23] = ["The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty."];
  DIE[24] = ["Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death."];
  DIE[25] = ["The Will-O'-The-Wisp devoured you from the inside with its fiery flames."];
  DIE[26] = ["Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre."];
  DIE[27] = ["You were trampled by that boar. From now on, your new nickname is \"the doormat\"."];
  DIE[28] = ["With a force of 3300 newtons, the shock wave from the closing of the crab king's claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the \"crab rave\""];
  DIE[29] = ["Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish."];
  DIE[30] = ["Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes."];
  DIE[31] = ["The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again."];
  DIE[32] = ["Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever."];
  DIE[33] = ["That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails."];
  DIE[34] = ["Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?"];
  DIE[35] = ["Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof"];
  DIE[36] = ["You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed."];
  DIE[37] = ["You hear \"Avada Kedavra!\" before you turn to ashes."];
  DIE[38] = ["You died crushed by an angry baby mammoth."];
  DIE[39] = ["You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves."];
  DIE[40] = ["The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
  LANG[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
  LANG[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
  LANG[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Gives a +10 damages bonus when holding it with", "a Crab Helmet on a Crab King", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 5", "Animals Defense: 19"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart inside the cave";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = "100 bread in winter, alone, without come back";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x13e45e = 0; _0x13e45e < 7; _0x13e45e++) {
    document.getElementById("claim_reward_" + _0x13e45e).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Hand"];
  LANG[INV.GROUND] = ["Dirt", "Dirty!"];
  LANG[INV.SAND] = ["Sand", "I got it in my eyes!"];
  LANG[INV.WOOD] = ["Wood", "You can't get enough of it!"];
  LANG[INV.STONE] = ["Stone", "Also called a rock"];
  LANG[INV.GOLD] = ["Gold", "Be generous, give it to others"];
  LANG[INV.DIAMOND] = ["Diamond", "What will you make with it?"];
  LANG[INV.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"];
  LANG[INV.FLOUR] = ["Flour", "Used in cooking"];
  LANG[INV.COOKIE] = ["Cookie", "A sumptuous grandmother's cookie", "Food: 50"];
  LANG[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
  LANG[INV.MEAT] = ["Raw meat", "You can cook it with a fire", "Causes food poisoning: 10", "Food: 15"];
  LANG[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
  LANG[INV.FOODFISH] = ["Raw fish", "I think it's still alive", "Causes food poisoning: 10", "Food: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Cooked fish", "With lemon it's perfect", "Food: 35"];
  LANG[INV.BREAD] = ["Bread", "An excellent French bread", "It's the currency used in the market", "Food: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
  LANG[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"];
  LANG[INV.SUGAR_CAN] = ["Sugar cane", "Taste it, it's delicious", "Food: 100"];
  LANG[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"];
  LANG[INV.SEED] = ["Berries Seed", "Grows into Berry", "Birth: 2min", "Growth: 55s", "Need water: 3min 20s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"];
  LANG[INV.WHEAT_SEED] = ["Wheat Seed", "Grows into Wheat", "Birth: 2min", "Growth: 16s", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.WILD_WHEAT] = ["Wild Wheat", "Turns into Flour when placed in Windmill"];
  LANG[INV.PUMPKIN_SEED] = ["Pumpkin Seed", "Grows into pumpkin", "Birth: 2min 40s", "Growth: 2min", "Need water: 2min", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
  LANG[INV.GARLIC_SEED] = ["Garlic Seed", "Very dangerous for vampires", "Damage: 20", "Birth: 4min", "Growth: 1min 10s", "Need water: 1min 40s", "Durability: 700", "Lifetime: 8 days"];
  LANG[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Thorn bush Seed", "Can damage your enemies", "Damage: 20", "Birth: 4min", "Growth: 15s", "Need water: 3min", "Durability: 1000", "Lifetime: 8 days"];
  LANG[INV.THORNBUSH] = ["Thorn bush", "It stings!"];
  LANG[INV.PLOT] = ["Plot", "Seriously, use it", "With this GMO fertilizer your plants", "will growth really faster and need less water", "Durability: 2000"];
  LANG[INV.ICE] = ["Ice", "Useful for making cakes and water"];
  LANG[INV.SPANNER] = ["Wrench", "To repair doors, walls and spike", "Damage: 2"];
  LANG[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
  LANG[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
  LANG[INV.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"];
  LANG[INV.SPECIAL_FUR_2] = ["Dark Fur", "You get ready to do something wrong"];
  LANG[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."];
  LANG[INV.SCALES] = ["Scales", "It smells like fish!"];
  LANG[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"];
  LANG[INV.FIRE] = ["Firecamp", "Warm you up!", "Durability: 150", "Lifetime: 2min"];
  LANG[INV.BIG_FIRE] = ["Big Firecamp", "Warm you up more time!", "Durability: 400", "Lifetime: 6min"];
  LANG[INV.WORKBENCH] = ["Workbench", "Very useful to craft all kinds of objects"];
  LANG[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"];
  LANG[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
  LANG[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
  LANG[INV.SWORD_WOOD] = ["Wood Sword", "Does that work?", "Damage: 12", "Building Damage: 4"];
  LANG[INV.SWORD] = ["Stone Sword", "Be nice to others", "Damage: 19", "Building Damage: 6"];
  LANG[INV.SWORD_GOLD] = ["Gold Sword", "King of the forest", "Damage: 22", "Building Damage: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamond Sword", "You can feel the power", "Damage: 24", "Building Damage: 8"];
  LANG[INV.PIRATE_SWORD] = ["Pirate Sword", "Ayyyyy!", "Better range than a normal sword", "Damage: 24", "Building Damage: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Amethyst Sword", "Mauve is the most beautiful color of the world", "Damage: 27", "Building Damage: 9"];
  LANG[INV.DRAGON_SWORD] = ["Dragon Sword", "No mercy!", "Damage: 30", "Building Damage: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Dragon Spear", "Kill them all!", "Damage: 22", "Building Damage: 7"];
  LANG[INV.PICK_WOOD] = ["Wood Pickaxe", "Can harvest only stone and wood", "Damage: 1"];
  LANG[INV.PICK] = ["Stone Pickaxe", "Can harvest wood, stone and gold", "Damage: 2"];
  LANG[INV.PICK_GOLD] = ["Gold Pickaxe", "Can also harvest diamond", "Damage: 3", "Building Damage: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamond Pickaxe", "Can also harvest amethyst", "Damage: 4", "Building Damage: 1"];
  LANG[INV.PICK_AMETHYST] = ["Amethyst Pickaxe", "Can also harvest reidite, looks fancy!", "Damage: 5", "Building Damage: 1"];
  LANG[INV.HAMMER] = ["Stone Hammer", "Useful to destroy buildings", "Doesn't work well on diamond or amethyst", "Damage: 2", "Building Damage: 20"];
  LANG[INV.HAMMER_GOLD] = ["Gold Hammer", "Useful to destroy buildings", "Doesn't work well on amethyst", "Damage: 3", "Building Damage: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamond Hammer", "Useful to destroy buildings", "Damage: 4", "Building Damage: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Amethyst Hammer", "Useful to destroy buildings", "Damage: 5", "Building Damage: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Hammer", "Have you planned to destroy the world?", "Damage: 12", "Building Damage: 70"];
  LANG[INV.WOOD_SPEAR] = ["Wood Spear", "Like a wooden stick, but it stings.", "Damage: 10", "Building Damage: 3"];
  LANG[INV.SPEAR] = ["Stone Spear", "The beginning of evolution!", "Damage: 14", "Building Damage: 4"];
  LANG[INV.GOLD_SPEAR] = ["Gold Spear", "Careful, it stings!", "Damage: 15", "Buildings Damage: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamond Spear", "You're ready to kill a dragon", "Damage: 17", "Buildings Damage: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Amethyst Spear", "Dragons no longer frighten you", "Damage: 18", "Buildings Damage: 6"];
  LANG[INV.SHOVEL] = ["Stone Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Gold Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 3", "Buildings Damage: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamond Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 4", "Buildings Damage: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Amethyst Shovel", "Dig the ground to gather dirt, ice, and sand", "You can also gather minerals", "Damage: 5", "Buildings Damage: 1"];
  LANG[INV.WOOD_HELMET] = ["Wood Helmet", "Better than nothing", "Players Defense: 1", "Animals Defense: 4"];
  LANG[INV.STONE_HELMET] = ["Stone Helmet", "You're ready for battle!", "Players Defense: 2", "Animals Defense: 8"];
  LANG[INV.GOLD_HELMET] = ["Gold Helmet", "AKA the helmet of the savages", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamond Helmet", "Don't brag too much", "Players Defense: 5", "Animals Defense: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Amethyst Helmet", "You're no longer afraid of anything", "Players Defense: 6", "Animals Defense: 23"];
  LANG[INV.REIDITE_HELMET] = ["Reidite Helmet", "You no longer feel pain", "Players Defense: 7", "Animals Defense: 25"];
  LANG[INV.DRAGON_HELMET] = ["Dragon Helmet", "You will conquer the world", "Players Defense: 8", "Animals Defense: 27"];
  LANG[INV.EXPLORER_HAT] = ["Explorer hat", "Animals won't pay attention to you", "but don't make noises!", "Warm outside water and in winter", "You also calm down aggressive monsters twice as fast"];
  LANG[INV.CHRISTMAS_HAT] = ["Christmas Hat", "Oh, oh, oh, Merry Christmas", "Warm outside water and in winter"];
  LANG[INV.ELF_HAT] = ["Elf Hat", "Don't let yourself be exploited, you little snow elf!", "Warm outside water and in winter"];
  LANG[INV.HOOD] = ["Hood", "You're a rogue", "You can steal someone only if", "1) It's night", "2) You're not wearing anything", "3) If you haven't been touched for eight seconds", "4) You are not close a fire", "5) Your target doesn't wear a peasant outfit", "Warm outside water and in winter"];
  LANG[INV.EARMUFFS] = ["Earmuffs", "Some kind of little chapka.", "Warm outside water and in winter"];
  LANG[INV.COAT] = ["Chapka", "Also called a coat.", "Warmer outside water and in winter"];
  LANG[INV.CAP_SCARF] = ["Winter Scarf and Cap", "Very comfortable", "Very Warm"];
  LANG[INV.FUR_HAT] = ["Mammoth fur hat", "The best blizzard protection", "Very Warm"];
  LANG[INV.PEASANT] = ["Peasant", "Your plants grow faster", "Warm outside water and in winter"];
  LANG[INV.WINTER_HOOD] = ["Winter Hood", "You can steal someone only if", "- It's night", "- You're not wearing anything", "- If you haven't been touched for four seconds", "- You are not close a fire", "- Your target doesn't wear a winter peasant outfit", "Warm outside water and in winter"];
  LANG[INV.WINTER_PEASANT] = ["Winter Peasant", "Your plants grow faster", "Warm outside water and in winter"];
  LANG[INV.DIVING_MASK] = ["Diving Mask", "You are fast in the water", "Warm in water", "Players Defense: 2, Animals Defense: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Super Diving Mask", "You are very fast in the water", "Warm in water", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.DRAGON_ORB] = ["Dragon Orb", "You feel a great power emanating from this orb"];
  LANG[INV.DRAGON_HEART] = ["Dragon Heart", "Turns you into a Ghost on Death!", "You are a ghost for 60 seconds", "Find a resurrection stone"];
  LANG[INV.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"];
  LANG[INV.GEMME_ORANGE] = ["Orange Gemstone", "Only a real pirate can find it!"];
  LANG[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"];
  LANG[INV.CROWN_GREEN] = ["Green Crown", "You heal yourself very quickly", "Heal over time: 40", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.CROWN_ORANGE] = ["Orange Crown", "You suddenly feel very lucky", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.CROWN_BLUE] = ["Blue Crown", "Once you're dead, you'll become a ghost", "Though you will lose your weapon", "Players Defense: 4, Animals Defense: 16"];
  LANG[INV.BUCKET_FULL] = ["Bucket", "Useful to fill a well", "One bucket is equivalent to twelve bottles"];
  LANG[INV.BUCKET_EMPTY] = ["Empty Bucket", "You need to fill this bucket near a water source"];
  LANG[INV.BOTTLE_FULL] = ["Bottle", "Allows you to drink water anywhere", "Water: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Empty Bottle", "You can fill this bottle near a water source"];
  LANG[INV.WATERING_CAN] = ["Empty Watering Can", "You must fill it with a water source to use it"];
  LANG[INV.WATERING_CAN_FULL] = ["Watering Can", "Allows watering of plants", "Damage: 1"];
  LANG[INV.BAG] = ["Bag", "More space for your items!"];
  LANG[INV.PAPER] = ["Paper", "Used in book-crafting"];
  LANG[INV.BOOK] = ["Book", "Allows to considerably reduce the time of crafting", "Must be wearing to work", "Damage: 1"];
  LANG[INV.BANDAGE] = ["Bandage", "Recover more quickly your life", "Heal over time: 30", "Effect: 5"];
  LANG[INV.LOCK] = ["Lock", "Allow you to lock your chest"];
  LANG[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"];
  LANG[INV.TOTEM] = ["Totem", "Allow you to create a team", "Share doors and chests", "Harmful building won't hurt your friend"];
  LANG[INV.BRIDGE] = ["Bridge", "Very useful on water", "It allows you to drink without drowning", "Walk faster in water"];
  LANG[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"];
  LANG[INV.ROOF] = ["Roof", "Hides you a little and warms you!", "Also protects you against sand storm"];
  LANG[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
  LANG[INV.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
  LANG[INV.STONE_WALL] = ["Stone Wall", "It's a little more serious.", "Durability: 1500"];
  LANG[INV.GOLD_WALL] = ["Gold Wall", "Gold on your walls? It's kind of flashy.", "Durability: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamond Wall", "So shiny, watch your eyes", "Durability: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Amethyst Wall", "You must be very scared to go out!", "Durability: 3500"];
  LANG[INV.SPIKE] = ["Wood Spike", "Can damage your enemies", "Damage: 10, On-Hit Damage: 2", "Durability: 150"];
  LANG[INV.STONE_SPIKE] = ["Stone Spike", "I wouldn't want to be your enemy.", "Damage: 20", "On-Hit Damage: 3", "Durability: 300"];
  LANG[INV.GOLD_SPIKE] = ["Gold Spike", "You're so cruel.", "Damage: 30", "On-Hit Damage: 3", "Durability: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamond Spike", "You don't like to have company.", "Damage: 40", "On-Hit Damage: 4", "Durability: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Amethyst Spike", "What the hell did your neighbors do to you?", "Damage: 50", "On-Hit Damage: 4", "Durability: 2400"];
  LANG[INV.WOOD_DOOR] = ["Wood Door", "Can be opened or closed by you or your friends", "Durability: 1000"];
  LANG[INV.STONE_DOOR] = ["Stone Door", "A stronger door is more serious", "Durability: 1500"];
  LANG[INV.GOLD_DOOR] = ["Gold Door", "Are you rebuilding the \"el dorado?\"", "Durability: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamond Door", "For a shining house", "Durability: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Amethyst Door", "Is your house a locked safe?", "Durability: 3500"];
  LANG[INV.FURNACE] = ["Furnace", "Warms you up", "It consumes wood all 5 seconds", "Durability: 1000"];
  LANG[INV.WINDMILL] = ["Windmill", "Can produce flour from wheat", "It takes 5 seconds to make Flour", "Returns points when working", "Durability: 2000"];
  LANG[INV.BREAD_OVEN] = ["Bread Oven", "Allows bread to be made from flour", "It takes 10 seconds to make bread", "Returns points when working", "Durability: 2000"];
  LANG[INV.RESURRECTION] = ["Resurrection stone", "It's magic", "Resurrect you if you're a ghost", "You will lose your weapon", "Durability: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
  LANG[TEXT.KICKED] = "Kicked: ";
  LANG[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
  LANG[TEXT.KEY_WRONG] = "Your key is wrong";
  LANG[TEXT.OLD_VERSION] = "You have an old version, you need to clear your cache";
  LANG[TEXT.NEW_VERSION] = "Your client version is too recent for this server. The server is being updated";
  LANG[TEXT.WRONG_PASSWORD] = "Wrong password! To enter a password: https://starve.io/?password=...";
  LANG[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
  LANG[TEXT.SURVIVED_1DAY] = "You survived 1 day";
  LANG[TEXT.SURVIVED] = "You survived ";
  LANG[TEXT.DAYS] = " days";
  LANG[TEXT.DEAD_SAD] = "You are dead ;-;";
  LANG[TEXT.SPAM_ME] = "Server cannot find spawn location! Spam the play button!";
  LANG[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
  LANG[TEXT.EMPTY] = "Resource is empty";
  LANG[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
  LANG[TEXT.DEAD] = " is dead";
  LANG[TEXT.WRONG_TOOL] = "This is not the right tool";
  LANG[TEXT.JOIN_TEAM] = "You joined a team";
  LANG[TEXT.YOU_DEAD] = "You are dead";
  LANG[TEXT.JOINED_TEAM] = " joined the team";
  LANG[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
  LANG[TEXT.LEFT_TEAM] = "You left the team";
  LANG[TEXT.LEFT_TEAM2] = " left the team";
  LANG[TEXT.TOKEN] = "Someone stole your token :>";
  LANG[TEXT.CHOOSE] = "Choose a server";
  LANG[TEXT.PLAYERS] = "players";
  LANG[TEXT.TOTAL_PLAYERS] = "total players";
  LANG[TEXT.TOTAL_MODE] = "players on this mode";
  LANG[TEXT.COMMING_SOON] = "Coming soon...";
  document.getElementById("nickname_input").placeholder = "Nickname";
  DIE[0] = ["You were killed for no reason"];
  DIE[1] = ["You starved to death, as the name of the game implies"];
  DIE[2] = ["You froze to death. So sad", "You got hypothermia. Next time, try sitting by a fire instead."];
  DIE[3] = ["A player killed you whilst telling you to 'git gud.'", "You got murdered by a player. Don't worry, that player will die too, eventually."];
  DIE[4] = ["You stayed too close to the fire and burnt to death. Bad idea.", "You died to a fire. Fires hurt you. Go write a story about it."];
  DIE[5] = ["Your body will become a nest for spider eggs", "A spider killed you. At least it wasn't a rabbit."];
  DIE[6] = ["The wolf won't starve anymore after eating you", "They aren't dogs. Wolves don't like being pet."];
  DIE[7] = ["The fox was too quick for you", "The fox turned you into a box. Since when do animals have magic powers?"];
  DIE[8] = ["The bear only wanted a hug.", "The bear was too much to bare. I'm not sorry."];
  DIE[9] = ["You were burnt to a crisp by a dragon. So sad.", "You got flattened by a dragon. Getting squished is a horrible way to die."];
  DIE[10] = ["You jumped into a spike wall. Not a good idea...", "You got killed by a spike wall. Most people are sensible enough not to touch pointy things."];
  DIE[11] = ["Even the ghost can die.", "You failed to be resurrected. This is a game, so you go to life after you die, so..."];
  DIE[12] = ["A bacterium from your raw food killed you. This game is definitely too hard.", "You killed the raw food. It killed you too."];
  DIE[13] = ["You died of thirst. Better drink your own piss."];
  DIE[14] = ["Did you know starver's mouths are always below water when swimming? Now you know."];
  DIE[15] = ["Do not worry, the piranha finds you tasty.", "Fun fact: Pirahnas eat people. Including you."];
  DIE[16] = ["LapaMauve does not plan that you can kill the kraken", "A kraken krak-ed your skull."];
  DIE[17] = ["Your skin's falling apart, the sun killed you."];
  DIE[18] = ["Garlic stored in your pockets boiled your brain."];
  DIE[19] = ["As a vampire, don't stand near the garlic cloves."];
  DIE[20] = ["You ate garlic as a vampire, what did you expect?"];
  DIE[21] = ["Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... I'm starving", "Need your brain Uuunnnggg...", "Fresh meat here... Uuunnnggg", "Uuunnnggg... You are tasty", "Uuunnnggg...", "Eat... uuunnnggg...", "I can smell blood... Uuunnnggg"];
}
function set_russian() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x24bbc8 = 0; _0x24bbc8 < 7; _0x24bbc8++) {
    document.getElementById("claim_reward_" + _0x24bbc8).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Рука"];
  LANG[INV.GROUND] = ["Земля", "Грязно!"];
  LANG[INV.SAND] = ["Песок", "Он в моих глазах!"];
  LANG[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"];
  LANG[INV.STONE] = ["Камень", "Твердый"];
  LANG[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"];
  LANG[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"];
  LANG[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"];
  LANG[INV.FLOUR] = ["Мука", "Используется в готовке"];
  LANG[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
  LANG[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
  LANG[INV.MEAT] = ["Сырое Мясо", "Ты можешь пожарить его с помощью огня", "Вызывает отравление: 10", "Еда: 15"];
  LANG[INV.COOKED_MEAT] = ["Жареное Мясо", "Превосходный стейк, пожалуйста", "Еда: 35"];
  LANG[INV.FOODFISH] = ["Сырая Рыба", "Я думаю она всё ещё жива", "Вызывает отравление: 10", "Еда: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Жареная рыба", "С лимоном она прекрасна", "Еда: 35"];
  LANG[INV.BREAD] = ["Хлеб", "Прекрасный французский хлеб", "Это валюта, используемая на рынке", "Еда: 15"];
  LANG[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
  LANG[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"];
  LANG[INV.SUGAR_CAN] = ["Сахарная Трость", "Попробуйте это, это вкусно", "Еда: 100"];
  LANG[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"];
  LANG[INV.SEED] = ["Семя Ягоды", "Вырастает в ягоды", "Рождение: 2мин", "Рост: 55сек", "Нужна вода: 3мин 20сек", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
  LANG[INV.WHEAT_SEED] = ["Пшеничное Семя", "Вырастает в пшеницу", "Рождение: 2мин", "Рост: 16сек", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.WILD_WHEAT] = ["Дикая Пшеница", "Перемалывается в муку, когда помещается в мельницу"];
  LANG[INV.PUMPKIN_SEED] = ["Семена Тыквы", "Вырастает в тыкву", "Рождение: 2мин 40сек", "Рост: 2мин", "Нужна вода: 2мин", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
  LANG[INV.GARLIC_SEED] = ["Семена Чеснока", "Очень опасно для вампиров", "Урон: 20", "Рождение: 4мин", "Рост: 4 мин", "Нужна вода: 1мин 40сек", "Прочность: 700", "Продолжительность: 8 дней"];
  LANG[INV.GARLIC] = ["Чеснок", "Лечит и снижает получаемый холод", "Еда: 14", "Лечит: 30", "Эффект: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Семена Колючего Куста", "Может нанести урон врагам", "Урон: 20", "Рождение: 4мин", "Рост: 15сек", "Нужна вода: 3мин", "Прочность: 1000", "Продолжительность: 8 дней"];
  LANG[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"];
  LANG[INV.PLOT] = ["Грядка", "Серьезно, используйте это.", "С этим ГМО удобрением ваши растения", "будут расти быстрее и потребуют меньше воды", "Прочность: 2000"];
  LANG[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"];
  LANG[INV.SPANNER] = ["Гаечный Ключ", "Для починки дверей, стен, колючек", "Урон: 2"];
  LANG[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
  LANG[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."];
  LANG[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"];
  LANG[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."];
  LANG[INV.FUR_WINTER] = ["Зимняя Шкура", "Эти животные просто хотели обнять тебя..."];
  LANG[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"];
  LANG[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"];
  LANG[INV.FIRE] = ["Костёр", "Согрейтесь!", "Прочность: 150", "Продолжительность: 2мин"];
  LANG[INV.BIG_FIRE] = ["Большой Костёр", "Согрейтесь больше!", "Прочность: 400", "Продолжительность: 6мин"];
  LANG[INV.WORKBENCH] = ["Верстак", "Необходим для создания многих предметов"];
  LANG[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
  LANG[INV.BLUE_CORD] = ["Алмазная Нить", "Используется в изготовлении специальных шапок"];
  LANG[INV.CHEST] = ["Сундук", "Позволяет хранить предметы", "Прочность: 500"];
  LANG[INV.SWORD_WOOD] = ["Деревянный Меч", "Это работает?", "Урон: 12", "Урон по строениям: 4"];
  LANG[INV.SWORD] = ["Каменный Меч", "Будьте добры к другим", "Урон: 19", "Урон по строениям: 6"];
  LANG[INV.SWORD_GOLD] = ["Золотой Меч", "Король леса", "Урон: 22", "Урон по строениям: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Алмазный Меч", "Ты можешь почувствовать силу", "Урон: 24", "Урон по строениям: 8"];
  LANG[INV.PIRATE_SWORD] = ["Пиратский Меч", "Aррррр!", "Дальность атаки больше чем у нормального меча", "Урон: 24", "Урон по строениям: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Аметистовый Меч", "Сиреневый - самый красивый цвет в мире", "Урон: 27", "Урон по строениям: 9"];
  LANG[INV.DRAGON_SWORD] = ["Меч Дракона", "Без пощады!", "Урон: 30", "Урон по строениям: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Копьё Дракона", "Убивай всех!", "Урон: 22", "Урон по строениям: 6"];
  LANG[INV.PICK_WOOD] = ["Деревянная Кирка", "Может добывать только дерево и камень", "Урон: 1"];
  LANG[INV.PICK] = ["Каменная Кирка", "Может добывать дерево, камень и золото", "Урон: 2"];
  LANG[INV.PICK_GOLD] = ["Золотая Кирка", "Также может добывать алмазы", "Урон: 3", "Урон по строениям: 1"];
  LANG[INV.PICK_DIAMOND] = ["Алмазная Кирка", "Можно добывать всё", "Урон: 4", "Урон по строениям: 1"];
  LANG[INV.PICK_AMETHYST] = ["Аметистовая Кирка", "Можно добывать всё, ещё и выглядит красиво!", "Урон: 5", "Урон по строениям: 1"];
  LANG[INV.HAMMER] = ["Каменный молот", "Используется для разрушения зданий", "Плохо разрушает алмазные и аметистовые здания", "Урон: 2", "Урон по строениям: 20"];
  LANG[INV.HAMMER_GOLD] = ["Золотой Молот", "Используется для разрушения зданий", "Плохо разрушает аметистовые здания", "Урон: 3", "Урон по строениям: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Алмазный Молот", "Используется для разрушения зданий", "Урон: 4", "Урон по строениям: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Аметистовый Молот", "Используется для разрушения зданий", "Урон: 5", "Урон по строениям: 50"];
  LANG[INV.SUPER_HAMMER] = ["Супер Молот", "У вас есть планы разрушить мир?", "Урон: 12", "Урон по строениям: 70"];
  LANG[INV.WOOD_SPEAR] = ["Деревянное Копьё", "Выглядит как деревянная палочка, но делает больно.", "Урон: 10", "Урон по строениям: 2"];
  LANG[INV.SPEAR] = ["Каменное Копьё", "Начало эволюции!", "Урон: 14", "Урон по строениям: 4"];
  LANG[INV.GOLD_SPEAR] = ["Золотое Копьё", "Осторожно, это больно!", "Урон: 15", "Урон по строениям: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Алмазное Копьё", "Вы готовы убивать дракона.", "Урон: 17", "Урон по строениям: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Аметистовое Копьё", "Драконы больше не пугают вас", "Урон: 18", "Урон по строениям: 6"];
  LANG[INV.SHOVEL] = ["Каменная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Золотая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 3", "Урон по строениям: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Алмазная Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 4", "Урон по строениям: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Аметистовая Лопата", "Копайте землю, чтобы получить грязь, лед и песок", "Так же вы можете получить ресурсы", "Урон: 5", "Урон по стреониям: 1"];
  LANG[INV.WOOD_HELMET] = ["Деревянный Шлем", "Лучше чем ничего", "Защита от игроков: 1", "Защита от животных: 4"];
  LANG[INV.STONE_HELMET] = ["Каменный Шлем", "Вы готовы к битве!", "Защита от игроков: 2", "Защита от животных: 8"];
  LANG[INV.GOLD_HELMET] = ["Золотой Шлем", "Также известен как шлем жестоких людей", "Защита от игроков: 4", "Защита от животных: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Алмазный Шлем", "Не слишком хвастайтесь", "Защита от игроков: 5", "Защита от животных: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Аметистовый Шлем", "Ты больше ничего не боишься", "Защита от игроков: 6", "Защита от животных: 23"];
  LANG[INV.DRAGON_HELMET] = ["Шлем Дракона", "Ты покоришь мир", "Защита от игроков: 8", "Защита от животных: 27"];
  LANG[INV.EXPLORER_HAT] = ["Шапка Исследователя", "Животные не обращают на вас внимания", "но не шумите!", "Защищает от холода вне воды."];
  LANG[INV.CHRISTMAS_HAT] = ["Рождественская Шапка", "Ох-хо-хо, Счастливого Рождества", "Защищает от холода вне воды."];
  LANG[INV.ELF_HAT] = ["Шапка Эльфа", "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!", "Защищает от холода вне воды."];
  LANG[INV.HOOD] = ["Капюшон", "Вы разбойник", "Вы можете украсть что-то, если", "1) Ночь", "2) Вы ничего не носите", "3)Если вас не тронули в течение восьми секунд", "4) Вы не рядом с огнём", "5) Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
  LANG[INV.EARMUFFS] = ["Теплые Наушники", "Какая-то маленькая шапка.", "Защищает от холода вне воды."];
  LANG[INV.COAT] = ["Шапка", "Так же называется пальтом.", "Защищает от холода вне воды."];
  LANG[INV.CAP_SCARF] = ["Зимний Шарф и Шапка", "Очень комфортно", "Очень тепло"];
  LANG[INV.PEASANT] = ["Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
  LANG[INV.WINTER_HOOD] = ["Зимний Капюшон", "Вы можете украсть что-то, если", "- Ночь", "- Вы ничего не носите", "- Если вас не тронули в течение четырёх секунд", "- Вы не рядом с огнём", "- Вы не можете ничего украсть у крестьянской туники", "Защищает от холода вне воды."];
  LANG[INV.WINTER_PEASANT] = ["Зимняя Крестьянская Туника", "Ваши растения растут быстрее", "Защищает от холода вне воды."];
  LANG[INV.DIVING_MASK] = ["Акваланг", "Вы быстрее передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 2, Защита от животных: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Супер Акваланг", "Вы очень быстро передвигаетесь по воде", "Тепло в воде", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"];
  LANG[INV.DRAGON_HEART] = ["Сердце Дракона", "Превращает вас в призрака после смерти!", "Вы призрак на 60 секунд", "Найдите камень воскрешения"];
  LANG[INV.GEMME_GREEN] = ["Зелёный Драгоценный Камень", "Вы без читов, правильно?"];
  LANG[INV.GEMME_ORANGE] = ["Оранжевый Драгоценный Камень", "Только настоящий пират найдёт это!"];
  LANG[INV.GEMME_BLUE] = ["Синий Драгоценный Камень", "Для очень добрых людей"];
  LANG[INV.CROWN_GREEN] = ["Зеленая корона", "Вы лечите себя очень быстро", "Лечит: 40", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.CROWN_ORANGE] = ["Оранжевая Корона", "Вам очень повезло", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.CROWN_BLUE] = ["Синяя Корона", "Как только вы умрёте, вы станете призраком", "Но вы потеряете своё оружие", "Защита от игроков: 4, Защита от животных: 16"];
  LANG[INV.BUCKET_FULL] = ["Ведро", "Используется для заполнения колодца", "Одно ведро равняется двенадцати бутылкам"];
  LANG[INV.BUCKET_EMPTY] = ["Пустое ведро", "Вам надо заполнить это ведро возле воды"];
  LANG[INV.BOTTLE_FULL] = ["Бутылка", "Позволяет пить воду в любом месте", "Вода: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Пустая бутылка", "Вы можете заполнить бутылку возле воды"];
  LANG[INV.WATERING_CAN] = ["Пустая Лейка", "Вы можете заполнить лейку возле воды"];
  LANG[INV.WATERING_CAN_FULL] = ["Лейка", "Позволяет поливать растения", "Урон: 1"];
  LANG[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"];
  LANG[INV.PAPER] = ["Бумага", "Используется при создании книги"];
  LANG[INV.BOOK] = ["Книга", "Сокращает время изготовления предметов", "Должно быть одето для работы", "Урон: 1"];
  LANG[INV.BANDAGE] = ["Бинт", "Восстанавливает ваше здоровье быстрее", "Лечит: 30", "Эффект: 5"];
  LANG[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"];
  LANG[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"];
  LANG[INV.TOTEM] = ["Тотем", "Позволяет вам создать команду", "Совместное использование дверей и сундуков", "Вредное здание не повредит вашего друга"];
  LANG[INV.BRIDGE] = ["Мост", "Очень полезно на воде", "Позволяет вам пить без потери воздуха", "Передвигаетесь быстрее по воде"];
  LANG[INV.SIGN] = ["Табличка", "Оставьте сообщение другим", "Прочность: 200"];
  LANG[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"];
  LANG[INV.WELL] = ["Колодец", "Позволяет заполнить бутылку", "Прочность: 1000"];
  LANG[INV.WALL] = ["Деревянная Стена", "Это просто стена", "Прочность: 1000"];
  LANG[INV.STONE_WALL] = ["Каменная Стена", "Это немного посерьезнее.", "Прочность: 1500"];
  LANG[INV.GOLD_WALL] = ["Золотая Стена", "Золото на ваших стенах? Она ослепляет.", "Прочность: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Алмазная Стена", "Очень блестит, следите за вашими глазами", "Прочность: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Аметистовая стена", "Вы должны быть слишком напуганы, чтобы уйти!", "Прочность: 3500"];
  LANG[INV.SPIKE] = ["Деревянная Стена с Шипами", "Может наносить урон врагам", "Урон: 10, Урон за один удар: 2", "Прочность: 150"];
  LANG[INV.STONE_SPIKE] = ["Каменная Стена с Шипами", "Я не хотел бы быть вашим врагом", "Урон: 20", "Урон за один удар: 3", "Прочность: 300"];
  LANG[INV.GOLD_SPIKE] = ["Золотая Стена с Шипами", "Вы очень жестоки.", "Урон: 30", "Урон за один удар: 3", "Прочность: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Алмазная Стена с Шипами", "Вам не нравится иметь компанию.", "Урон: 40", "Урон за один удар: 4", "Прочность: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Аметистовая Стена с Шипами", "Какого черта, что ваши соседи сделали с вами?", "Урон: 50", "Урон за один удар: 4", "Прочность: 2400"];
  LANG[INV.WOOD_DOOR] = ["Деревянная Дверь", "Может быть открыта и закрыта вами или друзьями", "Прочность: 1000"];
  LANG[INV.STONE_DOOR] = ["Каменная Дверь", "Более серьезная и сильная дверь", "Прочность: 1500"];
  LANG[INV.GOLD_DOOR] = ["Золотая Дверь", "Вы перестраиваете \"Эль Дорадо?\"", "Прочность: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Алмазная Дверь", "Для роскошного дома", "Прочность: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Аметистовая Дверь", "Ваш дом в безопасности?", "Прочность: 3000"];
  LANG[INV.FURNACE] = ["Печь", "Согревает", "Тратит дерево каждые 5 секунд", "Прочность: 1000"];
  LANG[INV.WINDMILL] = ["Мельница", "Может сделать муку из пшеницы", "Требует 5 секунд для получения муки", "Даёт очки при работе", "Прочность: 2000"];
  LANG[INV.BREAD_OVEN] = ["Хлебная Печь", "Позволяет готовить хлеб из муки", "Требует 10 секунд для получения хлеба", "Даёт очки при работе", "Прочность: 2000"];
  LANG[INV.RESURRECTION] = ["Камень Воскрешения", "Это магия", "Воскрешает вас, если вы призрак", "Вы потеряете своё оружие", "Прочность: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер";
  LANG[TEXT.KICKED] = "Выгнаны: ";
  LANG[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то";
  LANG[TEXT.KEY_WRONG] = "Ваш ключ неправильный";
  LANG[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш";
  LANG[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет";
  LANG[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день";
  LANG[TEXT.SURVIVED] = "Вы выжили ";
  LANG[TEXT.DAYS] = " дней";
  LANG[TEXT.DEAD_SAD] = "Вы умерли ;-;";
  LANG[TEXT.SPAM_ME] = "Сервер не может найти точку спавна! Спамьте кнопку играть!";
  LANG[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!";
  LANG[TEXT.EMPTY] = "Ресурсы закончились";
  LANG[TEXT.INV_FULL] = "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
  LANG[TEXT.DEAD] = " умер";
  LANG[TEXT.WRONG_TOOL] = "Это не тот инструмент";
  LANG[TEXT.JOIN_TEAM] = "Вы вошли в команду";
  LANG[TEXT.YOU_DEAD] = "Вы умерли";
  LANG[TEXT.JOINED_TEAM] = " вошёл в команду";
  LANG[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена";
  LANG[TEXT.LEFT_TEAM] = "Вы покинули команду";
  LANG[TEXT.LEFT_TEAM2] = " покинул команду";
  LANG[TEXT.TOKEN] = "Кто-то использует ваш токен :>";
  LANG[TEXT.CHOOSE] = "Выберите сервер";
  LANG[TEXT.PLAYERS] = "игроков";
  LANG[TEXT.TOTAL_PLAYERS] = "игроков всего";
  LANG[TEXT.TOTAL_MODE] = "игроков в этом режиме";
  LANG[TEXT.COMMING_SOON] = "Скоро...";
  document.getElementById("nickname_input").placeholder = "Имя";
  DIE[0] = ["Вы были убиты без причины"];
  DIE[1] = ["Вы умерли от голода, как название игры подразумевает это"];
  DIE[2] = ["Вы замерзли до смерти. Так грустно", "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём."];
  DIE[3] = ["Игрок убил тебя и сказал 'стань лучше.'", "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов."];
  DIE[4] = ["Вы стояли слишком близко к огню и сгорели. Плохая идея.", "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого."];
  DIE[5] = ["Ваше тело станет гнездом для яиц паука", "Паук убил вас. По крайней мере это был не кролик."];
  DIE[6] = ["Волк больше не будет голодать после того, как наелся вами", "Они не собаки. Волки не любят ласкаться."];
  DIE[7] = ["Лиса была слишком быстрой для вас", "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?"];
  DIE[8] = ["Медведь просто хотел обнять тебя.", "Медведь был слишком грустным. Мне не жаль."];
  DIE[9] = ["Вы были сожжены драконом. Так грустно.", "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть."];
  DIE[10] = ["Вы прыгнули в стену с шипами. Плохая идея...", "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей."];
  DIE[11] = ["Даже призрак может умереть.", "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что..."];
  DIE[12] = ["Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.", "Вы убили сырую пищу. Она тоже тебя убила."];
  DIE[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
  DIE[14] = ["Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь."];
  DIE[15] = ["Не волнуйся, пиранья сочла тебя вкусным.", "Веселый факт: Пираньи едят людей. В том числе тебя."];
  DIE[16] = ["LapaMauve не планировал, что ты убьёшь кракена", "Крак! Кракен сломал твой череп."];
  DIE[17] = ["Твоя кожа разваливается, солнце убило тебя"];
  DIE[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
  DIE[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
  DIE[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
  DIE[21] = ["Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Я голоден", "Нужны твои мозги Uuunnnggg...", "Свежее мясо здесь... Uuunnnggg", "Uuunnnggg... Ты вкусный", "Uuunnnggg...", "Еда… Uuunnnggg...", "Я чувствую запах крови... Uuunnnggg"];
}
function set_portuguese() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x194536 = 0; _0x194536 < 7; _0x194536++) {
    document.getElementById("claim_reward_" + _0x194536).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["mão"];
  LANG[INV.GROUND] = ["terra", "está sujo!"];
  LANG[INV.SAND] = ["areia", "entrou nos meus olhos!"];
  LANG[INV.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"];
  LANG[INV.STONE] = ["pedra", "também chamado rocha"];
  LANG[INV.GOLD] = ["ouro", "seja generoso, dê para outros"];
  LANG[INV.DIAMOND] = ["diamante", "o que você irá fazer com isso?"];
  LANG[INV.AMETHYST] = ["ametista", "é mauve como lapa"];
  LANG[INV.FLOUR] = ["farinha", "usada na cozinha"];
  LANG[INV.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"];
  LANG[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
  LANG[INV.MEAT] = ["carne crua", "você pode cozinhar na fogueira", "envenenamento por comida: 10", "comida: 15"];
  LANG[INV.COOKED_MEAT] = ["carne assada", "um mal passado, por favor", "comida: 35"];
  LANG[INV.FOODFISH] = ["peixe cru", "eu acho que ainda está vivo", "causa envenenamento por comida: 10", "comida: 18"];
  LANG[INV.FOODFISH_COOKED] = ["peixe assado", "com limão é perfeito", "comida: 35"];
  LANG[INV.BREAD] = ["pão", "um excelente pão francês", "é a moeda do mercado", "comida: 15"];
  LANG[INV.SANDWICH] = ["sanduíche", "saboroso com rissol de krabby", "comida: 100"];
  LANG[INV.CANDY] = ["doces", "apenas para crianças!", "comida: 100"];
  LANG[INV.SUGAR_CAN] = ["cana-de-açúcar", "prove, é delicioso!", "comida: 100"];
  LANG[INV.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"];
  LANG[INV.SEED] = ["sementes de berries", "cresce como berrie", "nasce em: 2min", "cresce em: 55s", "precisa de água em: 3min 20s", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"];
  LANG[INV.WHEAT_SEED] = ["semente de trigo", "cresce como trigo", "nasce em: 2min", "cresce em: 16s", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 days"];
  LANG[INV.WILD_WHEAT] = ["planta selvagem", "vira farinha quando coloca em um moinho de vento"];
  LANG[INV.PUMPKIN_SEED] = ["semente de abóbora", "cresce como abóbora", "nasce em: 2min 40s", "cresce em: 2min", "precisa de água em: 2min", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
  LANG[INV.GARLIC_SEED] = ["semente de alho", "muito perigoso para vampiros", "dano: 20", "nassce: 4min", "cresce em: 1min 10s", "precisa de água em: 1min 40s", "durabilidade: 700", "tempo de vida: 8 dias"];
  LANG[INV.GARLIC] = ["alho", "cura você e reduz o frio", "comida: 14", "cura ao longo do tempo: 30", "efeito: 1"];
  LANG[INV.THORNBUSH_SEED] = ["semente de mato de espinhos", "pode dar dano nos seus inimigos", "dano: 20", "nasce em: 4min", "cresce em: 15s", "precisa de água em: 3min", "durabilidade: 1000", "tempo de vida: 8 days"];
  LANG[INV.THORNBUSH] = ["mato de espinhos", "pica!"];
  LANG[INV.PLOT] = ["pote", "sério, use isso", "com esse GMO fertilize suas plantas", "vai crescer mais rápido e com menos água", "durabilidade: 2000"];
  LANG[INV.ICE] = ["gelo", "útil para fazer bolo e água"];
  LANG[INV.SPANNER] = ["chave inglesa", "para reparar portas, muros e muros com espinho", "dano: 2"];
  LANG[INV.FUR_WOLF] = ["pele de lobo", "cachorro? mas onde está o cachorro?!"];
  LANG[INV.FUR] = ["pele de coelho", "o coelho era tão fofo..."];
  LANG[INV.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"];
  LANG[INV.SPECIAL_FUR_2] = ["pele negra", "você está pronto para fazer algo errado"];
  LANG[INV.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"];
  LANG[INV.SCALES] = ["escala", "é pequeno como peixe!"];
  LANG[INV.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"];
  LANG[INV.FIRE] = ["fogueira", "esquenta você!", "durabilidade: 150", "tempo de vida: 2min"];
  LANG[INV.BIG_FIRE] = ["fogueira grande", "te esquenta por mais tempo!", "durabilidade: 400", "tempo de vida: 6min"];
  LANG[INV.WORKBENCH] = ["mesa de trabalho", "muito útil para fazer todos os objetos"];
  LANG[INV.CORD] = ["linha", "usada para fazer chapéus e mochila"];
  LANG[INV.BLUE_CORD] = ["linha de diamante", "usada para fazer chapéus especiais"];
  LANG[INV.CHEST] = ["baú", "permite que você guarde itens", "durabilidade: 500"];
  LANG[INV.SWORD_WOOD] = ["espada de madeira", "isso funciona?", "dano: 12", "dano em construções: 4"];
  LANG[INV.SWORD] = ["espada de pedra", "seja legal com outros", "dano: 19", "dano em construções: 6"];
  LANG[INV.SWORD_GOLD] = ["espada de ouro", "rei da floresta", "dano: 22", "dano em construções: 7"];
  LANG[INV.SWORD_DIAMOND] = ["espada de diamante", "você pode sentir o poder", "dano: 24", "dano em construções: 8"];
  LANG[INV.PIRATE_SWORD] = ["espada de pirata", "AYYYYY!", "alcança mais distância que a espada normal", "dano: 24", "dano em construções: 8"];
  LANG[INV.SWORD_AMETHYST] = ["espada de ametista", "mauve é a cor mais bonita do mundo", "dano: 27", "dano em construções: 9"];
  LANG[INV.DRAGON_SWORD] = ["espada do dragão", "sem piedade!", "dano: 30", "dano em construções: 10"];
  LANG[INV.DRAGON_SPEAR] = ["lança do dragão", "mate todos eles!", "dano: 22", "dano em construções: 6"];
  LANG[INV.PICK_WOOD] = ["picareta de madeira", "pode coletar apenas madeira e pedra", "dano: 1"];
  LANG[INV.PICK_STONE] = ["picareta de pedra", "pode coletar madeira, pedra e ouro", "dano: 2"];
  LANG[INV.PICK_GOLD] = ["picareta de ouro", "pode coletar diamante", "dano: 3", "dano em construções: 1"];
  LANG[INV.PICK_DIAMOND] = ["picareta de diamante", "pode coletar tudo", "dano: 4", "dano em construções: 1"];
  LANG[INV.PICK_AMETHYST] = ["picareta de ametista", "pode coletar tudo, parece fantastico!", "dano: 5", "dano em construções: 1"];
  LANG[INV.HAMMER] = ["martelo de pedra", "útil para destruir construções", "não funciona bem no diamante e na ametista", "dano: 2", "dano em construções: 20"];
  LANG[INV.HAMMER_GOLD] = ["martelo de ouro", "útil para destruir construções", "não funciona bem na ametista", "dano: 3", "dano em construções: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["martelo de diamante", "útil para destruir construções", "dano: 4", "dano em construções: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["martelo de ametista", "útil para destruir construções", "dano: 5", "dano em construções: 50"];
  LANG[INV.SUPER_HAMMER] = ["super martelo", "você planeja destruir o mundo?", "dano: 12", "dano em construções: 70"];
  LANG[INV.WOOD_SPEAR] = ["lança de madeira", "parece um graveto de madeira mas pica.", "dano: 10", "dano em construções: 2"];
  LANG[INV.SPEAR] = ["lança de pedra", "o começo da evolução!", "dano: 14", "dano em construções: 4"];
  LANG[INV.GOLD_SPEAR] = ["lança de ouro", "cuidado, pica!", "dano: 15", "dano em construções: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["lança de diamante", "você está pronto para matar um dragão", "Dano: 17", "dano em construções: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["lança de ametista", "dragões não te amedrontam", "Dano: 18", "dano em construções: 6"];
  LANG[INV.SHOVEL] = ["pá de pedral", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 2"];
  LANG[INV.SHOVEL_GOLD] = ["pá de ouro", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 3", "dano em construções: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["pá de diamante", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 4", "dano em construções: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["pá de ametista", "cave o chão para pegar terra, areia e gelo", "você também pode pegar minerais", "dano: 5", "dano em construções: 1"];
  LANG[INV.WOOD_HELMET] = ["capacete de madeira", "melhor que nada", "defesa de jogadores: 1", "defesa de animais: 4"];
  LANG[INV.STONE_HELMET] = ["capacete de pedra", "você está pronto para a batalha!", "defesa de jogadores: 2", "Animals Defense: 8"];
  LANG[INV.GOLD_HELMET] = ["capacete de ouro", "AKA o capacete dos selvagens", "defesa de jogadores: 4", "defesa de animais: 13"];
  LANG[INV.DIAMOND_HELMET] = ["capacete de diamante", "não se precipite tanto", "defesa de jogadores: 5", "defesa de animais: 19"];
  LANG[INV.AMETHYST_HELMET] = ["capacete de ametista", "você não tem medo de mais nada", "defesa de jogadores: 6", "defesa de animais: 23"];
  LANG[INV.DRAGON_HELMET] = ["capacete do dragão", "você vai conquistar o mundo", "defesa de jogadores: 8", "defesa de animais: 27"];
  LANG[INV.EXPLORER_HAT] = ["chapéu de explorador", "animais não vão te atacar", "mas não faça barulho!", "quente fora da água"];
  LANG[INV.CHRISTMAS_HAT] = ["gorro de natal", "Oh, oh, oh, feliz natal", "quente fora da água e neve"];
  LANG[INV.ELF_HAT] = ["chapéu de elfo", "não deixe-se ser explorado, seu pequeno elfo de neve!", "quente fora da água e neve"];
  LANG[INV.HOOD] = ["capuz", "você é um trapaceiro", "você pode roubar alguém apenas se", "1) é de noite", "2)você não está segurando nada", "3) se você n foi tocado por 5 segundos", "4) você não está perto de uma fogueira", "5) seu alvo não está com equipamento camponês", "quente fora da água e na neve"];
  LANG[INV.EARMUFFS] = ["protetor de orelhas", "algum tipo de chapka pequena.", "quente fora da água e neve"];
  LANG[INV.COAT] = ["Chapka", "também chamado de casaco.", "esquenta fora da água e na neve", "muito quente"];
  LANG[INV.CAP_SCARF] = ["Chapéu de inverno", "Muito confortável", "Muito quente"];
  LANG[INV.PEASANT] = ["túnica", "suas plantas crescem rápido", "quente fora da água e na neve"];
  LANG[INV.WINTER_HOOD] = ["capuz de inferno", "você só pode roubar alguém se", "é de noite", "-você não está segurando nada", "- se você não foi tocado por 4 segundos", "- você não está perto de uma fogueira", "-seu alvo não está com equipamento de camponês de inverno", "esquenta fora da água e na neve"];
  LANG[INV.WINTER_PEASANT] = ["camponês de inverno", "suas plantas crescem rápido", "quente fora da água e na neve"];
  LANG[INV.DIVING_MASK] = ["máscara de mergulho", "você é rápido na água", "quente na água", "defesa de jogadores: 2, defesa de animais: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["super máscara de mergulho", "você é muito rápido na água", "quente na água", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.DRAGON_ORB] = ["esfera do dragão", "dado na questt"];
  LANG[INV.DRAGON_HEART] = ["coração de dragão", "torna você num fantasmas na morte!", "você é um fantasma por 60 segundos", "ache uma pedra da ressurreição"];
  LANG[INV.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"];
  LANG[INV.GEMME_ORANGE] = ["pedra laranja", "apenas um pirata de verdade pode achar-lo!"];
  LANG[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"];
  LANG[INV.CROWN_GREEN] = ["coroa verde", "você se regenera muito rápido", "regenera ao longo do tempo: 40", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.CROWN_ORANGE] = ["coroa laranja", "de repente você se sente muito sortudo", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.CROWN_BLUE] = ["coroa azul", "quando você morrer, você vira um fantasma", "você perderá sua arma", "defesa de jogadores: 4, defesa de animais: 16"];
  LANG[INV.BUCKET_FULL] = ["balde", "útil para encher um poço", "um balde equivale a doze garrafas"];
  LANG[INV.BUCKET_EMPTY] = ["balde vazio", "você precisa encher esse balde perto de uma fonte de água"];
  LANG[INV.BOTTLE_FULL] = ["garrafa", "permite que você beba água em qualquer lugar", "água: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["garrafa vazia", "você pode encher essa garrafa perto de uma fonte de água"];
  LANG[INV.WATERING_CAN] = ["regador vazio", "você deve enche-lo com uma fonte de água para usa-lo"];
  LANG[INV.WATERING_CAN_FULL] = ["regador", "permite regar as plantas", "dano: 1"];
  LANG[INV.BAG] = ["mochila", "mais espaço para seus itens!"];
  LANG[INV.PAPER] = ["papel", "usado para fazer o livro"];
  LANG[INV.BOOK] = ["livro", "permite reduzir consideradamente o tempo de construções", "mas precisa está equipado para fucionar", "dano: 1"];
  LANG[INV.BANDAGE] = ["bandagem", "recupera sua vida mais rapidamente", "Heal over time: 30", "Effect: 5"];
  LANG[INV.LOCK] = ["fechadura", "permite você trancar seu baú"];
  LANG[INV.LOCKPICK] = ["chave", "permite destrancar um baú"];
  LANG[INV.TOTEM] = ["Totem", "permite você criar um time", "compartilha portas e baús", "edifício prejudicial não quer machucar seu amigo"];
  LANG[INV.BRIDGE] = ["ponte", "muito útil na água", "permite você beber sem se afogar", "anda rápido na água"];
  LANG[INV.SIGN] = ["placa", "deixe uma mensagem para outros", "durabilidade: 200"];
  LANG[INV.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"];
  LANG[INV.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
  LANG[INV.WALL] = ["muro de madeira", "você sabia que o muro dança?", "durabilidade: 1000"];
  LANG[INV.STONE_WALL] = ["muro de pedra", "é um pocu mais sério.", "durabilidade: 1500"];
  LANG[INV.GOLD_WALL] = ["muro de ouro", "ouro nos seus muros? é muito chamativo.", "durabilidade: 2000"];
  LANG[INV.DIAMOND_WALL] = ["muro de diamante", "tão brilhoso, veja seus olhos", "durabilidade: 2500"];
  LANG[INV.AMETHYST_WALL] = ["muro de ametista", "você está muito assustado de sair!", "durabilidade: 3000"];
  LANG[INV.SPIKE] = ["espiga de madeira", "pode dar dano nos seus inimigos", "dano: 10, dano no acerto: 2", "durabilidade: 150"];
  LANG[INV.STONE_SPIKE] = ["espiga de pedra", "eu não quero ser seu inimigo.", "dano: 20", "dano no acerto: 3", "durabilidade: 300"];
  LANG[INV.GOLD_SPIKE] = ["espiga de ouro", "você é tão cruel.", "dano: 30", "dano no acerto: 3", "durabilidade: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["espiga de diamante", "você não gosta de ter companhia.", "dano: 40", "dano no acerto: 4", "durabilidade: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["espiga de ametista", "o que diabos seu vizinhos fizeram para você?", "dano: 50", "dano no acerto: 4", "durabilidade: 2400"];
  LANG[INV.WOOD_DOOR] = ["porta de madeira", "pode ser aberta ou fechada por você ou seus amigos", "durabilidade: 1000"];
  LANG[INV.STONE_DOOR] = ["porta de pedra", "uma porta mais forte é mais sério", "durabilidade: 1500"];
  LANG[INV.GOLD_DOOR] = ["porta de ouro", "você está re-construindo o el dorado?", "durabilidade: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["porta de diamante", "para uma casa brilhante", "durabilidade: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["porta de ametista", "é a sua casa um lugar trancado seguro?", "durabilidade: 3500"];
  LANG[INV.FURNACE] = ["fornalha", "esquenta você", "consumi madeira em todo 5 segundos", "durabilidade: 1000"];
  LANG[INV.WINDMILL] = ["moinho de vento", "pode produzir farinha do trigo", "demora 5 segundos para fazer farinha", "dá pontos ao trabalhar", "durabilidade: 2000"];
  LANG[INV.BREAD_OVEN] = ["forno de pão", "permite fazer pão feito de farinha", "demora 10 segundos para fazer pão", "dá pontos ao trabalhar", "durabilidade: 2000"];
  LANG[INV.RESURRECTION] = ["pedra da ressurreição", "é mágico", "te ressuscita se você for um fantasmas", "você vai perder sua arma", "durabilidade 200: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor";
  LANG[TEXT.KICKED] = "kickado: ";
  LANG[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa";
  LANG[TEXT.KEY_WRONG] = "sua chave está errada";
  LANG[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos";
  LANG[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia";
  LANG[TEXT.SURVIVED] = "você sobreviveu ";
  LANG[TEXT.DAYS] = " dias";
  LANG[TEXT.DEAD_SAD] = "você está morto ;-;";
  LANG[TEXT.SPAM_ME] = "servidor não pôde achar um local de spawn! spam o botão de play!";
  LANG[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!";
  LANG[TEXT.EMPTY] = "não tem recursos";
  LANG[TEXT.INV_FULL] = "inventário está cheio (botão direito para deletar itens)";
  LANG[TEXT.DEAD] = " está morto";
  LANG[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa";
  LANG[TEXT.JOIN_TEAM] = "você entrou no time";
  LANG[TEXT.YOU_DEAD] = "você está morto";
  LANG[TEXT.JOINED_TEAM] = "entrou no time";
  LANG[TEXT.TEAM_DESTROYED] = "seu time foi destruido";
  LANG[TEXT.LEFT_TEAM] = "você saiu do time";
  LANG[TEXT.LEFT_TEAM2] = " saiu do time";
  LANG[TEXT.TOKEN] = "alguém roubou sua ficha :>";
  LANG[TEXT.CHOOSE] = "escolha um servidor";
  LANG[TEXT.PLAYERS] = "jogadores";
  LANG[TEXT.TOTAL_PLAYERS] = "jogadores totais";
  LANG[TEXT.TOTAL_MODE] = "jogadores nesse modo";
  LANG[TEXT.COMMING_SOON] = "Coming soon...";
  document.getElementById("nickname_input").placeholder = "Apelido";
  DIE[0] = ["você morreu sem motivo"];
  DIE[1] = ["você morreu de fome, como o jogo diz"];
  DIE[2] = ["você morreu de frio. tão triste", "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso."];
  DIE[3] = ["um jogador te matou dizendo a você para matar..'", "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente."];
  DIE[4] = ["você ficou muito perto de uma fogueira e queimou até a morte. má ideia.", "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso."];
  DIE[5] = ["seu corpo vai virar um ninho para ovos de aranhas", "uma aranha te matou. pelo menos não era um coelho."];
  DIE[6] = ["o lobo não vão morrer de fome depois te te comer", "eles não são cachorros. lobos não gostam de ser que nem animais de estimação."];
  DIE[7] = ["a raposa era muito rápida para você", "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?"];
  DIE[8] = ["o urso só queria um abraço.", " o urso era muito nu. eu não sinto muito."];
  DIE[9] = ["você foi queimado por um dragão. tão triste..", "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer."];
  DIE[10] = ["você pulou em um muro com espinhos. não é uma boa ideia...", "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas."];
  DIE[11] = ["até fantasmas podem morrer.", "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so..."];
  DIE[12] = ["uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.", "você matou a carne crua. a carne crua te matou também."];
  DIE[13] = ["você morreu de sede. melhor beber sua própria urina."];
  DIE[14] = ["você sabia que você morre afogado? agora você sabe."];
  DIE[15] = ["não se preocupe, as piranhas acham você saboroso.", "fato engraçado: Piranhas comem pessoas. incluindo você."];
  DIE[16] = ["LapaMauve não planeja você matar o kraken", "um kraken comeu seu esqueleto."];
  DIE[17] = ["sua pele caindo aos pedaços, o sol te matou."];
  DIE[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
  DIE[19] = ["como vampiro, não chegue perto do alho."];
  DIE[20] = ["você comeu alho como vampiro, o que você esperava?"];
  DIE[21] = ["seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... estou morrendo de fome", "preciso do seu cerébro Uuunnnggg...", "carne fresca aqui... Uuunnnggg", "Uuunnnggg... você parece saboroso", "Uuunnnggg...", "Eat... uuunnnggg...", "consigo sentir o cheiro de sangue... Uuunnnggg"];
}
function set_spanish() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x2d256c = 0; _0x2d256c < 7; _0x2d256c++) {
    document.getElementById("claim_reward_" + _0x2d256c).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Mano"];
  LANG[INV.GROUND] = ["Tierra", "¡Tan limpia como mis manos!"];
  LANG[INV.SAND] = ["Arena", "¡Tengo arena en mis ojos!"];
  LANG[INV.WOOD] = ["Madera", "¡Nunca hay suficiente!"];
  LANG[INV.STONE] = ["Piedra", "También llamada roca."];
  LANG[INV.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"];
  LANG[INV.DIAMOND] = ["Diamante", "¿Que vas a hacer con él?"];
  LANG[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"];
  LANG[INV.FLOUR] = ["Harina", "Usada para cocinar."];
  LANG[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
  LANG[INV.CAKE] = ["Tarta", "¡Cumpleaños Feliz!", "Comida: 100"];
  LANG[INV.MEAT] = ["Carne Cruda", "Se cocina con fuego", "Causa veneno. 10", "Comida: 15"];
  LANG[INV.COOKED_MEAT] = ["Carne Cocinada", "es la supervivencia del más fuerte :'(", "Comida: 35"];
  LANG[INV.FOODFISH] = ["Pescado Crudo", "Creo que sigue vivo", "Causa veneno de comida: 10", "Comida: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Pescado Cocinado", "Con limón sería perfecto", "Comida: 35"];
  LANG[INV.BREAD] = ["Pan", "¡Caliente, desde Francia!", "Es dinero usado en la tienda", "Comida: 15"];
  LANG[INV.SANDWICH] = ["Bocadillo", "Sabe como un Krabby Patty", "Comida: 100"];
  LANG[INV.CANDY] = ["Caramelos", "¡Solo para niños/as!", "Comida: 100"];
  LANG[INV.SUGAR_CAN] = ["Caña de Azúcar", "Pruébala, es deliciosa", "Comida: 100"];
  LANG[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"];
  LANG[INV.SEED] = ["Semillas de Bayas", "Se convierte en bayas", "Nacimiento: 2 Minutos", "Crecimiento: 55 Segundos", "Necesita agua: 3 Minutos 20 Segundos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"];
  LANG[INV.WHEAT_SEED] = ["Semilla de Trigo", "Se convierte en Trigo ", "Nacimiento: 2 Minutos", "Crecimiento: 16 Segundos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.WILD_WHEAT] = ["Trigo Silvestre", "Se convierte en harina cuando se coloca en un molino"];
  LANG[INV.PUMPKIN_SEED] = ["Semilla de Calabaza", "Crece a Calabazas", "Nacimiento: 2 Minutos 40 Segundos", "Crecimiento: 2 Minutos", "Necesita agua: 2 Minutos", "Durabilidad: 700", "Tiempo de vida: 8 Días"];
  LANG[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
  LANG[INV.GARLIC_SEED] = ["Semilla de Ajo", "Muy peligroso para vampiros", "Daño: 20", "Nacimiento: 4 Minutos", "Crecimiento: 1 Minutos 10 Segundos", "Necesita Agua: 1 Minutos 40 Segundos", "Durabilidad: 700", "Tiempo de Vida: 8 Días"];
  LANG[INV.GARLIC] = ["Ajo", "Te sana y reduce el frio", "Comida: 14", "sanación con eliempo: 30", "Efecto: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Semilla de Planta de Espinas", "Puede dañar a tus enemigos", "Daño por contacto: 20", "Nacimiento: 4 Minutos", "Crecimiento: 15 Segundos", "Necesita Agua: 3 Minutos", "Durabilidad: 1000", "Tiempo de Vida: 8 Días"];
  LANG[INV.THORNBUSH] = ["Planta de Espinas", "¡Te daña!"];
  LANG[INV.PLOT] = ["Parcela", "En serio, úsala", "Se usa para plantar plantas en invierno o sobre puentes", "Tus plantas crecerán muy rápido y necesitarán menos agua", "Durabilidad: 2000"];
  LANG[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"];
  LANG[INV.SPANNER] = ["Llave de Reparación", "Puede reparar paredes, puertas y pinchos", "Daño: 2"];
  LANG[INV.FUR_WOLF] = ["Pelaje de Lobo", "¿Perrito? ¡¿Donde esta el perrito?!"];
  LANG[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
  LANG[INV.SPECIAL_FUR] = ["Pelaje Puro", "¡Eres una maquina de pan!"];
  LANG[INV.SPECIAL_FUR_2] = ["Pelaje Oscuro", "¿Estás listo para hacer algo malo?"];
  LANG[INV.FUR_WINTER] = ["Pelaje de Invierno", "Esos animales solo querían un abrazo..."];
  LANG[INV.SCALES] = ["Escamas", "¡Huele a pescado!"];
  LANG[INV.KRAKEN_SKIN] = ["Piel del Kraken", "¡¿No tienes mucho miedo?!"];
  LANG[INV.FIRE] = ["Fogata", "¡Te calienta!", "Durabilidad: 150", "Tiempo de vida: 2 Minutos"];
  LANG[INV.BIG_FIRE] = ["Fogata Grande", "¡Te calienta por más tiempo!", "Durabilidad: 400", "Tiempo de Vida: 6 Minutos"];
  LANG[INV.WORKBENCH] = ["Mesa de Trabajo", "¡Te sirve mucho para crear cosas de todos tipos!"];
  LANG[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"];
  LANG[INV.BLUE_CORD] = ["Hilo de Diamante", "Usado para craftear ropa especial"];
  LANG[INV.CHEST] = ["Cofre", "Te permite guardar cosas, o compartirlas", "Durabilidad: 500"];
  LANG[INV.SWORD_WOOD] = ["Espada de Madera", "¿Eso funciona?", "Daño: 12", "Daño para estructuras: 4"];
  LANG[INV.SWORD] = ["Espada de Piedra", "Sé bueno con los otros", "Daño: 19", "Daño para estructuras: 6"];
  LANG[INV.SWORD_GOLD] = ["Espada de Oro", "¡Rey de la selva!", "Daño: 22", "Daño para estructuras: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Espada de Diamante", "Puedes sentir el poder", "Daño: 24", "Daño para estructuras: 8"];
  LANG[INV.PIRATE_SWORD] = ["Espada de Pirata", "Arrrrr!", "¡Mejor distancia que una espada normal", "Daño: 24", "Daño para estructuras: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Espada de Amatista", "Mauve es el mejor color del mundo :3", "Daño: 27", "Daño para estructuras: 9"];
  LANG[INV.DRAGON_SWORD] = ["Espada del Dragón", "¡Tienes el poder de un Dragón!", "Daño: 30", "Daño para estructuras: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Lanza del Dragón", "¡Mátalos a todos!", "Daño: 22", "Daño para estructuras: 6"];
  LANG[INV.PICK_WOOD] = ["Pico de Madera", "Solo puede minar madera y piedra", "Daño: 1"];
  LANG[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
  LANG[INV.PICK_GOLD] = ["Pico de Oro", "Puede minar hasta Diamante", "Daño: 3", "Daño para estructuras: 1"];
  LANG[INV.PICK_DIAMOND] = ["Pico de Diamante", "¡Puede minarlo todo!", "Daño: 4", "Daño para estructuras: 1"];
  LANG[INV.PICK_AMETHYST] = ["Pico de Amatista", "¡Puede minarlo todo, parece fantastico!", "Daño: 5", "Daño para estructuras: 1"];
  LANG[INV.HAMMER] = ["Martillo de Piedra", "Bueno para destruir estructuras", "No funciona bien con diamante y amatista", "Daño: 2", "Daño para estructuras: 20"];
  LANG[INV.HAMMER_GOLD] = ["Martillo de Oro", "Bueno para destruir estructuras", "No funciona bien con amatista ", "Daño: 3", "Daño para estructuras: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Martillo de Diamante", "Bueno para destruir estructuras", "Daño: 4", "Daño para estructuras: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Martillo de Amatista", "Bueno para destruir estructuras", "Daño: 5", "Daño para estructuras: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Martillo", "¿Has planeado destruir el mundo?", "Daño: 12", "Daño para estructuras: 70"];
  LANG[INV.WOOD_SPEAR] = ["Lanza de Madera", "Como un palo de madera, pero mata.", "Daño: 10", "Daño para estructuras: 2"];
  LANG[INV.SPEAR] = ["Lanza de Piedra", "¡El comienzo de la evolución!", "Daño: 14", "Daño para estructuras: 4"];
  LANG[INV.GOLD_SPEAR] = ["Lanza de Oro", "¡Cuidado, te hace mucho daño!", "Daño: 15", "Daño para estructuras: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Lanza de Diamante", "¡Estas preparado para matar al Dragon!", "Daño: 17", "Daño para estructuras: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Lanza de Amatista", "Los dragones te tienen miedo", "Daño: 18", "Daño para estructuras: 6"];
  LANG[INV.SHOVEL] = ["Pala de Piedra", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Pala de Oro", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 3", "Daño para estructuras: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Pala de Diamante", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 4", "Daño para estructuras: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Pala de Amatista", "Cava para conseguir tierra, arena y hielo", "También puedes conseguir minerales", "Daño: 5", "Daño para estructuras: 1"];
  LANG[INV.WOOD_HELMET] = ["Casco de Madera", "¡Mejor que nada!", "Protección contra jugadores: 1", "Protección contra animales: 4"];
  LANG[INV.STONE_HELMET] = ["Casco de Piedra", "¡Estas listo para la batalla!", "Protección contra jugadores: 2", "Protección contra animales: 8"];
  LANG[INV.GOLD_HELMET] = ["Casco de Oro", "AKA el casco de los salvajes", "Protección contra jugadores: 4", "Protección contra animales: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Casco de Diamante", "No ataques tanto", "Protección de jugadores: 5", "Protección contra animales: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Casco de Amatista", "¡No tienes miedo de nada!", "Protección contra jugadores: 6", "Protección contra animales: 23"];
  LANG[INV.DRAGON_HELMET] = ["Casco del Dragón", "¡Vas a dominar el mundo!", "Protección contra jugadores: 8", "Protección contra animales: 27"];
  LANG[INV.EXPLORER_HAT] = ["Gorro del Explorador", "Los animales no te atacarán", "¡Pero no ataques!", " Te calienta en el invierno y fuera del agua"];
  LANG[INV.CHRISTMAS_HAT] = ["Gorro de Navidad", "¡Ho, ho, ho, feliz Navidad!", "Te calienta en el invierno y fuera del  agua"];
  LANG[INV.ELF_HAT] = ["Gorro del Duende", "¡No dejes que te descubren que eres, duende del hielo!", "Te calienta en el invierno y fuera del agua"];
  LANG[INV.HOOD] = ["Capucha", "¡Eres un ladron!", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado en los  8 segundos anteriores", "4) No estas cerca de una fogata", "5) Si tu objetivo no lleva puesto una gorra de campesino", "Te calienta en invierno y fuera del agua"];
  LANG[INV.EARMUFFS] = ["Orejeras", "Como un abrigo pequeño.", "Te calienta en invierno y fuera del agua"];
  LANG[INV.COAT] = ["Chapka", "También llamado abrigo.", "Te calienta en el invierno y fuera del agua"];
  LANG[INV.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
  LANG[INV.PEASANT] = ["Gorra de Campesino", "Tus plantas crecen mas rápido", "Te Calienta en el invierno y fuera del agua"];
  LANG[INV.WINTER_HOOD] = ["Capucha de Invierno", "Puedes robar de alguien solo si", "1) Es de noche", "2) No tienes nada en tu mano", "3) Si no te han tocado antes de 8 segundos", "4) No estas cerca de un fuego", "5) Si tu objetivo no lleva puesto una Gorra de Campesino", "Te calienta en invierno y fuera del agua"];
  LANG[INV.WINTER_PEASANT] = ["Gorra de Invierno del Campesino", "Tus plantas crecen aún más rápido", "Te calienta en invierno y fuera del agua"];
  LANG[INV.DIVING_MASK] = ["Máscara de Buceo", "Eres un tiburón en el agua", "Calienta en el agua", "Protección contra jugadores: 2, Protección contra animales: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Súper Máscara de Buceo", "Eres muy rápido en agua", "Calienta en el agua", "Defensa del Jugador: 4, Defensa de los animales: 16"];
  LANG[INV.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"];
  LANG[INV.DRAGON_HEART] = ["Corazón del Dragón", "¡Te convierte en un fantasma cuando mueres!", "Eres un fantasma por 60 segundos", "Encuentra una Piedra de resurreción"];
  LANG[INV.GEMME_GREEN] = ["Gema Verde", "¿¿No has hecho trampas, verdad??"];
  LANG[INV.GEMME_ORANGE] = ["Gema Naranja", "¡Solo un pirata verdadero lo puede encontrar!"];
  LANG[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"];
  LANG[INV.CROWN_GREEN] = ["Corona Verde", "Te sanas muy rápido", "Sanación con el tiempo: 40", "Protección contra jugadores: 4, Protección contra animales: 16"];
  LANG[INV.CROWN_ORANGE] = ["Corona Naranja", "Ahora tienes much suerte", "Protección contra jugadores: 4, Protección contra animales: 16"];
  LANG[INV.CROWN_BLUE] = ["Corona Azul", "Cuando mueres, te conviertes en un fantasma", "Pero perderás tu alma", "Protección contra jugador: 4, Protección contra animales: 16"];
  LANG[INV.BUCKET_FULL] = ["Cubo", "Bueno para rellenar botellas", "Un cubo es equivalente a 12 botellas"];
  LANG[INV.BUCKET_EMPTY] = ["Cubo Vacío", "Tienes que llenar este cubo con agua"];
  LANG[INV.BOTTLE_FULL] = ["Botella", "Te permite beber agua donde quieras", "Agua: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"];
  LANG[INV.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"];
  LANG[INV.WATERING_CAN_FULL] = ["Regadera", "Te permite regar las plantas", "Daño: 1"];
  LANG[INV.BAG] = ["Mochila", "¡Mas espacio para tus cosas!"];
  LANG[INV.PAPER] = ["Hoja", "Usada para hacer un libro"];
  LANG[INV.BOOK] = ["Libro", "Reduce el tiempo de elaboración", "Lo tienes que tener en la mano para que funcione", "Daño: 1"];
  LANG[INV.BANDAGE] = ["Vendaje", "Recuperas vida mas rapido", "Sanación tiempo: 30", "Efecto: 5"];
  LANG[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"];
  LANG[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"];
  LANG[INV.TOTEM] = ["Tótem", "Te permite crear un equipo", "Compartir puertas y cofres cerrados", "Tus pinchos no dañan al resto tu equipo"];
  LANG[INV.BRIDGE] = ["Puente", "Muy útil en el agua", "Te permite beber agua sin tener que ahogarse", "Puedes nadar más rápido encima del agua"];
  LANG[INV.SIGN] = ["Cartel", "Sirve para dejar un mensage para otros", "Durabilidad: 200"];
  LANG[INV.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"];
  LANG[INV.WELL] = ["Fuente", "Permite rellenar botellas", "Durabilidad: 1000"];
  LANG[INV.WALL] = ["Pared de Madera", "Es solo una pared.", "Durabilidad: 1000"];
  LANG[INV.STONE_WALL] = ["Pared de Piedra", "Es un poco más serio", "Durabilidad: 1500"];
  LANG[INV.GOLD_WALL] = ["Pared de Oro", "¿Oro en de tus paredes? Eres rico", "Durabilidad: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Pared de Diamante", "Muy brillante, cuidado con tus ojos", "Durabilidad: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Pared de Amatista", "¡Debes tener mucho miedo de lo que hay fuera!", "Durabilidad: 3500"];
  LANG[INV.SPIKE] = ["Pincho de Madera", "Puede dañar a tus enemigos", "Daño: 10, Daño por golpe: 2", "Durabilidad: 150"];
  LANG[INV.STONE_SPIKE] = ["Pincho de Piedra", "No querría ser tu enemigo.", "Daño: 20", "Daño por contacto: 3", "Durabilidad: 300"];
  LANG[INV.GOLD_SPIKE] = ["Pincho de Oro", "¡Eres tan cruel!", "Daño: 30", "Daño por golpe: 3", "Durabilidad: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Pincho de Diamante", "No te gusta tener compañía.", "Daño: 40", "Daño por contacto: 4", "Durabilidad: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Pincho de Amatista", "¡¿Que demonios te hicieron tus vecinos?!", "Daño: 50", "Daño por contacto: 4", "Durabilidad: 2400"];
  LANG[INV.WOOD_DOOR] = ["Puerta de Madera", "Puedes abrir y cerrarla ", "Durabilidad: 1000"];
  LANG[INV.STONE_DOOR] = ["Puerta de Piedra", "Una puerta más buena es más seria", "Durabilidad: 1500"];
  LANG[INV.GOLD_DOOR] = ["Puerta de Oro", "¿Estas reconstruyendo El Dorado?", "Durabilidad: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Puerta de Diamante", "Para una casa brillante", "Durabilidad: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Puerta de Amatista", "¿Tu casa es una caja fuerte?", "Durabilidad: 3500"];
  LANG[INV.FURNACE] = ["Caldera", "Te calienta", "Consume 1 Madera cada 5 segundos", "Durabilidad: 1000"];
  LANG[INV.WINDMILL] = ["Molino", "Puede producir harina a partir del trigo", "Necesita 5 segundos para producir harina", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
  LANG[INV.BREAD_OVEN] = ["Horno de Pan", "Produce pan de harina", "Necesita 10 segundos para producir Pan", "Devuelve los puntos que trabaja", "Durabilidad: 2000"];
  LANG[INV.RESURRECTION] = ["Piedra de Resurreción", "¡Es magia!", "Te resucitacuando eres una fantasma", "Perderás tu arma", "Durabilidad: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor";
  LANG[TEXT.KICKED] = "Expulsado: ";
  LANG[TEXT.KEY_ALREADY] = "Tu llave ya está usada";
  LANG[TEXT.KEY_WRONG] = "Tu llave está mal";
  LANG[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos";
  LANG[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día";
  LANG[TEXT.SURVIVED] = "Has sobrevivido ";
  LANG[TEXT.DAYS] = " días";
  LANG[TEXT.DEAD_SAD] = "Estás muerto ;-;";
  LANG[TEXT.SPAM_ME] = "No se encuentra un lugar para unirse, ¡spamea el botón de jugar!";
  LANG[TEXT.SPAM_ME2] = "El servidor esta lleno, ¡spamea el botón de jugar!";
  LANG[TEXT.EMPTY] = "Recurso vacio";
  LANG[TEXT.INV_FULL] = "¡Inventario lleno!(Haz click derecho para borrar cosas) ";
  LANG[TEXT.DEAD] = " está muerto";
  LANG[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta";
  LANG[TEXT.JOIN_TEAM] = "Te has unido a un equipo";
  LANG[TEXT.YOU_DEAD] = "Estás muerto";
  LANG[TEXT.JOINED_TEAM] = " se unió al equipo";
  LANG[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido";
  LANG[TEXT.LEFT_TEAM] = "Has dejado el equipo";
  LANG[TEXT.LEFT_TEAM2] = " dejo el equipo ";
  LANG[TEXT.TOKEN] = "Alguien te robó tu token :>";
  LANG[TEXT.CHOOSE] = "Elige un servidor";
  LANG[TEXT.PLAYERS] = "jugadores";
  LANG[TEXT.TOTAL_PLAYERS] = "total de jugadores";
  LANG[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego";
  LANG[TEXT.COMMING_SOON] = "Próximamente...";
  document.getElementById("nickname_input").placeholder = "Apodo";
  DIE[0] = ["Has muerto por ninguna razón"];
  DIE[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
  DIE[2] = ["Te has congelado hasta morir, qué triste", "Moriste por hipotermia. La próxima quédate cerca de  una fogata."];
  DIE[3] = ["Un jugador te ha matado diciendo que mejores.", "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente."];
  DIE[4] = ["Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.", "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso."];
  DIE[5] = ["Tu cuerpo será un buen nido para los huevos de la arañas", "Una araña te ha matado, al menos no fué un conejo."];
  DIE[6] = ["El lobo no tendrá hambre después de comerte.", "No son perros, no les gusta ser acariciados."];
  DIE[7] = ["El zorro era demasiado rápido para ti.", "El zorro te convirtió en una caja. ¿Desde cuándo los animales tienen poderes mágicos?"];
  DIE[8] = ["El oso solo quería un abrazo", "El oso era demasiado para ti. Lo siento."];
  DIE[9] = ["El dragón te quemó vivo.", "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas."];
  DIE[10] = ["Has saltado a una pared de pinchos, mala idea", "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas.."];
  DIE[11] = ["Un fantasma también puede morir.", "No has revivido a tiempo, asi que eres un fantasma de un fantasma."];
  DIE[12] = ["Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.", "Has matado a la carne cruda. Ella también te ha matado a ti.."];
  DIE[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
  DIE[14] = ["¿Sabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes."];
  DIE[15] = ["No te preocupes, a la piraña le pareciste delicioso.", "Las pirañas comen a personas, incluyendote a ti también."];
  DIE[16] = ["LapaMauve no planea que puedas matar al kraken", "Un Kraken te partió el kra-neo."];
  DIE[17] = ["Tu piel se cayó, el sol te quemó."];
  DIE[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
  DIE[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
  DIE[20] = ["Has comido un ajo siendo  vampiro,¿que esperabas?"];
  DIE[21] = ["Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Tengo hambre", "Necesito tu cerebro uuunnnggg...", "Carne fresca... Uuunnnggg", "Uuunnnggg... Pareces delicioso", "Uuunnnggg...", "Comida... uuunnnggg...", "Puedo oler sangre... Uuunnnggg"];
}
function set_german() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x48c4af = 0; _0x48c4af < 7; _0x48c4af++) {
    document.getElementById("claim_reward_" + _0x48c4af).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Hand"];
  LANG[INV.GROUND] = ["Boden", "Dreckig!"];
  LANG[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"];
  LANG[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"];
  LANG[INV.STONE] = ["Stein", "Auch Fels gennant"];
  LANG[INV.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
  LANG[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"];
  LANG[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
  LANG[INV.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"];
  LANG[INV.COOKIE] = ["Keks", "Ein prächtiger Keks von Großmutter", "Essen: 50"];
  LANG[INV.CAKE] = ["Ein Kuchen", "Perfekter Kuchen für Gourmets", "Essen: 100"];
  LANG[INV.MEAT] = ["rohes Fleisch", "Du kannst es mit einem Feuer braten", "verursacht Lebensmittelvergiftung: 10", "Essen: 15"];
  LANG[INV.COOKED_MEAT] = ["gebratenes Fleisch", "Einmal blutiges Steak, bitte", "Essen: 35"];
  LANG[INV.FOODFISH] = ["roher Fisch", "Ich glaube es lebt noch", "verursacht Lebensmittelvergiftung: 10", "Essen: 18"];
  LANG[INV.FOODFISH_COOKED] = ["gebratener Fisch", "Mit einer Zitrone ist es perfekt", "Essen: 35"];
  LANG[INV.BREAD] = ["Brot", "Ein vorzügliches französiches Brot", "Es wird als Währung im Markt benutzt", "Essen: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Schmeckt wie Krabbenburger", "Essen: 100"];
  LANG[INV.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
  LANG[INV.SUGAR_CAN] = ["Zuckerstange", "Probier mal, es schmeckt hervorragend", "Essen: 100"];
  LANG[INV.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"];
  LANG[INV.SEED] = ["Beeren Saatgut", "Wird eine Beere", "Entstehung: 2min", "Wachstum: 55s", "Wasserbedarf: 3min 20s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"];
  LANG[INV.WHEAT_SEED] = ["Weizen Saatgut", "Wird zu Weizen", "Entstehung: 2min", "Wachstum: 16s", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.WILD_WHEAT] = ["Wildes Weizen", "Wenn es in eine Windmühle platziert wird, wird es zu Mehl"];
  LANG[INV.PUMPKIN_SEED] = ["Kürbis Saatgut", "Wird zu Kürbis", "Entstehung: 2min 40s", "Wachstum: 2min", "Wasserbedarf: 2min", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.PUMPKIN] = ["Kürbis", "Es erinnert mich an Halloween", "Essen: 30"];
  LANG[INV.GARLIC_SEED] = ["Knoblauch Saatgut", "Sehr gefährlich für Vampire", "Schaden: 20", "Entstehung: 4min", "Wachstum: 1min 10s", "Wasserbedarf: 1min 40s", "Haltbarkeit: 700", "Lebenszeit: 8 Tage"];
  LANG[INV.GARLIC] = ["Knoblauch", "Heilt dich und hält die Kälte fern", "Essen: 14", "Heilung über Zeit: 30", "Effekt: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Dornenbusch Saatgut", "Kann deinen Gegnern Schaden zufügen", "Schaden: 20", "Entstehung: 4min", "Wachstum: 15s", "Wasserbedarf: 3min", "Haltbarkeit: 1000", "Lebenszeit: 8 Tage"];
  LANG[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"];
  LANG[INV.PLOT] = ["Topf", "Ernsthaft, benutz es", "Mit diesem GMO dünger deine Pflanzen", "lässt sie schneller wachsen und reduziert den Wasserverbrauch", "Haltbarkeit: 2000"];
  LANG[INV.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
  LANG[INV.SPANNER] = ["Schraubenschlüssel", "Es kann Wände, Türen und Stacheln reparieren", "Schaden: 2"];
  LANG[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
  LANG[INV.FUR] = ["Hasenfell", "Der Hase war so süß..."];
  LANG[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"];
  LANG[INV.SPECIAL_FUR_2] = ["Dunkles Fell", "Du machst dich bereit etwas falsches zu vollführen"];
  LANG[INV.FUR_WINTER] = ["Winter Fell", "Diese Tiere wollten nur eine Umarmung..."];
  LANG[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"];
  LANG[INV.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
  LANG[INV.FIRE] = ["Lagerfeuer", "Wärmt dich!", "Haltbarkeit: 150", "Lebensdauer: 2min"];
  LANG[INV.BIG_FIRE] = ["Großes Lagerfeuer", "Wärmt dich länger!", "Haltbarkeit: 400", "Lebensdauer: 6min"];
  LANG[INV.WORKBENCH] = ["Werkbank", "Sehr nützlich um allerlei Sachen herzustellen"];
  LANG[INV.CORD] = ["Faden", "Wird benötigt um Mützen und Rucksäcke herzustellen  "];
  LANG[INV.BLUE_CORD] = ["Diamant Faden", "Wird für spezielle Mützen gebraucht"];
  LANG[INV.CHEST] = ["Truhe", "Damit kannst du Gegenstände lagern", "Haltbarkeit: 500"];
  LANG[INV.SWORD_WOOD] = ["Holzschwert", "Funktioniert das?", "Schaden: 12", "Schaden an Gebäuden: 4"];
  LANG[INV.SWORD] = ["Steinschwert", "Sei nett zu Anderen", "Schaden: 19", "Schaden an Gebäuden: 6"];
  LANG[INV.SWORD_GOLD] = ["Goldschwert", "König des Waldes", "Schaden: 22", "Schaden an Gebäuden: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamantschwert", "Du kannst die Kraft spüren", "Schaden: 24", "Schaden an Gebäuden: 8"];
  LANG[INV.PIRATE_SWORD] = ["Piratenschwert", "Ayyyyy!", "Hat eine höhere Reichweite als ein normales Schwert", "Schaden: 24", "Schaden an Gebäuden: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Amethystschwert", "Mauve ist die schönste Farbe der Welt", "Schaden: 27", "Schaden an Gebäuden: 9"];
  LANG[INV.DRAGON_SWORD] = ["Drachenschwert", "Keine Gnade!", "Schaden: 30", "Schaden an Gebäuden: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Drachenspeer", "Töte sie alle!", "Schaden: 22", "Schaden an Gebäuden: 6"];
  LANG[INV.PICK_WOOD] = ["Holzspitzhacke", "Kann nur Holz und Stein abbauen", "Schaden: 1"];
  LANG[INV.PICK] = ["Steinspitzhacke", "Kann Holz, Stein und Gold abbauen", "Schaden: 2"];
  LANG[INV.PICK_GOLD] = ["Goldspitzhacke", "Kann auch Diamanten abbauen", "Schaden: 3", "Schaden an Gebäuden: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamantspitzhacke", "Kann alles abbauen", "Schaden: 4", "Schaden an Gebäuden: 1"];
  LANG[INV.PICK_AMETHYST] = ["Amethystspitzhacke", "Kann alles abbauen, sieht außerdem gut aus!", "Schaden: 5", "Schaden an Gebäuden: 1"];
  LANG[INV.HAMMER] = ["Steinhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Diamant oder Amethyst", "Schaden: 2", "Schaden an Gebäuden: 20"];
  LANG[INV.HAMMER_GOLD] = ["Goldhammer", "Nützlich um Gebäude zu zerstören", "Funktioniert nicht gut gegen Amethyst", "Schaden: 3", "Schaden an Gebäuden: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamanthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 4", "Schaden an Gebäuden: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Amethysthammer", "Nützlich um Gebäude zu zerstören", "Schaden: 5", "Schaden an Gebäuden: 50"];
  LANG[INV.SUPER_HAMMER] = ["Superhammer", "Willst du die Welt zerstören?", "Schaden: 12", "Schaden an Gebäuden: 70"];
  LANG[INV.WOOD_SPEAR] = ["Holzspeer", "Wie ein Stock, nur mit dem Unterschied, dass es sticht.", "Schaden: 10", "Schaden an Gebäuden: 2"];
  LANG[INV.SPEAR] = ["Steinspeer", "Der Anfang der Evolution!", "Schaden: 14", "Schaden an Gebäuden: 4"];
  LANG[INV.GOLD_SPEAR] = ["Goldspeer", "Pass auf, es sticht!", "Schaden: 15", "Schaden an Gebäuden: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamantspeer", "Du bist bereit einen Drachen zu töten", "Schaden: 17", "Schaden an Gebäuden: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["AmethystSpeer", "Drachen jagen dir keine Angst mehr ein", "Schaden: 18", "Schaden an Gebäuden: 6"];
  LANG[INV.SHOVEL] = ["Steinschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Goldschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 3", "Schaden an Gebäuden: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamantschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 4", "Schaden an Gebäuden: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Amethystschaufel", "Grab herum um Dreck, Eis und Sand zu bekommen", "Du kannst auch Mineralien bekommen", "Schaden: 5", "Schaden an Gebäuden: 1"];
  LANG[INV.WOOD_HELMET] = ["Holzhelm", "Besser als nichts", "Verteidigung gegen Spieler: 1", "Verteidigung gegen Tiere: 4"];
  LANG[INV.STONE_HELMET] = ["Steinhelm", "Du bist bereit zu kämpfen!", "Verteidigung gegen Spieler: 2", "Verteidigung gegen Tiere: 8"];
  LANG[INV.GOLD_HELMET] = ["Goldhelm", "AKA Der Helm der Unbarmherzigen", "Verteidigung gegen Spieler: 4", "Verteidigung gegen Tiere: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamanthelm", "Gib nicht zu viel an", "Verteidigung gegen Spieler: 5", "Verteidigung gegen Tiere: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Amethysthelm", "Du musst vor nichts mehr angst haben", "Verteidigung gegen Spieler: 6", "Verteidigung gegen Tiere: 23"];
  LANG[INV.DRAGON_HELMET] = ["Drachenhelm", "Du wirst die Welt erobern", "Verteidigung gegen Spieler: 8", "Verteidigung gegen Tiere: 27"];
  LANG[INV.EXPLORER_HAT] = ["Erkunderhut", "Tiere beachten dich nicht mehr", "mach aber keine Geräusche!", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.CHRISTMAS_HAT] = ["Weihnachtshut", "Oh, oh, oh, fröhliche Weihnachten", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.ELF_HAT] = ["Elfenhut", "Lass dich nicht ausnutzen, du kleiner Schneeelf!", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.HOOD] = ["Kapuze", "Du bist ein Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für acht Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Bauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.EARMUFFS] = ["Ohrwärmer", "Eine Art kleiner chapka.", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.COAT] = ["Chapka", "Auch Mantel genannt.", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.CAP_SCARF] = ["Winterschaal und Kappe", "Sehr angenehm", "Sehr Warm"];
  LANG[INV.PEASANT] = ["Bauer", "Deine Pflanzen wachsen schneller", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.WINTER_HOOD] = ["Winterkapuze", "Du bist ein Wilder Schurke", "Du kannst jemand bestehlen solange:", "1) Es nacht ist", "2) Du nichts trägst", "3) dich niemand für vier Sekunden berührt hat", "4) Du nicht in der Nähe eines Feuers bist", "5) Dein Ziel keine Winterbauernkleidung trägt", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.WINTER_PEASANT] = ["Winterbauern", "Deine Pflanzen wachsen deutlich schneller", "Hält dich warm außerhalb von Wasser und Winter"];
  LANG[INV.DIVING_MASK] = ["Tauchermaske", "Du bist schneller im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Supertauchermaske", "Du bist sehr schnell im Wasser", "Hält dich warm im Wasser", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.DRAGON_ORB] = ["Drachenkugel", "Erhalten bei abschließung der Quest"];
  LANG[INV.DRAGON_HEART] = ["Drachenherz", "Verwandelt dich in einen Geist, sobald du stirbst!", "Du bist für 60 Sekunden ein Geist", "Finde ein Wiederbelebungsstein."];
  LANG[INV.GEMME_GREEN] = ["Grüner Edelstein", "Du hast nicht gemogelt, versprochen?"];
  LANG[INV.GEMME_ORANGE] = ["Orangener Edelstein", "Nur ein echter Pirat findet ihn!"];
  LANG[INV.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"];
  LANG[INV.CROWN_GREEN] = ["Grüne Krone", "Du heilst dich selbst sehr schnell", "Heilung über Zeit: 40", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.CROWN_ORANGE] = ["Orangene Krone", "Du fühlst dich plötzlich als hättest du mehr Glück", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.CROWN_BLUE] = ["Blaue Krone", "Sobald du stirbst wirst du ein Geist", "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren", "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16"];
  LANG[INV.BUCKET_FULL] = ["Eimer", "Nützlich um einen Brunnen zu füllen", "Ein Eimer ist vergleichbar mit zwölf Flaschen"];
  LANG[INV.BUCKET_EMPTY] = ["Leerer Eimer", "Du musst den Eimer in der Nähe einer Wasserquelle füllen"];
  LANG[INV.BOTTLE_FULL] = ["Flasche", "Erlaubt dir überall Wasser zu trinken", "Wasser: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Leere Flasche", "Du musst die Flasche in der Nähe einer Wasserquelle füllen"];
  LANG[INV.WATERING_CAN] = ["Leere Gießkanne", "Du musst es mit einer Wasserquelle füllen"];
  LANG[INV.WATERING_CAN_FULL] = ["Gießkanne", "Erlaubt das wässern von Pflanzen", "Schaden: 1"];
  LANG[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"];
  LANG[INV.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"];
  LANG[INV.BOOK] = ["Buch", "Reduziert die benötigte Zeit beim herstellen von Gegenständen", "Muss in der Hand gehalten werden um den Effekt zu nutzen", "Schaden: 1"];
  LANG[INV.BANDAGE] = ["Verband", "Heile dich schneller", "Heilung über Zeit: 30", "Effekt: 5"];
  LANG[INV.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
  LANG[INV.LOCKPICK] = ["Dietrich", "Erlaubt dir eine verschlossene Truhe zu öffnen"];
  LANG[INV.TOTEM] = ["Totem", "Erlaubt dir ein Team zu gründen", "Teile Türen und Truhen", "verletzende Strukturen schaden deinen Freunden nicht mehr"];
  LANG[INV.BRIDGE] = ["Brücke", "Sehr nützlich über Wasser", "Es erlaubt dir zu trinken ohne zu ertrinken", "lässt dich schneller auf dem Wasser laufen"];
  LANG[INV.SIGN] = ["Schild", "Hinterlasse eine Nachricht für andere hier", "Haltbarkeit: 200"];
  LANG[INV.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
  LANG[INV.WELL] = ["Brunnen", "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle", "Haltbarkeit: 1000"];
  LANG[INV.WALL] = ["Holzwand", "Kennst du den Wandtanz?", "Haltbarkeit: 1000"];
  LANG[INV.STONE_WALL] = ["Steinwand", "Es sieht ein wenig Ernsthafter aus.", "Haltbarkeit: 1500"];
  LANG[INV.GOLD_WALL] = ["Goldwand", "Gold an deiner Wand? Es leuchtet ein wenig.", "Haltbarkeit: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamantwand", "So leuchtend, pass auf deine Augen auf", "Haltbarkeit: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Amethystwand", "Du musst dich wirklich fürchten raus zu gehen!", "Haltbarkeit: 3000"];
  LANG[INV.SPIKE] = ["Holzstacheln", "Kann deine Gegner verletzen", "Schaden: 10, Schaden beim Angreifen: 2", "Haltbarkeit: 150"];
  LANG[INV.STONE_SPIKE] = ["Steinstacheln", "Ich würde lieber nicht dein Gegner sein.", "Schaden: 20", "Schaden beim Angreifen: 3", "Haltbarkeit: 300"];
  LANG[INV.GOLD_SPIKE] = ["Goldstacheln", "Du bist grausam.", "Schaden: 30", "Schaden beim Angreifen: 3", "Haltbarkeit: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamantstacheln", "Du magst Gesellschaft nicht.", "Schaden: 40", "Schaden beim Angreifen: 4", "Haltbarkeit: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Amethyststacheln", "Was zur Hölle haben deine Nachbarn dir angetan?", "Schaden: 50", "Schaden beim Angreifen: 4", "Haltbarkeit: 2400"];
  LANG[INV.WOOD_DOOR] = ["Holztür", "Kann von dir oder deinen Freunden geöffnet werden", "Haltbarkeit: 1000"];
  LANG[INV.STONE_DOOR] = ["Steintür", "Eine stärkere Tür ist ernsthafter", "Haltbarkeit: 1500"];
  LANG[INV.GOLD_DOOR] = ["Goldtür", "Baust du el dorado?", "Haltbarkeit: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamanttür", "Für ein scheinendes Haus", "Haltbarkeit: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Amethysttür", "Ist dein Haus ein verschlossener Safe?", "Haltbarkeit: 3500"];
  LANG[INV.FURNACE] = ["Ofen", "Wärmt dich", "Es verbraucht alle 5 Sekunden eine Einheit Holz", "Haltbarkeit: 1000"];
  LANG[INV.WINDMILL] = ["Windmühle", "Kann mit Weizen, Mehl herstellen", "Es braucht 5 Sekunden um Mehl herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
  LANG[INV.BREAD_OVEN] = ["Brotofen", "Erlaubt dir mit Mehl, Brot herzustellen", "Es braucht 5 Sekunden um Brot herzustellen", "Gibt dir Punkte während es arbeitet", "Haltbarkeit: 2000"];
  LANG[INV.RESURRECTION] = ["Wiederbelebungsstein", "Es ist Magie", "Wiederbelebt dich, wenn du ein Geist bist", "Du wirst deine Waffe und Spitzhacke verlieren", "Haltbarkeit: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten";
  LANG[TEXT.KICKED] = "Gekickt: ";
  LANG[TEXT.KEY_ALREADY] = "Dein Schlüssel wurde bereits von jemand anderem benutzt";
  LANG[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch";
  LANG[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache";
  LANG[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen";
  LANG[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt";
  LANG[TEXT.SURVIVED] = "Du hast überlebt ";
  LANG[TEXT.DAYS] = " Tage";
  LANG[TEXT.DEAD_SAD] = "Du bist gestorben ;-;";
  LANG[TEXT.SPAM_ME] = "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
  LANG[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!";
  LANG[TEXT.EMPTY] = "Ressource ist leer";
  LANG[TEXT.INV_FULL] = "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
  LANG[TEXT.DEAD] = " ist gestorben";
  LANG[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug";
  LANG[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten";
  LANG[TEXT.YOU_DEAD] = "Du bist gestorben";
  LANG[TEXT.JOINED_TEAM] = " ist dem Team beigetreten";
  LANG[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört";
  LANG[TEXT.LEFT_TEAM] = "Du hast das Team verlassen";
  LANG[TEXT.LEFT_TEAM2] = " hat das Team verlassen";
  LANG[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>";
  LANG[TEXT.CHOOSE] = "Suche dir ein Server aus";
  LANG[TEXT.PLAYERS] = "Spieler";
  LANG[TEXT.TOTAL_PLAYERS] = "alle Spieler";
  LANG[TEXT.TOTAL_MODE] = "Spieler in diesem Modus";
  LANG[TEXT.COMMING_SOON] = "Bald verfügbar...";
  document.getElementById("nickname_input").placeholder = "Spitzname";
  DIE[0] = ["Du wurdest ohne Grund getötet"];
  DIE[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
  DIE[2] = ["Du bist erfroren. Zu schade", "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen ."];
  DIE[3] = ["Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'", "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben ."];
  DIE[4] = ["Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.", "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber."];
  DIE[5] = ["Dein Körper wird zu einem Spinnennest", "Eine Spinne hat dich getötet. Zumindest war es kein Hase."];
  DIE[6] = ["Dieser Wolf wird nicht mehr verhungern", "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden."];
  DIE[7] = ["Der Fuchs war zu schnell für dich", "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?"];
  DIE[8] = ["Der Bär wollte nur eine Umarmung.", "Der Bär war zu viel zu ertragen. Es tut mir nicht leid."];
  DIE[9] = ["Du wurdest von einem Drachen knusprig gebraten. Zu schade.", "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben."];
  DIE[10] = ["Du bist in eine Stachelwand gesprungen. Keine gute Idee...", "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen."];
  DIE[11] = ["Sogar Geister können sterben.", "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst..."];
  DIE[12] = ["Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.", "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet."];
  DIE[13] = ["Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken."];
  DIE[14] = ["Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es."];
  DIE[15] = ["Mach dir keine Sorge, der Piranha findet dich lecker.", "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen."];
  DIE[16] = ["LapaMauve plant nicht, dass du den Kraken töten kannst", "Ein Kraken hat deinen Schädel zertrümmert."];
  DIE[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
  DIE[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
  DIE[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
  DIE[20] = ["Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?"];
  DIE[21] = ["Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg...Ich verhungere...", "Brauche dein Gehirn... Uuunnnggg...", "Hier gibt es frisches Fleisch... Uuunnnggg", "Uuunnnggg...Du bist lecker", "Uuunnnggg...", "Essen... uuunnnggg...", "Ich rieche Blut... Uuunnnggg"];
}
function set_polish() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
  LANG[TEXT.TWITTER] = " Share on Twitter";
  LANG[TEXT.FACEBOOK] = " Share on Facebook";
  LANG[TEXT.KIT_NEXT] = "You can buy items on the shop in the next game with your points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Kill";
  LANG[TEXT.DAYS_SURVIVED] = "Days survived";
  LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
  LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
  LANG[INV.CRAB_LOOT] = ["Crab Claw", "Crab claws can also be eaten", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Crab Spear", "Allow you to calm crabs, and heal them", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Crab Helmet", "You are the king of crabs!", "Crabs follow you", "They can't hit you and you can't hit them", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Bed", "Relax in this confortable bed", "You are less cold, less thirsty, and less hungry", "You will be cured faster", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quests";
  document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
  document.getElementById("constraintquest").innerHTML = " Constraints";
  document.getElementById("claim_rewards").innerHTML = " Claim rewards";
  document.getElementById("rewardquest").innerHTML = " Reward";
  document.getElementById("killdragon_1").innerHTML = " Collect 1 dragon heart";
  document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
  document.getElementById("survive20min_3").innerHTML = "Survive without losing life";
  document.getElementById("treasure_chest_4").innerHTML = " Open 5 treasure chests";
  document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
  document.getElementById("bread_6").innerHTML = " Collect 100 bread in deep winter";
  document.getElementById("winter_7").innerHTML = " After 1 day, survive in winter";
  for (var _0x3c44de = 0; _0x3c44de < 7; _0x3c44de++) {
    document.getElementById("claim_reward_" + _0x3c44de).innerHTML = "CLAIM REWARD!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUIT";
  LANG[INV.HAND] = ["Ręka"];
  LANG[INV.GROUND] = ["Ziemia", "Brudna!"];
  LANG[INV.SAND] = ["Piasek", "Mam go w oczach!"];
  LANG[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
  LANG[INV.STONE] = ["Kamień", "Także nazywany skałą"];
  LANG[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"];
  LANG[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"];
  LANG[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
  LANG[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"];
  LANG[INV.COOKIE] = ["Ciastko", "Przepyszne ciasteczko od babci", "Jedzenie: 50"];
  LANG[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
  LANG[INV.MEAT] = ["Surowe mięso", "Możesz je upiec w ogniu", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 15"];
  LANG[INV.COOKED_MEAT] = ["Pieczone mięso", "Krwisty stek, proszę", "Jedzenie: 35"];
  LANG[INV.FOODFISH] = ["Surowa ryba", "Myślę, że nadal jest żywa", "Powoduje zatrucie pokarmowe: 10", "Jedzenie: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Pieczona ryba", "Z cytryną jest idealna", " Jedzenie: 35"];
  LANG[INV.BREAD] = ["Chleb", "Świetny Francuski chleb", "Jest walutą używaną w markecie", "Jedzenie: 15"];
  LANG[INV.SANDWICH] = ["Kanapka", "Smakuje jak kraboburger", "Jedzenie: 100"];
  LANG[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
  LANG[INV.SUGAR_CAN] = ["Laska cukrowa", "Spróbuj, jest przepyszna", "Jedzenie: 100"];
  LANG[INV.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"];
  LANG[INV.SEED] = ["Nasionko jagody", "Wyrośnie w jagody", "Narodziny: 2min", "Rośnięcie: 55s", "Podlewanie: 3min 20s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
  LANG[INV.WHEAT_SEED] = ["Nasiono pszenicy", "Wyrośnie w pszenicę", "Narodziny: 2min", "Rośnięcie: 16s", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.WILD_WHEAT] = ["Pszenica", "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka"];
  LANG[INV.PUMPKIN_SEED] = ["Nasiono dyni", "Wyrośnie w dynię", "Narodziny: 2min 40s", "Rośnięcie: 2min", "Podlewanie: 2min", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
  LANG[INV.GARLIC_SEED] = ["Nasionko czosnku", "Bardzo niebezpieczne dla wampirów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 1min 10s", "Podlewanie: 1min 40s", "Wytrzymałość: 700", "Czas życia: 8 dni"];
  LANG[INV.GARLIC] = ["Czosnek", "Leczy cię i redukuje zimno", "Jedzenie: 14", "Uzdrawia z biegiem czasu: 30", "Efekt: 1"];
  LANG[INV.THORNBUSH_SEED] = ["Nasiono kolczastego krzewu", "Może zranić twoich wrogów", "Obrażenia: 20", "Narodziny: 4min", "Rośnięcie: 15s", "Podlewanie: 3min", "Wytrzymałość: 1000", "Czas życia: 8 dni"];
  LANG[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"];
  LANG[INV.PLOT] = ["Donica", "Naprawdę, użyj jej", "Z tym genetycznie modyfikowanym nawozem, twoje rośliny", "będą rosły znacznie szybciej i będą potrzebować mniej wody", "Wytrzymałość: 2000"];
  LANG[INV.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"];
  LANG[INV.SPANNER] = ["Klucz mechaniczny", "Do naprawiania drzwi i kolców", "Uszkodzenie: 2"];
  LANG[INV.FUR_WOLF] = ["Wilcza skóra", "Szczeniaczek? Ale gdzie jest szczeniaczek?!"];
  LANG[INV.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."];
  LANG[INV.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"];
  LANG[INV.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
  LANG[INV.FUR_WINTER] = ["Zimowa skóra", "Te zwierzęta chciały się tylko przytulić..."];
  LANG[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"];
  LANG[INV.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
  LANG[INV.FIRE] = ["Ognisko", "Ociepli cię!", "Wytrzymałość: 150", "Czas życia: 2min"];
  LANG[INV.BIG_FIRE] = ["Duże ognisko", "Ociepli cię na dłużej!", "Wytrzymałość: 400", "Czas życia: 6min"];
  LANG[INV.WORKBENCH] = ["Stół rzemieślniczy", "Użyteczny do stwarzania przedmiotów"];
  LANG[INV.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
  LANG[INV.BLUE_CORD] = ["Diamentowa nić", "Używana w tworzeniu specjalnych czapek"];
  LANG[INV.CHEST] = ["Skrzynia", "Pozwala ci na przechowywanie przedmiotów", "Wytrzymałość: 500"];
  LANG[INV.SWORD_WOOD] = ["Drewniany miecz", "To coś działa?", "Obrażenia: 12", "Obrażenia do budowli: 4"];
  LANG[INV.SWORD] = ["Kamienny miecz", "Bądź miły dla innych", "Obrażenia: 19", "Obrażenia do budowli: 6"];
  LANG[INV.SWORD_GOLD] = ["Złoty miecz", "Król lasu", "Obrażenia: 22", "Obrażenia do budowli: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Diamentowy miecz", "Możesz poczuć moc", "Obrażenia: 24", "Obrażenia do budowli: 8"];
  LANG[INV.PIRATE_SWORD] = ["Piracki miecz", "Ayyyyy!", "Dłuższy niż zwykły miecz", "Obrażenia: 24", "Obrażenia do budowli: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Ametystowy miecz", "fiołkowy to najpiękniejszy kolor na świecie", "Damage: 27", "Obrażenia do budowli: 9"];
  LANG[INV.DRAGON_SWORD] = ["Smoczy miecz", "Bez litości!", "Obrażenia: 30", "Obrażenia do budowli: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Smocza włócznia", "Zabij ich wszystkich!", "Obrażenia: 22", "Obrażenia do budowli: 6"];
  LANG[INV.PICK_WOOD] = ["Drewniany kilof", "Może wydobywać tylko kamienie i drewno", "Obrażenia: 1"];
  LANG[INV.PICK] = ["Kamienny kilof", "Może wydobywać drewno, kamienie i złoto", "Obrażenia: 2"];
  LANG[INV.PICK_GOLD] = ["Złoty kilof", "Może także wydobywać diamenty", "Obrażenia: 3", "Obrażenia do budowli: 1"];
  LANG[INV.PICK_DIAMOND] = ["Diamentowy kilof", "Może wydobywać wszystko", "Obrażenia: 4", "Obrażenia do budowli: 1"];
  LANG[INV.PICK_AMETHYST] = ["Ametystowy kilof", "Może wydobywać wszystko. Wygląda fantastycznie!", "Obrażenia: 5", "Obrażenia do budowli: 1"];
  LANG[INV.HAMMER] = ["Kamienny młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 2", "Obrażenia do budowli: 20"];
  LANG[INV.HAMMER_GOLD] = ["Złoty młot", "Pomocny w niszczeniu budowli", "Nie działa najlepiej na ametyście", "Obrażenia: 3", "Obrażenia do budowli: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Diamentowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 4", "Obrażenia do budowli: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Ametystowy młot", "Pomocny w niszczeniu budowli", "Obrażenia: 5", "Obrażenia do budowli: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super młot", "Miałeś kiedyś plan zniszczenia świata?", "Obrażenia: 12", "Obrażenia do budowli: 70"];
  LANG[INV.WOOD_SPEAR] = ["Drewniana włócznia", "Jak patyk, ale kłuje.", "Obrażenia: 10", "Obrażenia do budowli: 2"];
  LANG[INV.SPEAR] = ["Kamienna włócznia", "Początek ewolucji!", "Obrażenia: 14", "Obrażenia do budowli: 4"];
  LANG[INV.GOLD_SPEAR] = ["Złota włócznia", "Uważaj, kłuje!", "Obrażenia: 15", "Obrażenia do budowli: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Diamentowa włócznia", "Jesteś gotowy, aby zabić smoka", "Obrażenia: 17", "Obrażenia do budowli: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Ametystowa włócznia", "Smoki już nie są dla ciebie zagrożeniem", "Obrażenia: 18", "Obrażenia do budowli: 6"];
  LANG[INV.SHOVEL] = ["Kamienna łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Złota łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 3", "Obrażenia do budowli: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Diamentowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 4", "Obrażenia do budowli: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Ametystowa łopata", "Kop w ziemi aby zdobyć ziemię, lód i piasek", "Możesz także zdobyć minerały", "Obrażenia: 5", "Obrażenia do budowli: 1"];
  LANG[INV.WOOD_HELMET] = ["Drewniany hełm", "Lepsze niż nic", "Obrona przed graczami: 1", "Obrona przed zwierzętami: 4"];
  LANG[INV.STONE_HELMET] = ["Kamienny hełm", "Jesteś gotowy do bitwy!", "Obrona przed graczami: 2", "Obrona przed zwierzętami: 8"];
  LANG[INV.GOLD_HELMET] = ["Złoty hełm", "Zwany także hełmem barbarzyńców", "Obrona przed graczami: 4", "Obrona przed zwierzętami: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Diamentowy hełm", "Nie przechwalaj się za bardzo", "Obrona przed graczami: 5", "Obrona przed zwierzętami: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Ametystowy hełm", "Nie boisz się już niczego", "Obrona przed graczami: 6", "Obrona przed zwierzętami: 23"];
  LANG[INV.DRAGON_HELMET] = ["Smoczy hełm", "Zmierzysz się z całym światem", "Obrona przed graczami: 8", "Obrona przed zwierzętami: 27"];
  LANG[INV.EXPLORER_HAT] = ["Czapka odkrywcy", "Zwierzęta nie będą zwracały na ciebie uwagi", "ale nie rób hałasu!", "Ciepło w i poza zimą"];
  LANG[INV.CHRISTMAS_HAT] = ["świąteczna czapka", "Oh, oh, oh, Wesołych Świąt", "Ciepło w i poza zimą"];
  LANG[INV.ELF_HAT] = ["Czapka elfa", "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!", "Ciepło w i poza zimą"];
  LANG[INV.HOOD] = ["Kaptur", "Jesteś łobuzem", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w chłopską tunikę", "Jest ciepło w i poza zimą"];
  LANG[INV.EARMUFFS] = ["Nauszniki", "Jakiś inny rodzaj małej czapki.", "Ciepło w i poza zimą"];
  LANG[INV.COAT] = ["Czapka", "Także nazywana płaszczem.", "Ciepła w i poza zimą"];
  LANG[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
  LANG[INV.PEASANT] = ["Chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepła w i poza zimą"];
  LANG[INV.WINTER_HOOD] = ["Zimowy kaptur", "Możesz coś komuś ukraść jeśli", "- Jest noc", "- Nic przy sobie nie masz", "- Jeżeli nic przez chwilę nie dotykałeś", "- Nie jesteś blisko ognia", "- Twój cel nie jest ubrany w tunikę zimowego chłopa", "Jest ciepło w i poza zimą"];
  LANG[INV.WINTER_PEASANT] = ["Zimowa chłopska tunika", "Twoje rośliny rosną szybciej", "Ciepło w i poza zimą"];
  LANG[INV.DIVING_MASK] = ["Maska do nurkowania", "Jesteś szybki w wodzie", "Ciepło", "Obrona przed graczami: 2, Obrona przed zwierzętami: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Strój głębinowy", "Jesteś bardzo szybki w wodzie", "Ciepło ci w wodzie", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"];
  LANG[INV.DRAGON_HEART] = ["Smocze serce", "Zamienia cię w ducha po śmierci!", "Jesteś duchem na 60 sekund", "Znajdź kamień rezurekcyjny"];
  LANG[INV.GEMME_GREEN] = ["Zielony kryształ", "Nie oszukiwałeś, przysięgasz?"];
  LANG[INV.GEMME_ORANGE] = ["Pomarańczowy kryształ", "Tylko prawdziwy pirat może go znaleźć!"];
  LANG[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
  LANG[INV.CROWN_GREEN] = ["Zielona korona", "Szybko się leczysz", "Uzdrawia z biegiem czasu: 40", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.CROWN_ORANGE] = ["Pomarańczowa korona", "Nagle poczułeś smak szczęścia", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.CROWN_BLUE] = ["Niebieska korona", "Gdy już będziesz martwy, zamienisz się w ducha", "Przy okazji stracisz swoją broń i kilof", "Obrona przed graczami: 4, Obrona przed zwierzętami: 16"];
  LANG[INV.BUCKET_FULL] = ["Wiadro", "Również przydatne do napełnienia studni", "Jedno wiadro jest jak dwanaście butelek"];
  LANG[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
  LANG[INV.BOTTLE_FULL] = ["Butelka", "Pozwala pić wodę wszędzie", "Woda: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Pusta butelka", "Możesz napełnić tą butelkę blisko źródła wody"];
  LANG[INV.WATERING_CAN] = ["Pusta konewka", "Musisz ją napełnić w źródle wody, aby ją użyć"];
  LANG[INV.WATERING_CAN_FULL] = ["Konewka", "Pozwala podlewać rośliny", "Obrażenia: 1"];
  LANG[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
  LANG[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"];
  LANG[INV.BOOK] = ["Książka", "Pozwala znacznie skrócić wytwarzanie", "Musisz ją nosić by zadziałała", "Uszkodzenie 1"];
  LANG[INV.BANDAGE] = ["Bandaż", "Szybciej zregeneruj życie", "Uzdrawia z biegiem czasu: 30", "Efekt: 5"];
  LANG[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
  LANG[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
  LANG[INV.TOTEM] = ["Totem", "Pozwala ci stworzyć drużynę", "Dziel się drzwiami i zamkniętymi skrzyniami", "Szkodliwe budynki nie zranią twoich przyjaciół"];
  LANG[INV.BRIDGE] = ["Most", "Bardzo przydatny w wodzie", "Pozwala ci pić bez utonięcia", "Chodzisz szybciej w wodzie"];
  LANG[INV.SIGN] = ["Tabliczka", "Zostaw wiadomość dla innych", "Wytrzymałość: 200"];
  LANG[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"];
  LANG[INV.WELL] = ["Studnia", "Umożliwia napełnienie butelki", "Wytrzymałość: 1000"];
  LANG[INV.WALL] = ["Drewniany mur", "Znasz taniec ścian?", "Wytrzymałość: 1000"];
  LANG[INV.STONE_WALL] = ["Kamienny mur", "Jest to trochę bardziej poważniejsze.", "Wytrzymałość: 1500"];
  LANG[INV.GOLD_WALL] = [" Złoty mur", "Złoto na twoich murach? To trochę krzykliwe.", "Wytrzymałość: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Diamentowy mur", "Jaki błyszczący, uważaj na oczy", "Wytrzymałość: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Ametystowy mur", "Musisz bardzo się bać, aby wyjść!", "Wytrzymałość: 3000"];
  LANG[INV.SPIKE] = ["Drewniany kolczasty mur", "Może uszkodzić wrogów", "Obrażenia: 10, Obrażenia po uszkodzeniu: 2", "Wytrzymałość: 150"];
  LANG[INV.STONE_SPIKE] = ["Kamienny kolczasty mur", "Nie chciałbym być twoim wrogiem.", "Obrażenia: 20", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 300"];
  LANG[INV.GOLD_SPIKE] = ["Złoty kolczasty mur", "Jesteśtaki okrutny.", "Obrażenia: 30", " Obrażenia po uszkodzeniu: 3", "Wytrzymałość: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Diamentowy kolczasty mur", "Raczej nie lubisz towarzystwa.", "Obrażenia: 40", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Ametystowy kolczasty mur", "Co ci sąsiedzi ci zrobili?", "Obrażenia: 50", "Obrażenia po uszkodzeniu: 4", "Wytrzymałość: 2400"];
  LANG[INV.WOOD_DOOR] = ["Drewniane drzwi", "Może być otwarte przez ciebie lub przyjaciół", "Wytrzymałość: 1000"];
  LANG[INV.STONE_DOOR] = ["Kamienne drzwi", "Solidne drzwi są bardziej poważne ", "Wytrzymałość: 1500"];
  LANG[INV.GOLD_DOOR] = ["Złote drzwi", "Czy odbudowujesz El Dorado?", "Wytrzymałość: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Diamentowe drzwi", "Dla błyszczącego domu", "Wytrzymałość: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Ametystowe drzwi", "Czy twój dom to zamknięty sejf?", "Wytrzymałość: 3000"];
  LANG[INV.FURNACE] = ["Piec", "Ogrzewa cię", "Zużywa drewno co 5 sekund", "Wytrzymałość: 1000"];
  LANG[INV.WINDMILL] = ["Młyn", "Może produkować mąkę z pszenicy", "Przygotowanie mąki zajmuje 5 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
  LANG[INV.BREAD_OVEN] = ["Piec do chleba", "Pozwala na wypiek chleba z mąki", "Przygotowanie chleba zajmuje 10 sekund", "Zwraca punkty podczas pracy", "Wytrzymałość: 2000"];
  LANG[INV.RESURRECTION] = ["Kamień rezurekcyjny", "To magia", "Wskrzesi cię jeśli jesteś duchem", "Stracisz swoja broń i kilof", "Wytrzymałość: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera";
  LANG[TEXT.KICKED] = "Wyrzucony: ";
  LANG[TEXT.KEY_ALREADY] = "Twój klucz jest aktualnie używany przez innego gracza";
  LANG[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy";
  LANG[TEXT.OLD_VERSION] = "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
  LANG[TEXT.NO_MORE_RESOURCES] = "Nie ma nowych minerałów, zwierząt, i jedzenia";
  LANG[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień";
  LANG[TEXT.SURVIVED] = "Przeżyłeś ";
  LANG[TEXT.DAYS] = " dni";
  LANG[TEXT.DEAD_SAD] = "Jesteś martwy ;-;";
  LANG[TEXT.SPAM_ME] = "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
  LANG[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!";
  LANG[TEXT.EMPTY] = "Źródło jest puste";
  LANG[TEXT.INV_FULL] = "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
  LANG[TEXT.DEAD] = " jest martwy";
  LANG[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie";
  LANG[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny";
  LANG[TEXT.YOU_DEAD] = "Jesteś martwy";
  LANG[TEXT.JOINED_TEAM] = " dołączył do drużyny";
  LANG[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona";
  LANG[TEXT.LEFT_TEAM] = " Opuściłeś drużynę";
  LANG[TEXT.LEFT_TEAM2] = " opuścił drużynę";
  LANG[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>";
  LANG[TEXT.CHOOSE] = "Wybierz serwer";
  LANG[TEXT.PLAYERS] = "graczy";
  LANG[TEXT.TOTAL_PLAYERS] = "wszystkich graczy";
  LANG[TEXT.TOTAL_MODE] = "graczy w tym trybie";
  LANG[TEXT.COMMING_SOON] = "Już wkrótce...";
  document.getElementById("nickname_input").placeholder = "Przydomek";
  DIE[0] = ["Zostałeś zabity bez powodu"];
  DIE[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
  DIE[2] = ["Zamarzłeś na śmierć. Ale smutne", "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska."];
  DIE[3] = ["Gracz zabił cię, mówiąc ci 'git gud.' ", "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie."];
  DIE[4] = ["Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.", "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię."];
  DIE[5] = ["Twoje ciało stało się gniazdem dla pajęczych jaj", "Pająk cię zabił. Przynajmniej to nie był królik."];
  DIE[6] = ["Wilk już nie będzie głodował po zjedzeniu cię", "To nie są pieski.Wilki nie lubią jak się je głaszcze."];
  DIE[7] = ["Lis był dla ciebie za szybki", "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?"];
  DIE[8] = ["Niedźwiedź chciał się tylko przytulić.", "Niedźwiedź był biedny. Nie jest mi przykro."];
  DIE[9] = ["Zostałeś spalony na popiół przez smoka. Jakie to smutne.", "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć."];
  DIE[10] = ["Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...", "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy."];
  DIE[11] = ["Nawet duch potrafi umrzeć.", "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc..."];
  DIE[12] = ["Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.", "Ty zabiłeś surowe mięso. Ono zabiło ciebię."];
  DIE[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
  DIE[14] = ["Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz."];
  DIE[15] = ["Nie martw się, zasmakowałeś pirani.", "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie."];
  DIE[16] = ["LapaMauve nie planuje abyś mógł zabić krakena", "Kraken rozwalił twoją czaszkę."];
  DIE[17] = ["Twoja skóra odpada, słońce cię zabija."];
  DIE[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
  DIE[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
  DIE[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
  DIE[21] = ["Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... Głoduję", "Potrzebuję twojego mózgu Uuunnnggg...", "Świeże mięso tutaj.. Uuunnnggg", "Uuunnnggg... Jesteś pyszny", "Uuunnnggg...", "Jeść... uuunnnggg...", "Czuję krew... Uuunnnggg"];
}
function set_french() {
  LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
  DIE[22] = ["This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack."];
  LANG[INV.CRAB_STICK] = ["Crab sticks", "Oh, yeah? Is there crab in the crab sticks?", "Food: 20"];
  LANG[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU";
  LANG[TEXT.TWITTER] = " Partage sur Twitter";
  LANG[TEXT.FACEBOOK] = " Partage sur Facebook";
  LANG[TEXT.KIT_NEXT] = "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
  LANG[TEXT.POINTS] = "points";
  LANG[TEXT.SCORE] = "Score";
  LANG[TEXT.KILL] = "Tués";
  LANG[TEXT.DAYS_SURVIVED] = "Jours survécus";
  LANG[TEXT.MODE_FREE] = "Mode de construction: Libre. Appuie sur G pour changer";
  LANG[TEXT.MODE_GRID] = "Mode de construction: Grille. Appuie sur G pour changer";
  LANG[INV.CRAB_LOOT] = ["Pince de crabe", "Les pinces de crabes peuvent aussi être mangées", "Food: 10"];
  LANG[INV.CRAB_SPEAR] = ["Lance en crabe", "Te permet de soigner les crabes et de les calmer", "Donne un bonus de +10 degats quand elle est portée", "avec un casque un crabe sur un Crab King", "Damage: 14", "Building Damage: 4"];
  LANG[INV.CROWN_CRAB] = ["Casque en crabe", "Tu es le Roi des Crabes!", "Les crabes te suivent", "Ils ne peuvent pas te frapper et toi non plus", "Players Defense: 4", "Animals Defense: 13"];
  LANG[INV.BED] = ["Lit", "Repose-toi dans ce lit douillet", "Tu as moins froid, moins faim et moins soif", "Tu te régénères plus vite", "Durability: 400"];
  document.getElementById("typequest").innerHTML = "Chrono Quêtes";
  document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
  document.getElementById("constraintquest").innerHTML = " Contraintes";
  document.getElementById("claim_rewards").innerHTML = " Résultat";
  document.getElementById("rewardquest").innerHTML = " Récompenses";
  document.getElementById("killdragon_1").innerHTML = " Collecte 1 Cœur de dragon dans la cave";
  document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
  document.getElementById("survive20min_3").innerHTML = "Survis sans perdre de vie";
  document.getElementById("treasure_chest_4").innerHTML = " Ouvre 5 coffres au trésor";
  document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
  document.getElementById("bread_6").innerHTML = " Cuisine 100 pains en hiver, seul et sans retour en arrière";
  document.getElementById("winter_7").innerHTML = " Après 1 jour, survis en hiver";
  for (var _0x38ff67 = 0; _0x38ff67 < 7; _0x38ff67++) {
    document.getElementById("claim_reward_" + _0x38ff67).innerHTML = "RÉCOMPENSE!";
  }
  document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
  LANG[INV.HAND] = ["Main"];
  LANG[INV.GROUND] = ["Terre", "C'est sale!"];
  LANG[INV.SAND] = ["Sable", "J'en ai dans les yeux"];
  LANG[INV.WOOD] = ["Bois", "Tu n'en auras jamais trop!"];
  LANG[INV.STONE] = ["Pierre", "Aussi appelée roche"];
  LANG[INV.GOLD] = ["Or", "Sois généreux, donne en aux autres"];
  LANG[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"];
  LANG[INV.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"];
  LANG[INV.FLOUR] = ["Farine", "Utile pour la cuisine"];
  LANG[INV.COOKIE] = ["Cookie", "Un somptueux cookie de Grand-Mère", "Nourriture: 50"];
  LANG[INV.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
  LANG[INV.MEAT] = ["Viande crue", "Tu peux la cuisiner avec du feu", "Intoxication: 10", "Nourriture: 15"];
  LANG[INV.COOKED_MEAT] = ["Viande cuite", "Un steak saignant, s'il vous plait", "Nourriture: 35"];
  LANG[INV.FOODFISH] = ["Poisson cru", "Je crois que c'est encore vivant", "Intoxication: 10", "Nourriture: 18"];
  LANG[INV.FOODFISH_COOKED] = ["Poisson cuit", "Avec du citron, c'est parfait", "Nourriture: 35"];
  LANG[INV.BREAD] = ["Baguette", "Une tradition s'il vous plait", "C'est la monnaie du marché", "Nourriture: 15"];
  LANG[INV.SANDWICH] = ["Sandwich", "Le Jambon Beurre vaincra", "Nourriture: 100"];
  LANG[INV.CANDY] = ["Bonbons", "Il n'y a pas de dentiste ici", "Nourriture: 100"];
  LANG[INV.SUGAR_CAN] = ["Canne à sucre", "Sans sucre de canne", "Nourriture: 20"];
  LANG[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"];
  LANG[INV.SEED] = ["Graines de baies", "Deviennent des baies", "Naissance: 2min", "Croissance: 55s", "Arrosage: 3min 20s", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
  LANG[INV.WHEAT_SEED] = ["Graines de blé", "Deviennent du blé", "Naissance: 2min", "Croissance: 16s", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.WILD_WHEAT] = ["Blé", "Peut être transformé en farine dans les moulins"];
  LANG[INV.PUMPKIN_SEED] = ["Graines de citrouille", "Deviennent des citrouilles", "Naissance: 2min 40s", "Croissance: 2min", "Arrosage: 2min", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.PUMPKIN] = ["Citrouille", "Ça me rappelle Halloween", "Nourriture: 30"];
  LANG[INV.GARLIC_SEED] = ["Graines d'ail", "Très dangereux pour les vampires", "Dégâts: 20", "Naissance: 4min", "Croissance: 1min 10s", "Arrosage: 1min 40s", "Durabilité: 700", "Durée de vie: 8 jours"];
  LANG[INV.GARLIC] = ["Ail", "Soigne et réduit le froid", "Nourriture: 14", "Soigne sur le temps: 30", "Effet: 1 fois"];
  LANG[INV.THORNBUSH_SEED] = ["Graines de ronces", "Peuvent blesser vos ennemis", "Dégâts: 20", "Naissance: 4min", "Croissance: 15s", "Arrosage: 3min", "Durabilité: 1000", "Durée de vie: 8 jours"];
  LANG[INV.THORNBUSH] = ["Ronces", "Ça pique!"];
  LANG[INV.PLOT] = ["Terreau", "Indispensable", "Vos plantes grandiront plus vite", "et auront besoin de moins d'eau", "Durabilité: 2000"];
  LANG[INV.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
  LANG[INV.SPANNER] = ["Clé à molette", "Pour réparer les portes, les murs et les piques", "Dégâts: 2"];
  LANG[INV.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"];
  LANG[INV.FUR] = ["Peau de lapin", "Vous êtes un monstre"];
  LANG[INV.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"];
  LANG[INV.SPECIAL_FUR_2] = ["Fourrure noire", "Tu te sens prêt à faire quelque chose de mal"];
  LANG[INV.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"];
  LANG[INV.SCALES] = ["Écailles", "Ça sent le poisson!"];
  LANG[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
  LANG[INV.FIRE] = ["Feu de camp", "Réchauffe", "Durabilité: 150", "Durée de vie: 2min"];
  LANG[INV.BIG_FIRE] = ["Grand feu de camp", "Réchauffe plus longtemps", "Durabilité: 400", "Durée de vie: 6min"];
  LANG[INV.WORKBENCH] = ["Établi", "Utile pour fabriquer toute sorte d'objets"];
  LANG[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"];
  LANG[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"];
  LANG[INV.CHEST] = ["Coffre", "Permet de ranger des objets", "Durabilité: 500"];
  LANG[INV.SWORD_WOOD] = ["Épée en bois", "C'est pour les enfants", "Dégâts: 12", "Démolition: 4"];
  LANG[INV.SWORD] = ["Épée en pierre", "Sois gentil avec les autres", "Dégâts: 19", "Démolition: 6"];
  LANG[INV.SWORD_GOLD] = ["Épée en or", "Roi de la forêt", "Dégâts: 22", "Démolition: 7"];
  LANG[INV.SWORD_DIAMOND] = ["Épée en diamant", "Tu te sens puissant", "Dégâts: 24", "Démolition: 8"];
  LANG[INV.PIRATE_SWORD] = ["Épée de pirate", "Marin d'eau douce!", "Meilleure portée qu'une épée normale", "Dégâts: 24", "Démolition: 8"];
  LANG[INV.SWORD_AMETHYST] = ["Épée en améthyste", "Mauve est la plus belle couleur du monde", "Dégâts: 27", "Démolition: 9"];
  LANG[INV.DRAGON_SWORD] = ["Épée du Dragon", "Pas de pitié!", "Dégâts: 30", "Démolition: 10"];
  LANG[INV.DRAGON_SPEAR] = ["Lance du Dragon", "Tuez-les tous!", "Dégâts: 22", "Démolition: 6"];
  LANG[INV.PICK_WOOD] = ["Pioche en bois", "Peut récolter du bois et de la pierre", "Dégâts: 1"];
  LANG[INV.PICK] = ["Pioche en pierre", "Peut aussi récolter de l'or", "Dégâts: 2"];
  LANG[INV.PICK_GOLD] = ["Pioche en or", "Peut aussi récolter du diamant", "Dégâts: 3", "Démolition: 1"];
  LANG[INV.PICK_DIAMOND] = ["Pioche en diamant", "Peut tout récolter", "Dégâts: 4", "Démolition: 1"];
  LANG[INV.PICK_AMETHYST] = ["Pioche en améthyste", "Peut tout récolter", "Dégâts: 5", "Démolition: 1"];
  LANG[INV.HAMMER] = ["Marteau en pierre", "Utile pour détruire les bâtiments", "Ne marche pas bien sur du diamant et améthyste", "Dégâts: 2", "Démolition: 20"];
  LANG[INV.HAMMER_GOLD] = ["Marteau en or", "Utile pour détruire les bâtiments", "Ne marche pas bien sur l'améthyste", "Dégâts: 3", "Démolition: 30"];
  LANG[INV.HAMMER_DIAMOND] = ["Marteau en diamant", "Utile pour détruire les bâtiments", "Dégâts: 4", "Démolition: 40"];
  LANG[INV.HAMMER_AMETHYST] = ["Marteau en améthyste", "Utile pour détruire les bâtiments", "Dégâts: 5", "Démolition: 50"];
  LANG[INV.SUPER_HAMMER] = ["Super Marteau", "As-tu prévu de détruire le monde?", "Dégâts: 12", "Démolition: 70"];
  LANG[INV.WOOD_SPEAR] = ["Lance en bois", "Plus de peur que de mal", "Dégâts: 10", "Démolition: 2"];
  LANG[INV.SPEAR] = ["Lance en pierre", "C'est le début de l'évolution", "Dégâts: 14", "Démolition: 4"];
  LANG[INV.GOLD_SPEAR] = ["Lance en or", "Attention, ça pique!", "Dégâts: 15", "Buildings Dégâts: 5"];
  LANG[INV.DIAMOND_SPEAR] = ["Lance en diamant", "Tu es prêt à tuer les dragons", "Dégâts: 17", "Buildings Dégâts: 5"];
  LANG[INV.AMETHYST_SPEAR] = ["Lance en améthyste", "Les dragons ne te font plus peur", "Dégâts: 18", "Buildings Dégâts: 6"];
  LANG[INV.SHOVEL] = ["Pelle en pierre", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 2"];
  LANG[INV.SHOVEL_GOLD] = ["Pelle en or", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 3", "Buildings Dégâts: 1"];
  LANG[INV.SHOVEL_DIAMOND] = ["Pelle en diamant", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 4", "Buildings Dégâts: 1"];
  LANG[INV.SHOVEL_AMETHYST] = ["Pelle en améthyste", "Creuse la terre, le sable et la neige", "Peut aussi récupérer des minéraux", "Dégâts: 5", "Buildings Dégâts: 1"];
  LANG[INV.WOOD_HELMET] = ["Casque en bois", "Mieux que rien", "Défense: 1", "Défense contre animaux: 4"];
  LANG[INV.STONE_HELMET] = ["Casque en pierre", "Prêt pour la bataille", "Défense: 2", "Défense contre animaux: 8"];
  LANG[INV.GOLD_HELMET] = ["Casque en or", "Alias le casque des sauvages", "Défense: 4", "Défense contre animaux: 13"];
  LANG[INV.DIAMOND_HELMET] = ["Casque en diamant", "Ne te vante pas trop", "Défense: 5", "Défense contre animaux: 19"];
  LANG[INV.AMETHYST_HELMET] = ["Casque en améthyste", "Tu n'as plus peur de rien", "Défense: 6", "Défense contre animaux: 23"];
  LANG[INV.DRAGON_HELMET] = ["Casque du Dragon", "Tu vas conquérir le monde", "Défense: 8", "Défense contre animaux: 27"];
  LANG[INV.EXPLORER_HAT] = ["Chapeau d'explorateur", "Les animaux t'ignorent", "Mais ne faites pas de bruit!", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.CHRISTMAS_HAT] = ["Chapeau du Père Noël", "Oh, oh, oh, Joyeux Nöel!", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.ELF_HAT] = ["Chapeau du lutin de Nöel", "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.HOOD] = ["Capuche", "Voyou!", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 8 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.EARMUFFS] = ["Cache-oreilles", "Une sorte de petite chapka.", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.COAT] = ["Chapka", "Comment ça va, camarade?", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
  LANG[INV.PEASANT] = ["Tunique", "Les plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.WINTER_HOOD] = ["Capuche d'hiver", "Tu peux voler seulement si", "1) Il fait nuit", "2) Tu as les mains libres", "3) Tu n'as pas été touché depuis 4 secondes", "4) Tu es loin d'un feu", "5) Ta cible n'est pas un paysan d'hiver", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.WINTER_PEASANT] = ["Tunique d'hiver", "Tes plantes poussent plus vite", "Réchauffe en dehors de l'eau et dans l'hiver"];
  LANG[INV.DIVING_MASK] = ["Masque de plongée", "Tu es rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 2, Défense contre animaux: 8"];
  LANG[INV.SUPER_DIVING_SUIT] = ["Scaphandre", "Tu es très rapide dans l'eau", "Réchauffe dans l'eau", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"];
  LANG[INV.DRAGON_HEART] = ["Coeur de Dragon", "Te change en fantôme!", "Tu es un fantôme pendant 1 min", "Trouve une pierre de résurrection"];
  LANG[INV.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"];
  LANG[INV.GEMME_ORANGE] = ["Gemme orange", "Seul un vrai pirate peut l'obtenir!"];
  LANG[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"];
  LANG[INV.CROWN_GREEN] = ["Couronne verte", "Te soigne très rapidement", "Soigne sur le temps: 40", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.CROWN_ORANGE] = ["Couronne orange", "Tu te sens soudainement très chanceux", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.CROWN_BLUE] = ["Couronne bleue", "Une fois mort, tu deviens un fantôme", "Tu perdras toutes tes arguments", "Défense: 4, Défense contre animaux: 16"];
  LANG[INV.BUCKET_FULL] = ["Seau", "Utile pour remplir un puit", "Un sceau est équivalent à 20 bouteilles"];
  LANG[INV.BUCKET_EMPTY] = ["Seau vide", "Pour remplir ce seau, approche-toi d'une source d'eau"];
  LANG[INV.BOTTLE_FULL] = ["Bouteille", "Te permet de boire n'importe où", "Eau: 50"];
  LANG[INV.BOTTLE_EMPTY] = ["Bouteille vide", "Tu peux remplir cette bouteille près d'une source d'eau"];
  LANG[INV.WATERING_CAN] = ["Arrosoir vide", "Doit être rempli près d'une source d'eau"];
  LANG[INV.WATERING_CAN_FULL] = ["Arrosoir", "Permet d'arroser les plantes", "Dégâts: 1"];
  LANG[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"];
  LANG[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"];
  LANG[INV.BOOK] = ["Livre", "Réduit considérablement le temps de fabrication", "Doit être porté pour fonctionner", "Dégâts: 1"];
  LANG[INV.BANDAGE] = ["Bandage", "Soigne plus rapidement", "Soigne sur le temps: 30", "Effet: 5"];
  LANG[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"];
  LANG[INV.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"];
  LANG[INV.TOTEM] = ["Totem", "Te permet de créer une équipe", "Partage les portes et les coffres", "Les piques ne toucheront pas tes amis"];
  LANG[INV.BRIDGE] = ["Pont", "Très utile sur l'eau", "Te permet de boire sans te noyer", "Marche plus vite sur l'eau"];
  LANG[INV.SIGN] = ["Pancarte", "Laisse un message aux autres", "Durabilité: 200"];
  LANG[INV.ROOF] = ["Toit", "Te cache un peu et te réchauffe"];
  LANG[INV.WELL] = ["Puit", "Permet de remplir des bouteilles", "Durabilité: 1000"];
  LANG[INV.WALL] = ["Mur en bois", "Tu connais la danse des murs?", "Durabilité: 1000"];
  LANG[INV.STONE_WALL] = ["Mur en pierre", "Ça fait un peu plus sérieux", "Durabilité: 1500"];
  LANG[INV.GOLD_WALL] = ["Mur en or", "De l'or sur tes murs? C'est un peu voyant", "Durabilité: 2000"];
  LANG[INV.DIAMOND_WALL] = ["Mur en diamant", "Très brillant, cache tes yeux", "Durabilité: 2500"];
  LANG[INV.AMETHYST_WALL] = ["Mur en améthyste", "Tu dois avoir très peur de sortir dehors!", "Durabilité: 3500"];
  LANG[INV.SPIKE] = ["Piques en bois", "Peut blesser tes ennemis", "Dégâts: 10, Dégâts par coup: 2", "Durabilité: 150"];
  LANG[INV.STONE_SPIKE] = ["Pique en pierre", "Je ne voudrais pas être ton ennemi", "Dégâts: 20", "Dégâts par coup: 3", "Durabilité: 300"];
  LANG[INV.GOLD_SPIKE] = ["Pique en or", "Tu es si cruel", "Dégâts: 30", "Dégâts par coup: 3", "Durabilité: 600"];
  LANG[INV.DIAMOND_SPIKE] = ["Pique en diamant", "Tu n'as pas l'air d'aimer la compagnie", "Dégâts: 40", "Dégâts par coup: 4", "Durabilité: 1200"];
  LANG[INV.AMETHYST_SPIKE] = ["Pique en améthyste", "Mais qu'est ce que ton voisin t'a fait?", "Dégâts: 50", "Dégâts par coup: 4", "Durabilité: 2400"];
  LANG[INV.WOOD_DOOR] = ["Porte en bois", "Peut être ouvert ou fermé par toi ou tes amis", "Durabilité: 1000"];
  LANG[INV.STONE_DOOR] = ["Porte en pierre", "Tu connais les trois petits cochons?", "Durabilité: 1500"];
  LANG[INV.GOLD_DOOR] = ["Porte en or", "Tu reconstruis l'el dorado?", "Durabilité: 2000"];
  LANG[INV.DIAMOND_DOOR] = ["Porte en diamant", "Pour une maison éclatante", "Durabilité: 2500"];
  LANG[INV.AMETHYST_DOOR] = ["Porte en améthyste", "Est-ce que ta maison est un coffre-fort?", "Durabilité: 3000"];
  LANG[INV.FURNACE] = ["Chaudière", "Réchauffe", "Consume du bois toutes les 5 sec", "Durabilité: 1000"];
  LANG[INV.WINDMILL] = ["Moulin", "Peut produire de la farine à partir du blé", "Prends 5 sec pour faire de la farine", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
  LANG[INV.BREAD_OVEN] = ["Four à pain", "Produit du pain avec de la farine et du bois", "Prends 10 sec pour faire du pain", "Tu obtiens des points quand c'est en marche", "Durabilité: 2000"];
  LANG[INV.RESURRECTION] = ["Pierre de résurrection", "Magie magie!", "Te ressuscite si tu es un fantôme", "Tu perds toutes tes armes", "Durabilité: 200"];
  LANG[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur";
  LANG[TEXT.KICKED] = "Expulsé: ";
  LANG[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre";
  LANG[TEXT.KEY_WRONG] = "Ta clé est fausse";
  LANG[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches";
  LANG[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources";
  LANG[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour";
  LANG[TEXT.SURVIVED] = "Tu as survécu ";
  LANG[TEXT.DAYS] = " jours";
  LANG[TEXT.DEAD_SAD] = "Tu es mort ;-;";
  LANG[TEXT.SPAM_ME] = "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
  LANG[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer";
  LANG[TEXT.EMPTY] = "Cette ressource est vide";
  LANG[TEXT.INV_FULL] = "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
  LANG[TEXT.DEAD] = " est mort";
  LANG[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil";
  LANG[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe";
  LANG[TEXT.YOU_DEAD] = "Tu es mort";
  LANG[TEXT.JOINED_TEAM] = " a rejoint l'équipe";
  LANG[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite";
  LANG[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe";
  LANG[TEXT.LEFT_TEAM2] = " a quitté l'équipe";
  LANG[TEXT.TOKEN] = "Quelqu'un a volé ton token :>";
  LANG[TEXT.CHOOSE] = "Choisis un serveur";
  LANG[TEXT.PLAYERS] = "joueurs";
  LANG[TEXT.TOTAL_PLAYERS] = "joueurs";
  LANG[TEXT.TOTAL_MODE] = "joueurs dans ce mode";
  LANG[TEXT.COMMING_SOON] = "Bientôt...";
  document.getElementById("nickname_input").placeholder = "Surnom";
  DIE[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
  DIE[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
  DIE[2] = ["Tu es mort de froid. Dommage", "Tu as fait une hypothermie, la prochaine fois reste près d'un feu"];
  DIE[3] = ["Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire", "Un joueur t'a tué, avec un peu de chance il mourra aussi"];
  DIE[4] = ["Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures", "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?"];
  DIE[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
  DIE[6] = ["Ce loup n'aura plus faim après t'avoir mangé", "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués."];
  DIE[7] = ["Ce renard était trop rapide pour toi", "Ce renard t'a transformé en boîte"];
  DIE[8] = ["Cet ours voulait juste un câlin."];
  DIE[9] = ["Tu as été brûlé par un dragon. Quel gâchis", "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir..."];
  DIE[10] = ["Tu as sauté sur des piques, c'était pas une bonne idée...", "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues"];
  DIE[11] = ["Même les fantômes peuvent mourir", "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc..."];
  DIE[12] = ["Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.", "Tu as tué l'animal, sa viande t'a tué."];
  DIE[13] = ["Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille"];
  DIE[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
  DIE[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
  DIE[16] = ["Un kraken a 'kraké' tes os."];
  DIE[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
  DIE[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
  DIE[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
  DIE[20] = ["Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?"];
  DIE[21] = ["Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime."];
  ZOMBIE_GRUMBLE = "Uuunnnggg";
  ZOMBIE_GRUMBLES = ["Uuunnnggg... J'ai faim", "Manger cerveau, Uuunnnggg...", "Viande fraîche ici... Uuunnnggg", "Uuunnnggg... Tu as l'air bon", "Uuunnnggg...", "Manger... uuunnnggg...", "Je peux sentir ton sang... Uuunnnggg"];
}
var LANG = [];
for (var i = 0; i < COUNTER; i++) {
  LANG[i] = "";
}
var DIE = [];
$(".md-languages").on("click", function () {
  $(this).toggleClass("active");
});
$(".md-languages ul li").on("click", function () {
  var _0x107ce4 = $(this).text();
  if (_0x107ce4 === "English") {
    set_english();
  } else if (_0x107ce4 === "Français") {
    set_french();
  } else if (_0x107ce4 === "Deutsch") {
    set_german();
  } else if (_0x107ce4 === "Español") {
    set_spanish();
  } else if (_0x107ce4 === "Português") {
    set_portuguese();
  } else if (_0x107ce4 === "Русский") {
    set_russian();
  } else if (_0x107ce4 === "Polski") {
    set_polish();
  }
  INFO_BOX = [];
  user.craft.label = [];
  $(".md-languages ul li").removeClass("active");
  $(this).addClass("active");
  $(".md-languages label button").text(_0x107ce4);
});
var lang = "EN";
var userlang = navigator.language || navigator.userLanguage;
switch (userlang) {
  case "ru":
    lang = "RU";
    break;
  case "en":
    lang = "EN";
    break;
  case "es":
    lang = "SP";
    break;
  case "fr":
    lang = "FR";
    break;
  case "pl":
    lang = "PL";
    break;
  case "de":
    lang = "DE";
    break;
  case "pt":
    lang = "PT";
    break;
}
var next_lang;
if (lang === "FR") {
  $(".md-languages label button").text("Français");
  next_lang = set_french;
} else if (lang === "PL") {
  $(".md-languages label button").text("Polski");
  next_lang = set_polish;
} else if (lang === "PT") {
  $(".md-languages label button").text("Português");
  next_lang = set_portuguese;
} else if (lang === "SP") {
  $(".md-languages label button").text("Español");
  next_lang = set_spanish;
} else if (lang === "RU") {
  $(".md-languages label button").text("Русский");
  next_lang = set_russian;
} else if (lang === "DE") {
  $(".md-languages label button").text("Deutsch");
  next_lang = set_german;
} else {
  $(".md-languages label button").text("English");
  next_lang = set_english;
}
IMAGES = {
  LOGO: "img/logo.png",
  BIGDAY: "img/mapday.png",
  BIGNIGHT: "img/mapnight.png",
  BIGZDAY: "img/bigzday.png",
  BIGZNIGHT: "img/bigznight.png",
  MAPDAY_RIVER: "img/bigday-river1.png",
  MAPDAY_LAKE: "img/bigday-lake.png",
  MAPDAY_BERRY: "img/bigday-berry.png",
  MAPDAY_STONE1: "img/bigday-stone1.png",
  MAPDAY_STONE2: "img/bigday-stone2.png",
  MAPDAY_GOLD1: "img/bigday-gold1.png",
  MAPDAY_GOLD2: "img/bigday-gold2.png",
  MAPDAY_EMERALD1: "img/bigday-emerald1.png",
  MAPDAY_EMERALD2: "img/bigday-emerald2.png",
  MAPDAY_AMETHYST: "img/bigday-amethyst.png",
  MAPDAY_BEAR: "img/bigday-bear.png",
  MAPDAY_CAVE: "img/bigday-cave.png",
  MAPDAY_DIAMOND: "img/bigday-diamond.png",
  MAPDAY_ISLAND: "img/bigday-island.png",
  MAPDAY_REIDITE: "img/bigday-reidite.png",
  MAPDAY_SPIDER: "img/bigday-spider.png",
  MAPDAY_WOLF: "img/bigday-wolf.png",
  MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
  MAPDAY_FOX: "img/bigday-fox.png",
  MAPDAY_KRAKEN: "img/bigday-kraken.png",
  MAPDAY_PIRANHA: "img/bigday-piranha.png",
  MAPDAY_CACTUS: "img/bigday-cactus.png",
  MAPDAY_MAGMA: "img/bigday-magma.png",
  MAPNIGHT_RIVER: "img/bigday-river1.png",
  MAPNIGHT_LAKE: "img/bignight-lake.png",
  MAPNIGHT_BERRY: "img/bignight-berry.png",
  MAPNIGHT_STONE1: "img/bignight-stone1.png",
  MAPNIGHT_STONE2: "img/bignight-stone2.png",
  MAPNIGHT_GOLD1: "img/bignight-gold1.png",
  MAPNIGHT_GOLD2: "img/bignight-gold2.png",
  MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
  MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
  MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
  MAPNIGHT_BEAR: "img/bignight-bear.png",
  MAPNIGHT_CAVE: "img/bignight-cave.png",
  MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
  MAPNIGHT_ISLAND: "img/bignight-island.png",
  MAPNIGHT_REIDITE: "img/bignight-reidite.png",
  MAPNIGHT_SPIDER: "img/bignight-spider.png",
  MAPNIGHT_WOLF: "img/bignight-wolf.png",
  MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
  MAPNIGHT_FOX: "img/bignight-fox.png",
  MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
  MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
  MAPNIGHT_CACTUS: "img/bignight-cactus.png",
  MAPNIGHT_MAGMA: "img/bignight-magma.png",
  MAPDAY_DESERT: "img/bigday-desert.png",
  MAPDAY_WINTER: "img/bigday-winter.png",
  MAPDAY_LAVA: "img/bigday-lava.png",
  MAPDAY_FOREST: "img/bigday-forest.png",
  MAPNIGHT_DESERT: "img/bignight-desert.png",
  MAPNIGHT_WINTER: "img/bignight-winter.png",
  MAPNIGHT_LAVA: "img/bignight-lava.png",
  MAPNIGHT_FOREST: "img/bignight-forest.png",
  RIVER_WAVED: "img/day-river-wave.png",
  RIVER_WAVEN: "img/night-river-wave.png",
  FOG0D: "img/day-fog0.png",
  FOG1D: "img/day-fog1.png",
  FOG2D: "img/day-fog2.png",
  FOG0N: "img/night-fog0.png",
  FOG1N: "img/night-fog1.png",
  FOG2N: "img/night-fog2.png",
  FOD0D: "img/day-fogdesert0.png",
  FOD1D: "img/day-fogdesert1.png",
  FOD2D: "img/day-fogdesert2.png",
  FOD0N: "img/night-fogdesert0.png",
  FOD1N: "img/night-fogdesert1.png",
  FOD2N: "img/night-fogdesert2.png",
  MARKER0D: "img/day-cross-server.png",
  MARKER1D: "img/day-here-server.png",
  MARKER2D: "img/day-finish-server.png",
  MARKER3D: "img/day-item-server.png",
  MARKER0N: "img/night-cross-server.png",
  MARKER1N: "img/night-here-server.png",
  MARKER2N: "img/night-finish-server.png",
  MARKER3N: "img/night-item-server.png",
  REIDITE0D: "img/day-reidite0.png",
  REIDITE0N: "img/night-reidite0.png",
  REIDITE1D: "img/day-reidite1.png",
  REIDITE1N: "img/night-reidite1.png",
  REIDITE2D: "img/day-reidite2.png",
  REIDITE2N: "img/night-reidite2.png",
  MAGMA1D: "img/day-lava1.png",
  MAGMA1N: "img/night-lava1.png",
  MAGMA2D: "img/day-lava2.png",
  MAGMA2N: "img/night-lava2.png",
  MAGMA3D: "img/day-lava3.png",
  MAGMA3N: "img/night-lava3.png",
  MAGMA4D: "img/day-lava4.png",
  MAGMA4N: "img/night-lava4.png",
  MAGMA5D: "img/day-lava5.png",
  MAGMA5N: "img/night-lava5.png",
  MAGMA6D: "img/day-lava6.png",
  MAGMA6N: "img/night-lava6.png",
  LAVA_GROUND1D: "img/day-lava-ground1.png",
  LAVA_GROUND1N: "img/night-lava-ground1.png",
  LAVA_GROUND2D: "img/day-lava-ground2.png",
  LAVA_GROUND2N: "img/night-lava-ground2.png",
  LAVA_GROUND3D: "img/day-lava-ground3.png",
  LAVA_GROUND3N: "img/night-lava-ground3.png",
  LAVA_GROUND4D: "img/day-lava-ground4.png",
  LAVA_GROUND4N: "img/night-lava-ground4.png",
  LAVA_GROUND5D: "img/day-lava-ground5.png",
  LAVA_GROUND5N: "img/night-lava-ground5.png",
  LAVA_GROUND6D: "img/day-lava-ground6.png",
  LAVA_GROUND6N: "img/night-lava-ground6.png",
  FIRE_MOBD: "img/day-fire-mob.png",
  FIRE_MOBN: "img/night-fire-mob.png",
  FIRE_MOB_HURT: "img/hurt-fire-mob.png",
  DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
  DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
  HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
  HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
  INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
  INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
  INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
  AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
  AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
  HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
  HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
  INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
  INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
  INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
  REIDITE_SWORDD: "img/day-reidite-sword.png",
  REIDITE_SWORDN: "img/night-reidite-sword.png",
  INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
  INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
  INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
  INV_REIDITE_OUT: "img/inv-reidite-out.png",
  INV_REIDITE_IN: "img/inv-reidite-in.png",
  INV_REIDITE_CLICK: "img/inv-reidite-click.png",
  INV_FLAME_OUT: "img/inv-flame-out.png",
  INV_FLAME_IN: "img/inv-flame-in.png",
  INV_FLAME_CLICK: "img/inv-flame-click.png",
  LAVA_BUBLE0D: "img/day-magma-buble0.png",
  LAVA_BUBLE0N: "img/night-magma-buble0.png",
  LAVA_BUBLE1D: "img/day-magma-buble1.png",
  LAVA_BUBLE1N: "img/night-magma-buble1.png",
  LAVA_BUBLE2D: "img/day-magma-buble2.png",
  LAVA_BUBLE2N: "img/night-magma-buble2.png",
  LAVA_DRAGOND: "img/day-lava-dragon.png",
  LAVA_DRAGONN: "img/night-lava-dragon.png",
  LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
  LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
  HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
  LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
  LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
  LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
  LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
  HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
  HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
  REIDITE_SPEARD: "img/day-reidite-spear.png",
  REIDITE_SPEARN: "img/night-reidite-spear.png",
  INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
  INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
  INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
  REIDITE_HELMETD: "img/day-reidite-helmet.png",
  REIDITE_HELMETN: "img/night-reidite-helmet.png",
  INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
  INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
  INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
  HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
  HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
  REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
  REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
  INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
  INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
  INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
  LAVA_SWORDD: "img/day-lava-dragon-sword.png",
  LAVA_SWORDN: "img/night-lava-dragon-sword.png",
  INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
  INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
  INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
  LAVA_SPEARD: "img/day-lava-spear.png",
  LAVA_SPEARN: "img/night-lava-spear.png",
  INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
  INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
  INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
  LAVA_HELMETD: "img/day-lava-helmet.png",
  LAVA_HELMETN: "img/night-lava-helmet.png",
  INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
  INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
  INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
  WITCHD: "img/day-witch-hat.png",
  WITCHN: "img/night-witch-hat.png",
  INV_WITCH_OUT: "img/inv-witch-hat-out.png",
  INV_WITCH_IN: "img/inv-witch-hat-in.png",
  INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
  NIMBUSD: "img/day-nimbus2000.png",
  NIMBUSN: "img/night-nimbus2000.png",
  INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
  INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
  INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
  ACCESSORY1D: "img/day-accessory1-pacques.png",
  ACCESSORY1N: "img/night-accessory1-pacques.png",
  ACCESSORY2D: "img/day-accessory2-pacques.png",
  ACCESSORY2N: "img/night-accessory2-pacques.png",
  ACCESSORY3D: "img/day-accessory3-pacques.png",
  ACCESSORY3N: "img/night-accessory3-pacques.png",
  ACCESSORY5D: "img/day-accessory5-pacques.png",
  ACCESSORY5N: "img/night-accessory5-pacques.png",
  ACCESSORY6D: "img/day-accessory6-pacques.png",
  ACCESSORY6N: "img/night-accessory6-pacques.png",
  ACCESSORY7D: "img/day-accessory7-pacques.png",
  ACCESSORY7N: "img/night-accessory7-pacques.png",
  ACCESSORY8D: "img/day-accessory8-pacques.png",
  ACCESSORY8N: "img/night-accessory8-pacques.png",
  BAG_EASTERD: "img/day-bag-pacques.png",
  BAG_EASTERN: "img/night-bag-pacques.png",
  CARROTD: "img/day-carrot.png",
  CARROTN: "img/night-carrot.png",
  CARROT_DRIEDD: "img/day-carrot-dried.png",
  CARROT_DRIEDN: "img/night-carrot-dried.png",
  TOMATO_MINID: "img/day-tomato-herb.png",
  TOMATO_MININ: "img/night-tomato-herb.png",
  TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
  TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
  TOMATOD: "img/day-tomato.png",
  TOMATON: "img/night-tomato.png",
  INV_CARROT_OUT: "img/inv-carrot-out.png",
  INV_CARROT_IN: "img/inv-carrot-in.png",
  INV_CARROT_CLICK: "img/inv-carrot-click.png",
  INV_TOMATO_OUT: "img/inv-tomato-out.png",
  INV_TOMATO_IN: "img/inv-tomato-in.png",
  INV_TOMATO_CLICK: "img/inv-tomato-click.png",
  PLAYER0D: "img/day-player0.png",
  PLAYER0N: "img/night-player0.png",
  PLAYER1D: "img/day-player1.png",
  PLAYER1N: "img/night-player1.png",
  PLAYER2D: "img/day-player2.png",
  PLAYER2N: "img/night-player22.png",
  PLAYER3D: "img/day-player3.png",
  PLAYER3N: "img/night-player33.png",
  PLAYER4D: "img/day-player4.png",
  PLAYER4N: "img/night-player4.png",
  PLAYER5D: "img/day-player5.png",
  PLAYER5N: "img/night-player5.png",
  PLAYER6D: "img/day-player6.png",
  PLAYER6N: "img/night-player6.png",
  PLAYER7D: "img/day-player7.png",
  PLAYER7N: "img/night-player7.png",
  PLAYER8D: "img/day-player8.png",
  PLAYER8N: "img/night-player8.png",
  PLAYER9D: "img/day-player9.png",
  PLAYER9N: "img/night-player9.png",
  PLAYER10D: "img/day-player10.png",
  PLAYER10N: "img/night-player10.png",
  PLAYER11D: "img/day-player11.png",
  PLAYER11N: "img/night-player11.png",
  PLAYER12D: "img/day-player12.png",
  PLAYER12N: "img/night-player12.png",
  PLAYER13D: "img/day-player13.png",
  PLAYER13N: "img/night-player13.png",
  PLAYER14D: "img/day-player14.png",
  PLAYER14N: "img/night-player14.png",
  PLAYER15D: "img/day-player15.png",
  PLAYER15N: "img/night-player15.png",
  PLAYER16D: "img/day-player16.png",
  PLAYER16N: "img/night-player16.png",
  PLAYER17D: "img/day-player17.png",
  PLAYER17N: "img/night-player17.png",
  PLAYER18D: "img/day-player18.png",
  PLAYER18N: "img/night-player18.png",
  PLAYER19D: "img/day-player19.png",
  PLAYER19N: "img/night-player19.png",
  HAND0D: "img/day-hand-player0.png",
  HAND0N: "img/night-hand-player0.png",
  HAND1D: "img/day-hand-player1.png",
  HAND1N: "img/night-hand-player1.png",
  HAND2D: "img/day-hand-player2.png",
  HAND2N: "img/night-hand-player22.png",
  HAND3D: "img/day-hand-player3.png",
  HAND3N: "img/night-hand-player33.png",
  HAND4D: "img/day-hand-player4.png",
  HAND4N: "img/night-hand-player4.png",
  HAND5D: "img/day-hand-player5.png",
  HAND5N: "img/night-hand-player5.png",
  HAND6D: "img/day-hand-player6.png",
  HAND6N: "img/night-hand-player6.png",
  HAND7D: "img/day-hand-player7.png",
  HAND7N: "img/night-hand-player7.png",
  HAND8D: "img/day-hand-player8.png",
  HAND8N: "img/night-hand-player8.png",
  HAND9D: "img/day-hand-player9.png",
  HAND9N: "img/night-hand-player9.png",
  HAND10D: "img/day-hand-player10.png",
  HAND10N: "img/night-hand-player10.png",
  HAND11D: "img/day-hand-player11.png",
  HAND11N: "img/night-hand-player11.png",
  HAND12D: "img/day-hand-player12.png",
  HAND12N: "img/night-hand-player12.png",
  HAND13D: "img/day-hand-player13.png",
  HAND13N: "img/night-hand-player13.png",
  HAND14D: "img/day-hand-player14.png",
  HAND14N: "img/night-hand-player14.png",
  HAND15D: "img/day-hand-player15.png",
  HAND15N: "img/night-hand-player15.png",
  HAND16D: "img/day-hand-player16.png",
  HAND16N: "img/night-hand-player16.png",
  HAND17D: "img/day-hand-player17.png",
  HAND17N: "img/night-hand-player17.png",
  HAND18D: "img/day-hand-player18.png",
  HAND18N: "img/night-hand-player18.png",
  HAND19D: "img/day-hand-player19.png",
  HAND19N: "img/night-hand-player19.png",
  ACCESSORY4D: "img/day-accessory4.png",
  ACCESSORY4N: "img/night-accessory4.png",
  ACCESSORY9D: "img/day-accessory9.png",
  ACCESSORY9N: "img/night-accessory9.png",
  ACCESSORY10D: "img/day-accessory10.png",
  ACCESSORY10N: "img/night-accessory10.png",
  ACCESSORY11D: "img/day-accessory11.png",
  ACCESSORY11N: "img/night-accessory11.png",
  ACCESSORY12D: "img/day-accessory12.png",
  ACCESSORY12N: "img/night-accessory12.png",
  BAGD: "img/day-bag.png",
  BAGN: "img/night-bag.png",
  INV_BAG_OUT: "img/inv-bag-out.png",
  INV_BAG_IN: "img/inv-bag-in.png",
  INV_BAG_CLICK: "img/inv-bag-click.png",
  PITCHFORKD: "img/day-pitchfork.png",
  PITCHFORKN: "img/night-pitchfork.png",
  INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
  INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
  INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
  INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
  INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
  INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
  INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
  INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
  INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
  INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
  INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
  INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
  INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
  INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
  INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
  INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
  INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
  INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
  WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
  WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
  STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
  STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
  GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
  GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
  DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
  DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
  AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
  AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
  INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
  INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
  INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
  INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
  INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
  INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
  INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
  INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
  INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
  INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
  INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
  INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
  REIDITE_WALLD: "img/day-reidite-wall.png",
  REIDITE_WALLN: "img/night-reidite-wall.png",
  REIDITE_DOORD: "img/day-reidite-door.png",
  REIDITE_DOORN: "img/night-reidite-door.png",
  REIDITE_SPIKED: "img/day-reidite-spike.png",
  REIDITE_SPIKEN: "img/night-reidite-spike.png",
  REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
  REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
  INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
  INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
  INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
  PICK_REIDITED: "img/day-reidite-pickaxe.png",
  PICK_REIDITEN: "img/night-reidite-pickaxe.png",
  INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
  INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
  INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
  HAMMER_REIDITED: "img/day-reidite-hammer.png",
  HAMMER_REIDITEN: "img/night-reidite-hammer.png",
  WATERMELOND: "img/day-watermelon1.png",
  WATERMELONN: "img/night-watermelon1.png",
  DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
  DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
  INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
  INV_WATERMELON_IN: "img/inv-watermelon-in.png",
  INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
  BOATD: "img/day-boat.png",
  BOATN: "img/night-boat.png",
  BOAT_WAVED: "img/day-boat-wave.png",
  BOAT_WAVEN: "img/night-boat-wave.png",
  INV_BOAT_OUT: "img/inv-boat-out.png",
  INV_BOAT_IN: "img/inv-boat-in.png",
  INV_BOAT_CLICK: "img/inv-boat-click.png",
  PLANED: "img/day-plane.png",
  PLANEN: "img/night-plane.png",
  INV_PLANE_OUT: "img/inv-plane-out.png",
  INV_PLANE_IN: "img/inv-plane-in.png",
  INV_PLANE_CLICK: "img/inv-plane-click.png",
  SLEDD: "img/day-sled.png",
  SLEDN: "img/night-sled.png",
  SLED_WAVED: "img/day-sled-wave.png",
  SLED_WAVEN: "img/night-sled-wave.png",
  INV_SLED_OUT: "img/inv-sled-out.png",
  INV_SLED_IN: "img/inv-sled-in.png",
  INV_SLED_CLICK: "img/inv-sled-click.png",
  PIRATE_HATD: "img/day-pirate-hat.png",
  PIRATE_HATN: "img/night-pirate-hat.png",
  INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
  INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
  INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
  PENGUIND: "img/day-penguin.png",
  PENGUINN: "img/night-penguin.png",
  HURT_PENGUIN: "img/hurt-penguin.png",
  INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
  INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
  BOARD: "img/day-boar1.png",
  BOAR_TAMEDD: "img/day-boar1-tamed.png",
  BOAR_ANGRYD: "img/day-boar1-angry.png",
  BOARN: "img/night-boar1.png",
  BOAR_TAMEDN: "img/night-boar1-tamed.png",
  BOAR_ANGRYN: "img/night-boar1-angry.png",
  INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
  INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
  INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
  HURT_BOAR: "img/day-hurt-boar1.png",
  BOAR_STEP: "img/boar1-step.png",
  SADDLED: "img/day-saddle1.png",
  SADDLEN: "img/night-saddle1.png",
  INV_SADDLE_OUT: "img/inv-saddle-out.png",
  INV_SADDLE_IN: "img/inv-saddle-in.png",
  INV_SADDLE_CLICK: "img/inv-saddle-click.png",
  WAND1D: "img/day-magic-wand0.png",
  WAND1N: "img/night-magic-wand0.png",
  LIGHT_WAND1D: "img/day-light-wand1.png",
  LIGHT_WAND1N: "img/night-light-wand1.png",
  INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
  INV_WAND1_IN: "img/inv-magic-wand0-in.png",
  INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
  WAND2D: "img/day-magic-wand1.png",
  WAND2N: "img/night-magic-wand1.png",
  LIGHT_WAND0D: "img/day-light-wand0.png",
  LIGHT_WAND0N: "img/night-light-wand0.png",
  INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
  INV_WAND2_IN: "img/inv-magic-wand1-in.png",
  INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
  FIREFLYD: "img/day-firefly.png",
  FIREFLYN: "img/night-firefly.png",
  HURT_FIREFLY: "img/hurt-firefly.png",
  INV_FIREFLY_OUT: "img/inv-firefly-out.png",
  INV_FIREFLY_IN: "img/inv-firefly-in.png",
  INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
  BABY_DRAGOND: "img/day-baby-dragon.png",
  BABY_DRAGONN: "img/night-baby-dragon.png",
  BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
  BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
  BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
  BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
  BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
  BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
  BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
  BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
  BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
  BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
  BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
  BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
  BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
  BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
  BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
  BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
  HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
  HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
  HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
  INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
  INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
  INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
  BABY_LAVAD: "img/day-baby-lava.png",
  BABY_LAVAN: "img/night-baby-lava.png",
  BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
  BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
  BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
  BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
  BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
  BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
  BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
  BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
  BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
  BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
  BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
  BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
  BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
  BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
  BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
  BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
  HURT_BABY_LAVA: "img/hurt-baby-lava.png",
  HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
  HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
  INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
  INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
  INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
  HAWKD: "img/day-falcon.png",
  HAWKN: "img/night-falcon.png",
  HAWK_ATTACKD: "img/day-falcon-angry.png",
  HAWK_ATTACKN: "img/night-falcon-angry.png",
  HAWK_GROUNDD: "img/day-falcon-ground.png",
  HAWK_GROUNDN: "img/night-falcon-ground.png",
  HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
  HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
  HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
  HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
  HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
  HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
  HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
  HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
  HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
  HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
  HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
  HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
  HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
  HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
  HAWK_TAMEDD: "img/day-falcon-tamed.png",
  HAWK_TAMEDN: "img/night-falcon-tamed.png",
  HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
  HURT_HAWK: "img/hurt-falcon.png",
  HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
  HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
  INV_HAWK_OUT: "img/inv-falcon-out.png",
  INV_HAWK_IN: "img/inv-falcon-in.png",
  INV_HAWK_CLICK: "img/inv-falcon-click.png",
  CRAB_BOSSD: "img/day-crab-boss.png",
  CRAB_BOSSN: "img/night-crab-boss.png",
  CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
  CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
  CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
  CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
  CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
  CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
  CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
  CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
  CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
  CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
  CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
  CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
  CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
  CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
  CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
  CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
  HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
  HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
  HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
  HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
  HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
  HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
  CRAB_STEP: "img/crab-step.png",
  INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
  INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
  INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
  CACTUSD: "img/day-cactus10.png",
  CACTUSN: "img/night-cactus10.png",
  INV_CACTUS_OUT: "img/inv-cactus-out.png",
  INV_CACTUS_IN: "img/inv-cactus-in.png",
  INV_CACTUS_CLICK: "img/inv-cactus-click.png",
  SCORPIOND: "img/day-scorpion.png",
  SCORPIONN: "img/night-scorpion.png",
  SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
  SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
  SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
  SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
  HURT_SCORPION: "img/hurt-scorpion.png",
  HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
  HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
  VULTURED: "img/day-vulture.png",
  VULTUREN: "img/night-vulture.png",
  VULTURE_ATTACKD: "img/day-vulture-angry.png",
  VULTURE_ATTACKN: "img/night-vulture-angry.png",
  VULTURE_GROUNDD: "img/day-vulture-ground.png",
  VULTURE_GROUNDN: "img/night-vulture-ground.png",
  VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
  VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
  VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
  VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
  VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
  VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
  VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
  VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
  VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
  VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
  VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
  VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
  VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
  VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
  VULTURE_TAMEDD: "img/day-vulture-tamed.png",
  VULTURE_TAMEDN: "img/night-vulture-tamed.png",
  HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
  HURT_VULTURE: "img/hurt-vulture.png",
  HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
  HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
  ALOE_VERAD: "img/day-aloe-vera.png",
  ALOE_VERAN: "img/night-aloe-vera.png",
  INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
  INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
  INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
  ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
  ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
  ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
  ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
  TURBAN1D: "img/day-turban1.png",
  TURBAN1N: "img/night-turban1.png",
  TURBAN2D: "img/day-turban2.png",
  TURBAN2N: "img/night-turban2.png",
  INV_TURBAN2_OUT: "img/inv-turban2-out.png",
  INV_TURBAN2_IN: "img/inv-turban2-in.png",
  INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
  INV_TURBAN1_OUT: "img/inv-turban1-out.png",
  INV_TURBAN1_IN: "img/inv-turban1-in.png",
  INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
  PITCHFORK2D: "img/day-pitchfork2.png",
  PITCHFORK2N: "img/night-pitchfork2.png",
  INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
  INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
  INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
  INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
  INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
  PILOT_HELMETD: "img/day-pilot-helmet.png",
  PILOT_HELMETN: "img/night-pilot-helmet.png",
  INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
  INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
  INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
  SAND_WORM0D: "img/day-sandworm0.png",
  SAND_WORM1D: "img/day-sandworm1.png",
  SAND_WORM2D: "img/day-sandworm2.png",
  SAND_WORM0N: "img/night-sandworm0.png",
  SAND_WORM1N: "img/night-sandworm1.png",
  SAND_WORM2N: "img/night-sandworm2.png",
  HURT_SAND_WORM0: "img/hurt-sandworm0.png",
  HURT_SAND_WORM1: "img/hurt-sandworm1.png",
  HURT_SAND_WORM2: "img/hurt-sandworm2.png",
  INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
  EMERALD0D: "img/day-emerald0.png",
  EMERALD0N: "img/night-emerald0.png",
  EMERALD1D: "img/day-emerald1.png",
  EMERALD1N: "img/night-emerald1.png",
  EMERALD2D: "img/day-emerald2.png",
  EMERALD2N: "img/night-emerald2.png",
  INV_EMERALD: "img/inv-emerald-click.png",
  INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
  INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
  INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
  EMERALD_MACHINED: "img/day-point-machine.png",
  EMERALD_MACHINEN: "img/night-point-machine.png",
  EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
  EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
  EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
  EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
  EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
  EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
  INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
  INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
  INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
  EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
  EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
  EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
  EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
  INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
  INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
  INV_EXTRACTOR_MACHINE_STONE_CLICK: "img/inv-extractor-machine-stone-click.png",
  EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
  EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
  EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
  EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
  INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
  INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
  INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
  EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
  EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
  EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
  EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_OUT: "img/inv-extractor-machine-diamond-out.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_CLICK: "img/inv-extractor-machine-diamond-click.png",
  EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
  EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
  EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
  EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_OUT: "img/inv-extractor-machine-amethyst-out.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_IN: "img/inv-extractor-machine-amethyst-in.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_CLICK: "img/inv-extractor-machine-amethyst-click.png",
  EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
  EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
  EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
  EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
  INV_EXTRACTOR_MACHINE_REIDITE_OUT: "img/inv-extractor-machine-reidite-out.png",
  INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
  INV_EXTRACTOR_MACHINE_REIDITE_CLICK: "img/inv-extractor-machine-reidite-click.png",
  EXTRACTOR_CASES: "img/extractor-cases.png",
  HEND: "img/day-golden-hen.png",
  HENN: "img/night-golden-hen.png",
  CHICKEND: "img/day-golden-chicken.png",
  CHICKENN: "img/night-golden-chicken.png",
  HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
  HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
  LOGO_INTERFACE: "img/logo-interface.png",
  FOREST_MODE_HOVER: "img/forest-mode-hover.png",
  NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
  VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
  ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
  MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
  MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
  ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
  ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
  ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
  VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
  VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
  VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
  NORMAL_MODE_OUT: "img/normal-mode-out.png",
  NORMAL_MODE_IN: "img/normal-mode-in.png",
  NORMAL_MODE_CLICK: "img/normal-mode-click.png",
  FOREST_MODE_OUT: "img/forest-mode-out.png",
  FOREST_MODE_IN: "img/forest-mode-in.png",
  FOREST_MODE_CLICK: "img/forest-mode-click.png",
  MODE_COMMUNITY_OUT: "img/community-mode-out.png",
  MODE_COMMUNITY_IN: "img/community-mode-in.png",
  MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
  MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
  MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
  MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
  YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
  YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
  YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
  WIKI_BUTTON_OUT: "img/wiki-button-out.png",
  WIKI_BUTTON_IN: "img/wiki-button-in.png",
  WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
  TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
  TWITTER_BUTTON_IN: "img/twitter-button-in.png",
  TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
  FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
  FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
  FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
  REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
  REDDIT_BUTTON_IN: "img/reddit-button-in.png",
  REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
  DISCORD_BUTTON_OUT: "img/discord-button-out.png",
  DISCORD_BUTTON_IN: "img/discord-button-in.png",
  DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
  MERCH_BUTTON_OUT: "img/merch-button-out.png",
  MERCH_BUTTON_IN: "img/merch-button-in.png",
  MERCH_BUTTON_CLICK: "img/merch-button-click.png",
  TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
  TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
  TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
  RESTART_OUT: "img/restart-out.png",
  RESTART_IN: "img/restart-in.png",
  RESTART_CLICK: "img/restart-click.png",
  GUIDE_OUT: "img/guide-out.png",
  GUIDE_IN: "img/guide-in.png",
  GUIDE_CLICK: "img/guide-click.png",
  COPY_PASTE_OUT: "img/copy-paste-out.png",
  COPY_PASTE_IN: "img/copy-paste-in.png",
  COPY_PASTE_CLICK: "img/copy-paste-click.png",
  LINKS_BG: "img/link-buttons-bg.png",
  CHANGELOG_BOX: "img/changelog-box2.png",
  CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
  DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
  PROFILE_BUTTON_OUT: "img/profile-button-out.png",
  PROFILE_BUTTON_IN: "img/profile-button-in.png",
  PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
  LOGIN_BUTTON_OUT: "img/login-button-out.png",
  LOGIN_BUTTON_IN: "img/login-button-in.png",
  LOGIN_BUTTON_CLICK: "img/login-button-click.png",
  LOGIN_GOOGLE_OUT: "img/login-google-out.png",
  LOGIN_GOOGLE_IN: "img/login-google-in.png",
  LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
  LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
  LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
  LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
  ACCOUNT_BOX: "img/account-box.png",
  ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
  CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
  CLOSE_BUTTON_IN: "img/close-button-account-in.png",
  CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
  PLAY_BUTTON_OUT: "img/play-button-out.png",
  PLAY_BUTTON_IN: "img/play-button-in.png",
  PLAY_BUTTON_CLICK: "img/play-button-click.png",
  APP_STORE_BADGE: "img/app-store-badge.png",
  PLAY_STORE_BADGE: "img/play-store-badge.png",
  MOBILE_BOXAD: "img/mobile-boxad.png",
  MODIFY_NAME_OUT: "img/modify-name-out.png",
  MODIFY_NAME_IN: "img/modify-name-in.png",
  MODIFY_NAME_CLICK: "img/modify-name-click.png",
  YES_BUTTON_OUT: "img/yes-button-out.png",
  YES_BUTTON_IN: "img/yes-button-in.png",
  YES_BUTTON_CLICK: "img/yes-button-click.png",
  YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
  YES_300_BUTTON_IN: "img/yes-300-button-in.png",
  YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
  NO_BUTTON_OUT: "img/no-button-out.png",
  NO_BUTTON_IN: "img/no-button-in.png",
  NO_BUTTON_CLICK: "img/no-button-click.png",
  NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
  NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
  NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
  SHOP_BUTTON_OUT: "img/shop-button-out.png",
  SHOP_BUTTON_IN: "img/shop-button-in.png",
  SHOP_BUTTON_CLICK: "img/shop-button-click.png",
  LOGOUT_OUT: "img/logout-out.png",
  LOGOUT_IN: "img/logout-in.png",
  LOGOUT_CLICK: "img/logout-click.png",
  TERMS_BUTTON_OUT: "img/terms-button-out.png",
  TERMS_BUTTON_IN: "img/terms-button-in.png",
  TERMS_BUTTON_CLICK: "img/terms-button-click.png",
  TUTORIAL_ICON: "img/tutorial-icon.png",
  SKINS_ICON: "img/skins-icon.png",
  SHOP_ICON: "img/shop-icon.png",
  PAINT_ICON: "img/paint-icon.png",
  LEADERBOARD_ICON: "img/leaderboard-icon.png",
  START_ICON: "img/start-icon.png",
  PROFILE_ICON: "img/profile-icon.png",
  SERVER_ACCESS_ICON: "img/server-access-icon2.png",
  ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
  ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
  ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
  ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
  ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
  ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
  AVATAR_RESUME: "img/lvl-player.png",
  AVATAR_LVL1: "img/avatar-player.png",
  AVATAR_LVL2: "img/avatar-player1.png",
  AVATAR_LVL3: "img/avatar-player2.png",
  AVATAR_LVL4: "img/avatar-player3.png",
  AVATAR_LVL5: "img/avatar-player4.png",
  AVATAR_LVL6: "img/avatar-player5.png",
  AVATAR_LVL7: "img/avatar-player6.png",
  AVATAR_LVL8: "img/avatar-player7.png",
  AVATAR_LVL9: "img/avatar-player8.png",
  AVATAR_LVL10: "img/avatar-player9.png",
  AVATAR_LVL11: "img/avatar-player10.png",
  AVATAR_LVL12: "img/avatar-player11.png",
  AVATAR_LVL13: "img/avatar-player12.png",
  AVATAR_LVL14: "img/avatar-player13.png",
  AVATAR_LVL15: "img/avatar-player14.png",
  AVATAR_LVL16: "img/avatar-player14.png",
  AVATAR_LVL17: "img/avatar-player14.png",
  AVATAR_LVL18: "img/avatar-player14.png",
  GOLDEN_BREAD: "img/golden-bread.png",
  BUY_BREAD_OUT: "img/buy-bread-out.png",
  BUY_BREAD_IN: "img/buy-bread-in.png",
  BUY_BREAD_CLICK: "img/buy-bread-click.png",
  GAUGE: "img/gauge.png",
  SEASON_4: "img/season-4-out.png",
  SEASON_4_IN: "img/season-4-in.png",
  SEASON_4_OUT: "img/season-4-click.png",
  SEASON4_BOX: "img/season4-box.png",
  SEASON_5: "img/season-5-out.png",
  SEASON_5_IN: "img/season-5-in.png",
  SEASON_5_OUT: "img/season-5-click.png",
  SEASON5_BOX: "img/season5-box.png",
  PROFILE_BOX: "img/profile2-box.png",
  SKINS_BOX: "img/skins-box.png",
  SHOP_BOX: "img/shop-box.png",
  PRIVATE_SERVER_BOX: "img/private-server-box.png",
  SERVER_LOCATION_BOX: "img/location-box.png",
  SERVER_DURATION_BOX: "img/server-duration-box.png",
  TUTORIAL_BOX: "img/tutorial-box.png",
  LEADERBOARD_BOX: "img/leaderboard1-box.png",
  BUY_BREAD_BOX: "img/buy-breads-box.png",
  BAG_BOX: "img/bag-box.png",
  CRATE_BOX: "img/deadbox-box.png",
  BOOK_BOX: "img/book-box.png",
  ACCESSORIES_BOX: "img/accessories-box.png",
  CUSTOM_SKIN_BOX: "img/customskin-box.png",
  BAG_REMAIN_BOX: "img/bag-lasts.png",
  SERVER_REMAIN_BOX: "img/server-lasts.png",
  SERVER_ACCESS_BOX: "img/server-access-box2.png",
  LOOT_BOX: "img/lootbox-box.png",
  CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
  CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
  CHEATING_BOX: "img/cheating-box.png",
  DAILY_QUEST_BOX: "img/daily-quest-box.png",
  DAILY_5_BREAD: "img/daily-5-bread.png",
  DAILY_10_BREAD: "img/daily-10-bread.png",
  DAILY_VALID: "img/daily-valid.png",
  NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
  NORMAL_PROFILE_IN: "img/normal-profile-in.png",
  NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
  FOREST_PROFILE_OUT: "img/forest-profile-out.png",
  FOREST_PROFILE_IN: "img/forest-profile-in.png",
  FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
  ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
  ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
  ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
  VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
  VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
  VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
  TOTAL_PROFILE_OUT: "img/total-profile-out.png",
  TOTAL_PROFILE_IN: "img/total-profile-in.png",
  TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
  SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
  SEASON1_PROFILE_IN: "img/season1-profile-in.png",
  SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
  SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
  SEASON2_PROFILE_IN: "img/season2-profile-in.png",
  SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
  SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
  SEASON3_PROFILE_IN: "img/season3-profile-in.png",
  SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
  SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
  SEASON4_PROFILE_IN: "img/season4-profile-in.png",
  SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
  SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
  SEASON5_PROFILE_IN: "img/season5-profile-in.png",
  SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
  LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
  LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
  RED_LOCKED: "img/bg-red-locked.png",
  SKIN_BUTTON_OUT: "img/skin-button-out.png",
  SKIN_BUTTON_IN: "img/skin-button-in.png",
  SKIN_BUTTON_CLICK: "img/skin-button-click.png",
  ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
  ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
  ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
  BAG_BUTTON_OUT: "img/bag-button-out.png",
  BAG_BUTTON_IN: "img/bag-button-in.png",
  BAG_BUTTON_CLICK: "img/bag-button-click.png",
  BOOK_BUTTON_OUT: "img/book-button-out.png",
  BOOK_BUTTON_IN: "img/book-button-in.png",
  BOOK_BUTTON_CLICK: "img/book-button-click.png",
  CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
  CRATE_BUTTON_IN: "img/deadbox-button-in.png",
  CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
  LOOT_BUTTON_OUT: "img/loot-button-out.png",
  LOOT_BUTTON_IN: "img/loot-button-in.png",
  LOOT_BUTTON_CLICK: "img/loot-button-click.png",
  FREE_ITEM_OUT: "img/free-item-out.png",
  FREE_ITEM_IN: "img/free-item-in.png",
  FREE_ITEM_CLICK: "img/free-item-click.png",
  WOOD_ITEM_OUT: "img/wood-item-out.png",
  WOOD_ITEM_IN: "img/wood-item-in.png",
  WOOD_ITEM_CLICK: "img/wood-item-click.png",
  STONE_ITEM_OUT: "img/stone-item.png",
  STONE_ITEM_IN: "img/stone-item-in.png",
  STONE_ITEM_CLICK: "img/stone-item-click.png",
  GOLD_ITEM_OUT: "img/gold-item.png",
  GOLD_ITEM_IN: "img/gold-item-in.png",
  GOLD_ITEM_CLICK: "img/gold-item-click.png",
  DIAMOND_ITEM_OUT: "img/diamond-item.png",
  DIAMOND_ITEM_IN: "img/diamond-item-in.png",
  DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
  AMETHYST_ITEM_OUT: "img/amethyst-item.png",
  AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
  AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
  REIDITE_ITEM_OUT: "img/reidite-item.png",
  REIDITE_ITEM_IN: "img/reidite-item-in.png",
  REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
  SPECIAL_ITEM_OUT: "img/special-item-out.png",
  SPECIAL_ITEM_IN: "img/special-item-in.png",
  SPECIAL_ITEM_CLICK: "img/special-item-click.png",
  LEVEL_ITEM_OUT: "img/level-item-out.png",
  LEVEL_ITEM_IN: "img/level-item-in.png",
  LEVEL_ITEM_CLICK: "img/level-item-click.png",
  SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
  SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
  SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
  SKIN_NEXT_OUT: "img/skin-next-out.png",
  SKIN_NEXT_IN: "img/skin-next-in.png",
  SKIN_NEXT_CLICK: "img/skin-next-click.png",
  BACK_BUTTON_OUT: "img/back-button-out.png",
  BACK_BUTTON_IN: "img/back-button-in.png",
  BACK_BUTTON_CLICK: "img/back-button-click.png",
  GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
  GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
  GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
  CURRENCY1_OUT: "img/currency1-out.png",
  CURRENCY1_IN: "img/currency1-in.png",
  CURRENCY1_CLICK: "img/currency1-click.png",
  CURRENCY2_OUT: "img/currency2-out.png",
  CURRENCY2_IN: "img/currency2-in.png",
  CURRENCY2_CLICK: "img/currency2-click.png",
  CURRENCY3_OUT: "img/currency3-out.png",
  CURRENCY3_IN: "img/currency3-in.png",
  CURRENCY3_CLICK: "img/currency3-click.png",
  CURRENCY4_OUT: "img/currency4-out.png",
  CURRENCY4_IN: "img/currency4-in.png",
  CURRENCY4_CLICK: "img/currency4-click.png",
  CURRENCY5_OUT: "img/currency5-out.png",
  CURRENCY5_IN: "img/currency5-in.png",
  CURRENCY5_CLICK: "img/currency5-click.png",
  PRICE1_OUT: "img/price1-out.png",
  PRICE1_IN: "img/price1-in.png",
  PRICE1_CLICK: "img/price1-click.png",
  PRICE2_OUT: "img/price2-out.png",
  PRICE2_IN: "img/price2-in.png",
  PRICE2_CLICK: "img/price2-click.png",
  PRICE3_OUT: "img/price3-out.png",
  PRICE3_IN: "img/price3-in.png",
  PRICE3_CLICK: "img/price3-click.png",
  PRICE4_OUT: "img/price4-out.png",
  PRICE4_IN: "img/price4-in.png",
  PRICE4_CLICK: "img/price4-click.png",
  PRICE5_OUT: "img/price5-out.png",
  PRICE5_IN: "img/price5-in.png",
  PRICE5_CLICK: "img/price5-click.png",
  BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
  BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
  BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
  ATLANTA_OUT: "img/atlanta-out.png",
  ATLANTA_IN: "img/atlanta-in.png",
  ATLANTA_CLICK: "img/atlanta-click.png",
  DALLAS_OUT: "img/dallas-out.png",
  DALLAS_IN: "img/dallas-in.png",
  DALLAS_CLICK: "img/dallas-click.png",
  FREMONT_OUT: "img/fremont-out.png",
  FREMONT_IN: "img/fremont-in.png",
  FREMONT_CLICK: "img/fremont-click.png",
  NEWARK_OUT: "img/newark-out.png",
  NEWARK_IN: "img/newark-in.png",
  NEWARK_CLICK: "img/newark-click.png",
  TORONTO_OUT: "img/toronto-out.png",
  TORONTO_IN: "img/toronto-in.png",
  TORONTO_CLICK: "img/toronto-click.png",
  SINGAPORE_OUT: "img/singapore-out.png",
  SINGAPORE_IN: "img/singapore-in.png",
  SINGAPORE_CLICK: "img/singapore-click.png",
  FRANKFURT_OUT: "img/frankfurt-out.png",
  FRANKFURT_IN: "img/frankfurt-in.png",
  FRANKFURT_CLICK: "img/frankfurt-click.png",
  LONDON_OUT: "img/london-out.png",
  LONDON_IN: "img/london-in.png",
  LONDON_CLICK: "img/london-click.png",
  MUMBAI_OUT: "img/mumbai-out.png",
  MUMBAI_IN: "img/mumbai-in.png",
  MUMBAI_CLICK: "img/mumbai-click.png",
  TOKYO_OUT: "img/tokyo-out.png",
  TOKYO_IN: "img/tokyo-in.png",
  TOKYO_CLICK: "img/tokyo-click.png",
  YES_LOCATION_OUT: "img/yes-location-out.png",
  YES_LOCATION_IN: "img/yes-location-in.png",
  YES_LOCATION_CLICK: "img/yes-location-click.png",
  DAYS3_OUT: "img/3days-out.png",
  DAYS3_IN: "img/3days-in.png",
  DAYS3_CLICK: "img/3days-click.png",
  DAYS7_OUT: "img/7days-out.png",
  DAYS7_IN: "img/7days-in.png",
  DAYS7_CLICK: "img/7days-click.png",
  DAYS30_OUT: "img/30days-out.png",
  DAYS30_IN: "img/30days-in.png",
  DAYS30_CLICK: "img/30days-click.png",
  DAYS90_OUT: "img/90days-out.png",
  DAYS90_IN: "img/90days-in.png",
  DAYS90_CLICK: "img/90days-click.png",
  SPIN1: "img/spin1.png",
  SPIN2: "img/spin2.png",
  SPIN3: "img/spin3.png",
  SPIN4: "img/spin4.png",
  SPIN5: "img/spin5.png",
  SPIN6: "img/spin6.png",
  ARROW_SPIN: "img/arrow-spin.png",
  SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
  SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
  SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
  SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
  SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
  SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
  SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
  SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
  SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
  SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
  SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
  SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
  SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
  SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
  SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
  SPIN_LIGHT: "img/spin-light.png",
  TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
  TUTO_WIKI_IN: "img/tuto-wiki-in.png",
  TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
  TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
  TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
  TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
  TUTO_NEXT_OUT: "img/tuto-next-out.png",
  TUTO_NEXT_IN: "img/tuto-next-in.png",
  TUTO_NEXT_CLICK: "img/tuto-next-click.png",
  TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
  TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
  TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
  SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
  SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
  SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
  LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
  LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
  LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
  KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
  KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
  KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
  ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
  ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
  ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
  TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
  TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
  TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
  WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
  WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
  WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
  SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
  SEASON1_LEADERBOARD_IN: "img/season1-in.png",
  SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
  SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
  SEASON2_LEADERBOARD_IN: "img/season2--in.png",
  SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
  SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
  SEASON3_LEADERBOARD_IN: "img/season3-in.png",
  SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
  SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
  SEASON4_LEADERBOARD_IN: "img/season4-in.png",
  SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
  SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
  SEASON5_LEADERBOARD_IN: "img/season5-in.png",
  SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
  TOTAL_LEAD_OUT: "img/total-lead-out.png",
  TOTAL_LEAD_IN: "img/total-lead-in.png",
  TOTAL_LEAD_CLICK: "img/total-lead-click.png",
  NORMAL_LEAD_OUT: "img/normal-lead-out.png",
  NORMAL_LEAD_IN: "img/normal-lead-in.png",
  NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
  FOREST_LEAD_OUT: "img/forest-lead-out.png",
  FOREST_LEAD_IN: "img/forest-lead-in.png",
  FOREST_LEAD_CLICK: "img/forest-lead-click.png",
  VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
  VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
  VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
  ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
  ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
  ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
  LEVEL5D: "img/day-level5.png",
  LEVEL5N: "img/night-level5.png",
  LEVEL10D: "img/day-level10.png",
  LEVEL10N: "img/night-level10.png",
  LEVEL15D: "img/day-level15.png",
  LEVEL15N: "img/night-level15.png",
  LEVEL20D: "img/day-level20.png",
  LEVEL20N: "img/night-level20.png",
  LEVEL25D: "img/day-level25.png",
  LEVEL25N: "img/night-level25.png",
  LEVEL30D: "img/day-level30.png",
  LEVEL30N: "img/night-level30.png",
  LEVEL35D: "img/day-level35.png",
  LEVEL35N: "img/night-level35.png",
  LEVEL40D: "img/day-level40.png",
  LEVEL40N: "img/night-level40.png",
  LEVEL45D: "img/day-level45.png",
  LEVEL45N: "img/night-level45.png",
  LEVEL50D: "img/day-level50.png",
  LEVEL50N: "img/night-level50.png",
  LEVEL55D: "img/day-level55.png",
  LEVEL55N: "img/night-level55.png",
  LEVEL60D: "img/day-level60.png",
  LEVEL60N: "img/night-level60.png",
  SKIN_DEVASTD: "img/day-skin-devast0.png",
  SKIN_DEVASTN: "img/night-skin-devast0.png",
  HAND_DEVASTD: "img/day-hand-devaster.png",
  HAND_DEVASTN: "img/night-hand-devaster.png",
  SKIN_STARD: "img/day-skin-star0.png",
  SKIN_STARN: "img/night-skin-star0.png",
  HAND_STARD: "img/day-hand-star0.png",
  HAND_STARN: "img/night-hand-star0.png",
  SKIN_VAMPIRED: "img/day-vampire.png",
  SKIN_VAMPIREN: "img/night-vampire.png",
  HAND_VAMPIRED: "img/day-hand-vampire.png",
  HAND_VAMPIREN: "img/night-hand-vampire.png",
  SKIN_ZOMBIED: "img/day-zombie.png",
  SKIN_ZOMBIEN: "img/night-zombie.png",
  HAND_ZOMBIED: "img/day-hand-zombie.png",
  HAND_ZOMBIEN: "img/night-hand-zombie.png",
  SKIN_ROBOTD: "img/day-skin113.png",
  SKIN_ROBOTN: "img/night-skin113.png",
  HAND_ROBOTD: "img/day-hand-skin113.png",
  HAND_ROBOTN: "img/night-hand-skin113.png",
  SKIN0D: "img/day-skin0.png",
  SKIN0N: "img/night-skin0.png",
  SKIN1D: "img/day-skin1.png",
  SKIN1N: "img/night-skin1.png",
  SKIN2D: "img/day-skin2.png",
  SKIN2N: "img/night-skin2.png",
  SKIN3D: "img/day-skin3.png",
  SKIN3N: "img/night-skin3.png",
  SKIN4D: "img/day-skin4.png",
  SKIN4N: "img/night-skin4.png",
  SKIN5D: "img/day-skin5.png",
  SKIN5N: "img/night-skin5.png",
  SKIN6D: "img/day-skin6.png",
  SKIN6N: "img/night-skin6.png",
  SKIN7D: "img/day-skin7.png",
  SKIN7N: "img/night-skin7.png",
  SKIN8D: "img/day-skin8.png",
  SKIN8N: "img/night-skin8.png",
  SKIN9D: "img/day-skin9.png",
  SKIN9N: "img/night-skin9.png",
  SKIN10D: "img/day-skin10.png",
  SKIN10N: "img/night-skin10.png",
  SKIN11D: "img/day-skin11.png",
  SKIN11N: "img/night-skin11.png",
  SKIN12D: "img/day-skin12.png",
  SKIN12N: "img/night-skin12.png",
  SKIN13D: "img/day-skin13.png",
  SKIN13N: "img/night-skin13.png",
  SKIN14D: "img/day-skin14.png",
  SKIN14N: "img/night-skin14.png",
  SKIN15D: "img/day-skin15.png",
  SKIN15N: "img/night-skin15.png",
  SKIN16D: "img/day-skin16.png",
  SKIN16N: "img/night-skin16.png",
  SKIN17D: "img/day-skin17.png",
  SKIN17N: "img/night-skin17.png",
  SKIN18D: "img/day-skin18.png",
  SKIN18N: "img/night-skin18.png",
  SKIN19D: "img/day-skin19.png",
  SKIN19N: "img/night-skin19.png",
  SKIN20D: "img/day-skin20.png",
  SKIN20N: "img/night-skin20.png",
  SKIN21D: "img/day-skin21.png",
  SKIN21N: "img/night-skin21.png",
  SKIN22D: "img/day-skin22.png",
  SKIN22N: "img/night-skin22.png",
  SKIN23D: "img/day-skin23.png",
  SKIN23N: "img/night-skin23.png",
  SKIN24D: "img/day-skin24.png",
  SKIN24N: "img/night-skin24.png",
  SKIN25D: "img/day-skin25.png",
  SKIN25N: "img/night-skin25.png",
  SKIN26D: "img/day-skin26.png",
  SKIN26N: "img/night-skin26.png",
  SKIN27D: "img/day-skin27.png",
  SKIN27N: "img/night-skin27.png",
  SKIN28D: "img/day-skin28.png",
  SKIN28N: "img/night-skin28.png",
  SKIN29D: "img/day-skin29.png",
  SKIN29N: "img/night-skin29.png",
  SKIN30D: "img/day-skin30.png",
  SKIN30N: "img/night-skin30.png",
  SKIN31D: "img/day-skin31.png",
  SKIN31N: "img/night-skin31.png",
  SKIN32D: "img/day-skin32.png",
  SKIN32N: "img/night-skin32.png",
  SKIN33D: "img/day-skin33.png",
  SKIN33N: "img/night-skin33.png",
  SKIN34D: "img/day-skin34.png",
  SKIN34N: "img/night-skin34.png",
  SKIN35D: "img/day-skin35.png",
  SKIN35N: "img/night-skin35.png",
  SKIN36D: "img/day-skin36.png",
  SKIN36N: "img/night-skin36.png",
  SKIN37D: "img/day-skin37.png",
  SKIN37N: "img/night-skin37.png",
  SKIN38D: "img/day-skin38.png",
  SKIN38N: "img/night-skin38.png",
  SKIN39D: "img/day-skin39.png",
  SKIN39N: "img/night-skin39.png",
  SKIN40D: "img/day-skin40.png",
  SKIN40N: "img/night-skin40.png",
  SKIN41D: "img/day-skin41.png",
  SKIN41N: "img/night-skin41.png",
  SKIN42D: "img/day-skin42.png",
  SKIN42N: "img/night-skin42.png",
  SKIN43D: "img/day-skin43.png",
  SKIN43N: "img/night-skin43.png",
  SKIN44D: "img/day-skin44.png",
  SKIN44N: "img/night-skin44.png",
  SKIN45D: "img/day-skin45.png",
  SKIN45N: "img/night-skin45.png",
  SKIN46D: "img/day-skin46.png",
  SKIN46N: "img/night-skin46.png",
  SKIN47D: "img/day-skin47.png",
  SKIN47N: "img/night-skin47.png",
  SKIN48D: "img/day-skin48.png",
  SKIN48N: "img/night-skin48.png",
  SKIN49D: "img/day-skin49.png",
  SKIN49N: "img/night-skin49.png",
  SKIN50D: "img/day-skin50.png",
  SKIN50N: "img/night-skin50.png",
  SKIN51D: "img/day-skin51.png",
  SKIN51N: "img/night-skin51.png",
  SKIN52D: "img/day-skin52.png",
  SKIN52N: "img/night-skin52.png",
  SKIN53D: "img/day-skin53.png",
  SKIN53N: "img/night-skin53.png",
  SKIN54D: "img/day-skin54.png",
  SKIN54N: "img/night-skin54.png",
  SKIN55D: "img/day-skin55.png",
  SKIN55N: "img/night-skin55.png",
  SKIN56D: "img/day-skin56.png",
  SKIN56N: "img/night-skin56.png",
  SKIN57D: "img/day-skin57.png",
  SKIN57N: "img/night-skin57.png",
  SKIN58D: "img/day-skin58.png",
  SKIN58N: "img/night-skin58.png",
  SKIN59D: "img/day-skin59.png",
  SKIN59N: "img/night-skin59.png",
  SKIN60D: "img/day-skin60.png",
  SKIN60N: "img/night-skin60.png",
  SKIN61D: "img/day-skin61.png",
  SKIN61N: "img/night-skin61.png",
  SKIN62D: "img/day-skin62.png",
  SKIN62N: "img/night-skin62.png",
  SKIN63D: "img/day-skin63.png",
  SKIN63N: "img/night-skin63.png",
  SKIN64D: "img/day-skin64.png",
  SKIN64N: "img/night-skin64.png",
  SKIN65D: "img/day-skin65.png",
  SKIN65N: "img/night-skin65.png",
  SKIN66D: "img/day-skin66.png",
  SKIN66N: "img/night-skin66.png",
  SKIN67D: "img/day-skin67.png",
  SKIN67N: "img/night-skin67.png",
  SKIN68D: "img/day-skin68.png",
  SKIN68N: "img/night-skin68.png",
  SKIN69D: "img/day-skin69.png",
  SKIN69N: "img/night-skin69.png",
  SKIN70D: "img/day-skin70.png",
  SKIN70N: "img/night-skin70.png",
  SKIN71D: "img/day-skin71.png",
  SKIN71N: "img/night-skin71.png",
  SKIN72D: "img/day-skin72.png",
  SKIN72N: "img/night-skin72.png",
  SKIN73D: "img/day-skin73.png",
  SKIN73N: "img/night-skin73.png",
  SKIN74D: "img/day-skin74.png",
  SKIN74N: "img/night-skin74.png",
  SKIN75D: "img/day-skin75.png",
  SKIN75N: "img/night-skin75.png",
  SKIN76D: "img/day-skin76.png",
  SKIN76N: "img/night-skin76.png",
  SKIN77D: "img/day-skin77.png",
  SKIN77N: "img/night-skin77.png",
  SKIN78D: "img/day-skin78.png",
  SKIN78N: "img/night-skin78.png",
  SKIN79D: "img/day-skin79.png",
  SKIN79N: "img/night-skin79.png",
  SKIN80D: "img/day-skin80.png",
  SKIN80N: "img/night-skin80.png",
  SKIN81D: "img/day-skin81.png",
  SKIN81N: "img/night-skin81.png",
  SKIN82D: "img/day-skin82.png",
  SKIN82N: "img/night-skin82.png",
  SKIN83D: "img/day-skin83.png",
  SKIN83N: "img/night-skin83.png",
  SKIN84D: "img/day-skin84.png",
  SKIN84N: "img/night-skin84.png",
  SKIN85D: "img/day-skin85.png",
  SKIN85N: "img/night-skin85.png",
  SKIN86D: "img/day-skin86.png",
  SKIN86N: "img/night-skin86.png",
  SKIN87D: "img/day-skin87.png",
  SKIN87N: "img/night-skin87.png",
  SKIN88D: "img/day-skin88.png",
  SKIN88N: "img/night-skin88.png",
  SKIN89D: "img/day-skin89.png",
  SKIN89N: "img/night-skin89.png",
  SKIN90D: "img/day-skin90.png",
  SKIN90N: "img/night-skin90.png",
  SKIN91D: "img/day-skin91.png",
  SKIN91N: "img/night-skin91.png",
  SKIN92D: "img/day-skin92.png",
  SKIN92N: "img/night-skin92.png",
  SKIN93D: "img/day-skin93.png",
  SKIN93N: "img/night-skin93.png",
  SKIN94D: "img/day-skin94.png",
  SKIN94N: "img/night-skin94.png",
  SKIN95D: "img/day-skin95.png",
  SKIN95N: "img/night-skin95.png",
  SKIN96D: "img/day-skin96.png",
  SKIN96N: "img/night-skin96.png",
  SKIN97D: "img/day-skin97.png",
  SKIN97N: "img/night-skin97.png",
  SKIN98D: "img/day-skin98.png",
  SKIN98N: "img/night-skin98.png",
  SKIN99D: "img/day-skin99.png",
  SKIN99N: "img/night-skin99.png",
  SKIN100D: "img/day-skin100.png",
  SKIN100N: "img/night-skin100.png",
  SKIN101D: "img/day-skin101.png",
  SKIN101N: "img/night-skin101.png",
  SKIN102D: "img/day-skin102.png",
  SKIN102N: "img/night-skin102.png",
  SKIN103D: "img/day-skin103.png",
  SKIN103N: "img/night-skin103.png",
  SKIN104D: "img/day-skin104.png",
  SKIN104N: "img/night-skin104.png",
  SKIN105D: "img/day-skin105.png",
  SKIN105N: "img/night-skin105.png",
  SKIN106D: "img/day-skin106.png",
  SKIN106N: "img/night-skin106.png",
  SKIN107D: "img/day-skin107.png",
  SKIN107N: "img/night-skin107.png",
  SKIN108D: "img/day-skin108.png",
  SKIN108N: "img/night-skin108.png",
  SKIN109D: "img/day-skin109.png",
  SKIN109N: "img/night-skin109.png",
  SKIN110D: "img/day-skin110.png",
  SKIN110N: "img/night-skin110.png",
  SKIN111D: "img/day-skin111.png",
  SKIN111N: "img/night-skin111.png",
  SKIN112D: "img/day-skin112.png",
  SKIN112N: "img/night-skin112.png",
  SKIN113D: "img/day-skin113.png",
  SKIN113N: "img/night-skin113.png",
  SKIN114D: "img/day-skin114.png",
  SKIN114N: "img/night-skin114.png",
  SKIN115D: "img/day-skin115.png",
  SKIN115N: "img/night-skin115.png",
  SKIN116D: "img/day-skin116.png",
  SKIN116N: "img/night-skin116.png",
  SKIN117D: "img/day-skin117.png",
  SKIN117N: "img/night-skin117.png",
  SKIN118D: "img/day-skin118.png",
  SKIN118N: "img/night-skin118.png",
  SKIN119D: "img/day-skin119.png",
  SKIN119N: "img/night-skin119.png",
  SKIN120D: "img/day-skin120.png",
  SKIN120N: "img/night-skin120.png",
  SKIN121D: "img/day-skin121.png",
  SKIN121N: "img/night-skin121.png",
  SKIN122D: "img/day-skin122.png",
  SKIN122N: "img/night-skin122.png",
  SKIN123D: "img/day-skin123.png",
  SKIN123N: "img/night-skin123.png",
  SKIN124D: "img/day-skin124.png",
  SKIN124N: "img/night-skin124.png",
  SKIN125D: "img/day-skin125.png",
  SKIN125N: "img/night-skin125.png",
  SKIN126D: "img/day-skin126.png",
  SKIN126N: "img/night-skin126.png",
  SKIN127D: "img/day-skin127.png",
  SKIN127N: "img/night-skin127.png",
  SKIN128D: "img/day-skin128.png",
  SKIN128N: "img/night-skin128.png",
  SKIN129D: "img/day-skin129.png",
  SKIN129N: "img/night-skin129.png",
  SKIN130D: "img/day-skin130-1.png",
  SKIN130N: "img/night-skin130-1.png",
  SKIN131D: "img/day-skin131.png",
  SKIN131N: "img/night-skin131.png",
  SKIN132D: "img/day-skin132.png",
  SKIN132N: "img/night-skin132.png",
  SKIN133D: "img/day-skin133.png",
  SKIN133N: "img/night-skin133.png",
  SKIN134D: "img/day-skin134.png",
  SKIN134N: "img/night-skin134.png",
  SKIN135D: "img/day-skin135.png",
  SKIN135N: "img/night-skin135.png",
  SKIN136D: "img/day-skin136.png",
  SKIN136N: "img/night-skin136.png",
  SKIN137D: "img/day-skin137.png",
  SKIN137N: "img/night-skin137.png",
  SKIN138D: "img/day-skin138.png",
  SKIN138N: "img/night-skin138.png",
  SKIN139D: "img/day-skin139.png",
  SKIN139N: "img/night-skin139.png",
  SKIN140D: "img/day-skin140.png",
  SKIN140N: "img/night-skin140.png",
  SKIN141D: "img/day-skin141.png",
  SKIN141N: "img/night-skin141.png",
  SKIN142D: "img/day-skin142.png",
  SKIN142N: "img/night-skin142.png",
  SKIN143D: "img/day-skin143.png",
  SKIN143N: "img/night-skin143.png",
  SKIN144D: "img/day-skin144.png",
  SKIN144N: "img/night-skin144.png",
  SKIN145D: "img/day-skin145.png",
  SKIN145N: "img/night-skin145.png",
  SKIN146D: "img/day-skin146.png",
  SKIN146N: "img/night-skin146.png",
  SKIN147D: "img/day-skin147.png",
  SKIN147N: "img/night-skin147.png",
  SKIN148D: "img/day-skin148.png",
  SKIN148N: "img/night-skin148.png",
  SKIN149D: "img/day-skin149.png",
  SKIN149N: "img/night-skin149.png",
  SKIN150D: "img/day-skin150.png",
  SKIN150N: "img/night-skin150.png",
  HAND_SKIN0D: "img/day-hand-skin0.png",
  HAND_SKIN0N: "img/night-hand-skin0.png",
  HAND_SKIN1D: "img/day-hand-skin1.png",
  HAND_SKIN1N: "img/night-hand-skin1.png",
  HAND_SKIN2D: "img/day-hand-skin2.png",
  HAND_SKIN2N: "img/night-hand-skin2.png",
  HAND_SKIN3D: "img/day-hand-skin3.png",
  HAND_SKIN3N: "img/night-hand-skin3.png",
  HAND_SKIN4D: "img/day-hand-skin4.png",
  HAND_SKIN4N: "img/night-hand-skin4.png",
  HAND_SKIN5D: "img/day-hand-skin5.png",
  HAND_SKIN5N: "img/night-hand-skin5.png",
  HAND_SKIN6D: "img/day-hand-skin6.png",
  HAND_SKIN6N: "img/night-hand-skin6.png",
  HAND_SKIN7D: "img/day-hand-skin6.png",
  HAND_SKIN7N: "img/night-hand-skin6.png",
  HAND_SKIN8D: "img/day-hand-skin8.png",
  HAND_SKIN8N: "img/night-hand-skin8.png",
  HAND_SKIN9D: "img/day-hand-skin9.png",
  HAND_SKIN9N: "img/night-hand-skin9.png",
  HAND_SKIN10D: "img/day-hand-skin10.png",
  HAND_SKIN10N: "img/night-hand-skin10.png",
  HAND_SKIN11D: "img/day-hand-skin11.png",
  HAND_SKIN11N: "img/night-hand-skin11.png",
  HAND_SKIN12D: "img/day-hand-skin12.png",
  HAND_SKIN12N: "img/night-hand-skin12.png",
  HAND_SKIN13D: "img/day-hand-skin13.png",
  HAND_SKIN13N: "img/night-hand-skin13.png",
  HAND_SKIN14D: "img/day-hand-skin14.png",
  HAND_SKIN14N: "img/night-hand-skin14.png",
  HAND_SKIN15D: "img/day-hand-skin15.png",
  HAND_SKIN15N: "img/night-hand-skin15.png",
  HAND_SKIN16D: "img/day-hand-skin16.png",
  HAND_SKIN16N: "img/night-hand-skin16.png",
  HAND_SKIN17D: "img/day-hand-skin17.png",
  HAND_SKIN17N: "img/night-hand-skin17.png",
  HAND_SKIN18D: "img/day-hand-skin18.png",
  HAND_SKIN18N: "img/night-hand-skin18.png",
  HAND_SKIN19D: "img/day-hand-skin19.png",
  HAND_SKIN19N: "img/night-hand-skin19.png",
  HAND_SKIN20D: "img/day-hand-skin20.png",
  HAND_SKIN20N: "img/night-hand-skin20.png",
  HAND_SKIN21D: "img/day-hand-skin21.png",
  HAND_SKIN21N: "img/night-hand-skin21.png",
  HAND_SKIN22D: "img/day-hand-skin22.png",
  HAND_SKIN22N: "img/night-hand-skin22.png",
  HAND_SKIN23D: "img/day-hand-skin23.png",
  HAND_SKIN23N: "img/night-hand-skin23.png",
  HAND_SKIN24D: "img/day-hand-skin24.png",
  HAND_SKIN24N: "img/night-hand-skin24.png",
  HAND_SKIN25D: "img/day-hand-skin25.png",
  HAND_SKIN25N: "img/night-hand-skin25.png",
  HAND_SKIN26D: "img/day-hand-skin26.png",
  HAND_SKIN26N: "img/night-hand-skin26.png",
  HAND_SKIN27D: "img/day-hand-skin27.png",
  HAND_SKIN27N: "img/night-hand-skin27.png",
  HAND_SKIN28D: "img/day-hand-skin28.png",
  HAND_SKIN28N: "img/night-hand-skin28.png",
  HAND_SKIN29D: "img/day-hand-skin29.png",
  HAND_SKIN29N: "img/night-hand-skin29.png",
  HAND_SKIN30D: "img/day-hand-skin30.png",
  HAND_SKIN30N: "img/night-hand-skin30.png",
  HAND_SKIN31D: "img/day-hand-skin31.png",
  HAND_SKIN31N: "img/night-hand-skin31.png",
  HAND_SKIN32D: "img/day-hand-skin32.png",
  HAND_SKIN32N: "img/night-hand-skin32.png",
  HAND_SKIN33D: "img/day-hand-skin33.png",
  HAND_SKIN33N: "img/night-hand-skin33.png",
  HAND_SKIN34D: "img/day-hand-skin34.png",
  HAND_SKIN34N: "img/night-hand-skin34.png",
  HAND_SKIN35D: "img/day-hand-skin35.png",
  HAND_SKIN35N: "img/night-hand-skin35.png",
  HAND_SKIN36D: "img/day-hand-skin36.png",
  HAND_SKIN36N: "img/night-hand-skin36.png",
  HAND_SKIN37D: "img/day-hand-skin37.png",
  HAND_SKIN37N: "img/night-hand-skin37.png",
  HAND_SKIN38D: "img/day-hand-skin38.png",
  HAND_SKIN38N: "img/night-hand-skin38.png",
  HAND_SKIN39D: "img/day-hand-skin39.png",
  HAND_SKIN39N: "img/night-hand-skin39.png",
  HAND_SKIN40D: "img/day-hand-skin40.png",
  HAND_SKIN40N: "img/night-hand-skin40.png",
  HAND_SKIN41D: "img/day-hand-skin41.png",
  HAND_SKIN41N: "img/night-hand-skin41.png",
  HAND_SKIN42D: "img/day-hand-skin42.png",
  HAND_SKIN42N: "img/night-hand-skin42.png",
  HAND_SKIN43D: "img/day-hand-skin43.png",
  HAND_SKIN43N: "img/night-hand-skin43.png",
  HAND_SKIN44D: "img/day-hand-skin16.png",
  HAND_SKIN44N: "img/night-hand-skin16.png",
  HAND_SKIN45D: "img/day-hand-skin45.png",
  HAND_SKIN45N: "img/night-hand-skin45.png",
  HAND_SKIN46D: "img/day-hand-skin46.png",
  HAND_SKIN46N: "img/night-hand-skin46.png",
  HAND_SKIN47D: "img/day-hand-skin47.png",
  HAND_SKIN47N: "img/night-hand-skin47.png",
  HAND_SKIN48D: "img/day-hand-skin48.png",
  HAND_SKIN48N: "img/night-hand-skin48.png",
  HAND_SKIN49D: "img/day-hand-skin49.png",
  HAND_SKIN49N: "img/night-hand-skin49.png",
  HAND_SKIN50D: "img/day-hand-skin49.png",
  HAND_SKIN50N: "img/night-hand-skin49.png",
  HAND_SKIN51D: "img/day-hand-skin51.png",
  HAND_SKIN51N: "img/night-hand-skin51.png",
  HAND_SKIN52D: "img/day-hand-skin52.png",
  HAND_SKIN52N: "img/night-hand-skin52.png",
  HAND_SKIN53D: "img/day-hand-skin53.png",
  HAND_SKIN53N: "img/night-hand-skin53.png",
  HAND_SKIN54D: "img/day-hand-skin53.png",
  HAND_SKIN54N: "img/night-hand-skin53.png",
  HAND_SKIN55D: "img/day-hand-skin55.png",
  HAND_SKIN55N: "img/night-hand-skin55.png",
  HAND_SKIN56D: "img/day-hand-skin56.png",
  HAND_SKIN56N: "img/night-hand-skin56.png",
  HAND_SKIN57D: "img/day-hand-skin57.png",
  HAND_SKIN57N: "img/night-hand-skin57.png",
  HAND_SKIN58D: "img/day-hand-skin58.png",
  HAND_SKIN58N: "img/night-hand-skin58.png",
  HAND_SKIN59D: "img/day-hand-skin59.png",
  HAND_SKIN59N: "img/night-hand-skin59.png",
  HAND_SKIN60D: "img/day-hand-skin61.png",
  HAND_SKIN60N: "img/night-hand-skin61.png",
  HAND_SKIN61D: "img/day-hand-skin61.png",
  HAND_SKIN61N: "img/night-hand-skin61.png",
  HAND_SKIN62D: "img/day-hand-skin62.png",
  HAND_SKIN62N: "img/night-hand-skin62.png",
  HAND_SKIN63D: "img/day-hand-skin63.png",
  HAND_SKIN63N: "img/night-hand-skin63.png",
  HAND_SKIN64D: "img/day-hand-skin64.png",
  HAND_SKIN64N: "img/night-hand-skin64.png",
  HAND_SKIN65D: "img/day-hand-skin65.png",
  HAND_SKIN65N: "img/night-hand-skin65.png",
  HAND_SKIN66D: "img/day-hand-skin66.png",
  HAND_SKIN66N: "img/night-hand-skin66.png",
  HAND_SKIN67D: "img/day-hand-skin67.png",
  HAND_SKIN67N: "img/night-hand-skin67.png",
  HAND_SKIN68D: "img/day-hand-skin68.png",
  HAND_SKIN68N: "img/night-hand-skin68.png",
  HAND_SKIN69D: "img/day-hand-skin69.png",
  HAND_SKIN69N: "img/night-hand-skin69.png",
  HAND_SKIN70D: "img/day-hand-skin70.png",
  HAND_SKIN70N: "img/night-hand-skin70.png",
  HAND_SKIN71D: "img/day-hand-skin71.png",
  HAND_SKIN71N: "img/night-hand-skin71.png",
  HAND_SKIN72D: "img/day-hand-skin72.png",
  HAND_SKIN72N: "img/night-hand-skin72.png",
  HAND_SKIN73D: "img/day-hand-skin73.png",
  HAND_SKIN73N: "img/night-hand-skin73.png",
  HAND_SKIN74D: "img/day-hand-skin74.png",
  HAND_SKIN74N: "img/night-hand-skin74.png",
  HAND_SKIN75D: "img/day-hand-skin75.png",
  HAND_SKIN75N: "img/night-hand-skin75.png",
  HAND_SKIN76D: "img/day-hand-skin76.png",
  HAND_SKIN76N: "img/night-hand-skin76.png",
  HAND_SKIN77D: "img/day-hand-skin77.png",
  HAND_SKIN77N: "img/night-hand-skin77.png",
  HAND_SKIN78D: "img/day-hand-skin78.png",
  HAND_SKIN78N: "img/night-hand-skin78.png",
  HAND_SKIN79D: "img/day-hand-skin79.png",
  HAND_SKIN79N: "img/night-hand-skin79.png",
  HAND_SKIN80D: "img/day-hand-skin80.png",
  HAND_SKIN80N: "img/night-hand-skin80.png",
  HAND_SKIN81D: "img/day-hand-skin81.png",
  HAND_SKIN81N: "img/night-hand-skin81.png",
  HAND_SKIN82D: "img/day-hand-skin82.png",
  HAND_SKIN82N: "img/night-hand-skin82.png",
  HAND_SKIN83D: "img/day-hand-skin83.png",
  HAND_SKIN83N: "img/night-hand-skin83.png",
  HAND_SKIN84D: "img/day-hand-skin84.png",
  HAND_SKIN84N: "img/night-hand-skin84.png",
  HAND_SKIN85D: "img/day-hand-skin85.png",
  HAND_SKIN85N: "img/night-hand-skin85.png",
  HAND_SKIN86D: "img/day-hand-skin86.png",
  HAND_SKIN86N: "img/night-hand-skin86.png",
  HAND_SKIN87D: "img/day-hand-skin87.png",
  HAND_SKIN87N: "img/night-hand-skin87.png",
  HAND_SKIN88D: "img/day-hand-skin88.png",
  HAND_SKIN88N: "img/night-hand-skin88.png",
  HAND_SKIN89D: "img/day-hand-skin89.png",
  HAND_SKIN89N: "img/night-hand-skin89.png",
  HAND_SKIN90D: "img/day-hand-skin90.png",
  HAND_SKIN90N: "img/night-hand-skin90.png",
  HAND_SKIN91D: "img/day-hand-skin91.png",
  HAND_SKIN91N: "img/night-hand-skin91.png",
  HAND_SKIN92D: "img/day-hand-skin92.png",
  HAND_SKIN92N: "img/night-hand-skin92.png",
  HAND_SKIN93D: "img/day-hand-skin93.png",
  HAND_SKIN93N: "img/night-hand-skin93.png",
  HAND_SKIN94D: "img/day-hand-skin94.png",
  HAND_SKIN94N: "img/night-hand-skin94.png",
  HAND_SKIN95D: "img/day-hand-skin95.png",
  HAND_SKIN95N: "img/night-hand-skin95.png",
  HAND_SKIN96D: "img/day-hand-skin96.png",
  HAND_SKIN96N: "img/night-hand-skin96.png",
  HAND_SKIN97D: "img/day-hand-skin97.png",
  HAND_SKIN97N: "img/night-hand-skin97.png",
  HAND_SKIN98D: "img/day-hand-skin98.png",
  HAND_SKIN98N: "img/night-hand-skin98.png",
  HAND_SKIN99D: "img/day-hand-skin99.png",
  HAND_SKIN99N: "img/night-hand-skin99.png",
  HAND_SKIN100D: "img/day-hand-skin100.png",
  HAND_SKIN100N: "img/night-hand-skin100.png",
  HAND_SKIN101D: "img/day-hand-skin101.png",
  HAND_SKIN101N: "img/night-hand-skin101.png",
  HAND_SKIN102D: "img/day-hand-skin102.png",
  HAND_SKIN102N: "img/night-hand-skin102.png",
  HAND_SKIN103D: "img/day-hand-skin103.png",
  HAND_SKIN103N: "img/night-hand-skin103.png",
  HAND_SKIN104D: "img/day-hand-skin104.png",
  HAND_SKIN104N: "img/night-hand-skin104.png",
  HAND_SKIN105D: "img/day-hand-skin105.png",
  HAND_SKIN105N: "img/night-hand-skin105.png",
  HAND_SKIN106D: "img/day-hand-skin106.png",
  HAND_SKIN106N: "img/night-hand-skin106.png",
  HAND_SKIN107D: "img/day-hand-skin107.png",
  HAND_SKIN107N: "img/night-hand-skin107.png",
  HAND_SKIN108D: "img/day-hand-skin108.png",
  HAND_SKIN108N: "img/night-hand-skin108.png",
  HAND_SKIN109D: "img/day-hand-skin109.png",
  HAND_SKIN109N: "img/night-hand-skin109.png",
  HAND_SKIN110D: "img/day-hand-skin110.png",
  HAND_SKIN110N: "img/night-hand-skin110.png",
  HAND_SKIN111D: "img/day-hand-skin111.png",
  HAND_SKIN111N: "img/night-hand-skin111.png",
  HAND_SKIN112D: "img/day-hand-skin112.png",
  HAND_SKIN112N: "img/night-hand-skin112.png",
  HAND_SKIN113D: "img/day-hand-skin113.png",
  HAND_SKIN113N: "img/night-hand-skin113.png",
  HAND_SKIN114D: "img/day-hand-skin114.png",
  HAND_SKIN114N: "img/night-hand-skin114.png",
  HAND_SKIN115D: "img/day-hand-skin115.png",
  HAND_SKIN115N: "img/night-hand-skin115.png",
  HAND_SKIN116D: "img/day-hand-skin116.png",
  HAND_SKIN116N: "img/night-hand-skin116.png",
  HAND_SKIN117D: "img/day-hand-skin117.png",
  HAND_SKIN117N: "img/night-hand-skin117.png",
  HAND_SKIN118D: "img/day-hand-skin118.png",
  HAND_SKIN118N: "img/night-hand-skin118.png",
  HAND_SKIN119D: "img/day-hand-skin119.png",
  HAND_SKIN119N: "img/night-hand-skin119.png",
  HAND_SKIN120D: "img/day-hand-skin120.png",
  HAND_SKIN120N: "img/night-hand-skin120.png",
  HAND_SKIN121D: "img/day-hand-skin122.png",
  HAND_SKIN121N: "img/night-hand-skin122.png",
  HAND_SKIN122D: "img/day-hand-skin122.png",
  HAND_SKIN122N: "img/night-hand-skin122.png",
  HAND_SKIN123D: "img/day-hand-skin122.png",
  HAND_SKIN123N: "img/night-hand-skin122.png",
  HAND_SKIN124D: "img/day-hand-skin124.png",
  HAND_SKIN124N: "img/night-hand-skin124.png",
  HAND_SKIN125D: "img/day-hand-skin125.png",
  HAND_SKIN125N: "img/night-hand-skin125.png",
  HAND_SKIN126D: "img/day-hand-skin126.png",
  HAND_SKIN126N: "img/night-hand-skin126.png",
  HAND_SKIN127D: "img/day-hand-skin127.png",
  HAND_SKIN127N: "img/night-hand-skin127.png",
  HAND_SKIN128D: "img/day-hand-skin128.png",
  HAND_SKIN128N: "img/night-hand-skin128.png",
  HAND_SKIN129D: "img/day-hand-skin129.png",
  HAND_SKIN129N: "img/night-hand-skin129.png",
  HAND_SKIN130D: "img/day-hand-skin130.png",
  HAND_SKIN130N: "img/night-hand-skin130.png",
  HAND_SKIN131D: "img/day-hand-skin131.png",
  HAND_SKIN131N: "img/night-hand-skin131.png",
  HAND_SKIN132D: "img/day-hand-skin130.png",
  HAND_SKIN132N: "img/night-hand-skin130.png",
  HAND_SKIN133D: "img/day-hand-skin133.png",
  HAND_SKIN133N: "img/night-hand-skin133.png",
  HAND_SKIN134D: "img/day-hand-skin134.png",
  HAND_SKIN134N: "img/night-hand-skin134.png",
  HAND_SKIN135D: "img/day-hand-skin135.png",
  HAND_SKIN135N: "img/night-hand-skin135.png",
  HAND_SKIN136D: "img/day-hand-skin136.png",
  HAND_SKIN136N: "img/night-hand-skin136.png",
  HAND_SKIN137D: "img/day-hand-skin137.png",
  HAND_SKIN137N: "img/night-hand-skin137.png",
  HAND_SKIN138D: "img/day-hand-skin138.png",
  HAND_SKIN138N: "img/night-hand-skin138.png",
  HAND_SKIN139D: "img/day-hand-skin139.png",
  HAND_SKIN139N: "img/night-hand-skin139.png",
  HAND_SKIN140D: "img/day-hand-skin140.png",
  HAND_SKIN140N: "img/night-hand-skin140.png",
  HAND_SKIN141D: "img/day-hand-skin141.png",
  HAND_SKIN141N: "img/night-hand-skin141.png",
  HAND_SKIN142D: "img/day-hand-skin142.png",
  HAND_SKIN142N: "img/night-hand-skin142.png",
  HAND_SKIN143D: "img/day-hand-skin143.png",
  HAND_SKIN143N: "img/night-hand-skin143.png",
  HAND_SKIN144D: "img/day-hand-skin144.png",
  HAND_SKIN144N: "img/night-hand-skin144.png",
  HAND_SKIN145D: "img/day-hand-skin145.png",
  HAND_SKIN145N: "img/night-hand-skin145.png",
  HAND_SKIN146D: "img/day-hand-skin146.png",
  HAND_SKIN146N: "img/night-hand-skin146.png",
  HAND_SKIN147D: "img/day-hand-skin147.png",
  HAND_SKIN147N: "img/night-hand-skin147.png",
  HAND_SKIN148D: "img/day-hand-skin148.png",
  HAND_SKIN148N: "img/night-hand-skin148.png",
  HAND_SKIN149D: "img/day-hand-skin149.png",
  HAND_SKIN149N: "img/night-hand-skin149.png",
  HAND_SKIN150D: "img/day-hand-skin150.png",
  HAND_SKIN150N: "img/night-hand-skin150.png",
  BAG_STARD: "img/day-bag-star0.png",
  BAG_STARN: "img/night-bag-star0.png",
  BAG0D: "img/day-bag0.png",
  BAG0N: "img/night-bag0.png",
  BAG1D: "img/day-bag1.png",
  BAG1N: "img/night-bag1.png",
  BAG2D: "img/day-bag2.png",
  BAG2N: "img/night-bag2.png",
  BAG3D: "img/day-bag3.png",
  BAG3N: "img/night-bag3.png",
  BAG4D: "img/day-bag4.png",
  BAG4N: "img/night-bag4.png",
  BAG5D: "img/day-bag5.png",
  BAG5N: "img/night-bag5.png",
  BAG6D: "img/day-bag6.png",
  BAG6N: "img/night-bag6.png",
  BAG7D: "img/day-bag7.png",
  BAG7N: "img/night-bag7.png",
  BAG8D: "img/day-bag8.png",
  BAG8N: "img/night-bag8.png",
  BAG9D: "img/day-bag9.png",
  BAG9N: "img/night-bag9.png",
  BAG10D: "img/day-bag10.png",
  BAG10N: "img/night-bag10.png",
  BAG11D: "img/day-bag11.png",
  BAG11N: "img/night-bag11.png",
  BAG13D: "img/day-bag13.png",
  BAG13N: "img/night-bag13.png",
  BAG14D: "img/day-bag14.png",
  BAG14N: "img/night-bag14.png",
  BAG16D: "img/day-bag16.png",
  BAG16N: "img/night-bag16.png",
  BAG17D: "img/day-bag17.png",
  BAG17N: "img/night-bag17.png",
  BAG18D: "img/day-bag18.png",
  BAG18N: "img/night-bag18.png",
  BAG19D: "img/day-bag19.png",
  BAG19N: "img/night-bag19.png",
  BAG20D: "img/day-bag20.png",
  BAG20N: "img/night-bag20.png",
  BAG21D: "img/day-bag21.png",
  BAG21N: "img/night-bag21.png",
  BAG22D: "img/day-bag22.png",
  BAG22N: "img/night-bag22.png",
  BAG23D: "img/day-bag23.png",
  BAG23N: "img/night-bag23.png",
  BAG24D: "img/day-bag24.png",
  BAG24N: "img/night-bag24.png",
  BAG25D: "img/day-bag25.png",
  BAG25N: "img/night-bag25.png",
  BAG26D: "img/day-bag26.png",
  BAG26N: "img/night-bag26.png",
  BAG27D: "img/day-bag27.png",
  BAG27N: "img/night-bag27.png",
  BAG28D: "img/day-bag28.png",
  BAG28N: "img/night-bag28.png",
  BAG29D: "img/day-bag29.png",
  BAG29N: "img/night-bag29.png",
  BAG30D: "img/day-bag30.png",
  BAG30N: "img/night-bag30.png",
  BAG31D: "img/day-bag31.png",
  BAG31N: "img/night-bag31.png",
  BAG32D: "img/day-bag32.png",
  BAG32N: "img/night-bag32.png",
  BAG33D: "img/day-bag33.png",
  BAG33N: "img/night-bag33.png",
  BAG34D: "img/day-bag34.png",
  BAG34N: "img/night-bag34.png",
  BAG35D: "img/day-bag35.png",
  BAG35N: "img/night-bag35.png",
  BAG36D: "img/day-bag36.png",
  BAG36N: "img/night-bag36.png",
  BAG37D: "img/day-bag37.png",
  BAG37N: "img/night-bag37.png",
  BAG38D: "img/day-bag38.png",
  BAG38N: "img/night-bag38.png",
  BAG39D: "img/day-bag39.png",
  BAG39N: "img/night-bag39.png",
  BAG40D: "img/day-bag40.png",
  BAG40N: "img/night-bag40.png",
  BAG41D: "img/day-bag41.png",
  BAG41N: "img/night-bag41.png",
  BAG42D: "img/day-bag42.png",
  BAG42N: "img/night-bag42.png",
  BAG43D: "img/day-bag43.png",
  BAG43N: "img/night-bag43.png",
  BAG44D: "img/day-bag44.png",
  BAG44N: "img/night-bag44.png",
  BAG45D: "img/day-bag45.png",
  BAG45N: "img/night-bag45.png",
  BAG46D: "img/day-bag46.png",
  BAG46N: "img/night-bag46.png",
  BAG47D: "img/day-bag47.png",
  BAG47N: "img/night-bag47.png",
  BAG48D: "img/day-bag48.png",
  BAG48N: "img/night-bag48.png",
  BAG49D: "img/day-bag49.png",
  BAG49N: "img/night-bag49.png",
  BAG50D: "img/day-bag50.png",
  BAG50N: "img/night-bag50.png",
  BAG51D: "img/day-bag51.png",
  BAG51N: "img/night-bag51.png",
  BAG52D: "img/day-bag52.png",
  BAG52N: "img/night-bag52.png",
  BAG53D: "img/day-bag53.png",
  BAG53N: "img/night-bag53.png",
  BAG54D: "img/day-bag54.png",
  BAG54N: "img/night-bag54.png",
  BAG55D: "img/day-bag55.png",
  BAG55N: "img/night-bag55.png",
  BAG56D: "img/day-bag56.png",
  BAG56N: "img/night-bag56.png",
  BAG57D: "img/day-bag57.png",
  BAG57N: "img/night-bag57.png",
  BAG58D: "img/day-bag58.png",
  BAG58N: "img/night-bag58.png",
  BAG59D: "img/day-bag59.png",
  BAG59N: "img/night-bag59.png",
  BAG60D: "img/day-bag60.png",
  BAG60N: "img/night-bag60.png",
  BAG61D: "img/day-bag61.png",
  BAG61N: "img/night-bag61.png",
  BAG62D: "img/day-bag62.png",
  BAG62N: "img/night-bag62.png",
  BAG63D: "img/day-bag63.png",
  BAG63N: "img/night-bag63.png",
  BAG64D: "img/day-bag64.png",
  BAG64N: "img/night-bag64.png",
  BAG65D: "img/day-bag65.png",
  BAG65N: "img/night-bag65.png",
  BAG66D: "img/day-bag66.png",
  BAG66N: "img/night-bag66.png",
  BAG67D: "img/day-bag67.png",
  BAG67N: "img/night-bag67.png",
  BAG68D: "img/day-bag68.png",
  BAG68N: "img/night-bag68.png",
  ACCESSORY0D: "img/day-accessory0.png",
  ACCESSORY17D: "img/day-accessory0-pacques.png",
  ACCESSORY17N: "img/night-accessory0-pacques.png",
  ACCESSORY13D: "img/day-accessory13.png",
  ACCESSORY13N: "img/night-accessory13.png",
  ACCESSORY14D: "img/day-accessory14.png",
  ACCESSORY14N: "img/night-accessory14.png",
  ACCESSORY15D: "img/day-accessory15.png",
  ACCESSORY15N: "img/night-accessory15.png",
  ACCESSORY16D: "img/day-accessory16.png",
  ACCESSORY16N: "img/night-accessory16.png",
  ACCESSORY18D: "img/day-accessory17.png",
  ACCESSORY18N: "img/day-accessory17.png",
  ACCESSORY19D: "img/day-accessory19.png",
  ACCESSORY19N: "img/night-accessory19.png",
  ACCESSORY20D: "img/day-accessory20.png",
  ACCESSORY20N: "img/night-accessory20.png",
  ACCESSORY21D: "img/day-accessory21.png",
  ACCESSORY21N: "img/night-accessory21.png",
  ACCESSORY22D: "img/day-accessory22.png",
  ACCESSORY22N: "img/night-accessory22.png",
  ACCESSORY23D: "img/day-accessory23.png",
  ACCESSORY23N: "img/night-accessory23.png",
  ACCESSORY24D: "img/day-accessory24.png",
  ACCESSORY24N: "img/night-accessory24.png",
  ACCESSORY25D: "img/day-accessory25.png",
  ACCESSORY25N: "img/night-accessory25.png",
  ACCESSORY26D: "img/day-accessory26.png",
  ACCESSORY26N: "img/night-accessory26.png",
  ACCESSORY27D: "img/day-accessory27.png",
  ACCESSORY27N: "img/night-accessory27.png",
  ACCESSORY28D: "img/day-accessory18.png",
  ACCESSORY28N: "img/night-accessory18.png",
  ACCESSORY29D: "img/day-accessory29.png",
  ACCESSORY29N: "img/night-accessory29.png",
  ACCESSORY30D: "img/day-accessory30.png",
  ACCESSORY30N: "img/night-accessory30.png",
  ACCESSORY31D: "img/day-accessory31.png",
  ACCESSORY31N: "img/night-accessory31.png",
  ACCESSORY32D: "img/day-accessory32.png",
  ACCESSORY32N: "img/night-accessory32.png",
  ACCESSORY33D: "img/day-accessory33.png",
  ACCESSORY33N: "img/night-accessory33.png",
  ACCESSORY34D: "img/day-accessory34.png",
  ACCESSORY34N: "img/night-accessory34.png",
  ACCESSORY35D: "img/day-accessory35.png",
  ACCESSORY35N: "img/night-accessory35.png",
  ACCESSORY36D: "img/day-accessory28.png",
  ACCESSORY36N: "img/night-accessory28.png",
  ACCESSORY37D: "img/day-accessory36.png",
  ACCESSORY37N: "img/night-accessory36.png",
  ACCESSORY38D: "img/day-accessory37.png",
  ACCESSORY38N: "img/night-accessory37.png",
  ACCESSORY39D: "img/day-accessory39.png",
  ACCESSORY39N: "img/night-accessory39.png",
  ACCESSORY40D: "img/day-accessory40.png",
  ACCESSORY40N: "img/night-accessory40.png",
  ACCESSORY41D: "img/day-accessory41.png",
  ACCESSORY41N: "img/night-accessory41.png",
  ACCESSORY42D: "img/day-accessory42.png",
  ACCESSORY42N: "img/night-accessory42.png",
  ACCESSORY43D: "img/day-accessory43.png",
  ACCESSORY43N: "img/night-accessory43.png",
  ACCESSORY44D: "img/day-accessory44.png",
  ACCESSORY44N: "img/night-accessory44.png",
  ACCESSORY45D: "img/day-accessory38.png",
  ACCESSORY45N: "img/night-accessory38.png",
  ACCESSORY46D: "img/day-accessory46.png",
  ACCESSORY46N: "img/night-accessory46.png",
  ACCESSORY47D: "img/day-accessory47.png",
  ACCESSORY47N: "img/night-accessory47.png",
  ACCESSORY48D: "img/day-accessory48.png",
  ACCESSORY48N: "img/night-accessory48.png",
  ACCESSORY49D: "img/day-accessory49.png",
  ACCESSORY49N: "img/night-accessory49.png",
  ACCESSORY50D: "img/day-accessory45.png",
  ACCESSORY50N: "img/night-accessory45.png",
  ACCESSORY51D: "img/day-accessory50.png",
  ACCESSORY51N: "img/night-accessory50.png",
  ACCESSORY52D: "img/day-accessory51.png",
  ACCESSORY52N: "img/night-accessory51.png",
  ACCESSORY53D: "img/day-accessory52.png",
  ACCESSORY53N: "img/night-accessory52.png",
  ACCESSORY54D: "img/day-accessory53.png",
  ACCESSORY54N: "img/night-accessory53.png",
  ACCESSORY55D: "img/day-accessory54.png",
  ACCESSORY55N: "img/night-accessory54.png",
  ACCESSORY56D: "img/day-accessory55.png",
  ACCESSORY56N: "img/night-accessory55.png",
  ACCESSORY57D: "img/day-accessory56.png",
  ACCESSORY57N: "img/night-accessory56.png",
  ACCESSORY58D: "img/day-accessory57.png",
  ACCESSORY58N: "img/night-accessory57.png",
  ACCESSORY59D: "img/day-accessory58.png",
  ACCESSORY59N: "img/night-accessory58.png",
  ACCESSORY60D: "img/day-accessory59.png",
  ACCESSORY60N: "img/night-accessory59.png",
  ACCESSORY61D: "img/day-accessory60.png",
  ACCESSORY61N: "img/night-accessory60.png",
  ACCESSORY62D: "img/day-accessory61.png",
  ACCESSORY62N: "img/night-accessory61.png",
  ACCESSORY63D: "img/day-accessory62.png",
  ACCESSORY63N: "img/night-accessory62.png",
  ACCESSORY64D: "img/day-accessory63.png",
  ACCESSORY64N: "img/night-accessory63.png",
  ACCESSORY65D: "img/day-accessory64.png",
  ACCESSORY65N: "img/night-accessory64.png",
  ACCESSORY66D: "img/day-accessory65.png",
  ACCESSORY66N: "img/night-accessory65.png",
  ACCESSORY67D: "img/day-accessory66.png",
  ACCESSORY67N: "img/night-accessory66.png",
  ACCESSORY68D: "img/day-accessory67.png",
  ACCESSORY68N: "img/night-accessory67.png",
  ACCESSORY69D: "img/day-accessory68.png",
  ACCESSORY69N: "img/night-accessory68.png",
  ACCESSORY70D: "img/day-accessory69.png",
  ACCESSORY70N: "img/night-accessory69.png",
  ACCESSORY71D: "img/day-accessory70.png",
  ACCESSORY71N: "img/night-accessory70.png",
  ACCESSORY72D: "img/day-accessory71.png",
  ACCESSORY72N: "img/night-accessory71.png",
  ACCESSORY73D: "img/day-accessory72.png",
  ACCESSORY73N: "img/night-accessory72.png",
  ACCESSORY74D: "img/day-accessory73.png",
  ACCESSORY74N: "img/night-accessory73.png",
  ACCESSORY75D: "img/day-accessory74.png",
  ACCESSORY75N: "img/night-accessory74.png",
  ACCESSORY76D: "img/day-accessory75.png",
  ACCESSORY76N: "img/night-accessory75.png",
  ACCESSORY77D: "img/day-accessory76.png",
  ACCESSORY77N: "img/night-accessory76.png",
  ACCESSORY78D: "img/day-accessory77.png",
  ACCESSORY78N: "img/night-accessory77.png",
  ACCESSORY79D: "img/day-accessory78.png",
  ACCESSORY79N: "img/night-accessory78.png",
  ACCESSORY80D: "img/day-accessory79.png",
  ACCESSORY80N: "img/night-accessory79.png",
  ACCESSORY81D: "img/day-accessory80.png",
  ACCESSORY81N: "img/night-accessory80.png",
  ACCESSORY82D: "img/day-accessory81.png",
  ACCESSORY82N: "img/night-accessory81.png",
  BOOK0D: "img/day-book0.png",
  BOOK0N: "img/night-book0.png",
  BOOK1D: "img/day-book1.png",
  BOOK1N: "img/night-book1.png",
  BOOK2D: "img/day-book2.png",
  BOOK2N: "img/night-book2.png",
  BOOK3D: "img/day-book3.png",
  BOOK3N: "img/night-book3.png",
  BOOK4D: "img/day-book4.png",
  BOOK4N: "img/night-book4.png",
  BOOK5D: "img/day-book5.png",
  BOOK5N: "img/night-book5.png",
  BOOK6D: "img/day-book6.png",
  BOOK6N: "img/night-book6.png",
  BOOK7D: "img/day-book7.png",
  BOOK7N: "img/night-book7.png",
  BOOK8D: "img/day-book8.png",
  BOOK8N: "img/night-book8.png",
  BOOK9D: "img/day-book9.png",
  BOOK9N: "img/night-book9.png",
  BOOK10D: "img/day-book10.png",
  BOOK10N: "img/night-book10.png",
  BOOK11D: "img/day-book11.png",
  BOOK11N: "img/night-book11.png",
  BOOK12D: "img/day-book12.png",
  BOOK12N: "img/night-book12.png",
  BOOK13D: "img/day-book13.png",
  BOOK13N: "img/night-book13.png",
  BOOK14D: "img/day-book14.png",
  BOOK14N: "img/night-book14.png",
  BOOK15D: "img/day-book15.png",
  BOOK15N: "img/night-book15.png",
  BOOK16D: "img/day-book16.png",
  BOOK16N: "img/night-book16.png",
  BOOK17D: "img/day-book17.png",
  BOOK17N: "img/night-book17.png",
  BOOK18D: "img/day-book18.png",
  BOOK18N: "img/night-book18.png",
  BOOK19D: "img/day-book19.png",
  BOOK19N: "img/night-book19.png",
  BOOK20D: "img/day-book20.png",
  BOOK20N: "img/night-book20.png",
  BOOK21D: "img/day-book21.png",
  BOOK21N: "img/night-book21.png",
  BOOK22D: "img/day-book22.png",
  BOOK22N: "img/night-book22.png",
  BOOK23D: "img/day-book23.png",
  BOOK23N: "img/night-book23.png",
  BOOK24D: "img/day-book24.png",
  BOOK24N: "img/night-book24.png",
  BOOK25D: "img/day-book25.png",
  BOOK25N: "img/night-book25.png",
  BOOK26D: "img/day-book26.png",
  BOOK26N: "img/night-book26.png",
  BOOK27D: "img/day-book27.png",
  BOOK27N: "img/night-book27.png",
  BOOK28D: "img/day-book28.png",
  BOOK28N: "img/night-book28.png",
  BOOK29D: "img/day-book29.png",
  BOOK29N: "img/night-book29.png",
  BOOK30D: "img/day-book30.png",
  BOOK30N: "img/night-book30.png",
  BOOK31D: "img/day-book31.png",
  BOOK31N: "img/night-book31.png",
  BOOK32D: "img/day-book32.png",
  BOOK32N: "img/night-book32.png",
  BOOK33D: "img/day-book33.png",
  BOOK33N: "img/night-book33.png",
  BOOK34D: "img/day-book34.png",
  BOOK34N: "img/night-book34.png",
  BOOK35D: "img/day-book35.png",
  BOOK35N: "img/night-book35.png",
  BOOK36D: "img/day-book36.png",
  BOOK36N: "img/night-book36.png",
  BOOK37D: "img/day-book37.png",
  BOOK37N: "img/night-book37.png",
  BOOK38D: "img/day-book38.png",
  BOOK38N: "img/night-book38.png",
  BOOK39D: "img/day-book39.png",
  BOOK39N: "img/night-book39.png",
  BOOK40D: "img/day-book40.png",
  BOOK40N: "img/night-book40.png",
  BOOK41D: "img/day-book41.png",
  BOOK41N: "img/night-book41.png",
  BOOK42D: "img/day-book42.png",
  BOOK42N: "img/night-book42.png",
  BOOK43D: "img/day-book43.png",
  BOOK43N: "img/night-book43.png",
  BOOK44D: "img/day-book44.png",
  BOOK44N: "img/night-book44.png",
  BOOK45D: "img/day-book45.png",
  BOOK45N: "img/night-book45.png",
  CRATE1D: "img/day-crate1.png",
  CRATE1N: "img/night-crate1.png",
  CRATE2D: "img/day-crate2.png",
  CRATE2N: "img/night-crate2.png",
  CRATE3D: "img/day-crate3.png",
  CRATE3N: "img/night-crate3.png",
  CRATE4D: "img/day-crate4.png",
  CRATE4N: "img/night-crate4.png",
  CRATE5D: "img/day-crate5.png",
  CRATE5N: "img/night-crate5.png",
  CRATE6D: "img/day-crate6.png",
  CRATE6N: "img/night-crate6.png",
  CRATE7D: "img/day-crate7.png",
  CRATE7N: "img/night-crate7.png",
  CRATE8D: "img/day-crate8.png",
  CRATE8N: "img/night-crate8.png",
  CRATE9D: "img/day-crate9.png",
  CRATE9N: "img/night-crate9.png",
  CRATE10D: "img/day-crate10.png",
  CRATE10N: "img/night-crate10.png",
  CRATE11D: "img/day-crate11.png",
  CRATE11N: "img/night-crate11.png",
  CRATE12D: "img/day-crate12.png",
  CRATE12N: "img/night-crate12.png",
  CRATE13D: "img/day-crate13.png",
  CRATE13N: "img/night-crate13.png",
  CRATE14D: "img/day-crate14.png",
  CRATE14N: "img/night-crate14.png",
  CRATE15D: "img/day-crate15.png",
  CRATE15N: "img/night-crate15.png",
  CRATE16D: "img/day-crate16.png",
  CRATE16N: "img/night-crate16.png",
  CRATE17D: "img/day-crate17.png",
  CRATE17N: "img/night-crate17.png",
  CRATE18D: "img/day-crate18.png",
  CRATE18N: "img/night-crate18.png",
  CRATE19D: "img/day-crate19.png",
  CRATE19N: "img/night-crate19.png",
  CRATE20D: "img/day-crate20.png",
  CRATE20N: "img/night-crate20.png",
  CRATE21D: "img/day-crate21.png",
  CRATE21N: "img/night-crate21.png",
  CRATE22D: "img/day-crate22.png",
  CRATE22N: "img/night-crate22.png",
  CRATE23D: "img/day-crate23.png",
  CRATE23N: "img/night-crate23.png",
  CRATE24D: "img/day-crate24.png",
  CRATE24N: "img/night-crate24.png",
  CRATE25D: "img/day-crate25.png",
  CRATE25N: "img/night-crate25.png",
  CRATE26D: "img/day-crate26.png",
  CRATE26N: "img/night-crate26.png",
  CRATE27D: "img/day-crate27.png",
  CRATE27N: "img/night-crate27.png",
  CRATE28D: "img/day-crate28.png",
  CRATE28N: "img/night-crate28.png",
  CRATE29D: "img/day-crate29.png",
  CRATE29N: "img/night-crate29.png",
  CRATE30D: "img/day-crate30.png",
  CRATE30N: "img/night-crate30.png",
  CRATE31D: "img/day-crate31.png",
  CRATE31N: "img/night-crate31.png",
  CRATE32D: "img/day-crate32.png",
  CRATE32N: "img/night-crate32.png",
  CRATE33D: "img/day-crate33.png",
  CRATE33N: "img/night-crate33.png",
  CRATE34D: "img/day-crate34.png",
  CRATE34N: "img/night-crate34.png",
  CRATE35D: "img/day-crate35.png",
  CRATE35N: "img/night-crate35.png",
  CRATE36D: "img/day-crate36.png",
  CRATE36N: "img/night-crate36.png",
  CRATE37D: "img/day-crate37.png",
  CRATE37N: "img/night-crate37.png",
  CRATE38D: "img/day-crate38.png",
  CRATE38N: "img/night-crate38.png",
  CRATE39D: "img/day-crate39.png",
  CRATE39N: "img/night-crate39.png",
  CRATE40D: "img/day-crate40.png",
  CRATE40N: "img/night-crate40.png",
  CRATE41D: "img/day-crate41.png",
  CRATE41N: "img/night-crate41.png",
  CRATE42D: "img/day-crate42.png",
  CRATE42N: "img/night-crate42.png",
  CRATE43D: "img/day-crate43.png",
  CRATE43N: "img/night-crate43.png",
  CRATE44D: "img/day-crate44.png",
  CRATE44N: "img/night-crate44.png",
  CRATE45D: "img/day-crate45.png",
  CRATE45N: "img/night-crate45.png",
  CRATE46D: "img/day-crate46.png",
  CRATE46N: "img/night-crate46.png",
  CRATE47D: "img/day-crate47.png",
  CRATE47N: "img/night-crate47.png",
  CRATE48D: "img/day-crate48.png",
  CRATE48N: "img/night-crate48.png",
  CRATE49D: "img/day-crate49.png",
  CRATE49N: "img/night-crate49.png",
  CRATE50D: "img/day-crate50.png",
  CRATE50N: "img/night-crate50.png",
  CRATE51D: "img/day-crate51.png",
  CRATE51N: "img/night-crate51.png",
  CRATE52D: "img/day-crate52.png",
  CRATE52N: "img/night-crate52.png",
  CRATE53D: "img/day-crate53.png",
  CRATE53N: "img/night-crate53.png",
  CRATE54D: "img/day-crate54.png",
  CRATE54N: "img/night-crate54.png",
  CRATE55D: "img/day-crate55.png",
  CRATE55N: "img/night-crate55.png",
  CRATE56D: "img/day-crate56.png",
  CRATE56N: "img/night-crate56.png",
  CRATE57D: "img/day-crate57.png",
  CRATE57N: "img/night-crate57.png",
  CRATE58D: "img/day-crate58.png",
  CRATE58N: "img/night-crate58.png",
  CRATE59D: "img/day-crate59.png",
  CRATE59N: "img/night-crate59.png",
  CRATE60D: "img/day-crate60.png",
  CRATE60N: "img/night-crate60.png",
  CRATE61D: "img/day-crate61.png",
  CRATE61N: "img/night-crate61.png",
  CRATE62D: "img/day-crate62.png",
  CRATE62N: "img/night-crate62.png",
  CRATE63D: "img/day-crate63.png",
  CRATE63N: "img/night-crate63.png",
  CRATE64D: "img/day-crate64.png",
  CRATE64N: "img/night-crate64.png",
  CRATE65D: "img/day-crate65.png",
  CRATE65N: "img/night-crate65.png",
  CRATE66D: "img/day-crate66.png",
  CRATE66N: "img/night-crate66.png",
  CRATE67D: "img/day-crate67.png",
  CRATE67N: "img/night-crate67.png",
  CRATE68D: "img/day-crate68.png",
  CRATE68N: "img/night-crate68.png",
  CRATE69D: "img/day-crate69.png",
  CRATE69N: "img/night-crate69.png",
  CRATE70D: "img/day-crate70.png",
  CRATE70N: "img/night-crate70.png",
  CRATE71D: "img/day-crate71.png",
  CRATE71N: "img/night-crate71.png",
  CRATE72D: "img/day-crate72.png",
  CRATE72N: "img/night-crate72.png",
  DECORATION_0D: "img/day-herb0.png",
  DECORATION_1D: "img/day-herb1.png",
  DECORATION_2D: "img/day-herb2.png",
  DECORATION_3D: "img/day-herb3.png",
  DECORATION_4D: "img/day-herb4.png",
  DECORATION_5D: "img/day-herb5.png",
  DECORATION_6D: "img/day-herb6.png",
  DECORATION_7D: "img/day-herb7.png",
  DECORATION_8D: "img/day-herb8.png",
  DECORATION_9D: "img/day-herb9.png",
  DECORATION_10D: "img/day-herb10.png",
  DECORATION_11D: "img/day-herb11.png",
  DECORATION_12D: "img/day-herb12.png",
  DECORATION_13D: "img/day-herb13.png",
  DECORATION_14D: "img/day-herb14.png",
  DECORATION_15D: "img/day-herb15.png",
  DECORATION_16D: "img/day-shell0.png",
  DECORATION_17D: "img/day-shell1.png",
  DECORATION_18D: "img/day-shell2.png",
  DECORATION_19D: "img/day-leaf1.png",
  DECORATION_20D: "img/day-leaf2.png",
  DECORATION_21D: "img/day-leaf3.png",
  DECORATION_22D: "img/day-leaf4.png",
  DECORATION_23D: "img/day-leaf5.png",
  DECORATION_24D: "img/day-leaf6.png",
  DECORATION_25D: "img/day-leaf7.png",
  DECORATION_26D: "img/day-leaf8.png",
  DECORATION_27D: "img/day-rock0.png",
  DECORATION_28D: "img/day-rock1.png",
  DECORATION_29D: "img/day-rock2.png",
  DECORATION_30D: "img/day-rock3.png",
  DECORATION_31D: "img/day-rock4.png",
  DECORATION_32D: "img/day-rock5.png",
  DECORATION_33D: "img/day-rock6.png",
  DECORATION_34D: "img/day-rock7.png",
  DECORATION_35D: "img/day-rock8.png",
  DECORATION_36D: "img/day-rock9.png",
  DECORATION_37D: "img/day-rock10.png",
  DECORATION_38D: "img/day-rock11.png",
  DECORATION_39D: "img/day-rock12.png",
  DECORATION_40D: "img/day-rock13.png",
  DECORATION_41D: "img/day-flower1.png",
  DECORATION_42D: "img/day-flower2.png",
  DECORATION_43D: "img/day-flower3.png",
  DECORATION_44D: "img/day-flower4.png",
  DECORATION_45D: "img/day-flower5.png",
  DECORATION_46D: "img/day-flower6.png",
  DECORATION_47D: "img/day-flower7.png",
  DECORATION_48D: "img/day-flower8.png",
  DECORATION_49D: "img/day-flower9.png",
  DECORATION_50D: "img/day-herb16.png",
  DECORATION_51D: "img/day-herb17.png",
  DECORATION_52D: "img/day-herb18.png",
  DECORATION_53D: "img/day-herb19.png",
  DECORATION_54D: "img/day-herb20.png",
  DECORATION_55D: "img/day-herb21.png",
  DECORATION_0N: "img/night-herb0.png",
  DECORATION_1N: "img/night-herb1.png",
  DECORATION_2N: "img/night-herb2.png",
  DECORATION_3N: "img/night-herb3.png",
  DECORATION_4N: "img/night-herb4.png",
  DECORATION_5N: "img/night-herb5.png",
  DECORATION_6N: "img/night-herb6.png",
  DECORATION_7N: "img/night-herb7.png",
  DECORATION_8N: "img/night-herb8.png",
  DECORATION_9N: "img/night-herb9.png",
  DECORATION_10N: "img/night-herb10.png",
  DECORATION_11N: "img/night-herb11.png",
  DECORATION_12N: "img/night-herb12.png",
  DECORATION_13N: "img/night-herb13.png",
  DECORATION_14N: "img/night-herb14.png",
  DECORATION_15N: "img/night-herb15.png",
  DECORATION_16N: "img/night-shell0.png",
  DECORATION_17N: "img/night-shell1.png",
  DECORATION_18N: "img/night-shell2.png",
  DECORATION_19N: "img/night-leaf1.png",
  DECORATION_20N: "img/night-leaf2.png",
  DECORATION_21N: "img/night-leaf3.png",
  DECORATION_22N: "img/night-leaf4.png",
  DECORATION_23N: "img/night-leaf5.png",
  DECORATION_24N: "img/night-leaf6.png",
  DECORATION_25N: "img/night-leaf7.png",
  DECORATION_26N: "img/night-leaf8.png",
  DECORATION_27N: "img/night-rock0.png",
  DECORATION_28N: "img/night-rock1.png",
  DECORATION_29N: "img/night-rock2.png",
  DECORATION_30N: "img/night-rock3.png",
  DECORATION_31N: "img/night-rock4.png",
  DECORATION_32N: "img/night-rock5.png",
  DECORATION_33N: "img/night-rock6.png",
  DECORATION_34N: "img/night-rock7.png",
  DECORATION_35N: "img/night-rock8.png",
  DECORATION_36N: "img/night-rock9.png",
  DECORATION_37N: "img/night-rock10.png",
  DECORATION_38N: "img/night-rock11.png",
  DECORATION_39N: "img/night-rock12.png",
  DECORATION_40N: "img/night-rock13.png",
  DECORATION_41N: "img/night-flower1.png",
  DECORATION_42N: "img/night-flower2.png",
  DECORATION_43N: "img/night-flower3.png",
  DECORATION_44N: "img/night-flower4.png",
  DECORATION_45N: "img/night-flower5.png",
  DECORATION_46N: "img/night-flower6.png",
  DECORATION_47N: "img/night-flower7.png",
  DECORATION_48N: "img/night-flower8.png",
  DECORATION_49N: "img/night-flower9.png",
  DECORATION_50N: "img/night-herb16.png",
  DECORATION_51N: "img/night-herb17.png",
  DECORATION_52N: "img/night-herb18.png",
  DECORATION_53N: "img/night-herb19.png",
  DECORATION_54N: "img/night-herb20.png",
  DECORATION_55N: "img/night-herb21.png",
  DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
  DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
  DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
  DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
  DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
  DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
  DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
  DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
  DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
  DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
  DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
  DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
  DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
  DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
  DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
  DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
  DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
  DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
  DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
  DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
  DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
  DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
  DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
  DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
  DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
  DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
  DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
  DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
  DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
  DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
  DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
  DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
  DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
  DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
  DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
  DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
  DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
  DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
  DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
  DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
  DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
  DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
  DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
  DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
  DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
  DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
  DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
  DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
  NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
  NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
  NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
  NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
  NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
  NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
  NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
  NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
  NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
  NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
  NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
  NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
  NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
  NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
  NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
  NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
  NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
  NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
  NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
  NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
  NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
  NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
  NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
  NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
  NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
  NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
  NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
  NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
  NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
  NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
  NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
  NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
  NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
  NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
  NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
  NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
  NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
  NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
  NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
  NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
  NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
  NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
  NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
  NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
  NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
  NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
  NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
  NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
  DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
  DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
  DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
  DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
  DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
  DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
  DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
  DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
  DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
  DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
  DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
  DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
  DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
  DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
  DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
  DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
  DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
  DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
  DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
  DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
  DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
  DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
  DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
  DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
  DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
  DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
  DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
  DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
  NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
  NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
  NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
  NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
  NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
  NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
  NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
  NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
  NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
  NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
  NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
  NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
  NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
  NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
  NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
  NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
  NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
  NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
  NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
  NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
  NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
  NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
  NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
  NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
  NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
  NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
  NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
  NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
  BABY_MAMMOTHD: "img/day-baby-mammoth.png",
  BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
  BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
  BABY_MAMMOTHN: "img/night-baby-mammoth.png",
  BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
  BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
  INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
  INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
  INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
  HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
  BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
  FLOWER_HATD: "img/day-flower-hat.png",
  FLOWER_HATN: "img/night-flower-hat.png",
  INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
  INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
  INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
  FUR_HATD: "img/day-fur-hat.png",
  FUR_HATN: "img/night-fur-hat.png",
  INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
  INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
  INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
  MAMMOTHD: "img/day-mammoth.png",
  MAMMOTHN: "img/night-mammoth.png",
  HURT_MAMMOTH: "img/hurt-mammoth.png",
  INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
  INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
  INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
  INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
  INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
  INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
  INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
  INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
  INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
  WOOD_BOWD: "img/day-wood-bow2.png",
  WOOD_BOWN: "img/night-wood-bow2.png",
  WOOD_ARROWD: "img/day-wood-arrow.png",
  WOOD_ARROWN: "img/night-wood-arrow.png",
  INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
  INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
  INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
  INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
  INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
  INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
  STONE_BOWD: "img/day-stone-bow.png",
  STONE_BOWN: "img/night-stone-bow.png",
  STONE_ARROWD: "img/day-stone-arrow.png",
  STONE_ARROWN: "img/night-stone-arrow.png",
  INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
  INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
  INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
  INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
  INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
  INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
  GOLD_BOWD: "img/day-gold-bow.png",
  GOLD_BOWN: "img/night-gold-bow.png",
  GOLD_ARROWD: "img/day-gold-arrow.png",
  GOLD_ARROWN: "img/night-gold-arrow.png",
  INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
  INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
  INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
  INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
  INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
  INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
  DIAMOND_BOWD: "img/day-diamond-bow.png",
  DIAMOND_BOWN: "img/night-diamond-bow.png",
  DIAMOND_ARROWD: "img/day-diamond-arrow.png",
  DIAMOND_ARROWN: "img/night-diamond-arrow.png",
  INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
  INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
  INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
  INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
  INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
  INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
  AMETHYST_BOWD: "img/day-amethyst-bow.png",
  AMETHYST_BOWN: "img/night-amethyst-bow.png",
  AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
  AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
  INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
  INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
  INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
  INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
  INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
  INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
  DRAGON_BOWD: "img/day-dragon-bow.png",
  DRAGON_BOWN: "img/night-dragon-bow.png",
  DRAGON_ARROWD: "img/day-dragon-arrow.png",
  DRAGON_ARROWN: "img/night-dragon-arrow.png",
  INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
  INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
  INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
  INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
  INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
  INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
  REIDITE_BOWD: "img/day-reidite-bow.png",
  REIDITE_BOWN: "img/night-reidite-bow.png",
  REIDITE_ARROWD: "img/day-reidite-arrow.png",
  REIDITE_ARROWN: "img/night-reidite-arrow.png",
  BANDAGE_ACTIVATED: "img/bandage-activated.png",
  AUTO_FEED: "img/auto-feed.png",
  STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
  STOP_REGENERATION: "img/stop-regeneration2.png",
  WOOD_TOWERD: "img/day-wood-platform.png",
  WOOD_TOWERN: "img/night-wood-platform.png",
  INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
  INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
  INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
  WOOD_SHIELDD: "img/day-wood-shield.png",
  WOOD_SHIELDN: "img/night-wood-shield.png",
  STONE_SHIELDD: "img/day-stone-shield.png",
  STONE_SHIELDN: "img/night-stone-shield.png",
  GOLD_SHIELDD: "img/day-gold-shield.png",
  GOLD_SHIELDN: "img/night-gold-shield.png",
  DIAMOND_SHIELDD: "img/day-diamond-shield.png",
  DIAMOND_SHIELDN: "img/night-diamond-shield.png",
  AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
  AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
  REIDITE_SHIELDD: "img/day-reidite-shield.png",
  REIDITE_SHIELDN: "img/night-reidite-shield.png",
  INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
  INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
  INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
  INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
  INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
  INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
  INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
  INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
  INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
  INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
  INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
  INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
  INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
  INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
  INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
  INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
  INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
  INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
  MACHETED: "img/day-machete.png",
  MACHETEN: "img/night-machete.png",
  INV_MACHETE_IN: "img/inv-machete-in.png",
  INV_MACHETE_OUT: "img/inv-machete-out.png",
  INV_MACHETE_CLICK: "img/inv-machete-click.png"
};
WINDOW12 = [{}];
WINDOW12[0].stringify = function (_0x39551f) {
  var _0x4d1f13 = new Uint8Array(new ArrayBuffer(_0x39551f.length));
  for (var _0x3a6f1b = 0; _0x3a6f1b < _0x39551f.length; _0x3a6f1b++) {
    _0x4d1f13[_0x3a6f1b] = _0x39551f[_0x3a6f1b];
  }
  return _0x4d1f13;
};
DUMP_IMAGES = {};
PREPROC_IMAGES = {};
for (var i in IMAGES) {
  DUMP_IMAGES[i] = IMAGES[i];
}
sprite = [];
RARITY = {};
RARITY.FREE = 0;
RARITY.WOOD = 1;
RARITY.STONE = 2;
RARITY.GOLD = 3;
RARITY.DIAMOND = 4;
RARITY.AMETHYST = 5;
RARITY.REIDITE = 6;
RARITY.SPECIAL = 7;
RARITY.LEVEL = 8;
COSMETICS = {};
MINIMAP_UTILS = [];
find_cosmetics_per_id = function (_0x1dbff6, _0x28ea38) {
  for (var _0x711b24 = 0; _0x711b24 < _0x1dbff6.length; _0x711b24++) {
    if (_0x1dbff6[_0x711b24].id === _0x28ea38) {
      return _0x711b24;
    }
  }
  return -1;
};
var MINIMAP_LIST = [];
function render_type_resources_minimap(_0x5ba47b, _0x3f14f3) {
  for (var _0x4a7a91 = 0; _0x4a7a91 < MINIMAP_LIST.length; _0x4a7a91 += _0x3f14f3) {
    var _0x235633 = MINIMAP_LIST[_0x4a7a91];
    if (_0x235633[0] === _0x5ba47b) {
      render_resource_minimap(_0x235633[0], _0x235633[1], _0x235633[2], _0x235633[3]);
    }
  }
}
;
function render_all_resources_minimap() {
  render_type_resources_minimap("isl", 1);
  render_type_resources_minimap("wtb", 20);
  render_type_resources_minimap("la", 1);
  render_type_resources_minimap("c", 1);
  render_type_resources_minimap("s", 1);
  render_type_resources_minimap("f", 1);
  render_type_resources_minimap("p", 1);
  render_type_resources_minimap("g", 1);
  render_type_resources_minimap("d", 1);
  render_type_resources_minimap("a", 1);
  render_type_resources_minimap("re", 1);
  render_type_resources_minimap("m", 1);
  MINIMAP_LIST = [];
}
;
function add_resource_minimap(_0x1e6611, _0x473d5a, _0x2d3092, _0x1f6c02) {
  MINIMAP_LIST.push([_0x1e6611, _0x473d5a, _0x2d3092, _0x1f6c02]);
}
;
function render_resource_minimap(_0xdaf7fb, _0x51a7a4, _0x4db4a9, _0x1cf293) {
  var _0x2457ca = MINIMAP_UTILS[_0xdaf7fb];
  if (_0x2457ca === undefined) {
    return;
  }
  for (var _0x51d26c = 0; _0x51d26c < 2; _0x51d26c++) {
    var _0x2999cc = _0x2457ca[_0x51a7a4][_0x51d26c];
    var _0x1bb97a = _0x1cf293 * 193 / world.nw;
    var _0x5dc071 = _0x4db4a9 * 193 / world.nh;
    var _0x497b08 = _0x2999cc.width / 3.5;
    var _0x124d9c = _0x2999cc.height / 3.5;
    sprite[SPRITE.MINIMAP_CTX][_0x51d26c].drawImage(_0x2999cc, _0x1bb97a - _0x497b08 / 2, _0x5dc071 - _0x124d9c / 2, _0x497b08, _0x124d9c);
    _0x1bb97a = _0x1cf293 * 600 / world.nw;
    _0x5dc071 = _0x4db4a9 * 600 / world.nh;
    _0x497b08 = _0x2999cc.width / 1.5;
    _0x124d9c = _0x2999cc.height / 1.5;
    sprite[SPRITE.BIGMAP_CTX][_0x51d26c].drawImage(_0x2999cc, _0x1bb97a - _0x497b08 / 2, _0x5dc071 - _0x124d9c / 2, _0x497b08, _0x124d9c);
  }
}
render_minimap = function () {
  for (var _0x36402f = 0; _0x36402f < 2; _0x36402f++) {
    sprite[SPRITE.MINIMAP_CTX][_0x36402f].clearRect(0, 0, 193, 193);
    sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.MAP[_0x36402f], 0, 0, 193, 193);
    sprite[SPRITE.BIGMAP_CTX][_0x36402f].clearRect(0, 0, 600, 600);
    sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.MAP[_0x36402f], 0, 0, 600, 600);
    for (var _0x432d8f = world.biomes.length - 1; _0x432d8f >= 0; _0x432d8f--) {
      var _0x128b09 = world.biomes[_0x432d8f];
      var _0x3f4f74 = _0x128b09.x1 * 193 / (world.nw * 100);
      var _0x3f04a9 = _0x128b09.y1 * 193 / (world.nh * 100);
      var _0xc71523 = _0x128b09.w * 193 / (world.nw * 100);
      var _0xc88d6a = _0x128b09.h * 193 / (world.nh * 100);
      var _0x36357b = _0x128b09.x1 * 600 / (world.nw * 100);
      var _0x3c1f0e = _0x128b09.y1 * 600 / (world.nh * 100);
      var _0x2f4be7 = _0x128b09.w * 600 / (world.nw * 100);
      var _0x1ba76e = _0x128b09.h * 600 / (world.nh * 100);
      if (_0x128b09.t === world.BIOME_FOREST) {
        sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.FOREST[_0x36402f], _0x3f4f74, _0x3f04a9, _0xc71523, _0xc88d6a);
        sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.FOREST[_0x36402f], _0x36357b, _0x3c1f0e, _0x2f4be7, _0x1ba76e);
      }
      if (_0x128b09.t === world.BIOME_WINTER) {
        sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.WINTER[_0x36402f], _0x3f4f74, _0x3f04a9, _0xc71523, _0xc88d6a);
        sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.WINTER[_0x36402f], _0x36357b, _0x3c1f0e, _0x2f4be7, _0x1ba76e);
      }
      if (_0x128b09.t === world.BIOME_LAVA) {
        sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.LAVA[_0x36402f], _0x3f4f74, _0x3f04a9, _0xc71523, _0xc88d6a);
        sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.LAVA[_0x36402f], _0x36357b, _0x3c1f0e, _0x2f4be7, _0x1ba76e);
      }
      if (_0x128b09.t === world.BIOME_DRAGON) {
        sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.CAVE[_0x36402f], _0x3f4f74, _0x3f04a9, _0xc71523, _0xc88d6a);
        sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.CAVE[_0x36402f], _0x36357b, _0x3c1f0e, _0x2f4be7, _0x1ba76e);
      }
      if (_0x128b09.t === world.BIOME_DESERT) {
        sprite[SPRITE.MINIMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.DESERT[_0x36402f], _0x3f4f74, _0x3f04a9, _0xc71523, _0xc88d6a);
        sprite[SPRITE.BIGMAP_CTX][_0x36402f].drawImage(MINIMAP_UTILS.DESERT[_0x36402f], _0x36357b, _0x3c1f0e, _0x2f4be7, _0x1ba76e);
      }
    }
  }
};
render_cosmetics = function () {
  COSMETICS = {
    SKIN: [{
      id: 0,
      day: IMAGES.PLAYER0D,
      night: IMAGES.PLAYER0N,
      dayHand: IMAGES.HAND0D,
      nightHand: IMAGES.HAND0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Starver"
    }, {
      id: 3,
      day: IMAGES.PLAYER3D,
      night: IMAGES.PLAYER3N,
      dayHand: IMAGES.HAND3D,
      nightHand: IMAGES.HAND3N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Angry"
    }, {
      id: 2,
      day: IMAGES.PLAYER2D,
      night: IMAGES.PLAYER2N,
      dayHand: IMAGES.HAND2D,
      nightHand: IMAGES.HAND2N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Sad"
    }, {
      id: 9,
      day: IMAGES.PLAYER9D,
      night: IMAGES.PLAYER9N,
      dayHand: IMAGES.HAND9D,
      nightHand: IMAGES.HAND9N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Happy 1"
    }, {
      id: 1,
      day: IMAGES.PLAYER1D,
      night: IMAGES.PLAYER1N,
      dayHand: IMAGES.HAND1D,
      nightHand: IMAGES.HAND1N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "What?"
    }, {
      id: 4,
      day: IMAGES.PLAYER4D,
      night: IMAGES.PLAYER4N,
      dayHand: IMAGES.HAND4D,
      nightHand: IMAGES.HAND4N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Suspicious"
    }, {
      id: 5,
      day: IMAGES.PLAYER5D,
      night: IMAGES.PLAYER5N,
      dayHand: IMAGES.HAND5D,
      nightHand: IMAGES.HAND5N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Scar"
    }, {
      id: 6,
      day: IMAGES.PLAYER6D,
      night: IMAGES.PLAYER6N,
      dayHand: IMAGES.HAND6D,
      nightHand: IMAGES.HAND6N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "In Trouble"
    }, {
      id: 7,
      day: IMAGES.PLAYER7D,
      night: IMAGES.PLAYER7N,
      dayHand: IMAGES.HAND7D,
      nightHand: IMAGES.HAND7N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Cute"
    }, {
      id: 8,
      day: IMAGES.PLAYER8D,
      night: IMAGES.PLAYER8N,
      dayHand: IMAGES.HAND8D,
      nightHand: IMAGES.HAND8N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bored 1"
    }, {
      id: 10,
      day: IMAGES.PLAYER10D,
      night: IMAGES.PLAYER10N,
      dayHand: IMAGES.HAND10D,
      nightHand: IMAGES.HAND10N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 2"
    }, {
      id: 11,
      day: IMAGES.PLAYER11D,
      night: IMAGES.PLAYER11N,
      dayHand: IMAGES.HAND11D,
      nightHand: IMAGES.HAND11N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Crazy"
    }, {
      id: 12,
      day: IMAGES.PLAYER12D,
      night: IMAGES.PLAYER12N,
      dayHand: IMAGES.HAND12D,
      nightHand: IMAGES.HAND12N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 3"
    }, {
      id: 13,
      day: IMAGES.PLAYER13D,
      night: IMAGES.PLAYER13N,
      dayHand: IMAGES.HAND13D,
      nightHand: IMAGES.HAND13N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Very Cute"
    }, {
      id: 14,
      day: IMAGES.PLAYER14D,
      night: IMAGES.PLAYER14N,
      dayHand: IMAGES.HAND14D,
      nightHand: IMAGES.HAND14N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Curious"
    }, {
      id: 15,
      day: IMAGES.PLAYER15D,
      night: IMAGES.PLAYER15N,
      dayHand: IMAGES.HAND15D,
      nightHand: IMAGES.HAND15N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bored 2"
    }, {
      id: 16,
      day: IMAGES.PLAYER16D,
      night: IMAGES.PLAYER16N,
      dayHand: IMAGES.HAND16D,
      nightHand: IMAGES.HAND16N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Happy 4"
    }, {
      id: 17,
      day: IMAGES.PLAYER17D,
      night: IMAGES.PLAYER17N,
      dayHand: IMAGES.HAND17D,
      nightHand: IMAGES.HAND17N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Scar 2"
    }, {
      id: 18,
      day: IMAGES.PLAYER18D,
      night: IMAGES.PLAYER18N,
      dayHand: IMAGES.HAND18D,
      nightHand: IMAGES.HAND18N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Sick"
    }, {
      id: 19,
      day: IMAGES.PLAYER19D,
      night: IMAGES.PLAYER19N,
      dayHand: IMAGES.HAND19D,
      nightHand: IMAGES.HAND19N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Somnambule"
    }, {
      id: 24,
      day: IMAGES.SKIN7D,
      night: IMAGES.SKIN7N,
      dayHand: IMAGES.HAND_SKIN7D,
      nightHand: IMAGES.HAND_SKIN7N,
      rarity: RARITY.WOOD,
      author: "Pixelbitie",
      name: "Feel Bad"
    }, {
      id: 23,
      day: IMAGES.SKIN0D,
      night: IMAGES.SKIN0N,
      dayHand: IMAGES.HAND_SKIN0D,
      nightHand: IMAGES.HAND_SKIN0N,
      rarity: RARITY.WOOD,
      author: "Pixelbitie",
      name: "Mmmh."
    }, {
      id: 103,
      day: IMAGES.SKIN78D,
      night: IMAGES.SKIN78N,
      dayHand: IMAGES.HAND_SKIN78D,
      nightHand: IMAGES.HAND_SKIN78N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Panic"
    }, {
      id: 105,
      day: IMAGES.SKIN80D,
      night: IMAGES.SKIN80N,
      dayHand: IMAGES.HAND_SKIN80D,
      nightHand: IMAGES.HAND_SKIN80N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Hypnotic"
    }, {
      id: 106,
      day: IMAGES.SKIN81D,
      night: IMAGES.SKIN81N,
      dayHand: IMAGES.HAND_SKIN81D,
      nightHand: IMAGES.HAND_SKIN81N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Stars in the eyes"
    }, {
      id: 104,
      day: IMAGES.SKIN79D,
      night: IMAGES.SKIN79N,
      dayHand: IMAGES.HAND_SKIN79D,
      nightHand: IMAGES.HAND_SKIN79N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Scared at night"
    }, {
      id: 20,
      day: IMAGES.SKIN_VAMPIRED,
      night: IMAGES.SKIN_VAMPIREN,
      dayHand: IMAGES.HAND_VAMPIRED,
      nightHand: IMAGES.HAND_VAMPIREN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Vampire"
    }, {
      id: 21,
      day: IMAGES.SKIN_ZOMBIED,
      night: IMAGES.SKIN_ZOMBIEN,
      dayHand: IMAGES.HAND_ZOMBIED,
      nightHand: IMAGES.HAND_ZOMBIEN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Zombie"
    }, {
      id: 22,
      day: IMAGES.SKIN_DEVASTD,
      night: IMAGES.SKIN_DEVASTN,
      dayHand: IMAGES.HAND_DEVASTD,
      nightHand: IMAGES.HAND_DEVASTN,
      rarity: RARITY.STONE,
      author: "Pixelbitie",
      name: "Devaster"
    }, {
      id: 116,
      day: IMAGES.SKIN91D,
      night: IMAGES.SKIN91N,
      dayHand: IMAGES.HAND_SKIN91D,
      nightHand: IMAGES.HAND_SKIN91N,
      rarity: RARITY.STONE,
      author: "Fukss",
      name: "Dead Devaster"
    }, {
      id: 27,
      day: IMAGES.SKIN19D,
      night: IMAGES.SKIN19N,
      dayHand: IMAGES.HAND_SKIN19D,
      nightHand: IMAGES.HAND_SKIN19N,
      rarity: RARITY.STONE,
      author: "Winter",
      name: "Cactus"
    }, {
      id: 28,
      day: IMAGES.SKIN20D,
      night: IMAGES.SKIN20N,
      dayHand: IMAGES.HAND_SKIN20D,
      nightHand: IMAGES.HAND_SKIN20N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Bee"
    }, {
      id: 49,
      day: IMAGES.SKIN24D,
      night: IMAGES.SKIN24N,
      dayHand: IMAGES.HAND_SKIN24D,
      nightHand: IMAGES.HAND_SKIN24N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Camo Skin"
    }, {
      id: 58,
      day: IMAGES.SKIN34D,
      night: IMAGES.SKIN34N,
      dayHand: IMAGES.HAND_SKIN34D,
      nightHand: IMAGES.HAND_SKIN34N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Blue Limax Skin"
    }, {
      id: 59,
      day: IMAGES.SKIN33D,
      night: IMAGES.SKIN33N,
      dayHand: IMAGES.HAND_SKIN33D,
      nightHand: IMAGES.HAND_SKIN33N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Red Limax Skin"
    }, {
      id: 94,
      day: IMAGES.SKIN69D,
      night: IMAGES.SKIN69N,
      dayHand: IMAGES.HAND_SKIN69D,
      nightHand: IMAGES.HAND_SKIN69N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Mr. Pumpkin"
    }, {
      id: 109,
      day: IMAGES.SKIN84D,
      night: IMAGES.SKIN84N,
      dayHand: IMAGES.HAND_SKIN84D,
      nightHand: IMAGES.HAND_SKIN84N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Wood"
    }, {
      id: 114,
      day: IMAGES.SKIN89D,
      night: IMAGES.SKIN89N,
      dayHand: IMAGES.HAND_SKIN89D,
      nightHand: IMAGES.HAND_SKIN89N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Zebra"
    }, {
      id: 120,
      day: IMAGES.SKIN95D,
      night: IMAGES.SKIN95N,
      dayHand: IMAGES.HAND_SKIN95D,
      nightHand: IMAGES.HAND_SKIN95N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Tiger"
    }, {
      id: 134,
      day: IMAGES.SKIN109D,
      night: IMAGES.SKIN109N,
      dayHand: IMAGES.HAND_SKIN109D,
      nightHand: IMAGES.HAND_SKIN109N,
      rarity: RARITY.STONE,
      author: "Franchestcreator",
      name: "Day or Night"
    }, {
      id: 135,
      day: IMAGES.SKIN110D,
      night: IMAGES.SKIN110N,
      dayHand: IMAGES.HAND_SKIN110D,
      nightHand: IMAGES.HAND_SKIN110N,
      rarity: RARITY.STONE,
      author: "Poinet",
      name: "Square Starver"
    }, {
      id: 136,
      day: IMAGES.SKIN111D,
      night: IMAGES.SKIN111N,
      dayHand: IMAGES.HAND_SKIN111D,
      nightHand: IMAGES.HAND_SKIN111N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Voodoo Doll"
    }, {
      id: 137,
      day: IMAGES.SKIN112D,
      night: IMAGES.SKIN112N,
      dayHand: IMAGES.HAND_SKIN112D,
      nightHand: IMAGES.HAND_SKIN112N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Frankenstein"
    }, {
      id: 138,
      day: IMAGES.SKIN114D,
      night: IMAGES.SKIN114N,
      dayHand: IMAGES.HAND_SKIN114D,
      nightHand: IMAGES.HAND_SKIN114N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mummy"
    }, {
      id: 139,
      day: IMAGES.SKIN115D,
      night: IMAGES.SKIN115N,
      dayHand: IMAGES.HAND_SKIN115D,
      nightHand: IMAGES.HAND_SKIN115N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Werewolf"
    }, {
      id: 140,
      day: IMAGES.SKIN116D,
      night: IMAGES.SKIN116N,
      dayHand: IMAGES.HAND_SKIN116D,
      nightHand: IMAGES.HAND_SKIN116N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Cthulhu"
    }, {
      id: 141,
      day: IMAGES.SKIN117D,
      night: IMAGES.SKIN117N,
      dayHand: IMAGES.HAND_SKIN117D,
      nightHand: IMAGES.HAND_SKIN117N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Sea Man"
    }, {
      id: 142,
      day: IMAGES.SKIN118D,
      night: IMAGES.SKIN118N,
      dayHand: IMAGES.HAND_SKIN118D,
      nightHand: IMAGES.HAND_SKIN118N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Pumpkin"
    }, {
      id: 148,
      day: IMAGES.SKIN124D,
      night: IMAGES.SKIN124N,
      dayHand: IMAGES.HAND_SKIN124D,
      nightHand: IMAGES.HAND_SKIN124N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Snowman"
    }, {
      id: 149,
      day: IMAGES.SKIN125D,
      night: IMAGES.SKIN125N,
      dayHand: IMAGES.HAND_SKIN125D,
      nightHand: IMAGES.HAND_SKIN125N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Christmas Tree Man"
    }, {
      id: 150,
      day: IMAGES.SKIN126D,
      night: IMAGES.SKIN126N,
      dayHand: IMAGES.HAND_SKIN126D,
      nightHand: IMAGES.HAND_SKIN126N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mrs Bell"
    }, {
      id: 151,
      day: IMAGES.SKIN127D,
      night: IMAGES.SKIN127N,
      dayHand: IMAGES.HAND_SKIN127D,
      nightHand: IMAGES.HAND_SKIN127N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Elfy"
    }, {
      id: 152,
      day: IMAGES.SKIN128D,
      night: IMAGES.SKIN128N,
      dayHand: IMAGES.HAND_SKIN128D,
      nightHand: IMAGES.HAND_SKIN128N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Old Mr Present"
    }, {
      id: 153,
      day: IMAGES.SKIN129D,
      night: IMAGES.SKIN129N,
      dayHand: IMAGES.HAND_SKIN129D,
      nightHand: IMAGES.HAND_SKIN129N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "My Dear Old Deer"
    }, {
      id: 154,
      day: IMAGES.SKIN130D,
      night: IMAGES.SKIN130N,
      dayHand: IMAGES.HAND_SKIN130D,
      nightHand: IMAGES.HAND_SKIN130N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Angel"
    }, {
      id: 155,
      day: IMAGES.SKIN131D,
      night: IMAGES.SKIN131N,
      dayHand: IMAGES.HAND_SKIN131D,
      nightHand: IMAGES.HAND_SKIN131N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Ice Cube"
    }, {
      id: 156,
      day: IMAGES.SKIN132D,
      night: IMAGES.SKIN132N,
      dayHand: IMAGES.HAND_SKIN132D,
      nightHand: IMAGES.HAND_SKIN132N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Mr Snowman"
    }, {
      id: 159,
      day: IMAGES.SKIN135D,
      night: IMAGES.SKIN135N,
      dayHand: IMAGES.HAND_SKIN135D,
      nightHand: IMAGES.HAND_SKIN135N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Crystal Sky Skin"
    }, {
      id: 167,
      day: IMAGES.SKIN143D,
      night: IMAGES.SKIN143N,
      dayHand: IMAGES.HAND_SKIN143D,
      nightHand: IMAGES.HAND_SKIN143N,
      rarity: RARITY.STONE,
      author: "Franchestcreator",
      name: "Radioactive Starver"
    }, {
      id: 169,
      day: IMAGES.SKIN146D,
      night: IMAGES.SKIN146N,
      dayHand: IMAGES.HAND_SKIN146D,
      nightHand: IMAGES.HAND_SKIN146N,
      rarity: RARITY.STONE,
      author: "TheScaryBlaze",
      name: "Eaten Cookie"
    }, {
      id: 170,
      day: IMAGES.SKIN147D,
      night: IMAGES.SKIN147N,
      dayHand: IMAGES.HAND_SKIN147D,
      nightHand: IMAGES.HAND_SKIN147N,
      rarity: RARITY.STONE,
      author: "aloner",
      name: "Blob Thing"
    }, {
      id: 172,
      day: IMAGES.SKIN149D,
      night: IMAGES.SKIN149N,
      dayHand: IMAGES.HAND_SKIN149D,
      nightHand: IMAGES.HAND_SKIN149N,
      rarity: RARITY.STONE,
      author: "aloner",
      name: "Machine Mask"
    }, {
      id: 29,
      day: IMAGES.SKIN2D,
      night: IMAGES.SKIN2N,
      dayHand: IMAGES.HAND_SKIN2D,
      nightHand: IMAGES.HAND_SKIN2N,
      rarity: RARITY.GOLD,
      author: "Pixelbitie",
      name: "Lollipop 1"
    }, {
      id: 30,
      day: IMAGES.SKIN3D,
      night: IMAGES.SKIN3N,
      dayHand: IMAGES.HAND_SKIN3D,
      nightHand: IMAGES.HAND_SKIN3N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 2"
    }, {
      id: 31,
      day: IMAGES.SKIN4D,
      night: IMAGES.SKIN4N,
      dayHand: IMAGES.HAND_SKIN4D,
      nightHand: IMAGES.HAND_SKIN4N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 3"
    }, {
      id: 32,
      day: IMAGES.SKIN5D,
      night: IMAGES.SKIN5N,
      dayHand: IMAGES.HAND_SKIN5D,
      nightHand: IMAGES.HAND_SKIN5N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Lollipop 4"
    }, {
      id: 33,
      day: IMAGES.SKIN8D,
      night: IMAGES.SKIN8N,
      dayHand: IMAGES.HAND_SKIN8D,
      nightHand: IMAGES.HAND_SKIN8N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Yellow Bird"
    }, {
      id: 34,
      day: IMAGES.SKIN9D,
      night: IMAGES.SKIN9N,
      dayHand: IMAGES.HAND_SKIN9D,
      nightHand: IMAGES.HAND_SKIN9N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Red Bird"
    }, {
      id: 35,
      day: IMAGES.SKIN10D,
      night: IMAGES.SKIN10N,
      dayHand: IMAGES.HAND_SKIN10D,
      nightHand: IMAGES.HAND_SKIN10N,
      rarity: RARITY.GOLD,
      author: "Sushui",
      name: "Blue Bird"
    }, {
      id: 37,
      day: IMAGES.SKIN17D,
      night: IMAGES.SKIN17N,
      dayHand: IMAGES.HAND_SKIN17D,
      nightHand: IMAGES.HAND_SKIN17N,
      rarity: RARITY.GOLD,
      author: "Winter",
      name: "Owl"
    }, {
      id: 52,
      day: IMAGES.SKIN27D,
      night: IMAGES.SKIN27N,
      dayHand: IMAGES.HAND_SKIN27D,
      nightHand: IMAGES.HAND_SKIN27N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Nemo"
    }, {
      id: 53,
      day: IMAGES.SKIN28D,
      night: IMAGES.SKIN28N,
      dayHand: IMAGES.HAND_SKIN28D,
      nightHand: IMAGES.HAND_SKIN28N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Mr. Bread"
    }, {
      id: 74,
      day: IMAGES.SKIN49D,
      night: IMAGES.SKIN49N,
      dayHand: IMAGES.HAND_SKIN49D,
      nightHand: IMAGES.HAND_SKIN49N,
      rarity: RARITY.GOLD,
      author: "Communist & Taco4Life",
      name: "Mr. Bread 2"
    }, {
      id: 75,
      day: IMAGES.SKIN50D,
      night: IMAGES.SKIN50N,
      dayHand: IMAGES.HAND_SKIN50D,
      nightHand: IMAGES.HAND_SKIN50N,
      rarity: RARITY.GOLD,
      author: "Communist & Taco4Life",
      name: "Mr. Bread 3"
    }, {
      id: 60,
      day: IMAGES.SKIN35D,
      night: IMAGES.SKIN35N,
      dayHand: IMAGES.HAND_SKIN35D,
      nightHand: IMAGES.HAND_SKIN35N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Red Berry"
    }, {
      id: 61,
      day: IMAGES.SKIN36D,
      night: IMAGES.SKIN36N,
      dayHand: IMAGES.HAND_SKIN36D,
      nightHand: IMAGES.HAND_SKIN36N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Old Berry"
    }, {
      id: 70,
      day: IMAGES.SKIN45D,
      night: IMAGES.SKIN45N,
      dayHand: IMAGES.HAND_SKIN45D,
      nightHand: IMAGES.HAND_SKIN45N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Cake"
    }, {
      id: 71,
      day: IMAGES.SKIN46D,
      night: IMAGES.SKIN46N,
      dayHand: IMAGES.HAND_SKIN46D,
      nightHand: IMAGES.HAND_SKIN46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Christmas Cake"
    }, {
      id: 77,
      day: IMAGES.SKIN52D,
      night: IMAGES.SKIN52N,
      dayHand: IMAGES.HAND_SKIN52D,
      nightHand: IMAGES.HAND_SKIN52N,
      rarity: RARITY.GOLD,
      author: "Pancakez",
      name: "Mr. Pancake"
    }, {
      id: 87,
      day: IMAGES.SKIN62D,
      night: IMAGES.SKIN62N,
      dayHand: IMAGES.HAND_SKIN62D,
      nightHand: IMAGES.HAND_SKIN62N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Taco"
    }, {
      id: 78,
      day: IMAGES.SKIN53D,
      night: IMAGES.SKIN53N,
      dayHand: IMAGES.HAND_SKIN53D,
      nightHand: IMAGES.HAND_SKIN53N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Bottle"
    }, {
      id: 79,
      day: IMAGES.SKIN54D,
      night: IMAGES.SKIN54N,
      dayHand: IMAGES.HAND_SKIN54D,
      nightHand: IMAGES.HAND_SKIN54N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Mr. Bottle 2"
    }, {
      id: 97,
      day: IMAGES.SKIN71D,
      night: IMAGES.SKIN71N,
      dayHand: IMAGES.HAND_SKIN71D,
      nightHand: IMAGES.HAND_SKIN71N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Pink Rabbit"
    }, {
      id: 102,
      day: IMAGES.SKIN77D,
      night: IMAGES.SKIN77N,
      dayHand: IMAGES.HAND_SKIN77D,
      nightHand: IMAGES.HAND_SKIN77N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Marshmallow"
    }, {
      id: 107,
      day: IMAGES.SKIN82D,
      night: IMAGES.SKIN82N,
      dayHand: IMAGES.HAND_SKIN82D,
      nightHand: IMAGES.HAND_SKIN82N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Fox"
    }, {
      id: 132,
      day: IMAGES.SKIN107D,
      night: IMAGES.SKIN107N,
      dayHand: IMAGES.HAND_SKIN107D,
      nightHand: IMAGES.HAND_SKIN107N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Raccoon"
    }, {
      id: 111,
      day: IMAGES.SKIN86D,
      night: IMAGES.SKIN86N,
      dayHand: IMAGES.HAND_SKIN86D,
      nightHand: IMAGES.HAND_SKIN86N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Cloud"
    }, {
      id: 113,
      day: IMAGES.SKIN88D,
      night: IMAGES.SKIN88N,
      dayHand: IMAGES.HAND_SKIN88D,
      nightHand: IMAGES.HAND_SKIN88N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Moon"
    }, {
      id: 117,
      day: IMAGES.SKIN92D,
      night: IMAGES.SKIN92N,
      dayHand: IMAGES.HAND_SKIN92D,
      nightHand: IMAGES.HAND_SKIN92N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mr. Panda"
    }, {
      id: 118,
      day: IMAGES.SKIN93D,
      night: IMAGES.SKIN93N,
      dayHand: IMAGES.HAND_SKIN93D,
      nightHand: IMAGES.HAND_SKIN93N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mr. Strawberry"
    }, {
      id: 119,
      day: IMAGES.SKIN94D,
      night: IMAGES.SKIN94N,
      dayHand: IMAGES.HAND_SKIN94D,
      nightHand: IMAGES.HAND_SKIN94N,
      rarity: RARITY.GOLD,
      author: "eogito & Sushuui",
      name: "Mummy"
    }, {
      id: 122,
      day: IMAGES.SKIN97D,
      night: IMAGES.SKIN97N,
      dayHand: IMAGES.HAND_SKIN97D,
      nightHand: IMAGES.HAND_SKIN97N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Dino"
    }, {
      id: 127,
      day: IMAGES.SKIN102D,
      night: IMAGES.SKIN102N,
      dayHand: IMAGES.HAND_SKIN102D,
      nightHand: IMAGES.HAND_SKIN102N,
      rarity: RARITY.GOLD,
      author: "MADBalgouthi",
      name: "Mr. Koala"
    }, {
      id: 160,
      day: IMAGES.SKIN136D,
      night: IMAGES.SKIN136N,
      dayHand: IMAGES.HAND_SKIN136D,
      nightHand: IMAGES.HAND_SKIN136N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Bottle Protection"
    }, {
      id: 162,
      day: IMAGES.SKIN138D,
      night: IMAGES.SKIN138N,
      dayHand: IMAGES.HAND_SKIN138D,
      nightHand: IMAGES.HAND_SKIN138N,
      rarity: RARITY.GOLD,
      author: "CrysTal",
      name: "Leaf Man"
    }, {
      id: 166,
      day: IMAGES.SKIN142D,
      night: IMAGES.SKIN142N,
      dayHand: IMAGES.HAND_SKIN142D,
      nightHand: IMAGES.HAND_SKIN142N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Bubble"
    }, {
      id: 174,
      day: IMAGES.SKIN145D,
      night: IMAGES.SKIN145N,
      dayHand: IMAGES.HAND_SKIN145D,
      nightHand: IMAGES.HAND_SKIN145N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Potato"
    }, {
      id: 171,
      day: IMAGES.SKIN148D,
      night: IMAGES.SKIN148N,
      dayHand: IMAGES.HAND_SKIN148D,
      nightHand: IMAGES.HAND_SKIN148N,
      rarity: RARITY.GOLD,
      author: "aloner",
      name: "Axolotl"
    }, {
      id: 25,
      day: IMAGES.SKIN6D,
      night: IMAGES.SKIN6N,
      dayHand: IMAGES.HAND_SKIN6D,
      nightHand: IMAGES.HAND_SKIN0N,
      rarity: RARITY.DIAMOND,
      author: "Pixelbitie",
      name: "Test Dummy"
    }, {
      id: 41,
      day: IMAGES.SKIN_STARD,
      night: IMAGES.SKIN_STARN,
      dayHand: IMAGES.HAND_STARD,
      nightHand: IMAGES.HAND_STARN,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Star-ver"
    }, {
      id: 43,
      day: IMAGES.SKIN11D,
      night: IMAGES.SKIN11N,
      dayHand: IMAGES.HAND_SKIN11D,
      nightHand: IMAGES.HAND_SKIN11N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Starver Chest"
    }, {
      id: 88,
      day: IMAGES.SKIN63D,
      night: IMAGES.SKIN63N,
      dayHand: IMAGES.HAND_SKIN63D,
      nightHand: IMAGES.HAND_SKIN63N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Starver Workbench"
    }, {
      id: 121,
      day: IMAGES.SKIN96D,
      night: IMAGES.SKIN96N,
      dayHand: IMAGES.HAND_SKIN96D,
      nightHand: IMAGES.HAND_SKIN96N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish"
    }, {
      id: 39,
      day: IMAGES.SKIN22D,
      night: IMAGES.SKIN22N,
      dayHand: IMAGES.HAND_SKIN22D,
      nightHand: IMAGES.HAND_SKIN22N,
      rarity: RARITY.DIAMOND,
      author: "Negligent4Dia",
      name: "Crab"
    }, {
      id: 40,
      day: IMAGES.SKIN23D,
      night: IMAGES.SKIN23N,
      dayHand: IMAGES.HAND_SKIN23D,
      nightHand: IMAGES.HAND_SKIN23N,
      rarity: RARITY.DIAMOND,
      author: "Negligent4Dia",
      name: "Piranha"
    }, {
      id: 36,
      day: IMAGES.SKIN16D,
      night: IMAGES.SKIN16N,
      dayHand: IMAGES.HAND_SKIN16D,
      nightHand: IMAGES.HAND_SKIN16N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Fox"
    }, {
      id: 69,
      day: IMAGES.SKIN44D,
      night: IMAGES.SKIN44N,
      dayHand: IMAGES.HAND_SKIN44D,
      nightHand: IMAGES.HAND_SKIN44N,
      rarity: RARITY.DIAMOND,
      author: "Zed",
      name: "Baby Foxy"
    }, {
      id: 51,
      day: IMAGES.SKIN26D,
      night: IMAGES.SKIN26N,
      dayHand: IMAGES.HAND_SKIN26D,
      nightHand: IMAGES.HAND_SKIN26N,
      rarity: RARITY.DIAMOND,
      author: "HOWI",
      name: "Winter Bear"
    }, {
      id: 133,
      day: IMAGES.SKIN108D,
      night: IMAGES.SKIN108N,
      dayHand: IMAGES.HAND_SKIN108D,
      nightHand: IMAGES.HAND_SKIN108N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Hawk"
    }, {
      id: 55,
      day: IMAGES.SKIN30D,
      night: IMAGES.SKIN30N,
      dayHand: IMAGES.HAND_SKIN30D,
      nightHand: IMAGES.HAND_SKIN30N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Nice Little Yuki"
    }, {
      id: 68,
      day: IMAGES.SKIN43D,
      night: IMAGES.SKIN43N,
      dayHand: IMAGES.HAND_SKIN43D,
      nightHand: IMAGES.HAND_SKIN43N,
      rarity: RARITY.DIAMOND,
      author: "Taco4Life",
      name: "Baby Yuki"
    }, {
      id: 62,
      day: IMAGES.SKIN37D,
      night: IMAGES.SKIN37N,
      dayHand: IMAGES.HAND_SKIN37D,
      nightHand: IMAGES.HAND_SKIN37N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Carrot"
    }, {
      id: 56,
      day: IMAGES.SKIN31D,
      night: IMAGES.SKIN31N,
      dayHand: IMAGES.HAND_SKIN31D,
      nightHand: IMAGES.HAND_SKIN31N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Bat Limax"
    }, {
      id: 72,
      day: IMAGES.SKIN47D,
      night: IMAGES.SKIN47N,
      dayHand: IMAGES.HAND_SKIN47D,
      nightHand: IMAGES.HAND_SKIN47N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Mr. Crate"
    }, {
      id: 73,
      day: IMAGES.SKIN48D,
      night: IMAGES.SKIN48N,
      dayHand: IMAGES.HAND_SKIN48D,
      nightHand: IMAGES.HAND_SKIN48N,
      rarity: RARITY.DIAMOND,
      author: "Taco4Life & eogito",
      name: "Mr. Spider"
    }, {
      id: 93,
      day: IMAGES.SKIN68D,
      night: IMAGES.SKIN68N,
      dayHand: IMAGES.HAND_SKIN68D,
      nightHand: IMAGES.HAND_SKIN68N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Spider 2"
    }, {
      id: 82,
      day: IMAGES.SKIN57D,
      night: IMAGES.SKIN57N,
      dayHand: IMAGES.HAND_SKIN57D,
      nightHand: IMAGES.HAND_SKIN57N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Blue Starfish"
    }, {
      id: 83,
      day: IMAGES.SKIN58D,
      night: IMAGES.SKIN58N,
      dayHand: IMAGES.HAND_SKIN58D,
      nightHand: IMAGES.HAND_SKIN58N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Orange Starfish"
    }, {
      id: 84,
      day: IMAGES.SKIN59D,
      night: IMAGES.SKIN59N,
      dayHand: IMAGES.HAND_SKIN59D,
      nightHand: IMAGES.HAND_SKIN59N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Pink Starfish"
    }, {
      id: 85,
      day: IMAGES.SKIN60D,
      night: IMAGES.SKIN60N,
      dayHand: IMAGES.HAND_SKIN60D,
      nightHand: IMAGES.HAND_SKIN60N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. ShellMauve"
    }, {
      id: 86,
      day: IMAGES.SKIN61D,
      night: IMAGES.SKIN61N,
      dayHand: IMAGES.HAND_SKIN61D,
      nightHand: IMAGES.HAND_SKIN61N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Shell Bead"
    }, {
      id: 96,
      day: IMAGES.SKIN72D,
      night: IMAGES.SKIN72N,
      dayHand: IMAGES.HAND_SKIN72D,
      nightHand: IMAGES.HAND_SKIN72N,
      rarity: RARITY.DIAMOND,
      author: "Fukss",
      name: "Angry Crab"
    }, {
      id: 98,
      day: IMAGES.SKIN73D,
      night: IMAGES.SKIN73N,
      dayHand: IMAGES.HAND_SKIN73D,
      nightHand: IMAGES.HAND_SKIN73N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Penguin"
    }, {
      id: 126,
      day: IMAGES.SKIN101D,
      night: IMAGES.SKIN101N,
      dayHand: IMAGES.HAND_SKIN101D,
      nightHand: IMAGES.HAND_SKIN101N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Boar"
    }, {
      id: 145,
      day: IMAGES.SKIN121D,
      night: IMAGES.SKIN121N,
      dayHand: IMAGES.HAND_SKIN121D,
      nightHand: IMAGES.HAND_SKIN121N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "I saw you"
    }, {
      id: 146,
      day: IMAGES.SKIN122D,
      night: IMAGES.SKIN122N,
      dayHand: IMAGES.HAND_SKIN122D,
      nightHand: IMAGES.HAND_SKIN122N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "It was funny"
    }, {
      id: 147,
      day: IMAGES.SKIN123D,
      night: IMAGES.SKIN123N,
      dayHand: IMAGES.HAND_SKIN123D,
      nightHand: IMAGES.HAND_SKIN123N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "You can scream"
    }, {
      id: 158,
      day: IMAGES.SKIN134D,
      night: IMAGES.SKIN134N,
      dayHand: IMAGES.HAND_SKIN134D,
      nightHand: IMAGES.HAND_SKIN134N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Mr. Book"
    }, {
      id: 163,
      day: IMAGES.SKIN139D,
      night: IMAGES.SKIN139N,
      dayHand: IMAGES.HAND_SKIN139D,
      nightHand: IMAGES.HAND_SKIN139N,
      rarity: RARITY.DIAMOND,
      author: "Anyone want to play?",
      name: "Mr. Mammoth"
    }, {
      id: 164,
      day: IMAGES.SKIN140D,
      night: IMAGES.SKIN140N,
      dayHand: IMAGES.HAND_SKIN140D,
      nightHand: IMAGES.HAND_SKIN140N,
      rarity: RARITY.DIAMOND,
      author: "SoOw",
      name: "Mr. Mammoth 2"
    }, {
      id: 161,
      day: IMAGES.SKIN137D,
      night: IMAGES.SKIN137N,
      dayHand: IMAGES.HAND_SKIN137D,
      nightHand: IMAGES.HAND_SKIN137N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Nightmare"
    }, {
      id: 168,
      day: IMAGES.SKIN144D,
      night: IMAGES.SKIN144N,
      dayHand: IMAGES.HAND_SKIN144D,
      nightHand: IMAGES.HAND_SKIN144N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Shiny Crystal"
    }, {
      id: 173,
      day: IMAGES.SKIN150D,
      night: IMAGES.SKIN150N,
      dayHand: IMAGES.HAND_SKIN150D,
      nightHand: IMAGES.HAND_SKIN150N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Water skin"
    }, {
      id: 42,
      day: IMAGES.SKIN14D,
      night: IMAGES.SKIN14N,
      dayHand: IMAGES.HAND_SKIN14D,
      nightHand: IMAGES.HAND_SKIN14N,
      rarity: RARITY.AMETHYST,
      author: "Winter",
      name: "Will-O'-The-Wisp"
    }, {
      id: 91,
      day: IMAGES.SKIN66D,
      night: IMAGES.SKIN66N,
      dayHand: IMAGES.HAND_SKIN66D,
      nightHand: IMAGES.HAND_SKIN66N,
      rarity: RARITY.AMETHYST,
      author: "ExpertyAnimations",
      name: "Flame"
    }, {
      id: 26,
      day: IMAGES.SKIN15D,
      night: IMAGES.SKIN15N,
      dayHand: IMAGES.HAND_SKIN15D,
      nightHand: IMAGES.HAND_SKIN15N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Be a Tree"
    }, {
      id: 38,
      day: IMAGES.SKIN18D,
      night: IMAGES.SKIN18N,
      dayHand: IMAGES.HAND_SKIN18D,
      nightHand: IMAGES.HAND_SKIN18N,
      rarity: RARITY.AMETHYST,
      author: "Winter",
      name: "Toxic Mutant"
    }, {
      id: 50,
      day: IMAGES.SKIN25D,
      night: IMAGES.SKIN25N,
      dayHand: IMAGES.HAND_SKIN25D,
      nightHand: IMAGES.HAND_SKIN25N,
      rarity: RARITY.AMETHYST,
      author: "Communist",
      name: "Mr. Tomato"
    }, {
      id: 54,
      day: IMAGES.SKIN29D,
      night: IMAGES.SKIN29N,
      dayHand: IMAGES.HAND_SKIN29D,
      nightHand: IMAGES.HAND_SKIN29N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. Mauve, the Lapa"
    }, {
      id: 57,
      day: IMAGES.SKIN32D,
      night: IMAGES.SKIN32N,
      dayHand: IMAGES.HAND_SKIN32D,
      nightHand: IMAGES.HAND_SKIN32N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Golden Fish"
    }, {
      id: 64,
      day: IMAGES.SKIN39D,
      night: IMAGES.SKIN39N,
      dayHand: IMAGES.HAND_SKIN39D,
      nightHand: IMAGES.HAND_SKIN39N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "LapaMauve"
    }, {
      id: 65,
      day: IMAGES.SKIN40D,
      night: IMAGES.SKIN40N,
      dayHand: IMAGES.HAND_SKIN40D,
      nightHand: IMAGES.HAND_SKIN40N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "LapaMauve "
    }, {
      id: 92,
      day: IMAGES.SKIN67D,
      night: IMAGES.SKIN67N,
      dayHand: IMAGES.HAND_SKIN67D,
      nightHand: IMAGES.HAND_SKIN67N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. Burger"
    }, {
      id: 66,
      day: IMAGES.SKIN41D,
      night: IMAGES.SKIN41N,
      dayHand: IMAGES.HAND_SKIN41D,
      nightHand: IMAGES.HAND_SKIN41N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Tropical Starver"
    }, {
      id: 80,
      day: IMAGES.SKIN55D,
      night: IMAGES.SKIN55N,
      dayHand: IMAGES.HAND_SKIN55D,
      nightHand: IMAGES.HAND_SKIN55N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. ShellPink"
    }, {
      id: 81,
      day: IMAGES.SKIN56D,
      night: IMAGES.SKIN56N,
      dayHand: IMAGES.HAND_SKIN56D,
      nightHand: IMAGES.HAND_SKIN56N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mr. OranShell"
    }, {
      id: 99,
      day: IMAGES.SKIN74D,
      night: IMAGES.SKIN74N,
      dayHand: IMAGES.HAND_SKIN74D,
      nightHand: IMAGES.HAND_SKIN74N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Pepe"
    }, {
      id: 100,
      day: IMAGES.SKIN75D,
      night: IMAGES.SKIN75N,
      dayHand: IMAGES.HAND_SKIN75D,
      nightHand: IMAGES.HAND_SKIN75N,
      rarity: RARITY.AMETHYST,
      author: "fatant",
      name: "Mr. Ant"
    }, {
      id: 115,
      day: IMAGES.SKIN90D,
      night: IMAGES.SKIN90N,
      dayHand: IMAGES.HAND_SKIN90D,
      nightHand: IMAGES.HAND_SKIN90N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Mr. Watermelon"
    }, {
      id: 101,
      day: IMAGES.SKIN76D,
      night: IMAGES.SKIN76N,
      dayHand: IMAGES.HAND_SKIN76D,
      nightHand: IMAGES.HAND_SKIN76N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Mr. Thornbush"
    }, {
      id: 131,
      day: IMAGES.SKIN106D,
      night: IMAGES.SKIN106N,
      dayHand: IMAGES.HAND_SKIN106D,
      nightHand: IMAGES.HAND_SKIN106N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Cthulhu"
    }, {
      id: 143,
      day: IMAGES.SKIN119D,
      night: IMAGES.SKIN119N,
      dayHand: IMAGES.HAND_SKIN119D,
      nightHand: IMAGES.HAND_SKIN119N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Mr. Cactus"
    }, {
      id: 144,
      day: IMAGES.SKIN120D,
      night: IMAGES.SKIN120N,
      dayHand: IMAGES.HAND_SKIN120D,
      nightHand: IMAGES.HAND_SKIN120N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Momo"
    }, {
      id: 95,
      day: IMAGES.SKIN70D,
      night: IMAGES.SKIN70N,
      dayHand: IMAGES.HAND_SKIN70D,
      nightHand: IMAGES.HAND_SKIN70N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Mr. Garlic"
    }, {
      id: 76,
      day: IMAGES.SKIN51D,
      night: IMAGES.SKIN51N,
      dayHand: IMAGES.HAND_SKIN51D,
      nightHand: IMAGES.HAND_SKIN51N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Robot Dragon"
    }, {
      id: 44,
      day: IMAGES.SKIN1D,
      night: IMAGES.SKIN1N,
      dayHand: IMAGES.HAND_SKIN1D,
      nightHand: IMAGES.HAND_SKIN1N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Dragon Version 1"
    }, {
      id: 90,
      day: IMAGES.SKIN65D,
      night: IMAGES.SKIN65N,
      dayHand: IMAGES.HAND_SKIN65D,
      nightHand: IMAGES.HAND_SKIN65N,
      rarity: RARITY.REIDITE,
      author: "ExpertyAnimations",
      name: "Lava Dragon Version 2"
    }, {
      id: 124,
      day: IMAGES.SKIN99D,
      night: IMAGES.SKIN99N,
      dayHand: IMAGES.HAND_SKIN99D,
      nightHand: IMAGES.HAND_SKIN99N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Dragon Version 3"
    }, {
      id: 45,
      day: IMAGES.SKIN12D,
      night: IMAGES.SKIN12N,
      dayHand: IMAGES.HAND_SKIN12D,
      nightHand: IMAGES.HAND_SKIN12N,
      rarity: RARITY.REIDITE,
      author: "Sushui",
      name: "Ice Dragon Version 1"
    }, {
      id: 46,
      day: IMAGES.SKIN13D,
      night: IMAGES.SKIN13N,
      dayHand: IMAGES.HAND_SKIN13D,
      nightHand: IMAGES.HAND_SKIN13N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Ice Dragon Version 2"
    }, {
      id: 108,
      day: IMAGES.SKIN83D,
      night: IMAGES.SKIN83N,
      dayHand: IMAGES.HAND_SKIN83D,
      nightHand: IMAGES.HAND_SKIN83N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Ice Dragon Version 3"
    }, {
      id: 123,
      day: IMAGES.SKIN98D,
      night: IMAGES.SKIN98N,
      dayHand: IMAGES.HAND_SKIN98D,
      nightHand: IMAGES.HAND_SKIN98N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Dragon Version 1"
    }, {
      id: 128,
      day: IMAGES.SKIN103D,
      night: IMAGES.SKIN103N,
      dayHand: IMAGES.HAND_SKIN103D,
      nightHand: IMAGES.HAND_SKIN103N,
      rarity: RARITY.REIDITE,
      author: "MADBalgouthi",
      name: "Baby Dragon Version 2"
    }, {
      id: 125,
      day: IMAGES.SKIN100D,
      night: IMAGES.SKIN100N,
      dayHand: IMAGES.HAND_SKIN100D,
      nightHand: IMAGES.HAND_SKIN100N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Lava"
    }, {
      id: 47,
      day: IMAGES.SKIN21D,
      night: IMAGES.SKIN21N,
      dayHand: IMAGES.HAND_SKIN21D,
      nightHand: IMAGES.HAND_SKIN21N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Kraken"
    }, {
      id: 129,
      day: IMAGES.SKIN104D,
      night: IMAGES.SKIN104N,
      dayHand: IMAGES.HAND_SKIN104D,
      nightHand: IMAGES.HAND_SKIN104N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Sandworm"
    }, {
      id: 63,
      day: IMAGES.SKIN38D,
      night: IMAGES.SKIN38N,
      dayHand: IMAGES.HAND_SKIN38D,
      nightHand: IMAGES.HAND_SKIN38N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Mr. Golden Bread"
    }, {
      id: 67,
      day: IMAGES.SKIN42D,
      night: IMAGES.SKIN42N,
      dayHand: IMAGES.HAND_SKIN42D,
      nightHand: IMAGES.HAND_SKIN42N,
      rarity: RARITY.REIDITE,
      author: "ForgottenHeroe",
      name: "Starver Ores"
    }, {
      id: 130,
      day: IMAGES.SKIN105D,
      night: IMAGES.SKIN105N,
      dayHand: IMAGES.HAND_SKIN105D,
      nightHand: IMAGES.HAND_SKIN105N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Poo"
    }, {
      id: 89,
      day: IMAGES.SKIN64D,
      night: IMAGES.SKIN64N,
      dayHand: IMAGES.HAND_SKIN64D,
      nightHand: IMAGES.HAND_SKIN64N,
      rarity: RARITY.REIDITE,
      author: "Poinet",
      name: "Volcano Starver"
    }, {
      id: 112,
      day: IMAGES.SKIN87D,
      night: IMAGES.SKIN87N,
      dayHand: IMAGES.HAND_SKIN87D,
      nightHand: IMAGES.HAND_SKIN87N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Starver"
    }, {
      id: 48,
      day: IMAGES.SKIN_ROBOTD,
      night: IMAGES.SKIN_ROBOTN,
      dayHand: IMAGES.HAND_ROBOTD,
      nightHand: IMAGES.HAND_ROBOTN,
      rarity: RARITY.SPECIAL,
      author: "eogito",
      name: "Robot"
    }, {
      id: 110,
      day: IMAGES.SKIN85D,
      night: IMAGES.SKIN85N,
      dayHand: IMAGES.HAND_SKIN85D,
      nightHand: IMAGES.HAND_SKIN85N,
      rarity: RARITY.SPECIAL,
      author: "pizza wa",
      name: "Blue Butterfly"
    }, {
      id: 157,
      day: IMAGES.SKIN133D,
      night: IMAGES.SKIN133N,
      dayHand: IMAGES.HAND_SKIN133D,
      nightHand: IMAGES.HAND_SKIN133N,
      rarity: RARITY.SPECIAL,
      author: "eogito",
      name: "Yrifox"
    }, {
      id: 165,
      day: IMAGES.SKIN141D,
      night: IMAGES.SKIN141N,
      dayHand: IMAGES.HAND_SKIN141D,
      nightHand: IMAGES.HAND_SKIN141N,
      rarity: RARITY.SPECIAL,
      author: "OmarJr13",
      name: "Blob Skin"
    }],
    BAG: [{
      id: 0,
      day: IMAGES.BAGD,
      night: IMAGES.BAGN,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Bag 1"
    }, {
      id: 1,
      day: IMAGES.BAG0D,
      night: IMAGES.BAG0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Old Bag"
    }, {
      id: 2,
      day: IMAGES.BAG4D,
      night: IMAGES.BAG4N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 2"
    }, {
      id: 3,
      day: IMAGES.BAG5D,
      night: IMAGES.BAG5N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 3"
    }, {
      id: 4,
      day: IMAGES.BAG6D,
      night: IMAGES.BAG6N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 4"
    }, {
      id: 5,
      day: IMAGES.BAG7D,
      night: IMAGES.BAG7N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bag 5"
    }, {
      id: 11,
      day: IMAGES.BAG23D,
      night: IMAGES.BAG23N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wood Pickaxe Bag"
    }, {
      id: 19,
      day: IMAGES.BAG16D,
      night: IMAGES.BAG16N,
      rarity: RARITY.WOOD,
      author: "Starve.io ",
      name: "Wood Carrier"
    }, {
      id: 37,
      day: IMAGES.BAG36D,
      night: IMAGES.BAG36N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bag 6"
    }, {
      id: 39,
      day: IMAGES.BAG38D,
      night: IMAGES.BAG38N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bag with Wooden Swords"
    }, {
      id: 44,
      day: IMAGES.BAG43D,
      night: IMAGES.BAG43N,
      rarity: RARITY.WOOD,
      author: "Communist",
      name: "Big Bag"
    }, {
      id: 7,
      day: IMAGES.BAG14D,
      night: IMAGES.BAG14N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Bag 6"
    }, {
      id: 8,
      day: IMAGES.BAG_EASTERD,
      night: IMAGES.BAG_EASTERN,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Easter Bag"
    }, {
      id: 9,
      day: IMAGES.BAG_STARD,
      night: IMAGES.BAG_STARN,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Bag"
    }, {
      id: 10,
      day: IMAGES.BAG9D,
      night: IMAGES.BAG9N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Winter Bag"
    }, {
      id: 20,
      day: IMAGES.BAG17D,
      night: IMAGES.BAG17N,
      rarity: RARITY.STONE,
      author: "Starve.io ",
      name: "Stone Carrier"
    }, {
      id: 24,
      day: IMAGES.BAG24D,
      night: IMAGES.BAG24N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Stone Pickaxe Bag"
    }, {
      id: 6,
      day: IMAGES.BAG13D,
      night: IMAGES.BAG13N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Bag Camouflage"
    }, {
      id: 38,
      day: IMAGES.BAG37D,
      night: IMAGES.BAG37N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Bag with Stone Swords"
    }, {
      id: 54,
      day: IMAGES.BAG53D,
      night: IMAGES.BAG53N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Cow Bag"
    }, {
      id: 59,
      day: IMAGES.BAG58D,
      night: IMAGES.BAG58N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Starver Bag"
    }, {
      id: 62,
      day: IMAGES.BAG61D,
      night: IMAGES.BAG61N,
      rarity: RARITY.STONE,
      author: "CrysTal",
      name: "Crystal Sky Bag"
    }, {
      id: 13,
      day: IMAGES.BAG10D,
      night: IMAGES.BAG10N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Honey Pot"
    }, {
      id: 21,
      day: IMAGES.BAG18D,
      night: IMAGES.BAG18N,
      rarity: RARITY.GOLD,
      author: "Starve.io ",
      name: "Gold Carrier"
    }, {
      id: 30,
      day: IMAGES.BAG25D,
      night: IMAGES.BAG25N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Gold Pickaxe Bag"
    }, {
      id: 29,
      day: IMAGES.BAG31D,
      night: IMAGES.BAG31N,
      rarity: RARITY.GOLD,
      author: "Ariel",
      name: "Mr and Mrs Bakers"
    }, {
      id: 41,
      day: IMAGES.BAG40D,
      night: IMAGES.BAG40N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Bag with Golden Swords"
    }, {
      id: 47,
      day: IMAGES.BAG46D,
      night: IMAGES.BAG46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Explorer Bag"
    }, {
      id: 51,
      day: IMAGES.BAG50D,
      night: IMAGES.BAG50N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Bamboo Bag"
    }, {
      id: 53,
      day: IMAGES.BAG52D,
      night: IMAGES.BAG52N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mummy Bag"
    }, {
      id: 58,
      day: IMAGES.BAG57D,
      night: IMAGES.BAG57N,
      rarity: RARITY.GOLD,
      author: "MADBalgouthi",
      name: "Watermelon Bag"
    }, {
      id: 60,
      day: IMAGES.BAG59D,
      night: IMAGES.BAG60N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Garlic Bag"
    }, {
      id: 61,
      day: IMAGES.BAG60D,
      night: IMAGES.BAG59N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Pumpkin Bag"
    }, {
      id: 64,
      day: IMAGES.BAG63D,
      night: IMAGES.BAG63N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Oil Barel bag"
    }, {
      id: 67,
      day: IMAGES.BAG68D,
      night: IMAGES.BAG68N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Tree Bag"
    }, {
      id: 14,
      day: IMAGES.BAG1D,
      night: IMAGES.BAG1N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Rabbit in my Bag"
    }, {
      id: 15,
      day: IMAGES.BAG2D,
      night: IMAGES.BAG2N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Bird's nest"
    }, {
      id: 16,
      day: IMAGES.BAG3D,
      night: IMAGES.BAG3N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Fish on your Back"
    }, {
      id: 17,
      day: IMAGES.BAG8D,
      night: IMAGES.BAG8N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "a Squirrel in my Bag"
    }, {
      id: 22,
      day: IMAGES.BAG19D,
      night: IMAGES.BAG19N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io ",
      name: "Diamond Carrier"
    }, {
      id: 12,
      day: IMAGES.BAG22D,
      night: IMAGES.BAG22N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Resources Bag"
    }, {
      id: 32,
      day: IMAGES.BAG26D,
      night: IMAGES.BAG26N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Diamond Pickaxe Bag"
    }, {
      id: 40,
      day: IMAGES.BAG39D,
      night: IMAGES.BAG39N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Bag with Diamond Swords"
    }, {
      id: 45,
      day: IMAGES.BAG44D,
      night: IMAGES.BAG44N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "My Cake Bag"
    }, {
      id: 46,
      day: IMAGES.BAG45D,
      night: IMAGES.BAG45N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "My Christmas Cake Bag"
    }, {
      id: 52,
      day: IMAGES.BAG51D,
      night: IMAGES.BAG51N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish Bag"
    }, {
      id: 65,
      day: IMAGES.BAG64D,
      night: IMAGES.BAG64N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Cloud Bag"
    }, {
      id: 68,
      day: IMAGES.BAG66D,
      night: IMAGES.BAG66N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Bee Bag"
    }, {
      id: 48,
      day: IMAGES.BAG47D,
      night: IMAGES.BAG47N,
      rarity: RARITY.AMETHYST,
      author: "fatant",
      name: "Natural Bag"
    }, {
      id: 23,
      day: IMAGES.BAG20D,
      night: IMAGES.BAG20N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io ",
      name: "Amethyst Carrier"
    }, {
      id: 25,
      day: IMAGES.BAG27D,
      night: IMAGES.BAG27N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Amethyst Pickaxe Bag"
    }, {
      id: 28,
      day: IMAGES.BAG30D,
      night: IMAGES.BAG30N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Your Baby"
    }, {
      id: 33,
      day: IMAGES.BAG32D,
      night: IMAGES.BAG32N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Tropical Bag"
    }, {
      id: 43,
      day: IMAGES.BAG42D,
      night: IMAGES.BAG42N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Bag with Amethyst Swords"
    }, {
      id: 35,
      day: IMAGES.BAG34D,
      night: IMAGES.BAG34N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Ice Bag"
    }, {
      id: 50,
      day: IMAGES.BAG49D,
      night: IMAGES.BAG49N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Bag"
    }, {
      id: 56,
      day: IMAGES.BAG55D,
      night: IMAGES.BAG55N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Autumn Bag"
    }, {
      id: 57,
      day: IMAGES.BAG56D,
      night: IMAGES.BAG56N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Dino Egg Bag"
    }, {
      id: 66,
      day: IMAGES.BAG65D,
      night: IMAGES.BAG65N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Magic Cloud Bag"
    }, {
      id: 69,
      day: IMAGES.BAG67D,
      night: IMAGES.BAG67N,
      rarity: RARITY.AMETHYST,
      author: "pizza wa",
      name: "Chest Bag"
    }, {
      id: 31,
      day: IMAGES.BAG21D,
      night: IMAGES.BAG21N,
      rarity: RARITY.REIDITE,
      author: "Starve.io ",
      name: "Reidite Carrier"
    }, {
      id: 18,
      day: IMAGES.BAG11D,
      night: IMAGES.BAG11N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Bag"
    }, {
      id: 49,
      day: IMAGES.BAG48D,
      night: IMAGES.BAG48N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Bag 2"
    }, {
      id: 36,
      day: IMAGES.BAG35D,
      night: IMAGES.BAG35N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Bag"
    }, {
      id: 55,
      day: IMAGES.BAG54D,
      night: IMAGES.BAG54N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Ice Bag"
    }, {
      id: 26,
      day: IMAGES.BAG28D,
      night: IMAGES.BAG28N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Reidite Pickaxe Bag"
    }, {
      id: 27,
      day: IMAGES.BAG29D,
      night: IMAGES.BAG29N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Octopus Bowl"
    }, {
      id: 34,
      day: IMAGES.BAG33D,
      night: IMAGES.BAG33N,
      rarity: RARITY.REIDITE,
      author: "Taco4Life",
      name: "Cave Bag"
    }, {
      id: 42,
      day: IMAGES.BAG41D,
      night: IMAGES.BAG41N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Bag with Reidite Swords"
    }, {
      id: 63,
      day: IMAGES.BAG62D,
      night: IMAGES.BAG62N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Bag"
    }],
    CRATE: [{
      id: 0,
      day: IMAGES.CRATE7D,
      night: IMAGES.CRATE7N,
      rarity: RARITY.FREE,
      author: "eogito",
      name: "Wooden Dead Box"
    }, {
      id: 1,
      day: IMAGES.CRATE6D,
      night: IMAGES.CRATE6N,
      rarity: RARITY.FREE,
      author: "eogito",
      name: "Hidden item"
    }, {
      id: 2,
      day: IMAGES.CRATE1D,
      night: IMAGES.CRATE1N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 1"
    }, {
      id: 3,
      day: IMAGES.CRATE2D,
      night: IMAGES.CRATE2N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 2"
    }, {
      id: 4,
      day: IMAGES.CRATE3D,
      night: IMAGES.CRATE3N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box 3"
    }, {
      id: 5,
      day: IMAGES.CRATE4D,
      night: IMAGES.CRATE4N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Broken Wooden Box"
    }, {
      id: 6,
      day: IMAGES.CRATE5D,
      night: IMAGES.CRATE5N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box"
    }, {
      id: 7,
      day: IMAGES.CRATE8D,
      night: IMAGES.CRATE8N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Battle Box"
    }, {
      id: 8,
      day: IMAGES.CRATE9D,
      night: IMAGES.CRATE9N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with a Cross"
    }, {
      id: 9,
      day: IMAGES.CRATE10D,
      night: IMAGES.CRATE10N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with Bubbles"
    }, {
      id: 10,
      day: IMAGES.CRATE11D,
      night: IMAGES.CRATE11N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Wooden Box with Eyes"
    }, {
      id: 11,
      day: IMAGES.CRATE12D,
      night: IMAGES.CRATE12N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Dark Wooden Box"
    }, {
      id: 38,
      day: IMAGES.CRATE39D,
      night: IMAGES.CRATE39N,
      rarity: RARITY.WOOD,
      author: "Weddlz",
      name: "Noob Box"
    }, {
      id: 12,
      day: IMAGES.CRATE13D,
      night: IMAGES.CRATE13N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Wooden and Stone Box"
    }, {
      id: 14,
      day: IMAGES.CRATE19D,
      night: IMAGES.CRATE19N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Box 1"
    }, {
      id: 15,
      day: IMAGES.CRATE20D,
      night: IMAGES.CRATE20N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Star Box 2"
    }, {
      id: 27,
      day: IMAGES.CRATE29D,
      night: IMAGES.CRATE29N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Flower Box"
    }, {
      id: 46,
      day: IMAGES.CRATE47D,
      night: IMAGES.CRATE47N,
      rarity: RARITY.STONE,
      author: "MADBalgouthi",
      name: "Blue Box"
    }, {
      id: 19,
      day: IMAGES.CRATE21D,
      night: IMAGES.CRATE21N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Beehive"
    }, {
      id: 13,
      day: IMAGES.CRATE14D,
      night: IMAGES.CRATE14N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Wooden and Golden Box"
    }, {
      id: 21,
      day: IMAGES.CRATE22D,
      night: IMAGES.CRATE22N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Gravestone"
    }, {
      id: 25,
      day: IMAGES.CRATE26D,
      night: IMAGES.CRATE26N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Sky Box"
    }, {
      id: 29,
      day: IMAGES.CRATE30D,
      night: IMAGES.CRATE30N,
      rarity: RARITY.GOLD,
      author: "Winter",
      name: "Golden Box"
    }, {
      id: 34,
      day: IMAGES.CRATE35D,
      night: IMAGES.CRATE35N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Water Crate"
    }, {
      id: 35,
      day: IMAGES.CRATE36D,
      night: IMAGES.CRATE36N,
      rarity: RARITY.GOLD,
      author: "Communist",
      name: "Glass Crate"
    }, {
      id: 16,
      day: IMAGES.CRATE15D,
      night: IMAGES.CRATE15N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Wooden and Diamond Box"
    }, {
      id: 18,
      day: IMAGES.CRATE18D,
      night: IMAGES.CRATE18N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Don't Hit Me"
    }, {
      id: 26,
      day: IMAGES.CRATE27D,
      night: IMAGES.CRATE27N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Underwater Box"
    }, {
      id: 31,
      day: IMAGES.CRATE32D,
      night: IMAGES.CRATE32N,
      rarity: RARITY.DIAMOND,
      author: "Communist",
      name: "Items Pile"
    }, {
      id: 32,
      day: IMAGES.CRATE33D,
      night: IMAGES.CRATE33N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Cake Box"
    }, {
      id: 33,
      day: IMAGES.CRATE34D,
      night: IMAGES.CRATE34N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Christmas Cake Box"
    }, {
      id: 36,
      day: IMAGES.CRATE37D,
      night: IMAGES.CRATE37N,
      rarity: RARITY.DIAMOND,
      author: "Fukss",
      name: "Crab Box"
    }, {
      id: 42,
      day: IMAGES.CRATE43D,
      night: IMAGES.CRATE43N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fishing Box"
    }, {
      id: 22,
      day: IMAGES.CRATE23D,
      night: IMAGES.CRATE23N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Let me out of here"
    }, {
      id: 17,
      day: IMAGES.CRATE16D,
      night: IMAGES.CRATE16N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Wooden and Amethyst Box"
    }, {
      id: 24,
      day: IMAGES.CRATE25D,
      night: IMAGES.CRATE25N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Aquarium"
    }, {
      id: 28,
      day: IMAGES.CRATE28D,
      night: IMAGES.CRATE28N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Gift Box"
    }, {
      id: 40,
      day: IMAGES.CRATE41D,
      night: IMAGES.CRATE41N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Open Watermelon Box"
    }, {
      id: 41,
      day: IMAGES.CRATE42D,
      night: IMAGES.CRATE42N,
      rarity: RARITY.AMETHYST,
      author: "MADBalgouthi",
      name: "Watermelon Box"
    }, {
      id: 39,
      day: IMAGES.CRATE40D,
      night: IMAGES.CRATE40N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Box"
    }, {
      id: 43,
      day: IMAGES.CRATE44D,
      night: IMAGES.CRATE44N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Rabbit in the Box"
    }, {
      id: 47,
      day: IMAGES.CRATE48D,
      night: IMAGES.CRATE48N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Garlic Plot"
    }, {
      id: 48,
      day: IMAGES.CRATE49D,
      night: IMAGES.CRATE49N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Pumpkin Plot"
    }, {
      id: 45,
      day: IMAGES.CRATE46D,
      night: IMAGES.CRATE46N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Autumn Box"
    }, {
      id: 44,
      day: IMAGES.CRATE45D,
      night: IMAGES.CRATE45N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Box"
    }, {
      id: 20,
      day: IMAGES.CRATE17D,
      night: IMAGES.CRATE17N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Metal and Reidite Box"
    }, {
      id: 23,
      day: IMAGES.CRATE24D,
      night: IMAGES.CRATE24N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Kraken Box"
    }, {
      id: 30,
      day: IMAGES.CRATE31D,
      night: IMAGES.CRATE31N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Box"
    }, {
      id: 37,
      day: IMAGES.CRATE38D,
      night: IMAGES.CRATE38N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Box 2"
    }, {
      id: 49,
      day: IMAGES.CRATE50D,
      night: IMAGES.CRATE50N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Rabbit"
    }, {
      id: 50,
      day: IMAGES.CRATE51D,
      night: IMAGES.CRATE51N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Wolf"
    }, {
      id: 51,
      day: IMAGES.CRATE52D,
      night: IMAGES.CRATE52N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Spider"
    }, {
      id: 52,
      day: IMAGES.CRATE53D,
      night: IMAGES.CRATE53N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Hawk"
    }, {
      id: 53,
      day: IMAGES.CRATE54D,
      night: IMAGES.CRATE54N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Bear"
    }, {
      id: 54,
      day: IMAGES.CRATE55D,
      night: IMAGES.CRATE55N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Fox"
    }, {
      id: 55,
      day: IMAGES.CRATE56D,
      night: IMAGES.CRATE56N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Mammoth"
    }, {
      id: 56,
      day: IMAGES.CRATE57D,
      night: IMAGES.CRATE57N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Mammoth"
    }, {
      id: 57,
      day: IMAGES.CRATE58D,
      night: IMAGES.CRATE58N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Sandworm"
    }, {
      id: 58,
      day: IMAGES.CRATE59D,
      night: IMAGES.CRATE59N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Vulture"
    }, {
      id: 59,
      day: IMAGES.CRATE60D,
      night: IMAGES.CRATE60N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Kraken"
    }, {
      id: 60,
      day: IMAGES.CRATE61D,
      night: IMAGES.CRATE61N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Piranha"
    }, {
      id: 61,
      day: IMAGES.CRATE62D,
      night: IMAGES.CRATE62N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Dragon"
    }, {
      id: 62,
      day: IMAGES.CRATE63D,
      night: IMAGES.CRATE63N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Baby Lava"
    }, {
      id: 63,
      day: IMAGES.CRATE64D,
      night: IMAGES.CRATE64N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Dragon"
    }, {
      id: 64,
      day: IMAGES.CRATE65D,
      night: IMAGES.CRATE65N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Penguin"
    }, {
      id: 65,
      day: IMAGES.CRATE66D,
      night: IMAGES.CRATE66N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Lava Dragon"
    }, {
      id: 66,
      day: IMAGES.CRATE67D,
      night: IMAGES.CRATE67N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Boar"
    }, {
      id: 67,
      day: IMAGES.CRATE68D,
      night: IMAGES.CRATE68N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Fire mob"
    }, {
      id: 68,
      day: IMAGES.CRATE69D,
      night: IMAGES.CRATE69N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the Crab"
    }, {
      id: 69,
      day: IMAGES.CRATE70D,
      night: IMAGES.CRATE70N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Box of the King Crab"
    }, {
      id: 70,
      day: IMAGES.CRATE71D,
      night: IMAGES.CRATE71N,
      rarity: RARITY.GOLD,
      author: "CrysTal",
      name: "Crystal Sky Box"
    }, {
      id: 71,
      day: IMAGES.CRATE72D,
      night: IMAGES.CRATE72N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Box"
    }],
    BOOK: [{
      id: 0,
      day: IMAGES.BOOK0D,
      night: IMAGES.BOOK0N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Book 1"
    }, {
      id: 1,
      day: IMAGES.BOOK3D,
      night: IMAGES.BOOK3N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 2"
    }, {
      id: 2,
      day: IMAGES.BOOK4D,
      night: IMAGES.BOOK4N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 3"
    }, {
      id: 3,
      day: IMAGES.BOOK5D,
      night: IMAGES.BOOK5N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Book 4"
    }, {
      id: 4,
      day: IMAGES.BOOK6D,
      night: IMAGES.BOOK6N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Damaged Book 1"
    }, {
      id: 18,
      day: IMAGES.BOOK18D,
      night: IMAGES.BOOK18N,
      rarity: RARITY.WOOD,
      author: "SeveR",
      name: "Damaged Book 2"
    }, {
      id: 5,
      day: IMAGES.BOOK1D,
      night: IMAGES.BOOK1N,
      rarity: RARITY.STONE,
      author: "Doctorpus",
      name: "Scroll"
    }, {
      id: 6,
      day: IMAGES.BOOK2D,
      night: IMAGES.BOOK2N,
      rarity: RARITY.STONE,
      author: "Doctorpus",
      name: "Clipboard"
    }, {
      id: 7,
      day: IMAGES.BOOK7D,
      night: IMAGES.BOOK7N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Seed Book"
    }, {
      id: 20,
      day: IMAGES.BOOK20D,
      night: IMAGES.BOOK20N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Camo Book"
    }, {
      id: 24,
      day: IMAGES.BOOK24D,
      night: IMAGES.BOOK24N,
      rarity: RARITY.STONE,
      author: "Communist",
      name: "Stone Tablet"
    }, {
      id: 10,
      day: IMAGES.BOOK13D,
      night: IMAGES.BOOK13N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Star Book"
    }, {
      id: 8,
      day: IMAGES.BOOK9D,
      night: IMAGES.BOOK9N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Gold Book"
    }, {
      id: 15,
      day: IMAGES.BOOK15D,
      night: IMAGES.BOOK15N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Old Mysterious Paper"
    }, {
      id: 17,
      day: IMAGES.BOOK17D,
      night: IMAGES.BOOK17N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Gold Engraving"
    }, {
      id: 25,
      day: IMAGES.BOOK25D,
      night: IMAGES.BOOK25N,
      rarity: RARITY.GOLD,
      author: "fatant",
      name: "Ant Book"
    }, {
      id: 32,
      day: IMAGES.BOOK32D,
      night: IMAGES.BOOK32N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Mummy Book"
    }, {
      id: 37,
      day: IMAGES.BOOK39D,
      night: IMAGES.BOOK39N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Garlic Book"
    }, {
      id: 38,
      day: IMAGES.BOOK38D,
      night: IMAGES.BOOK38N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Pumpkin Book"
    }, {
      id: 39,
      day: IMAGES.BOOK40D,
      night: IMAGES.BOOK40N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Christmas Tree Book"
    }, {
      id: 11,
      day: IMAGES.BOOK10D,
      night: IMAGES.BOOK10N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Diamond Book"
    }, {
      id: 9,
      day: IMAGES.BOOK8D,
      night: IMAGES.BOOK8N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Obscure Book"
    }, {
      id: 16,
      day: IMAGES.BOOK16D,
      night: IMAGES.BOOK16N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Rolled Parchment"
    }, {
      id: 22,
      day: IMAGES.BOOK22D,
      night: IMAGES.BOOK22N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Cake Book"
    }, {
      id: 23,
      day: IMAGES.BOOK23D,
      night: IMAGES.BOOK23N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Christmas Cake Book"
    }, {
      id: 30,
      day: IMAGES.BOOK30D,
      night: IMAGES.BOOK30N,
      rarity: RARITY.DIAMOND,
      author: "MADBalgouthi",
      name: "Fish Book"
    }, {
      id: 31,
      day: IMAGES.BOOK31D,
      night: IMAGES.BOOK31N,
      rarity: RARITY.DIAMOND,
      author: "CrysTal",
      name: "Once upon a time"
    }, {
      id: 13,
      day: IMAGES.BOOK11D,
      night: IMAGES.BOOK11N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Amethyst Book"
    }, {
      id: 28,
      day: IMAGES.BOOK28D,
      night: IMAGES.BOOK28N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Paint Pallet"
    }, {
      id: 29,
      day: IMAGES.BOOK29D,
      night: IMAGES.BOOK29N,
      rarity: RARITY.AMETHYST,
      author: "CrysTal",
      name: "Watermelon Book"
    }, {
      id: 27,
      day: IMAGES.BOOK27D,
      night: IMAGES.BOOK27N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Thornbush Book"
    }, {
      id: 35,
      day: IMAGES.BOOK35D,
      night: IMAGES.BOOK35N,
      rarity: RARITY.AMETHYST,
      author: "Taco4Life",
      name: "Menu"
    }, {
      id: 36,
      day: IMAGES.BOOK36D,
      night: IMAGES.BOOK36N,
      rarity: RARITY.AMETHYST,
      author: "CrysTal",
      name: "Lover Letter"
    }, {
      id: 40,
      day: IMAGES.BOOK41D,
      night: IMAGES.BOOK41N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Fresh-Baked Cookies"
    }, {
      id: 41,
      day: IMAGES.BOOK42D,
      night: IMAGES.BOOK42N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Inside, there is just a book."
    }, {
      id: 33,
      day: IMAGES.BOOK33D,
      night: IMAGES.BOOK33N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Winter Book"
    }, {
      id: 34,
      day: IMAGES.BOOK34D,
      night: IMAGES.BOOK34N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Autumn Book"
    }, {
      id: 14,
      day: IMAGES.BOOK12D,
      night: IMAGES.BOOK12N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Reidite Book"
    }, {
      id: 12,
      day: IMAGES.BOOK14D,
      night: IMAGES.BOOK14N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Lava Book"
    }, {
      id: 26,
      day: IMAGES.BOOK26D,
      night: IMAGES.BOOK26N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Lava Book 2"
    }, {
      id: 19,
      day: IMAGES.BOOK19D,
      night: IMAGES.BOOK19N,
      rarity: RARITY.REIDITE,
      author: "Winter",
      name: "Ocean Mystery"
    }, {
      id: 21,
      day: IMAGES.BOOK21D,
      night: IMAGES.BOOK21N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Dragon Book"
    }, {
      id: 42,
      day: IMAGES.BOOK43D,
      night: IMAGES.BOOK43N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Book"
    }, {
      id: 43,
      day: IMAGES.BOOK44D,
      night: IMAGES.BOOK44N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Nightmare Book"
    }, {
      id: 44,
      day: IMAGES.BOOK45D,
      night: IMAGES.BOOK45N,
      rarity: RARITY.REIDITE,
      author: "aloner",
      name: "Mystery Book"
    }],
    ACCESSORY: [{
      id: 0,
      day: IMAGES.ACCESSORY0D,
      night: IMAGES.ACCESSORY0D,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Nothing"
    }, {
      id: 2,
      day: IMAGES.ACCESSORY4D,
      night: IMAGES.ACCESSORY4N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Pink Cheeks"
    }, {
      id: 3,
      day: IMAGES.ACCESSORY5D,
      night: IMAGES.ACCESSORY5N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Heart"
    }, {
      id: 1,
      day: IMAGES.ACCESSORY3D,
      night: IMAGES.ACCESSORY3N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Bandage 1"
    }, {
      id: 4,
      day: IMAGES.ACCESSORY6D,
      night: IMAGES.ACCESSORY6N,
      rarity: RARITY.FREE,
      author: "Starve.io",
      name: "Flower 1"
    }, {
      id: 5,
      day: IMAGES.ACCESSORY8D,
      night: IMAGES.ACCESSORY8N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Bow 1"
    }, {
      id: 6,
      day: IMAGES.ACCESSORY9D,
      night: IMAGES.ACCESSORY9N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bandage 2"
    }, {
      id: 7,
      day: IMAGES.ACCESSORY15D,
      night: IMAGES.ACCESSORY15N,
      rarity: RARITY.WOOD,
      author: "Starve.io",
      name: "Flower 2"
    }, {
      id: 8,
      day: IMAGES.ACCESSORY10D,
      night: IMAGES.ACCESSORY10N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Bandage 3"
    }, {
      id: 36,
      day: IMAGES.ACCESSORY36D,
      night: IMAGES.ACCESSORY36N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Foliage"
    }, {
      id: 59,
      day: IMAGES.ACCESSORY47D,
      night: IMAGES.ACCESSORY47N,
      rarity: RARITY.WOOD,
      author: "eogito",
      name: "Peaceful"
    }, {
      id: 67,
      day: IMAGES.ACCESSORY55D,
      night: IMAGES.ACCESSORY55N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Sparkles"
    }, {
      id: 68,
      day: IMAGES.ACCESSORY56D,
      night: IMAGES.ACCESSORY56N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Luxury"
    }, {
      id: 69,
      day: IMAGES.ACCESSORY57D,
      night: IMAGES.ACCESSORY57N,
      rarity: RARITY.WOOD,
      author: "pizza wa",
      name: "Snow Flakes Crown"
    }, {
      id: 17,
      day: IMAGES.ACCESSORY17D,
      night: IMAGES.ACCESSORY17N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Glasses 1"
    }, {
      id: 10,
      day: IMAGES.ACCESSORY7D,
      night: IMAGES.ACCESSORY7N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Bow 2"
    }, {
      id: 11,
      day: IMAGES.ACCESSORY13D,
      night: IMAGES.ACCESSORY13N,
      rarity: RARITY.STONE,
      author: "pizza wa",
      name: "Little Stars"
    }, {
      id: 12,
      day: IMAGES.ACCESSORY11D,
      night: IMAGES.ACCESSORY11N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Pirate Eye Patch 1"
    }, {
      id: 44,
      day: IMAGES.ACCESSORY44D,
      night: IMAGES.ACCESSORY44N,
      rarity: RARITY.STONE,
      author: "Taco4Life",
      name: "Pirate Eye Patch 2"
    }, {
      id: 23,
      day: IMAGES.ACCESSORY23D,
      night: IMAGES.ACCESSORY23N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Clown nose"
    }, {
      id: 16,
      day: IMAGES.ACCESSORY2D,
      night: IMAGES.ACCESSORY2N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Eye Patch"
    }, {
      id: 30,
      day: IMAGES.ACCESSORY30D,
      night: IMAGES.ACCESSORY30N,
      rarity: RARITY.STONE,
      author: "eogito",
      name: "Flower 3"
    }, {
      id: 38,
      day: IMAGES.ACCESSORY38D,
      night: IMAGES.ACCESSORY38N,
      rarity: RARITY.STONE,
      author: "Winter",
      name: "False Nose"
    }, {
      id: 74,
      day: IMAGES.ACCESSORY62D,
      night: IMAGES.ACCESSORY62N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Red Cloth"
    }, {
      id: 75,
      day: IMAGES.ACCESSORY63D,
      night: IMAGES.ACCESSORY63N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Blue Cloth"
    }, {
      id: 79,
      day: IMAGES.ACCESSORY67D,
      night: IMAGES.ACCESSORY67N,
      rarity: RARITY.STONE,
      author: "Starve.io",
      name: "Transparent Mask"
    }, {
      id: 89,
      day: IMAGES.ACCESSORY77D,
      night: IMAGES.ACCESSORY77N,
      rarity: RARITY.STONE,
      author: "Anyone want to play?",
      name: "Starve.io Anime"
    }, {
      id: 94,
      day: IMAGES.ACCESSORY78D,
      night: IMAGES.ACCESSORY78N,
      rarity: RARITY.STONE,
      author: "Ant",
      name: "Hero Mask"
    }, {
      id: 15,
      day: IMAGES.ACCESSORY16D,
      night: IMAGES.ACCESSORY16N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Star Glasses"
    }, {
      id: 21,
      day: IMAGES.ACCESSORY21D,
      night: IMAGES.ACCESSORY21N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Great-aunt's Glasses"
    }, {
      id: 24,
      day: IMAGES.ACCESSORY24D,
      night: IMAGES.ACCESSORY24N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Little Starver"
    }, {
      id: 22,
      day: IMAGES.ACCESSORY22D,
      night: IMAGES.ACCESSORY22N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Little Glasses"
    }, {
      id: 13,
      day: IMAGES.ACCESSORY14D,
      night: IMAGES.ACCESSORY14N,
      rarity: RARITY.GOLD,
      author: "Starve.io",
      name: "Flower Chain"
    }, {
      id: 29,
      day: IMAGES.ACCESSORY29D,
      night: IMAGES.ACCESSORY29N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Horns"
    }, {
      id: 31,
      day: IMAGES.ACCESSORY31D,
      night: IMAGES.ACCESSORY31N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Golden Flower"
    }, {
      id: 40,
      day: IMAGES.ACCESSORY40D,
      night: IMAGES.ACCESSORY40N,
      rarity: RARITY.GOLD,
      author: "pizza wa",
      name: "Sleeping Mask"
    }, {
      id: 57,
      day: IMAGES.ACCESSORY50D,
      night: IMAGES.ACCESSORY50N,
      rarity: RARITY.GOLD,
      author: "Taco4Life",
      name: "Fish on your head"
    }, {
      id: 58,
      day: IMAGES.ACCESSORY46D,
      night: IMAGES.ACCESSORY46N,
      rarity: RARITY.GOLD,
      author: "eogito",
      name: "Rose"
    }, {
      id: 91,
      day: IMAGES.ACCESSORY80D,
      night: IMAGES.ACCESSORY80N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Grey Scarf"
    }, {
      id: 92,
      day: IMAGES.ACCESSORY81D,
      night: IMAGES.ACCESSORY81N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Black Scarf"
    }, {
      id: 93,
      day: IMAGES.ACCESSORY82D,
      night: IMAGES.ACCESSORY82N,
      rarity: RARITY.GOLD,
      author: "upfiz",
      name: "Skull Mask"
    }, {
      id: 9,
      day: IMAGES.ACCESSORY1D,
      night: IMAGES.ACCESSORY1N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Fancy Glasses"
    }, {
      id: 25,
      day: IMAGES.ACCESSORY25D,
      night: IMAGES.ACCESSORY25N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Medecin Mask"
    }, {
      id: 14,
      day: IMAGES.ACCESSORY12D,
      night: IMAGES.ACCESSORY12N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mr. Mayor"
    }, {
      id: 19,
      day: IMAGES.ACCESSORY19D,
      night: IMAGES.ACCESSORY19N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Sunglasses 2"
    }, {
      id: 28,
      day: IMAGES.ACCESSORY28D,
      night: IMAGES.ACCESSORY28N,
      rarity: RARITY.DIAMOND,
      author: "pizza wa",
      name: "Starfish"
    }, {
      id: 37,
      day: IMAGES.ACCESSORY37D,
      night: IMAGES.ACCESSORY37N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Berry"
    }, {
      id: 39,
      day: IMAGES.ACCESSORY39D,
      night: IMAGES.ACCESSORY39N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Flake"
    }, {
      id: 43,
      day: IMAGES.ACCESSORY43D,
      night: IMAGES.ACCESSORY43N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Leaf "
    }, {
      id: 61,
      day: IMAGES.ACCESSORY49D,
      night: IMAGES.ACCESSORY49N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "A sword in your head"
    }, {
      id: 62,
      day: IMAGES.ACCESSORY51D,
      night: IMAGES.ACCESSORY51N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Winter Scarf"
    }, {
      id: 64,
      day: IMAGES.ACCESSORY53D,
      night: IMAGES.ACCESSORY53N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Scarf 2"
    }, {
      id: 66,
      day: IMAGES.ACCESSORY54D,
      night: IMAGES.ACCESSORY54N,
      rarity: RARITY.DIAMOND,
      author: "eogito",
      name: "Winter Scarf 3"
    }, {
      id: 70,
      day: IMAGES.ACCESSORY58D,
      night: IMAGES.ACCESSORY58N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Mask with animal tracks"
    }, {
      id: 71,
      day: IMAGES.ACCESSORY59D,
      night: IMAGES.ACCESSORY59N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Spring Mask"
    }, {
      id: 72,
      day: IMAGES.ACCESSORY60D,
      night: IMAGES.ACCESSORY60N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Pink Mask"
    }, {
      id: 73,
      day: IMAGES.ACCESSORY61D,
      night: IMAGES.ACCESSORY61N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Blue Mask"
    }, {
      id: 76,
      day: IMAGES.ACCESSORY64D,
      night: IMAGES.ACCESSORY64N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Military Mask"
    }, {
      id: 77,
      day: IMAGES.ACCESSORY65D,
      night: IMAGES.ACCESSORY65N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Orange Mask"
    }, {
      id: 78,
      day: IMAGES.ACCESSORY66D,
      night: IMAGES.ACCESSORY66N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "White and Red Points Mask"
    }, {
      id: 80,
      day: IMAGES.ACCESSORY68D,
      night: IMAGES.ACCESSORY68N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Stick out your tongue Mask"
    }, {
      id: 81,
      day: IMAGES.ACCESSORY69D,
      night: IMAGES.ACCESSORY69N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Two Teeth Mask"
    }, {
      id: 82,
      day: IMAGES.ACCESSORY70D,
      night: IMAGES.ACCESSORY70N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Make-up Mask"
    }, {
      id: 83,
      day: IMAGES.ACCESSORY71D,
      night: IMAGES.ACCESSORY71N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Sad Mask"
    }, {
      id: 84,
      day: IMAGES.ACCESSORY72D,
      night: IMAGES.ACCESSORY72N,
      rarity: RARITY.DIAMOND,
      author: "Starve.io",
      name: "Happy Mask"
    }, {
      id: 90,
      day: IMAGES.ACCESSORY79D,
      night: IMAGES.ACCESSORY79N,
      rarity: RARITY.DIAMOND,
      author: "aloner",
      name: "Blood"
    }, {
      id: 27,
      day: IMAGES.ACCESSORY27D,
      night: IMAGES.ACCESSORY27N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Clown Face"
    }, {
      id: 20,
      day: IMAGES.ACCESSORY20D,
      night: IMAGES.ACCESSORY20N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Sunglasses 3"
    }, {
      id: 32,
      day: IMAGES.ACCESSORY32D,
      night: IMAGES.ACCESSORY32N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Engineer's Glasses"
    }, {
      id: 33,
      day: IMAGES.ACCESSORY33D,
      night: IMAGES.ACCESSORY33N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Engineer's Monocle"
    }, {
      id: 34,
      day: IMAGES.ACCESSORY34D,
      night: IMAGES.ACCESSORY34N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mauve's butt"
    }, {
      id: 41,
      day: IMAGES.ACCESSORY41D,
      night: IMAGES.ACCESSORY41N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Lapa Head"
    }, {
      id: 42,
      day: IMAGES.ACCESSORY42D,
      night: IMAGES.ACCESSORY42N,
      rarity: RARITY.AMETHYST,
      author: "eogito",
      name: "Lapa Head "
    }, {
      id: 85,
      day: IMAGES.ACCESSORY73D,
      night: IMAGES.ACCESSORY73N,
      rarity: RARITY.AMETHYST,
      author: "Starve.io",
      name: "Mask and Glasses"
    }, {
      id: 60,
      day: IMAGES.ACCESSORY48D,
      night: IMAGES.ACCESSORY48N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Jason"
    }, {
      id: 26,
      day: IMAGES.ACCESSORY26D,
      night: IMAGES.ACCESSORY26N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Devil Horns"
    }, {
      id: 18,
      day: IMAGES.ACCESSORY18D,
      night: IMAGES.ACCESSORY18N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Big Boss"
    }, {
      id: 35,
      day: IMAGES.ACCESSORY35D,
      night: IMAGES.ACCESSORY35N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Baby Kraken"
    }, {
      id: 63,
      day: IMAGES.ACCESSORY52D,
      night: IMAGES.ACCESSORY52N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Deer Antlers"
    }, {
      id: 65,
      day: IMAGES.ACCESSORY45D,
      night: IMAGES.ACCESSORY45N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Baby Dragon on your head"
    }, {
      id: 86,
      day: IMAGES.ACCESSORY74D,
      night: IMAGES.ACCESSORY74N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Gaz Mask and Glasses"
    }, {
      id: 87,
      day: IMAGES.ACCESSORY75D,
      night: IMAGES.ACCESSORY75N,
      rarity: RARITY.REIDITE,
      author: "Starve.io",
      name: "Pink Gaz Mask and Glasses"
    }, {
      id: 88,
      day: IMAGES.ACCESSORY76D,
      night: IMAGES.ACCESSORY76N,
      rarity: RARITY.REIDITE,
      author: "eogito",
      name: "Engineer Glasses"
    }, {
      id: 45,
      day: IMAGES.LEVEL5D,
      night: IMAGES.LEVEL5N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 5",
      level: 5
    }, {
      id: 46,
      day: IMAGES.LEVEL10D,
      night: IMAGES.LEVEL10N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 10",
      level: 10
    }, {
      id: 47,
      day: IMAGES.LEVEL15D,
      night: IMAGES.LEVEL15N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 15",
      level: 15
    }, {
      id: 48,
      day: IMAGES.LEVEL20D,
      night: IMAGES.LEVEL20N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 20",
      level: 20
    }, {
      id: 49,
      day: IMAGES.LEVEL25D,
      night: IMAGES.LEVEL25N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 25",
      level: 25
    }, {
      id: 50,
      day: IMAGES.LEVEL30D,
      night: IMAGES.LEVEL30N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 30",
      level: 30
    }, {
      id: 51,
      day: IMAGES.LEVEL35D,
      night: IMAGES.LEVEL35N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 35",
      level: 35
    }, {
      id: 52,
      day: IMAGES.LEVEL40D,
      night: IMAGES.LEVEL40N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 40",
      level: 40
    }, {
      id: 53,
      day: IMAGES.LEVEL45D,
      night: IMAGES.LEVEL45N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 45",
      level: 45
    }, {
      id: 54,
      day: IMAGES.LEVEL50D,
      night: IMAGES.LEVEL50N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 50",
      level: 50
    }, {
      id: 55,
      day: IMAGES.LEVEL55D,
      night: IMAGES.LEVEL55N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 55",
      level: 55
    }, {
      id: 56,
      day: IMAGES.LEVEL60D,
      night: IMAGES.LEVEL60N,
      rarity: RARITY.LEVEL,
      author: "Starve.io",
      name: "More than Level 60",
      level: 60
    }]
  };
  WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
  WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
  sprite[SPRITE.BODY] = [];
  sprite[SPRITE.HAND] = [];
  sprite[SPRITE.CRATE] = [];
  sprite[SPRITE.BOOK] = [];
  sprite[SPRITE.BAG] = [];
  sprite[SPRITE.ACCESSORY] = [];
  for (var _0x2da4bd = 0; _0x2da4bd < COSMETICS.SKIN.length; _0x2da4bd++) {
    sprite[SPRITE.BODY][_0x2da4bd] = [COSMETICS.SKIN[_0x2da4bd].day, COSMETICS.SKIN[_0x2da4bd].night];
    sprite[SPRITE.HAND][_0x2da4bd] = [COSMETICS.SKIN[_0x2da4bd].dayHand, COSMETICS.SKIN[_0x2da4bd].nightHand];
  }
  for (var _0x2da4bd = 0; _0x2da4bd < COSMETICS.BOOK.length; _0x2da4bd++) {
    sprite[SPRITE.BOOK][_0x2da4bd] = [COSMETICS.BOOK[_0x2da4bd].day, COSMETICS.BOOK[_0x2da4bd].night];
  }
  for (var _0x2da4bd = 0; _0x2da4bd < COSMETICS.CRATE.length; _0x2da4bd++) {
    sprite[SPRITE.CRATE][_0x2da4bd] = [COSMETICS.CRATE[_0x2da4bd].day, COSMETICS.CRATE[_0x2da4bd].night];
  }
  for (var _0x2da4bd = 0; _0x2da4bd < COSMETICS.BAG.length; _0x2da4bd++) {
    sprite[SPRITE.BAG][_0x2da4bd] = [COSMETICS.BAG[_0x2da4bd].day, COSMETICS.BAG[_0x2da4bd].night];
  }
  for (var _0x2da4bd = 0; _0x2da4bd < COSMETICS.ACCESSORY.length; _0x2da4bd++) {
    sprite[SPRITE.ACCESSORY][_0x2da4bd] = [COSMETICS.ACCESSORY[_0x2da4bd].day, COSMETICS.ACCESSORY[_0x2da4bd].night];
  }
};
function fill_path(_0x92347b, _0x4824f4, _0x50e495, _0xfb4542) {
  if (_0x4824f4) {
    _0x92347b.fillStyle = _0x4824f4;
    _0x92347b.fill();
  }
  if (_0x50e495) {
    _0x92347b.lineWidth = _0xfb4542;
    _0x92347b.strokeStyle = _0x50e495;
    _0x92347b.stroke();
  }
}
function round_rect(_0x5c4dc3, _0x2d729e, _0x1e26b4, _0x45cb8d, _0x1b6127, _0x4b5834) {
  if (_0x45cb8d < _0x4b5834 * 2) {
    _0x4b5834 = _0x45cb8d / 2;
  }
  if (_0x1b6127 < _0x4b5834 * 2) {
    _0x4b5834 = _0x1b6127 / 2;
  }
  if (_0x4b5834 < 0) {
    _0x4b5834 = 0;
  }
  _0x5c4dc3.beginPath();
  _0x5c4dc3.moveTo(_0x2d729e + _0x4b5834, _0x1e26b4);
  _0x5c4dc3.arcTo(_0x2d729e + _0x45cb8d, _0x1e26b4, _0x2d729e + _0x45cb8d, _0x1e26b4 + _0x1b6127, _0x4b5834);
  _0x5c4dc3.arcTo(_0x2d729e + _0x45cb8d, _0x1e26b4 + _0x1b6127, _0x2d729e, _0x1e26b4 + _0x1b6127, _0x4b5834);
  _0x5c4dc3.arcTo(_0x2d729e, _0x1e26b4 + _0x1b6127, _0x2d729e, _0x1e26b4, _0x4b5834);
  _0x5c4dc3.arcTo(_0x2d729e, _0x1e26b4, _0x2d729e + _0x45cb8d, _0x1e26b4, _0x4b5834);
  _0x5c4dc3.closePath();
}
function semi_round_rect(_0x135c74, _0x568b11, _0x2891f7, _0x4deec1, _0x10d1b8, _0xb323f7) {
  if (_0x4deec1 < _0xb323f7 * 2) {
    _0xb323f7 = _0x4deec1 / 2;
  }
  if (_0x10d1b8 < _0xb323f7 * 2) {
    _0xb323f7 = _0x10d1b8 / 2;
  }
  if (_0xb323f7 < 0) {
    _0xb323f7 = 0;
  }
  _0x135c74.beginPath();
  _0x135c74.moveTo(_0x568b11 + _0xb323f7, _0x2891f7);
  _0x135c74.arcTo(_0x568b11 + _0x4deec1, _0x2891f7, _0x568b11 + _0x4deec1, _0x2891f7 + _0x10d1b8, 0);
  _0x135c74.arcTo(_0x568b11 + _0x4deec1, _0x2891f7 + _0x10d1b8, _0x568b11, _0x2891f7 + _0x10d1b8, _0xb323f7);
  _0x135c74.arcTo(_0x568b11, _0x2891f7 + _0x10d1b8, _0x568b11, _0x2891f7, 0);
  _0x135c74.arcTo(_0x568b11, _0x2891f7, _0x568b11 + _0x4deec1, _0x2891f7, _0xb323f7);
  _0x135c74.closePath();
}
function circle(_0x46167b, _0x2dc7f6, _0x3a5197, _0x1ce65b) {
  _0x46167b.beginPath();
  _0x46167b.arc(_0x2dc7f6, _0x3a5197, _0x1ce65b, 0, Math.PI * 2);
}
function circle_angle(_0x353740, _0x1df915, _0x29af49, _0x356f08, _0x40b3c2) {
  _0x353740.beginPath();
  _0x353740.lineCap = "round";
  _0x353740.arc(_0x1df915, _0x29af49, _0x356f08, 0, Math.PI * 2 * _0x40b3c2);
}
function round_regular_polygon(_0x16e116, _0x549268, _0xd9dfb2, _0x239f39) {
  var _0x1e6141 = Math.PI * 2 / _0x549268;
  _0x16e116.beginPath();
  var _0x2ecfaf = [{
    x: _0xd9dfb2,
    y: 0
  }];
  var _0xc4e4e2 = [];
  for (var _0x458865 = 1; _0x458865 < _0x549268; _0x458865++) {
    _0x2ecfaf.push({
      x: Math.cos(_0x458865 * _0x1e6141) * _0xd9dfb2,
      y: Math.sin(_0x458865 * _0x1e6141) * _0xd9dfb2
    });
    var _0x22de41 = _0x2ecfaf.length;
    _0xc4e4e2.push(Utils.middle_point(_0x2ecfaf[_0x22de41 - 2], _0x2ecfaf[_0x22de41 - 1]));
  }
  _0xc4e4e2.push(Utils.middle_point(_0x2ecfaf[_0x2ecfaf.length - 1], _0x2ecfaf[0]));
  var _0x252550 = _0xc4e4e2[_0xc4e4e2.length - 1];
  _0x16e116.moveTo(_0x252550.x, _0x252550.y);
  for (var _0x458865 = 0; _0x458865 < _0x549268; _0x458865++) {
    _0x16e116.arcTo(_0x2ecfaf[_0x458865].x, _0x2ecfaf[_0x458865].y, _0xc4e4e2[_0x458865].x, _0xc4e4e2[_0x458865].y, _0x239f39);
  }
  _0x16e116.closePath();
}
function create_rotated_img(_0xc4bc7c, _0x143bca) {
  var _0x4d796d = document.createElement("canvas");
  var _0x261cff = _0x4d796d.getContext("2d");
  var _0x25f3ed = Math.sqrt(_0x143bca.width * _0x143bca.width + _0x143bca.height * _0x143bca.height);
  d2 = _0x25f3ed / 2;
  _0x4d796d.width = _0x25f3ed;
  _0x4d796d.height = _0x25f3ed;
  _0x261cff.translate(d2, d2);
  _0x261cff.rotate(_0xc4bc7c);
  _0x261cff.drawImage(_0x143bca, -_0x143bca.width / 2, -_0x143bca.height / 2);
  return _0x4d796d;
}
function create_message(_0x40f547, _0x5e2917) {
  var _0x433c53 = document.createElement("canvas");
  var _0x31a37e = _0x433c53.getContext("2d");
  var _0x5497ab = Math.floor(_0x40f547 * 28);
  var _0x217e11 = Math.floor(_0x40f547 * 20);
  _0x31a37e.font = _0x217e11 + "px Baloo Paaji";
  var _0x29918a = _0x40f547 * 8;
  var _0x388a27 = _0x31a37e.measureText(_0x5e2917).width + _0x29918a * 2;
  _0x433c53.width = _0x388a27;
  _0x433c53.height = _0x5497ab;
  round_rect(_0x31a37e, 0, 0, _0x388a27, _0x5497ab, _0x40f547 * 10);
  _0x31a37e.globalAlpha = 0.5;
  fill_path(_0x31a37e, "#000");
  _0x31a37e.globalAlpha = 1;
  _0x31a37e.textBaseline = "middle";
  _0x31a37e.font = _0x217e11 + "px Baloo Paaji";
  _0x31a37e.beginPath();
  _0x31a37e.fillStyle = "#FFF";
  _0x31a37e.fillText(_0x5e2917, _0x29918a, _0x5497ab / 2);
  return _0x433c53;
}
function create_accessory(_0x48feae, _0x50c196, _0x2a48ef) {
  var _0x49e5cb = document.createElement("canvas");
  var _0x50d0d8 = _0x49e5cb.getContext("2d");
  _0x49e5cb.width = _0x48feae * 120;
  _0x49e5cb.height = _0x48feae * 110;
  if (_0x2a48ef == 1) {
    circle(_0x50d0d8, _0x48feae * 35, _0x48feae * 75, _0x48feae * 19.72308292331602);
    fill_path(_0x50d0d8, _0x50c196[1], _0x50c196[0], _0x48feae * 4);
    _0x50d0d8.save();
    _0x50d0d8.translate(_0x48feae * 11, _0x48feae * 77);
    round_rect(_0x50d0d8, _0x48feae * -4, _0x48feae * -4, _0x48feae * 8, _0x48feae * 8, _0x48feae * 10);
    _0x50d0d8.restore();
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 4);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 11, _0x48feae * 81);
    _0x50d0d8.bezierCurveTo(_0x48feae * 13, _0x48feae * 105, _0x48feae * 9, _0x48feae * 106, _0x48feae * 8, _0x48feae * 91);
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 4);
  } else if (_0x2a48ef == 2) {
    circle(_0x50d0d8, _0x48feae * 85, _0x48feae * 75, _0x48feae * 16);
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[0], _0x48feae * 4);
    _0x50d0d8.scale(_0x48feae * -1.7, _0x48feae * 1.7);
    _0x50d0d8.translate(_0x48feae * -120, _0x48feae * 0);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 20, _0x48feae * 95);
    _0x50d0d8.bezierCurveTo(_0x48feae * 56.5, _0x48feae * 54, _0x48feae * 56.5, _0x48feae * 54, _0x48feae * 93, _0x48feae * 13);
    _0x50d0d8.bezierCurveTo(_0x48feae * 89, _0x48feae * 13, _0x48feae * 89, _0x48feae * 13, _0x48feae * 85, _0x48feae * 13);
    _0x50d0d8.bezierCurveTo(_0x48feae * 49.5, _0x48feae * 53, _0x48feae * 49.5, _0x48feae * 53, _0x48feae * 14, _0x48feae * 93);
    _0x50d0d8.bezierCurveTo(_0x48feae * 15, _0x48feae * 94, _0x48feae * 15, _0x48feae * 94, _0x48feae * 19, _0x48feae * 95);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[0], _0x48feae * 4);
  } else if (_0x2a48ef == 3) {
    _0x50d0d8.translate(_0x48feae * -52, 0);
    _0x50d0d8.save();
    _0x50d0d8.translate(_0x48feae * 84.5, _0x48feae * 36.5);
    _0x50d0d8.rotate(-0.96);
    round_rect(_0x50d0d8, _0x48feae * -5.5, _0x48feae * -15.5, _0x48feae * 11, _0x48feae * 31, _0x48feae * 4);
    _0x50d0d8.restore();
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[1], _0x48feae * 4);
    _0x50d0d8.save();
    _0x50d0d8.translate(_0x48feae * 84, _0x48feae * 36);
    _0x50d0d8.rotate(0.64);
    round_rect(_0x50d0d8, _0x48feae * -5, _0x48feae * -16, _0x48feae * 10, _0x48feae * 32, _0x48feae * 4);
    _0x50d0d8.restore();
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[1], _0x48feae * 4);
    _0x50d0d8.save();
    _0x50d0d8.translate(_0x48feae * 83.5, _0x48feae * 36.5);
    _0x50d0d8.rotate(0.68);
    round_rect(_0x50d0d8, _0x48feae * -2.5, _0x48feae * -6.5, _0x48feae * 5, _0x48feae * 13, _0x48feae * 4);
    _0x50d0d8.restore();
    fill_path(_0x50d0d8, _0x50c196[1]);
  } else if (_0x2a48ef == 4) {
    circle(_0x50d0d8, _0x48feae * 35, _0x48feae * 85, _0x48feae * 17);
    fill_path(_0x50d0d8, _0x50c196[1], _0x50c196[0], _0x48feae * 3);
    circle(_0x50d0d8, _0x48feae * 85, _0x48feae * 85, _0x48feae * 17);
    fill_path(_0x50d0d8, _0x50c196[1], _0x50c196[0], _0x48feae * 3);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 53, _0x48feae * 86);
    _0x50d0d8.bezierCurveTo(_0x48feae * 59, _0x48feae * 83, _0x48feae * 63, _0x48feae * 83, _0x48feae * 67, _0x48feae * 86);
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 4);
  } else if (_0x2a48ef == 5) {
    _0x50d0d8.scale(1.2, 1.2);
    _0x50d0d8.translate(_0x48feae * -27, _0x48feae * -8);
    _0x50d0d8.scale(1.2, 1.2);
    _0x50d0d8.translate(_0x48feae * -10, 0);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 97, _0x48feae * 23);
    _0x50d0d8.bezierCurveTo(_0x48feae * 105, _0x48feae * 24, _0x48feae * 107, _0x48feae * 37, _0x48feae * 97, _0x48feae * 39);
    _0x50d0d8.bezierCurveTo(_0x48feae * 85, _0x48feae * 40, _0x48feae * 84, _0x48feae * 22, _0x48feae * 97, _0x48feae * 23);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 3);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 96, _0x48feae * 24);
    _0x50d0d8.bezierCurveTo(_0x48feae * 96, _0x48feae * 30.5, _0x48feae * 96, _0x48feae * 30.5, _0x48feae * 96, _0x48feae * 37);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 3);
    _0x50d0d8.translate(0, _0x48feae * -2);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 88, _0x48feae * 37);
    _0x50d0d8.bezierCurveTo(_0x48feae * 93, _0x48feae * 33, _0x48feae * 91.5, _0x48feae * 34.5, _0x48feae * 95, _0x48feae * 32);
    _0x50d0d8.bezierCurveTo(_0x48feae * 98.5, _0x48feae * 34, _0x48feae * 98.5, _0x48feae * 34, _0x48feae * 102, _0x48feae * 36);
    fill_path(_0x50d0d8, undefined, _0x50c196[0], _0x48feae * 3);
  } else if (_0x2a48ef == 6) {
    circle(_0x50d0d8, _0x48feae * 13, _0x48feae * 79, _0x48feae * 5);
    fill_path(_0x50d0d8, _0x50c196[0]);
    circle(_0x50d0d8, _0x48feae * 106, _0x48feae * 79, _0x48feae * 5);
    fill_path(_0x50d0d8, _0x50c196[0]);
  } else if (_0x2a48ef == 7) {
    _0x50d0d8.translate(_0x48feae * 0, _0x48feae * 5);
    _0x50d0d8.globalAlpha = 0.5;
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 27, _0x48feae * 14.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 29, _0x48feae * 4.399993896484375, _0x48feae * 44, _0x48feae * 16.399993896484375, _0x48feae * 37, _0x48feae * 21.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 47, _0x48feae * 17.399993896484375, _0x48feae * 45, _0x48feae * 36.399993896484375, _0x48feae * 37, _0x48feae * 32.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 44, _0x48feae * 40.399993896484375, _0x48feae * 28, _0x48feae * 47.399993896484375, _0x48feae * 26, _0x48feae * 37.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 22, _0x48feae * 46.399993896484375, _0x48feae * 9, _0x48feae * 37.399993896484375, _0x48feae * 16, _0x48feae * 30.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 6, _0x48feae * 34.399993896484375, _0x48feae * 9, _0x48feae * 15.399993896484375, _0x48feae * 18, _0x48feae * 19.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 10, _0x48feae * 12.399993896484375, _0x48feae * 26, _0x48feae * 7.399993896484375, _0x48feae * 26, _0x48feae * 14.399993896484375);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, _0x50c196[3]);
    _0x50d0d8.globalAlpha = 1;
    _0x50d0d8.translate(_0x48feae * 0, _0x48feae * -5);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 27, _0x48feae * 14.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 29, _0x48feae * 4.399993896484375, _0x48feae * 44, _0x48feae * 16.399993896484375, _0x48feae * 37, _0x48feae * 21.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 47, _0x48feae * 17.399993896484375, _0x48feae * 45, _0x48feae * 36.399993896484375, _0x48feae * 37, _0x48feae * 32.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 44, _0x48feae * 40.399993896484375, _0x48feae * 28, _0x48feae * 47.399993896484375, _0x48feae * 26, _0x48feae * 37.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 22, _0x48feae * 46.399993896484375, _0x48feae * 9, _0x48feae * 37.399993896484375, _0x48feae * 16, _0x48feae * 30.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 6, _0x48feae * 34.399993896484375, _0x48feae * 9, _0x48feae * 15.399993896484375, _0x48feae * 18, _0x48feae * 19.399993896484375);
    _0x50d0d8.bezierCurveTo(_0x48feae * 10, _0x48feae * 12.399993896484375, _0x48feae * 26, _0x48feae * 7.399993896484375, _0x48feae * 26, _0x48feae * 14.399993896484375);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, _0x50c196[1], _0x50c196[2], _0x48feae * 2);
    circle(_0x50d0d8, _0x48feae * 27, _0x48feae * 26.800003051757812, _0x48feae * 5);
    fill_path(_0x50d0d8, _0x50c196[0]);
  } else if (_0x2a48ef == 8) {
    _0x50d0d8.translate(_0x48feae * -32, _0x48feae * -19);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 123, _0x48feae * 46);
    _0x50d0d8.bezierCurveTo(_0x48feae * 132, _0x48feae * 46, _0x48feae * 135, _0x48feae * 39, _0x48feae * 134, _0x48feae * 33);
    _0x50d0d8.bezierCurveTo(_0x48feae * 145, _0x48feae * 43, _0x48feae * 142, _0x48feae * 65, _0x48feae * 127, _0x48feae * 66);
    _0x50d0d8.bezierCurveTo(_0x48feae * 118, _0x48feae * 61, _0x48feae * 119, _0x48feae * 51, _0x48feae * 123, _0x48feae * 46);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[1], _0x48feae * 4);
    _0x50d0d8.beginPath();
    _0x50d0d8.lineCap = "round";
    _0x50d0d8.lineJoin = "round";
    _0x50d0d8.moveTo(_0x48feae * 49, _0x48feae * 32);
    _0x50d0d8.bezierCurveTo(_0x48feae * 49, _0x48feae * 44, _0x48feae * 56, _0x48feae * 44, _0x48feae * 61, _0x48feae * 46);
    _0x50d0d8.bezierCurveTo(_0x48feae * 67, _0x48feae * 52, _0x48feae * 65, _0x48feae * 65, _0x48feae * 55, _0x48feae * 66);
    _0x50d0d8.bezierCurveTo(_0x48feae * 37, _0x48feae * 60, _0x48feae * 42, _0x48feae * 38, _0x48feae * 49, _0x48feae * 32);
    _0x50d0d8.closePath();
    fill_path(_0x50d0d8, _0x50c196[0], _0x50c196[1], _0x48feae * 4);
  }
  return _0x49e5cb;
}
function create_hurt_player(_0x3f05ad, _0x1605cc) {
  var _0x9d0500 = document.createElement("canvas");
  var _0x50752f = _0x9d0500.getContext("2d");
  var _0x450a83 = _0x3f05ad * 120;
  var _0x5cac09 = _0x3f05ad * 110;
  var _0x1cc1c0 = _0x450a83 / 2;
  var _0x4a5534 = _0x5cac09 / 2;
  var _0x53958e = _0x3f05ad * 20;
  var _0x5cf0c7 = _0x3f05ad * 112;
  var _0x3fba5a = _0x3f05ad * 82;
  var _0x3a691b = _0x5cf0c7 / 2;
  var _0x2fbf68 = _0x3fba5a / 2;
  var _0x543866 = _0x3f05ad * 4;
  _0x9d0500.width = _0x450a83;
  _0x9d0500.height = _0x5cac09;
  _0x50752f.globalAlpha = 1;
  _0x50752f.translate(_0x1cc1c0, _0x4a5534);
  round_rect(_0x50752f, -_0x3a691b, -_0x2fbf68, _0x5cf0c7, _0x3fba5a, _0x53958e);
  fill_path(_0x50752f, _0x1605cc, _0x1605cc, _0x543866);
  return _0x9d0500;
}
function create_player(_0x2a8bce, _0x17dc4f, _0xd4d7e3) {
  var _0x4d44e1 = document.createElement("canvas");
  var _0x3c7486 = _0x4d44e1.getContext("2d");
  _0x4d44e1.width = _0x2a8bce * 176;
  _0x4d44e1.height = _0x2a8bce * 127;
  if (_0xd4d7e3 == 8) {
    _0x3c7486.globalAlpha = 0.3;
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 87, _0x2a8bce * 64.5);
    round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[0], _0x17dc4f[1], _0x2a8bce * 4);
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 82, _0x2a8bce * 69.5);
    round_rect(_0x3c7486, _0x2a8bce * -51, _0x2a8bce * -36.5, _0x2a8bce * 102, _0x2a8bce * 73, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[2], _0x17dc4f[1], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 55, _0x2a8bce * 41);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 38, _0x2a8bce * 41, _0x2a8bce * 37, _0x2a8bce * 50, _0x2a8bce * 38, _0x2a8bce * 61);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 42, _0x2a8bce * 50, _0x2a8bce * 46, _0x2a8bce * 46, _0x2a8bce * 55, _0x2a8bce * 42);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[3]);
    _0x3c7486.globalAlpha = 1;
    _0x3c7486.translate(_0x2a8bce * 26, _0x2a8bce * 10);
    circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
    fill_path(_0x3c7486, _0x17dc4f[4]);
    circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
    fill_path(_0x3c7486, _0x17dc4f[4]);
    circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
    fill_path(_0x3c7486, _0x17dc4f[5]);
    circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
    fill_path(_0x3c7486, _0x17dc4f[5]);
  } else if (_0xd4d7e3 == 9) {
    var _0x4d44e1 = document.createElement("canvas");
    var _0x3c7486 = _0x4d44e1.getContext("2d");
    _0x4d44e1.width = _0x2a8bce * 332;
    _0x4d44e1.height = _0x2a8bce * 127;
    _0x3c7486.globalAlpha = 0.5;
    _0x3c7486.translate(0, _0x2a8bce * -36);
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 165.25, _0x2a8bce * 106.84375);
    round_rect(_0x3c7486, _0x2a8bce * -56.5, _0x2a8bce * -41.5, _0x2a8bce * 113, _0x2a8bce * 83, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[0]);
    _0x3c7486.globalAlpha = 1;
    _0x3c7486.translate(0, _0x2a8bce * 20);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 210.75, _0x2a8bce * 72.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 238.75, _0x2a8bce * 74.84375, _0x2a8bce * 270.75, _0x2a8bce * 85.84375, _0x2a8bce * 269.75, _0x2a8bce * 90.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 268.75, _0x2a8bce * 94.84375, _0x2a8bce * 221.75, _0x2a8bce * 81.84375, _0x2a8bce * 206.75, _0x2a8bce * 85.84375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 208.75, _0x2a8bce * 69.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 241.75, _0x2a8bce * 61.84375, _0x2a8bce * 265.75, _0x2a8bce * 65.84375, _0x2a8bce * 286.75, _0x2a8bce * 69.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 290.75, _0x2a8bce * 75.84375, _0x2a8bce * 225.75, _0x2a8bce * 69.84375, _0x2a8bce * 215.75, _0x2a8bce * 80.84375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 209.75, _0x2a8bce * 69.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 228.75, _0x2a8bce * 51.84375, _0x2a8bce * 265.75, _0x2a8bce * 46.84375, _0x2a8bce * 294.75, _0x2a8bce * 51.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 301.75, _0x2a8bce * 55.84375, _0x2a8bce * 224.75, _0x2a8bce * 60.84375, _0x2a8bce * 216.75, _0x2a8bce * 80.84375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 193.75, _0x2a8bce * 72.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 206.75, _0x2a8bce * 47.84375, _0x2a8bce * 221.75, _0x2a8bce * 37.84375, _0x2a8bce * 249.75, _0x2a8bce * 35.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 264.75, _0x2a8bce * 34.84375, _0x2a8bce * 305.75, _0x2a8bce * 16.84375, _0x2a8bce * 300.75, _0x2a8bce * 24.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 273.75, _0x2a8bce * 45.84375, _0x2a8bce * 245.75, _0x2a8bce * 46.84375, _0x2a8bce * 235.75, _0x2a8bce * 62.84375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 218.75, _0x2a8bce * 82.84375, _0x2a8bce * 215.75, _0x2a8bce * 87.84375, _0x2a8bce * 199.75, _0x2a8bce * 84.84375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 126.75, _0x2a8bce * 80.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 94.75, _0x2a8bce * 88.34375, _0x2a8bce * 83.75, _0x2a8bce * 88.34375, _0x2a8bce * 65.75, _0x2a8bce * 90.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 61.75, _0x2a8bce * 87.34375, _0x2a8bce * 86.75, _0x2a8bce * 77.34375, _0x2a8bce * 129.75, _0x2a8bce * 70.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 120.75, _0x2a8bce * 72.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 128.75, _0x2a8bce * 62.34375, _0x2a8bce * 98.75, _0x2a8bce * 64.34375, _0x2a8bce * 49.75, _0x2a8bce * 68.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 34.75, _0x2a8bce * 75.34375, _0x2a8bce * 101.75, _0x2a8bce * 72.34375, _0x2a8bce * 124.75, _0x2a8bce * 78.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 128.75, _0x2a8bce * 76.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 111.75, _0x2a8bce * 54.34375, _0x2a8bce * 69.75, _0x2a8bce * 48.34375, _0x2a8bce * 39.75, _0x2a8bce * 50.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 26.75, _0x2a8bce * 53.34375, _0x2a8bce * 86.75, _0x2a8bce * 59.34375, _0x2a8bce * 123.75, _0x2a8bce * 78.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 143.75, _0x2a8bce * 74.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 128.75, _0x2a8bce * 48.34375, _0x2a8bce * 108.75, _0x2a8bce * 35.34375, _0x2a8bce * 81.75, _0x2a8bce * 35.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 63.75, _0x2a8bce * 33.34375, _0x2a8bce * 26.75, _0x2a8bce * 15.34375, _0x2a8bce * 29.75, _0x2a8bce * 25.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 33.75, _0x2a8bce * 30.34375, _0x2a8bce * 49.75, _0x2a8bce * 40.34375, _0x2a8bce * 70.75, _0x2a8bce * 49.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 94.75, _0x2a8bce * 54.34375, _0x2a8bce * 104.75, _0x2a8bce * 72.34375, _0x2a8bce * 128.75, _0x2a8bce * 88.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.translate(0, _0x2a8bce * -28);
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 165.25, _0x2a8bce * 106.84375);
    round_rect(_0x3c7486, _0x2a8bce * -56.5, _0x2a8bce * -41.5, _0x2a8bce * 113, _0x2a8bce * 83, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    _0x3c7486.translate(_0x2a8bce * 28, _0x2a8bce * 15);
    _0x3c7486.translate(0, _0x2a8bce * 8);
    _0x3c7486.globalAlpha = 0.5;
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 83, _0x2a8bce * 52);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 78, _0x2a8bce * 65, _0x2a8bce * 110, _0x2a8bce * 72, _0x2a8bce * 139, _0x2a8bce * 71);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 176, _0x2a8bce * 71, _0x2a8bce * 193, _0x2a8bce * 61, _0x2a8bce * 191, _0x2a8bce * 54);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 202, _0x2a8bce * 58, _0x2a8bce * 198, _0x2a8bce * 72, _0x2a8bce * 187, _0x2a8bce * 75);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 143, _0x2a8bce * 87, _0x2a8bce * 107, _0x2a8bce * 79, _0x2a8bce * 89, _0x2a8bce * 75);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 72, _0x2a8bce * 69, _0x2a8bce * 74, _0x2a8bce * 58, _0x2a8bce * 83, _0x2a8bce * 52);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[0]);
    _0x3c7486.globalAlpha = 1;
    _0x3c7486.translate(_0x2a8bce * 0, _0x2a8bce * -8);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 83, _0x2a8bce * 52);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 78, _0x2a8bce * 65, _0x2a8bce * 110, _0x2a8bce * 72, _0x2a8bce * 139, _0x2a8bce * 71);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 176, _0x2a8bce * 71, _0x2a8bce * 193, _0x2a8bce * 61, _0x2a8bce * 191, _0x2a8bce * 54);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 202, _0x2a8bce * 58, _0x2a8bce * 198, _0x2a8bce * 72, _0x2a8bce * 187, _0x2a8bce * 75);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 143, _0x2a8bce * 87, _0x2a8bce * 107, _0x2a8bce * 79, _0x2a8bce * 89, _0x2a8bce * 75);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 72, _0x2a8bce * 69, _0x2a8bce * 74, _0x2a8bce * 58, _0x2a8bce * 83, _0x2a8bce * 52);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 4);
    _0x3c7486.translate(_0x2a8bce * -28, _0x2a8bce * -15);
    circle(_0x3c7486, _0x2a8bce * 141.75, _0x2a8bce * 127.34375, _0x2a8bce * 15);
    fill_path(_0x3c7486, _0x17dc4f[3]);
    circle(_0x3c7486, _0x2a8bce * 191.75, _0x2a8bce * 127.09375, _0x2a8bce * 15);
    fill_path(_0x3c7486, _0x17dc4f[3]);
    circle(_0x3c7486, _0x2a8bce * 138.75, _0x2a8bce * 119.34375, _0x2a8bce * 5);
    fill_path(_0x3c7486, _0x17dc4f[4]);
    circle(_0x3c7486, _0x2a8bce * 188.75, _0x2a8bce * 119.34375, _0x2a8bce * 5);
    fill_path(_0x3c7486, _0x17dc4f[4]);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 125.75, _0x2a8bce * 139.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 134.75, _0x2a8bce * 134.34375, _0x2a8bce * 143.75, _0x2a8bce * 134.34375, _0x2a8bce * 156.75, _0x2a8bce * 139.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 153.25, _0x2a8bce * 141.84375, _0x2a8bce * 153.25, _0x2a8bce * 141.84375, _0x2a8bce * 149.75, _0x2a8bce * 144.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 140.25, _0x2a8bce * 144.34375, _0x2a8bce * 140.25, _0x2a8bce * 144.34375, _0x2a8bce * 130.75, _0x2a8bce * 144.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1]);
    _0x3c7486.beginPath();
    _0x3c7486.lineCap = "round";
    _0x3c7486.lineJoin = "round";
    _0x3c7486.moveTo(_0x2a8bce * 176.75, _0x2a8bce * 139.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 183.75, _0x2a8bce * 135.34375, _0x2a8bce * 199.75, _0x2a8bce * 135.34375, _0x2a8bce * 205.75, _0x2a8bce * 139.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 203.25, _0x2a8bce * 141.34375, _0x2a8bce * 203.25, _0x2a8bce * 141.34375, _0x2a8bce * 200.75, _0x2a8bce * 143.34375);
    _0x3c7486.bezierCurveTo(_0x2a8bce * 190.75, _0x2a8bce * 143.84375, _0x2a8bce * 190.75, _0x2a8bce * 143.84375, _0x2a8bce * 180.75, _0x2a8bce * 144.34375);
    _0x3c7486.closePath();
    fill_path(_0x3c7486, _0x17dc4f[1]);
  } else {
    _0x3c7486.globalAlpha = 0.75;
    _0x3c7486.translate(0, _0x2a8bce * 8);
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 87, _0x2a8bce * 64.5);
    round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[0]);
    _0x3c7486.globalAlpha = 1;
    _0x3c7486.translate(0, _0x2a8bce * -8);
    _0x3c7486.save();
    _0x3c7486.translate(_0x2a8bce * 87, _0x2a8bce * 64.5);
    round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
    _0x3c7486.restore();
    fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
    if (_0xd4d7e3 == 0) {
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
    } else if (_0xd4d7e3 == 1) {
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 35, _0x2a8bce * 73);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 40, _0x2a8bce * 72, _0x2a8bce * 38, _0x2a8bce * 68, _0x2a8bce * 35, _0x2a8bce * 67);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 25, _0x2a8bce * 67, _0x2a8bce * 21, _0x2a8bce * 65, _0x2a8bce * 16, _0x2a8bce * 61);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 10, _0x2a8bce * 60, _0x2a8bce * 16, _0x2a8bce * 64, _0x2a8bce * 20, _0x2a8bce * 67);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 3, _0x2a8bce * 70, _0x2a8bce * 12, _0x2a8bce * 68.5, _0x2a8bce * 4, _0x2a8bce * 70);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 2, _0x2a8bce * 71, _0x2a8bce * 6, _0x2a8bce * 72, _0x2a8bce * 13, _0x2a8bce * 73);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 12.5, _0x2a8bce * 76.5, _0x2a8bce * 12.5, _0x2a8bce * 76.5, _0x2a8bce * 12, _0x2a8bce * 80);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 12, _0x2a8bce * 83, _0x2a8bce * 15, _0x2a8bce * 80, _0x2a8bce * 18, _0x2a8bce * 73);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 26.5, _0x2a8bce * 73.5, _0x2a8bce * 26.5, _0x2a8bce * 73.5, _0x2a8bce * 35, _0x2a8bce * 74);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 134, _0x2a8bce * 64);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 141.5, _0x2a8bce * 64, _0x2a8bce * 141.5, _0x2a8bce * 64, _0x2a8bce * 149, _0x2a8bce * 64);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 153, _0x2a8bce * 59, _0x2a8bce * 156, _0x2a8bce * 56, _0x2a8bce * 159, _0x2a8bce * 56);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 161, _0x2a8bce * 57, _0x2a8bce * 160, _0x2a8bce * 60, _0x2a8bce * 155, _0x2a8bce * 65);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 165, _0x2a8bce * 71, _0x2a8bce * 168, _0x2a8bce * 72, _0x2a8bce * 169, _0x2a8bce * 74);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 169, _0x2a8bce * 76, _0x2a8bce * 159, _0x2a8bce * 71, _0x2a8bce * 156, _0x2a8bce * 72);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 154, _0x2a8bce * 72, _0x2a8bce * 155, _0x2a8bce * 75, _0x2a8bce * 156, _0x2a8bce * 79);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 155, _0x2a8bce * 81, _0x2a8bce * 153, _0x2a8bce * 78, _0x2a8bce * 150, _0x2a8bce * 72);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 71.5, _0x2a8bce * 142, _0x2a8bce * 71.5, _0x2a8bce * 134, _0x2a8bce * 71);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 130, _0x2a8bce * 69, _0x2a8bce * 131, _0x2a8bce * 65, _0x2a8bce * 135, _0x2a8bce * 64);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 80, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 83, _0x2a8bce * 88, _0x2a8bce * 89, _0x2a8bce * 88, _0x2a8bce * 92, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 92, _0x2a8bce * 105, _0x2a8bce * 88, _0x2a8bce * 110, _0x2a8bce * 86, _0x2a8bce * 110);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 83, _0x2a8bce * 107, _0x2a8bce * 82, _0x2a8bce * 104, _0x2a8bce * 80, _0x2a8bce * 96);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[7], _0x17dc4f[8], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 81, _0x2a8bce * 100);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 82, _0x2a8bce * 97, _0x2a8bce * 83, _0x2a8bce * 96, _0x2a8bce * 85, _0x2a8bce * 96);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 82, _0x2a8bce * 100, _0x2a8bce * 82, _0x2a8bce * 101, _0x2a8bce * 83, _0x2a8bce * 103);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[8]);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 83, _0x2a8bce * 103);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 83, _0x2a8bce * 102, _0x2a8bce * 84, _0x2a8bce * 100, _0x2a8bce * 86, _0x2a8bce * 100);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 84, _0x2a8bce * 103, _0x2a8bce * 84, _0x2a8bce * 105, _0x2a8bce * 84, _0x2a8bce * 106);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[8]);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
    } else if (_0xd4d7e3 == 2) {
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 48, _0x2a8bce * 22);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 85.5, _0x2a8bce * 22, _0x2a8bce * 85.5, _0x2a8bce * 22, _0x2a8bce * 123, _0x2a8bce * 22);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 138, _0x2a8bce * 23, _0x2a8bce * 147, _0x2a8bce * 34, _0x2a8bce * 143, _0x2a8bce * 62);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 67, _0x2a8bce * 144, _0x2a8bce * 70, _0x2a8bce * 149, _0x2a8bce * 73);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 147, _0x2a8bce * 77, _0x2a8bce * 145, _0x2a8bce * 77, _0x2a8bce * 143, _0x2a8bce * 77);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 141, _0x2a8bce * 85, _0x2a8bce * 145, _0x2a8bce * 92, _0x2a8bce * 148, _0x2a8bce * 97);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 103, _0x2a8bce * 134, _0x2a8bce * 105, _0x2a8bce * 121, _0x2a8bce * 106);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 85, _0x2a8bce * 106, _0x2a8bce * 85, _0x2a8bce * 106, _0x2a8bce * 49, _0x2a8bce * 106);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 32, _0x2a8bce * 104, _0x2a8bce * 29, _0x2a8bce * 101, _0x2a8bce * 24, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 30, _0x2a8bce * 86, _0x2a8bce * 31, _0x2a8bce * 85, _0x2a8bce * 30, _0x2a8bce * 78);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 27.5, _0x2a8bce * 76, _0x2a8bce * 27.5, _0x2a8bce * 76, _0x2a8bce * 25, _0x2a8bce * 74);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 31, _0x2a8bce * 68, _0x2a8bce * 31, _0x2a8bce * 60, _0x2a8bce * 30, _0x2a8bce * 46);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 31, _0x2a8bce * 31, _0x2a8bce * 37, _0x2a8bce * 23, _0x2a8bce * 47, _0x2a8bce * 22);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 30, _0x2a8bce * 44);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 66, _0x2a8bce * 48, _0x2a8bce * 99, _0x2a8bce * 45, _0x2a8bce * 141, _0x2a8bce * 39);
      fill_path(_0x3c7486, undefined, _0x17dc4f[3], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 30, _0x2a8bce * 67);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 80, _0x2a8bce * 44, _0x2a8bce * 118, _0x2a8bce * 43, _0x2a8bce * 141, _0x2a8bce * 60);
      fill_path(_0x3c7486, undefined, _0x17dc4f[3], _0x2a8bce * 4);
      _0x3c7486.globalAlpha = 0.4;
      circle(_0x3c7486, _0x2a8bce * 31, _0x2a8bce * 44, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 42, _0x2a8bce * 47, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 70, _0x2a8bce * 42, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 53, _0x2a8bce * 45, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 103, _0x2a8bce * 40, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 116, _0x2a8bce * 41, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 131, _0x2a8bce * 41, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 39, _0x2a8bce * 64, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 51, _0x2a8bce * 60, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 74, _0x2a8bce * 53, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 83, _0x2a8bce * 51, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 95, _0x2a8bce * 51, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 107, _0x2a8bce * 49, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 120, _0x2a8bce * 50, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 137, _0x2a8bce * 57, _0x2a8bce * 9);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      _0x3c7486.globalAlpha = 1;
      circle(_0x3c7486, _0x2a8bce * 31, _0x2a8bce * 44, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 42, _0x2a8bce * 47, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 53, _0x2a8bce * 45, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 70, _0x2a8bce * 43, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 50, _0x2a8bce * 59, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 39, _0x2a8bce * 64, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 83, _0x2a8bce * 51, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 74, _0x2a8bce * 53, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 95, _0x2a8bce * 51, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 103, _0x2a8bce * 41, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 107, _0x2a8bce * 49, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 116, _0x2a8bce * 41, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 131, _0x2a8bce * 41, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 137, _0x2a8bce * 57, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 120, _0x2a8bce * 50, _0x2a8bce * 4);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[9]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[9]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[10]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[10]);
    } else if (_0xd4d7e3 == 3) {
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 23, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 30, _0x2a8bce * 85, _0x2a8bce * 30, _0x2a8bce * 83, _0x2a8bce * 30, _0x2a8bce * 72);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 30, _0x2a8bce * 61.5, _0x2a8bce * 30, _0x2a8bce * 61.5, _0x2a8bce * 30, _0x2a8bce * 51);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 29, _0x2a8bce * 33, _0x2a8bce * 42, _0x2a8bce * 23, _0x2a8bce * 54, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86.5, _0x2a8bce * 24, _0x2a8bce * 86.5, _0x2a8bce * 24, _0x2a8bce * 119, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 135, _0x2a8bce * 24, _0x2a8bce * 143, _0x2a8bce * 33, _0x2a8bce * 143, _0x2a8bce * 47);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 143, _0x2a8bce * 63.5, _0x2a8bce * 143, _0x2a8bce * 63.5, _0x2a8bce * 143, _0x2a8bce * 80);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 86, _0x2a8bce * 147, _0x2a8bce * 93, _0x2a8bce * 150, _0x2a8bce * 96);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 144, _0x2a8bce * 107, _0x2a8bce * 113, _0x2a8bce * 112, _0x2a8bce * 84, _0x2a8bce * 111);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 52, _0x2a8bce * 112, _0x2a8bce * 34, _0x2a8bce * 106, _0x2a8bce * 23, _0x2a8bce * 96);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 30, _0x2a8bce * 81);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 56, _0x2a8bce * 99, _0x2a8bce * 104, _0x2a8bce * 98, _0x2a8bce * 142, _0x2a8bce * 84);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 145.5, _0x2a8bce * 89.5, _0x2a8bce * 145.5, _0x2a8bce * 89.5, _0x2a8bce * 149, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 106, _0x2a8bce * 127, _0x2a8bce * 110, _0x2a8bce * 81, _0x2a8bce * 110);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 36, _0x2a8bce * 112, _0x2a8bce * 28, _0x2a8bce * 99, _0x2a8bce * 23, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 31, _0x2a8bce * 87, _0x2a8bce * 31, _0x2a8bce * 82, _0x2a8bce * 30, _0x2a8bce * 81);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 23, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 30, _0x2a8bce * 85, _0x2a8bce * 30, _0x2a8bce * 83, _0x2a8bce * 30, _0x2a8bce * 72);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 30, _0x2a8bce * 61.5, _0x2a8bce * 30, _0x2a8bce * 61.5, _0x2a8bce * 30, _0x2a8bce * 51);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 29, _0x2a8bce * 33, _0x2a8bce * 42, _0x2a8bce * 23, _0x2a8bce * 54, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86.5, _0x2a8bce * 24, _0x2a8bce * 86.5, _0x2a8bce * 24, _0x2a8bce * 119, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 135, _0x2a8bce * 24, _0x2a8bce * 143, _0x2a8bce * 33, _0x2a8bce * 143, _0x2a8bce * 47);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 143, _0x2a8bce * 63.5, _0x2a8bce * 143, _0x2a8bce * 63.5, _0x2a8bce * 143, _0x2a8bce * 80);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 142, _0x2a8bce * 86, _0x2a8bce * 147, _0x2a8bce * 93, _0x2a8bce * 150, _0x2a8bce * 96);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 144, _0x2a8bce * 107, _0x2a8bce * 113, _0x2a8bce * 112, _0x2a8bce * 84, _0x2a8bce * 111);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 52, _0x2a8bce * 112, _0x2a8bce * 34, _0x2a8bce * 106, _0x2a8bce * 23, _0x2a8bce * 96);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, undefined, _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[7]);
      _0x3c7486.translate(_0x2a8bce * -96, _0x2a8bce * -25);
      _0x3c7486.scale(1.8, 1.8);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 85, _0x2a8bce * 21);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 73, _0x2a8bce * 16, _0x2a8bce * 70, _0x2a8bce * 16, _0x2a8bce * 70, _0x2a8bce * 26);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 72, _0x2a8bce * 34, _0x2a8bce * 75, _0x2a8bce * 37, _0x2a8bce * 85, _0x2a8bce * 26);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[4], _0x17dc4f[5], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 89, _0x2a8bce * 21);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 104, _0x2a8bce * 16, _0x2a8bce * 105, _0x2a8bce * 19, _0x2a8bce * 106, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 105, _0x2a8bce * 36, _0x2a8bce * 97, _0x2a8bce * 36, _0x2a8bce * 90, _0x2a8bce * 28);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[4], _0x17dc4f[5], _0x2a8bce * 3);
      circle(_0x3c7486, _0x2a8bce * 87, _0x2a8bce * 23, _0x2a8bce * 6.324555320336759);
      fill_path(_0x3c7486, _0x17dc4f[4], _0x17dc4f[5], _0x2a8bce * 3);
    } else if (_0xd4d7e3 == 4) {
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 8);
      circle(_0x3c7486, _0x2a8bce * 15, _0x2a8bce * 76, _0x2a8bce * 9.219544457292887);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 106, _0x2a8bce * 76, _0x2a8bce * 9.219544457292887);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      _0x3c7486.translate(_0x2a8bce * -27, _0x2a8bce * -8);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      _0x3c7486.translate(_0x2a8bce * -27, _0x2a8bce * -10);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 8);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 52, _0x2a8bce * 86);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 54, _0x2a8bce * 78, _0x2a8bce * 65, _0x2a8bce * 80, _0x2a8bce * 67, _0x2a8bce * 85);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 69, _0x2a8bce * 89, _0x2a8bce * 64, _0x2a8bce * 99, _0x2a8bce * 71, _0x2a8bce * 106);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 75, _0x2a8bce * 109, _0x2a8bce * 61, _0x2a8bce * 108, _0x2a8bce * 58, _0x2a8bce * 102);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 53, _0x2a8bce * 97, _0x2a8bce * 52, _0x2a8bce * 91, _0x2a8bce * 52, _0x2a8bce * 86);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[4]);
    } else if (_0xd4d7e3 == 6) {
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.translate(_0x2a8bce * 2, 0);
      _0x3c7486.moveTo(_0x2a8bce * 28, _0x2a8bce * 69);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 26, _0x2a8bce * 39, _0x2a8bce * 31, _0x2a8bce * 25, _0x2a8bce * 52, _0x2a8bce * 24);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86, _0x2a8bce * 23.5, _0x2a8bce * 86, _0x2a8bce * 23.5, _0x2a8bce * 120, _0x2a8bce * 23);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 137, _0x2a8bce * 23, _0x2a8bce * 145, _0x2a8bce * 33, _0x2a8bce * 144, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 144.5, _0x2a8bce * 63, _0x2a8bce * 144.5, _0x2a8bce * 63, _0x2a8bce * 145, _0x2a8bce * 73);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 141, _0x2a8bce * 41, _0x2a8bce * 106, _0x2a8bce * 41, _0x2a8bce * 98, _0x2a8bce * 59);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 92, _0x2a8bce * 69, _0x2a8bce * 94, _0x2a8bce * 98, _0x2a8bce * 90, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86, _0x2a8bce * 95, _0x2a8bce * 86, _0x2a8bce * 95, _0x2a8bce * 82, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 79, _0x2a8bce * 94, _0x2a8bce * 87, _0x2a8bce * 33, _0x2a8bce * 48, _0x2a8bce * 47);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 31, _0x2a8bce * 57, _0x2a8bce * 30, _0x2a8bce * 65, _0x2a8bce * 28, _0x2a8bce * 72);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3]);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 87, _0x2a8bce * 64.5);
      round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
      _0x3c7486.restore();
      fill_path(_0x3c7486, undefined, _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[3]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[4]);
      _0x3c7486.scale(1.4, 1.4);
      _0x3c7486.translate(_0x2a8bce * -43.5, _0x2a8bce * -32);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 86, _0x2a8bce * 105);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 89, _0x2a8bce * 103, _0x2a8bce * 90, _0x2a8bce * 100, _0x2a8bce * 92, _0x2a8bce * 97);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 93, _0x2a8bce * 91, _0x2a8bce * 85, _0x2a8bce * 90, _0x2a8bce * 81, _0x2a8bce * 95);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 80, _0x2a8bce * 97, _0x2a8bce * 83, _0x2a8bce * 101, _0x2a8bce * 85, _0x2a8bce * 105);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 3);
    } else if (_0xd4d7e3 == 7) {
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 86, _0x2a8bce * 64.5);
      round_rect(_0x3c7486, _0x2a8bce * -16, _0x2a8bce * -43.5, _0x2a8bce * 32, _0x2a8bce * 87, _0x2a8bce * 5);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.translate(0, _0x2a8bce * 6);
      _0x3c7486.globalAlpha = 0.5;
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 85.5, _0x2a8bce * 47);
      round_rect(_0x3c7486, _0x2a8bce * -58.5, _0x2a8bce * -8, _0x2a8bce * 117, _0x2a8bce * 16, _0x2a8bce * 5);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.translate(0, _0x2a8bce * -6);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 85.5, _0x2a8bce * 47);
      round_rect(_0x3c7486, _0x2a8bce * -58.5, _0x2a8bce * -8, _0x2a8bce * 117, _0x2a8bce * 16, _0x2a8bce * 5);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.translate(0, _0x2a8bce * 7);
      _0x3c7486.globalAlpha = 0.5;
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 84, _0x2a8bce * 44);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 85, _0x2a8bce * 26, _0x2a8bce * 96, _0x2a8bce * 23, _0x2a8bce * 103, _0x2a8bce * 30);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 110, _0x2a8bce * 36, _0x2a8bce * 110, _0x2a8bce * 47, _0x2a8bce * 92, _0x2a8bce * 50);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 87, _0x2a8bce * 44);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 108, _0x2a8bce * 47, _0x2a8bce * 109, _0x2a8bce * 54, _0x2a8bce * 102, _0x2a8bce * 63);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 92, _0x2a8bce * 77, _0x2a8bce * 80, _0x2a8bce * 61, _0x2a8bce * 84, _0x2a8bce * 49);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 84, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86, _0x2a8bce * 24, _0x2a8bce * 72, _0x2a8bce * 23, _0x2a8bce * 68, _0x2a8bce * 31);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 56, _0x2a8bce * 42, _0x2a8bce * 70, _0x2a8bce * 49, _0x2a8bce * 81, _0x2a8bce * 47);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 78, _0x2a8bce * 45);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61, _0x2a8bce * 49, _0x2a8bce * 60, _0x2a8bce * 58, _0x2a8bce * 68, _0x2a8bce * 64);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 78, _0x2a8bce * 75, _0x2a8bce * 84, _0x2a8bce * 65, _0x2a8bce * 89, _0x2a8bce * 54);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.translate(0, _0x2a8bce * -7);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 84, _0x2a8bce * 44);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 85, _0x2a8bce * 26, _0x2a8bce * 96, _0x2a8bce * 23, _0x2a8bce * 103, _0x2a8bce * 30);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 110, _0x2a8bce * 36, _0x2a8bce * 110, _0x2a8bce * 47, _0x2a8bce * 92, _0x2a8bce * 50);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 87, _0x2a8bce * 44);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 108, _0x2a8bce * 47, _0x2a8bce * 109, _0x2a8bce * 54, _0x2a8bce * 102, _0x2a8bce * 63);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 92, _0x2a8bce * 77, _0x2a8bce * 80, _0x2a8bce * 61, _0x2a8bce * 84, _0x2a8bce * 49);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 84, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 86, _0x2a8bce * 24, _0x2a8bce * 72, _0x2a8bce * 23, _0x2a8bce * 68, _0x2a8bce * 31);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 56, _0x2a8bce * 42, _0x2a8bce * 70, _0x2a8bce * 49, _0x2a8bce * 81, _0x2a8bce * 47);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 78, _0x2a8bce * 45);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61, _0x2a8bce * 49, _0x2a8bce * 60, _0x2a8bce * 58, _0x2a8bce * 68, _0x2a8bce * 64);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 78, _0x2a8bce * 75, _0x2a8bce * 84, _0x2a8bce * 65, _0x2a8bce * 89, _0x2a8bce * 54);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.translate(0, _0x2a8bce * 6);
      _0x3c7486.globalAlpha = 0.5;
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 85, _0x2a8bce * 47.5);
      _0x3c7486.rotate(0);
      round_rect(_0x3c7486, _0x2a8bce * -10, _0x2a8bce * -10.5, _0x2a8bce * 20, _0x2a8bce * 21, _0x2a8bce * 5);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.translate(0, _0x2a8bce * -6);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 85, _0x2a8bce * 47.5);
      _0x3c7486.rotate(0);
      round_rect(_0x3c7486, _0x2a8bce * -10, _0x2a8bce * -10.5, _0x2a8bce * 20, _0x2a8bce * 21, _0x2a8bce * 5);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 4);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 10);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[5]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[6]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[6]);
    } else if (_0xd4d7e3 == 5) {
      _0x4d44e1.width = _0x2a8bce * 211;
      _0x4d44e1.height = _0x2a8bce * 152;
      _0x3c7486.globalAlpha = 0.5;
      _0x3c7486.translate(0, _0x2a8bce * 8);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 105.5, _0x2a8bce * 76.5);
      round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.translate(0, _0x2a8bce * -8);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 105.5, _0x2a8bce * 76.5);
      round_rect(_0x3c7486, _0x2a8bce * -56, _0x2a8bce * -41.5, _0x2a8bce * 112, _0x2a8bce * 83, _0x2a8bce * 18);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 68, _0x2a8bce * 39);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 48, _0x2a8bce * 37, _0x2a8bce * 43, _0x2a8bce * 27, _0x2a8bce * 40, _0x2a8bce * 12);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 31, _0x2a8bce * 25, _0x2a8bce * 20, _0x2a8bce * 17, _0x2a8bce * 11, _0x2a8bce * 9);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 9, _0x2a8bce * 41, _0x2a8bce * 40, _0x2a8bce * 44, _0x2a8bce * 62, _0x2a8bce * 45);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 143, _0x2a8bce * 38);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 161, _0x2a8bce * 40, _0x2a8bce * 169, _0x2a8bce * 24, _0x2a8bce * 171, _0x2a8bce * 13);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 181, _0x2a8bce * 23, _0x2a8bce * 188, _0x2a8bce * 20, _0x2a8bce * 199, _0x2a8bce * 9);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 204, _0x2a8bce * 35, _0x2a8bce * 182, _0x2a8bce * 44, _0x2a8bce * 152, _0x2a8bce * 45);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 105.5, _0x2a8bce * 76.5);
      round_rect(_0x3c7486, _0x2a8bce * -55, _0x2a8bce * -40.5, _0x2a8bce * 106, _0x2a8bce * 77, _0x2a8bce * 18);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[1]);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 149, _0x2a8bce * 45);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 155, _0x2a8bce * 37, _0x2a8bce * 158, _0x2a8bce * 37, _0x2a8bce * 161, _0x2a8bce * 52);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 164, _0x2a8bce * 60, _0x2a8bce * 161, _0x2a8bce * 65, _0x2a8bce * 152, _0x2a8bce * 58);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 145, _0x2a8bce * 51, _0x2a8bce * 143, _0x2a8bce * 49, _0x2a8bce * 149, _0x2a8bce * 45);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[4], _0x17dc4f[2], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 60, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 67, _0x2a8bce * 47, _0x2a8bce * 67, _0x2a8bce * 51, _0x2a8bce * 57, _0x2a8bce * 59);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 50, _0x2a8bce * 64, _0x2a8bce * 47, _0x2a8bce * 64, _0x2a8bce * 49, _0x2a8bce * 55);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 49, _0x2a8bce * 42, _0x2a8bce * 51, _0x2a8bce * 38, _0x2a8bce * 59, _0x2a8bce * 42);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[4], _0x17dc4f[2], _0x2a8bce * 4);
      circle(_0x3c7486, _0x2a8bce * 105, _0x2a8bce * 107, _0x2a8bce * 10.63014581273465);
      fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 4);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 105, _0x2a8bce * 100);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 111, _0x2a8bce * 101, _0x2a8bce * 113, _0x2a8bce * 104, _0x2a8bce * 112, _0x2a8bce * 109);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[7]);
      _0x3c7486.translate(_0x2a8bce * 44.5, _0x2a8bce * 22);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[8]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[9]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[9]);
    } else if (_0xd4d7e3 == 9) {
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 110, _0x2a8bce * 22);
      round_rect(_0x3c7486, _0x2a8bce * -16, _0x2a8bce * -5, _0x2a8bce * 32, _0x2a8bce * 10, _0x2a8bce * 10);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[1], _0x17dc4f[2], _0x2a8bce * 3);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 109.5, _0x2a8bce * 17);
      round_rect(_0x3c7486, _0x2a8bce * -18.5, _0x2a8bce * -3, _0x2a8bce * 37, _0x2a8bce * 6, _0x2a8bce * 10);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 3);
      _0x3c7486.globalAlpha = 0.5;
      _0x3c7486.translate(0, _0x2a8bce * 5);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 86, _0x2a8bce * 40);
      round_rect(_0x3c7486, _0x2a8bce * -58, _0x2a8bce * -9, _0x2a8bce * 116, _0x2a8bce * 18, _0x2a8bce * 6);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.translate(0, _0x2a8bce * -5);
      _0x3c7486.save();
      _0x3c7486.translate(_0x2a8bce * 86, _0x2a8bce * 40);
      round_rect(_0x3c7486, _0x2a8bce * -58, _0x2a8bce * -9, _0x2a8bce * 116, _0x2a8bce * 18, _0x2a8bce * 6);
      _0x3c7486.restore();
      fill_path(_0x3c7486, _0x17dc4f[3], _0x17dc4f[4], _0x2a8bce * 3);
      _0x3c7486.globalAlpha = 0.75;
      _0x3c7486.translate(0, _0x2a8bce * 5);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 109, _0x2a8bce * 47);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 110.5, _0x2a8bce * 45, _0x2a8bce * 110.5, _0x2a8bce * 45, _0x2a8bce * 112, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 114, _0x2a8bce * 44, _0x2a8bce * 114, _0x2a8bce * 44, _0x2a8bce * 116, _0x2a8bce * 45);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 117.5, _0x2a8bce * 43, _0x2a8bce * 117.5, _0x2a8bce * 43, _0x2a8bce * 119, _0x2a8bce * 41);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 121, _0x2a8bce * 41.5, _0x2a8bce * 121, _0x2a8bce * 41.5, _0x2a8bce * 123, _0x2a8bce * 42);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.beginPath();
      _0x3c7486.translate(0, _0x2a8bce * 5);
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 54, _0x2a8bce * 35);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61.5, _0x2a8bce * 35, _0x2a8bce * 61.5, _0x2a8bce * 35, _0x2a8bce * 69, _0x2a8bce * 35);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 70, _0x2a8bce * 48, _0x2a8bce * 70, _0x2a8bce * 60, _0x2a8bce * 60, _0x2a8bce * 59);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 45, _0x2a8bce * 61, _0x2a8bce * 44, _0x2a8bce * 60, _0x2a8bce * 43, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 42, _0x2a8bce * 49, _0x2a8bce * 55, _0x2a8bce * 51, _0x2a8bce * 55, _0x2a8bce * 44);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[0]);
      _0x3c7486.globalAlpha = 1;
      _0x3c7486.translate(0, _0x2a8bce * -5);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 105, _0x2a8bce * 38);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 110, _0x2a8bce * 48, _0x2a8bce * 110, _0x2a8bce * 50, _0x2a8bce * 105, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 98, _0x2a8bce * 62, _0x2a8bce * 107, _0x2a8bce * 66, _0x2a8bce * 117, _0x2a8bce * 60);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 128, _0x2a8bce * 56, _0x2a8bce * 130, _0x2a8bce * 56, _0x2a8bce * 126, _0x2a8bce * 49);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 123.5, _0x2a8bce * 41.5, _0x2a8bce * 123.5, _0x2a8bce * 41.5, _0x2a8bce * 121, _0x2a8bce * 34);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[7], _0x17dc4f[8], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 109, _0x2a8bce * 47);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 110.5, _0x2a8bce * 45, _0x2a8bce * 110.5, _0x2a8bce * 45, _0x2a8bce * 112, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 114, _0x2a8bce * 44, _0x2a8bce * 114, _0x2a8bce * 44, _0x2a8bce * 116, _0x2a8bce * 45);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 117.5, _0x2a8bce * 43, _0x2a8bce * 117.5, _0x2a8bce * 43, _0x2a8bce * 119, _0x2a8bce * 41);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 121, _0x2a8bce * 41.5, _0x2a8bce * 121, _0x2a8bce * 41.5, _0x2a8bce * 123, _0x2a8bce * 42);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, undefined, _0x17dc4f[6], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 84, _0x2a8bce * 33);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 88.5, _0x2a8bce * 34.5, _0x2a8bce * 88.5, _0x2a8bce * 34.5, _0x2a8bce * 93, _0x2a8bce * 36);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 87, _0x2a8bce * 43, _0x2a8bce * 88, _0x2a8bce * 45, _0x2a8bce * 91, _0x2a8bce * 46);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 98, _0x2a8bce * 56, _0x2a8bce * 91, _0x2a8bce * 57, _0x2a8bce * 85, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 80, _0x2a8bce * 50, _0x2a8bce * 78, _0x2a8bce * 49, _0x2a8bce * 82, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 83.5, _0x2a8bce * 38, _0x2a8bce * 83.5, _0x2a8bce * 38, _0x2a8bce * 85, _0x2a8bce * 33);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[5], _0x17dc4f[6], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 54, _0x2a8bce * 35);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61.5, _0x2a8bce * 35, _0x2a8bce * 61.5, _0x2a8bce * 35, _0x2a8bce * 69, _0x2a8bce * 35);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 70, _0x2a8bce * 48, _0x2a8bce * 70, _0x2a8bce * 60, _0x2a8bce * 60, _0x2a8bce * 59);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 45, _0x2a8bce * 61, _0x2a8bce * 44, _0x2a8bce * 60, _0x2a8bce * 43, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 42, _0x2a8bce * 49, _0x2a8bce * 55, _0x2a8bce * 51, _0x2a8bce * 55, _0x2a8bce * 44);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, _0x17dc4f[7], _0x17dc4f[8], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 48, _0x2a8bce * 49);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 50, _0x2a8bce * 50, _0x2a8bce * 50, _0x2a8bce * 50, _0x2a8bce * 52, _0x2a8bce * 51);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 50.5, _0x2a8bce * 52, _0x2a8bce * 50.5, _0x2a8bce * 52, _0x2a8bce * 49, _0x2a8bce * 53);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 51, _0x2a8bce * 54.5, _0x2a8bce * 51, _0x2a8bce * 54.5, _0x2a8bce * 53, _0x2a8bce * 56);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 51, _0x2a8bce * 57.5, _0x2a8bce * 51, _0x2a8bce * 57.5, _0x2a8bce * 49, _0x2a8bce * 59);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, undefined, _0x17dc4f[6], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 54, _0x2a8bce * 39);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61.5, _0x2a8bce * 39.5, _0x2a8bce * 61.5, _0x2a8bce * 39.5, _0x2a8bce * 69, _0x2a8bce * 40);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, undefined, _0x17dc4f[6], _0x2a8bce * 3);
      _0x3c7486.beginPath();
      _0x3c7486.lineCap = "round";
      _0x3c7486.lineJoin = "round";
      _0x3c7486.moveTo(_0x2a8bce * 55, _0x2a8bce * 43);
      _0x3c7486.bezierCurveTo(_0x2a8bce * 61.5, _0x2a8bce * 43.5, _0x2a8bce * 61.5, _0x2a8bce * 43.5, _0x2a8bce * 68, _0x2a8bce * 44);
      _0x3c7486.closePath();
      fill_path(_0x3c7486, undefined, _0x17dc4f[6], _0x2a8bce * 3);
      _0x3c7486.translate(_0x2a8bce * 27, _0x2a8bce * 5);
      circle(_0x3c7486, _0x2a8bce * 35, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[9]);
      circle(_0x3c7486, _0x2a8bce * 85, _0x2a8bce * 75, _0x2a8bce * 15);
      fill_path(_0x3c7486, _0x17dc4f[9]);
      circle(_0x3c7486, _0x2a8bce * 32, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[10]);
      circle(_0x3c7486, _0x2a8bce * 82, _0x2a8bce * 67, _0x2a8bce * 5);
      fill_path(_0x3c7486, _0x17dc4f[10]);
    }
  }
  return _0x4d44e1;
}
function create_robotskin(_0x1e41d4, _0x26e6e1) {
  var _0x664871 = document.createElement("canvas");
  var _0x1cfb7b = _0x664871.getContext("2d");
  _0x664871.width = _0x1e41d4 * 350;
  _0x664871.height = _0x1e41d4 * 350;
  _0x1cfb7b.translate(0, _0x1e41d4 * 15);
  _0x1cfb7b.globalAlpha = 0.5;
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 174, _0x1e41d4 * 172);
  round_rect(_0x1cfb7b, _0x1e41d4 * -81, _0x1e41d4 * -60, _0x1e41d4 * 162, _0x1e41d4 * 120, _0x1e41d4 * 26);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[0]);
  _0x1cfb7b.translate(0, _0x1e41d4 * -15);
  _0x1cfb7b.globalAlpha = 1;
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 174, _0x1e41d4 * 172);
  round_rect(_0x1cfb7b, _0x1e41d4 * -81, _0x1e41d4 * -60, _0x1e41d4 * 162, _0x1e41d4 * 120, _0x1e41d4 * 26);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[1], _0x26e6e1[2], _0x1e41d4 * 7);
  _0x1cfb7b.beginPath();
  _0x1cfb7b.lineCap = "round";
  _0x1cfb7b.lineJoin = "round";
  _0x1cfb7b.moveTo(_0x1e41d4 * 179, _0x1e41d4 * 211);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 183, _0x1e41d4 * 204.5, _0x1e41d4 * 183, _0x1e41d4 * 204.5, _0x1e41d4 * 187, _0x1e41d4 * 198);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 198.5, _0x1e41d4 * 191.5, _0x1e41d4 * 198.5, _0x1e41d4 * 191.5, _0x1e41d4 * 210, _0x1e41d4 * 185);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 215, _0x1e41d4 * 176.5, _0x1e41d4 * 215, _0x1e41d4 * 176.5, _0x1e41d4 * 220, _0x1e41d4 * 168);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 213, _0x1e41d4 * 173.5, _0x1e41d4 * 213, _0x1e41d4 * 173.5, _0x1e41d4 * 206, _0x1e41d4 * 179);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 195, _0x1e41d4 * 184, _0x1e41d4 * 195, _0x1e41d4 * 184, _0x1e41d4 * 184, _0x1e41d4 * 189);
  _0x1cfb7b.closePath();
  fill_path(_0x1cfb7b, _0x26e6e1[3]);
  _0x1cfb7b.beginPath();
  _0x1cfb7b.lineCap = "round";
  _0x1cfb7b.lineJoin = "round";
  _0x1cfb7b.moveTo(_0x1e41d4 * 167, _0x1e41d4 * 233);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 167, _0x1e41d4 * 207, _0x1e41d4 * 167, _0x1e41d4 * 207, _0x1e41d4 * 167, _0x1e41d4 * 181);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 167, _0x1e41d4 * 166, _0x1e41d4 * 157, _0x1e41d4 * 164, _0x1e41d4 * 148, _0x1e41d4 * 165);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 120, _0x1e41d4 * 165, _0x1e41d4 * 120, _0x1e41d4 * 165, _0x1e41d4 * 92, _0x1e41d4 * 165);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 92, _0x1e41d4 * 186.5, _0x1e41d4 * 92, _0x1e41d4 * 186.5, _0x1e41d4 * 92, _0x1e41d4 * 208);
  _0x1cfb7b.bezierCurveTo(_0x1e41d4 * 93, _0x1e41d4 * 222, _0x1e41d4 * 102, _0x1e41d4 * 234, _0x1e41d4 * 119, _0x1e41d4 * 233);
  _0x1cfb7b.closePath();
  fill_path(_0x1cfb7b, _0x26e6e1[1], _0x26e6e1[2], _0x1e41d4 * 7);
  circle(_0x1cfb7b, _0x1e41d4 * 152, _0x1e41d4 * 179, _0x1e41d4 * 6);
  fill_path(_0x1cfb7b, _0x26e6e1[4]);
  circle(_0x1cfb7b, _0x1e41d4 * 107, _0x1e41d4 * 179, _0x1e41d4 * 6);
  fill_path(_0x1cfb7b, _0x26e6e1[4]);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 210, _0x1e41d4 * 200);
  _0x1cfb7b.rotate(0.2);
  round_regular_polygon(_0x1cfb7b, 6, _0x1e41d4 * 32, _0x1e41d4 * 10);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[5], _0x26e6e1[2], _0x1e41d4 * 7);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 210, _0x1e41d4 * 200);
  _0x1cfb7b.rotate(1.0471975511965976);
  round_regular_polygon(_0x1cfb7b, 6, _0x1e41d4 * 19, _0x1e41d4 * 6);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[6], _0x26e6e1[7], _0x1e41d4 * 7);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 205, _0x1e41d4 * 193);
  _0x1cfb7b.rotate(0);
  round_regular_polygon(_0x1cfb7b, 6, _0x1e41d4 * 10, _0x1e41d4 * 3);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[8]);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 137, _0x1e41d4 * 200);
  _0x1cfb7b.rotate(-0.5235987755982988);
  round_regular_polygon(_0x1cfb7b, 6, _0x1e41d4 * 20, _0x1e41d4 * 5);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[6], _0x26e6e1[7], _0x1e41d4 * 7);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 131, _0x1e41d4 * 194);
  round_regular_polygon(_0x1cfb7b, 6, _0x1e41d4 * 10, _0x1e41d4 * 3);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, _0x26e6e1[8]);
  _0x1cfb7b.save();
  _0x1cfb7b.translate(_0x1e41d4 * 150.5, _0x1e41d4 * 120);
  _0x1cfb7b.rotate(0);
  round_rect(_0x1cfb7b, _0x1e41d4 * -19.5, _0x1e41d4 * -8, _0x1e41d4 * 39, _0x1e41d4 * 16, _0x1e41d4 * 0);
  _0x1cfb7b.restore();
  fill_path(_0x1cfb7b, undefined, _0x26e6e1[2], _0x1e41d4 * 7);
  return _0x664871;
}
function create_skins(_0x3f4859, _0x25fcd6, _0x1742a8) {
  var _0x1e8d04 = document.createElement("canvas");
  var _0x3dcd8e = _0x1e8d04.getContext("2d");
  _0x1e8d04.width = _0x3f4859 * 175;
  _0x1e8d04.height = _0x3f4859 * 150;
  if (_0x1742a8 == 0) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 131, _0x3f4859 * 194, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 206, _0x3f4859 * 194, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.translate(0, _0x3f4859 * 1);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 138.5, _0x3f4859 * 180.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -22.5, _0x3f4859 * -11.5, _0x3f4859 * 45, _0x3f4859 * 23, _0x3f4859 * 0);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 207, _0x3f4859 * 177.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -31, _0x3f4859 * -9.5, _0x3f4859 * 62, _0x3f4859 * 19, _0x3f4859 * 0);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 171.5, _0x3f4859 * 220);
    round_rect(_0x3dcd8e, _0x3f4859 * -52.5, _0x3f4859 * -2, _0x3f4859 * 105, _0x3f4859 * 4, _0x3f4859 * 0);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 1) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 183, _0x3f4859 * 223);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 193, _0x3f4859 * 187, _0x3f4859 * 215, _0x3f4859 * 193, _0x3f4859 * 227, _0x3f4859 * 159);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 227, _0x3f4859 * 194, _0x3f4859 * 209, _0x3f4859 * 187, _0x3f4859 * 183, _0x3f4859 * 223);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[5]);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 131, _0x3f4859 * 190, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 204, _0x3f4859 * 190, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 120, _0x3f4859 * 154);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 125, _0x3f4859 * 146, _0x3f4859 * 131, _0x3f4859 * 143, _0x3f4859 * 147, _0x3f4859 * 137);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 139, _0x3f4859 * 147, _0x3f4859 * 129, _0x3f4859 * 152, _0x3f4859 * 121, _0x3f4859 * 154);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[5]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 120, _0x3f4859 * 162);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 134, _0x3f4859 * 153, _0x3f4859 * 139, _0x3f4859 * 149, _0x3f4859 * 150, _0x3f4859 * 144);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 143, _0x3f4859 * 155, _0x3f4859 * 128, _0x3f4859 * 163, _0x3f4859 * 121, _0x3f4859 * 161);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[5]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 127, _0x3f4859 * 142);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 129, _0x3f4859 * 151, _0x3f4859 * 132, _0x3f4859 * 157, _0x3f4859 * 137, _0x3f4859 * 162);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 134, _0x3f4859 * 152, _0x3f4859 * 132, _0x3f4859 * 146, _0x3f4859 * 127, _0x3f4859 * 142);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[5]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 135, _0x3f4859 * 140);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 141, _0x3f4859 * 144, _0x3f4859 * 143, _0x3f4859 * 150, _0x3f4859 * 143, _0x3f4859 * 157);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 138, _0x3f4859 * 150, _0x3f4859 * 136, _0x3f4859 * 145, _0x3f4859 * 135, _0x3f4859 * 140);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[5]);
  } else if (_0x1742a8 == 2) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 130, _0x3f4859 * 192, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 203, _0x3f4859 * 192, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 115, _0x3f4859 * 224);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 173, _0x3f4859 * 223.5, _0x3f4859 * 173, _0x3f4859 * 223.5, _0x3f4859 * 231, _0x3f4859 * 223);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 230, _0x3f4859 * 222, _0x3f4859 * 198, _0x3f4859 * 223, _0x3f4859 * 186, _0x3f4859 * 209);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 173.5, _0x3f4859 * 209, _0x3f4859 * 173.5, _0x3f4859 * 209, _0x3f4859 * 161, _0x3f4859 * 209);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 146, _0x3f4859 * 224, _0x3f4859 * 114, _0x3f4859 * 223, _0x3f4859 * 116, _0x3f4859 * 224);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 112, _0x3f4859 * 193);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 154, _0x3f4859 * 182, _0x3f4859 * 194, _0x3f4859 * 183, _0x3f4859 * 234, _0x3f4859 * 192);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 217, _0x3f4859 * 154, _0x3f4859 * 148, _0x3f4859 * 127, _0x3f4859 * 112, _0x3f4859 * 192);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 3) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 130, _0x3f4859 * 192, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 203, _0x3f4859 * 192, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 120, _0x3f4859 * 176);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 175, _0x3f4859 * 193, _0x3f4859 * 147.5, _0x3f4859 * 184.5, _0x3f4859 * 175, _0x3f4859 * 193);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 200, _0x3f4859 * 184.5, _0x3f4859 * 200, _0x3f4859 * 184.5, _0x3f4859 * 225, _0x3f4859 * 176);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 226, _0x3f4859 * 223);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 173.5, _0x3f4859 * 223, _0x3f4859 * 173.5, _0x3f4859 * 223, _0x3f4859 * 121, _0x3f4859 * 223);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 148, _0x3f4859 * 218, _0x3f4859 * 148, _0x3f4859 * 218, _0x3f4859 * 175, _0x3f4859 * 213);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 4) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    _0x3dcd8e.rotate(0);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 203, _0x3f4859 * 8);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 209, _0x3f4859 * 203, _0x3f4859 * 8);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174.5, _0x3f4859 * 218);
    _0x3dcd8e.rotate(0);
    round_rect(_0x3dcd8e, _0x3f4859 * -60.5, _0x3f4859 * -5, _0x3f4859 * 121, _0x3f4859 * 10, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 113, _0x3f4859 * 190);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 144, _0x3f4859 * 181.5, _0x3f4859 * 144, _0x3f4859 * 181.5, _0x3f4859 * 175, _0x3f4859 * 173);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 205, _0x3f4859 * 182, _0x3f4859 * 205, _0x3f4859 * 182, _0x3f4859 * 235, _0x3f4859 * 191);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 242, _0x3f4859 * 141, _0x3f4859 * 106, _0x3f4859 * 119, _0x3f4859 * 112, _0x3f4859 * 189);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 5) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    _0x3dcd8e.rotate(0);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 140, _0x3f4859 * 196, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 213, _0x3f4859 * 196, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 131, _0x3f4859 * 206, _0x3f4859 * 3);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 204, _0x3f4859 * 206, _0x3f4859 * 3);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 113, _0x3f4859 * 181);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 159, _0x3f4859 * 204, _0x3f4859 * 190, _0x3f4859 * 202, _0x3f4859 * 235, _0x3f4859 * 181);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 241, _0x3f4859 * 137, _0x3f4859 * 109, _0x3f4859 * 130, _0x3f4859 * 112, _0x3f4859 * 180);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 220);
    _0x3dcd8e.rotate(0);
    round_rect(_0x3dcd8e, _0x3f4859 * -56, _0x3f4859 * -5, _0x3f4859 * 112, _0x3f4859 * 10, _0x3f4859 * 1);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 6) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 133, _0x3f4859 * 188, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 206, _0x3f4859 * 188, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 110, _0x3f4859 * 193);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 130, _0x3f4859 * 182, _0x3f4859 * 142, _0x3f4859 * 183, _0x3f4859 * 162, _0x3f4859 * 193);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 164, _0x3f4859 * 176.5, _0x3f4859 * 164, _0x3f4859 * 176.5, _0x3f4859 * 166, _0x3f4859 * 160);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 137, _0x3f4859 * 159, _0x3f4859 * 137, _0x3f4859 * 159, _0x3f4859 * 108, _0x3f4859 * 158);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 184, _0x3f4859 * 192);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 205, _0x3f4859 * 183, _0x3f4859 * 216, _0x3f4859 * 183, _0x3f4859 * 234, _0x3f4859 * 192);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 233.5, _0x3f4859 * 177, _0x3f4859 * 233.5, _0x3f4859 * 177, _0x3f4859 * 233, _0x3f4859 * 162);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 209, _0x3f4859 * 161.5, _0x3f4859 * 186, _0x3f4859 * 162, _0x3f4859 * 185, _0x3f4859 * 161);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 7) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 130, _0x3f4859 * 206, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 203, _0x3f4859 * 206, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.beginPath();
    _0x3dcd8e.lineCap = "round";
    _0x3dcd8e.lineJoin = "round";
    _0x3dcd8e.moveTo(_0x3f4859 * 108, _0x3f4859 * 191);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 141, _0x3f4859 * 184, _0x3f4859 * 141, _0x3f4859 * 184, _0x3f4859 * 174, _0x3f4859 * 177);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 207, _0x3f4859 * 184, _0x3f4859 * 207, _0x3f4859 * 184, _0x3f4859 * 240, _0x3f4859 * 191);
    _0x3dcd8e.bezierCurveTo(_0x3f4859 * 244, _0x3f4859 * 140, _0x3f4859 * 113, _0x3f4859 * 121, _0x3f4859 * 108, _0x3f4859 * 191);
    _0x3dcd8e.closePath();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 8) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.20360331117452);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 127, _0x3f4859 * 198, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 200, _0x3f4859 * 198, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 175, _0x3f4859 * 175.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -67, _0x3f4859 * -13.5, _0x3f4859 * 134, _0x3f4859 * 27, _0x3f4859 * 0);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 172, _0x3f4859 * 219);
    round_rect(_0x3dcd8e, _0x3f4859 * -60, _0x3f4859 * -4, _0x3f4859 * 120, _0x3f4859 * 8, _0x3f4859 * 0);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1]);
  } else if (_0x1742a8 == 9) {
    _0x3dcd8e.globalAlpha = 0.5;
    _0x3dcd8e.translate(_0x3f4859 * -88, _0x3f4859 * -95);
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 195.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -82, _0x3f4859 * -46.5, _0x3f4859 * 164, _0x3f4859 * 93, _0x3f4859 * 30);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[0]);
    _0x3dcd8e.globalAlpha = 1;
    _0x3dcd8e.save();
    _0x3dcd8e.translate(_0x3f4859 * 174, _0x3f4859 * 170.5);
    round_rect(_0x3dcd8e, _0x3f4859 * -81, _0x3f4859 * -59.5, _0x3f4859 * 162, _0x3f4859 * 119, _0x3f4859 * 28);
    _0x3dcd8e.restore();
    fill_path(_0x3dcd8e, _0x25fcd6[1], _0x25fcd6[2], _0x3f4859 * 6.5);
    circle(_0x3dcd8e, _0x3f4859 * 137, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 210, _0x3f4859 * 200, _0x3f4859 * 22.090722034374522);
    fill_path(_0x3dcd8e, _0x25fcd6[3]);
    circle(_0x3dcd8e, _0x3f4859 * 143, _0x3f4859 * 200, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
    circle(_0x3dcd8e, _0x3f4859 * 204, _0x3f4859 * 200, _0x3f4859 * 7);
    fill_path(_0x3dcd8e, _0x25fcd6[4]);
  }
  return _0x1e8d04;
}
function create_garlic(_0x53911c, _0x230564, _0x302753) {
  var _0x3f620d = document.createElement("canvas");
  var _0x5a652e = _0x3f620d.getContext("2d");
  _0x3f620d.width = _0x53911c * 264;
  _0x3f620d.height = _0x53911c * 246;
  _0x5a652e.translate(0, _0x53911c * 10);
  _0x5a652e.globalAlpha = _0x230564 ? 0.5 : 1;
  _0x5a652e.beginPath();
  _0x5a652e.lineCap = "round";
  _0x5a652e.lineJoin = "round";
  _0x5a652e.moveTo(_0x53911c * 75, _0x53911c * 54);
  _0x5a652e.bezierCurveTo(_0x53911c * 79, _0x53911c * 21, _0x53911c * 131, _0x53911c * 13, _0x53911c * 153, _0x53911c * 36);
  _0x5a652e.bezierCurveTo(_0x53911c * 204, _0x53911c * 27, _0x53911c * 221, _0x53911c * 52, _0x53911c * 216, _0x53911c * 83);
  _0x5a652e.bezierCurveTo(_0x53911c * 241, _0x53911c * 103, _0x53911c * 232, _0x53911c * 138, _0x53911c * 214, _0x53911c * 147);
  _0x5a652e.bezierCurveTo(_0x53911c * 223, _0x53911c * 184, _0x53911c * 201, _0x53911c * 200, _0x53911c * 175, _0x53911c * 199);
  _0x5a652e.bezierCurveTo(_0x53911c * 156, _0x53911c * 218, _0x53911c * 135, _0x53911c * 222, _0x53911c * 114, _0x53911c * 203);
  _0x5a652e.bezierCurveTo(_0x53911c * 62, _0x53911c * 213, _0x53911c * 66, _0x53911c * 189, _0x53911c * 59, _0x53911c * 170);
  _0x5a652e.bezierCurveTo(_0x53911c * 27, _0x53911c * 164, _0x53911c * 31, _0x53911c * 134, _0x53911c * 38, _0x53911c * 123);
  _0x5a652e.bezierCurveTo(_0x53911c * 11, _0x53911c * 80, _0x53911c * 51, _0x53911c * 52, _0x53911c * 75, _0x53911c * 54);
  _0x5a652e.closePath();
  fill_path(_0x5a652e, _0x302753[0]);
  _0x5a652e.translate(0, _0x53911c * -10);
  _0x5a652e.globalAlpha = 1;
  _0x5a652e.beginPath();
  _0x5a652e.lineCap = "round";
  _0x5a652e.lineJoin = "round";
  _0x5a652e.moveTo(_0x53911c * 75, _0x53911c * 54);
  _0x5a652e.bezierCurveTo(_0x53911c * 79, _0x53911c * 21, _0x53911c * 131, _0x53911c * 13, _0x53911c * 153, _0x53911c * 36);
  _0x5a652e.bezierCurveTo(_0x53911c * 204, _0x53911c * 27, _0x53911c * 221, _0x53911c * 52, _0x53911c * 216, _0x53911c * 83);
  _0x5a652e.bezierCurveTo(_0x53911c * 241, _0x53911c * 103, _0x53911c * 232, _0x53911c * 138, _0x53911c * 214, _0x53911c * 147);
  _0x5a652e.bezierCurveTo(_0x53911c * 223, _0x53911c * 184, _0x53911c * 201, _0x53911c * 200, _0x53911c * 175, _0x53911c * 199);
  _0x5a652e.bezierCurveTo(_0x53911c * 156, _0x53911c * 218, _0x53911c * 135, _0x53911c * 222, _0x53911c * 114, _0x53911c * 203);
  _0x5a652e.bezierCurveTo(_0x53911c * 62, _0x53911c * 213, _0x53911c * 66, _0x53911c * 189, _0x53911c * 59, _0x53911c * 170);
  _0x5a652e.bezierCurveTo(_0x53911c * 27, _0x53911c * 164, _0x53911c * 31, _0x53911c * 134, _0x53911c * 38, _0x53911c * 123);
  _0x5a652e.bezierCurveTo(_0x53911c * 11, _0x53911c * 80, _0x53911c * 51, _0x53911c * 52, _0x53911c * 75, _0x53911c * 54);
  _0x5a652e.closePath();
  fill_path(_0x5a652e, _0x302753[1], _0x302753[2], _0x53911c * 8);
  _0x5a652e.beginPath();
  _0x5a652e.lineCap = "round";
  _0x5a652e.lineJoin = "round";
  _0x5a652e.moveTo(_0x53911c * 121, _0x53911c * 102);
  _0x5a652e.bezierCurveTo(_0x53911c * 111, _0x53911c * 80, _0x53911c * 110, _0x53911c * 66, _0x53911c * 108, _0x53911c * 51);
  _0x5a652e.bezierCurveTo(_0x53911c * 119, _0x53911c * 65, _0x53911c * 129, _0x53911c * 85, _0x53911c * 135, _0x53911c * 99);
  _0x5a652e.bezierCurveTo(_0x53911c * 142, _0x53911c * 67, _0x53911c * 146, _0x53911c * 60, _0x53911c * 152, _0x53911c * 50);
  _0x5a652e.bezierCurveTo(_0x53911c * 154, _0x53911c * 71, _0x53911c * 152, _0x53911c * 85, _0x53911c * 149, _0x53911c * 104);
  _0x5a652e.bezierCurveTo(_0x53911c * 166, _0x53911c * 88, _0x53911c * 175, _0x53911c * 83, _0x53911c * 188, _0x53911c * 78);
  _0x5a652e.bezierCurveTo(_0x53911c * 179, _0x53911c * 91, _0x53911c * 170, _0x53911c * 103, _0x53911c * 160, _0x53911c * 112);
  _0x5a652e.bezierCurveTo(_0x53911c * 186, _0x53911c * 107, _0x53911c * 191, _0x53911c * 107, _0x53911c * 204, _0x53911c * 108);
  _0x5a652e.bezierCurveTo(_0x53911c * 195, _0x53911c * 114, _0x53911c * 179, _0x53911c * 120, _0x53911c * 163, _0x53911c * 123);
  _0x5a652e.bezierCurveTo(_0x53911c * 183, _0x53911c * 130, _0x53911c * 186, _0x53911c * 135, _0x53911c * 192, _0x53911c * 140);
  _0x5a652e.bezierCurveTo(_0x53911c * 179, _0x53911c * 141, _0x53911c * 164, _0x53911c * 139, _0x53911c * 153, _0x53911c * 135);
  _0x5a652e.bezierCurveTo(_0x53911c * 158, _0x53911c * 145, _0x53911c * 163, _0x53911c * 159, _0x53911c * 165, _0x53911c * 177);
  _0x5a652e.bezierCurveTo(_0x53911c * 154, _0x53911c * 166, _0x53911c * 145, _0x53911c * 153, _0x53911c * 138, _0x53911c * 139);
  _0x5a652e.bezierCurveTo(_0x53911c * 133, _0x53911c * 155, _0x53911c * 125, _0x53911c * 170, _0x53911c * 117, _0x53911c * 182);
  _0x5a652e.bezierCurveTo(_0x53911c * 116, _0x53911c * 160, _0x53911c * 119, _0x53911c * 151, _0x53911c * 124, _0x53911c * 138);
  _0x5a652e.bezierCurveTo(_0x53911c * 107, _0x53911c * 150, _0x53911c * 95, _0x53911c * 156, _0x53911c * 82, _0x53911c * 159);
  _0x5a652e.bezierCurveTo(_0x53911c * 94, _0x53911c * 140, _0x53911c * 101, _0x53911c * 136, _0x53911c * 113, _0x53911c * 128);
  _0x5a652e.bezierCurveTo(_0x53911c * 78, _0x53911c * 123, _0x53911c * 75, _0x53911c * 121, _0x53911c * 67, _0x53911c * 118);
  _0x5a652e.bezierCurveTo(_0x53911c * 85, _0x53911c * 112, _0x53911c * 94, _0x53911c * 112, _0x53911c * 111, _0x53911c * 113);
  _0x5a652e.bezierCurveTo(_0x53911c * 89, _0x53911c * 97, _0x53911c * 85, _0x53911c * 93, _0x53911c * 78, _0x53911c * 82);
  _0x5a652e.bezierCurveTo(_0x53911c * 92, _0x53911c * 85, _0x53911c * 101, _0x53911c * 90, _0x53911c * 121, _0x53911c * 102);
  _0x5a652e.closePath();
  fill_path(_0x5a652e, _0x302753[2]);
  _0x5a652e.beginPath();
  _0x5a652e.lineCap = "round";
  _0x5a652e.lineJoin = "round";
  _0x5a652e.moveTo(_0x53911c * 128, _0x53911c * 103);
  _0x5a652e.bezierCurveTo(_0x53911c * 111, _0x53911c * 112, _0x53911c * 117, _0x53911c * 136, _0x53911c * 140, _0x53911c * 130);
  _0x5a652e.bezierCurveTo(_0x53911c * 151, _0x53911c * 126, _0x53911c * 156, _0x53911c * 115, _0x53911c * 155, _0x53911c * 107);
  _0x5a652e.bezierCurveTo(_0x53911c * 155, _0x53911c * 96, _0x53911c * 154, _0x53911c * 94, _0x53911c * 148, _0x53911c * 94);
  _0x5a652e.bezierCurveTo(_0x53911c * 141, _0x53911c * 94, _0x53911c * 146, _0x53911c * 104, _0x53911c * 136, _0x53911c * 104);
  _0x5a652e.closePath();
  fill_path(_0x5a652e, _0x302753[3], _0x302753[4], _0x53911c * 4);
  return _0x3f620d;
}
function create_garland_inv(_0x54f819, _0x32f8d4, _0xad8d45) {
  var _0x406ad5 = document.createElement("canvas");
  var _0x55d004 = _0x406ad5.getContext("2d");
  _0x406ad5.width = _0x54f819 * 70;
  _0x406ad5.height = _0x54f819 * 70;
  _0x55d004.globalAlpha = 0.5;
  circle(_0x55d004, _0x54f819 * 26, _0x54f819 * 26, _0x54f819 * 9);
  fill_path(_0x55d004, _0xad8d45[0]);
  circle(_0x55d004, _0x54f819 * 56, _0x54f819 * 36, _0x54f819 * 9);
  fill_path(_0x55d004, _0xad8d45[1]);
  circle(_0x55d004, _0x54f819 * 40, _0x54f819 * 50, _0x54f819 * 9);
  fill_path(_0x55d004, _0xad8d45[2]);
  _0x55d004.globalAlpha = 1;
  circle(_0x55d004, _0x54f819 * 26, _0x54f819 * 26, _0x54f819 * 5);
  fill_path(_0x55d004, _0xad8d45[0]);
  circle(_0x55d004, _0x54f819 * 56, _0x54f819 * 36, _0x54f819 * 5);
  fill_path(_0x55d004, _0xad8d45[1]);
  circle(_0x55d004, _0x54f819 * 40, _0x54f819 * 50, _0x54f819 * 5);
  fill_path(_0x55d004, _0xad8d45[2]);
  return _0x406ad5;
}
function create_garland(_0x1ae0fa, _0xb1c14f, _0x1294fc) {
  var _0x1d4a71 = document.createElement("canvas");
  var _0x1d09fa = _0x1d4a71.getContext("2d");
  _0x1d4a71.width = _0x1ae0fa * 22;
  _0x1d4a71.height = _0x1ae0fa * 22;
  _0x1d09fa.globalAlpha = 0.4;
  circle(_0x1d09fa, _0x1ae0fa * 11, _0x1ae0fa * 11, _0x1ae0fa * 10);
  fill_path(_0x1d09fa, _0x1294fc[0]);
  _0x1d09fa.globalAlpha = 0.7;
  circle(_0x1d09fa, _0x1ae0fa * 11, _0x1ae0fa * 11, _0x1ae0fa * 7);
  fill_path(_0x1d09fa, _0x1294fc[0]);
  _0x1d09fa.globalAlpha = 1;
  circle(_0x1d09fa, _0x1ae0fa * 11, _0x1ae0fa * 11, _0x1ae0fa * 4);
  fill_path(_0x1d09fa, _0x1294fc[0]);
  return _0x1d4a71;
}
function create_garland_light(_0x4b9451, _0x36c6ee, _0x43d935) {
  var _0x5e1502 = document.createElement("canvas");
  var _0x5fdf6d = _0x5e1502.getContext("2d");
  _0x5e1502.width = _0x4b9451 * 20;
  _0x5e1502.height = _0x4b9451 * 20;
  _0x5fdf6d.globalAlpha = 0.5;
  circle(_0x5fdf6d, _0x4b9451 * 10, _0x4b9451 * 10, _0x4b9451 * 9);
  fill_path(_0x5fdf6d, _0x43d935[0]);
  return _0x5e1502;
}
function create_roof(_0x306610, _0xe399a4, _0x192a5b) {
  var _0x1cb3ab = document.createElement("canvas");
  var _0x6434c = _0x1cb3ab.getContext("2d");
  _0x1cb3ab.width = _0x306610 * 248;
  _0x1cb3ab.height = _0x306610 * 247;
  _0x6434c.save();
  _0x6434c.translate(_0x306610 * 69.5, _0x306610 * 145);
  round_rect(_0x6434c, _0x306610 * -8.5, _0x306610 * -63, _0x306610 * 17, _0x306610 * 127, _0x306610 * 1);
  _0x6434c.restore();
  fill_path(_0x6434c, _0x192a5b[0]);
  _0x6434c.save();
  _0x6434c.translate(_0x306610 * 183, _0x306610 * 145);
  round_rect(_0x6434c, _0x306610 * -8, _0x306610 * -63, _0x306610 * 16, _0x306610 * 126, _0x306610 * 1);
  _0x6434c.restore();
  fill_path(_0x6434c, _0x192a5b[0]);
  _0x6434c.save();
  _0x6434c.translate(_0x306610 * 123.5, _0x306610 * 62.5);
  _0x6434c.rotate(6.28);
  round_rect(_0x6434c, _0x306610 * -84.5, _0x306610 * -25.5, _0x306610 * 169, _0x306610 * 51, _0x306610 * 5);
  _0x6434c.restore();
  fill_path(_0x6434c, _0x192a5b[2], _0x192a5b[1], _0x306610 * 6);
  _0x6434c.save();
  _0x6434c.translate(_0x306610 * 123.5, _0x306610 * 118);
  _0x6434c.rotate(6.24);
  round_rect(_0x6434c, _0x306610 * -85.5, _0x306610 * -24, _0x306610 * 169, _0x306610 * 48, _0x306610 * 5);
  _0x6434c.restore();
  fill_path(_0x6434c, _0x192a5b[3], _0x192a5b[1], _0x306610 * 6);
  _0x6434c.save();
  _0x6434c.translate(_0x306610 * 122, _0x306610 * 177.5);
  _0x6434c.rotate(6.32);
  round_rect(_0x6434c, _0x306610 * -84, _0x306610 * -23.5, _0x306610 * 169, _0x306610 * 47, _0x306610 * 5);
  _0x6434c.restore();
  fill_path(_0x6434c, _0x192a5b[2], _0x192a5b[1], _0x306610 * 6);
  _0x6434c.beginPath();
  _0x6434c.lineCap = "round";
  _0x6434c.lineJoin = "round";
  _0x6434c.moveTo(_0x306610 * 37, _0x306610 * 157);
  _0x6434c.bezierCurveTo(_0x306610 * 49, _0x306610 * 160, _0x306610 * 49, _0x306610 * 160, _0x306610 * 61, _0x306610 * 163);
  _0x6434c.bezierCurveTo(_0x306610 * 49.5, _0x306610 * 165.5, _0x306610 * 49.5, _0x306610 * 165.5, _0x306610 * 38, _0x306610 * 168);
  _0x6434c.closePath();
  fill_path(_0x6434c, _0x192a5b[1]);
  _0x6434c.beginPath();
  _0x6434c.lineCap = "round";
  _0x6434c.lineJoin = "round";
  _0x6434c.moveTo(_0x306610 * 205, _0x306610 * 175);
  _0x6434c.bezierCurveTo(_0x306610 * 192.5, _0x306610 * 180, _0x306610 * 192.5, _0x306610 * 180, _0x306610 * 180, _0x306610 * 185);
  _0x6434c.bezierCurveTo(_0x306610 * 193, _0x306610 * 188, _0x306610 * 193, _0x306610 * 188, _0x306610 * 206, _0x306610 * 191);
  _0x6434c.closePath();
  fill_path(_0x6434c, _0x192a5b[1]);
  return _0x1cb3ab;
}
function create_roof1(_0xc4259f, _0x481377, _0x2db616) {
  var _0x1a3332 = document.createElement("canvas");
  var _0x10124b = _0x1a3332.getContext("2d");
  _0x1a3332.width = _0xc4259f * 248;
  _0x1a3332.height = _0xc4259f * 247;
  _0x10124b.save();
  _0x10124b.translate(_0xc4259f * 182, _0xc4259f * 120);
  round_rect(_0x10124b, _0xc4259f * -8, _0xc4259f * -67, _0xc4259f * 16, _0xc4259f * 134, _0xc4259f * 1);
  _0x10124b.restore();
  fill_path(_0x10124b, _0x2db616[0]);
  _0x10124b.save();
  _0x10124b.translate(_0xc4259f * 68.5, _0xc4259f * 127.5);
  round_rect(_0x10124b, _0xc4259f * -8.5, _0xc4259f * -70.5, _0xc4259f * 17, _0xc4259f * 141, _0xc4259f * 1);
  _0x10124b.restore();
  fill_path(_0x10124b, _0x2db616[0]);
  _0x10124b.save();
  _0x10124b.translate(_0xc4259f * 123.5, _0xc4259f * 68);
  round_rect(_0x10124b, _0xc4259f * -82.5, _0xc4259f * -24, _0xc4259f * 165, _0xc4259f * 48, _0xc4259f * 4);
  _0x10124b.restore();
  fill_path(_0x10124b, _0x2db616[2], _0x2db616[1], _0xc4259f * 6);
  _0x10124b.save();
  _0x10124b.translate(_0xc4259f * 123, _0xc4259f * 179.5);
  round_rect(_0x10124b, _0xc4259f * -83, _0xc4259f * -24.5, _0xc4259f * 166, _0xc4259f * 49, _0xc4259f * 4);
  _0x10124b.restore();
  fill_path(_0x10124b, _0x2db616[2], _0x2db616[1], _0xc4259f * 6);
  _0x10124b.save();
  _0x10124b.translate(_0xc4259f * 123.5, _0xc4259f * 123.5);
  _0x10124b.rotate(6.24);
  round_rect(_0x10124b, _0xc4259f * -82.5, _0xc4259f * -24.5, _0xc4259f * 165, _0xc4259f * 49, _0xc4259f * 4);
  _0x10124b.restore();
  fill_path(_0x10124b, _0x2db616[3], _0x2db616[1], _0xc4259f * 6);
  _0x10124b.beginPath();
  _0x10124b.lineCap = "round";
  _0x10124b.lineJoin = "round";
  _0x10124b.moveTo(_0xc4259f * 204, _0xc4259f * 112);
  _0x10124b.bezierCurveTo(_0xc4259f * 149, _0xc4259f * 121.5, _0xc4259f * 96, _0xc4259f * 130, _0xc4259f * 94, _0xc4259f * 131);
  _0x10124b.bezierCurveTo(_0xc4259f * 149.5, _0xc4259f * 127.5, _0xc4259f * 149.5, _0xc4259f * 127.5, _0xc4259f * 205, _0xc4259f * 124);
  _0x10124b.closePath();
  fill_path(_0x10124b, _0x2db616[1]);
  return _0x1a3332;
}
function create_roof2(_0x157ef1, _0x4c9eb7, _0x46c376) {
  var _0xd71ec5 = document.createElement("canvas");
  var _0x365571 = _0xd71ec5.getContext("2d");
  _0xd71ec5.width = _0x157ef1 * 248;
  _0xd71ec5.height = _0x157ef1 * 247;
  _0x365571.save();
  _0x365571.translate(_0x157ef1 * 183, _0x157ef1 * 107);
  round_rect(_0x365571, _0x157ef1 * -8, _0x157ef1 * -70.5, _0x157ef1 * 16, _0x157ef1 * 141, _0x157ef1 * 1);
  _0x365571.restore();
  fill_path(_0x365571, _0x46c376[0]);
  _0x365571.save();
  _0x365571.translate(_0x157ef1 * 69.5, _0x157ef1 * 110);
  round_rect(_0x365571, _0x157ef1 * -8.5, _0x157ef1 * -71, _0x157ef1 * 17, _0x157ef1 * 143, _0x157ef1 * 1);
  _0x365571.restore();
  fill_path(_0x365571, _0x46c376[0]);
  _0x365571.save();
  _0x365571.translate(_0x157ef1 * 123.5, _0x157ef1 * 181);
  round_rect(_0x365571, _0x157ef1 * -84.5, _0x157ef1 * -26, _0x157ef1 * 169, _0x157ef1 * 52, _0x157ef1 * 5);
  _0x365571.restore();
  fill_path(_0x365571, _0x46c376[2], _0x46c376[1], _0x157ef1 * 6);
  _0x365571.beginPath();
  _0x365571.lineCap = "round";
  _0x365571.lineJoin = "round";
  _0x365571.moveTo(_0x157ef1 * 41, _0x157ef1 * 95);
  _0x365571.bezierCurveTo(_0x157ef1 * 105, _0x157ef1 * 96, _0x157ef1 * 113, _0x157ef1 * 99, _0x157ef1 * 134, _0x157ef1 * 102);
  _0x365571.bezierCurveTo(_0x157ef1 * 147, _0x157ef1 * 106, _0x157ef1 * 173, _0x157ef1 * 100, _0x157ef1 * 207, _0x157ef1 * 105);
  _0x365571.bezierCurveTo(_0x157ef1 * 210, _0x157ef1 * 105, _0x157ef1 * 207, _0x157ef1 * 140, _0x157ef1 * 207, _0x157ef1 * 154);
  _0x365571.bezierCurveTo(_0x157ef1 * 123.5, _0x157ef1 * 151.5, _0x157ef1 * 123.5, _0x157ef1 * 151.5, _0x157ef1 * 40, _0x157ef1 * 149);
  _0x365571.bezierCurveTo(_0x157ef1 * 37, _0x157ef1 * 145, _0x157ef1 * 39, _0x157ef1 * 95, _0x157ef1 * 41, _0x157ef1 * 96);
  _0x365571.closePath();
  fill_path(_0x365571, _0x46c376[2], _0x46c376[1], _0x157ef1 * 6);
  _0x365571.beginPath();
  _0x365571.lineCap = "round";
  _0x365571.lineJoin = "round";
  _0x365571.moveTo(_0x157ef1 * 68, _0x157ef1 * 75);
  _0x365571.bezierCurveTo(_0x157ef1 * 54, _0x157ef1 * 72.5, _0x157ef1 * 54, _0x157ef1 * 72.5, _0x157ef1 * 40, _0x157ef1 * 70);
  _0x365571.bezierCurveTo(_0x157ef1 * 38, _0x157ef1 * 46, _0x157ef1 * 40, _0x157ef1 * 46, _0x157ef1 * 53, _0x157ef1 * 46);
  _0x365571.bezierCurveTo(_0x157ef1 * 201, _0x157ef1 * 41, _0x157ef1 * 201, _0x157ef1 * 41, _0x157ef1 * 201, _0x157ef1 * 42);
  _0x365571.bezierCurveTo(_0x157ef1 * 211, _0x157ef1 * 40, _0x157ef1 * 208, _0x157ef1 * 53, _0x157ef1 * 208, _0x157ef1 * 72);
  _0x365571.bezierCurveTo(_0x157ef1 * 209, _0x157ef1 * 91, _0x157ef1 * 210, _0x157ef1 * 96, _0x157ef1 * 194, _0x157ef1 * 94);
  _0x365571.bezierCurveTo(_0x157ef1 * 119, _0x157ef1 * 97, _0x157ef1 * 119, _0x157ef1 * 97, _0x157ef1 * 44, _0x157ef1 * 100);
  _0x365571.bezierCurveTo(_0x157ef1 * 39, _0x157ef1 * 99, _0x157ef1 * 40, _0x157ef1 * 96, _0x157ef1 * 40, _0x157ef1 * 80);
  _0x365571.bezierCurveTo(_0x157ef1 * 54, _0x157ef1 * 77.5, _0x157ef1 * 54, _0x157ef1 * 77.5, _0x157ef1 * 68, _0x157ef1 * 75);
  _0x365571.closePath();
  fill_path(_0x365571, _0x46c376[3], _0x46c376[1], _0x157ef1 * 6);
  return _0xd71ec5;
}
function create_zombie_head(_0x47351e, _0x220f3a, _0x2aab5c) {
  var _0x46a947 = document.createElement("canvas");
  var _0x52c6d5 = _0x46a947.getContext("2d");
  _0x46a947.width = _0x47351e * 191;
  _0x46a947.height = _0x47351e * 153;
  _0x52c6d5.globalAlpha = 0.5;
  _0x52c6d5.translate(0, _0x47351e * 10);
  _0x52c6d5.save();
  _0x52c6d5.translate(_0x47351e * 97.49996948242188, _0x47351e * 95.12844848632812);
  round_rect(_0x52c6d5, _0x47351e * -62.5, _0x47351e * -41.5, _0x47351e * 125, _0x47351e * 83, _0x47351e * 20);
  _0x52c6d5.restore();
  fill_path(_0x52c6d5, _0x2aab5c[0], _0x2aab5c[0], _0x47351e * 4);
  _0x52c6d5.globalAlpha = 1;
  _0x52c6d5.translate(0, _0x47351e * -10);
  _0x52c6d5.save();
  _0x52c6d5.translate(_0x47351e * 97.49996948242188, _0x47351e * 95.12844848632812);
  round_rect(_0x52c6d5, _0x47351e * -62.5, _0x47351e * -41.5, _0x47351e * 125, _0x47351e * 83, _0x47351e * 20);
  _0x52c6d5.restore();
  fill_path(_0x52c6d5, _0x2aab5c[1], _0x2aab5c[2], _0x47351e * 4);
  _0x52c6d5.globalCompositeOperation = "destination-out";
  _0x52c6d5.beginPath();
  _0x52c6d5.lineCap = "round";
  _0x52c6d5.lineJoin = "round";
  _0x52c6d5.moveTo(_0x47351e * 26.999969482421875, _0x47351e * 50.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 46.499969482421875, _0x47351e * 64.85067749023438, _0x47351e * 46.499969482421875, _0x47351e * 64.85067749023438, _0x47351e * 65.99996948242188, _0x47351e * 78.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 80.99996948242188, _0x47351e * 87.85067749023438, _0x47351e * 105.99996948242188, _0x47351e * 82.85067749023438, _0x47351e * 114.99996948242188, _0x47351e * 80.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 130.99996948242188, _0x47351e * 69.85067749023438, _0x47351e * 152.99996948242188, _0x47351e * 70.85067749023438, _0x47351e * 166.99996948242188, _0x47351e * 67.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 156.99996948242188, _0x47351e * 52.850677490234375, _0x47351e * 156.99996948242188, _0x47351e * 52.850677490234375, _0x47351e * 146.99996948242188, _0x47351e * 37.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 101.49996948242188, _0x47351e * 37.350677490234375, _0x47351e * 101.49996948242188, _0x47351e * 37.350677490234375, _0x47351e * 55.999969482421875, _0x47351e * 36.850677490234375);
  _0x52c6d5.closePath();
  fill_path(_0x52c6d5, _0x2aab5c[2], _0x2aab5c[3], _0x47351e * 4);
  _0x52c6d5.globalCompositeOperation = "source-over";
  _0x52c6d5.beginPath();
  _0x52c6d5.lineCap = "round";
  _0x52c6d5.lineJoin = "round";
  _0x52c6d5.moveTo(_0x47351e * 40.999969482421875, _0x47351e * 59.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 41.999969482421875, _0x47351e * 50.850677490234375, _0x47351e * 47.999969482421875, _0x47351e * 47.850677490234375, _0x47351e * 56.999969482421875, _0x47351e * 49.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 65.99996948242188, _0x47351e * 41.850677490234375, _0x47351e * 76.99996948242188, _0x47351e * 42.850677490234375, _0x47351e * 90.99996948242188, _0x47351e * 47.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 94.99996948242188, _0x47351e * 42.850677490234375, _0x47351e * 104.99996948242188, _0x47351e * 42.850677490234375, _0x47351e * 114.99996948242188, _0x47351e * 47.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 131.99996948242188, _0x47351e * 42.850677490234375, _0x47351e * 142.99996948242188, _0x47351e * 48.850677490234375, _0x47351e * 145.99996948242188, _0x47351e * 56.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 160.99996948242188, _0x47351e * 63.850677490234375, _0x47351e * 154.99996948242188, _0x47351e * 69.85067749023438, _0x47351e * 155.99996948242188, _0x47351e * 70.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 141.99996948242188, _0x47351e * 71.85067749023438, _0x47351e * 141.99996948242188, _0x47351e * 71.85067749023438, _0x47351e * 127.99996948242188, _0x47351e * 72.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 110.99996948242188, _0x47351e * 83.85067749023438, _0x47351e * 107.99996948242188, _0x47351e * 82.85067749023438, _0x47351e * 90.99996948242188, _0x47351e * 85.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 70.99996948242188, _0x47351e * 83.85067749023438, _0x47351e * 64.99996948242188, _0x47351e * 79.85067749023438, _0x47351e * 53.999969482421875, _0x47351e * 70.85067749023438);
  _0x52c6d5.closePath();
  fill_path(_0x52c6d5, _0x2aab5c[3], _0x2aab5c[4], _0x47351e * 4);
  _0x52c6d5.beginPath();
  _0x52c6d5.lineCap = "round";
  _0x52c6d5.lineJoin = "round";
  _0x52c6d5.moveTo(_0x47351e * 33.999969482421875, _0x47351e * 65.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 36.999969482421875, _0x47351e * 59.850677490234375, _0x47351e * 34.999969482421875, _0x47351e * 60.850677490234375, _0x47351e * 39.999969482421875, _0x47351e * 59.850677490234375);
  _0x52c6d5.bezierCurveTo(_0x47351e * 47.999969482421875, _0x47351e * 61.850677490234375, _0x47351e * 62.999969482421875, _0x47351e * 76.85067749023438, _0x47351e * 74.99996948242188, _0x47351e * 79.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 93.99996948242188, _0x47351e * 85.85067749023438, _0x47351e * 111.99996948242188, _0x47351e * 83.85067749023438, _0x47351e * 124.99996948242188, _0x47351e * 70.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 129.99996948242188, _0x47351e * 67.85067749023438, _0x47351e * 145.99996948242188, _0x47351e * 65.85067749023438, _0x47351e * 159.99996948242188, _0x47351e * 67.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 159.99996948242188, _0x47351e * 71.85067749023438, _0x47351e * 159.99996948242188, _0x47351e * 71.85067749023438, _0x47351e * 159.99996948242188, _0x47351e * 75.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 146.99996948242188, _0x47351e * 72.85067749023438, _0x47351e * 144.99996948242188, _0x47351e * 75.85067749023438, _0x47351e * 143.99996948242188, _0x47351e * 82.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 144.99996948242188, _0x47351e * 86.85067749023438, _0x47351e * 140.99996948242188, _0x47351e * 90.85067749023438, _0x47351e * 137.99996948242188, _0x47351e * 86.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 139.99996948242188, _0x47351e * 72.85067749023438, _0x47351e * 135.99996948242188, _0x47351e * 72.85067749023438, _0x47351e * 133.99996948242188, _0x47351e * 82.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 127.99996948242188, _0x47351e * 88.85067749023438, _0x47351e * 124.99996948242188, _0x47351e * 70.85067749023438, _0x47351e * 116.99996948242188, _0x47351e * 86.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 110.99996948242188, _0x47351e * 91.85067749023438, _0x47351e * 96.99996948242188, _0x47351e * 81.85067749023438, _0x47351e * 89.99996948242188, _0x47351e * 90.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 85.99996948242188, _0x47351e * 92.85067749023438, _0x47351e * 81.99996948242188, _0x47351e * 95.85067749023438, _0x47351e * 76.99996948242188, _0x47351e * 86.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 67.99996948242188, _0x47351e * 93.85067749023438, _0x47351e * 67.99996948242188, _0x47351e * 91.85067749023438, _0x47351e * 60.999969482421875, _0x47351e * 79.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 53.999969482421875, _0x47351e * 71.85067749023438, _0x47351e * 52.999969482421875, _0x47351e * 72.85067749023438, _0x47351e * 46.999969482421875, _0x47351e * 77.85067749023438);
  _0x52c6d5.bezierCurveTo(_0x47351e * 41.999969482421875, _0x47351e * 78.85067749023438, _0x47351e * 42.999969482421875, _0x47351e * 69.85067749023438, _0x47351e * 33.999969482421875, _0x47351e * 65.85067749023438);
  _0x52c6d5.closePath();
  fill_path(_0x52c6d5, _0x2aab5c[5], _0x2aab5c[6], _0x47351e * 4);
  circle(_0x52c6d5, _0x47351e * 68, _0x47351e * 111.29513549804688, _0x47351e * 15);
  fill_path(_0x52c6d5, _0x2aab5c[7], _0x2aab5c[8], _0x47351e * 4);
  circle(_0x52c6d5, _0x47351e * 123, _0x47351e * 111.29510498046875, _0x47351e * 15);
  fill_path(_0x52c6d5, _0x2aab5c[7], _0x2aab5c[8], _0x47351e * 4);
  circle(_0x52c6d5, _0x47351e * 63, _0x47351e * 106, _0x47351e * 5);
  fill_path(_0x52c6d5, _0x2aab5c[9]);
  circle(_0x52c6d5, _0x47351e * 118, _0x47351e * 106, _0x47351e * 5);
  fill_path(_0x52c6d5, _0x2aab5c[9]);
  return _0x46a947;
}
function create_zombie_boss(_0x4e6b7f, _0x10a7d4, _0x2b60cb) {
  var _0x4aec66 = document.createElement("canvas");
  var _0x4aded6 = _0x4aec66.getContext("2d");
  _0x4aec66.width = _0x4e6b7f * 191;
  _0x4aec66.height = _0x4e6b7f * 153;
  _0x4aded6.globalAlpha = 0.5;
  _0x4aded6.translate(0, _0x4e6b7f * 10);
  _0x4aded6.save();
  _0x4aded6.translate(_0x4e6b7f * 96.49996948242188, _0x4e6b7f * 66.79510498046875);
  _0x4aded6.rotate(0);
  round_rect(_0x4aded6, _0x4e6b7f * -79.5, _0x4e6b7f * -48.5, _0x4e6b7f * 159, _0x4e6b7f * 97, _0x4e6b7f * 22);
  _0x4aded6.restore();
  fill_path(_0x4aded6, _0x2b60cb[0], _0x2b60cb[0], _0x4e6b7f * 4);
  _0x4aded6.globalAlpha = 1;
  _0x4aded6.translate(0, _0x4e6b7f * -10);
  _0x4aded6.save();
  _0x4aded6.translate(_0x4e6b7f * 96.49996948242188, _0x4e6b7f * 66.79510498046875);
  _0x4aded6.rotate(0);
  round_rect(_0x4aded6, _0x4e6b7f * -79.5, _0x4e6b7f * -48.5, _0x4e6b7f * 159, _0x4e6b7f * 97, _0x4e6b7f * 22);
  _0x4aded6.restore();
  fill_path(_0x4aded6, _0x2b60cb[1], _0x2b60cb[2], _0x4e6b7f * 4);
  _0x4aded6.translate(_0x4e6b7f * 2, 0);
  _0x4aded6.beginPath();
  _0x4aded6.lineCap = "round";
  _0x4aded6.lineJoin = "round";
  _0x4aded6.moveTo(_0x4e6b7f * 119, _0x4e6b7f * 28);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 119, _0x4e6b7f * 22, _0x4e6b7f * 119, _0x4e6b7f * 20, _0x4e6b7f * 122, _0x4e6b7f * 16);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 149, _0x4e6b7f * 39, _0x4e6b7f * 149, _0x4e6b7f * 39, _0x4e6b7f * 176, _0x4e6b7f * 63);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 176, _0x4e6b7f * 75, _0x4e6b7f * 176, _0x4e6b7f * 75, _0x4e6b7f * 175, _0x4e6b7f * 88);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 174, _0x4e6b7f * 90, _0x4e6b7f * 174, _0x4e6b7f * 90, _0x4e6b7f * 172, _0x4e6b7f * 93);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 171, _0x4e6b7f * 101, _0x4e6b7f * 169, _0x4e6b7f * 109, _0x4e6b7f * 164, _0x4e6b7f * 113);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 163, _0x4e6b7f * 104, _0x4e6b7f * 163, _0x4e6b7f * 104, _0x4e6b7f * 162, _0x4e6b7f * 95);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 155, _0x4e6b7f * 105, _0x4e6b7f * 155, _0x4e6b7f * 105, _0x4e6b7f * 147, _0x4e6b7f * 116);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 87, _0x4e6b7f * 114, _0x4e6b7f * 87, _0x4e6b7f * 114, _0x4e6b7f * 26, _0x4e6b7f * 112);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 27, _0x4e6b7f * 106, _0x4e6b7f * 27, _0x4e6b7f * 106, _0x4e6b7f * 27, _0x4e6b7f * 101);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 24, _0x4e6b7f * 104, _0x4e6b7f * 24, _0x4e6b7f * 104, _0x4e6b7f * 20, _0x4e6b7f * 108);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 17, _0x4e6b7f * 103, _0x4e6b7f * 20, _0x4e6b7f * 86, _0x4e6b7f * 23, _0x4e6b7f * 72);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 15, _0x4e6b7f * 74, _0x4e6b7f * 14, _0x4e6b7f * 78, _0x4e6b7f * 12, _0x4e6b7f * 83);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 12, _0x4e6b7f * 65, _0x4e6b7f * 12, _0x4e6b7f * 54, _0x4e6b7f * 16, _0x4e6b7f * 42);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 14, _0x4e6b7f * 39, _0x4e6b7f * 14, _0x4e6b7f * 39, _0x4e6b7f * 12, _0x4e6b7f * 36);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 16, _0x4e6b7f * 33, _0x4e6b7f * 16, _0x4e6b7f * 33, _0x4e6b7f * 19, _0x4e6b7f * 30);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 18, _0x4e6b7f * 27, _0x4e6b7f * 18, _0x4e6b7f * 27, _0x4e6b7f * 17, _0x4e6b7f * 25);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 24, _0x4e6b7f * 24, _0x4e6b7f * 31, _0x4e6b7f * 21, _0x4e6b7f * 29, _0x4e6b7f * 19);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 37, _0x4e6b7f * 25, _0x4e6b7f * 37, _0x4e6b7f * 25, _0x4e6b7f * 45, _0x4e6b7f * 31);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 40, _0x4e6b7f * 23, _0x4e6b7f * 40, _0x4e6b7f * 21, _0x4e6b7f * 42, _0x4e6b7f * 16);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 74, _0x4e6b7f * 16, _0x4e6b7f * 74, _0x4e6b7f * 16, _0x4e6b7f * 106, _0x4e6b7f * 16);
  _0x4aded6.bezierCurveTo(_0x4e6b7f * 113, _0x4e6b7f * 21, _0x4e6b7f * 113, _0x4e6b7f * 21, _0x4e6b7f * 119, _0x4e6b7f * 26);
  _0x4aded6.closePath();
  fill_path(_0x4aded6, _0x2b60cb[3], _0x2b60cb[4], _0x4e6b7f * 4);
  return _0x4aec66;
}
function create_zombie_hurt(_0x16d175, _0x3e54d7) {
  var _0x25385f = document.createElement("canvas");
  var _0x38b83e = _0x25385f.getContext("2d");
  _0x25385f.width = _0x16d175 * 191;
  _0x25385f.height = _0x16d175 * 153;
  _0x38b83e.save();
  _0x38b83e.translate(_0x16d175 * 96.49996948242188, _0x16d175 * 66.79510498046875);
  round_rect(_0x38b83e, _0x16d175 * -79.5, _0x16d175 * -48.5, _0x16d175 * 159, _0x16d175 * 97, _0x16d175 * 22);
  _0x38b83e.restore();
  fill_path(_0x38b83e, _0x3e54d7[0], _0x3e54d7[0], _0x16d175 * 4);
  _0x38b83e.translate(_0x16d175 * 2, 0);
  _0x38b83e.beginPath();
  _0x38b83e.lineCap = "round";
  _0x38b83e.lineJoin = "round";
  _0x38b83e.moveTo(_0x16d175 * 119, _0x16d175 * 28);
  _0x38b83e.bezierCurveTo(_0x16d175 * 119, _0x16d175 * 22, _0x16d175 * 119, _0x16d175 * 20, _0x16d175 * 122, _0x16d175 * 16);
  _0x38b83e.bezierCurveTo(_0x16d175 * 149, _0x16d175 * 39, _0x16d175 * 149, _0x16d175 * 39, _0x16d175 * 176, _0x16d175 * 63);
  _0x38b83e.bezierCurveTo(_0x16d175 * 176, _0x16d175 * 75, _0x16d175 * 176, _0x16d175 * 75, _0x16d175 * 175, _0x16d175 * 88);
  _0x38b83e.bezierCurveTo(_0x16d175 * 174, _0x16d175 * 90, _0x16d175 * 174, _0x16d175 * 90, _0x16d175 * 172, _0x16d175 * 93);
  _0x38b83e.bezierCurveTo(_0x16d175 * 171, _0x16d175 * 101, _0x16d175 * 169, _0x16d175 * 109, _0x16d175 * 164, _0x16d175 * 113);
  _0x38b83e.bezierCurveTo(_0x16d175 * 163, _0x16d175 * 104, _0x16d175 * 163, _0x16d175 * 104, _0x16d175 * 162, _0x16d175 * 95);
  _0x38b83e.bezierCurveTo(_0x16d175 * 155, _0x16d175 * 105, _0x16d175 * 155, _0x16d175 * 105, _0x16d175 * 147, _0x16d175 * 116);
  _0x38b83e.bezierCurveTo(_0x16d175 * 87, _0x16d175 * 114, _0x16d175 * 87, _0x16d175 * 114, _0x16d175 * 26, _0x16d175 * 112);
  _0x38b83e.bezierCurveTo(_0x16d175 * 27, _0x16d175 * 106, _0x16d175 * 27, _0x16d175 * 106, _0x16d175 * 27, _0x16d175 * 101);
  _0x38b83e.bezierCurveTo(_0x16d175 * 24, _0x16d175 * 104, _0x16d175 * 24, _0x16d175 * 104, _0x16d175 * 20, _0x16d175 * 108);
  _0x38b83e.bezierCurveTo(_0x16d175 * 17, _0x16d175 * 103, _0x16d175 * 20, _0x16d175 * 86, _0x16d175 * 23, _0x16d175 * 72);
  _0x38b83e.bezierCurveTo(_0x16d175 * 15, _0x16d175 * 74, _0x16d175 * 14, _0x16d175 * 78, _0x16d175 * 12, _0x16d175 * 83);
  _0x38b83e.bezierCurveTo(_0x16d175 * 12, _0x16d175 * 65, _0x16d175 * 12, _0x16d175 * 54, _0x16d175 * 16, _0x16d175 * 42);
  _0x38b83e.bezierCurveTo(_0x16d175 * 14, _0x16d175 * 39, _0x16d175 * 14, _0x16d175 * 39, _0x16d175 * 12, _0x16d175 * 36);
  _0x38b83e.bezierCurveTo(_0x16d175 * 16, _0x16d175 * 33, _0x16d175 * 16, _0x16d175 * 33, _0x16d175 * 19, _0x16d175 * 30);
  _0x38b83e.bezierCurveTo(_0x16d175 * 18, _0x16d175 * 27, _0x16d175 * 18, _0x16d175 * 27, _0x16d175 * 17, _0x16d175 * 25);
  _0x38b83e.bezierCurveTo(_0x16d175 * 24, _0x16d175 * 24, _0x16d175 * 31, _0x16d175 * 21, _0x16d175 * 29, _0x16d175 * 19);
  _0x38b83e.bezierCurveTo(_0x16d175 * 37, _0x16d175 * 25, _0x16d175 * 37, _0x16d175 * 25, _0x16d175 * 45, _0x16d175 * 31);
  _0x38b83e.bezierCurveTo(_0x16d175 * 40, _0x16d175 * 23, _0x16d175 * 40, _0x16d175 * 21, _0x16d175 * 42, _0x16d175 * 16);
  _0x38b83e.bezierCurveTo(_0x16d175 * 74, _0x16d175 * 16, _0x16d175 * 74, _0x16d175 * 16, _0x16d175 * 106, _0x16d175 * 16);
  _0x38b83e.bezierCurveTo(_0x16d175 * 113, _0x16d175 * 21, _0x16d175 * 113, _0x16d175 * 21, _0x16d175 * 119, _0x16d175 * 26);
  _0x38b83e.closePath();
  fill_path(_0x38b83e, _0x3e54d7[0], _0x3e54d7[0], _0x16d175 * 4);
  _0x38b83e.save();
  _0x38b83e.translate(_0x16d175 * 97.49996948242188, _0x16d175 * 95.12844848632812);
  round_rect(_0x38b83e, _0x16d175 * -62.5, _0x16d175 * -41.5, _0x16d175 * 125, _0x16d175 * 83, _0x16d175 * 20);
  _0x38b83e.restore();
  fill_path(_0x38b83e, _0x3e54d7[0], _0x3e54d7[0], _0x16d175 * 4);
  return _0x25385f;
}
function create_plant_seed(_0x1fd839, _0x52618f, _0x14be98) {
  var _0x8be7f6 = document.createElement("canvas");
  var _0x118d0f = _0x8be7f6.getContext("2d");
  var _0x194b7d = _0x1fd839 * 40;
  var _0x43b206 = _0x1fd839 * 40;
  _0x8be7f6.width = _0x194b7d;
  _0x8be7f6.height = _0x43b206;
  var _0x22495b = _0x1fd839 * _0x194b7d / 2;
  var _0x280672 = _0x1fd839 * _0x43b206 / 2;
  var _0x2131be = _0x1fd839 * 15;
  _0x118d0f.save();
  _0x118d0f.translate(_0x22495b, _0x280672);
  _0x118d0f.globalAlpha = 1;
  circle(_0x118d0f, 0, 0, _0x2131be);
  fill_path(_0x118d0f, _0x14be98[0]);
  var _0x2131be = _0x1fd839 * 5;
  var _0x22495b = _0x1fd839 * 2;
  var _0x280672 = _0x1fd839 * 1;
  _0x118d0f.translate(_0x22495b, _0x280672);
  _0x118d0f.globalAlpha = 1;
  circle(_0x118d0f, 0, 0, _0x2131be);
  fill_path(_0x118d0f, _0x14be98[1]);
  _0x118d0f.restore();
  return _0x8be7f6;
}
function create_fish1(_0x2ec7f2, _0x15740c, _0x1d588b, _0xd9f794) {
  var _0x436b02 = document.createElement("canvas");
  var _0x5f38c1 = _0x436b02.getContext("2d");
  _0x436b02.width = _0x2ec7f2 * 185;
  _0x436b02.height = _0x2ec7f2 * 240;
  _0x5f38c1.globalAlpha = 0.5;
  _0x5f38c1.translate(0, _0x2ec7f2 * 10);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 44, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 60, _0x2ec7f2 * 87, _0x2ec7f2 * 68, _0x2ec7f2 * 66, _0x2ec7f2 * 92, _0x2ec7f2 * 67);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 115, _0x2ec7f2 * 64, _0x2ec7f2 * 129, _0x2ec7f2 * 97, _0x2ec7f2 * 137, _0x2ec7f2 * 136);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[0]);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 53, _0x2ec7f2 * 181);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 30, _0x2ec7f2 * 164, _0x2ec7f2 * 19, _0x2ec7f2 * 150, _0x2ec7f2 * 11, _0x2ec7f2 * 136);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 28, _0x2ec7f2 * 121, _0x2ec7f2 * 38, _0x2ec7f2 * 132, _0x2ec7f2 * 48, _0x2ec7f2 * 150);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[0]);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 63, _0x2ec7f2 * 208);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 75, _0x2ec7f2 * 224, _0x2ec7f2 * 86, _0x2ec7f2 * 228, _0x2ec7f2 * 93, _0x2ec7f2 * 228);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 104, _0x2ec7f2 * 229, _0x2ec7f2 * 116, _0x2ec7f2 * 219, _0x2ec7f2 * 122, _0x2ec7f2 * 205);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[0]);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 130, _0x2ec7f2 * 170);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 146, _0x2ec7f2 * 125, _0x2ec7f2 * 156, _0x2ec7f2 * 126, _0x2ec7f2 * 173, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 167, _0x2ec7f2 * 151, _0x2ec7f2 * 143, _0x2ec7f2 * 174, _0x2ec7f2 * 131, _0x2ec7f2 * 183);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[0]);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 39, _0x2ec7f2 * 140);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 75, _0x2ec7f2 * 126, _0x2ec7f2 * 113, _0x2ec7f2 * 127, _0x2ec7f2 * 143, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 141, _0x2ec7f2 * 186, _0x2ec7f2 * 130, _0x2ec7f2 * 202, _0x2ec7f2 * 113, _0x2ec7f2 * 214);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 85, _0x2ec7f2 * 228, _0x2ec7f2 * 56, _0x2ec7f2 * 219, _0x2ec7f2 * 48, _0x2ec7f2 * 173);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 40, _0x2ec7f2 * 148, _0x2ec7f2 * 43, _0x2ec7f2 * 145, _0x2ec7f2 * 39, _0x2ec7f2 * 140);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[0]);
  _0x5f38c1.globalAlpha = 1;
  _0x5f38c1.translate(0, _0x2ec7f2 * -10);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 44, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 60, _0x2ec7f2 * 87, _0x2ec7f2 * 68, _0x2ec7f2 * 66, _0x2ec7f2 * 92, _0x2ec7f2 * 67);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 115, _0x2ec7f2 * 64, _0x2ec7f2 * 129, _0x2ec7f2 * 97, _0x2ec7f2 * 137, _0x2ec7f2 * 136);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 53, _0x2ec7f2 * 181);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 30, _0x2ec7f2 * 164, _0x2ec7f2 * 19, _0x2ec7f2 * 150, _0x2ec7f2 * 11, _0x2ec7f2 * 136);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 28, _0x2ec7f2 * 121, _0x2ec7f2 * 38, _0x2ec7f2 * 132, _0x2ec7f2 * 48, _0x2ec7f2 * 150);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 63, _0x2ec7f2 * 208);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 75, _0x2ec7f2 * 224, _0x2ec7f2 * 86, _0x2ec7f2 * 228, _0x2ec7f2 * 93, _0x2ec7f2 * 228);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 104, _0x2ec7f2 * 229, _0x2ec7f2 * 116, _0x2ec7f2 * 219, _0x2ec7f2 * 122, _0x2ec7f2 * 205);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 130, _0x2ec7f2 * 170);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 146, _0x2ec7f2 * 125, _0x2ec7f2 * 156, _0x2ec7f2 * 126, _0x2ec7f2 * 173, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 167, _0x2ec7f2 * 151, _0x2ec7f2 * 143, _0x2ec7f2 * 174, _0x2ec7f2 * 131, _0x2ec7f2 * 183);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 39, _0x2ec7f2 * 140);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 75, _0x2ec7f2 * 126, _0x2ec7f2 * 113, _0x2ec7f2 * 127, _0x2ec7f2 * 143, _0x2ec7f2 * 137);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 141, _0x2ec7f2 * 186, _0x2ec7f2 * 130, _0x2ec7f2 * 202, _0x2ec7f2 * 113, _0x2ec7f2 * 214);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 85, _0x2ec7f2 * 228, _0x2ec7f2 * 56, _0x2ec7f2 * 219, _0x2ec7f2 * 48, _0x2ec7f2 * 173);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 40, _0x2ec7f2 * 148, _0x2ec7f2 * 43, _0x2ec7f2 * 145, _0x2ec7f2 * 39, _0x2ec7f2 * 140);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 59, _0x2ec7f2 * 99);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 71, _0x2ec7f2 * 68, _0x2ec7f2 * 81, _0x2ec7f2 * 68, _0x2ec7f2 * 94, _0x2ec7f2 * 67);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 105, _0x2ec7f2 * 66, _0x2ec7f2 * 119, _0x2ec7f2 * 75, _0x2ec7f2 * 123, _0x2ec7f2 * 96);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 104, _0x2ec7f2 * 91, _0x2ec7f2 * 101, _0x2ec7f2 * 94, _0x2ec7f2 * 94, _0x2ec7f2 * 97);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 76, _0x2ec7f2 * 92, _0x2ec7f2 * 73, _0x2ec7f2 * 93, _0x2ec7f2 * 60, _0x2ec7f2 * 99);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[3], _0x1d588b[2], _0x2ec7f2 * 4);
  if (_0xd9f794 === 0) {
    _0x5f38c1.beginPath();
    _0x5f38c1.lineCap = "round";
    _0x5f38c1.lineJoin = "round";
    _0x5f38c1.moveTo(_0x2ec7f2 * 47, _0x2ec7f2 * 149);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 43, _0x2ec7f2 * 140, _0x2ec7f2 * 48, _0x2ec7f2 * 130, _0x2ec7f2 * 59, _0x2ec7f2 * 127);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 77, _0x2ec7f2 * 126, _0x2ec7f2 * 90, _0x2ec7f2 * 131, _0x2ec7f2 * 131, _0x2ec7f2 * 127);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 143, _0x2ec7f2 * 130, _0x2ec7f2 * 144, _0x2ec7f2 * 143, _0x2ec7f2 * 132, _0x2ec7f2 * 154);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 90, _0x2ec7f2 * 152, _0x2ec7f2 * 90, _0x2ec7f2 * 152, _0x2ec7f2 * 48, _0x2ec7f2 * 150);
    _0x5f38c1.closePath();
    fill_path(_0x5f38c1, _0x1d588b[1]);
    _0x5f38c1.beginPath();
    _0x5f38c1.lineCap = "round";
    _0x5f38c1.lineJoin = "round";
    _0x5f38c1.moveTo(_0x2ec7f2 * 40, _0x2ec7f2 * 139);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 48, _0x2ec7f2 * 113, _0x2ec7f2 * 76, _0x2ec7f2 * 119, _0x2ec7f2 * 91, _0x2ec7f2 * 126);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 117, _0x2ec7f2 * 113, _0x2ec7f2 * 135, _0x2ec7f2 * 117, _0x2ec7f2 * 144, _0x2ec7f2 * 134);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 144, _0x2ec7f2 * 138, _0x2ec7f2 * 144, _0x2ec7f2 * 138, _0x2ec7f2 * 144, _0x2ec7f2 * 142);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 128, _0x2ec7f2 * 124, _0x2ec7f2 * 108, _0x2ec7f2 * 124, _0x2ec7f2 * 91, _0x2ec7f2 * 136);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 59, _0x2ec7f2 * 124, _0x2ec7f2 * 50, _0x2ec7f2 * 137, _0x2ec7f2 * 42, _0x2ec7f2 * 148);
    _0x5f38c1.closePath();
    fill_path(_0x5f38c1, _0x1d588b[3], _0x1d588b[2], _0x2ec7f2 * 4);
  } else {
    _0x5f38c1.beginPath();
    _0x5f38c1.lineCap = "round";
    _0x5f38c1.lineJoin = "round";
    _0x5f38c1.moveTo(_0x2ec7f2 * 41, _0x2ec7f2 * 139);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 53, _0x2ec7f2 * 117, _0x2ec7f2 * 69, _0x2ec7f2 * 118, _0x2ec7f2 * 92, _0x2ec7f2 * 127);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 124, _0x2ec7f2 * 111, _0x2ec7f2 * 136, _0x2ec7f2 * 121, _0x2ec7f2 * 143, _0x2ec7f2 * 136);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 142, _0x2ec7f2 * 144, _0x2ec7f2 * 142, _0x2ec7f2 * 144, _0x2ec7f2 * 141, _0x2ec7f2 * 152);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 128, _0x2ec7f2 * 131, _0x2ec7f2 * 113, _0x2ec7f2 * 138, _0x2ec7f2 * 92, _0x2ec7f2 * 145);
    _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 57, _0x2ec7f2 * 133, _0x2ec7f2 * 57, _0x2ec7f2 * 147, _0x2ec7f2 * 44, _0x2ec7f2 * 154);
    _0x5f38c1.closePath();
    fill_path(_0x5f38c1, _0x1d588b[3], _0x1d588b[2], _0x2ec7f2 * 4);
  }
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 90, _0x2ec7f2 * 95);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 99, _0x2ec7f2 * 82, _0x2ec7f2 * 98, _0x2ec7f2 * 58, _0x2ec7f2 * 99, _0x2ec7f2 * 40);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 90, _0x2ec7f2 * 38, _0x2ec7f2 * 89, _0x2ec7f2 * 34, _0x2ec7f2 * 92, _0x2ec7f2 * 17);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 92, _0x2ec7f2 * 5, _0x2ec7f2 * 83, _0x2ec7f2 * 16, _0x2ec7f2 * 78, _0x2ec7f2 * 29);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 72, _0x2ec7f2 * 59, _0x2ec7f2 * 87, _0x2ec7f2 * 81, _0x2ec7f2 * 89, _0x2ec7f2 * 87);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[2], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 90, _0x2ec7f2 * 86);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 95, _0x2ec7f2 * 74, _0x2ec7f2 * 95, _0x2ec7f2 * 62, _0x2ec7f2 * 95, _0x2ec7f2 * 43);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 84, _0x2ec7f2 * 37, _0x2ec7f2 * 86, _0x2ec7f2 * 34, _0x2ec7f2 * 89, _0x2ec7f2 * 16);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 75, _0x2ec7f2 * 29, _0x2ec7f2 * 80, _0x2ec7f2 * 58, _0x2ec7f2 * 90, _0x2ec7f2 * 85);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[3], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 92, _0x2ec7f2 * 117);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 98, _0x2ec7f2 * 87, _0x2ec7f2 * 93, _0x2ec7f2 * 78, _0x2ec7f2 * 85, _0x2ec7f2 * 76);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 85.5, _0x2ec7f2 * 79.5, _0x2ec7f2 * 85.5, _0x2ec7f2 * 79.5, _0x2ec7f2 * 86, _0x2ec7f2 * 83);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 84, _0x2ec7f2 * 85.5, _0x2ec7f2 * 84, _0x2ec7f2 * 85.5, _0x2ec7f2 * 82, _0x2ec7f2 * 88);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 90, _0x2ec7f2 * 93, _0x2ec7f2 * 89, _0x2ec7f2 * 100, _0x2ec7f2 * 92, _0x2ec7f2 * 117);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[3], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 92, _0x2ec7f2 * 175);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 95, _0x2ec7f2 * 135, _0x2ec7f2 * 98, _0x2ec7f2 * 125, _0x2ec7f2 * 109, _0x2ec7f2 * 121);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 106, _0x2ec7f2 * 114, _0x2ec7f2 * 104, _0x2ec7f2 * 114, _0x2ec7f2 * 102, _0x2ec7f2 * 113);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 103, _0x2ec7f2 * 106, _0x2ec7f2 * 104, _0x2ec7f2 * 103, _0x2ec7f2 * 107, _0x2ec7f2 * 96);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 74, _0x2ec7f2 * 108, _0x2ec7f2 * 86, _0x2ec7f2 * 157, _0x2ec7f2 * 92, _0x2ec7f2 * 174);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, _0x1d588b[1], _0x1d588b[3], _0x2ec7f2 * 4);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 48, _0x2ec7f2 * 169);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 42, _0x2ec7f2 * 187, _0x2ec7f2 * 50, _0x2ec7f2 * 193, _0x2ec7f2 * 59, _0x2ec7f2 * 198);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, undefined, _0x1d588b[2], _0x2ec7f2 * 5);
  _0x5f38c1.beginPath();
  _0x5f38c1.lineCap = "round";
  _0x5f38c1.lineJoin = "round";
  _0x5f38c1.moveTo(_0x2ec7f2 * 136, _0x2ec7f2 * 171);
  _0x5f38c1.bezierCurveTo(_0x2ec7f2 * 139, _0x2ec7f2 * 186, _0x2ec7f2 * 138, _0x2ec7f2 * 191, _0x2ec7f2 * 124, _0x2ec7f2 * 199);
  _0x5f38c1.closePath();
  fill_path(_0x5f38c1, undefined, _0x1d588b[2], _0x2ec7f2 * 4);
  circle(_0x5f38c1, _0x2ec7f2 * 63, _0x2ec7f2 * 180, _0x2ec7f2 * 15.231546211727817);
  fill_path(_0x5f38c1, _0x1d588b[4]);
  circle(_0x5f38c1, _0x2ec7f2 * 121, _0x2ec7f2 * 181, _0x2ec7f2 * 15.652475842498529);
  fill_path(_0x5f38c1, _0x1d588b[4]);
  circle(_0x5f38c1, _0x2ec7f2 * 58, _0x2ec7f2 * 175, _0x2ec7f2 * 5.656854249492381);
  fill_path(_0x5f38c1, _0x1d588b[2]);
  circle(_0x5f38c1, _0x2ec7f2 * 116, _0x2ec7f2 * 175, _0x2ec7f2 * 5.656854249492381);
  fill_path(_0x5f38c1, _0x1d588b[2]);
  return _0x436b02;
}
function create_hurt_fish1(_0x3126cd, _0x1fdf9a) {
  var _0x358f66 = document.createElement("canvas");
  var _0x56863a = _0x358f66.getContext("2d");
  _0x358f66.width = _0x3126cd * 185;
  _0x358f66.height = _0x3126cd * 240;
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 44, _0x3126cd * 137);
  _0x56863a.bezierCurveTo(_0x3126cd * 60, _0x3126cd * 87, _0x3126cd * 68, _0x3126cd * 66, _0x3126cd * 92, _0x3126cd * 67);
  _0x56863a.bezierCurveTo(_0x3126cd * 115, _0x3126cd * 64, _0x3126cd * 129, _0x3126cd * 97, _0x3126cd * 137, _0x3126cd * 136);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 53, _0x3126cd * 181);
  _0x56863a.bezierCurveTo(_0x3126cd * 30, _0x3126cd * 164, _0x3126cd * 19, _0x3126cd * 150, _0x3126cd * 11, _0x3126cd * 136);
  _0x56863a.bezierCurveTo(_0x3126cd * 28, _0x3126cd * 121, _0x3126cd * 38, _0x3126cd * 132, _0x3126cd * 48, _0x3126cd * 150);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 63, _0x3126cd * 208);
  _0x56863a.bezierCurveTo(_0x3126cd * 75, _0x3126cd * 224, _0x3126cd * 86, _0x3126cd * 228, _0x3126cd * 93, _0x3126cd * 228);
  _0x56863a.bezierCurveTo(_0x3126cd * 104, _0x3126cd * 229, _0x3126cd * 116, _0x3126cd * 219, _0x3126cd * 122, _0x3126cd * 205);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 130, _0x3126cd * 170);
  _0x56863a.bezierCurveTo(_0x3126cd * 146, _0x3126cd * 125, _0x3126cd * 156, _0x3126cd * 126, _0x3126cd * 173, _0x3126cd * 137);
  _0x56863a.bezierCurveTo(_0x3126cd * 167, _0x3126cd * 151, _0x3126cd * 143, _0x3126cd * 174, _0x3126cd * 131, _0x3126cd * 183);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 39, _0x3126cd * 140);
  _0x56863a.bezierCurveTo(_0x3126cd * 75, _0x3126cd * 126, _0x3126cd * 113, _0x3126cd * 127, _0x3126cd * 143, _0x3126cd * 137);
  _0x56863a.bezierCurveTo(_0x3126cd * 141, _0x3126cd * 186, _0x3126cd * 130, _0x3126cd * 202, _0x3126cd * 113, _0x3126cd * 214);
  _0x56863a.bezierCurveTo(_0x3126cd * 85, _0x3126cd * 228, _0x3126cd * 56, _0x3126cd * 219, _0x3126cd * 48, _0x3126cd * 173);
  _0x56863a.bezierCurveTo(_0x3126cd * 40, _0x3126cd * 148, _0x3126cd * 43, _0x3126cd * 145, _0x3126cd * 39, _0x3126cd * 140);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 90, _0x3126cd * 95);
  _0x56863a.bezierCurveTo(_0x3126cd * 99, _0x3126cd * 82, _0x3126cd * 98, _0x3126cd * 58, _0x3126cd * 99, _0x3126cd * 40);
  _0x56863a.bezierCurveTo(_0x3126cd * 90, _0x3126cd * 38, _0x3126cd * 89, _0x3126cd * 34, _0x3126cd * 92, _0x3126cd * 17);
  _0x56863a.bezierCurveTo(_0x3126cd * 92, _0x3126cd * 5, _0x3126cd * 83, _0x3126cd * 16, _0x3126cd * 78, _0x3126cd * 29);
  _0x56863a.bezierCurveTo(_0x3126cd * 72, _0x3126cd * 59, _0x3126cd * 87, _0x3126cd * 81, _0x3126cd * 89, _0x3126cd * 87);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 90, _0x3126cd * 86);
  _0x56863a.bezierCurveTo(_0x3126cd * 95, _0x3126cd * 74, _0x3126cd * 95, _0x3126cd * 62, _0x3126cd * 95, _0x3126cd * 43);
  _0x56863a.bezierCurveTo(_0x3126cd * 84, _0x3126cd * 37, _0x3126cd * 86, _0x3126cd * 34, _0x3126cd * 89, _0x3126cd * 16);
  _0x56863a.bezierCurveTo(_0x3126cd * 75, _0x3126cd * 29, _0x3126cd * 80, _0x3126cd * 58, _0x3126cd * 90, _0x3126cd * 85);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 92, _0x3126cd * 117);
  _0x56863a.bezierCurveTo(_0x3126cd * 98, _0x3126cd * 87, _0x3126cd * 93, _0x3126cd * 78, _0x3126cd * 85, _0x3126cd * 76);
  _0x56863a.bezierCurveTo(_0x3126cd * 85.5, _0x3126cd * 79.5, _0x3126cd * 85.5, _0x3126cd * 79.5, _0x3126cd * 86, _0x3126cd * 83);
  _0x56863a.bezierCurveTo(_0x3126cd * 84, _0x3126cd * 85.5, _0x3126cd * 84, _0x3126cd * 85.5, _0x3126cd * 82, _0x3126cd * 88);
  _0x56863a.bezierCurveTo(_0x3126cd * 90, _0x3126cd * 93, _0x3126cd * 89, _0x3126cd * 100, _0x3126cd * 92, _0x3126cd * 117);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  _0x56863a.beginPath();
  _0x56863a.lineCap = "round";
  _0x56863a.lineJoin = "round";
  _0x56863a.moveTo(_0x3126cd * 92, _0x3126cd * 175);
  _0x56863a.bezierCurveTo(_0x3126cd * 95, _0x3126cd * 135, _0x3126cd * 98, _0x3126cd * 125, _0x3126cd * 109, _0x3126cd * 121);
  _0x56863a.bezierCurveTo(_0x3126cd * 106, _0x3126cd * 114, _0x3126cd * 104, _0x3126cd * 114, _0x3126cd * 102, _0x3126cd * 113);
  _0x56863a.bezierCurveTo(_0x3126cd * 103, _0x3126cd * 106, _0x3126cd * 104, _0x3126cd * 103, _0x3126cd * 107, _0x3126cd * 96);
  _0x56863a.bezierCurveTo(_0x3126cd * 74, _0x3126cd * 108, _0x3126cd * 86, _0x3126cd * 157, _0x3126cd * 92, _0x3126cd * 174);
  _0x56863a.closePath();
  fill_path(_0x56863a, _0x1fdf9a[0]);
  return _0x358f66;
}
function create_fish2(_0x40c977, _0x948969, _0x13affe, _0x2fa945) {
  var _0x2ed093 = document.createElement("canvas");
  var _0x3cfa79 = _0x2ed093.getContext("2d");
  _0x2ed093.width = _0x40c977 * 185;
  _0x2ed093.height = _0x40c977 * 240;
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 58, _0x40c977 * 205);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 74, _0x40c977 * 227, _0x40c977 * 83, _0x40c977 * 230, _0x40c977 * 92, _0x40c977 * 230);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 101, _0x40c977 * 232, _0x40c977 * 119, _0x40c977 * 219, _0x40c977 * 122, _0x40c977 * 205);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[1], _0x13affe[2], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 46, _0x40c977 * 151);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 34, _0x40c977 * 126, _0x40c977 * 21, _0x40c977 * 130, _0x40c977 * 10, _0x40c977 * 139);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 27, _0x40c977 * 168, _0x40c977 * 48, _0x40c977 * 180, _0x40c977 * 53, _0x40c977 * 184);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[3], _0x13affe[2], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 122, _0x40c977 * 165);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 143, _0x40c977 * 140, _0x40c977 * 154, _0x40c977 * 123, _0x40c977 * 172, _0x40c977 * 139);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 169, _0x40c977 * 149, _0x40c977 * 147, _0x40c977 * 173, _0x40c977 * 126, _0x40c977 * 192);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[3], _0x13affe[2], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 47, _0x40c977 * 129);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 55, _0x40c977 * 90, _0x40c977 * 71, _0x40c977 * 66, _0x40c977 * 93, _0x40c977 * 69);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 116, _0x40c977 * 70, _0x40c977 * 122, _0x40c977 * 88, _0x40c977 * 136, _0x40c977 * 127);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 143, _0x40c977 * 137, _0x40c977 * 144, _0x40c977 * 137, _0x40c977 * 144, _0x40c977 * 142);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 138, _0x40c977 * 199, _0x40c977 * 128, _0x40c977 * 206, _0x40c977 * 108, _0x40c977 * 219);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 84, _0x40c977 * 228, _0x40c977 * 65, _0x40c977 * 224, _0x40c977 * 50, _0x40c977 * 191);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 41, _0x40c977 * 161, _0x40c977 * 41, _0x40c977 * 157, _0x40c977 * 39, _0x40c977 * 144);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 40, _0x40c977 * 140, _0x40c977 * 42, _0x40c977 * 137, _0x40c977 * 47, _0x40c977 * 129);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[1], _0x13affe[2], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 47, _0x40c977 * 133);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 65, _0x40c977 * 143, _0x40c977 * 74, _0x40c977 * 162, _0x40c977 * 70, _0x40c977 * 186);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 71, _0x40c977 * 188.5, _0x40c977 * 71, _0x40c977 * 188.5, _0x40c977 * 72, _0x40c977 * 191);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 81, _0x40c977 * 185.5, _0x40c977 * 81, _0x40c977 * 185.5, _0x40c977 * 90, _0x40c977 * 180);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 99, _0x40c977 * 185, _0x40c977 * 99, _0x40c977 * 185, _0x40c977 * 108, _0x40c977 * 190);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 110.5, _0x40c977 * 184.5, _0x40c977 * 110.5, _0x40c977 * 184.5, _0x40c977 * 113, _0x40c977 * 179);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 110, _0x40c977 * 156, _0x40c977 * 121, _0x40c977 * 156, _0x40c977 * 142, _0x40c977 * 141);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 137.5, _0x40c977 * 133, _0x40c977 * 137.5, _0x40c977 * 133, _0x40c977 * 133, _0x40c977 * 125);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 116, _0x40c977 * 78, _0x40c977 * 112, _0x40c977 * 70, _0x40c977 * 91, _0x40c977 * 71);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 62, _0x40c977 * 69, _0x40c977 * 59, _0x40c977 * 107, _0x40c977 * 48, _0x40c977 * 132);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[4]);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 93, _0x40c977 * 86);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 101, _0x40c977 * 79, _0x40c977 * 99, _0x40c977 * 56, _0x40c977 * 100, _0x40c977 * 37);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 90, _0x40c977 * 34, _0x40c977 * 90, _0x40c977 * 27, _0x40c977 * 93, _0x40c977 * 13);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 96, _0x40c977 * 0, _0x40c977 * 85, _0x40c977 * 13, _0x40c977 * 82, _0x40c977 * 26);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 78, _0x40c977 * 43, _0x40c977 * 89, _0x40c977 * 74, _0x40c977 * 93, _0x40c977 * 85);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[3], _0x13affe[2], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 94, _0x40c977 * 86);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 120, _0x40c977 * 88, _0x40c977 * 132, _0x40c977 * 109, _0x40c977 * 122, _0x40c977 * 128);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 118, _0x40c977 * 139, _0x40c977 * 101, _0x40c977 * 146, _0x40c977 * 90, _0x40c977 * 143);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 57, _0x40c977 * 141, _0x40c977 * 49, _0x40c977 * 109, _0x40c977 * 68, _0x40c977 * 94);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 78, _0x40c977 * 85, _0x40c977 * 90, _0x40c977 * 86, _0x40c977 * 95, _0x40c977 * 86);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[1]);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 91, _0x40c977 * 178);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 78, _0x40c977 * 136, _0x40c977 * 81, _0x40c977 * 88, _0x40c977 * 93, _0x40c977 * 87);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 101, _0x40c977 * 84, _0x40c977 * 94, _0x40c977 * 97, _0x40c977 * 94, _0x40c977 * 107);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 91, _0x40c977 * 112, _0x40c977 * 92, _0x40c977 * 117, _0x40c977 * 94, _0x40c977 * 121);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 98, _0x40c977 * 126, _0x40c977 * 102, _0x40c977 * 128, _0x40c977 * 97, _0x40c977 * 135);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 92, _0x40c977 * 140, _0x40c977 * 93, _0x40c977 * 160, _0x40c977 * 91, _0x40c977 * 179);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[5], _0x13affe[1], _0x40c977 * 4);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 20, _0x40c977 * 151);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 22, _0x40c977 * 147, _0x40c977 * 22, _0x40c977 * 147, _0x40c977 * 24, _0x40c977 * 143);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 27, _0x40c977 * 144.5, _0x40c977 * 27, _0x40c977 * 144.5, _0x40c977 * 30, _0x40c977 * 146);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 31, _0x40c977 * 143, _0x40c977 * 31, _0x40c977 * 143, _0x40c977 * 32, _0x40c977 * 140);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 35, _0x40c977 * 140.5, _0x40c977 * 35, _0x40c977 * 140.5, _0x40c977 * 38, _0x40c977 * 141);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 31, _0x40c977 * 132, _0x40c977 * 29, _0x40c977 * 131, _0x40c977 * 22, _0x40c977 * 132);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 14, _0x40c977 * 135, _0x40c977 * 13, _0x40c977 * 135, _0x40c977 * 11, _0x40c977 * 138);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 15.5, _0x40c977 * 144.5, _0x40c977 * 15.5, _0x40c977 * 144.5, _0x40c977 * 20, _0x40c977 * 151);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[6]);
  circle(_0x3cfa79, _0x40c977 * 61, _0x40c977 * 183, _0x40c977 * 16.15549442140351);
  fill_path(_0x3cfa79, _0x13affe[7]);
  circle(_0x3cfa79, _0x40c977 * 121, _0x40c977 * 184, _0x40c977 * 14.866068747318506);
  fill_path(_0x3cfa79, _0x13affe[7]);
  circle(_0x3cfa79, _0x40c977 * 57, _0x40c977 * 178, _0x40c977 * 5.656854249492381);
  fill_path(_0x3cfa79, _0x13affe[2]);
  circle(_0x3cfa79, _0x40c977 * 116, _0x40c977 * 177, _0x40c977 * 5.830951894845301);
  fill_path(_0x3cfa79, _0x13affe[2]);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 162, _0x40c977 * 152);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 161.5, _0x40c977 * 148, _0x40c977 * 161.5, _0x40c977 * 148, _0x40c977 * 161, _0x40c977 * 144);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 157.5, _0x40c977 * 145, _0x40c977 * 157.5, _0x40c977 * 145, _0x40c977 * 154, _0x40c977 * 146);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 153.5, _0x40c977 * 143, _0x40c977 * 153.5, _0x40c977 * 143, _0x40c977 * 153, _0x40c977 * 140);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 149, _0x40c977 * 140.5, _0x40c977 * 149, _0x40c977 * 140.5, _0x40c977 * 145, _0x40c977 * 141);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 150, _0x40c977 * 132, _0x40c977 * 161, _0x40c977 * 131, _0x40c977 * 170, _0x40c977 * 138);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 173, _0x40c977 * 141, _0x40c977 * 165, _0x40c977 * 150, _0x40c977 * 162, _0x40c977 * 150);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[6]);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 106, _0x40c977 * 110);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 104, _0x40c977 * 98, _0x40c977 * 112, _0x40c977 * 91, _0x40c977 * 118, _0x40c977 * 101);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 122, _0x40c977 * 115, _0x40c977 * 121, _0x40c977 * 119, _0x40c977 * 117, _0x40c977 * 124);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 112, _0x40c977 * 129, _0x40c977 * 107, _0x40c977 * 124, _0x40c977 * 106, _0x40c977 * 112);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[1]);
  _0x3cfa79.beginPath();
  _0x3cfa79.lineCap = "round";
  _0x3cfa79.lineJoin = "round";
  _0x3cfa79.moveTo(_0x40c977 * 64, _0x40c977 * 106);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 66, _0x40c977 * 97, _0x40c977 * 72, _0x40c977 * 89, _0x40c977 * 76, _0x40c977 * 98);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 78, _0x40c977 * 106, _0x40c977 * 79, _0x40c977 * 118, _0x40c977 * 72, _0x40c977 * 126);
  _0x3cfa79.bezierCurveTo(_0x40c977 * 65, _0x40c977 * 130, _0x40c977 * 63, _0x40c977 * 117, _0x40c977 * 64, _0x40c977 * 108);
  _0x3cfa79.closePath();
  fill_path(_0x3cfa79, _0x13affe[1]);
  return _0x2ed093;
}
function create_food_plant(_0x27ce25) {
  var _0x18ebc9 = document.createElement("canvas");
  var _0x56cbf6 = _0x18ebc9.getContext("2d");
  var _0x55c621 = _0x27ce25 * 200;
  var _0x28e9ab = _0x27ce25 * 200;
  _0x18ebc9.width = _0x55c621;
  _0x18ebc9.height = _0x28e9ab;
  var _0x28d153 = create_plant(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
  _0x56cbf6.drawImage(_0x28d153, 10, 10);
  var _0x28d153 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x56cbf6.drawImage(_0x28d153, 21, 20);
  var _0x28d153 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x56cbf6.drawImage(_0x28d153, 38, 28);
  var _0x28d153 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x56cbf6.drawImage(_0x28d153, 15, 37);
  var _0x28d153 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x56cbf6.drawImage(_0x28d153, 32, 45);
  return _0x18ebc9;
}
function create_gear(_0x13532d, _0xe67b2c) {
  var _0x435b38 = document.createElement("canvas");
  var _0x1a465 = _0x435b38.getContext("2d");
  var _0xe7e5ac = _0x13532d * 100;
  var _0x1894da = _0x13532d * 100;
  var _0x10fd81 = _0xe7e5ac / 2;
  var _0x414c1e = _0x1894da / 2;
  _0x435b38.width = _0xe7e5ac;
  _0x435b38.height = _0x1894da;
  var _0x4770d5 = _0x13532d * 5;
  var _0x18d16a = _0x13532d * 28;
  var _0x21423b = _0x4770d5 / 2;
  var _0x404897 = _0x18d16a / 2;
  _0x1a465.translate(_0x10fd81, _0x414c1e);
  for (var _0x5b913c = 0; _0x5b913c < 4; _0x5b913c++) {
    round_rect(_0x1a465, -_0x21423b, -_0x404897, _0x4770d5, _0x18d16a, _0x13532d * 2);
    _0x1a465.rotate(Math.PI / 4);
    fill_path(_0x1a465, _0xe67b2c);
  }
  _0x1a465.arc(0, 0, _0x13532d * 10, 0, Math.PI * 2);
  fill_path(_0x1a465, _0xe67b2c);
  _0x1a465.globalCompositeOperation = "destination-out";
  circle(_0x1a465, 0, 0, _0x13532d * 4);
  _0x1a465.fill();
  return _0x435b38;
}
function create_gear_option(_0x394312, _0x4f6285, _0x469803) {
  var _0x36742d = document.createElement("canvas");
  var _0x290231 = _0x36742d.getContext("2d");
  var _0x530625 = _0x394312 * 32;
  var _0x3db39d = _0x394312 * 32;
  var _0xb38d45 = _0x530625 / 2;
  var _0x38132a = _0x3db39d / 2;
  _0x36742d.width = _0x530625;
  _0x36742d.height = _0x3db39d;
  var _0x170e42 = _0x394312 * 5;
  var _0x1999bc = _0x394312 * 28;
  var _0x3f56ce = _0x170e42 / 2;
  var _0x155f29 = _0x1999bc / 2;
  _0x290231.translate(_0x394312 * 0, _0x394312 * 0);
  _0x290231.translate(_0xb38d45, _0x38132a);
  if (_0x469803 == 1) {
    circle(_0x290231, 0, 0, _0x394312 * 10, 0);
    fill_path(_0x290231, _0x4f6285[2], _0x4f6285[2], _0x394312 * 3);
    for (var _0x369369 = 0; _0x369369 < 4; _0x369369++) {
      round_rect(_0x290231, -_0x3f56ce, -_0x155f29, _0x170e42, _0x1999bc, _0x394312 * 2);
      _0x290231.rotate(Math.PI / 4);
      fill_path(_0x290231, _0x4f6285[2], _0x4f6285[2], _0x394312 * 4);
    }
  }
  circle(_0x290231, 0, 0, _0x394312 * 10, 0);
  fill_path(_0x290231, _0x4f6285[0], _0x4f6285[1], _0x394312 * 1.5);
  for (var _0x369369 = 0; _0x369369 < 4; _0x369369++) {
    round_rect(_0x290231, -_0x3f56ce, -_0x155f29, _0x170e42, _0x1999bc, _0x394312 * 2);
    _0x290231.rotate(Math.PI / 4);
    fill_path(_0x290231, _0x4f6285[0], _0x4f6285[1], _0x394312 * 1.5);
  }
  circle(_0x290231, 0, 0, _0x394312 * 10, 0);
  fill_path(_0x290231, _0x4f6285[0]);
  circle(_0x290231, 0, 0, _0x394312 * 4, 0);
  fill_path(_0x290231, _0x4f6285[2], _0x4f6285[1], _0x394312 * 1.5);
  _0x290231.globalCompositeOperation = "destination-out";
  circle(_0x290231, 0, 0, _0x394312 * 4, 0);
  fill_path(_0x290231, _0x4f6285[0], _0x4f6285[1], _0x394312 * 2);
  _0x290231.globalCompositeOperation = "source-over";
  circle(_0x290231, 0, 0, _0x394312 * 4, 0);
  fill_path(_0x290231, undefined, _0x4f6285[1], _0x394312 * 2);
  return _0x36742d;
}
function create_minimap_object(_0x5c2514, _0x2dd8cf, _0x36cf5e, _0x379788, _0xd787b9, _0x4a2444, _0x846b2e) {
  if (_0x846b2e === undefined) {
    _0x846b2e = 0;
  }
  for (var _0x48dcf7 = _0x4a2444 == -1 ? 0 : _0x4a2444; _0x48dcf7 >= _0x846b2e; _0x48dcf7--) {
    for (var _0x2922ae = 0; _0x2922ae < 200; _0x2922ae++) {
      for (var _0x10f6f5 = 0; _0x10f6f5 < 200; _0x10f6f5++) {
        var _0x1350b8 = MAP.tiles[_0x10f6f5][_0x2922ae];
        if (!_0x1350b8 || !_0x1350b8[_0x379788]) {
          continue;
        }
        if (_0x4a2444 == -1) {
          var _0x4a2e84 = _0x1350b8[_0x379788];
        } else {
          var _0x4a2e84 = _0x1350b8[_0x379788][_0x48dcf7];
        }
        for (var _0x50749d = 0; _0x4a2e84 && _0x50749d < _0x4a2e84.length; _0x50749d++) {
          var _0x127a77 = _0x4a2e84[_0x50749d];
          _0x5c2514.fillStyle = _0x36cf5e;
          circle(_0x5c2514, _0x127a77.x * _0x2dd8cf * 0.0095, _0x127a77.y * _0x2dd8cf * 0.0095, _0xd787b9 * _0x2dd8cf);
          _0x5c2514.fill();
        }
      }
    }
  }
}
function create_minimap(_0x4e48b4, _0x4b08be) {
  var _0x3d6aba = document.createElement("canvas");
  var _0x1f46a0 = _0x3d6aba.getContext("2d");
  _0x3d6aba.width = _0x4e48b4 * 200;
  _0x3d6aba.height = _0x4e48b4 * 200;
  _0x1f46a0.translate(_0x4e48b4 * 9, _0x4e48b4 * 12);
  _0x1f46a0.fillStyle = _0x4b08be[0];
  _0x1f46a0.fillRect(-2, -3, _0x3d6aba.width, _0x3d6aba.height);
  _0x1f46a0.fillStyle = _0x4b08be[9];
  _0x1f46a0.fillRect(0, 0, _0x3d6aba.width, _0x3d6aba.height);
  _0x1f46a0.fillStyle = _0x4b08be[17];
  _0x1f46a0.fillRect(0, 0, _0x3d6aba.width, _0x3d6aba.height / 2.1);
  _0x1f46a0.fillStyle = _0x4b08be[26];
  _0x1f46a0.fillRect(_0x3d6aba.width / 1.77, _0x3d6aba.height / 2.1, _0x3d6aba.width / 2.1, _0x3d6aba.height / 2.1);
  _0x1f46a0.fillStyle = _0x4b08be[28];
  _0x1f46a0.fillRect(_0x3d6aba.width / 1.77, _0x3d6aba.height / 2.1, 5, _0x3d6aba.height / 2.1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[17], "so", 3, 6, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[28], "isl", 6, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[28], "isl", 6, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[28], "isl", 6, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[5], "plm", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[5], "plm", 2, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[5], "plm", 2, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[5], "t", 2, 5, 4);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[6], "t", 3, 3, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[7], "t", 4, 1, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[8], "b", 3, 3, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[9], "b", 4, 1, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[2], "s", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[3], "s", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[4], "s", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[10], "g", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[11], "g", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[12], "g", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[1], "p", 4, -1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[25], "dg", 3, 6, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[27], "cs", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[27], "cs", 2, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[27], "cs", 2, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[19], "f", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[20], "f", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[21], "f", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[22], "gw", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[22], "gw", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[22], "gw", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "dw", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "dw", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "dw", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "d", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "d", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[23], "d", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[24], "a", 2, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[24], "a", 3, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[24], "a", 4, 0, 0);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[30], "l", 4, 2, 2);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[30], "l", 4, 1, 1);
  create_minimap_object(_0x1f46a0, _0x4e48b4, _0x4b08be[30], "l", 4, 0, 0);
  circle(_0x1f46a0, 0, 0, 0);
  _0x1f46a0.globalCompositeOperation = "destination-out";
  _0x1f46a0.translate(_0x4e48b4 * -9, _0x4e48b4 * -4);
  _0x1f46a0.rect(_0x4e48b4 * 5, 0, _0x3d6aba.width * _0x4e48b4, _0x3d6aba.height * _0x4e48b4, _0x4e48b4 * 10);
  _0x1f46a0.lineWidth = _0x4e48b4 * 7;
  _0x1f46a0.strokeStyle = _0x4b08be[16];
  _0x1f46a0.stroke();
  return _0x3d6aba;
}
function create_workbench(_0x52310e, _0x30df2a, _0x5cd34f) {
  var _0x228b81 = document.createElement("canvas");
  var _0x248683 = _0x228b81.getContext("2d");
  var _0x5d7213 = _0x52310e * 125;
  var _0x2d6fda = _0x52310e * 95;
  var _0x115f7a = _0x5d7213 / 2;
  var _0xefb947 = _0x2d6fda / 2;
  var _0x193644 = _0x52310e * 10;
  var _0x8cc20 = _0x52310e * 8;
  var _0x1a595d = _0x52310e * 112;
  var _0x14fc7e = _0x52310e * 82;
  var _0x3c1372 = _0x1a595d / 2;
  var _0x213c3b = _0x14fc7e / 2;
  var _0x5bbbca = _0x52310e * 4;
  _0x228b81.width = _0x5d7213;
  _0x228b81.height = _0x2d6fda;
  _0x248683.translate(_0x115f7a - _0x52310e * 4, _0xefb947 + _0x52310e * 4);
  _0x248683.globalAlpha = _0x30df2a ? 0.5 : 1;
  round_rect(_0x248683, -_0x3c1372, -_0x213c3b, _0x1a595d, _0x14fc7e, _0x193644);
  fill_path(_0x248683, _0x5cd34f[0]);
  _0x248683.globalAlpha = 1;
  _0x248683.translate(0, -_0x8cc20);
  round_rect(_0x248683, -_0x3c1372, -_0x213c3b, _0x1a595d, _0x14fc7e, _0x193644);
  fill_path(_0x248683, _0x5cd34f[1], _0x5cd34f[2], _0x5bbbca);
  var _0x5d7213 = _0x52310e * 55;
  var _0x2d6fda = _0x52310e * 45;
  var _0x193644 = 5;
  _0x248683.translate(_0x52310e * -40, _0x52310e * -30);
  round_rect(_0x248683, 0, 0, _0x5d7213, _0x2d6fda, _0x193644);
  fill_path(_0x248683, _0x5cd34f[3]);
  var _0x5ecc87 = create_gear(_0x52310e * 0.7, _0x5cd34f[3]);
  _0x248683.drawImage(_0x5ecc87, _0x52310e * 45, _0x52310e * -25);
  var _0x5ecc87 = create_gear(_0x52310e * 0.7, _0x5cd34f[3]);
  _0x248683.drawImage(_0x5ecc87, _0x52310e * 45, _0x52310e * 15);
  var _0x5ecc87 = create_gear(_0x52310e * 1.2, _0x5cd34f[3]);
  _0x248683.drawImage(_0x5ecc87, _0x52310e * 28, _0x52310e * -30);
  var _0x5d7213 = _0x52310e * 15;
  var _0x2d6fda = _0x52310e * 70;
  var _0x193644 = _0x52310e * 5;
  _0x248683.translate(_0x52310e * 78, _0x52310e * -5);
  round_rect(_0x248683, 0, 0, _0x5d7213, _0x2d6fda, _0x193644);
  fill_path(_0x248683, _0x5cd34f[4]);
  var _0x5d7213 = _0x52310e * 9;
  var _0x2d6fda = _0x52310e * 50;
  var _0x193644 = _0x52310e * 3;
  _0x248683.translate(_0x52310e * -20, _0x52310e * 20);
  _0x248683.rotate(Math.PI / 5);
  _0x248683.globalAlpha = 0.6;
  round_rect(_0x248683, 0, 0, _0x5d7213, _0x2d6fda, _0x193644);
  fill_path(_0x248683, _0x5cd34f[5]);
  _0x248683.translate(_0x52310e * -20, _0x52310e * 29);
  _0x248683.rotate(Math.PI / 5);
  _0x248683.globalAlpha = 0.6;
  _0x248683.beginPath();
  _0x248683.lineJoin = "round";
  _0x248683.moveTo(0, 0);
  _0x248683.lineTo(0, _0x52310e * 30);
  _0x248683.lineTo(_0x52310e * 30, _0x52310e * 30);
  _0x248683.closePath();
  fill_path(_0x248683, null, _0x5cd34f[5], _0x52310e * 8);
  return _0x228b81;
}
function create_rabbit(_0x28a51f, _0x221dee) {
  var _0x166629 = document.createElement("canvas");
  var _0xd2d024 = _0x166629.getContext("2d");
  var _0x12bc1d = _0x28a51f * 85;
  var _0x338269 = _0x28a51f * 115;
  var _0x24e993 = _0x28a51f * 6;
  var _0x46bc7a = _0x28a51f * 4;
  _0x166629.width = _0x12bc1d;
  _0x166629.height = _0x338269;
  _0xd2d024.translate(_0x28a51f * -130, _0x28a51f * -60 + _0x24e993);
  _0xd2d024.globalAlpha = 0.5;
  _0xd2d024.beginPath();
  _0xd2d024.bezierCurveTo(_0x28a51f * 190, _0x28a51f * 87, _0x28a51f * 201, _0x28a51f * 59, _0x28a51f * 208, _0x28a51f * 64);
  _0xd2d024.bezierCurveTo(_0x28a51f * 213, _0x28a51f * 68, _0x28a51f * 204, _0x28a51f * 93, _0x28a51f * 195, _0x28a51f * 109);
  _0xd2d024.bezierCurveTo(_0x28a51f * 195, _0x28a51f * 109, _0x28a51f * 202, _0x28a51f * 124, _0x28a51f * 191, _0x28a51f * 141);
  _0xd2d024.bezierCurveTo(_0x28a51f * 182, _0x28a51f * 151, _0x28a51f * 164, _0x28a51f * 155, _0x28a51f * 148, _0x28a51f * 144);
  _0xd2d024.bezierCurveTo(_0x28a51f * 136, _0x28a51f * 135, _0x28a51f * 138, _0x28a51f * 111, _0x28a51f * 145, _0x28a51f * 104);
  _0xd2d024.bezierCurveTo(_0x28a51f * 140, _0x28a51f * 92, _0x28a51f * 131, _0x28a51f * 67, _0x28a51f * 138, _0x28a51f * 63);
  _0xd2d024.bezierCurveTo(_0x28a51f * 145, _0x28a51f * 61, _0x28a51f * 153, _0x28a51f * 82, _0x28a51f * 155, _0x28a51f * 96);
  _0xd2d024.bezierCurveTo(_0x28a51f * 167, _0x28a51f * 91, _0x28a51f * 178, _0x28a51f * 92, _0x28a51f * 187, _0x28a51f * 98);
  _0xd2d024.closePath();
  fill_path(_0xd2d024, _0x221dee[0]);
  _0xd2d024.translate(0, -_0x24e993);
  _0xd2d024.globalAlpha = 1;
  _0xd2d024.beginPath();
  _0xd2d024.bezierCurveTo(_0x28a51f * 190, _0x28a51f * 87, _0x28a51f * 201, _0x28a51f * 59, _0x28a51f * 208, _0x28a51f * 64);
  _0xd2d024.bezierCurveTo(_0x28a51f * 213, _0x28a51f * 68, _0x28a51f * 204, _0x28a51f * 93, _0x28a51f * 195, _0x28a51f * 109);
  _0xd2d024.bezierCurveTo(_0x28a51f * 195, _0x28a51f * 109, _0x28a51f * 202, _0x28a51f * 124, _0x28a51f * 191, _0x28a51f * 141);
  _0xd2d024.bezierCurveTo(_0x28a51f * 182, _0x28a51f * 151, _0x28a51f * 164, _0x28a51f * 155, _0x28a51f * 148, _0x28a51f * 144);
  _0xd2d024.bezierCurveTo(_0x28a51f * 136, _0x28a51f * 135, _0x28a51f * 138, _0x28a51f * 111, _0x28a51f * 145, _0x28a51f * 104);
  _0xd2d024.bezierCurveTo(_0x28a51f * 140, _0x28a51f * 92, _0x28a51f * 131, _0x28a51f * 67, _0x28a51f * 138, _0x28a51f * 63);
  _0xd2d024.bezierCurveTo(_0x28a51f * 145, _0x28a51f * 61, _0x28a51f * 153, _0x28a51f * 82, _0x28a51f * 155, _0x28a51f * 96);
  _0xd2d024.bezierCurveTo(_0x28a51f * 167, _0x28a51f * 91, _0x28a51f * 178, _0x28a51f * 92, _0x28a51f * 187, _0x28a51f * 98);
  _0xd2d024.closePath();
  fill_path(_0xd2d024, _0x221dee[1], _0x221dee[2], 4);
  var _0x2cfeeb = _0x28a51f * 155;
  var _0x397fde = _0x28a51f * 133;
  var _0xab47d7 = _0x28a51f * 10;
  var _0x56b10b = _0x28a51f * 3;
  var _0x385bc0 = _0x2cfeeb + _0x28a51f * -3;
  var _0x9ca467 = _0x397fde + _0x28a51f * -5;
  _0xd2d024.save();
  _0xd2d024.translate(_0x2cfeeb, _0x397fde);
  _0xd2d024.globalAlpha = 1;
  circle(_0xd2d024, 0, 0, _0xab47d7);
  fill_path(_0xd2d024, _0x221dee[3]);
  _0xd2d024.restore();
  _0xd2d024.save();
  _0xd2d024.translate(_0x385bc0, _0x9ca467);
  _0xd2d024.globalAlpha = 1;
  circle(_0xd2d024, 0, 0, _0x56b10b);
  fill_path(_0xd2d024, _0x221dee[4]);
  _0xd2d024.restore();
  _0xd2d024.save();
  _0xd2d024.translate(_0x2cfeeb + _0x28a51f * 27, _0x397fde);
  _0xd2d024.globalAlpha = 1;
  circle(_0xd2d024, 0, 0, _0xab47d7);
  fill_path(_0xd2d024, _0x221dee[3]);
  _0xd2d024.restore();
  _0xd2d024.save();
  _0xd2d024.translate(_0x28a51f * 27 + _0x385bc0, _0x9ca467);
  _0xd2d024.globalAlpha = 1;
  circle(_0xd2d024, 0, 0, _0x56b10b);
  fill_path(_0xd2d024, _0x221dee[4]);
  return _0x166629;
}
function create_hurt_rabbit(_0x6e5b5b, _0x3ca6ad) {
  var _0x522cd1 = document.createElement("canvas");
  var _0x1e4d50 = _0x522cd1.getContext("2d");
  var _0x2620c2 = _0x6e5b5b * 85;
  var _0xb29032 = _0x6e5b5b * 115;
  var _0x8d6d34 = _0x6e5b5b * 6;
  var _0x5aec2d = _0x6e5b5b * 4;
  _0x522cd1.width = _0x2620c2;
  _0x522cd1.height = _0xb29032;
  _0x1e4d50.translate(_0x6e5b5b * -130, _0x6e5b5b * -60);
  _0x1e4d50.globalAlpha = 1;
  _0x1e4d50.beginPath();
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 190, _0x6e5b5b * 87, _0x6e5b5b * 201, _0x6e5b5b * 59, _0x6e5b5b * 208, _0x6e5b5b * 64);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 213, _0x6e5b5b * 68, _0x6e5b5b * 204, _0x6e5b5b * 93, _0x6e5b5b * 195, _0x6e5b5b * 109);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 195, _0x6e5b5b * 109, _0x6e5b5b * 202, _0x6e5b5b * 124, _0x6e5b5b * 191, _0x6e5b5b * 141);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 182, _0x6e5b5b * 151, _0x6e5b5b * 164, _0x6e5b5b * 155, _0x6e5b5b * 148, _0x6e5b5b * 144);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 136, _0x6e5b5b * 135, _0x6e5b5b * 138, _0x6e5b5b * 111, _0x6e5b5b * 145, _0x6e5b5b * 104);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 140, _0x6e5b5b * 92, _0x6e5b5b * 131, _0x6e5b5b * 67, _0x6e5b5b * 138, _0x6e5b5b * 63);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 145, _0x6e5b5b * 61, _0x6e5b5b * 153, _0x6e5b5b * 82, _0x6e5b5b * 155, _0x6e5b5b * 96);
  _0x1e4d50.bezierCurveTo(_0x6e5b5b * 167, _0x6e5b5b * 91, _0x6e5b5b * 178, _0x6e5b5b * 92, _0x6e5b5b * 187, _0x6e5b5b * 98);
  _0x1e4d50.closePath();
  fill_path(_0x1e4d50, _0x3ca6ad, _0x3ca6ad, _0x5aec2d);
  return _0x522cd1;
}
function create_hurt_wolf(_0x17cb33, _0x258e6d) {
  var _0x3e7ed0 = document.createElement("canvas");
  var _0x3d0d4a = _0x3e7ed0.getContext("2d");
  _0x3e7ed0.width = _0x17cb33 * 188;
  _0x3e7ed0.height = _0x17cb33 * 190;
  _0x3d0d4a.beginPath();
  _0x3d0d4a.lineCap = "round";
  _0x3d0d4a.lineJoin = "round";
  _0x3d0d4a.moveTo(_0x17cb33 * 33.00567626953125, _0x17cb33 * 95.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 42.00567626953125, _0x17cb33 * 87.44320678710938, _0x17cb33 * 48.00567626953125, _0x17cb33 * 51.443206787109375, _0x17cb33 * 74.00567626953125, _0x17cb33 * 47.443206787109375);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 100.00567626953125, _0x17cb33 * 42.443206787109375, _0x17cb33 * 118.00567626953125, _0x17cb33 * 49.443206787109375, _0x17cb33 * 131.00567626953125, _0x17cb33 * 55.443206787109375);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 140.00567626953125, _0x17cb33 * 70.44320678710938, _0x17cb33 * 145.00567626953125, _0x17cb33 * 87.44320678710938, _0x17cb33 * 152.00567626953125, _0x17cb33 * 94.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 149.00567626953125, _0x17cb33 * 99.44320678710938, _0x17cb33 * 147.00567626953125, _0x17cb33 * 98.44320678710938, _0x17cb33 * 141.00567626953125, _0x17cb33 * 101.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 147.00567626953125, _0x17cb33 * 108.44320678710938, _0x17cb33 * 147.00567626953125, _0x17cb33 * 111.44320678710938, _0x17cb33 * 147.00567626953125, _0x17cb33 * 112.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 143.00567626953125, _0x17cb33 * 112.44320678710938, _0x17cb33 * 141.00567626953125, _0x17cb33 * 112.44320678710938, _0x17cb33 * 137.00567626953125, _0x17cb33 * 111.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 138.00567626953125, _0x17cb33 * 117.44320678710938, _0x17cb33 * 138.00567626953125, _0x17cb33 * 120.44320678710938, _0x17cb33 * 138.00567626953125, _0x17cb33 * 124.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 125.00567626953125, _0x17cb33 * 107.44320678710938, _0x17cb33 * 121.00567626953125, _0x17cb33 * 124.44320678710938, _0x17cb33 * 110.00567626953125, _0x17cb33 * 141.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 102.00567626953125, _0x17cb33 * 158.44320678710938, _0x17cb33 * 89.00567626953125, _0x17cb33 * 158.44320678710938, _0x17cb33 * 80.00567626953125, _0x17cb33 * 144.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 61.00567626953125, _0x17cb33 * 111.44320678710938, _0x17cb33 * 56.00567626953125, _0x17cb33 * 117.44320678710938, _0x17cb33 * 48.00567626953125, _0x17cb33 * 120.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 46.00567626953125, _0x17cb33 * 118.44320678710938, _0x17cb33 * 47.00567626953125, _0x17cb33 * 112.44320678710938, _0x17cb33 * 48.00567626953125, _0x17cb33 * 107.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 43.00567626953125, _0x17cb33 * 111.44320678710938, _0x17cb33 * 40.00567626953125, _0x17cb33 * 111.44320678710938, _0x17cb33 * 37.00567626953125, _0x17cb33 * 110.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 39.50567626953125, _0x17cb33 * 104.94320678710938, _0x17cb33 * 39.50567626953125, _0x17cb33 * 104.94320678710938, _0x17cb33 * 42.00567626953125, _0x17cb33 * 99.44320678710938);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 33.00567626953125, _0x17cb33 * 99.44320678710938, _0x17cb33 * 33.00567626953125, _0x17cb33 * 98.44320678710938, _0x17cb33 * 33.00567626953125, _0x17cb33 * 96.44320678710938);
  _0x3d0d4a.closePath();
  fill_path(_0x3d0d4a, _0x258e6d[0], _0x258e6d[0], _0x17cb33 * 4);
  _0x3d0d4a.beginPath();
  _0x3d0d4a.lineCap = "round";
  _0x3d0d4a.lineJoin = "round";
  _0x3d0d4a.moveTo(_0x17cb33 * 51.00567626953125, _0x17cb33 * 72.53409576416016);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 48.00567626953125, _0x17cb33 * 56.534095764160156, _0x17cb33 * 48.00567626953125, _0x17cb33 * 49.534095764160156, _0x17cb33 * 54.00567626953125, _0x17cb33 * 35.534095764160156);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 58.00567626953125, _0x17cb33 * 26.534095764160156, _0x17cb33 * 65.00567626953125, _0x17cb33 * 27.534095764160156, _0x17cb33 * 73.00567626953125, _0x17cb33 * 40.534095764160156);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 81.00567626953125, _0x17cb33 * 49.534095764160156, _0x17cb33 * 82.00567626953125, _0x17cb33 * 50.534095764160156, _0x17cb33 * 83.00567626953125, _0x17cb33 * 51.534095764160156);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 77.00567626953125, _0x17cb33 * 71.53409576416016, _0x17cb33 * 64.00567626953125, _0x17cb33 * 75.53409576416016, _0x17cb33 * 51.00567626953125, _0x17cb33 * 72.53409576416016);
  _0x3d0d4a.closePath();
  fill_path(_0x3d0d4a, _0x258e6d[0], _0x258e6d[0], _0x17cb33 * 2);
  _0x3d0d4a.beginPath();
  _0x3d0d4a.lineCap = "round";
  _0x3d0d4a.lineJoin = "round";
  _0x3d0d4a.moveTo(_0x17cb33 * 105.00567626953125, _0x17cb33 * 50.53410339355469);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 112.00567626953125, _0x17cb33 * 48.53410339355469, _0x17cb33 * 125.00567626953125, _0x17cb33 * 21.534103393554688, _0x17cb33 * 132.00567626953125, _0x17cb33 * 33.53410339355469);
  _0x3d0d4a.bezierCurveTo(_0x17cb33 * 138.00567626953125, _0x17cb33 * 42.53410339355469, _0x17cb33 * 140.00567626953125, _0x17cb33 * 64.53410339355469, _0x17cb33 * 136.00567626953125, _0x17cb33 * 75.53410339355469);
  _0x3d0d4a.closePath();
  fill_path(_0x3d0d4a, _0x258e6d[0], _0x258e6d[0], _0x17cb33 * 2);
  return _0x3e7ed0;
}
function create_wolf(_0x536cc2, _0x590e84) {
  var _0x416749 = document.createElement("canvas");
  var _0x2dad96 = _0x416749.getContext("2d");
  _0x416749.width = _0x536cc2 * 188;
  _0x416749.height = _0x536cc2 * 190;
  _0x2dad96.globalAlpha = 0.5;
  _0x2dad96.translate(0, _0x536cc2 * 5);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 95.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 42.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 51.443206787109375, _0x536cc2 * 74.00567626953125, _0x536cc2 * 47.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 100.00567626953125, _0x536cc2 * 42.443206787109375, _0x536cc2 * 118.00567626953125, _0x536cc2 * 49.443206787109375, _0x536cc2 * 131.00567626953125, _0x536cc2 * 55.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 140.00567626953125, _0x536cc2 * 70.44320678710938, _0x536cc2 * 145.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 152.00567626953125, _0x536cc2 * 94.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 149.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 101.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 147.00567626953125, _0x536cc2 * 108.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 112.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 143.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 137.00567626953125, _0x536cc2 * 111.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 138.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 120.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 124.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 125.00567626953125, _0x536cc2 * 107.44320678710938, _0x536cc2 * 121.00567626953125, _0x536cc2 * 124.44320678710938, _0x536cc2 * 110.00567626953125, _0x536cc2 * 141.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 102.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 89.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 80.00567626953125, _0x536cc2 * 144.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 61.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 56.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 120.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 46.00567626953125, _0x536cc2 * 118.44320678710938, _0x536cc2 * 47.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 107.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 43.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 40.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 37.00567626953125, _0x536cc2 * 110.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 42.00567626953125, _0x536cc2 * 99.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 96.44320678710938);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[0], _0x590e84[0], _0x536cc2 * 4);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 60.00567626953125, _0x536cc2 * 99.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 70.00567626953125, _0x536cc2 * 82.35227966308594, _0x536cc2 * 85.00567626953125, _0x536cc2 * 86.35227966308594, _0x536cc2 * 87.00567626953125, _0x536cc2 * 97.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 89.00567626953125, _0x536cc2 * 101.35227966308594, _0x536cc2 * 88.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 87.00567626953125, _0x536cc2 * 110.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 89.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 91.00567626953125, _0x536cc2 * 112.35227966308594, _0x536cc2 * 93.00567626953125, _0x536cc2 * 115.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 96.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 99.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 100.00567626953125, _0x536cc2 * 110.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 98.00567626953125, _0x536cc2 * 92.35227966308594, _0x536cc2 * 103.00567626953125, _0x536cc2 * 86.35227966308594, _0x536cc2 * 113.00567626953125, _0x536cc2 * 89.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 122.00567626953125, _0x536cc2 * 92.35227966308594, _0x536cc2 * 123.00567626953125, _0x536cc2 * 94.35227966308594, _0x536cc2 * 126.00567626953125, _0x536cc2 * 98.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 124.00567626953125, _0x536cc2 * 102.35227966308594, _0x536cc2 * 123.00567626953125, _0x536cc2 * 103.35227966308594, _0x536cc2 * 121.00567626953125, _0x536cc2 * 104.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 124.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 126.00567626953125, _0x536cc2 * 107.35227966308594, _0x536cc2 * 129.00567626953125, _0x536cc2 * 111.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 115.00567626953125, _0x536cc2 * 122.35227966308594, _0x536cc2 * 113.00567626953125, _0x536cc2 * 145.35227966308594, _0x536cc2 * 100.00567626953125, _0x536cc2 * 152.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 91.00567626953125, _0x536cc2 * 158.35227966308594, _0x536cc2 * 83.00567626953125, _0x536cc2 * 149.35227966308594, _0x536cc2 * 76.00567626953125, _0x536cc2 * 138.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 67.00567626953125, _0x536cc2 * 114.35227966308594, _0x536cc2 * 63.00567626953125, _0x536cc2 * 113.35227966308594, _0x536cc2 * 59.00567626953125, _0x536cc2 * 111.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 62.00567626953125, _0x536cc2 * 107.35227966308594, _0x536cc2 * 64.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 66.00567626953125, _0x536cc2 * 104.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 63.00567626953125, _0x536cc2 * 100.35227966308594, _0x536cc2 * 62.00567626953125, _0x536cc2 * 100.35227966308594, _0x536cc2 * 60.00567626953125, _0x536cc2 * 99.35227966308594);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[0], _0x590e84[0], _0x536cc2 * 2);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 51.00567626953125, _0x536cc2 * 72.53409576416016);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 48.00567626953125, _0x536cc2 * 56.534095764160156, _0x536cc2 * 48.00567626953125, _0x536cc2 * 49.534095764160156, _0x536cc2 * 54.00567626953125, _0x536cc2 * 35.534095764160156);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 58.00567626953125, _0x536cc2 * 26.534095764160156, _0x536cc2 * 65.00567626953125, _0x536cc2 * 27.534095764160156, _0x536cc2 * 73.00567626953125, _0x536cc2 * 40.534095764160156);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 81.00567626953125, _0x536cc2 * 49.534095764160156, _0x536cc2 * 82.00567626953125, _0x536cc2 * 50.534095764160156, _0x536cc2 * 83.00567626953125, _0x536cc2 * 51.534095764160156);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 77.00567626953125, _0x536cc2 * 71.53409576416016, _0x536cc2 * 64.00567626953125, _0x536cc2 * 75.53409576416016, _0x536cc2 * 51.00567626953125, _0x536cc2 * 72.53409576416016);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[0], _0x590e84[0], _0x536cc2 * 2);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 105.00567626953125, _0x536cc2 * 50.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 112.00567626953125, _0x536cc2 * 48.53410339355469, _0x536cc2 * 125.00567626953125, _0x536cc2 * 21.534103393554688, _0x536cc2 * 132.00567626953125, _0x536cc2 * 33.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 138.00567626953125, _0x536cc2 * 42.53410339355469, _0x536cc2 * 140.00567626953125, _0x536cc2 * 64.53410339355469, _0x536cc2 * 136.00567626953125, _0x536cc2 * 75.53410339355469);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[0], _0x590e84[0], _0x536cc2 * 2);
  _0x2dad96.globalAlpha = 1;
  _0x2dad96.translate(0, _0x536cc2 * -5);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 95.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 42.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 51.443206787109375, _0x536cc2 * 74.00567626953125, _0x536cc2 * 47.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 100.00567626953125, _0x536cc2 * 42.443206787109375, _0x536cc2 * 118.00567626953125, _0x536cc2 * 49.443206787109375, _0x536cc2 * 131.00567626953125, _0x536cc2 * 55.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 140.00567626953125, _0x536cc2 * 70.44320678710938, _0x536cc2 * 145.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 152.00567626953125, _0x536cc2 * 94.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 149.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 101.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 147.00567626953125, _0x536cc2 * 108.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 112.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 143.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 137.00567626953125, _0x536cc2 * 111.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 138.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 120.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 124.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 125.00567626953125, _0x536cc2 * 107.44320678710938, _0x536cc2 * 121.00567626953125, _0x536cc2 * 124.44320678710938, _0x536cc2 * 110.00567626953125, _0x536cc2 * 141.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 102.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 89.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 80.00567626953125, _0x536cc2 * 144.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 61.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 56.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 120.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 46.00567626953125, _0x536cc2 * 118.44320678710938, _0x536cc2 * 47.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 107.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 43.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 40.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 37.00567626953125, _0x536cc2 * 110.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 42.00567626953125, _0x536cc2 * 99.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 96.44320678710938);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[1], _0x590e84[2], _0x536cc2 * 3);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 60.00567626953125, _0x536cc2 * 99.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 70.00567626953125, _0x536cc2 * 82.35227966308594, _0x536cc2 * 85.00567626953125, _0x536cc2 * 86.35227966308594, _0x536cc2 * 87.00567626953125, _0x536cc2 * 97.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 89.00567626953125, _0x536cc2 * 101.35227966308594, _0x536cc2 * 88.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 87.00567626953125, _0x536cc2 * 110.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 89.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 91.00567626953125, _0x536cc2 * 112.35227966308594, _0x536cc2 * 93.00567626953125, _0x536cc2 * 115.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 96.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 99.00567626953125, _0x536cc2 * 111.35227966308594, _0x536cc2 * 100.00567626953125, _0x536cc2 * 110.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 98.00567626953125, _0x536cc2 * 92.35227966308594, _0x536cc2 * 103.00567626953125, _0x536cc2 * 86.35227966308594, _0x536cc2 * 113.00567626953125, _0x536cc2 * 89.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 122.00567626953125, _0x536cc2 * 92.35227966308594, _0x536cc2 * 123.00567626953125, _0x536cc2 * 94.35227966308594, _0x536cc2 * 126.00567626953125, _0x536cc2 * 98.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 124.00567626953125, _0x536cc2 * 102.35227966308594, _0x536cc2 * 123.00567626953125, _0x536cc2 * 103.35227966308594, _0x536cc2 * 121.00567626953125, _0x536cc2 * 104.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 124.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 126.00567626953125, _0x536cc2 * 107.35227966308594, _0x536cc2 * 129.00567626953125, _0x536cc2 * 111.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 115.00567626953125, _0x536cc2 * 122.35227966308594, _0x536cc2 * 113.00567626953125, _0x536cc2 * 145.35227966308594, _0x536cc2 * 100.00567626953125, _0x536cc2 * 152.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 91.00567626953125, _0x536cc2 * 158.35227966308594, _0x536cc2 * 83.00567626953125, _0x536cc2 * 149.35227966308594, _0x536cc2 * 76.00567626953125, _0x536cc2 * 138.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 67.00567626953125, _0x536cc2 * 114.35227966308594, _0x536cc2 * 63.00567626953125, _0x536cc2 * 113.35227966308594, _0x536cc2 * 59.00567626953125, _0x536cc2 * 111.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 62.00567626953125, _0x536cc2 * 107.35227966308594, _0x536cc2 * 64.00567626953125, _0x536cc2 * 105.35227966308594, _0x536cc2 * 66.00567626953125, _0x536cc2 * 104.35227966308594);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 63.00567626953125, _0x536cc2 * 100.35227966308594, _0x536cc2 * 62.00567626953125, _0x536cc2 * 100.35227966308594, _0x536cc2 * 60.00567626953125, _0x536cc2 * 99.35227966308594);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[3]);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 95.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 42.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 51.443206787109375, _0x536cc2 * 74.00567626953125, _0x536cc2 * 47.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 100.00567626953125, _0x536cc2 * 42.443206787109375, _0x536cc2 * 118.00567626953125, _0x536cc2 * 49.443206787109375, _0x536cc2 * 131.00567626953125, _0x536cc2 * 55.443206787109375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 140.00567626953125, _0x536cc2 * 70.44320678710938, _0x536cc2 * 145.00567626953125, _0x536cc2 * 87.44320678710938, _0x536cc2 * 152.00567626953125, _0x536cc2 * 94.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 149.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 101.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 147.00567626953125, _0x536cc2 * 108.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 147.00567626953125, _0x536cc2 * 112.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 143.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 141.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 137.00567626953125, _0x536cc2 * 111.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 138.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 120.44320678710938, _0x536cc2 * 138.00567626953125, _0x536cc2 * 124.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 125.00567626953125, _0x536cc2 * 107.44320678710938, _0x536cc2 * 121.00567626953125, _0x536cc2 * 124.44320678710938, _0x536cc2 * 110.00567626953125, _0x536cc2 * 141.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 102.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 89.00567626953125, _0x536cc2 * 158.44320678710938, _0x536cc2 * 80.00567626953125, _0x536cc2 * 144.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 61.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 56.00567626953125, _0x536cc2 * 117.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 120.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 46.00567626953125, _0x536cc2 * 118.44320678710938, _0x536cc2 * 47.00567626953125, _0x536cc2 * 112.44320678710938, _0x536cc2 * 48.00567626953125, _0x536cc2 * 107.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 43.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 40.00567626953125, _0x536cc2 * 111.44320678710938, _0x536cc2 * 37.00567626953125, _0x536cc2 * 110.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 39.50567626953125, _0x536cc2 * 104.94320678710938, _0x536cc2 * 42.00567626953125, _0x536cc2 * 99.44320678710938);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 33.00567626953125, _0x536cc2 * 99.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 98.44320678710938, _0x536cc2 * 33.00567626953125, _0x536cc2 * 96.44320678710938);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, undefined, _0x590e84[2], _0x536cc2 * 3);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 51.00567626953125, _0x536cc2 * 72.53409576416016);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 48.00567626953125, _0x536cc2 * 56.534095764160156, _0x536cc2 * 48.00567626953125, _0x536cc2 * 49.534095764160156, _0x536cc2 * 54.00567626953125, _0x536cc2 * 35.534095764160156);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 58.00567626953125, _0x536cc2 * 26.534095764160156, _0x536cc2 * 65.00567626953125, _0x536cc2 * 27.534095764160156, _0x536cc2 * 73.00567626953125, _0x536cc2 * 40.534095764160156);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 81.00567626953125, _0x536cc2 * 49.534095764160156, _0x536cc2 * 82.00567626953125, _0x536cc2 * 50.534095764160156, _0x536cc2 * 83.00567626953125, _0x536cc2 * 51.534095764160156);
  fill_path(_0x2dad96, _0x590e84[1], _0x590e84[2], _0x536cc2 * 3);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 105.00567626953125, _0x536cc2 * 50.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 112.00567626953125, _0x536cc2 * 48.53410339355469, _0x536cc2 * 125.00567626953125, _0x536cc2 * 21.534103393554688, _0x536cc2 * 132.00567626953125, _0x536cc2 * 33.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 138.00567626953125, _0x536cc2 * 42.53410339355469, _0x536cc2 * 140.00567626953125, _0x536cc2 * 64.53410339355469, _0x536cc2 * 136.00567626953125, _0x536cc2 * 75.53410339355469);
  fill_path(_0x2dad96, _0x590e84[1], _0x590e84[2], _0x536cc2 * 3);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 57.00567626953125, _0x536cc2 * 68.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 63.00567626953125, _0x536cc2 * 69.53410339355469, _0x536cc2 * 69.00567626953125, _0x536cc2 * 66.53410339355469, _0x536cc2 * 73.00567626953125, _0x536cc2 * 60.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 66.00567626953125, _0x536cc2 * 47.53410339355469, _0x536cc2 * 61.00567626953125, _0x536cc2 * 42.53410339355469, _0x536cc2 * 58.00567626953125, _0x536cc2 * 49.53410339355469);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 56.00567626953125, _0x536cc2 * 59.53410339355469, _0x536cc2 * 56.00567626953125, _0x536cc2 * 64.53410339355469, _0x536cc2 * 57.00567626953125, _0x536cc2 * 67.53410339355469);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[3]);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 115.00567626953125, _0x536cc2 * 59.715911865234375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 119.00567626953125, _0x536cc2 * 48.715911865234375, _0x536cc2 * 126.00567626953125, _0x536cc2 * 41.715911865234375, _0x536cc2 * 129.00567626953125, _0x536cc2 * 48.715911865234375);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 131.00567626953125, _0x536cc2 * 56.715911865234375, _0x536cc2 * 133.00567626953125, _0x536cc2 * 71.71591186523438, _0x536cc2 * 127.00567626953125, _0x536cc2 * 68.71591186523438);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 120.00567626953125, _0x536cc2 * 67.71591186523438, _0x536cc2 * 114.00567626953125, _0x536cc2 * 59.715911865234375, _0x536cc2 * 116.00567626953125, _0x536cc2 * 58.715911865234375);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[3]);
  circle(_0x2dad96, _0x536cc2 * 77, _0x536cc2 * 107, _0x536cc2 * 6);
  fill_path(_0x2dad96, _0x590e84[2]);
  circle(_0x2dad96, _0x536cc2 * 110, _0x536cc2 * 107, _0x536cc2 * 6);
  fill_path(_0x2dad96, _0x590e84[2]);
  circle(_0x2dad96, _0x536cc2 * 75, _0x536cc2 * 105, _0x536cc2 * 3);
  fill_path(_0x2dad96, _0x590e84[4]);
  circle(_0x2dad96, _0x536cc2 * 108, _0x536cc2 * 105, _0x536cc2 * 3);
  fill_path(_0x2dad96, _0x590e84[4]);
  _0x2dad96.beginPath();
  _0x2dad96.lineCap = "round";
  _0x2dad96.lineJoin = "round";
  _0x2dad96.moveTo(_0x536cc2 * 88.00567626953125, _0x536cc2 * 141.4431915283203);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 93.00567626953125, _0x536cc2 * 137.4431915283203, _0x536cc2 * 96.00567626953125, _0x536cc2 * 138.4431915283203, _0x536cc2 * 100.00567626953125, _0x536cc2 * 141.4431915283203);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 103.00567626953125, _0x536cc2 * 143.4431915283203, _0x536cc2 * 101.00567626953125, _0x536cc2 * 149.4431915283203, _0x536cc2 * 95.00567626953125, _0x536cc2 * 148.4431915283203);
  _0x2dad96.bezierCurveTo(_0x536cc2 * 85.00567626953125, _0x536cc2 * 148.4431915283203, _0x536cc2 * 86.00567626953125, _0x536cc2 * 145.4431915283203, _0x536cc2 * 88.00567626953125, _0x536cc2 * 142.4431915283203);
  _0x2dad96.closePath();
  fill_path(_0x2dad96, _0x590e84[1]);
  return _0x416749;
}
function create_meat(_0x2d474b, _0x16f99d, _0x272433) {
  var _0x31909a = document.createElement("canvas");
  var _0x282fd5 = _0x31909a.getContext("2d");
  var _0x243eb0 = _0x2d474b * 55;
  var _0x1b95b6 = _0x2d474b * 55;
  var _0x2141d1 = _0x2d474b * 8;
  var _0x129325 = _0x2d474b * 4;
  _0x31909a.width = _0x243eb0;
  _0x31909a.height = _0x1b95b6;
  _0x282fd5.translate(_0x2d474b * -65, _0x2d474b * -55 + _0x2141d1);
  _0x282fd5.globalAlpha = 1;
  _0x282fd5.beginPath();
  _0x282fd5.moveTo(_0x2d474b * 95, _0x2d474b * 60);
  _0x282fd5.bezierCurveTo(_0x2d474b * 107, _0x2d474b * 62, _0x2d474b * 110, _0x2d474b * 73, _0x2d474b * 107, _0x2d474b * 79);
  _0x282fd5.bezierCurveTo(_0x2d474b * 104, _0x2d474b * 85, _0x2d474b * 85, _0x2d474b * 93, _0x2d474b * 81, _0x2d474b * 88);
  _0x282fd5.bezierCurveTo(_0x2d474b * 74, _0x2d474b * 80, _0x2d474b * 85, _0x2d474b * 60, _0x2d474b * 95, _0x2d474b * 60);
  _0x282fd5.closePath();
  fill_path(_0x282fd5, _0x272433[0], _0x272433[1], 3);
  _0x282fd5.globalAlpha = 1;
  _0x282fd5.beginPath();
  _0x282fd5.moveTo(_0x2d474b * 91, _0x2d474b * 70);
  _0x282fd5.bezierCurveTo(_0x2d474b * 91, _0x2d474b * 75, _0x2d474b * 100, _0x2d474b * 76, _0x2d474b * 100, _0x2d474b * 73);
  _0x282fd5.bezierCurveTo(_0x2d474b * 100, _0x2d474b * 69, _0x2d474b * 89, _0x2d474b * 65, _0x2d474b * 91, _0x2d474b * 70);
  _0x282fd5.closePath();
  fill_path(_0x282fd5, _0x272433[2], _0x272433[3], 3);
  return _0x31909a;
}
function create_hurt_spider(_0x262311, _0x5007be) {
  var _0x5589c7 = document.createElement("canvas");
  var _0x540fc9 = _0x5589c7.getContext("2d");
  _0x5589c7.width = _0x262311 * 238;
  _0x5589c7.height = _0x262311 * 230;
  _0x540fc9.translate(_0x262311 * -93, _0x262311 * -110);
  circle(_0x540fc9, _0x262311 * 213.5, _0x262311 * 256.75, _0x262311 * 75);
  fill_path(_0x540fc9, _0x5007be);
  circle(_0x540fc9, _0x262311 * 213.5, _0x262311 * 175.75, _0x262311 * 25);
  fill_path(_0x540fc9, _0x5007be);
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 156.5, _0x262311 * 137.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 170.5, _0x262311 * 173.75, _0x262311 * 195.5, _0x262311 * 177.75, _0x262311 * 209.5, _0x262311 * 177.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 217.5, _0x262311 * 178.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 251.5, _0x262311 * 177.75, _0x262311 * 263.5, _0x262311 * 153.75, _0x262311 * 270.5, _0x262311 * 140.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 130.5, _0x262311 * 124.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 153.5, _0x262311 * 185.75, _0x262311 * 198.5, _0x262311 * 185.75, _0x262311 * 213.5, _0x262311 * 185.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 214.5, _0x262311 * 183.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 265.5, _0x262311 * 192.75, _0x262311 * 293.5, _0x262311 * 141.75, _0x262311 * 297.5, _0x262311 * 124.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 107.5, _0x262311 * 213.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 151.5, _0x262311 * 190.75, _0x262311 * 198.5, _0x262311 * 184.75, _0x262311 * 210.5, _0x262311 * 184.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 212.5, _0x262311 * 187.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 258.5, _0x262311 * 182.75, _0x262311 * 286.5, _0x262311 * 194.75, _0x262311 * 314.5, _0x262311 * 206.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 102.5, _0x262311 * 258.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 142.5, _0x262311 * 200.75, _0x262311 * 193.5, _0x262311 * 194.75, _0x262311 * 211.5, _0x262311 * 185.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 214.5, _0x262311 * 192.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 276.5, _0x262311 * 194.75, _0x262311 * 306.5, _0x262311 * 233.75, _0x262311 * 316.5, _0x262311 * 246.75);
  _0x540fc9.lineWidth = _0x262311 * 17;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 219.5, _0x262311 * 158.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 226.5, _0x262311 * 159.75, _0x262311 * 227.5, _0x262311 * 147.75, _0x262311 * 219.5, _0x262311 * 145.75);
  _0x540fc9.closePath();
  _0x540fc9.lineWidth = _0x262311 * 10;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  _0x540fc9.beginPath();
  _0x540fc9.lineCap = "round";
  _0x540fc9.lineJoin = "round";
  _0x540fc9.moveTo(_0x262311 * 210.5, _0x262311 * 160.75);
  _0x540fc9.bezierCurveTo(_0x262311 * 203.5, _0x262311 * 159.75, _0x262311 * 199.5, _0x262311 * 146.75, _0x262311 * 210.5, _0x262311 * 145.75);
  _0x540fc9.closePath();
  _0x540fc9.lineWidth = _0x262311 * 10;
  _0x540fc9.strokeStyle = _0x5007be;
  _0x540fc9.stroke();
  return _0x5589c7;
}
function create_spider(_0x35338d, _0x137887) {
  var _0x27f7bc = document.createElement("canvas");
  var _0x1425db = _0x27f7bc.getContext("2d");
  _0x27f7bc.width = _0x35338d * 238;
  _0x27f7bc.height = _0x35338d * 230;
  _0x1425db.translate(_0x35338d * -93, _0x35338d * -110 + _0x35338d * 5);
  _0x1425db.globalAlpha = 0.3;
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 256.75, _0x35338d * 75);
  fill_path(_0x1425db, _0x137887[5]);
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 175.75, _0x35338d * 25);
  fill_path(_0x1425db, _0x137887[5]);
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 156.5, _0x35338d * 137.75);
  _0x1425db.bezierCurveTo(_0x35338d * 170.5, _0x35338d * 173.75, _0x35338d * 195.5, _0x35338d * 177.75, _0x35338d * 209.5, _0x35338d * 177.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 217.5, _0x35338d * 178.75);
  _0x1425db.bezierCurveTo(_0x35338d * 251.5, _0x35338d * 177.75, _0x35338d * 263.5, _0x35338d * 153.75, _0x35338d * 270.5, _0x35338d * 140.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 130.5, _0x35338d * 124.75);
  _0x1425db.bezierCurveTo(_0x35338d * 153.5, _0x35338d * 185.75, _0x35338d * 198.5, _0x35338d * 185.75, _0x35338d * 213.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 183.75);
  _0x1425db.bezierCurveTo(_0x35338d * 265.5, _0x35338d * 192.75, _0x35338d * 293.5, _0x35338d * 141.75, _0x35338d * 297.5, _0x35338d * 124.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 107.5, _0x35338d * 213.75);
  _0x1425db.bezierCurveTo(_0x35338d * 151.5, _0x35338d * 190.75, _0x35338d * 198.5, _0x35338d * 184.75, _0x35338d * 210.5, _0x35338d * 184.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 212.5, _0x35338d * 187.75);
  _0x1425db.bezierCurveTo(_0x35338d * 258.5, _0x35338d * 182.75, _0x35338d * 286.5, _0x35338d * 194.75, _0x35338d * 314.5, _0x35338d * 206.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 102.5, _0x35338d * 258.75);
  _0x1425db.bezierCurveTo(_0x35338d * 142.5, _0x35338d * 200.75, _0x35338d * 193.5, _0x35338d * 194.75, _0x35338d * 211.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 192.75);
  _0x1425db.bezierCurveTo(_0x35338d * 276.5, _0x35338d * 194.75, _0x35338d * 306.5, _0x35338d * 233.75, _0x35338d * 316.5, _0x35338d * 246.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[5];
  _0x1425db.stroke();
  _0x1425db.translate(0, -5);
  _0x1425db.globalAlpha = 1;
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 256.75, _0x35338d * 75);
  fill_path(_0x1425db, _0x137887[3]);
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 175.75, _0x35338d * 25);
  fill_path(_0x1425db, _0x137887[3]);
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 219.5, _0x35338d * 158.75);
  _0x1425db.bezierCurveTo(_0x35338d * 226.5, _0x35338d * 159.75, _0x35338d * 227.5, _0x35338d * 147.75, _0x35338d * 219.5, _0x35338d * 145.75);
  _0x1425db.closePath();
  _0x1425db.lineWidth = _0x35338d * 10;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 210.5, _0x35338d * 160.75);
  _0x1425db.bezierCurveTo(_0x35338d * 203.5, _0x35338d * 159.75, _0x35338d * 199.5, _0x35338d * 146.75, _0x35338d * 210.5, _0x35338d * 145.75);
  _0x1425db.closePath();
  _0x1425db.lineWidth = _0x35338d * 10;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 219.5, _0x35338d * 158.75);
  _0x1425db.bezierCurveTo(_0x35338d * 226.5, _0x35338d * 159.75, _0x35338d * 227.5, _0x35338d * 147.75, _0x35338d * 219.5, _0x35338d * 145.75);
  _0x1425db.closePath();
  _0x1425db.fillStyle = _0x137887[0];
  _0x1425db.fill();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 210.5, _0x35338d * 160.75);
  _0x1425db.bezierCurveTo(_0x35338d * 203.5, _0x35338d * 159.75, _0x35338d * 199.5, _0x35338d * 146.75, _0x35338d * 210.5, _0x35338d * 145.75);
  _0x1425db.closePath();
  _0x1425db.fillStyle = _0x137887[0];
  _0x1425db.fill();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 156.5, _0x35338d * 137.75);
  _0x1425db.bezierCurveTo(_0x35338d * 170.5, _0x35338d * 173.75, _0x35338d * 195.5, _0x35338d * 177.75, _0x35338d * 209.5, _0x35338d * 177.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 217.5, _0x35338d * 178.75);
  _0x1425db.bezierCurveTo(_0x35338d * 251.5, _0x35338d * 177.75, _0x35338d * 263.5, _0x35338d * 153.75, _0x35338d * 270.5, _0x35338d * 140.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 130.5, _0x35338d * 124.75);
  _0x1425db.bezierCurveTo(_0x35338d * 153.5, _0x35338d * 185.75, _0x35338d * 198.5, _0x35338d * 185.75, _0x35338d * 213.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 183.75);
  _0x1425db.bezierCurveTo(_0x35338d * 265.5, _0x35338d * 192.75, _0x35338d * 293.5, _0x35338d * 141.75, _0x35338d * 297.5, _0x35338d * 124.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 107.5, _0x35338d * 213.75);
  _0x1425db.bezierCurveTo(_0x35338d * 151.5, _0x35338d * 190.75, _0x35338d * 198.5, _0x35338d * 184.75, _0x35338d * 210.5, _0x35338d * 184.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 212.5, _0x35338d * 187.75);
  _0x1425db.bezierCurveTo(_0x35338d * 258.5, _0x35338d * 182.75, _0x35338d * 286.5, _0x35338d * 194.75, _0x35338d * 314.5, _0x35338d * 206.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 102.5, _0x35338d * 258.75);
  _0x1425db.bezierCurveTo(_0x35338d * 142.5, _0x35338d * 200.75, _0x35338d * 193.5, _0x35338d * 194.75, _0x35338d * 211.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 192.75);
  _0x1425db.bezierCurveTo(_0x35338d * 276.5, _0x35338d * 194.75, _0x35338d * 306.5, _0x35338d * 233.75, _0x35338d * 316.5, _0x35338d * 246.75);
  _0x1425db.lineWidth = _0x35338d * 17;
  _0x1425db.strokeStyle = _0x137887[3];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 156.5, _0x35338d * 137.75);
  _0x1425db.bezierCurveTo(_0x35338d * 170.5, _0x35338d * 173.75, _0x35338d * 195.5, _0x35338d * 177.75, _0x35338d * 209.5, _0x35338d * 177.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 217.5, _0x35338d * 178.75);
  _0x1425db.bezierCurveTo(_0x35338d * 251.5, _0x35338d * 177.75, _0x35338d * 263.5, _0x35338d * 153.75, _0x35338d * 270.5, _0x35338d * 140.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 130.5, _0x35338d * 124.75);
  _0x1425db.bezierCurveTo(_0x35338d * 153.5, _0x35338d * 185.75, _0x35338d * 198.5, _0x35338d * 185.75, _0x35338d * 213.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 183.75);
  _0x1425db.bezierCurveTo(_0x35338d * 265.5, _0x35338d * 192.75, _0x35338d * 293.5, _0x35338d * 141.75, _0x35338d * 297.5, _0x35338d * 124.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 107.5, _0x35338d * 213.75);
  _0x1425db.bezierCurveTo(_0x35338d * 151.5, _0x35338d * 190.75, _0x35338d * 198.5, _0x35338d * 184.75, _0x35338d * 210.5, _0x35338d * 184.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 212.5, _0x35338d * 187.75);
  _0x1425db.bezierCurveTo(_0x35338d * 258.5, _0x35338d * 182.75, _0x35338d * 286.5, _0x35338d * 194.75, _0x35338d * 314.5, _0x35338d * 206.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 102.5, _0x35338d * 258.75);
  _0x1425db.bezierCurveTo(_0x35338d * 142.5, _0x35338d * 200.75, _0x35338d * 193.5, _0x35338d * 194.75, _0x35338d * 211.5, _0x35338d * 185.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  _0x1425db.beginPath();
  _0x1425db.lineCap = "round";
  _0x1425db.lineJoin = "round";
  _0x1425db.moveTo(_0x35338d * 214.5, _0x35338d * 192.75);
  _0x1425db.bezierCurveTo(_0x35338d * 276.5, _0x35338d * 194.75, _0x35338d * 306.5, _0x35338d * 233.75, _0x35338d * 316.5, _0x35338d * 246.75);
  _0x1425db.lineWidth = _0x35338d * 8;
  _0x1425db.strokeStyle = _0x137887[0];
  _0x1425db.stroke();
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 256.75, _0x35338d * 70);
  fill_path(_0x1425db, _0x137887[0]);
  circle(_0x1425db, _0x35338d * 213.5, _0x35338d * 175.75, _0x35338d * 20);
  fill_path(_0x1425db, _0x137887[0]);
  circle(_0x1425db, _0x35338d * 222, _0x35338d * 166, _0x35338d * 5);
  _0x1425db.fillStyle = _0x137887[2];
  _0x1425db.fill();
  circle(_0x1425db, _0x35338d * 205, _0x35338d * 166, _0x35338d * 5);
  _0x1425db.fillStyle = _0x137887[2];
  _0x1425db.fill();
  circle(_0x1425db, _0x35338d * 206.2, _0x35338d * 167, _0x35338d * 2.5);
  _0x1425db.fillStyle = _0x137887[4];
  _0x1425db.fill();
  circle(_0x1425db, _0x35338d * 223.2, _0x35338d * 167, _0x35338d * 2.5);
  _0x1425db.fillStyle = _0x137887[4];
  _0x1425db.fill();
  _0x1425db.save();
  _0x1425db.translate(_0x35338d * 213.5, _0x35338d * 293.75);
  _0x1425db.rotate(0.76);
  round_rect(_0x1425db, _0x35338d * -22, _0x35338d * -21, _0x35338d * 44, _0x35338d * 42, _0x35338d * 6);
  _0x1425db.restore();
  _0x1425db.fillStyle = _0x137887[1];
  _0x1425db.fill();
  _0x1425db.save();
  _0x1425db.translate(_0x35338d * 212.5, _0x35338d * 258.25);
  _0x1425db.rotate(0.8);
  round_rect(_0x1425db, _0x35338d * -15, _0x35338d * -14.5, _0x35338d * 30, _0x35338d * 29, _0x35338d * 6);
  _0x1425db.restore();
  _0x1425db.fillStyle = _0x137887[1];
  _0x1425db.fill();
  return _0x27f7bc;
}
function create_web(_0x367212, _0x33c6bb) {
  var _0x1cc39a = document.createElement("canvas");
  var _0xe664bd = _0x1cc39a.getContext("2d");
  _0x1cc39a.width = _0x367212 * 450;
  _0x1cc39a.height = _0x367212 * 470;
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 226.5, _0x367212 * 91.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 254.5, _0x367212 * 115.546875, _0x367212 * 261.5, _0x367212 * 115.546875, _0x367212 * 294.5, _0x367212 * 109.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 299.5, _0x367212 * 141.546875, _0x367212 * 315.5, _0x367212 * 151.546875, _0x367212 * 344.5, _0x367212 * 158.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 330.5, _0x367212 * 195.546875, _0x367212 * 341.5, _0x367212 * 207.546875, _0x367212 * 361.5, _0x367212 * 226.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 331.5, _0x367212 * 251.546875, _0x367212 * 335.5, _0x367212 * 270.546875, _0x367212 * 342.5, _0x367212 * 295.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 300.5, _0x367212 * 296.546875, _0x367212 * 293.5, _0x367212 * 325.546875, _0x367212 * 292.5, _0x367212 * 344.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 257.5, _0x367212 * 326.546875, _0x367212 * 242.5, _0x367212 * 338.546875, _0x367212 * 224.5, _0x367212 * 361.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 200.5, _0x367212 * 329.546875, _0x367212 * 180.5, _0x367212 * 334.546875, _0x367212 * 155.5, _0x367212 * 341.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 146.5, _0x367212 * 307.546875, _0x367212 * 140.5, _0x367212 * 302.546875, _0x367212 * 107.5, _0x367212 * 292.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 117.5, _0x367212 * 253.546875, _0x367212 * 109.5, _0x367212 * 244.546875, _0x367212 * 89.5, _0x367212 * 224.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 118.5, _0x367212 * 191.546875, _0x367212 * 114.5, _0x367212 * 182.546875, _0x367212 * 108.5, _0x367212 * 156.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 143.5, _0x367212 * 149.546875, _0x367212 * 150.5, _0x367212 * 136.546875, _0x367212 * 157.5, _0x367212 * 106.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 202.5, _0x367212 * 120.546875, _0x367212 * 211.5, _0x367212 * 103.546875, _0x367212 * 228.5, _0x367212 * 91.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 224.5, _0x367212 * 129.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 247.5, _0x367212 * 147.546875, _0x367212 * 252.5, _0x367212 * 143.546875, _0x367212 * 274.5, _0x367212 * 141.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 279.5, _0x367212 * 163.546875, _0x367212 * 289.5, _0x367212 * 168.546875, _0x367212 * 311.5, _0x367212 * 178.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 301.5, _0x367212 * 199.546875, _0x367212 * 307.5, _0x367212 * 213.546875, _0x367212 * 323.5, _0x367212 * 226.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 303.5, _0x367212 * 240.546875, _0x367212 * 303.5, _0x367212 * 255.546875, _0x367212 * 312.5, _0x367212 * 275.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 281.5, _0x367212 * 278.546875, _0x367212 * 276.5, _0x367212 * 291.546875, _0x367212 * 272.5, _0x367212 * 313.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 248.5, _0x367212 * 301.546875, _0x367212 * 239.5, _0x367212 * 310.546875, _0x367212 * 224.5, _0x367212 * 324.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 211.5, _0x367212 * 304.546875, _0x367212 * 199.5, _0x367212 * 301.546875, _0x367212 * 176.5, _0x367212 * 309.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 165.5, _0x367212 * 276.546875, _0x367212 * 159.5, _0x367212 * 275.546875, _0x367212 * 138.5, _0x367212 * 274.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 148.5, _0x367212 * 248.546875, _0x367212 * 140.5, _0x367212 * 237.546875, _0x367212 * 125.5, _0x367212 * 225.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 145.5, _0x367212 * 205.546875, _0x367212 * 146.5, _0x367212 * 195.546875, _0x367212 * 142.5, _0x367212 * 176.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 173.5, _0x367212 * 164.546875, _0x367212 * 173.5, _0x367212 * 155.546875, _0x367212 * 178.5, _0x367212 * 140.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 214.5, _0x367212 * 143.546875, _0x367212 * 214.5, _0x367212 * 135.546875, _0x367212 * 226.5, _0x367212 * 129.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 224.5, _0x367212 * 160.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 236.5, _0x367212 * 168.546875, _0x367212 * 239.5, _0x367212 * 168.546875, _0x367212 * 258.5, _0x367212 * 168.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 261.5, _0x367212 * 185.546875, _0x367212 * 268.5, _0x367212 * 187.546875, _0x367212 * 282.5, _0x367212 * 192.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 277.5, _0x367212 * 208.546875, _0x367212 * 283.5, _0x367212 * 216.546875, _0x367212 * 289.5, _0x367212 * 228.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 277.5, _0x367212 * 243.546875, _0x367212 * 280.5, _0x367212 * 253.546875, _0x367212 * 281.5, _0x367212 * 260.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 264.5, _0x367212 * 260.546875, _0x367212 * 259.5, _0x367212 * 269.546875, _0x367212 * 256.5, _0x367212 * 283.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 244.5, _0x367212 * 276.546875, _0x367212 * 232.5, _0x367212 * 283.546875, _0x367212 * 223.5, _0x367212 * 291.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 213.5, _0x367212 * 276.546875, _0x367212 * 205.5, _0x367212 * 278.546875, _0x367212 * 190.5, _0x367212 * 281.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 181.5, _0x367212 * 262.546875, _0x367212 * 173.5, _0x367212 * 259.546875, _0x367212 * 165.5, _0x367212 * 258.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 169.5, _0x367212 * 239.546875, _0x367212 * 167.5, _0x367212 * 233.546875, _0x367212 * 157.5, _0x367212 * 225.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 169.5, _0x367212 * 208.546875, _0x367212 * 170.5, _0x367212 * 203.546875, _0x367212 * 168.5, _0x367212 * 192.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 181.5, _0x367212 * 187.546875, _0x367212 * 188.5, _0x367212 * 179.546875, _0x367212 * 192.5, _0x367212 * 168.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 216.5, _0x367212 * 170.546875, _0x367212 * 218.5, _0x367212 * 163.546875, _0x367212 * 225.5, _0x367212 * 160.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 205.5, _0x367212 * 194.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 216.5, _0x367212 * 192.546875, _0x367212 * 219.5, _0x367212 * 191.546875, _0x367212 * 225.5, _0x367212 * 185.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 232.5, _0x367212 * 193.546875, _0x367212 * 237.5, _0x367212 * 191.546875, _0x367212 * 246.5, _0x367212 * 192.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 249.5, _0x367212 * 202.546875, _0x367212 * 253.5, _0x367212 * 205.546875, _0x367212 * 258.5, _0x367212 * 207.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 259.5, _0x367212 * 222.546875, _0x367212 * 256.5, _0x367212 * 223.546875, _0x367212 * 265.5, _0x367212 * 226.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 256.5, _0x367212 * 231.546875, _0x367212 * 255.5, _0x367212 * 241.546875, _0x367212 * 259.5, _0x367212 * 248.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 250.5, _0x367212 * 245.546875, _0x367212 * 245.5, _0x367212 * 252.546875, _0x367212 * 243.5, _0x367212 * 260.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 234.5, _0x367212 * 256.546875, _0x367212 * 229.5, _0x367212 * 258.546875, _0x367212 * 223.5, _0x367212 * 265.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 218.5, _0x367212 * 255.546875, _0x367212 * 213.5, _0x367212 * 257.546875, _0x367212 * 204.5, _0x367212 * 261.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 203.5, _0x367212 * 251.546875, _0x367212 * 198.5, _0x367212 * 248.546875, _0x367212 * 189.5, _0x367212 * 244.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 194.5, _0x367212 * 237.546875, _0x367212 * 192.5, _0x367212 * 231.546875, _0x367212 * 184.5, _0x367212 * 225.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 191.5, _0x367212 * 211.546875, _0x367212 * 192.5, _0x367212 * 209.546875, _0x367212 * 190.5, _0x367212 * 204.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 200.5, _0x367212 * 204.546875, _0x367212 * 204.5, _0x367212 * 198.546875, _0x367212 * 207.5, _0x367212 * 194.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 149.5, _0x367212 * 93.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 287.5, _0x367212 * 332.546875, _0x367212 * 226, _0x367212 * 225.546875, _0x367212 * 302.5, _0x367212 * 357.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 224.5, _0x367212 * 66.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 224.5, _0x367212 * 223.546875, _0x367212 * 224.5, _0x367212 * 223.546875, _0x367212 * 224.5, _0x367212 * 380.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 302.5, _0x367212 * 88.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 222.5, _0x367212 * 227.546875, _0x367212 * 222.5, _0x367212 * 227.546875, _0x367212 * 142.5, _0x367212 * 366.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 361.5, _0x367212 * 147.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 223, _0x367212 * 226.546875, _0x367212 * 223, _0x367212 * 226.546875, _0x367212 * 84.5, _0x367212 * 305.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 379.5, _0x367212 * 225.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 221, _0x367212 * 225.546875, _0x367212 * 221, _0x367212 * 225.546875, _0x367212 * 62.5, _0x367212 * 225.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  _0xe664bd.beginPath();
  _0xe664bd.lineCap = "round";
  _0xe664bd.lineJoin = "round";
  _0xe664bd.moveTo(_0x367212 * 90.5, _0x367212 * 147.546875);
  _0xe664bd.bezierCurveTo(_0x367212 * 226.5, _0x367212 * 226.546875, _0x367212 * 226.5, _0x367212 * 226.546875, _0x367212 * 362.5, _0x367212 * 305.546875);
  _0xe664bd.closePath();
  fill_path(_0xe664bd, undefined, _0x33c6bb[0], 4);
  return _0x1cc39a;
}
function create_dead_box(_0x25f61c, _0xe3afb1, _0x274482) {
  var _0x132de6 = document.createElement("canvas");
  var _0x47286f = _0x132de6.getContext("2d");
  _0x132de6.width = _0x25f61c * 400;
  _0x132de6.height = _0x25f61c * 400;
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 202.5, _0x25f61c * 147.5);
  round_rect(_0x47286f, _0x25f61c * -96.5, _0x25f61c * -21.5, _0x25f61c * 193, _0x25f61c * 193, _0x25f61c * 0);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[0], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 202.5, _0x25f61c * 190.5);
  round_rect(_0x47286f, _0x25f61c * 96.5, _0x25f61c * -21.5, _0x25f61c * -193, _0x25f61c * 43, _0x25f61c * 0);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[2], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 202.5, _0x25f61c * 233.5);
  round_rect(_0x47286f, _0x25f61c * -96.5, _0x25f61c * -20.5, _0x25f61c * 193, _0x25f61c * 41, _0x25f61c * 0);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 202.5, _0x25f61c * 275);
  round_rect(_0x47286f, _0x25f61c * 96.5, _0x25f61c * -21, _0x25f61c * -193, _0x25f61c * 42, _0x25f61c * 0);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[0], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 201, _0x25f61c * 212);
  _0x47286f.rotate(8.64);
  round_rect(_0x47286f, _0x25f61c * -116, _0x25f61c * -22, _0x25f61c * 232, _0x25f61c * 44, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 203.5, _0x25f61c * 121.5);
  round_rect(_0x47286f, _0x25f61c * -115.5, _0x25f61c * -20.5, _0x25f61c * 231, _0x25f61c * 41, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 203.5, _0x25f61c * 299);
  round_rect(_0x47286f, _0x25f61c * -115.5, _0x25f61c * -20, _0x25f61c * 231, _0x25f61c * 40, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 298.5, _0x25f61c * 210);
  round_rect(_0x47286f, _0x25f61c * -20.5, _0x25f61c * -109, _0x25f61c * 41, _0x25f61c * 218, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 108.5, _0x25f61c * 210);
  round_rect(_0x47286f, _0x25f61c * -20.5, _0x25f61c * -109, _0x25f61c * 41, _0x25f61c * 218, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 204, _0x25f61c * 121.5);
  round_rect(_0x47286f, _0x25f61c * -92, _0x25f61c * -9.5, _0x25f61c * 184, _0x25f61c * 19, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[3], _0x25f61c * 10);
  _0x47286f.save();
  _0x47286f.translate(_0x25f61c * 197, _0x25f61c * 299);
  round_rect(_0x47286f, _0x25f61c * 85, _0x25f61c * -9, _0x25f61c * -170, _0x25f61c * 18, _0x25f61c * 10);
  _0x47286f.restore();
  fill_path(_0x47286f, _0xe3afb1[3], _0xe3afb1[3], _0x25f61c * 10);
  _0x47286f.beginPath();
  _0x47286f.lineCap = "round";
  _0x47286f.lineJoin = "round";
  _0x47286f.moveTo(_0x25f61c * 94, _0x25f61c * 317);
  _0x47286f.bezierCurveTo(_0x25f61c * 110.5, _0x25f61c * 299.5, _0x25f61c * 110.5, _0x25f61c * 299.5, _0x25f61c * 127, _0x25f61c * 282);
  _0x47286f.closePath();
  fill_path(_0x47286f, undefined, _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.beginPath();
  _0x47286f.lineCap = "round";
  _0x47286f.lineJoin = "round";
  _0x47286f.moveTo(_0x25f61c * 279, _0x25f61c * 142);
  _0x47286f.bezierCurveTo(_0x25f61c * 296.5, _0x25f61c * 125.5, _0x25f61c * 296.5, _0x25f61c * 125.5, _0x25f61c * 314, _0x25f61c * 109);
  _0x47286f.closePath();
  fill_path(_0x47286f, undefined, _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.beginPath();
  _0x47286f.lineCap = "round";
  _0x47286f.lineJoin = "round";
  _0x47286f.moveTo(_0x25f61c * 93, _0x25f61c * 106);
  _0x47286f.bezierCurveTo(_0x25f61c * 110.5, _0x25f61c * 124, _0x25f61c * 110.5, _0x25f61c * 124, _0x25f61c * 128, _0x25f61c * 142);
  _0x47286f.closePath();
  fill_path(_0x47286f, undefined, _0xe3afb1[1], _0x25f61c * 12);
  _0x47286f.beginPath();
  _0x47286f.lineCap = "round";
  _0x47286f.lineJoin = "round";
  _0x47286f.moveTo(_0x25f61c * 281, _0x25f61c * 282);
  _0x47286f.bezierCurveTo(_0x25f61c * 296, _0x25f61c * 297.5, _0x25f61c * 296, _0x25f61c * 297.5, _0x25f61c * 311, _0x25f61c * 313);
  _0x47286f.closePath();
  fill_path(_0x47286f, undefined, _0xe3afb1[1], _0x25f61c * 12);
  if (_0x274482 == 0) {
    _0x47286f.scale(2, 2);
    _0x47286f.translate(_0x25f61c * -7, _0x25f61c * 55);
    _0x47286f.rotate(-0.5);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 60, _0x25f61c * 47);
    _0x47286f.bezierCurveTo(_0x25f61c * 81, _0x25f61c * 46, _0x25f61c * 85, _0x25f61c * 47, _0x25f61c * 83, _0x25f61c * 63);
    _0x47286f.bezierCurveTo(_0x25f61c * 83, _0x25f61c * 72, _0x25f61c * 83, _0x25f61c * 75, _0x25f61c * 72, _0x25f61c * 73);
    _0x47286f.bezierCurveTo(_0x25f61c * 68, _0x25f61c * 80, _0x25f61c * 69, _0x25f61c * 82, _0x25f61c * 66, _0x25f61c * 73);
    _0x47286f.bezierCurveTo(_0x25f61c * 62, _0x25f61c * 81, _0x25f61c * 61, _0x25f61c * 82, _0x25f61c * 59, _0x25f61c * 73);
    _0x47286f.bezierCurveTo(_0x25f61c * 54, _0x25f61c * 81, _0x25f61c * 55, _0x25f61c * 81, _0x25f61c * 52, _0x25f61c * 74);
    _0x47286f.bezierCurveTo(_0x25f61c * 38, _0x25f61c * 76, _0x25f61c * 41, _0x25f61c * 74, _0x25f61c * 40, _0x25f61c * 66);
    _0x47286f.bezierCurveTo(_0x25f61c * 38, _0x25f61c * 45, _0x25f61c * 39, _0x25f61c * 49, _0x25f61c * 59, _0x25f61c * 47);
    _0x47286f.closePath();
    fill_path(_0x47286f, _0xe3afb1[4], _0xe3afb1[4], _0x25f61c * 5);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 68, _0x25f61c * 54);
    _0x47286f.bezierCurveTo(_0x25f61c * 75, _0x25f61c * 54, _0x25f61c * 77, _0x25f61c * 62, _0x25f61c * 71, _0x25f61c * 64);
    _0x47286f.bezierCurveTo(_0x25f61c * 62, _0x25f61c * 65, _0x25f61c * 63, _0x25f61c * 54, _0x25f61c * 68, _0x25f61c * 54);
    _0x47286f.closePath();
    fill_path(_0x47286f, _0xe3afb1[3]);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 50, _0x25f61c * 55);
    _0x47286f.bezierCurveTo(_0x25f61c * 57, _0x25f61c * 55, _0x25f61c * 58, _0x25f61c * 65, _0x25f61c * 52, _0x25f61c * 65);
    _0x47286f.bezierCurveTo(_0x25f61c * 44, _0x25f61c * 66, _0x25f61c * 44, _0x25f61c * 54, _0x25f61c * 50, _0x25f61c * 55);
    _0x47286f.closePath();
    fill_path(_0x47286f, _0xe3afb1[3]);
  } else if (_0x274482 == 1) {
    _0x47286f.scale(0.6, 0.6);
    _0x47286f.translate(_0x25f61c * 185, _0x25f61c * 165);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 108, _0x25f61c * 56);
    _0x47286f.bezierCurveTo(_0x25f61c * 136, _0x25f61c * 58, _0x25f61c * 203, _0x25f61c * 69, _0x25f61c * 234, _0x25f61c * 75);
    _0x47286f.bezierCurveTo(_0x25f61c * 246, _0x25f61c * 77, _0x25f61c * 247, _0x25f61c * 78, _0x25f61c * 245, _0x25f61c * 90);
    _0x47286f.bezierCurveTo(_0x25f61c * 238, _0x25f61c * 143, _0x25f61c * 228, _0x25f61c * 197, _0x25f61c * 214, _0x25f61c * 259);
    _0x47286f.bezierCurveTo(_0x25f61c * 212, _0x25f61c * 267, _0x25f61c * 209, _0x25f61c * 270, _0x25f61c * 189, _0x25f61c * 268);
    _0x47286f.bezierCurveTo(_0x25f61c * 142, _0x25f61c * 264, _0x25f61c * 106, _0x25f61c * 260, _0x25f61c * 75, _0x25f61c * 253);
    _0x47286f.bezierCurveTo(_0x25f61c * 60, _0x25f61c * 250, _0x25f61c * 64, _0x25f61c * 250, _0x25f61c * 66, _0x25f61c * 221);
    _0x47286f.bezierCurveTo(_0x25f61c * 71, _0x25f61c * 168, _0x25f61c * 87, _0x25f61c * 95, _0x25f61c * 98, _0x25f61c * 67);
    _0x47286f.bezierCurveTo(_0x25f61c * 101, _0x25f61c * 57, _0x25f61c * 103, _0x25f61c * 56, _0x25f61c * 106, _0x25f61c * 56);
    _0x47286f.closePath();
    fill_path(_0x47286f, _0xe3afb1[4], _0xe3afb1[4], _0x25f61c * 20);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 112, _0x25f61c * 72);
    _0x47286f.bezierCurveTo(_0x25f61c * 132, _0x25f61c * 73, _0x25f61c * 227, _0x25f61c * 85, _0x25f61c * 226, _0x25f61c * 91);
    _0x47286f.bezierCurveTo(_0x25f61c * 231, _0x25f61c * 89, _0x25f61c * 217, _0x25f61c * 196, _0x25f61c * 200, _0x25f61c * 250);
    _0x47286f.bezierCurveTo(_0x25f61c * 196, _0x25f61c * 254, _0x25f61c * 175, _0x25f61c * 249, _0x25f61c * 166, _0x25f61c * 249);
    _0x47286f.bezierCurveTo(_0x25f61c * 91, _0x25f61c * 241, _0x25f61c * 82, _0x25f61c * 236, _0x25f61c * 83, _0x25f61c * 232);
    _0x47286f.bezierCurveTo(_0x25f61c * 90, _0x25f61c * 144, _0x25f61c * 108, _0x25f61c * 71, _0x25f61c * 111, _0x25f61c * 72);
    _0x47286f.closePath();
    fill_path(_0x47286f, undefined, _0xe3afb1[0], _0x25f61c * 13);
    _0x47286f.beginPath();
    _0x47286f.lineCap = "round";
    _0x47286f.lineJoin = "round";
    _0x47286f.moveTo(_0x25f61c * 132, _0x25f61c * 117);
    _0x47286f.bezierCurveTo(_0x25f61c * 171, _0x25f61c * 86, _0x25f61c * 191, _0x25f61c * 101, _0x25f61c * 188, _0x25f61c * 134);
    _0x47286f.bezierCurveTo(_0x25f61c * 185, _0x25f61c * 154, _0x25f61c * 170, _0x25f61c * 158, _0x25f61c * 153, _0x25f61c * 158);
    _0x47286f.bezierCurveTo(_0x25f61c * 143, _0x25f61c * 172, _0x25f61c * 146, _0x25f61c * 180, _0x25f61c * 147, _0x25f61c * 193);
    fill_path(_0x47286f, undefined, _0xe3afb1[0], _0x25f61c * 20);
    circle(_0x47286f, _0x25f61c * 142, _0x25f61c * 221, _0x25f61c * 16.1245154965971);
    fill_path(_0x47286f, _0xe3afb1[0]);
  }
  return _0x132de6;
}
function create_hurt_dead_box(_0x49431c, _0x201e0b) {
  var _0x27c3a2 = document.createElement("canvas");
  var _0x57d3d7 = _0x27c3a2.getContext("2d");
  _0x27c3a2.width = _0x49431c * 400;
  _0x27c3a2.height = _0x49431c * 400;
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 202.5, _0x49431c * 147.5);
  round_rect(_0x57d3d7, _0x49431c * -96.5, _0x49431c * -21.5, _0x49431c * 193, _0x49431c * 43, _0x49431c * 0);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 202.5, _0x49431c * 190.5);
  round_rect(_0x57d3d7, _0x49431c * 96.5, _0x49431c * -21.5, _0x49431c * -193, _0x49431c * 43, _0x49431c * 0);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 202.5, _0x49431c * 233.5);
  round_rect(_0x57d3d7, _0x49431c * -96.5, _0x49431c * -20.5, _0x49431c * 193, _0x49431c * 41, _0x49431c * 0);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 202.5, _0x49431c * 275);
  round_rect(_0x57d3d7, _0x49431c * 96.5, _0x49431c * -21, _0x49431c * -193, _0x49431c * 42, _0x49431c * 0);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 203.5, _0x49431c * 121.5);
  round_rect(_0x57d3d7, _0x49431c * -115.5, _0x49431c * -20.5, _0x49431c * 231, _0x49431c * 41, _0x49431c * 10);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 203.5, _0x49431c * 299);
  round_rect(_0x57d3d7, _0x49431c * -115.5, _0x49431c * -20, _0x49431c * 231, _0x49431c * 40, _0x49431c * 10);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 298.5, _0x49431c * 210);
  round_rect(_0x57d3d7, _0x49431c * -20.5, _0x49431c * -109, _0x49431c * 41, _0x49431c * 218, _0x49431c * 10);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  _0x57d3d7.save();
  _0x57d3d7.translate(_0x49431c * 108.5, _0x49431c * 210);
  round_rect(_0x57d3d7, _0x49431c * -20.5, _0x49431c * -109, _0x49431c * 41, _0x49431c * 218, _0x49431c * 10);
  _0x57d3d7.restore();
  fill_path(_0x57d3d7, _0x201e0b[0], _0x201e0b[0], _0x49431c * 12);
  return _0x27c3a2;
}
function create_dead_box_ui(_0x48edf0, _0x188129) {
  var _0x4b05ab = document.createElement("canvas");
  var _0x1a53a3 = _0x4b05ab.getContext("2d");
  _0x4b05ab.width = _0x48edf0 * 650;
  _0x4b05ab.height = _0x48edf0 * 650;
  _0x1a53a3.scale(1.9, 1.9);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 202.5, _0x48edf0 * 147.5);
  round_rect(_0x1a53a3, _0x48edf0 * -96.5, _0x48edf0 * -21.5, _0x48edf0 * 193, _0x48edf0 * 193, _0x48edf0 * 0);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[4], _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 203.5, _0x48edf0 * 121.5);
  round_rect(_0x1a53a3, _0x48edf0 * -115.5, _0x48edf0 * -20.5, _0x48edf0 * 231, _0x48edf0 * 41, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 203.5, _0x48edf0 * 299);
  round_rect(_0x1a53a3, _0x48edf0 * -115.5, _0x48edf0 * -20, _0x48edf0 * 231, _0x48edf0 * 40, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 298.5, _0x48edf0 * 210);
  round_rect(_0x1a53a3, _0x48edf0 * -20.5, _0x48edf0 * -109, _0x48edf0 * 41, _0x48edf0 * 218, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 108.5, _0x48edf0 * 210);
  round_rect(_0x1a53a3, _0x48edf0 * -20.5, _0x48edf0 * -109, _0x48edf0 * 41, _0x48edf0 * 218, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 204, _0x48edf0 * 121.5);
  round_rect(_0x1a53a3, _0x48edf0 * -92, _0x48edf0 * -9.5, _0x48edf0 * 184, _0x48edf0 * 19, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[3], _0x48edf0 * 10);
  _0x1a53a3.save();
  _0x1a53a3.translate(_0x48edf0 * 197, _0x48edf0 * 299);
  round_rect(_0x1a53a3, _0x48edf0 * 85, _0x48edf0 * -9, _0x48edf0 * -170, _0x48edf0 * 18, _0x48edf0 * 10);
  _0x1a53a3.restore();
  fill_path(_0x1a53a3, _0x188129[3], _0x188129[3], _0x48edf0 * 10);
  _0x1a53a3.beginPath();
  _0x1a53a3.lineCap = "round";
  _0x1a53a3.lineJoin = "round";
  _0x1a53a3.moveTo(_0x48edf0 * 94, _0x48edf0 * 317);
  _0x1a53a3.bezierCurveTo(_0x48edf0 * 110.5, _0x48edf0 * 299.5, _0x48edf0 * 110.5, _0x48edf0 * 299.5, _0x48edf0 * 127, _0x48edf0 * 282);
  _0x1a53a3.closePath();
  fill_path(_0x1a53a3, undefined, _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.beginPath();
  _0x1a53a3.lineCap = "round";
  _0x1a53a3.lineJoin = "round";
  _0x1a53a3.moveTo(_0x48edf0 * 279, _0x48edf0 * 142);
  _0x1a53a3.bezierCurveTo(_0x48edf0 * 296.5, _0x48edf0 * 125.5, _0x48edf0 * 296.5, _0x48edf0 * 125.5, _0x48edf0 * 314, _0x48edf0 * 109);
  _0x1a53a3.closePath();
  fill_path(_0x1a53a3, undefined, _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.beginPath();
  _0x1a53a3.lineCap = "round";
  _0x1a53a3.lineJoin = "round";
  _0x1a53a3.moveTo(_0x48edf0 * 93, _0x48edf0 * 106);
  _0x1a53a3.bezierCurveTo(_0x48edf0 * 110.5, _0x48edf0 * 124, _0x48edf0 * 110.5, _0x48edf0 * 124, _0x48edf0 * 128, _0x48edf0 * 142);
  _0x1a53a3.closePath();
  fill_path(_0x1a53a3, undefined, _0x188129[1], _0x48edf0 * 12);
  _0x1a53a3.beginPath();
  _0x1a53a3.lineCap = "round";
  _0x1a53a3.lineJoin = "round";
  _0x1a53a3.moveTo(_0x48edf0 * 281, _0x48edf0 * 282);
  _0x1a53a3.bezierCurveTo(_0x48edf0 * 296, _0x48edf0 * 297.5, _0x48edf0 * 296, _0x48edf0 * 297.5, _0x48edf0 * 311, _0x48edf0 * 313);
  _0x1a53a3.closePath();
  fill_path(_0x1a53a3, undefined, _0x188129[1], _0x48edf0 * 12);
  return _0x4b05ab;
}
function create_SANDWICH(_0x54ff5f, _0xb2a620, _0x143cc0) {
  var _0x52fbea = document.createElement("canvas");
  var _0x545c89 = _0x52fbea.getContext("2d");
  _0x52fbea.width = _0x54ff5f * 400;
  _0x52fbea.height = _0x54ff5f * 400;
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 101, _0x54ff5f * 255);
  _0x545c89.bezierCurveTo(_0x54ff5f * 113, _0x54ff5f * 243, _0x54ff5f * 179, _0x54ff5f * 210, _0x54ff5f * 219, _0x54ff5f * 196);
  _0x545c89.bezierCurveTo(_0x54ff5f * 252, _0x54ff5f * 203, _0x54ff5f * 288, _0x54ff5f * 215, _0x54ff5f * 318, _0x54ff5f * 233);
  _0x545c89.bezierCurveTo(_0x54ff5f * 304, _0x54ff5f * 254, _0x54ff5f * 258, _0x54ff5f * 273, _0x54ff5f * 215, _0x54ff5f * 296);
  _0x545c89.bezierCurveTo(_0x54ff5f * 161, _0x54ff5f * 287, _0x54ff5f * 119, _0x54ff5f * 270, _0x54ff5f * 102, _0x54ff5f * 257);
  _0x545c89.closePath();
  fill_path(_0x545c89, _0x143cc0[0], _0x143cc0[1], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 99, _0x54ff5f * 258);
  _0x545c89.bezierCurveTo(_0x54ff5f * 99, _0x54ff5f * 272.5, _0x54ff5f * 99, _0x54ff5f * 272.5, _0x54ff5f * 99, _0x54ff5f * 287);
  _0x545c89.bezierCurveTo(_0x54ff5f * 166, _0x54ff5f * 319, _0x54ff5f * 193, _0x54ff5f * 320, _0x54ff5f * 212, _0x54ff5f * 324);
  _0x545c89.bezierCurveTo(_0x54ff5f * 292, _0x54ff5f * 286, _0x54ff5f * 312, _0x54ff5f * 271, _0x54ff5f * 319, _0x54ff5f * 263);
  _0x545c89.bezierCurveTo(_0x54ff5f * 320, _0x54ff5f * 249, _0x54ff5f * 320, _0x54ff5f * 241, _0x54ff5f * 318, _0x54ff5f * 234);
  _0x545c89.bezierCurveTo(_0x54ff5f * 300, _0x54ff5f * 254, _0x54ff5f * 254, _0x54ff5f * 277, _0x54ff5f * 216, _0x54ff5f * 294);
  _0x545c89.bezierCurveTo(_0x54ff5f * 190, _0x54ff5f * 296, _0x54ff5f * 135, _0x54ff5f * 276, _0x54ff5f * 102, _0x54ff5f * 258);
  _0x545c89.closePath();
  fill_path(_0x545c89, _0x143cc0[2], _0x143cc0[1], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 212, _0x54ff5f * 323);
  _0x545c89.bezierCurveTo(_0x54ff5f * 211.5, _0x54ff5f * 310.5, _0x54ff5f * 211.5, _0x54ff5f * 310.5, _0x54ff5f * 211, _0x54ff5f * 298);
  _0x545c89.closePath();
  fill_path(_0x545c89, undefined, _0x143cc0[1], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 212, _0x54ff5f * 210);
  _0x545c89.bezierCurveTo(_0x54ff5f * 286, _0x54ff5f * 210, _0x54ff5f * 331, _0x54ff5f * 254, _0x54ff5f * 212, _0x54ff5f * 276);
  _0x545c89.bezierCurveTo(_0x54ff5f * 108, _0x54ff5f * 276, _0x54ff5f * 112, _0x54ff5f * 222, _0x54ff5f * 213, _0x54ff5f * 208);
  _0x545c89.closePath();
  fill_path(_0x545c89, _0x143cc0[3], _0x143cc0[4], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 98, _0x54ff5f * 200);
  _0x545c89.bezierCurveTo(_0x54ff5f * 126, _0x54ff5f * 216, _0x54ff5f * 177, _0x54ff5f * 232, _0x54ff5f * 213, _0x54ff5f * 237);
  _0x545c89.bezierCurveTo(_0x54ff5f * 266, _0x54ff5f * 218, _0x54ff5f * 288, _0x54ff5f * 209, _0x54ff5f * 318, _0x54ff5f * 190);
  _0x545c89.bezierCurveTo(_0x54ff5f * 269, _0x54ff5f * 164, _0x54ff5f * 239, _0x54ff5f * 158, _0x54ff5f * 214, _0x54ff5f * 153);
  _0x545c89.bezierCurveTo(_0x54ff5f * 148, _0x54ff5f * 172, _0x54ff5f * 131, _0x54ff5f * 182, _0x54ff5f * 98, _0x54ff5f * 200);
  _0x545c89.closePath();
  fill_path(_0x545c89, _0x143cc0[0], _0x143cc0[1], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 97, _0x54ff5f * 204);
  _0x545c89.bezierCurveTo(_0x54ff5f * 97, _0x54ff5f * 215.5, _0x54ff5f * 97, _0x54ff5f * 215.5, _0x54ff5f * 97, _0x54ff5f * 227);
  _0x545c89.bezierCurveTo(_0x54ff5f * 148, _0x54ff5f * 250, _0x54ff5f * 179, _0x54ff5f * 256, _0x54ff5f * 212, _0x54ff5f * 262);
  _0x545c89.bezierCurveTo(_0x54ff5f * 268, _0x54ff5f * 244, _0x54ff5f * 281, _0x54ff5f * 233, _0x54ff5f * 318, _0x54ff5f * 214);
  _0x545c89.bezierCurveTo(_0x54ff5f * 318, _0x54ff5f * 203, _0x54ff5f * 318, _0x54ff5f * 203, _0x54ff5f * 318, _0x54ff5f * 192);
  _0x545c89.bezierCurveTo(_0x54ff5f * 250, _0x54ff5f * 225, _0x54ff5f * 236, _0x54ff5f * 231, _0x54ff5f * 214, _0x54ff5f * 239);
  _0x545c89.bezierCurveTo(_0x54ff5f * 158, _0x54ff5f * 228, _0x54ff5f * 126, _0x54ff5f * 215, _0x54ff5f * 99, _0x54ff5f * 201);
  _0x545c89.closePath();
  fill_path(_0x545c89, _0x143cc0[2], _0x143cc0[1], _0x54ff5f * 14);
  _0x545c89.beginPath();
  _0x545c89.lineCap = "round";
  _0x545c89.lineJoin = "round";
  _0x545c89.moveTo(_0x54ff5f * 212, _0x54ff5f * 260);
  _0x545c89.bezierCurveTo(_0x54ff5f * 212, _0x54ff5f * 251.5, _0x54ff5f * 212, _0x54ff5f * 251.5, _0x54ff5f * 212, _0x54ff5f * 243);
  _0x545c89.closePath();
  fill_path(_0x545c89, undefined, _0x143cc0[1], _0x54ff5f * 14);
  circle(_0x545c89, _0x54ff5f * 161, _0x54ff5f * 201, _0x54ff5f * 13);
  fill_path(_0x545c89, _0x143cc0[5]);
  circle(_0x545c89, _0x54ff5f * 216, _0x54ff5f * 205, _0x54ff5f * 8.06225774829855);
  fill_path(_0x545c89, _0x143cc0[5]);
  circle(_0x545c89, _0x54ff5f * 216, _0x54ff5f * 175, _0x54ff5f * 6.708203932499369);
  fill_path(_0x545c89, _0x143cc0[5]);
  circle(_0x545c89, _0x54ff5f * 271, _0x54ff5f * 191, _0x54ff5f * 5.0990195135927845);
  fill_path(_0x545c89, _0x143cc0[5]);
  circle(_0x545c89, _0x54ff5f * 206, _0x54ff5f * 180, _0x54ff5f * 11.180339887498949);
  fill_path(_0x545c89, _0x143cc0[5]);
  return _0x52fbea;
}
function create_scales(_0x54fc16, _0x14f3ff, _0x16801c) {
  var _0x119f04 = document.createElement("canvas");
  var _0x3bef21 = _0x119f04.getContext("2d");
  _0x119f04.width = _0x54fc16 * 400;
  _0x119f04.height = _0x54fc16 * 400;
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 85, _0x54fc16 * 237);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 54.585977194239184, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 178, _0x54fc16 * 238);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 52.53573932334064, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 270, _0x54fc16 * 239);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 53.58058329516393, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 222, _0x54fc16 * 312);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 52.53573932334064, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 317, _0x54fc16 * 159);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 57.63465889766331, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 223.5, _0x54fc16 * 139.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 51.66236541235796, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 132.5, _0x54fc16 * 137.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 52.009614495783374, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 178.5, _0x54fc16 * 58.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 53.16013544000805, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 177.5, _0x54fc16 * 216.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 50, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 84.5, _0x54fc16 * 215.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 54, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 319.5, _0x54fc16 * 138.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 55.08175741568164, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 269.5, _0x54fc16 * 216.0625);
  _0x3bef21.rotate(1.5707963267948966);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 54.589376255824725, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 221.5, _0x54fc16 * 293.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 49.49747468305833, _0x54fc16 * 1);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[1], _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.beginPath();
  _0x3bef21.lineCap = "round";
  _0x3bef21.lineJoin = "round";
  _0x3bef21.moveTo(_0x54fc16 * 221.5, _0x54fc16 * 342.0625);
  _0x3bef21.bezierCurveTo(_0x54fc16 * 221.5, _0x54fc16 * 350.5625, _0x54fc16 * 221.5, _0x54fc16 * 350.5625, _0x54fc16 * 221.5, _0x54fc16 * 359.0625);
  _0x3bef21.closePath();
  fill_path(_0x3bef21, undefined, _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.beginPath();
  _0x3bef21.lineCap = "round";
  _0x3bef21.lineJoin = "round";
  _0x3bef21.moveTo(_0x54fc16 * 84.5, _0x54fc16 * 270.0625);
  _0x3bef21.bezierCurveTo(_0x54fc16 * 84.5, _0x54fc16 * 277.0625, _0x54fc16 * 84.5, _0x54fc16 * 277.0625, _0x54fc16 * 84.5, _0x54fc16 * 284.0625);
  _0x3bef21.closePath();
  fill_path(_0x3bef21, undefined, _0x16801c[2], _0x54fc16 * 12);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 84.5, _0x54fc16 * 215.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 177.5, _0x54fc16 * 215.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 222.5, _0x54fc16 * 294.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 270.5, _0x54fc16 * 216.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 320.5, _0x54fc16 * 134.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 224.5, _0x54fc16 * 138.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 133.5, _0x54fc16 * 137.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  _0x3bef21.save();
  _0x3bef21.translate(_0x54fc16 * 178.5, _0x54fc16 * 56.0625);
  _0x3bef21.rotate(0.5235987755982988);
  round_regular_polygon(_0x3bef21, 6, _0x54fc16 * 30, _0x54fc16 * 15);
  _0x3bef21.restore();
  fill_path(_0x3bef21, _0x16801c[3]);
  return _0x119f04;
}
function create_wheat(_0x1f19f3, _0x178b19, _0x43cfb2) {
  var _0x1e5e3f = document.createElement("canvas");
  var _0x26e96d = _0x1e5e3f.getContext("2d");
  _0x1e5e3f.width = _0x1f19f3 * 52;
  _0x1e5e3f.height = _0x1f19f3 * 65;
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 9.833328247070312, _0x1f19f3 * 12.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 15.333328247070312, _0x1f19f3 * 28.078125, _0x1f19f3 * 15.333328247070312, _0x1f19f3 * 28.078125, _0x1f19f3 * 20.833328247070312, _0x1f19f3 * 44.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, undefined, _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 7.8333282470703125, _0x1f19f3 * 20.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 16.833328247070312, _0x1f19f3 * 32.578125, _0x1f19f3 * 16.833328247070312, _0x1f19f3 * 32.578125, _0x1f19f3 * 25.833328247070312, _0x1f19f3 * 45.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, undefined, _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 23.833328247070312, _0x1f19f3 * 26.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 25.833328247070312, _0x1f19f3 * 11.078125, _0x1f19f3 * 16.833328247070312, _0x1f19f3 * 8.078125, _0x1f19f3 * 14.833328247070312, _0x1f19f3 * 7.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 11.833328247070312, _0x1f19f3 * 17.078125, _0x1f19f3 * 13.833328247070312, _0x1f19f3 * 22.078125, _0x1f19f3 * 23.833328247070312, _0x1f19f3 * 27.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, _0x43cfb2[0], _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 35.83332824707031, _0x1f19f3 * 8.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 34.83332824707031, _0x1f19f3 * 27.078125, _0x1f19f3 * 28.833328247070312, _0x1f19f3 * 27.078125, _0x1f19f3 * 23.833328247070312, _0x1f19f3 * 28.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 21.833328247070312, _0x1f19f3 * 14.078125, _0x1f19f3 * 26.833328247070312, _0x1f19f3 * 11.078125, _0x1f19f3 * 35.83332824707031, _0x1f19f3 * 8.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, _0x43cfb2[0], _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 25.833328247070312, _0x1f19f3 * 39.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 20.833328247070312, _0x1f19f3 * 29.078125, _0x1f19f3 * 14.833328247070312, _0x1f19f3 * 27.078125, _0x1f19f3 * 5.8333282470703125, _0x1f19f3 * 29.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 9.833328247070312, _0x1f19f3 * 39.078125, _0x1f19f3 * 16.833328247070312, _0x1f19f3 * 42.078125, _0x1f19f3 * 25.833328247070312, _0x1f19f3 * 40.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, _0x43cfb2[0], _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 42.83332824707031, _0x1f19f3 * 23.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 35.83332824707031, _0x1f19f3 * 35.078125, _0x1f19f3 * 31.833328247070312, _0x1f19f3 * 37.078125, _0x1f19f3 * 25.833328247070312, _0x1f19f3 * 36.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 25.833328247070312, _0x1f19f3 * 24.078125, _0x1f19f3 * 33.83332824707031, _0x1f19f3 * 21.078125, _0x1f19f3 * 42.83332824707031, _0x1f19f3 * 23.078125);
  _0x26e96d.closePath();
  fill_path(_0x26e96d, _0x43cfb2[0], _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 23.833328247070312, _0x1f19f3 * 24.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 20.833328247070312, _0x1f19f3 * 34.078125, _0x1f19f3 * 23.833328247070312, _0x1f19f3 * 40.078125, _0x1f19f3 * 27.833328247070312, _0x1f19f3 * 43.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 37.33332824707031, _0x1f19f3 * 28.078125, _0x1f19f3 * 37.33332824707031, _0x1f19f3 * 28.078125, _0x1f19f3 * 46.83332824707031, _0x1f19f3 * 13.078125);
  fill_path(_0x26e96d, undefined, _0x43cfb2[1], _0x1f19f3 * 2);
  _0x26e96d.beginPath();
  _0x26e96d.lineCap = "round";
  _0x26e96d.lineJoin = "round";
  _0x26e96d.moveTo(_0x1f19f3 * 38.83332824707031, _0x1f19f3 * 14.078125);
  _0x26e96d.bezierCurveTo(_0x1f19f3 * 34.83332824707031, _0x1f19f3 * 24.078125, _0x1f19f3 * 34.83332824707031, _0x1f19f3 * 24.078125, _0x1f19f3 * 30.833328247070312, _0x1f19f3 * 34.078125);
  fill_path(_0x26e96d, undefined, _0x43cfb2[1], _0x1f19f3 * 2);
  return _0x1e5e3f;
}
function create_windmill(_0x10905d, _0x13456a, _0x4d27ce) {
  var _0x1ccf59 = document.createElement("canvas");
  var _0x20d7e3 = _0x1ccf59.getContext("2d");
  _0x1ccf59.width = _0x10905d * 170;
  _0x1ccf59.height = _0x10905d * 173;
  _0x20d7e3.translate(_0x10905d * 5, _0x10905d * 5);
  _0x20d7e3.globalAlpha = _0x13456a ? 0.5 : 1;
  _0x20d7e3.save();
  _0x20d7e3.translate(_0x10905d * 86.25, _0x10905d * 84.953125);
  _0x20d7e3.rotate(0.32);
  round_regular_polygon(_0x20d7e3, 7, _0x10905d * 42.15447781671598, _0x10905d * 10);
  _0x20d7e3.restore();
  fill_path(_0x20d7e3, _0x4d27ce[0]);
  _0x20d7e3.globalAlpha = 1;
  _0x20d7e3.translate(_0x10905d * -5, _0x10905d * -5);
  _0x20d7e3.save();
  _0x20d7e3.translate(_0x10905d * 86.25, _0x10905d * 84.953125);
  _0x20d7e3.rotate(0.32);
  round_regular_polygon(_0x20d7e3, 7, _0x10905d * 42.15447781671598, _0x10905d * 10);
  _0x20d7e3.restore();
  fill_path(_0x20d7e3, _0x4d27ce[1], _0x4d27ce[2], _0x10905d * 4);
  _0x20d7e3.globalAlpha = _0x13456a ? 0.5 : 1;
  _0x20d7e3.translate(_0x10905d * 5, _0x10905d * 5);
  _0x20d7e3.save();
  _0x20d7e3.translate(_0x10905d * 86.25, _0x10905d * 84.953125);
  _0x20d7e3.rotate(0.28);
  round_regular_polygon(_0x20d7e3, 7, _0x10905d * 30.463092423455635, _0x10905d * 10);
  _0x20d7e3.restore();
  fill_path(_0x20d7e3, _0x4d27ce[0]);
  _0x20d7e3.globalAlpha = 1;
  _0x20d7e3.translate(_0x10905d * -5, _0x10905d * -5);
  _0x20d7e3.save();
  _0x20d7e3.translate(_0x10905d * 86.25, _0x10905d * 84.953125);
  _0x20d7e3.rotate(0.28);
  round_regular_polygon(_0x20d7e3, 7, _0x10905d * 30.463092423455635, _0x10905d * 10);
  _0x20d7e3.restore();
  fill_path(_0x20d7e3, _0x4d27ce[3], _0x4d27ce[4], _0x10905d * 4);
  _0x20d7e3.globalAlpha = _0x13456a ? 0.5 : 1;
  _0x20d7e3.translate(_0x10905d * 5, _0x10905d * 5);
  circle(_0x20d7e3, _0x10905d * 86.25, _0x10905d * 84.953125, _0x10905d * 18.867962264113206);
  fill_path(_0x20d7e3, _0x4d27ce[0]);
  _0x20d7e3.globalAlpha = 1;
  _0x20d7e3.translate(_0x10905d * -5, _0x10905d * -5);
  circle(_0x20d7e3, _0x10905d * 86.25, _0x10905d * 84.953125, _0x10905d * 18.867962264113206);
  fill_path(_0x20d7e3, _0x4d27ce[5], _0x4d27ce[6], _0x10905d * 4);
  return _0x1ccf59;
}
function create_windmill_wing(_0x143e01, _0x958e7c, _0x3a2c66) {
  var _0x499448 = document.createElement("canvas");
  var _0x203c32 = _0x499448.getContext("2d");
  _0x499448.width = _0x143e01 * 170;
  _0x499448.height = _0x143e01 * 173;
  _0x203c32.globalAlpha = _0x958e7c ? 0.5 : 1;
  _0x203c32.translate(_0x143e01 * 5, _0x143e01 * 5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 85.25, _0x143e01 * 82.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 98.25, _0x143e01 * 46.453125, _0x143e01 * 98.25, _0x143e01 * 46.453125, _0x143e01 * 111.25, _0x143e01 * 9.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[0], _0x143e01 * 4);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 111.25, _0x143e01 * 8.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 117.75, _0x143e01 * 12.453125, _0x143e01 * 117.75, _0x143e01 * 12.453125, _0x143e01 * 124.25, _0x143e01 * 15.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 113.75, _0x143e01 * 39.953125, _0x143e01 * 113.75, _0x143e01 * 39.953125, _0x143e01 * 103.25, _0x143e01 * 63.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 97.75, _0x143e01 * 64.953125, _0x143e01 * 97.75, _0x143e01 * 64.953125, _0x143e01 * 92.25, _0x143e01 * 65.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[0]);
  _0x203c32.globalAlpha = 1;
  _0x203c32.translate(_0x143e01 * -5, _0x143e01 * -5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 111.25, _0x143e01 * 8.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 117.75, _0x143e01 * 12.453125, _0x143e01 * 117.75, _0x143e01 * 12.453125, _0x143e01 * 124.25, _0x143e01 * 15.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 113.75, _0x143e01 * 39.953125, _0x143e01 * 113.75, _0x143e01 * 39.953125, _0x143e01 * 103.25, _0x143e01 * 63.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 97.75, _0x143e01 * 64.953125, _0x143e01 * 97.75, _0x143e01 * 64.953125, _0x143e01 * 92.25, _0x143e01 * 65.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[7]);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 85.25, _0x143e01 * 82.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 98.25, _0x143e01 * 46.453125, _0x143e01 * 98.25, _0x143e01 * 46.453125, _0x143e01 * 111.25, _0x143e01 * 9.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[6], _0x143e01 * 4);
  _0x203c32.globalAlpha = _0x958e7c ? 0.5 : 1;
  _0x203c32.translate(_0x143e01 * 5, _0x143e01 * 5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 87.25, _0x143e01 * 84.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 123.75, _0x143e01 * 100.453125, _0x143e01 * 123.75, _0x143e01 * 100.453125, _0x143e01 * 160.25, _0x143e01 * 115.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[0], _0x143e01 * 4);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 160.25, _0x143e01 * 114.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 156.25, _0x143e01 * 122.453125, _0x143e01 * 156.25, _0x143e01 * 122.453125, _0x143e01 * 152.25, _0x143e01 * 129.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 130.25, _0x143e01 * 117.953125, _0x143e01 * 130.25, _0x143e01 * 117.953125, _0x143e01 * 108.25, _0x143e01 * 105.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 107.25, _0x143e01 * 98.953125, _0x143e01 * 107.25, _0x143e01 * 98.953125, _0x143e01 * 106.25, _0x143e01 * 91.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[0]);
  _0x203c32.globalAlpha = 1;
  _0x203c32.translate(_0x143e01 * -5, _0x143e01 * -5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 160.25, _0x143e01 * 114.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 156.25, _0x143e01 * 122.453125, _0x143e01 * 156.25, _0x143e01 * 122.453125, _0x143e01 * 152.25, _0x143e01 * 129.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 130.25, _0x143e01 * 117.953125, _0x143e01 * 130.25, _0x143e01 * 117.953125, _0x143e01 * 108.25, _0x143e01 * 105.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 107.25, _0x143e01 * 98.953125, _0x143e01 * 107.25, _0x143e01 * 98.953125, _0x143e01 * 106.25, _0x143e01 * 91.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[7]);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 87.25, _0x143e01 * 84.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 123.75, _0x143e01 * 100.453125, _0x143e01 * 123.75, _0x143e01 * 100.453125, _0x143e01 * 160.25, _0x143e01 * 115.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[6], _0x143e01 * 4);
  _0x203c32.globalAlpha = _0x958e7c ? 0.5 : 1;
  _0x203c32.translate(_0x143e01 * 5, _0x143e01 * 5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 83.25, _0x143e01 * 83.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 47.75, _0x143e01 * 68.453125, _0x143e01 * 47.75, _0x143e01 * 68.453125, _0x143e01 * 12.25, _0x143e01 * 52.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[0], _0x143e01 * 4);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 13.25, _0x143e01 * 53.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 17.25, _0x143e01 * 46.953125, _0x143e01 * 17.25, _0x143e01 * 46.953125, _0x143e01 * 21.25, _0x143e01 * 39.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 42.75, _0x143e01 * 52.453125, _0x143e01 * 42.75, _0x143e01 * 52.453125, _0x143e01 * 64.25, _0x143e01 * 64.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 64.25, _0x143e01 * 70.953125, _0x143e01 * 64.25, _0x143e01 * 70.953125, _0x143e01 * 64.25, _0x143e01 * 76.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[0]);
  _0x203c32.globalAlpha = 1;
  _0x203c32.translate(_0x143e01 * -5, _0x143e01 * -5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 13.25, _0x143e01 * 53.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 17.25, _0x143e01 * 46.953125, _0x143e01 * 17.25, _0x143e01 * 46.953125, _0x143e01 * 21.25, _0x143e01 * 39.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 42.75, _0x143e01 * 52.453125, _0x143e01 * 42.75, _0x143e01 * 52.453125, _0x143e01 * 64.25, _0x143e01 * 64.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 64.25, _0x143e01 * 70.953125, _0x143e01 * 64.25, _0x143e01 * 70.953125, _0x143e01 * 64.25, _0x143e01 * 76.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[7]);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 83.25, _0x143e01 * 83.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 47.75, _0x143e01 * 68.453125, _0x143e01 * 47.75, _0x143e01 * 68.453125, _0x143e01 * 12.25, _0x143e01 * 52.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[6], _0x143e01 * 4);
  _0x203c32.globalAlpha = _0x958e7c ? 0.5 : 1;
  _0x203c32.translate(_0x143e01 * 5, _0x143e01 * 5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 84.25, _0x143e01 * 86.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 70.25, _0x143e01 * 123.953125, _0x143e01 * 70.25, _0x143e01 * 123.953125, _0x143e01 * 56.25, _0x143e01 * 160.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[0], _0x143e01 * 4);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 56.25, _0x143e01 * 159.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 49.25, _0x143e01 * 155.453125, _0x143e01 * 49.25, _0x143e01 * 155.453125, _0x143e01 * 42.25, _0x143e01 * 150.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 54.25, _0x143e01 * 127.953125, _0x143e01 * 54.25, _0x143e01 * 127.953125, _0x143e01 * 66.25, _0x143e01 * 104.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 71.25, _0x143e01 * 104.953125, _0x143e01 * 71.25, _0x143e01 * 104.953125, _0x143e01 * 76.25, _0x143e01 * 104.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[0]);
  _0x203c32.globalAlpha = 1;
  _0x203c32.translate(_0x143e01 * -5, _0x143e01 * -5);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 56.25, _0x143e01 * 159.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 49.25, _0x143e01 * 155.453125, _0x143e01 * 49.25, _0x143e01 * 155.453125, _0x143e01 * 42.25, _0x143e01 * 150.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 54.25, _0x143e01 * 127.953125, _0x143e01 * 54.25, _0x143e01 * 127.953125, _0x143e01 * 66.25, _0x143e01 * 104.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 71.25, _0x143e01 * 104.953125, _0x143e01 * 71.25, _0x143e01 * 104.953125, _0x143e01 * 76.25, _0x143e01 * 104.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, _0x3a2c66[7]);
  _0x203c32.beginPath();
  _0x203c32.lineCap = "round";
  _0x203c32.lineJoin = "round";
  _0x203c32.moveTo(_0x143e01 * 84.25, _0x143e01 * 86.953125);
  _0x203c32.bezierCurveTo(_0x143e01 * 70.25, _0x143e01 * 123.953125, _0x143e01 * 70.25, _0x143e01 * 123.953125, _0x143e01 * 56.25, _0x143e01 * 160.953125);
  _0x203c32.closePath();
  fill_path(_0x203c32, undefined, _0x3a2c66[6], _0x143e01 * 4);
  return _0x499448;
}
function create_windmill_head(_0x454627, _0x3a985c, _0x3610b4) {
  var _0x35e296 = document.createElement("canvas");
  var _0x895fa4 = _0x35e296.getContext("2d");
  _0x35e296.width = _0x454627 * 170;
  _0x35e296.height = _0x454627 * 173;
  _0x895fa4.globalAlpha = _0x3a985c ? 0.5 : 1;
  _0x895fa4.translate(_0x454627 * 5, _0x454627 * 5);
  _0x895fa4.save();
  _0x895fa4.translate(_0x454627 * 86.25, _0x454627 * 84.953125);
  round_regular_polygon(_0x895fa4, 7, _0x454627 * 9.848857801796104, _0x454627 * 5);
  _0x895fa4.restore();
  fill_path(_0x895fa4, _0x3610b4[0]);
  _0x895fa4.globalAlpha = 1;
  _0x895fa4.translate(_0x454627 * -5, _0x454627 * -5);
  _0x895fa4.save();
  _0x895fa4.translate(_0x454627 * 86.25, _0x454627 * 84.953125);
  round_regular_polygon(_0x895fa4, 7, _0x454627 * 9.848857801796104, _0x454627 * 5);
  _0x895fa4.restore();
  fill_path(_0x895fa4, _0x3610b4[8], _0x3610b4[9], _0x454627 * 4);
  return _0x35e296;
}
function create_cord(_0x5b3257, _0x25e382, _0x20053a) {
  var _0x5d554e = document.createElement("canvas");
  var _0x20856f = _0x5d554e.getContext("2d");
  var _0x2c935f = _0x5b3257 * 75;
  var _0x540ea7 = _0x5b3257 * 55;
  var _0x2b12d9 = _0x5b3257 * 4;
  _0x5d554e.width = _0x2c935f;
  _0x5d554e.height = _0x540ea7;
  _0x20856f.translate(_0x5b3257 * -30, _0x5b3257 * -40);
  _0x20856f.globalAlpha = 1;
  _0x20856f.beginPath();
  _0x20856f.bezierCurveTo(_0x5b3257 * 67, _0x5b3257 * 56, _0x5b3257 * 72, _0x5b3257 * 71, _0x5b3257 * 72, _0x5b3257 * 71);
  _0x20856f.bezierCurveTo(_0x5b3257 * 72, _0x5b3257 * 71, _0x5b3257 * 84, _0x5b3257 * 70, _0x5b3257 * 75, _0x5b3257 * 82);
  _0x20856f.bezierCurveTo(_0x5b3257 * 70, _0x5b3257 * 88, _0x5b3257 * 61, _0x5b3257 * 89, _0x5b3257 * 58, _0x5b3257 * 89);
  _0x20856f.bezierCurveTo(_0x5b3257 * 55, _0x5b3257 * 89, _0x5b3257 * 40, _0x5b3257 * 89, _0x5b3257 * 46, _0x5b3257 * 77);
  _0x20856f.bezierCurveTo(_0x5b3257 * 46, _0x5b3257 * 77, _0x5b3257 * 43, _0x5b3257 * 63, _0x5b3257 * 43, _0x5b3257 * 63);
  _0x20856f.bezierCurveTo(_0x5b3257 * 35, _0x5b3257 * 61, _0x5b3257 * 35, _0x5b3257 * 53, _0x5b3257 * 42, _0x5b3257 * 47);
  _0x20856f.bezierCurveTo(_0x5b3257 * 48, _0x5b3257 * 42, _0x5b3257 * 62, _0x5b3257 * 41, _0x5b3257 * 66, _0x5b3257 * 43);
  _0x20856f.bezierCurveTo(_0x5b3257 * 70, _0x5b3257 * 45, _0x5b3257 * 72, _0x5b3257 * 48, _0x5b3257 * 67, _0x5b3257 * 56);
  _0x20856f.closePath();
  fill_path(_0x20856f, _0x20053a[0]);
  _0x20856f.beginPath();
  _0x20856f.bezierCurveTo(_0x5b3257 * 68, _0x5b3257 * 61, _0x5b3257 * 72, _0x5b3257 * 76, _0x5b3257 * 72, _0x5b3257 * 76);
  _0x20856f.bezierCurveTo(_0x5b3257 * 65, _0x5b3257 * 85, _0x5b3257 * 61, _0x5b3257 * 85, _0x5b3257 * 49, _0x5b3257 * 83);
  _0x20856f.bezierCurveTo(_0x5b3257 * 49, _0x5b3257 * 83, _0x5b3257 * 44, _0x5b3257 * 63, _0x5b3257 * 44, _0x5b3257 * 63);
  _0x20856f.bezierCurveTo(_0x5b3257 * 54, _0x5b3257 * 63, _0x5b3257 * 60, _0x5b3257 * 63, _0x5b3257 * 67, _0x5b3257 * 55);
  _0x20856f.closePath();
  fill_path(_0x20856f, _0x20053a[1]);
  _0x20856f.beginPath();
  _0x20856f.moveTo(_0x5b3257 * 69, _0x5b3257 * 65);
  _0x20856f.bezierCurveTo(_0x5b3257 * 70, _0x5b3257 * 61, _0x5b3257 * 81, _0x5b3257 * 66, _0x5b3257 * 86, _0x5b3257 * 66);
  _0x20856f.bezierCurveTo(_0x5b3257 * 90, _0x5b3257 * 66, _0x5b3257 * 97, _0x5b3257 * 63, _0x5b3257 * 97, _0x5b3257 * 56);
  _0x20856f.bezierCurveTo(_0x5b3257 * 97, _0x5b3257 * 50, _0x5b3257 * 93, _0x5b3257 * 47, _0x5b3257 * 88, _0x5b3257 * 44);
  fill_path(_0x20856f, false, _0x20053a[1], 2);
  _0x20856f.beginPath();
  _0x20856f.moveTo(_0x5b3257 * 50, _0x5b3257 * 48);
  _0x20856f.bezierCurveTo(_0x5b3257 * 43, _0x5b3257 * 52, _0x5b3257 * 50, _0x5b3257 * 54, _0x5b3257 * 51, _0x5b3257 * 54);
  _0x20856f.bezierCurveTo(_0x5b3257 * 54, _0x5b3257 * 54, _0x5b3257 * 59, _0x5b3257 * 52, _0x5b3257 * 59, _0x5b3257 * 49);
  _0x20856f.bezierCurveTo(_0x5b3257 * 59, _0x5b3257 * 48, _0x5b3257 * 55, _0x5b3257 * 46, _0x5b3257 * 50, _0x5b3257 * 48);
  fill_path(_0x20856f, _0x20053a[2]);
  return _0x5d554e;
}
function create_bandage(_0x148b1d, _0x206c8c, _0x472e2a) {
  var _0x4fa434 = document.createElement("canvas");
  var _0xfea2c = _0x4fa434.getContext("2d");
  var _0xb49201 = _0x148b1d * 195;
  var _0x3d74e9 = _0x148b1d * 190;
  var _0x7bd072 = _0xb49201 / 2;
  var _0xdfe461 = _0x3d74e9 / 2;
  _0x4fa434.width = _0xb49201;
  _0x4fa434.height = _0x3d74e9;
  var _0x56d942 = _0x148b1d * 10;
  var _0x512088 = _0x148b1d * 35;
  var _0x405df1 = _0x148b1d * 150;
  var _0x4b9ad9 = _0x512088 / 2;
  var _0x2626d = _0x405df1 / 2;
  var _0x3e5f61 = _0x148b1d * 4;
  _0xfea2c.translate(_0x7bd072 - _0x148b1d * 5, _0xdfe461 - _0x148b1d * 5);
  _0xfea2c.rotate(-Math.PI / 1.25);
  _0xfea2c.globalAlpha = 1;
  round_rect(_0xfea2c, -_0x4b9ad9, -_0x2626d, _0x512088, _0x405df1, _0x56d942);
  fill_path(_0xfea2c, _0x472e2a[0], _0x472e2a[1], _0x3e5f61);
  _0xfea2c.translate(0, 0);
  _0xfea2c.rotate(Math.PI / 3);
  _0xfea2c.globalAlpha = 1;
  round_rect(_0xfea2c, -_0x4b9ad9, -_0x2626d, _0x512088, _0x405df1, _0x56d942);
  fill_path(_0xfea2c, _0x472e2a[0], _0x472e2a[1], _0x3e5f61);
  _0xfea2c.translate(0, 5);
  round_rect(_0xfea2c, -_0x4b9ad9 / 2, -_0x2626d / 2, _0x512088 / 2, _0x405df1 / 3, _0x56d942 - 2);
  fill_path(_0xfea2c, _0x472e2a[1]);
  return _0x4fa434;
}
function create_craft_button(_0x511141, _0x564ebf, _0x15ced6, _0x471898, _0x6e1850) {
  var _0x577c33 = document.createElement("canvas");
  var _0x7a4fd1 = _0x577c33.getContext("2d");
  var _0x87ebfe = _0x511141 * 70;
  var _0x103876 = _0x511141 * 70;
  var _0xb524b3 = _0x511141 * 10;
  var _0x4dc351 = _0x511141 * 5;
  _0x577c33.width = _0x87ebfe;
  _0x577c33.height = _0x103876 + _0x4dc351;
  for (var _0x25718f = 0; _0x25718f < _0x564ebf.length; _0x25718f++) {
    var _0x54749d = _0x564ebf[_0x25718f];
    _0x7a4fd1.globalAlpha = _0x54749d.a;
    var _0x2442d3 = _0x54749d.f(_0x15ced6, false, _0x54749d.c);
    _0x7a4fd1.save();
    _0x7a4fd1.translate(_0x87ebfe / 2 + _0x54749d.x * _0x511141, _0x103876 / 2 + _0x54749d.y * _0x511141);
    _0x7a4fd1.rotate(_0x54749d.r);
    _0x7a4fd1.drawImage(_0x2442d3, -_0x2442d3.width / 2, -_0x2442d3.height / 2);
    _0x7a4fd1.restore();
  }
  var _0x4e191d = [];
  for (var _0x25718f = 0; _0x25718f < _0x471898.length; _0x25718f++) {
    var _0x3dae97 = document.createElement("canvas");
    var _0x477595 = _0x3dae97.getContext("2d");
    _0x3dae97.width = _0x87ebfe;
    _0x3dae97.height = _0x103876 + _0x4dc351;
    _0x477595.globalAlpha = _0x6e1850 / 2;
    if (_0x25718f == 2) {
      round_rect(_0x477595, 0, _0x4dc351, _0x87ebfe, _0x103876, _0xb524b3);
    } else {
      round_rect(_0x477595, 0, 0, _0x87ebfe, _0x103876 + _0x4dc351, _0xb524b3);
    }
    fill_path(_0x477595, "#081a19");
    _0x477595.globalAlpha = _0x6e1850;
    if (_0x25718f == 2) {
      round_rect(_0x477595, 0, _0x4dc351, _0x87ebfe, _0x103876, _0xb524b3);
    } else {
      round_rect(_0x477595, 0, 0, _0x87ebfe, _0x103876, _0xb524b3);
    }
    fill_path(_0x477595, _0x471898[_0x25718f]);
    _0x477595.globalAlpha = 1;
    if (_0x25718f == 2) {
      _0x477595.drawImage(_0x577c33, 0, _0x4dc351);
    } else {
      _0x477595.drawImage(_0x577c33, 0, 0);
    }
    _0x4e191d.push(CTI(_0x3dae97));
  }
  return _0x4e191d;
}
function create_bread_oven_ui(_0x86acf4, _0x39d273) {
  var _0x4a3fb8 = document.createElement("canvas");
  var _0x27eb87 = _0x4a3fb8.getContext("2d");
  _0x4a3fb8.width = _0x86acf4 * 149;
  _0x4a3fb8.height = _0x86acf4 * 356;
  _0x27eb87.save();
  _0x27eb87.translate(_0x86acf4 * 74.5, _0x86acf4 * 177.5);
  round_rect(_0x27eb87, _0x86acf4 * -57.5, _0x86acf4 * -161.5, _0x86acf4 * 100, _0x86acf4 * 323, _0x86acf4 * 10);
  _0x27eb87.restore();
  fill_path(_0x27eb87, _0x39d273[0], _0x39d273[1], _0x86acf4 * 4);
  _0x27eb87.save();
  _0x27eb87.translate(_0x86acf4 * 74.5, _0x86acf4 * 177.5);
  round_rect(_0x27eb87, _0x86acf4 * -57.5, _0x86acf4 * 50.5, _0x86acf4 * 100, _0x86acf4 * 105, _0x86acf4 * 10);
  _0x27eb87.restore();
  fill_path(_0x27eb87, _0x39d273[6], _0x39d273[1], _0x86acf4 * 4);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 125);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 74.5, _0x86acf4 * 125, _0x86acf4 * 118, _0x86acf4 * 125, _0x86acf4 * 118, _0x86acf4 * 125);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[2], _0x39d273[2], _0x86acf4 * 10);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 120);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 74.5, _0x86acf4 * 120, _0x86acf4 * 74.5, _0x86acf4 * 120, _0x86acf4 * 118, _0x86acf4 * 120);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[3], _0x39d273[3], _0x86acf4 * 10);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 228);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 75, _0x86acf4 * 228.5, _0x86acf4 * 118, _0x86acf4 * 228.5, _0x86acf4 * 118, _0x86acf4 * 229);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[2], _0x39d273[2], _0x86acf4 * 10);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 224);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 75, _0x86acf4 * 224, _0x86acf4 * 118, _0x86acf4 * 224, _0x86acf4 * 118, _0x86acf4 * 224);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[3], _0x39d273[3], _0x86acf4 * 10);
  _0x27eb87.save();
  _0x27eb87.translate(_0x86acf4 * 72, _0x86acf4 * 68.5);
  round_rect(_0x27eb87, _0x86acf4 * -41.5, _0x86acf4 * -36.5, _0x86acf4 * 73, _0x86acf4 * 73, _0x86acf4 * 13);
  _0x27eb87.restore();
  fill_path(_0x27eb87, _0x39d273[4]);
  _0x27eb87.save();
  _0x27eb87.translate(_0x86acf4 * 72, _0x86acf4 * 175.5);
  round_rect(_0x27eb87, _0x86acf4 * -41.5, _0x86acf4 * -38.5, _0x86acf4 * 73, _0x86acf4 * 73, _0x86acf4 * 13);
  _0x27eb87.restore();
  fill_path(_0x27eb87, _0x39d273[4]);
  _0x27eb87.save();
  _0x27eb87.translate(_0x86acf4 * 72, _0x86acf4 * 279.5);
  round_rect(_0x27eb87, _0x86acf4 * -41.5, _0x86acf4 * -40.5, _0x86acf4 * 73, _0x86acf4 * 73, _0x86acf4 * 13);
  _0x27eb87.restore();
  fill_path(_0x27eb87, _0x39d273[4]);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 338);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 75, _0x86acf4 * 338, _0x86acf4 * 118, _0x86acf4 * 338, _0x86acf4 * 118, _0x86acf4 * 338);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[2], _0x39d273[2], _0x86acf4 * 10);
  _0x27eb87.beginPath();
  _0x27eb87.lineCap = "round";
  _0x27eb87.lineJoin = "round";
  _0x27eb87.moveTo(_0x86acf4 * 16, _0x86acf4 * 333);
  _0x27eb87.bezierCurveTo(_0x86acf4 * 75, _0x86acf4 * 333, _0x86acf4 * 118, _0x86acf4 * 333, _0x86acf4 * 118, _0x86acf4 * 333);
  _0x27eb87.closePath();
  fill_path(_0x27eb87, _0x39d273[3], _0x39d273[3], _0x86acf4 * 10);
  return _0x4a3fb8;
}
function create_big_fire_wood(_0x1e3c89, _0x2546f6, _0x494952) {
  var _0x1248d3 = document.createElement("canvas");
  var _0x188612 = _0x1248d3.getContext("2d");
  var _0x36106f = _0x1e3c89 * 193;
  var _0x49c71e = _0x1e3c89 * 198;
  var _0x1bcd19 = _0x1e3c89 * 140;
  var _0x27264e = _0x1e3c89 * 90;
  _0x1248d3.width = _0x36106f;
  _0x1248d3.height = _0x49c71e;
  var _0x44a60a = _0x1e3c89 * 10;
  var _0x5d4965 = _0x1e3c89 * 25;
  var _0x4ac07f = _0x1e3c89 * 180;
  var _0x1c2659 = _0x5d4965 / 2;
  var _0x36713e = _0x4ac07f / 2;
  var _0x7ab5 = _0x1e3c89 * 4;
  _0x188612.translate(_0x1e3c89 * -25, _0x1e3c89 * 1);
  _0x188612.translate(_0x1bcd19, _0x27264e);
  _0x188612.rotate(-Math.PI / 5);
  round_rect(_0x188612, -_0x1c2659, -_0x36713e, _0x5d4965, _0x4ac07f, _0x44a60a);
  fill_path(_0x188612, _0x494952[0], _0x494952[1], _0x7ab5);
  _0x188612.translate(_0x1e3c89 * -30, _0x1e3c89 * -25);
  _0x188612.rotate(Math.PI / 3);
  round_rect(_0x188612, -_0x1c2659, -_0x36713e, _0x5d4965, _0x4ac07f, _0x44a60a);
  fill_path(_0x188612, _0x494952[0], _0x494952[1], _0x7ab5);
  _0x188612.translate(_0x1e3c89 * 35, _0x1e3c89 * 30);
  _0x188612.rotate(Math.PI / 3);
  round_rect(_0x188612, -_0x1c2659, -_0x36713e, _0x5d4965, _0x4ac07f, _0x44a60a);
  fill_path(_0x188612, _0x494952[0], _0x494952[1], _0x7ab5);
  return _0x1248d3;
}
function create_fire(_0x9de821, _0x547099, _0x9a9734) {
  var _0x1dfdcb = document.createElement("canvas");
  var _0x44e72d = _0x1dfdcb.getContext("2d");
  var _0x4c8f80 = _0x9de821 * 145;
  var _0x24c986 = _0x9de821 * 145;
  var _0x5612ad = _0x4c8f80 / 2;
  var _0x2eae0e = _0x24c986 / 2;
  _0x1dfdcb.width = _0x4c8f80;
  _0x1dfdcb.height = _0x24c986;
  var _0x4e399a = _0x9de821 * 70;
  _0x44e72d.translate(_0x5612ad, _0x2eae0e);
  _0x44e72d.globalAlpha = 0.4;
  circle(_0x44e72d, 0, 0, _0x4e399a);
  fill_path(_0x44e72d, _0x9a9734[0]);
  var _0x4e399a = _0x9de821 * 50;
  _0x44e72d.translate(0, 0);
  _0x44e72d.globalAlpha = 0.8;
  circle(_0x44e72d, 0, 0, _0x4e399a);
  fill_path(_0x44e72d, _0x9a9734[0]);
  var _0x4e399a = _0x9de821 * 35;
  _0x44e72d.translate(0, 0);
  _0x44e72d.globalAlpha = 0.8;
  circle(_0x44e72d, 0, 0, _0x4e399a);
  fill_path(_0x44e72d, _0x9a9734[1]);
  var _0x4e399a = _0x9de821 * 20;
  _0x44e72d.translate(0, 0);
  _0x44e72d.globalAlpha = 0.8;
  circle(_0x44e72d, 0, 0, _0x4e399a);
  fill_path(_0x44e72d, _0x9a9734[2]);
  return _0x1dfdcb;
}
function create_wood_fire(_0x3c5860, _0x5581ea, _0x1ac4a2) {
  var _0x208c9d = document.createElement("canvas");
  var _0x109606 = _0x208c9d.getContext("2d");
  var _0x51c1cf = _0x3c5860 * 135;
  var _0xdd4db6 = _0x3c5860 * 190;
  var _0x190830 = _0x51c1cf / 2;
  var _0x34a1e8 = _0xdd4db6 / 2;
  _0x208c9d.width = _0x51c1cf;
  _0x208c9d.height = _0xdd4db6;
  var _0x4077b2 = _0x3c5860 * 10;
  var _0x4cfa8b = _0x3c5860 * 25;
  var _0x4a0e2f = _0x3c5860 * 180;
  var _0xea6131 = _0x4cfa8b / 2;
  var _0xab5e1d = _0x4a0e2f / 2;
  var _0x1195ce = _0x3c5860 * 4;
  _0x109606.translate(_0x190830, _0x34a1e8);
  _0x109606.rotate(-Math.PI / 5);
  _0x109606.globalAlpha = 1;
  round_rect(_0x109606, -_0xea6131, -_0xab5e1d, _0x4cfa8b, _0x4a0e2f, _0x4077b2);
  fill_path(_0x109606, _0x1ac4a2[0], _0x1ac4a2[1], _0x1195ce);
  _0x109606.translate(0, 0);
  _0x109606.rotate(Math.PI / 5);
  _0x109606.globalAlpha = 1;
  round_rect(_0x109606, -_0xea6131, -_0xab5e1d, _0x4cfa8b, _0x4a0e2f, _0x4077b2);
  fill_path(_0x109606, _0x1ac4a2[0], _0x1ac4a2[1], _0x1195ce);
  return _0x208c9d;
}
function create_ground_fire(_0x2acb57, _0x28fad7, _0x53c741) {
  var _0x2b386a = document.createElement("canvas");
  var _0x2c4277 = _0x2b386a.getContext("2d");
  var _0xca010e = _0x2acb57 * 205;
  var _0x502bab = _0x2acb57 * 205;
  var _0x9fe1aa = _0xca010e / 2;
  var _0x23a220 = _0x502bab / 2;
  _0x2b386a.width = _0xca010e;
  _0x2b386a.height = _0x502bab;
  var _0x1427ef = _0x2acb57 * 100;
  _0x2c4277.translate(_0x9fe1aa, _0x23a220);
  _0x2c4277.globalAlpha = 1;
  circle(_0x2c4277, 0, 0, _0x1427ef);
  fill_path(_0x2c4277, _0x53c741[0]);
  return _0x2b386a;
}
function create_halo_fire(_0x445be3, _0x3f4efd, _0x300b89) {
  var _0x5bfeea = document.createElement("canvas");
  var _0x5daa8e = _0x5bfeea.getContext("2d");
  var _0x1285b9 = _0x445be3 * 370;
  var _0xa1f733 = _0x445be3 * 370;
  var _0x51b87c = _0x1285b9 / 2;
  var _0x392526 = _0xa1f733 / 2;
  _0x5bfeea.width = _0x1285b9;
  _0x5bfeea.height = _0xa1f733;
  var _0x3bc59a = _0x445be3 * 180;
  _0x5daa8e.globalAlpha = 0.2;
  circle(_0x5daa8e, _0x51b87c, _0x392526, _0x3bc59a);
  fill_path(_0x5daa8e, _0x300b89[0]);
  return _0x5bfeea;
}
function create_elf_hat(_0x5f54bf, _0x308555, _0x34274e) {
  var _0x3270d1 = document.createElement("canvas");
  var _0x466054 = _0x3270d1.getContext("2d");
  _0x3270d1.width = _0x5f54bf * 155;
  _0x3270d1.height = _0x5f54bf * 127;
  _0x466054.globalAlpha = 0.5;
  _0x466054.translate(0, _0x5f54bf * 8);
  _0x466054.translate(_0x5f54bf * -7, _0x5f54bf * -20);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 55, _0x5f54bf * 68);
  _0x466054.bezierCurveTo(_0x5f54bf * 86, _0x5f54bf * 64, _0x5f54bf * 117, _0x5f54bf * 66, _0x5f54bf * 134, _0x5f54bf * 68);
  _0x466054.bezierCurveTo(_0x5f54bf * 152, _0x5f54bf * 69, _0x5f54bf * 165, _0x5f54bf * 86, _0x5f54bf * 152, _0x5f54bf * 104);
  _0x466054.bezierCurveTo(_0x5f54bf * 146, _0x5f54bf * 87, _0x5f54bf * 122, _0x5f54bf * 89, _0x5f54bf * 98, _0x5f54bf * 90);
  _0x466054.bezierCurveTo(_0x5f54bf * 64, _0x5f54bf * 89, _0x5f54bf * 41, _0x5f54bf * 91, _0x5f54bf * 36, _0x5f54bf * 106);
  _0x466054.bezierCurveTo(_0x5f54bf * 19, _0x5f54bf * 92, _0x5f54bf * 31, _0x5f54bf * 71, _0x5f54bf * 54, _0x5f54bf * 69);
  _0x466054.closePath();
  fill_path(_0x466054, _0x34274e[0]);
  _0x466054.globalAlpha = 1;
  _0x466054.translate(0, _0x5f54bf * -8);
  _0x466054.translate(_0x5f54bf * 7, _0x5f54bf * 20);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 24, _0x5f54bf * 28);
  _0x466054.bezierCurveTo(_0x5f54bf * 39, _0x5f54bf * 30, _0x5f54bf * 37, _0x5f54bf * 31, _0x5f54bf * 40, _0x5f54bf * 32);
  _0x466054.bezierCurveTo(_0x5f54bf * 22, _0x5f54bf * 45, _0x5f54bf * 26, _0x5f54bf * 58, _0x5f54bf * 29, _0x5f54bf * 66);
  _0x466054.bezierCurveTo(_0x5f54bf * 86.5, _0x5f54bf * 65, _0x5f54bf * 86.5, _0x5f54bf * 65, _0x5f54bf * 144, _0x5f54bf * 64);
  _0x466054.bezierCurveTo(_0x5f54bf * 151, _0x5f54bf * 42, _0x5f54bf * 132, _0x5f54bf * 20, _0x5f54bf * 120, _0x5f54bf * 16);
  _0x466054.bezierCurveTo(_0x5f54bf * 106, _0x5f54bf * 12, _0x5f54bf * 89, _0x5f54bf * 0, _0x5f54bf * 73, _0x5f54bf * 3);
  _0x466054.bezierCurveTo(_0x5f54bf * 51, _0x5f54bf * 5, _0x5f54bf * 36, _0x5f54bf * 20, _0x5f54bf * 25, _0x5f54bf * 28);
  _0x466054.closePath();
  fill_path(_0x466054, _0x34274e[1], _0x34274e[2], _0x5f54bf * 4);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 30, _0x5f54bf * 41);
  _0x466054.bezierCurveTo(_0x5f54bf * 49, _0x5f54bf * 31, _0x5f54bf * 53, _0x5f54bf * 29, _0x5f54bf * 62, _0x5f54bf * 27);
  _0x466054.bezierCurveTo(_0x5f54bf * 59, _0x5f54bf * 24, _0x5f54bf * 56, _0x5f54bf * 25, _0x5f54bf * 53, _0x5f54bf * 24);
  _0x466054.bezierCurveTo(_0x5f54bf * 67, _0x5f54bf * 15, _0x5f54bf * 84, _0x5f54bf * 12, _0x5f54bf * 120, _0x5f54bf * 16);
  _0x466054.bezierCurveTo(_0x5f54bf * 107, _0x5f54bf * 11, _0x5f54bf * 96, _0x5f54bf * 6, _0x5f54bf * 85, _0x5f54bf * 2);
  _0x466054.bezierCurveTo(_0x5f54bf * 59, _0x5f54bf * 3, _0x5f54bf * 54, _0x5f54bf * 7, _0x5f54bf * 40, _0x5f54bf * 17);
  _0x466054.bezierCurveTo(_0x5f54bf * 32.5, _0x5f54bf * 22.5, _0x5f54bf * 32.5, _0x5f54bf * 22.5, _0x5f54bf * 25, _0x5f54bf * 28);
  _0x466054.bezierCurveTo(_0x5f54bf * 32, _0x5f54bf * 30, _0x5f54bf * 32, _0x5f54bf * 30, _0x5f54bf * 39, _0x5f54bf * 32);
  _0x466054.closePath();
  fill_path(_0x466054, _0x34274e[3]);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 24, _0x5f54bf * 28);
  _0x466054.bezierCurveTo(_0x5f54bf * 39, _0x5f54bf * 30, _0x5f54bf * 37, _0x5f54bf * 31, _0x5f54bf * 40, _0x5f54bf * 32);
  _0x466054.bezierCurveTo(_0x5f54bf * 22, _0x5f54bf * 45, _0x5f54bf * 26, _0x5f54bf * 58, _0x5f54bf * 29, _0x5f54bf * 66);
  _0x466054.bezierCurveTo(_0x5f54bf * 86.5, _0x5f54bf * 65, _0x5f54bf * 86.5, _0x5f54bf * 65, _0x5f54bf * 144, _0x5f54bf * 64);
  _0x466054.bezierCurveTo(_0x5f54bf * 151, _0x5f54bf * 42, _0x5f54bf * 132, _0x5f54bf * 20, _0x5f54bf * 120, _0x5f54bf * 16);
  _0x466054.bezierCurveTo(_0x5f54bf * 106, _0x5f54bf * 12, _0x5f54bf * 89, _0x5f54bf * 0, _0x5f54bf * 73, _0x5f54bf * 3);
  _0x466054.bezierCurveTo(_0x5f54bf * 51, _0x5f54bf * 5, _0x5f54bf * 36, _0x5f54bf * 20, _0x5f54bf * 25, _0x5f54bf * 28);
  _0x466054.closePath();
  fill_path(_0x466054, undefined, _0x34274e[2], _0x5f54bf * 4);
  circle(_0x466054, _0x5f54bf * 18, _0x5f54bf * 38, _0x5f54bf * 14.866068747318506);
  fill_path(_0x466054, _0x34274e[4], _0x34274e[5], _0x5f54bf * 4);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 39, _0x5f54bf * 30);
  _0x466054.bezierCurveTo(_0x5f54bf * 27, _0x5f54bf * 38, _0x5f54bf * 25, _0x5f54bf * 50, _0x5f54bf * 26, _0x5f54bf * 60);
  _0x466054.bezierCurveTo(_0x5f54bf * 36.5, _0x5f54bf * 58.5, _0x5f54bf * 36.5, _0x5f54bf * 58.5, _0x5f54bf * 47, _0x5f54bf * 57);
  fill_path(_0x466054, _0x34274e[1], _0x34274e[2], _0x5f54bf * 4);
  _0x466054.translate(_0x5f54bf * -7, _0x5f54bf * -20);
  _0x466054.beginPath();
  _0x466054.lineCap = "round";
  _0x466054.lineJoin = "round";
  _0x466054.moveTo(_0x5f54bf * 27, _0x5f54bf * 74);
  _0x466054.bezierCurveTo(_0x5f54bf * 38, _0x5f54bf * 77.5, _0x5f54bf * 38, _0x5f54bf * 77.5, _0x5f54bf * 49, _0x5f54bf * 81);
  _0x466054.bezierCurveTo(_0x5f54bf * 54.5, _0x5f54bf * 75.5, _0x5f54bf * 54.5, _0x5f54bf * 75.5, _0x5f54bf * 60, _0x5f54bf * 70);
  _0x466054.bezierCurveTo(_0x5f54bf * 64, _0x5f54bf * 72, _0x5f54bf * 64, _0x5f54bf * 72, _0x5f54bf * 68, _0x5f54bf * 74);
  _0x466054.bezierCurveTo(_0x5f54bf * 80.5, _0x5f54bf * 67.5, _0x5f54bf * 80.5, _0x5f54bf * 67.5, _0x5f54bf * 93, _0x5f54bf * 61);
  _0x466054.bezierCurveTo(_0x5f54bf * 104.5, _0x5f54bf * 68, _0x5f54bf * 104.5, _0x5f54bf * 68, _0x5f54bf * 116, _0x5f54bf * 75);
  _0x466054.bezierCurveTo(_0x5f54bf * 120.5, _0x5f54bf * 72.5, _0x5f54bf * 120.5, _0x5f54bf * 72.5, _0x5f54bf * 125, _0x5f54bf * 70);
  _0x466054.bezierCurveTo(_0x5f54bf * 129, _0x5f54bf * 75, _0x5f54bf * 129, _0x5f54bf * 75, _0x5f54bf * 133, _0x5f54bf * 80);
  _0x466054.bezierCurveTo(_0x5f54bf * 145.5, _0x5f54bf * 76.5, _0x5f54bf * 145.5, _0x5f54bf * 76.5, _0x5f54bf * 158, _0x5f54bf * 73);
  _0x466054.bezierCurveTo(_0x5f54bf * 158, _0x5f54bf * 87, _0x5f54bf * 158, _0x5f54bf * 93, _0x5f54bf * 155, _0x5f54bf * 95);
  _0x466054.bezierCurveTo(_0x5f54bf * 152.5, _0x5f54bf * 96, _0x5f54bf * 152.5, _0x5f54bf * 96, _0x5f54bf * 150, _0x5f54bf * 97);
  _0x466054.bezierCurveTo(_0x5f54bf * 121, _0x5f54bf * 85, _0x5f54bf * 108, _0x5f54bf * 86, _0x5f54bf * 93, _0x5f54bf * 85);
  _0x466054.bezierCurveTo(_0x5f54bf * 64, _0x5f54bf * 85, _0x5f54bf * 52, _0x5f54bf * 95, _0x5f54bf * 38, _0x5f54bf * 99);
  _0x466054.bezierCurveTo(_0x5f54bf * 36, _0x5f54bf * 98.5, _0x5f54bf * 36, _0x5f54bf * 98.5, _0x5f54bf * 34, _0x5f54bf * 98);
  _0x466054.bezierCurveTo(_0x5f54bf * 25, _0x5f54bf * 98, _0x5f54bf * 27, _0x5f54bf * 91, _0x5f54bf * 27, _0x5f54bf * 76);
  _0x466054.closePath();
  fill_path(_0x466054, _0x34274e[6], _0x34274e[7], _0x5f54bf * 6);
  return _0x3270d1;
}
function create_christmas_hat(_0x317b9c, _0x5c0144, _0x5403b7) {
  var _0xca827c = document.createElement("canvas");
  var _0x2521c5 = _0xca827c.getContext("2d");
  _0xca827c.width = _0x317b9c * 155;
  _0xca827c.height = _0x317b9c * 127;
  _0x2521c5.globalAlpha = 0.5;
  _0x2521c5.translate(0, _0x317b9c * 8);
  _0x2521c5.translate(_0x317b9c * -7, _0x317b9c * -20);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 55, _0x317b9c * 68);
  _0x2521c5.bezierCurveTo(_0x317b9c * 86, _0x317b9c * 64, _0x317b9c * 117, _0x317b9c * 66, _0x317b9c * 134, _0x317b9c * 68);
  _0x2521c5.bezierCurveTo(_0x317b9c * 152, _0x317b9c * 69, _0x317b9c * 165, _0x317b9c * 86, _0x317b9c * 152, _0x317b9c * 104);
  _0x2521c5.bezierCurveTo(_0x317b9c * 146, _0x317b9c * 87, _0x317b9c * 122, _0x317b9c * 89, _0x317b9c * 98, _0x317b9c * 90);
  _0x2521c5.bezierCurveTo(_0x317b9c * 64, _0x317b9c * 89, _0x317b9c * 41, _0x317b9c * 91, _0x317b9c * 36, _0x317b9c * 106);
  _0x2521c5.bezierCurveTo(_0x317b9c * 19, _0x317b9c * 92, _0x317b9c * 31, _0x317b9c * 71, _0x317b9c * 54, _0x317b9c * 69);
  _0x2521c5.closePath();
  fill_path(_0x2521c5, _0x5403b7[0]);
  _0x2521c5.globalAlpha = 1;
  _0x2521c5.translate(0, _0x317b9c * -8);
  _0x2521c5.translate(_0x317b9c * 7, _0x317b9c * 20);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 24, _0x317b9c * 28);
  _0x2521c5.bezierCurveTo(_0x317b9c * 39, _0x317b9c * 30, _0x317b9c * 37, _0x317b9c * 31, _0x317b9c * 40, _0x317b9c * 32);
  _0x2521c5.bezierCurveTo(_0x317b9c * 22, _0x317b9c * 45, _0x317b9c * 26, _0x317b9c * 58, _0x317b9c * 29, _0x317b9c * 66);
  _0x2521c5.bezierCurveTo(_0x317b9c * 86.5, _0x317b9c * 65, _0x317b9c * 86.5, _0x317b9c * 65, _0x317b9c * 144, _0x317b9c * 64);
  _0x2521c5.bezierCurveTo(_0x317b9c * 151, _0x317b9c * 42, _0x317b9c * 132, _0x317b9c * 20, _0x317b9c * 120, _0x317b9c * 16);
  _0x2521c5.bezierCurveTo(_0x317b9c * 106, _0x317b9c * 12, _0x317b9c * 89, _0x317b9c * 0, _0x317b9c * 73, _0x317b9c * 3);
  _0x2521c5.bezierCurveTo(_0x317b9c * 51, _0x317b9c * 5, _0x317b9c * 36, _0x317b9c * 20, _0x317b9c * 25, _0x317b9c * 28);
  _0x2521c5.closePath();
  fill_path(_0x2521c5, _0x5403b7[1], _0x5403b7[2], _0x317b9c * 4);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 30, _0x317b9c * 41);
  _0x2521c5.bezierCurveTo(_0x317b9c * 49, _0x317b9c * 31, _0x317b9c * 53, _0x317b9c * 29, _0x317b9c * 62, _0x317b9c * 27);
  _0x2521c5.bezierCurveTo(_0x317b9c * 59, _0x317b9c * 24, _0x317b9c * 56, _0x317b9c * 25, _0x317b9c * 53, _0x317b9c * 24);
  _0x2521c5.bezierCurveTo(_0x317b9c * 67, _0x317b9c * 15, _0x317b9c * 84, _0x317b9c * 12, _0x317b9c * 120, _0x317b9c * 16);
  _0x2521c5.bezierCurveTo(_0x317b9c * 107, _0x317b9c * 11, _0x317b9c * 96, _0x317b9c * 6, _0x317b9c * 85, _0x317b9c * 2);
  _0x2521c5.bezierCurveTo(_0x317b9c * 59, _0x317b9c * 3, _0x317b9c * 54, _0x317b9c * 7, _0x317b9c * 40, _0x317b9c * 17);
  _0x2521c5.bezierCurveTo(_0x317b9c * 32.5, _0x317b9c * 22.5, _0x317b9c * 32.5, _0x317b9c * 22.5, _0x317b9c * 25, _0x317b9c * 28);
  _0x2521c5.bezierCurveTo(_0x317b9c * 32, _0x317b9c * 30, _0x317b9c * 32, _0x317b9c * 30, _0x317b9c * 39, _0x317b9c * 32);
  _0x2521c5.closePath();
  fill_path(_0x2521c5, _0x5403b7[3]);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 24, _0x317b9c * 28);
  _0x2521c5.bezierCurveTo(_0x317b9c * 39, _0x317b9c * 30, _0x317b9c * 37, _0x317b9c * 31, _0x317b9c * 40, _0x317b9c * 32);
  _0x2521c5.bezierCurveTo(_0x317b9c * 22, _0x317b9c * 45, _0x317b9c * 26, _0x317b9c * 58, _0x317b9c * 29, _0x317b9c * 66);
  _0x2521c5.bezierCurveTo(_0x317b9c * 86.5, _0x317b9c * 65, _0x317b9c * 86.5, _0x317b9c * 65, _0x317b9c * 144, _0x317b9c * 64);
  _0x2521c5.bezierCurveTo(_0x317b9c * 151, _0x317b9c * 42, _0x317b9c * 132, _0x317b9c * 20, _0x317b9c * 120, _0x317b9c * 16);
  _0x2521c5.bezierCurveTo(_0x317b9c * 106, _0x317b9c * 12, _0x317b9c * 89, _0x317b9c * 0, _0x317b9c * 73, _0x317b9c * 3);
  _0x2521c5.bezierCurveTo(_0x317b9c * 51, _0x317b9c * 5, _0x317b9c * 36, _0x317b9c * 20, _0x317b9c * 25, _0x317b9c * 28);
  _0x2521c5.closePath();
  fill_path(_0x2521c5, undefined, _0x5403b7[2], _0x317b9c * 4);
  circle(_0x2521c5, _0x317b9c * 18, _0x317b9c * 38, _0x317b9c * 14.866068747318506);
  fill_path(_0x2521c5, _0x5403b7[4], _0x5403b7[5], _0x317b9c * 4);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 39, _0x317b9c * 30);
  _0x2521c5.bezierCurveTo(_0x317b9c * 27, _0x317b9c * 38, _0x317b9c * 25, _0x317b9c * 50, _0x317b9c * 26, _0x317b9c * 60);
  _0x2521c5.bezierCurveTo(_0x317b9c * 36.5, _0x317b9c * 58.5, _0x317b9c * 36.5, _0x317b9c * 58.5, _0x317b9c * 47, _0x317b9c * 57);
  fill_path(_0x2521c5, _0x5403b7[1], _0x5403b7[2], _0x317b9c * 4);
  _0x2521c5.translate(_0x317b9c * -7, _0x317b9c * -20);
  _0x2521c5.beginPath();
  _0x2521c5.lineCap = "round";
  _0x2521c5.lineJoin = "round";
  _0x2521c5.moveTo(_0x317b9c * 55, _0x317b9c * 68);
  _0x2521c5.bezierCurveTo(_0x317b9c * 86, _0x317b9c * 64, _0x317b9c * 117, _0x317b9c * 66, _0x317b9c * 134, _0x317b9c * 68);
  _0x2521c5.bezierCurveTo(_0x317b9c * 152, _0x317b9c * 69, _0x317b9c * 165, _0x317b9c * 86, _0x317b9c * 152, _0x317b9c * 104);
  _0x2521c5.bezierCurveTo(_0x317b9c * 146, _0x317b9c * 87, _0x317b9c * 122, _0x317b9c * 89, _0x317b9c * 98, _0x317b9c * 90);
  _0x2521c5.bezierCurveTo(_0x317b9c * 64, _0x317b9c * 89, _0x317b9c * 41, _0x317b9c * 91, _0x317b9c * 36, _0x317b9c * 106);
  _0x2521c5.bezierCurveTo(_0x317b9c * 19, _0x317b9c * 92, _0x317b9c * 31, _0x317b9c * 71, _0x317b9c * 54, _0x317b9c * 69);
  _0x2521c5.closePath();
  fill_path(_0x2521c5, _0x5403b7[4], _0x5403b7[5], _0x317b9c * 4);
  return _0xca827c;
}
function create_zombie_hand(_0x1740f8, _0x1f3478) {
  var _0x2d3d9b = document.createElement("canvas");
  var _0x3fa8d2 = _0x2d3d9b.getContext("2d");
  var _0x12c32c = _0x1740f8 * 220;
  var _0x28e838 = _0x1740f8 * 220;
  var _0x505580 = _0x1740f8 * 32;
  var _0x535f75 = _0x1740f8 * 4;
  _0x2d3d9b.width = _0x12c32c;
  _0x2d3d9b.height = _0x28e838;
  _0x3fa8d2.translate(_0x12c32c / 2, _0x28e838 / 2 + _0x1740f8 * 10);
  _0x3fa8d2.globalAlpha = 0.5;
  circle(_0x3fa8d2, 0, 0, _0x505580);
  fill_path(_0x3fa8d2, _0x1f3478[0], _0x1f3478[0]);
  _0x3fa8d2.translate(0, _0x1740f8 * -8);
  _0x3fa8d2.globalAlpha = 1;
  circle(_0x3fa8d2, 0, 0, _0x505580);
  fill_path(_0x3fa8d2, _0x1f3478[1], _0x1f3478[2], _0x535f75);
  return _0x2d3d9b;
}
function create_hand(_0x142bd3, _0x414c8b) {
  var _0x93e7fb = document.createElement("canvas");
  var _0x2e40c0 = _0x93e7fb.getContext("2d");
  var _0x5c3f4d = _0x142bd3 * 40;
  var _0x3a8ad0 = _0x142bd3 * 40;
  var _0x5ecf17 = _0x142bd3 * 16;
  var _0x2e5d43 = _0x142bd3 * 4;
  _0x93e7fb.width = _0x5c3f4d;
  _0x93e7fb.height = _0x3a8ad0;
  _0x2e40c0.translate(_0x5c3f4d / 2, _0x3a8ad0 / 2);
  _0x2e40c0.globalAlpha = 1;
  circle(_0x2e40c0, 0, 0, _0x5ecf17);
  fill_path(_0x2e40c0, _0x414c8b[0], _0x414c8b[1], _0x2e5d43);
  return _0x93e7fb;
}
function create_hand_shadow(_0x4b2e6c, _0x13240f) {
  var _0x12b0ae = document.createElement("canvas");
  var _0xdad7f4 = _0x12b0ae.getContext("2d");
  var _0x3d7709 = _0x4b2e6c * 220;
  var _0x508220 = _0x4b2e6c * 220;
  var _0xece8da = _0x4b2e6c * 16;
  _0x12b0ae.width = _0x3d7709;
  _0x12b0ae.height = _0x508220;
  _0xdad7f4.translate(_0x3d7709 / 2, _0x508220 / 2);
  _0xdad7f4.globalAlpha = 0.5;
  circle(_0xdad7f4, 0, 0, _0xece8da);
  fill_path(_0xdad7f4, _0x13240f[0]);
  _0xdad7f4.globalAlpha = 1;
  return _0x12b0ae;
}
function create_apricot_tree(_0xd2fe61, _0x4faec3, _0x325e65, _0xe27120) {
  var _0x52c7b5 = document.createElement("canvas");
  var _0x3d6563 = _0x52c7b5.getContext("2d");
  var _0x41acbc = _0xd2fe61 * 210;
  var _0x1b8acc = _0xd2fe61 * 205;
  var _0x303a38 = _0x41acbc / 2;
  var _0x58abdd = _0x1b8acc / 2;
  var _0x305816 = _0xd2fe61 * 30;
  var _0x4bb5eb = _0xd2fe61 * 20;
  var _0x1851ad = _0xd2fe61 * 200;
  var _0x390fd9 = _0xd2fe61 * 180;
  var _0x367bad = _0xd2fe61 * 80;
  var _0x300209 = _0x1851ad / 2;
  var _0x1b4429 = _0x390fd9 / 2;
  var _0x37ab87 = 4;
  _0x52c7b5.width = _0x41acbc;
  _0x52c7b5.height = _0x1b8acc;
  _0x52c7b5.width = _0xd2fe61 * 419;
  _0x52c7b5.height = _0xd2fe61 * 412;
  if (_0xe27120 == 1) {
    _0x3d6563.save();
    _0x3d6563.translate(_0xd2fe61 * 10, _0xd2fe61 * 0);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 117.99996948242188, _0xd2fe61 * 216.40621948242188);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 86.99996948242188, _0xd2fe61 * 221.40621948242188, _0xd2fe61 * 74.99996948242188, _0xd2fe61 * 217.40621948242188, _0xd2fe61 * 60.999969482421875, _0xd2fe61 * 205.40621948242188);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 114.99996948242188, _0xd2fe61 * 227.40621948242188);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 90.99996948242188, _0xd2fe61 * 233.40621948242188, _0xd2fe61 * 66.99996948242188, _0xd2fe61 * 228.40621948242188, _0xd2fe61 * 43.999969482421875, _0xd2fe61 * 225.40621948242188);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 110.99996948242188, _0xd2fe61 * 236.40621948242188);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 94.99996948242188, _0xd2fe61 * 244.40621948242188, _0xd2fe61 * 79.99996948242188, _0xd2fe61 * 249.40621948242188, _0xd2fe61 * 60.999969482421875, _0xd2fe61 * 249.40621948242188);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 111.99996948242188, _0xd2fe61 * 206.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 91.99996948242188, _0xd2fe61 * 206.29513549804688, _0xd2fe61 * 87.99996948242188, _0xd2fe61 * 201.29513549804688, _0xd2fe61 * 79.99996948242188, _0xd2fe61 * 192.29513549804688);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 109.99996948242188, _0xd2fe61 * 249.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 97.99996948242188, _0xd2fe61 * 263.18402099609375, _0xd2fe61 * 85.99996948242188, _0xd2fe61 * 271.18402099609375, _0xd2fe61 * 65.99996948242188, _0xd2fe61 * 277.18402099609375);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 105.99996948242188, _0xd2fe61 * 192.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 99.49996948242188, _0xd2fe61 * 197.68402099609375, _0xd2fe61 * 99.49996948242188, _0xd2fe61 * 197.68402099609375, _0xd2fe61 * 92.99996948242188, _0xd2fe61 * 203.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 95.99996948242188, _0xd2fe61 * 213.18402099609375, _0xd2fe61 * 95.99996948242188, _0xd2fe61 * 215.18402099609375, _0xd2fe61 * 89.99996948242188, _0xd2fe61 * 219.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 91.99996948242188, _0xd2fe61 * 223.18402099609375, _0xd2fe61 * 91.99996948242188, _0xd2fe61 * 226.18402099609375, _0xd2fe61 * 87.99996948242188, _0xd2fe61 * 230.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 89.99996948242188, _0xd2fe61 * 234.18402099609375, _0xd2fe61 * 91.99996948242188, _0xd2fe61 * 237.18402099609375, _0xd2fe61 * 90.99996948242188, _0xd2fe61 * 244.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 96.99996948242188, _0xd2fe61 * 252.18402099609375, _0xd2fe61 * 96.99996948242188, _0xd2fe61 * 256.18402099609375, _0xd2fe61 * 95.99996948242188, _0xd2fe61 * 262.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 106.49996948242188, _0xd2fe61 * 264.18402099609375, _0xd2fe61 * 106.49996948242188, _0xd2fe61 * 264.18402099609375, _0xd2fe61 * 116.99996948242188, _0xd2fe61 * 266.18402099609375);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 104.99996948242188, _0xd2fe61 * 183.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 99.99996948242188, _0xd2fe61 * 193.29513549804688, _0xd2fe61 * 93.99996948242188, _0xd2fe61 * 195.29513549804688, _0xd2fe61 * 89.99996948242188, _0xd2fe61 * 201.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 86.99996948242188, _0xd2fe61 * 212.29513549804688, _0xd2fe61 * 85.99996948242188, _0xd2fe61 * 214.29513549804688, _0xd2fe61 * 81.99996948242188, _0xd2fe61 * 215.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 83.99996948242188, _0xd2fe61 * 223.29513549804688, _0xd2fe61 * 83.99996948242188, _0xd2fe61 * 227.29513549804688, _0xd2fe61 * 79.99996948242188, _0xd2fe61 * 230.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 83.99996948242188, _0xd2fe61 * 235.29513549804688, _0xd2fe61 * 84.99996948242188, _0xd2fe61 * 240.29513549804688, _0xd2fe61 * 79.99996948242188, _0xd2fe61 * 246.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 86.99996948242188, _0xd2fe61 * 251.29513549804688, _0xd2fe61 * 91.99996948242188, _0xd2fe61 * 256.2951354980469, _0xd2fe61 * 89.99996948242188, _0xd2fe61 * 266.2951354980469);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 102.99996948242188, _0xd2fe61 * 269.2951354980469, _0xd2fe61 * 102.99996948242188, _0xd2fe61 * 269.2951354980469, _0xd2fe61 * 115.99996948242188, _0xd2fe61 * 272.2951354980469);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 107.99996948242188, _0xd2fe61 * 177.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 95.99996948242188, _0xd2fe61 * 187.35067749023438, _0xd2fe61 * 95.99996948242188, _0xd2fe61 * 187.35067749023438, _0xd2fe61 * 83.99996948242188, _0xd2fe61 * 196.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 82.99996948242188, _0xd2fe61 * 203.85067749023438, _0xd2fe61 * 80.99996948242188, _0xd2fe61 * 209.85067749023438, _0xd2fe61 * 72.99996948242188, _0xd2fe61 * 210.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 73.99996948242188, _0xd2fe61 * 220.85067749023438, _0xd2fe61 * 73.99996948242188, _0xd2fe61 * 221.85067749023438, _0xd2fe61 * 66.99996948242188, _0xd2fe61 * 227.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 71.99996948242188, _0xd2fe61 * 235.85067749023438, _0xd2fe61 * 73.99996948242188, _0xd2fe61 * 239.85067749023438, _0xd2fe61 * 71.99996948242188, _0xd2fe61 * 247.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 80.99996948242188, _0xd2fe61 * 257.8506774902344, _0xd2fe61 * 81.99996948242188, _0xd2fe61 * 263.8506774902344, _0xd2fe61 * 77.99996948242188, _0xd2fe61 * 271.8506774902344);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 95.49996948242188, _0xd2fe61 * 272.8506774902344, _0xd2fe61 * 95.49996948242188, _0xd2fe61 * 272.8506774902344, _0xd2fe61 * 112.99996948242188, _0xd2fe61 * 273.8506774902344);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.restore();
  } else if (_0xe27120 == 2) {
    _0x3d6563.save();
    _0x3d6563.translate(_0xd2fe61 * 130, _0xd2fe61 * 35);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 170.99996948242188, _0xd2fe61 * 133.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 195.99996948242188, _0xd2fe61 * 129.85067749023438, _0xd2fe61 * 196.99996948242188, _0xd2fe61 * 111.85067749023438, _0xd2fe61 * 200.99996948242188, _0xd2fe61 * 88.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 169.99996948242188, _0xd2fe61 * 143.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 189.99996948242188, _0xd2fe61 * 145.85067749023438, _0xd2fe61 * 207.99996948242188, _0xd2fe61 * 126.85067749023438, _0xd2fe61 * 222.99996948242188, _0xd2fe61 * 100.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 170.99996948242188, _0xd2fe61 * 157.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 193.99996948242188, _0xd2fe61 * 160.85067749023438, _0xd2fe61 * 210.99996948242188, _0xd2fe61 * 151.85067749023438, _0xd2fe61 * 232.99996948242188, _0xd2fe61 * 139.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 169.99996948242188, _0xd2fe61 * 168.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 192.99996948242188, _0xd2fe61 * 175.85067749023438, _0xd2fe61 * 203.99996948242188, _0xd2fe61 * 177.85067749023438, _0xd2fe61 * 245.99996948242188, _0xd2fe61 * 168.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 167.99996948242188, _0xd2fe61 * 168.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 183.99996948242188, _0xd2fe61 * 189.85067749023438, _0xd2fe61 * 191.99996948242188, _0xd2fe61 * 193.85067749023438, _0xd2fe61 * 220.99996948242188, _0xd2fe61 * 196.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 176.99996948242188, _0xd2fe61 * 117.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 181.99996948242188, _0xd2fe61 * 120.85067749023438, _0xd2fe61 * 181.99996948242188, _0xd2fe61 * 120.85067749023438, _0xd2fe61 * 186.99996948242188, _0xd2fe61 * 123.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 183.99996948242188, _0xd2fe61 * 137.85067749023438, _0xd2fe61 * 185.99996948242188, _0xd2fe61 * 136.85067749023438, _0xd2fe61 * 190.99996948242188, _0xd2fe61 * 136.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 186.99996948242188, _0xd2fe61 * 147.85067749023438, _0xd2fe61 * 189.99996948242188, _0xd2fe61 * 152.85067749023438, _0xd2fe61 * 193.99996948242188, _0xd2fe61 * 155.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 187.99996948242188, _0xd2fe61 * 165.85067749023438, _0xd2fe61 * 190.99996948242188, _0xd2fe61 * 169.85067749023438, _0xd2fe61 * 190.99996948242188, _0xd2fe61 * 172.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 186.99996948242188, _0xd2fe61 * 183.85067749023438, _0xd2fe61 * 186.99996948242188, _0xd2fe61 * 185.85067749023438, _0xd2fe61 * 189.99996948242188, _0xd2fe61 * 188.85067749023438);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 182.49996948242188, _0xd2fe61 * 195.35067749023438, _0xd2fe61 * 182.49996948242188, _0xd2fe61 * 195.35067749023438, _0xd2fe61 * 174.99996948242188, _0xd2fe61 * 201.85067749023438);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 176.99996948242188, _0xd2fe61 * 112.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 183.99996948242188, _0xd2fe61 * 119.18402099609375, _0xd2fe61 * 186.99996948242188, _0xd2fe61 * 117.18402099609375, _0xd2fe61 * 192.99996948242188, _0xd2fe61 * 116.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 191.99996948242188, _0xd2fe61 * 126.18402099609375, _0xd2fe61 * 193.99996948242188, _0xd2fe61 * 130.18402099609375, _0xd2fe61 * 199.99996948242188, _0xd2fe61 * 130.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 194.99996948242188, _0xd2fe61 * 145.18402099609375, _0xd2fe61 * 197.99996948242188, _0xd2fe61 * 147.18402099609375, _0xd2fe61 * 201.99996948242188, _0xd2fe61 * 153.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 196.99996948242188, _0xd2fe61 * 164.18402099609375, _0xd2fe61 * 197.99996948242188, _0xd2fe61 * 169.18402099609375, _0xd2fe61 * 201.99996948242188, _0xd2fe61 * 174.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 194.99996948242188, _0xd2fe61 * 184.18402099609375, _0xd2fe61 * 196.99996948242188, _0xd2fe61 * 187.18402099609375, _0xd2fe61 * 200.99996948242188, _0xd2fe61 * 193.18402099609375);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 185.99996948242188, _0xd2fe61 * 195.18402099609375, _0xd2fe61 * 181.99996948242188, _0xd2fe61 * 201.18402099609375, _0xd2fe61 * 174.99996948242188, _0xd2fe61 * 210.18402099609375);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 176.99996948242188, _0xd2fe61 * 101.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 181.99996948242188, _0xd2fe61 * 108.29513549804688, _0xd2fe61 * 189.99996948242188, _0xd2fe61 * 110.29513549804688, _0xd2fe61 * 195.99996948242188, _0xd2fe61 * 107.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 197.99996948242188, _0xd2fe61 * 121.29513549804688, _0xd2fe61 * 200.99996948242188, _0xd2fe61 * 122.29513549804688, _0xd2fe61 * 206.99996948242188, _0xd2fe61 * 122.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 201.99996948242188, _0xd2fe61 * 138.29513549804688, _0xd2fe61 * 204.99996948242188, _0xd2fe61 * 142.29513549804688, _0xd2fe61 * 211.99996948242188, _0xd2fe61 * 148.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 201.99996948242188, _0xd2fe61 * 156.29513549804688, _0xd2fe61 * 205.99996948242188, _0xd2fe61 * 167.29513549804688, _0xd2fe61 * 213.99996948242188, _0xd2fe61 * 173.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 204.99996948242188, _0xd2fe61 * 181.29513549804688, _0xd2fe61 * 204.99996948242188, _0xd2fe61 * 187.29513549804688, _0xd2fe61 * 205.99996948242188, _0xd2fe61 * 193.29513549804688);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 190.99996948242188, _0xd2fe61 * 198.29513549804688, _0xd2fe61 * 181.99996948242188, _0xd2fe61 * 205.29513549804688, _0xd2fe61 * 174.99996948242188, _0xd2fe61 * 214.29513549804688);
    fill_path(_0x3d6563, undefined, _0x4faec3[4], _0xd2fe61 * 3);
    _0x3d6563.restore();
  }
  _0x3d6563.translate(_0x52c7b5.width / 2, _0x52c7b5.height / 2);
  if (!_0xe27120) {
    _0x3d6563.globalAlpha = 0.5;
    round_rect(_0x3d6563, -_0x300209, -_0x1b4429, _0x1851ad, _0x390fd9 + _0x4bb5eb, _0x305816);
    fill_path(_0x3d6563, _0x4faec3[0]);
    if (_0x325e65) {
      _0x3d6563.rotate(Math.PI);
    }
    _0x3d6563.globalAlpha = 1;
    round_rect(_0x3d6563, -_0x300209, -_0x1b4429, _0x1851ad, _0x390fd9, _0x305816);
    fill_path(_0x3d6563, _0x4faec3[1], _0x4faec3[2], _0x37ab87);
    _0x3d6563.globalAlpha = 1;
    round_rect(_0x3d6563, -_0x300209 + _0xd2fe61 * 35, -_0x1b4429 + _0xd2fe61 * 20, _0x1851ad - _0xd2fe61 * 50, _0x390fd9 - _0xd2fe61 * 50, _0x305816 - _0xd2fe61 * 10);
    fill_path(_0x3d6563, _0x4faec3[3]);
  }
  if (_0xe27120 == 3) {
    _0x3d6563.translate(-_0x52c7b5.width / 2, -_0x52c7b5.height / 2);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 121, _0xd2fe61 * 190);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 129, _0xd2fe61 * 186, _0xd2fe61 * 137, _0xd2fe61 * 183, _0xd2fe61 * 135, _0xd2fe61 * 163);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 131, _0xd2fe61 * 135, _0xd2fe61 * 153, _0xd2fe61 * 127, _0xd2fe61 * 177, _0xd2fe61 * 124);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 198, _0xd2fe61 * 120, _0xd2fe61 * 208, _0xd2fe61 * 122, _0xd2fe61 * 226, _0xd2fe61 * 128);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 261, _0xd2fe61 * 112, _0xd2fe61 * 271, _0xd2fe61 * 126, _0xd2fe61 * 287, _0xd2fe61 * 147);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 310, _0xd2fe61 * 163, _0xd2fe61 * 304, _0xd2fe61 * 183, _0xd2fe61 * 283, _0xd2fe61 * 196);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 296, _0xd2fe61 * 249, _0xd2fe61 * 278, _0xd2fe61 * 262, _0xd2fe61 * 253, _0xd2fe61 * 263);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 210, _0xd2fe61 * 264, _0xd2fe61 * 188, _0xd2fe61 * 252, _0xd2fe61 * 177, _0xd2fe61 * 234);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 133, _0xd2fe61 * 242, _0xd2fe61 * 123, _0xd2fe61 * 241, _0xd2fe61 * 115, _0xd2fe61 * 225);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 109, _0xd2fe61 * 206, _0xd2fe61 * 115, _0xd2fe61 * 193, _0xd2fe61 * 121, _0xd2fe61 * 190);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 219, _0xd2fe61 * 144);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 251, _0xd2fe61 * 121, _0xd2fe61 * 277, _0xd2fe61 * 136, _0xd2fe61 * 276, _0xd2fe61 * 159);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 276, _0xd2fe61 * 176, _0xd2fe61 * 273, _0xd2fe61 * 191, _0xd2fe61 * 242, _0xd2fe61 * 193);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 226, _0xd2fe61 * 228, _0xd2fe61 * 155, _0xd2fe61 * 219, _0xd2fe61 * 150, _0xd2fe61 * 183);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 142, _0xd2fe61 * 144, _0xd2fe61 * 174, _0xd2fe61 * 127, _0xd2fe61 * 219, _0xd2fe61 * 144);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 123, _0xd2fe61 * 214);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 119, _0xd2fe61 * 198, _0xd2fe61 * 129, _0xd2fe61 * 189, _0xd2fe61 * 146, _0xd2fe61 * 194);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 158, _0xd2fe61 * 201, _0xd2fe61 * 165, _0xd2fe61 * 218, _0xd2fe61 * 147, _0xd2fe61 * 226);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 135, _0xd2fe61 * 230, _0xd2fe61 * 125, _0xd2fe61 * 222, _0xd2fe61 * 123, _0xd2fe61 * 214);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 257, _0xd2fe61 * 199);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 264, _0xd2fe61 * 199, _0xd2fe61 * 275, _0xd2fe61 * 213, _0xd2fe61 * 261, _0xd2fe61 * 220);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 246, _0xd2fe61 * 225, _0xd2fe61 * 235, _0xd2fe61 * 200, _0xd2fe61 * 257, _0xd2fe61 * 199);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.translate(_0xd2fe61 * -5, _0xd2fe61 * 55);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 186, _0xd2fe61 * 123);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 198, _0xd2fe61 * 115, _0xd2fe61 * 219, _0xd2fe61 * 110, _0xd2fe61 * 219, _0xd2fe61 * 123);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 216, _0xd2fe61 * 135, _0xd2fe61 * 171, _0xd2fe61 * 143, _0xd2fe61 * 186, _0xd2fe61 * 123);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.translate(_0xd2fe61 * 5, _0xd2fe61 * -55);
    _0x3d6563.translate(_0xd2fe61 * -5, _0xd2fe61 * 15);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 171, _0xd2fe61 * 241);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 189, _0xd2fe61 * 234, _0xd2fe61 * 200, _0xd2fe61 * 248, _0xd2fe61 * 189, _0xd2fe61 * 254);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 179, _0xd2fe61 * 260, _0xd2fe61 * 158, _0xd2fe61 * 246, _0xd2fe61 * 171, _0xd2fe61 * 241);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
  } else if (_0xe27120 == 4) {
    _0x3d6563.translate(-_0x52c7b5.width / 2, -_0x52c7b5.height / 2);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 30, _0xd2fe61 * 167);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 47, _0xd2fe61 * 144, _0xd2fe61 * 64, _0xd2fe61 * 140, _0xd2fe61 * 80, _0xd2fe61 * 147);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 95, _0xd2fe61 * 154, _0xd2fe61 * 95, _0xd2fe61 * 159, _0xd2fe61 * 100, _0xd2fe61 * 179);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 105, _0xd2fe61 * 202, _0xd2fe61 * 95, _0xd2fe61 * 218, _0xd2fe61 * 69, _0xd2fe61 * 218);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 48, _0xd2fe61 * 236, _0xd2fe61 * 26, _0xd2fe61 * 223, _0xd2fe61 * 28, _0xd2fe61 * 213);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 28, _0xd2fe61 * 205, _0xd2fe61 * 29, _0xd2fe61 * 199, _0xd2fe61 * 32, _0xd2fe61 * 195);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 21, _0xd2fe61 * 183, _0xd2fe61 * 27, _0xd2fe61 * 173, _0xd2fe61 * 30, _0xd2fe61 * 167);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 26, _0xd2fe61 * 145);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 32, _0xd2fe61 * 138, _0xd2fe61 * 37, _0xd2fe61 * 137, _0xd2fe61 * 40, _0xd2fe61 * 139);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 43, _0xd2fe61 * 140, _0xd2fe61 * 41, _0xd2fe61 * 150, _0xd2fe61 * 31, _0xd2fe61 * 159);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 23, _0xd2fe61 * 166, _0xd2fe61 * 17, _0xd2fe61 * 158, _0xd2fe61 * 26, _0xd2fe61 * 145);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 13, _0xd2fe61 * 193);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 21, _0xd2fe61 * 187, _0xd2fe61 * 30, _0xd2fe61 * 190, _0xd2fe61 * 20, _0xd2fe61 * 202);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 13, _0xd2fe61 * 208, _0xd2fe61 * 7, _0xd2fe61 * 202, _0xd2fe61 * 13, _0xd2fe61 * 193);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 121, _0xd2fe61 * 190);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 129, _0xd2fe61 * 186, _0xd2fe61 * 137, _0xd2fe61 * 183, _0xd2fe61 * 135, _0xd2fe61 * 163);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 131, _0xd2fe61 * 135, _0xd2fe61 * 153, _0xd2fe61 * 127, _0xd2fe61 * 177, _0xd2fe61 * 124);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 198, _0xd2fe61 * 120, _0xd2fe61 * 208, _0xd2fe61 * 122, _0xd2fe61 * 226, _0xd2fe61 * 128);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 261, _0xd2fe61 * 112, _0xd2fe61 * 271, _0xd2fe61 * 126, _0xd2fe61 * 287, _0xd2fe61 * 147);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 310, _0xd2fe61 * 163, _0xd2fe61 * 304, _0xd2fe61 * 183, _0xd2fe61 * 283, _0xd2fe61 * 196);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 296, _0xd2fe61 * 249, _0xd2fe61 * 278, _0xd2fe61 * 262, _0xd2fe61 * 253, _0xd2fe61 * 263);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 210, _0xd2fe61 * 264, _0xd2fe61 * 188, _0xd2fe61 * 252, _0xd2fe61 * 177, _0xd2fe61 * 234);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 133, _0xd2fe61 * 242, _0xd2fe61 * 123, _0xd2fe61 * 241, _0xd2fe61 * 115, _0xd2fe61 * 225);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 109, _0xd2fe61 * 206, _0xd2fe61 * 115, _0xd2fe61 * 193, _0xd2fe61 * 121, _0xd2fe61 * 190);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 335, _0xd2fe61 * 196);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 312, _0xd2fe61 * 208, _0xd2fe61 * 300, _0xd2fe61 * 185, _0xd2fe61 * 309, _0xd2fe61 * 167);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 314, _0xd2fe61 * 141, _0xd2fe61 * 339, _0xd2fe61 * 127, _0xd2fe61 * 359, _0xd2fe61 * 144);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 363, _0xd2fe61 * 148, _0xd2fe61 * 364, _0xd2fe61 * 150, _0xd2fe61 * 364, _0xd2fe61 * 150);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 392, _0xd2fe61 * 143, _0xd2fe61 * 396, _0xd2fe61 * 183, _0xd2fe61 * 378, _0xd2fe61 * 204);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 367, _0xd2fe61 * 215, _0xd2fe61 * 339, _0xd2fe61 * 208, _0xd2fe61 * 335, _0xd2fe61 * 196);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 349, _0xd2fe61 * 212);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 339, _0xd2fe61 * 216, _0xd2fe61 * 334, _0xd2fe61 * 208, _0xd2fe61 * 341, _0xd2fe61 * 203);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 353, _0xd2fe61 * 198, _0xd2fe61 * 361, _0xd2fe61 * 205, _0xd2fe61 * 349, _0xd2fe61 * 212);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 46, _0xd2fe61 * 165);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 55, _0xd2fe61 * 148, _0xd2fe61 * 85, _0xd2fe61 * 157, _0xd2fe61 * 83, _0xd2fe61 * 175);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 99, _0xd2fe61 * 185, _0xd2fe61 * 89, _0xd2fe61 * 212, _0xd2fe61 * 66, _0xd2fe61 * 204);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 55, _0xd2fe61 * 212, _0xd2fe61 * 43, _0xd2fe61 * 212, _0xd2fe61 * 41, _0xd2fe61 * 202);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 39, _0xd2fe61 * 194, _0xd2fe61 * 42, _0xd2fe61 * 187, _0xd2fe61 * 49, _0xd2fe61 * 185);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 44, _0xd2fe61 * 175, _0xd2fe61 * 45, _0xd2fe61 * 172, _0xd2fe61 * 46, _0xd2fe61 * 165);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 219, _0xd2fe61 * 144);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 251, _0xd2fe61 * 121, _0xd2fe61 * 277, _0xd2fe61 * 136, _0xd2fe61 * 276, _0xd2fe61 * 159);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 276, _0xd2fe61 * 176, _0xd2fe61 * 273, _0xd2fe61 * 191, _0xd2fe61 * 242, _0xd2fe61 * 193);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 226, _0xd2fe61 * 228, _0xd2fe61 * 155, _0xd2fe61 * 219, _0xd2fe61 * 150, _0xd2fe61 * 183);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 142, _0xd2fe61 * 144, _0xd2fe61 * 174, _0xd2fe61 * 127, _0xd2fe61 * 219, _0xd2fe61 * 144);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 123, _0xd2fe61 * 214);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 119, _0xd2fe61 * 198, _0xd2fe61 * 129, _0xd2fe61 * 189, _0xd2fe61 * 146, _0xd2fe61 * 194);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 158, _0xd2fe61 * 201, _0xd2fe61 * 165, _0xd2fe61 * 218, _0xd2fe61 * 147, _0xd2fe61 * 226);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 135, _0xd2fe61 * 230, _0xd2fe61 * 125, _0xd2fe61 * 222, _0xd2fe61 * 123, _0xd2fe61 * 214);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 257, _0xd2fe61 * 199);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 264, _0xd2fe61 * 199, _0xd2fe61 * 275, _0xd2fe61 * 213, _0xd2fe61 * 261, _0xd2fe61 * 220);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 246, _0xd2fe61 * 225, _0xd2fe61 * 235, _0xd2fe61 * 200, _0xd2fe61 * 257, _0xd2fe61 * 199);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.translate(_0xd2fe61 * -5, _0xd2fe61 * 55);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 186, _0xd2fe61 * 123);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 198, _0xd2fe61 * 115, _0xd2fe61 * 219, _0xd2fe61 * 110, _0xd2fe61 * 219, _0xd2fe61 * 123);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 216, _0xd2fe61 * 135, _0xd2fe61 * 171, _0xd2fe61 * 143, _0xd2fe61 * 186, _0xd2fe61 * 123);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.translate(_0xd2fe61 * 5, _0xd2fe61 * -55);
    _0x3d6563.translate(_0xd2fe61 * -5, _0xd2fe61 * 15);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 171, _0xd2fe61 * 241);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 189, _0xd2fe61 * 234, _0xd2fe61 * 200, _0xd2fe61 * 248, _0xd2fe61 * 189, _0xd2fe61 * 254);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 179, _0xd2fe61 * 260, _0xd2fe61 * 158, _0xd2fe61 * 246, _0xd2fe61 * 171, _0xd2fe61 * 241);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[5]);
    _0x3d6563.beginPath();
    _0x3d6563.lineCap = "round";
    _0x3d6563.lineJoin = "round";
    _0x3d6563.moveTo(_0xd2fe61 * 367, _0xd2fe61 * 164);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 380, _0xd2fe61 * 160, _0xd2fe61 * 391, _0xd2fe61 * 185, _0xd2fe61 * 371, _0xd2fe61 * 189);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 362, _0xd2fe61 * 192, _0xd2fe61 * 354, _0xd2fe61 * 191, _0xd2fe61 * 350, _0xd2fe61 * 185);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 326, _0xd2fe61 * 205, _0xd2fe61 * 314, _0xd2fe61 * 182, _0xd2fe61 * 316, _0xd2fe61 * 171);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 317, _0xd2fe61 * 150, _0xd2fe61 * 332, _0xd2fe61 * 143, _0xd2fe61 * 347, _0xd2fe61 * 147);
    _0x3d6563.bezierCurveTo(_0xd2fe61 * 361, _0xd2fe61 * 151, _0xd2fe61 * 366, _0xd2fe61 * 158, _0xd2fe61 * 367, _0xd2fe61 * 164);
    _0x3d6563.closePath();
    fill_path(_0x3d6563, _0x4faec3[4]);
  }
  return _0x52c7b5;
}
function create_music_button(_0x41483f, _0x2ecc2f, _0x36ee21, _0x4b49f0) {
  var _0x20a200 = document.createElement("canvas");
  var _0x116508 = _0x20a200.getContext("2d");
  _0x20a200.width = _0x41483f * 121;
  _0x20a200.height = _0x41483f * 130;
  _0x116508.translate(0, _0x41483f * 20);
  if (_0x36ee21 == 1) {
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 6, _0x41483f * 23);
    _0x116508.bezierCurveTo(_0x41483f * 6, _0x41483f * 46, _0x41483f * 6, _0x41483f * 46, _0x41483f * 6, _0x41483f * 69);
    _0x116508.bezierCurveTo(_0x41483f * 21, _0x41483f * 69, _0x41483f * 21, _0x41483f * 69, _0x41483f * 36, _0x41483f * 69);
    _0x116508.bezierCurveTo(_0x41483f * 45.5, _0x41483f * 78.5, _0x41483f * 45.5, _0x41483f * 78.5, _0x41483f * 55, _0x41483f * 88);
    _0x116508.bezierCurveTo(_0x41483f * 55.5, _0x41483f * 45.5, _0x41483f * 55.5, _0x41483f * 45.5, _0x41483f * 56, _0x41483f * 3);
    _0x116508.bezierCurveTo(_0x41483f * 47, _0x41483f * 14, _0x41483f * 47, _0x41483f * 14, _0x41483f * 38, _0x41483f * 25);
    _0x116508.bezierCurveTo(_0x41483f * 23, _0x41483f * 25, _0x41483f * 23, _0x41483f * 25, _0x41483f * 6, _0x41483f * 23);
    _0x116508.closePath();
    fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 13);
  }
  _0x116508.beginPath();
  _0x116508.lineCap = "round";
  _0x116508.lineJoin = "round";
  _0x116508.moveTo(_0x41483f * 6, _0x41483f * 23);
  _0x116508.bezierCurveTo(_0x41483f * 6, _0x41483f * 46, _0x41483f * 6, _0x41483f * 46, _0x41483f * 6, _0x41483f * 69);
  _0x116508.bezierCurveTo(_0x41483f * 21, _0x41483f * 69, _0x41483f * 21, _0x41483f * 69, _0x41483f * 36, _0x41483f * 69);
  _0x116508.bezierCurveTo(_0x41483f * 45.5, _0x41483f * 78.5, _0x41483f * 45.5, _0x41483f * 78.5, _0x41483f * 55, _0x41483f * 88);
  _0x116508.bezierCurveTo(_0x41483f * 55.5, _0x41483f * 45.5, _0x41483f * 55.5, _0x41483f * 45.5, _0x41483f * 56, _0x41483f * 3);
  _0x116508.bezierCurveTo(_0x41483f * 47, _0x41483f * 14, _0x41483f * 47, _0x41483f * 14, _0x41483f * 38, _0x41483f * 25);
  _0x116508.bezierCurveTo(_0x41483f * 23, _0x41483f * 25, _0x41483f * 23, _0x41483f * 25, _0x41483f * 6, _0x41483f * 23);
  _0x116508.closePath();
  fill_path(_0x116508, _0x2ecc2f[1], _0x2ecc2f[2], _0x41483f * 4);
  if (_0x4b49f0 == 1) {
    _0x116508.translate(0, _0x41483f * 5);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 67, _0x41483f * 30);
    _0x116508.bezierCurveTo(_0x41483f * 73, _0x41483f * 47, _0x41483f * 69, _0x41483f * 45, _0x41483f * 67, _0x41483f * 58);
    fill_path(_0x116508, undefined, _0x2ecc2f[0], _0x41483f * 10);
    _0x116508.translate(3, _0x41483f * 0);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 70, _0x41483f * 17);
    _0x116508.bezierCurveTo(_0x41483f * 83, _0x41483f * 45, _0x41483f * 76, _0x41483f * 55, _0x41483f * 70, _0x41483f * 69);
    fill_path(_0x116508, undefined, _0x2ecc2f[0], _0x41483f * 10);
    _0x116508.translate(3, _0x41483f * 0);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 76, _0x41483f * 8);
    _0x116508.bezierCurveTo(_0x41483f * 88, _0x41483f * 31, _0x41483f * 89, _0x41483f * 55, _0x41483f * 76, _0x41483f * 79);
    fill_path(_0x116508, undefined, _0x2ecc2f[0], _0x41483f * 10);
    if (_0x36ee21 == 1) {
      _0x116508.translate(_0x41483f * -6, _0x41483f * -5);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 67, _0x41483f * 30);
      _0x116508.bezierCurveTo(_0x41483f * 73, _0x41483f * 47, _0x41483f * 69, _0x41483f * 45, _0x41483f * 67, _0x41483f * 58);
      fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 18);
      _0x116508.translate(3, _0x41483f * 0);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 70, _0x41483f * 17);
      _0x116508.bezierCurveTo(_0x41483f * 83, _0x41483f * 45, _0x41483f * 76, _0x41483f * 55, _0x41483f * 70, _0x41483f * 69);
      fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 18);
      _0x116508.translate(3, _0x41483f * 0);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 76, _0x41483f * 8);
      _0x116508.bezierCurveTo(_0x41483f * 88, _0x41483f * 31, _0x41483f * 89, _0x41483f * 55, _0x41483f * 76, _0x41483f * 79);
      fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 18);
      _0x116508.translate(-6, _0x41483f * 0);
    } else {
      _0x116508.translate(_0x41483f * -6, _0x41483f * -5);
    }
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 67, _0x41483f * 30);
    _0x116508.bezierCurveTo(_0x41483f * 73, _0x41483f * 47, _0x41483f * 69, _0x41483f * 45, _0x41483f * 67, _0x41483f * 58);
    fill_path(_0x116508, undefined, _0x2ecc2f[2], _0x41483f * 10);
    _0x116508.translate(3, _0x41483f * 0);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 70, _0x41483f * 17);
    _0x116508.bezierCurveTo(_0x41483f * 83, _0x41483f * 45, _0x41483f * 76, _0x41483f * 55, _0x41483f * 70, _0x41483f * 69);
    fill_path(_0x116508, undefined, _0x2ecc2f[2], _0x41483f * 10);
    _0x116508.translate(3, _0x41483f * 0);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 76, _0x41483f * 8);
    _0x116508.bezierCurveTo(_0x41483f * 88, _0x41483f * 31, _0x41483f * 89, _0x41483f * 55, _0x41483f * 76, _0x41483f * 79);
    fill_path(_0x116508, undefined, _0x2ecc2f[2], _0x41483f * 10);
  } else {
    if (_0x36ee21 == 1) {
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 108, _0x41483f * 27);
      _0x116508.bezierCurveTo(_0x41483f * 94, _0x41483f * 45.5, _0x41483f * 94, _0x41483f * 45.5, _0x41483f * 80, _0x41483f * 64);
      _0x116508.closePath();
      fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 18);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 79, _0x41483f * 30);
      _0x116508.bezierCurveTo(_0x41483f * 93, _0x41483f * 47, _0x41483f * 93, _0x41483f * 47, _0x41483f * 107, _0x41483f * 64);
      _0x116508.closePath();
      fill_path(_0x116508, undefined, _0x2ecc2f[3], _0x41483f * 18);
    } else {
      _0x116508.translate(0, _0x41483f * -5);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 108, _0x41483f * 27);
      _0x116508.bezierCurveTo(_0x41483f * 94, _0x41483f * 45.5, _0x41483f * 94, _0x41483f * 45.5, _0x41483f * 80, _0x41483f * 64);
      _0x116508.closePath();
      fill_path(_0x116508, undefined, _0x2ecc2f[0], _0x41483f * 7);
      _0x116508.beginPath();
      _0x116508.lineCap = "round";
      _0x116508.lineJoin = "round";
      _0x116508.moveTo(_0x41483f * 79, _0x41483f * 30);
      _0x116508.bezierCurveTo(_0x41483f * 93, _0x41483f * 47, _0x41483f * 93, _0x41483f * 47, _0x41483f * 107, _0x41483f * 64);
      _0x116508.closePath();
      fill_path(_0x116508, undefined, _0x2ecc2f[0], _0x41483f * 7);
      _0x116508.translate(0, _0x41483f * 5);
    }
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 108, _0x41483f * 27);
    _0x116508.bezierCurveTo(_0x41483f * 94, _0x41483f * 45.5, _0x41483f * 94, _0x41483f * 45.5, _0x41483f * 80, _0x41483f * 64);
    _0x116508.closePath();
    fill_path(_0x116508, undefined, _0x2ecc2f[2], _0x41483f * 7);
    _0x116508.beginPath();
    _0x116508.lineCap = "round";
    _0x116508.lineJoin = "round";
    _0x116508.moveTo(_0x41483f * 79, _0x41483f * 30);
    _0x116508.bezierCurveTo(_0x41483f * 93, _0x41483f * 47, _0x41483f * 93, _0x41483f * 47, _0x41483f * 107, _0x41483f * 64);
    _0x116508.closePath();
    fill_path(_0x116508, undefined, _0x2ecc2f[2], _0x41483f * 7);
  }
  return _0x20a200;
}
function create_tree_snow(_0x2f8165, _0x278fde, _0x9adfbf) {
  var _0x4ae2c3 = document.createElement("canvas");
  var _0x1f9ec6 = _0x4ae2c3.getContext("2d");
  _0x1f9ec6.rotate(Math.PI / 2);
}
function create_tree_branch(_0x77a07e, _0x54bc8c, _0x5705d1) {
  var _0x22e249 = document.createElement("canvas");
  var _0x1abd66 = _0x22e249.getContext("2d");
  var _0xf96c85 = _0x77a07e * 450;
  var _0x299823 = _0x77a07e * 145;
  var _0x266f5e = _0xf96c85 / 2;
  var _0x28607c = _0x299823 / 2;
  var _0x2e0a7a = _0x77a07e * 10;
  var _0x51a967 = _0x77a07e * 20;
  var _0xe446b4 = _0x77a07e * 300;
  var _0x336f0c = _0x77a07e * 30;
  var _0x150769 = _0x77a07e * 80;
  var _0x2d8d68 = _0xe446b4 / 2;
  var _0x2cfe47 = _0x336f0c / 2;
  var _0x57d38e = 4;
  if (_0x5705d1) {
    var _0xf96c85 = _0x77a07e * 145;
    var _0x299823 = _0x77a07e * 450;
    _0x22e249.width = _0xf96c85;
    _0x22e249.height = _0x299823;
    _0x1abd66.rotate(Math.PI / 2);
    _0x1abd66.save();
    _0x1abd66.globalAlpha = 0.5;
    round_rect(_0x1abd66, _0x77a07e * 100, _0x77a07e * -110, _0xe446b4, _0x336f0c, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.translate(_0x77a07e * 178, _0x77a07e * -98);
    round_rect(_0x1abd66, -_0x2d8d68, -_0x2cfe47 - _0x77a07e * 6, _0x77a07e * 100, _0x77a07e * 100, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.translate(_0x77a07e * -50, _0x77a07e * 5);
    round_rect(_0x1abd66, _0x77a07e * 220, _0x77a07e * -15, _0x77a07e * 90, _0x77a07e * 90, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.restore();
    _0x1abd66.save();
    _0x1abd66.globalAlpha = 1;
    _0x1abd66.translate(_0x77a07e * 250, _0x77a07e * -63);
    round_rect(_0x1abd66, -_0x2d8d68 - _0x77a07e * 20, -_0x2cfe47, _0xe446b4, _0x336f0c, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[1], _0x54bc8c[2], _0x57d38e);
    _0x1abd66.translate(_0x77a07e * -70, _0x77a07e * -40);
    round_rect(_0x1abd66, -_0x2d8d68 - _0x77a07e * 20, -_0x2cfe47, _0x77a07e * 100, _0x77a07e * 100, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[3], _0x54bc8c[4], _0x57d38e);
    _0x1abd66.translate(_0x77a07e * -70, _0x77a07e * 15);
    round_rect(_0x1abd66, _0x77a07e * 220, _0x77a07e * -22, _0x77a07e * 90, _0x77a07e * 90, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[3], _0x54bc8c[4], _0x57d38e);
    round_rect(_0x1abd66, _0x77a07e * 230, _0x77a07e * -12, _0x77a07e * 55, _0x77a07e * 55, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[5]);
    _0x1abd66.translate(_0x77a07e * -70, 0);
    round_rect(_0x1abd66, _0x77a07e * -15, _0x77a07e * -2, _0x77a07e * 60, _0x77a07e * 60, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[5]);
    _0x1abd66.restore();
  } else {
    _0x22e249.width = _0xf96c85;
    _0x22e249.height = _0x299823;
    _0x1abd66.save();
    _0x1abd66.globalAlpha = 0.5;
    _0x1abd66.translate(_0x266f5e, _0x28607c + _0x77a07e * 10);
    round_rect(_0x1abd66, -_0x2d8d68, -_0x2cfe47, _0xe446b4, _0x336f0c, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.translate(_0x77a07e * -65, _0x77a07e * -25);
    round_rect(_0x1abd66, -_0x2d8d68, -_0x2cfe47 - _0x77a07e * 6, _0x77a07e * 100, _0x77a07e * 100, _0x77a07e * 15);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.translate(_0x77a07e * -35, _0x77a07e * -5);
    round_rect(_0x1abd66, _0x77a07e * 220, _0x77a07e * -15, _0x77a07e * 90, _0x77a07e * 90, _0x77a07e * 15);
    fill_path(_0x1abd66, _0x54bc8c[0]);
    _0x1abd66.restore();
    _0x1abd66.save();
    _0x1abd66.globalAlpha = 1;
    _0x1abd66.translate(_0x77a07e * 240, _0x77a07e * 70);
    round_rect(_0x1abd66, -_0x2d8d68, -_0x2cfe47, _0xe446b4, _0x336f0c, _0x2e0a7a);
    fill_path(_0x1abd66, _0x54bc8c[1], _0x54bc8c[2], _0x57d38e);
    _0x1abd66.translate(_0x77a07e * -60, _0x77a07e * -40);
    round_rect(_0x1abd66, -_0x2d8d68 - _0x77a07e * 20, -_0x2cfe47, _0x77a07e * 100, _0x77a07e * 100, _0x77a07e * 15);
    fill_path(_0x1abd66, _0x54bc8c[3], _0x54bc8c[4], _0x57d38e);
    _0x1abd66.translate(_0x77a07e * -55, _0x77a07e * 10);
    round_rect(_0x1abd66, _0x77a07e * 220, _0x77a07e * -22, _0x77a07e * 90, _0x77a07e * 90, _0x77a07e * 15);
    fill_path(_0x1abd66, _0x54bc8c[3], _0x54bc8c[4], _0x57d38e);
    round_rect(_0x1abd66, _0x77a07e * 240, _0x77a07e * -12, _0x77a07e * 55, _0x77a07e * 55, _0x77a07e * 12);
    fill_path(_0x1abd66, _0x54bc8c[5]);
    _0x1abd66.translate(_0x77a07e * 45, _0x77a07e * 0);
    round_rect(_0x1abd66, _0x77a07e * -145, _0x77a07e * -2, _0x77a07e * 60, _0x77a07e * 60, _0x77a07e * 12);
    fill_path(_0x1abd66, _0x54bc8c[5]);
    _0x1abd66.restore();
  }
  return _0x22e249;
}
function create_apricot_forest(_0x196714, _0x228316) {
  var _0x47092c = document.createElement("canvas");
  var _0x29eabe = _0x47092c.getContext("2d");
  var _0x52fad2 = Math.max(_0x228316.width, _0x196714.width);
  var _0x2814c4 = Math.max(_0x228316.height, _0x196714.height);
  _0x47092c.width = _0x52fad2;
  _0x47092c.height = _0x2814c4;
  _0x29eabe.drawImage(_0x196714, (_0x52fad2 - _0x196714.width) / 2, (_0x2814c4 - _0x196714.height) / 2);
  _0x29eabe.drawImage(_0x228316, (_0x52fad2 - _0x228316.width) / 2, (_0x2814c4 - _0x228316.height) / 2);
  return _0x47092c;
}
function create_pickaxe(_0x394097, _0x591195, _0x1abb53) {
  var _0x27e2b2 = document.createElement("canvas");
  var _0x4a39ee = _0x27e2b2.getContext("2d");
  var _0x8018f8 = _0x394097 * 105;
  var _0x129af3 = _0x394097 * 125;
  var _0x1f90fe = _0x394097 * 4;
  var _0x1913d7 = _0x8018f8 / 2;
  var _0x13ec6b = _0x129af3 / 2;
  var _0x3aab24 = _0x394097 * 10;
  var _0x28cccc = _0x394097 * 5;
  var _0x54221c = _0x394097 * 10;
  var _0x583064 = _0x394097 * 110;
  var _0x5aedc6 = _0x54221c / 2;
  var _0x42aaaa = _0x583064 / 2;
  _0x27e2b2.width = _0x8018f8;
  _0x27e2b2.height = _0x129af3;
  _0x4a39ee.save();
  _0x4a39ee.globalAlpha = _0x591195 ? 0.5 : 1;
  _0x4a39ee.translate(_0x8018f8 / 2 + _0x394097 * 8, _0x129af3 / 2 + _0x28cccc);
  round_rect(_0x4a39ee, -_0x5aedc6, -_0x42aaaa, _0x54221c, _0x583064, _0x3aab24);
  if (_0x591195) {
    fill_path(_0x4a39ee, _0x1abb53[0]);
  } else {
    fill_path(_0x4a39ee, _0x1abb53[1]);
  }
  ;
  _0x4a39ee.translate(_0x394097 * -130 + _0x28cccc, _0x394097 * -128 + _0x28cccc);
  _0x4a39ee.beginPath();
  _0x4a39ee.bezierCurveTo(_0x394097 * 159, _0x394097 * 93, _0x394097 * 156, _0x394097 * 99, _0x394097 * 154, _0x394097 * 102);
  _0x4a39ee.bezierCurveTo(_0x394097 * 128, _0x394097 * 92, _0x394097 * 90, _0x394097 * 93, _0x394097 * 72, _0x394097 * 96);
  _0x4a39ee.bezierCurveTo(_0x394097 * 68, _0x394097 * 84, _0x394097 * 143, _0x394097 * 73, _0x394097 * 162, _0x394097 * 86);
  _0x4a39ee.closePath();
  fill_path(_0x4a39ee, _0x1abb53[2]);
  _0x4a39ee.restore();
  _0x4a39ee.translate(_0x8018f8 / 2 + 8, _0x129af3 / 2);
  _0x4a39ee.globalAlpha = 1;
  round_rect(_0x4a39ee, -_0x5aedc6, -_0x42aaaa, _0x54221c, _0x583064, _0x3aab24);
  fill_path(_0x4a39ee, _0x1abb53[3], _0x1abb53[4], _0x1f90fe);
  _0x4a39ee.translate(_0x394097 * -130, _0x394097 * -125);
  _0x4a39ee.beginPath();
  _0x4a39ee.bezierCurveTo(_0x394097 * 159, _0x394097 * 93, _0x394097 * 156, _0x394097 * 99, _0x394097 * 154, _0x394097 * 102);
  _0x4a39ee.bezierCurveTo(_0x394097 * 128, _0x394097 * 92, _0x394097 * 90, _0x394097 * 93, _0x394097 * 72, _0x394097 * 96);
  _0x4a39ee.bezierCurveTo(_0x394097 * 68, _0x394097 * 84, _0x394097 * 143, _0x394097 * 73, _0x394097 * 162, _0x394097 * 86);
  _0x4a39ee.closePath();
  fill_path(_0x4a39ee, _0x1abb53[5], _0x1abb53[6], _0x1f90fe);
  return _0x27e2b2;
}
function create_sword_wood(_0x5c3359, _0x3887a1, _0x30bf70) {
  var _0x2d1c18 = document.createElement("canvas");
  var _0x313bd0 = _0x2d1c18.getContext("2d");
  _0x2d1c18.width = _0x5c3359 * 170;
  _0x2d1c18.height = _0x5c3359 * 469;
  _0x313bd0.globalAlpha = _0x3887a1 ? 0.5 : 1;
  _0x313bd0.translate(_0x5c3359 * 20, _0x5c3359 * 20);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 88, _0x5c3359 * 30);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 104, _0x5c3359 * 69);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 107, _0x5c3359 * 14);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 121, _0x5c3359 * 5);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 150, _0x5c3359 * 50);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 103, _0x5c3359 * 331);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 36, _0x5c3359 * 319);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 77, _0x5c3359 * 41);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 118, _0x5c3359 * 31);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 125, _0x5c3359 * 43, _0x5c3359 * 125, _0x5c3359 * 43, _0x5c3359 * 132, _0x5c3359 * 55);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 109.5, _0x5c3359 * 185.5, _0x5c3359 * 109.5, _0x5c3359 * 185.5, _0x5c3359 * 87, _0x5c3359 * 316);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 72, _0x5c3359 * 313.5, _0x5c3359 * 72, _0x5c3359 * 313.5, _0x5c3359 * 57, _0x5c3359 * 311);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 76.5, _0x5c3359 * 181, _0x5c3359 * 76.5, _0x5c3359 * 181, _0x5c3359 * 96, _0x5c3359 * 51);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 56, _0x5c3359 * 328);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 47, _0x5c3359 * 385.5, _0x5c3359 * 47, _0x5c3359 * 385.5, _0x5c3359 * 38, _0x5c3359 * 443);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 52, _0x5c3359 * 446, _0x5c3359 * 52, _0x5c3359 * 446, _0x5c3359 * 66, _0x5c3359 * 449);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 76.5, _0x5c3359 * 388.5, _0x5c3359 * 76.5, _0x5c3359 * 388.5, _0x5c3359 * 87, _0x5c3359 * 328);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 74, _0x5c3359 * 302);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 104, _0x5c3359 * 316.5, _0x5c3359 * 104, _0x5c3359 * 316.5, _0x5c3359 * 134, _0x5c3359 * 331);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 133, _0x5c3359 * 341, _0x5c3359 * 133, _0x5c3359 * 341, _0x5c3359 * 132, _0x5c3359 * 351);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 69.5, _0x5c3359 * 342, _0x5c3359 * 69.5, _0x5c3359 * 342, _0x5c3359 * 7, _0x5c3359 * 333);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 8, _0x5c3359 * 323, _0x5c3359 * 8, _0x5c3359 * 323, _0x5c3359 * 9, _0x5c3359 * 313);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.save();
  _0x313bd0.translate(_0x5c3359 * 51.5, _0x5c3359 * 440.5);
  _0x313bd0.rotate(0.2);
  round_rect(_0x313bd0, _0x5c3359 * -20.5, _0x5c3359 * -18.5, _0x5c3359 * 41, _0x5c3359 * 37, _0x5c3359 * 10);
  _0x313bd0.restore();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 73, _0x5c3359 * 316);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 90, _0x5c3359 * 324.5, _0x5c3359 * 90, _0x5c3359 * 324.5, _0x5c3359 * 107, _0x5c3359 * 333);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 70, _0x5c3359 * 327.5, _0x5c3359 * 70, _0x5c3359 * 327.5, _0x5c3359 * 33, _0x5c3359 * 322);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[0]);
  _0x313bd0.globalAlpha = 1;
  _0x313bd0.translate(_0x5c3359 * -20, _0x5c3359 * -20);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 88, _0x5c3359 * 30);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 104, _0x5c3359 * 69);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 107, _0x5c3359 * 14);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 121, _0x5c3359 * 5);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 150, _0x5c3359 * 50);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 103, _0x5c3359 * 331);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 36, _0x5c3359 * 319);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 77, _0x5c3359 * 41);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[1], _0x30bf70[2], _0x5c3359 * 7);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 118, _0x5c3359 * 31);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 125, _0x5c3359 * 43, _0x5c3359 * 125, _0x5c3359 * 43, _0x5c3359 * 132, _0x5c3359 * 55);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 109.5, _0x5c3359 * 185.5, _0x5c3359 * 109.5, _0x5c3359 * 185.5, _0x5c3359 * 87, _0x5c3359 * 316);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 72, _0x5c3359 * 313.5, _0x5c3359 * 72, _0x5c3359 * 313.5, _0x5c3359 * 57, _0x5c3359 * 311);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 76.5, _0x5c3359 * 181, _0x5c3359 * 76.5, _0x5c3359 * 181, _0x5c3359 * 96, _0x5c3359 * 51);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[3]);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 88, _0x5c3359 * 30);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 96, _0x5c3359 * 49.5, _0x5c3359 * 104, _0x5c3359 * 69);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 105.5, _0x5c3359 * 41.5, _0x5c3359 * 107, _0x5c3359 * 14);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 114, _0x5c3359 * 9.5, _0x5c3359 * 121, _0x5c3359 * 5);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 135.5, _0x5c3359 * 27.5, _0x5c3359 * 150, _0x5c3359 * 50);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 110.5, _0x5c3359 * 286, _0x5c3359 * 103, _0x5c3359 * 331);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 69.5, _0x5c3359 * 325, _0x5c3359 * 36, _0x5c3359 * 319);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 56.5, _0x5c3359 * 180, _0x5c3359 * 77, _0x5c3359 * 41);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, undefined, _0x30bf70[2], _0x5c3359 * 7);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 56, _0x5c3359 * 328);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 47, _0x5c3359 * 385.5, _0x5c3359 * 47, _0x5c3359 * 385.5, _0x5c3359 * 38, _0x5c3359 * 443);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 52, _0x5c3359 * 446, _0x5c3359 * 52, _0x5c3359 * 446, _0x5c3359 * 66, _0x5c3359 * 449);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 76.5, _0x5c3359 * 388.5, _0x5c3359 * 76.5, _0x5c3359 * 388.5, _0x5c3359 * 87, _0x5c3359 * 328);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[4], _0x30bf70[5], _0x5c3359 * 7);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 74, _0x5c3359 * 302);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 104, _0x5c3359 * 316.5, _0x5c3359 * 104, _0x5c3359 * 316.5, _0x5c3359 * 134, _0x5c3359 * 331);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 133, _0x5c3359 * 341, _0x5c3359 * 133, _0x5c3359 * 341, _0x5c3359 * 132, _0x5c3359 * 351);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 69.5, _0x5c3359 * 342, _0x5c3359 * 69.5, _0x5c3359 * 342, _0x5c3359 * 7, _0x5c3359 * 333);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 8, _0x5c3359 * 323, _0x5c3359 * 8, _0x5c3359 * 323, _0x5c3359 * 9, _0x5c3359 * 313);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[4], _0x30bf70[5], _0x5c3359 * 7);
  _0x313bd0.save();
  _0x313bd0.translate(_0x5c3359 * 51.5, _0x5c3359 * 440.5);
  _0x313bd0.rotate(0.2);
  round_rect(_0x313bd0, _0x5c3359 * -20.5, _0x5c3359 * -18.5, _0x5c3359 * 41, _0x5c3359 * 37, _0x5c3359 * 10);
  _0x313bd0.restore();
  fill_path(_0x313bd0, _0x30bf70[4], _0x30bf70[5], _0x5c3359 * 7);
  _0x313bd0.beginPath();
  _0x313bd0.lineCap = "round";
  _0x313bd0.lineJoin = "round";
  _0x313bd0.moveTo(_0x5c3359 * 73, _0x5c3359 * 316);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 90, _0x5c3359 * 324.5, _0x5c3359 * 90, _0x5c3359 * 324.5, _0x5c3359 * 107, _0x5c3359 * 333);
  _0x313bd0.bezierCurveTo(_0x5c3359 * 70, _0x5c3359 * 327.5, _0x5c3359 * 70, _0x5c3359 * 327.5, _0x5c3359 * 33, _0x5c3359 * 322);
  _0x313bd0.closePath();
  fill_path(_0x313bd0, _0x30bf70[6]);
  return _0x2d1c18;
}
function create_pirate_sword(_0x549997, _0x2248e5, _0x491234) {
  var _0x30ae48 = document.createElement("canvas");
  var _0xbf7b36 = _0x30ae48.getContext("2d");
  _0x30ae48.width = _0x549997 * 424;
  _0x30ae48.height = _0x549997 * 788;
  _0xbf7b36.translate(_0x549997 * 25, _0x549997 * 25);
  _0xbf7b36.globalAlpha = _0x2248e5 ? 0.5 : 1;
  _0xbf7b36.save();
  _0xbf7b36.translate(_0x549997 * 193.5, _0x549997 * 602.5);
  _0xbf7b36.rotate(-0.12);
  round_rect(_0xbf7b36, _0x549997 * -26.5, _0x549997 * -97.5, _0x549997 * 53, _0x549997 * 195, _0x549997 * 25);
  _0xbf7b36.restore();
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 137, _0x549997 * 519);
  _0xbf7b36.bezierCurveTo(_0x549997 * 182, _0x549997 * 513, _0x549997 * 182, _0x549997 * 513, _0x549997 * 227, _0x549997 * 507);
  _0xbf7b36.bezierCurveTo(_0x549997 * 214, _0x549997 * 417, _0x549997 * 189, _0x549997 * 304, _0x549997 * 221, _0x549997 * 180);
  _0xbf7b36.bezierCurveTo(_0x549997 * 191, _0x549997 * 126, _0x549997 * 192, _0x549997 * 105, _0x549997 * 198, _0x549997 * 64);
  _0xbf7b36.bezierCurveTo(_0x549997 * 123, _0x549997 * 102, _0x549997 * 99, _0x549997 * 285, _0x549997 * 137, _0x549997 * 517);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 175, _0x549997 * 119);
  _0xbf7b36.bezierCurveTo(_0x549997 * 176, _0x549997 * 142, _0x549997 * 184, _0x549997 * 165, _0x549997 * 197, _0x549997 * 183);
  _0xbf7b36.bezierCurveTo(_0x549997 * 167, _0x549997 * 325, _0x549997 * 191, _0x549997 * 405, _0x549997 * 202, _0x549997 * 502);
  _0xbf7b36.bezierCurveTo(_0x549997 * 180, _0x549997 * 503, _0x549997 * 180, _0x549997 * 503, _0x549997 * 158, _0x549997 * 504);
  _0xbf7b36.bezierCurveTo(_0x549997 * 135, _0x549997 * 396, _0x549997 * 134, _0x549997 * 185, _0x549997 * 175, _0x549997 * 119);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 110, _0x549997 * 518);
  _0xbf7b36.bezierCurveTo(_0x549997 * 111.5, _0x549997 * 533, _0x549997 * 111.5, _0x549997 * 533, _0x549997 * 113, _0x549997 * 548);
  _0xbf7b36.bezierCurveTo(_0x549997 * 162.5, _0x549997 * 544, _0x549997 * 162.5, _0x549997 * 544, _0x549997 * 212, _0x549997 * 540);
  _0xbf7b36.bezierCurveTo(_0x549997 * 312, _0x549997 * 535, _0x549997 * 281, _0x549997 * 665, _0x549997 * 225, _0x549997 * 665);
  _0xbf7b36.bezierCurveTo(_0x549997 * 227, _0x549997 * 686.5, _0x549997 * 227, _0x549997 * 686.5, _0x549997 * 229, _0x549997 * 708);
  _0xbf7b36.bezierCurveTo(_0x549997 * 343, _0x549997 * 684, _0x549997 * 354, _0x549997 * 496, _0x549997 * 222, _0x549997 * 498);
  _0xbf7b36.bezierCurveTo(_0x549997 * 165.5, _0x549997 * 503, _0x549997 * 165.5, _0x549997 * 503, _0x549997 * 109, _0x549997 * 508);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[0]);
  circle(_0xbf7b36, _0x549997 * 204, _0x549997 * 693, _0x549997 * 36.013886210738214);
  fill_path(_0xbf7b36, _0x491234[0]);
  circle(_0xbf7b36, _0x549997 * 105, _0x549997 * 518, _0x549997 * 30);
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 171, _0x549997 * 535);
  _0xbf7b36.bezierCurveTo(_0x549997 * 139.5, _0x549997 * 537.5, _0x549997 * 139.5, _0x549997 * 537.5, _0x549997 * 108, _0x549997 * 540);
  _0xbf7b36.bezierCurveTo(_0x549997 * 110, _0x549997 * 527.5, _0x549997 * 110, _0x549997 * 527.5, _0x549997 * 112, _0x549997 * 515);
  _0xbf7b36.bezierCurveTo(_0x549997 * 148, _0x549997 * 513, _0x549997 * 148, _0x549997 * 513, _0x549997 * 184, _0x549997 * 511);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 244, _0x549997 * 669);
  _0xbf7b36.bezierCurveTo(_0x549997 * 248.5, _0x549997 * 680, _0x549997 * 248.5, _0x549997 * 680, _0x549997 * 253, _0x549997 * 691);
  _0xbf7b36.bezierCurveTo(_0x549997 * 239.5, _0x549997 * 697, _0x549997 * 239.5, _0x549997 * 697, _0x549997 * 226, _0x549997 * 703);
  _0xbf7b36.bezierCurveTo(_0x549997 * 223, _0x549997 * 691.5, _0x549997 * 223, _0x549997 * 691.5, _0x549997 * 220, _0x549997 * 680);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[0]);
  _0xbf7b36.translate(_0x549997 * -25, _0x549997 * -25);
  _0xbf7b36.globalAlpha = 1;
  _0xbf7b36.save();
  _0xbf7b36.translate(_0x549997 * 193.5, _0x549997 * 602.5);
  _0xbf7b36.rotate(-0.12);
  round_rect(_0xbf7b36, _0x549997 * -26.5, _0x549997 * -97.5, _0x549997 * 53, _0x549997 * 195, _0x549997 * 25);
  _0xbf7b36.restore();
  fill_path(_0xbf7b36, _0x491234[1], _0x491234[2], _0x549997 * 16);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 137, _0x549997 * 519);
  _0xbf7b36.bezierCurveTo(_0x549997 * 182, _0x549997 * 513, _0x549997 * 182, _0x549997 * 513, _0x549997 * 227, _0x549997 * 507);
  _0xbf7b36.bezierCurveTo(_0x549997 * 214, _0x549997 * 417, _0x549997 * 189, _0x549997 * 304, _0x549997 * 221, _0x549997 * 180);
  _0xbf7b36.bezierCurveTo(_0x549997 * 191, _0x549997 * 126, _0x549997 * 192, _0x549997 * 105, _0x549997 * 198, _0x549997 * 64);
  _0xbf7b36.bezierCurveTo(_0x549997 * 123, _0x549997 * 102, _0x549997 * 99, _0x549997 * 285, _0x549997 * 137, _0x549997 * 517);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[3], _0x491234[4], _0x549997 * 16);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 175, _0x549997 * 119);
  _0xbf7b36.bezierCurveTo(_0x549997 * 176, _0x549997 * 142, _0x549997 * 184, _0x549997 * 165, _0x549997 * 197, _0x549997 * 183);
  _0xbf7b36.bezierCurveTo(_0x549997 * 167, _0x549997 * 325, _0x549997 * 191, _0x549997 * 405, _0x549997 * 202, _0x549997 * 502);
  _0xbf7b36.bezierCurveTo(_0x549997 * 180, _0x549997 * 503, _0x549997 * 180, _0x549997 * 503, _0x549997 * 158, _0x549997 * 504);
  _0xbf7b36.bezierCurveTo(_0x549997 * 135, _0x549997 * 396, _0x549997 * 134, _0x549997 * 185, _0x549997 * 175, _0x549997 * 119);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[5]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 110, _0x549997 * 518);
  _0xbf7b36.bezierCurveTo(_0x549997 * 111.5, _0x549997 * 533, _0x549997 * 111.5, _0x549997 * 533, _0x549997 * 113, _0x549997 * 548);
  _0xbf7b36.bezierCurveTo(_0x549997 * 162.5, _0x549997 * 544, _0x549997 * 162.5, _0x549997 * 544, _0x549997 * 212, _0x549997 * 540);
  _0xbf7b36.bezierCurveTo(_0x549997 * 312, _0x549997 * 535, _0x549997 * 281, _0x549997 * 665, _0x549997 * 225, _0x549997 * 665);
  _0xbf7b36.bezierCurveTo(_0x549997 * 227, _0x549997 * 686.5, _0x549997 * 227, _0x549997 * 686.5, _0x549997 * 229, _0x549997 * 708);
  _0xbf7b36.bezierCurveTo(_0x549997 * 343, _0x549997 * 684, _0x549997 * 354, _0x549997 * 496, _0x549997 * 222, _0x549997 * 498);
  _0xbf7b36.bezierCurveTo(_0x549997 * 165.5, _0x549997 * 503, _0x549997 * 165.5, _0x549997 * 503, _0x549997 * 109, _0x549997 * 508);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[6], _0x491234[4], _0x549997 * 16);
  circle(_0xbf7b36, _0x549997 * 204, _0x549997 * 693, _0x549997 * 36.013886210738214);
  fill_path(_0xbf7b36, _0x491234[6], _0x491234[4], _0x549997 * 16);
  circle(_0xbf7b36, _0x549997 * 105, _0x549997 * 518, _0x549997 * 30);
  fill_path(_0xbf7b36, _0x491234[6], _0x491234[4], _0x549997 * 16);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 171, _0x549997 * 535);
  _0xbf7b36.bezierCurveTo(_0x549997 * 139.5, _0x549997 * 537.5, _0x549997 * 139.5, _0x549997 * 537.5, _0x549997 * 108, _0x549997 * 540);
  _0xbf7b36.bezierCurveTo(_0x549997 * 110, _0x549997 * 527.5, _0x549997 * 110, _0x549997 * 527.5, _0x549997 * 112, _0x549997 * 515);
  _0xbf7b36.bezierCurveTo(_0x549997 * 148, _0x549997 * 513, _0x549997 * 148, _0x549997 * 513, _0x549997 * 184, _0x549997 * 511);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[6]);
  _0xbf7b36.beginPath();
  _0xbf7b36.lineCap = "round";
  _0xbf7b36.lineJoin = "round";
  _0xbf7b36.moveTo(_0x549997 * 244, _0x549997 * 669);
  _0xbf7b36.bezierCurveTo(_0x549997 * 248.5, _0x549997 * 680, _0x549997 * 248.5, _0x549997 * 680, _0x549997 * 253, _0x549997 * 691);
  _0xbf7b36.bezierCurveTo(_0x549997 * 239.5, _0x549997 * 697, _0x549997 * 239.5, _0x549997 * 697, _0x549997 * 226, _0x549997 * 703);
  _0xbf7b36.bezierCurveTo(_0x549997 * 223, _0x549997 * 691.5, _0x549997 * 223, _0x549997 * 691.5, _0x549997 * 220, _0x549997 * 680);
  _0xbf7b36.closePath();
  fill_path(_0xbf7b36, _0x491234[6]);
  circle(_0xbf7b36, _0x549997 * 204, _0x549997 * 693, _0x549997 * 17.029386365926403);
  fill_path(_0xbf7b36, _0x491234[7]);
  circle(_0xbf7b36, _0x549997 * 106, _0x549997 * 518, _0x549997 * 12);
  fill_path(_0xbf7b36, _0x491234[7]);
  return _0x30ae48;
}
function create_sword(_0x527788, _0x3bc6b9, _0x15d163) {
  var _0x220062 = document.createElement("canvas");
  var _0x35d0c4 = _0x220062.getContext("2d");
  _0x220062.width = _0x527788 * 100;
  _0x220062.height = _0x527788 * 250;
  _0x35d0c4.translate(_0x527788 * -135, _0x527788 * -75);
  _0x35d0c4.globalAlpha = _0x3bc6b9 ? 0.8 : 1;
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 178.5, _0x527788 * 238.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 177, _0x527788 * 175.03125, _0x527788 * 177, _0x527788 * 175.03125, _0x527788 * 175.5, _0x527788 * 112.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 184.5, _0x527788 * 100.53125, _0x527788 * 184.5, _0x527788 * 100.53125, _0x527788 * 193.5, _0x527788 * 89.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 202, _0x527788 * 100.03125, _0x527788 * 202, _0x527788 * 100.03125, _0x527788 * 210.5, _0x527788 * 111.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 209.5, _0x527788 * 174.03125, _0x527788 * 209.5, _0x527788 * 174.03125, _0x527788 * 208.5, _0x527788 * 237.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[0]);
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 155.5, _0x527788 * 239.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194, _0x527788 * 238.53125, _0x527788 * 194, _0x527788 * 238.53125, _0x527788 * 232.5, _0x527788 * 238.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 232.5, _0x527788 * 243.03125, _0x527788 * 232.5, _0x527788 * 243.03125, _0x527788 * 232.5, _0x527788 * 248.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194, _0x527788 * 248.53125, _0x527788 * 194, _0x527788 * 248.53125, _0x527788 * 155.5, _0x527788 * 249.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[0]);
  circle(_0x35d0c4, _0x527788 * 160.5, _0x527788 * 243.03125, _0x527788 * 7);
  fill_path(_0x35d0c4, _0x15d163[0]);
  circle(_0x35d0c4, _0x527788 * 227.5, _0x527788 * 242.03125, _0x527788 * 7);
  fill_path(_0x35d0c4, _0x15d163[0]);
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 185.5, _0x527788 * 253.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 193.5, _0x527788 * 253.03125, _0x527788 * 193.5, _0x527788 * 253.03125, _0x527788 * 201.5, _0x527788 * 253.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 201.5, _0x527788 * 276.03125, _0x527788 * 201.5, _0x527788 * 276.03125, _0x527788 * 201.5, _0x527788 * 299.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194.5, _0x527788 * 299.03125, _0x527788 * 194.5, _0x527788 * 299.03125, _0x527788 * 187.5, _0x527788 * 299.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[0], _0x15d163[0], _0x527788 * 5);
  circle(_0x35d0c4, _0x527788 * 194, _0x527788 * 298, _0x527788 * 9);
  fill_path(_0x35d0c4, _0x15d163[0], _0x15d163[0], _0x527788 * 5);
  _0x35d0c4.globalAlpha = 1;
  _0x35d0c4.translate(_0x527788 * -10, _0x527788 * 10);
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 178.5, _0x527788 * 238.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 177, _0x527788 * 175.03125, _0x527788 * 177, _0x527788 * 175.03125, _0x527788 * 175.5, _0x527788 * 112.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 184.5, _0x527788 * 100.53125, _0x527788 * 184.5, _0x527788 * 100.53125, _0x527788 * 193.5, _0x527788 * 89.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 202, _0x527788 * 100.03125, _0x527788 * 202, _0x527788 * 100.03125, _0x527788 * 210.5, _0x527788 * 111.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 209.5, _0x527788 * 174.03125, _0x527788 * 209.5, _0x527788 * 174.03125, _0x527788 * 208.5, _0x527788 * 237.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[3], _0x15d163[4], _0x527788 * 5);
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 155.5, _0x527788 * 239.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194, _0x527788 * 238.53125, _0x527788 * 194, _0x527788 * 238.53125, _0x527788 * 232.5, _0x527788 * 238.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 232.5, _0x527788 * 243.03125, _0x527788 * 232.5, _0x527788 * 243.03125, _0x527788 * 232.5, _0x527788 * 248.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194, _0x527788 * 248.53125, _0x527788 * 194, _0x527788 * 248.53125, _0x527788 * 155.5, _0x527788 * 249.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[1], _0x15d163[2], _0x527788 * 5);
  circle(_0x35d0c4, _0x527788 * 160.5, _0x527788 * 243.03125, _0x527788 * 7);
  fill_path(_0x35d0c4, _0x15d163[1], _0x15d163[2], _0x527788 * 5);
  circle(_0x35d0c4, _0x527788 * 227.5, _0x527788 * 242.03125, _0x527788 * 7);
  fill_path(_0x35d0c4, _0x15d163[1], _0x15d163[2], _0x527788 * 5);
  _0x35d0c4.beginPath();
  _0x35d0c4.lineCap = "round";
  _0x35d0c4.lineJoin = "round";
  _0x35d0c4.moveTo(_0x527788 * 185.5, _0x527788 * 253.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 193.5, _0x527788 * 253.03125, _0x527788 * 193.5, _0x527788 * 253.03125, _0x527788 * 201.5, _0x527788 * 253.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 201.5, _0x527788 * 276.03125, _0x527788 * 201.5, _0x527788 * 276.03125, _0x527788 * 201.5, _0x527788 * 299.03125);
  _0x35d0c4.bezierCurveTo(_0x527788 * 194.5, _0x527788 * 299.03125, _0x527788 * 194.5, _0x527788 * 299.03125, _0x527788 * 187.5, _0x527788 * 299.03125);
  _0x35d0c4.closePath();
  fill_path(_0x35d0c4, _0x15d163[1], _0x15d163[2], _0x527788 * 7);
  circle(_0x35d0c4, _0x527788 * 194, _0x527788 * 298, _0x527788 * 9);
  fill_path(_0x35d0c4, _0x15d163[1], _0x15d163[2], _0x527788 * 7);
  return _0x220062;
}
function create_stonesword(_0x38ad7a, _0x49db01, _0x386ced) {
  var _0x2c0c7a = document.createElement("canvas");
  var _0x24e723 = _0x2c0c7a.getContext("2d");
  _0x2c0c7a.width = _0x38ad7a * 290;
  _0x2c0c7a.height = _0x38ad7a * 525;
  _0x24e723.globalAlpha = _0x49db01 ? 0.5 : 1;
  _0x24e723.translate(_0x38ad7a * 20, _0x38ad7a * 20);
  _0x24e723.beginPath();
  _0x24e723.lineCap = "round";
  _0x24e723.lineJoin = "round";
  _0x24e723.moveTo(_0x38ad7a * 111, _0x38ad7a * 351);
  _0x24e723.bezierCurveTo(_0x38ad7a * 129, _0x38ad7a * 218, _0x38ad7a * 129, _0x38ad7a * 218, _0x38ad7a * 147, _0x38ad7a * 85);
  _0x24e723.bezierCurveTo(_0x38ad7a * 167, _0x38ad7a * 65.5, _0x38ad7a * 167, _0x38ad7a * 65.5, _0x38ad7a * 187, _0x38ad7a * 46);
  _0x24e723.bezierCurveTo(_0x38ad7a * 201.5, _0x38ad7a * 70.5, _0x38ad7a * 201.5, _0x38ad7a * 70.5, _0x38ad7a * 216, _0x38ad7a * 95);
  _0x24e723.bezierCurveTo(_0x38ad7a * 194.5, _0x38ad7a * 227.5, _0x38ad7a * 194.5, _0x38ad7a * 227.5, _0x38ad7a * 173, _0x38ad7a * 360);
  _0x24e723.closePath();
  fill_path(_0x24e723, _0x386ced[0]);
  _0x24e723.save();
  _0x24e723.translate(_0x38ad7a * 131, _0x38ad7a * 425.5);
  _0x24e723.rotate(0.16);
  round_rect(_0x24e723, _0x38ad7a * -14, _0x38ad7a * -56.5, _0x38ad7a * 28, _0x38ad7a * 113, _0x38ad7a * 8);
  _0x24e723.restore();
  fill_path(_0x24e723, _0x386ced[0]);
  circle(_0x24e723, _0x38ad7a * 122, _0x38ad7a * 480, _0x38ad7a * 18.439088914585774);
  fill_path(_0x24e723, _0x386ced[0]);
  _0x24e723.beginPath();
  _0x24e723.lineCap = "round";
  _0x24e723.lineJoin = "round";
  _0x24e723.moveTo(_0x38ad7a * 79, _0x38ad7a * 371);
  _0x24e723.bezierCurveTo(_0x38ad7a * 131, _0x38ad7a * 373, _0x38ad7a * 145, _0x38ad7a * 378, _0x38ad7a * 197, _0x38ad7a * 388);
  _0x24e723.bezierCurveTo(_0x38ad7a * 205, _0x38ad7a * 382.5, _0x38ad7a * 205, _0x38ad7a * 382.5, _0x38ad7a * 213, _0x38ad7a * 377);
  _0x24e723.bezierCurveTo(_0x38ad7a * 167, _0x38ad7a * 352, _0x38ad7a * 117, _0x38ad7a * 345, _0x38ad7a * 69, _0x38ad7a * 355);
  _0x24e723.closePath();
  fill_path(_0x24e723, _0x386ced[0]);
  _0x24e723.globalAlpha = 1;
  _0x24e723.translate(_0x38ad7a * -20, _0x38ad7a * -20);
  _0x24e723.beginPath();
  _0x24e723.lineCap = "round";
  _0x24e723.lineJoin = "round";
  _0x24e723.moveTo(_0x38ad7a * 111, _0x38ad7a * 351);
  _0x24e723.bezierCurveTo(_0x38ad7a * 129, _0x38ad7a * 218, _0x38ad7a * 129, _0x38ad7a * 218, _0x38ad7a * 147, _0x38ad7a * 85);
  _0x24e723.bezierCurveTo(_0x38ad7a * 167, _0x38ad7a * 65.5, _0x38ad7a * 167, _0x38ad7a * 65.5, _0x38ad7a * 187, _0x38ad7a * 46);
  _0x24e723.bezierCurveTo(_0x38ad7a * 201.5, _0x38ad7a * 70.5, _0x38ad7a * 201.5, _0x38ad7a * 70.5, _0x38ad7a * 216, _0x38ad7a * 95);
  _0x24e723.bezierCurveTo(_0x38ad7a * 194.5, _0x38ad7a * 227.5, _0x38ad7a * 194.5, _0x38ad7a * 227.5, _0x38ad7a * 173, _0x38ad7a * 360);
  _0x24e723.closePath();
  fill_path(_0x24e723, _0x386ced[1], _0x386ced[2], _0x38ad7a * 12.5);
  _0x24e723.save();
  _0x24e723.translate(_0x38ad7a * 131, _0x38ad7a * 425.5);
  _0x24e723.rotate(0.16);
  round_rect(_0x24e723, _0x38ad7a * -14, _0x38ad7a * -56.5, _0x38ad7a * 28, _0x38ad7a * 113, _0x38ad7a * 8);
  _0x24e723.restore();
  fill_path(_0x24e723, _0x386ced[4], _0x386ced[5], _0x38ad7a * 12.5);
  circle(_0x24e723, _0x38ad7a * 122, _0x38ad7a * 480, _0x38ad7a * 18.439088914585774);
  fill_path(_0x24e723, _0x386ced[4], _0x386ced[5], _0x38ad7a * 12.5);
  _0x24e723.beginPath();
  _0x24e723.lineCap = "round";
  _0x24e723.lineJoin = "round";
  _0x24e723.moveTo(_0x38ad7a * 79, _0x38ad7a * 371);
  _0x24e723.bezierCurveTo(_0x38ad7a * 131, _0x38ad7a * 373, _0x38ad7a * 145, _0x38ad7a * 378, _0x38ad7a * 197, _0x38ad7a * 388);
  _0x24e723.bezierCurveTo(_0x38ad7a * 205, _0x38ad7a * 382.5, _0x38ad7a * 205, _0x38ad7a * 382.5, _0x38ad7a * 213, _0x38ad7a * 377);
  _0x24e723.bezierCurveTo(_0x38ad7a * 167, _0x38ad7a * 352, _0x38ad7a * 117, _0x38ad7a * 345, _0x38ad7a * 69, _0x38ad7a * 355);
  _0x24e723.closePath();
  fill_path(_0x24e723, _0x386ced[4], _0x386ced[5], _0x38ad7a * 12.5);
  _0x24e723.beginPath();
  _0x24e723.lineCap = "round";
  _0x24e723.lineJoin = "round";
  _0x24e723.moveTo(_0x38ad7a * 128, _0x38ad7a * 345);
  _0x24e723.bezierCurveTo(_0x38ad7a * 142, _0x38ad7a * 345, _0x38ad7a * 147, _0x38ad7a * 346, _0x38ad7a * 158, _0x38ad7a * 349);
  _0x24e723.bezierCurveTo(_0x38ad7a * 177.5, _0x38ad7a * 224.5, _0x38ad7a * 177.5, _0x38ad7a * 224.5, _0x38ad7a * 197, _0x38ad7a * 100);
  _0x24e723.bezierCurveTo(_0x38ad7a * 190.5, _0x38ad7a * 84.5, _0x38ad7a * 190.5, _0x38ad7a * 84.5, _0x38ad7a * 184, _0x38ad7a * 69);
  _0x24e723.bezierCurveTo(_0x38ad7a * 173.5, _0x38ad7a * 82, _0x38ad7a * 173.5, _0x38ad7a * 82, _0x38ad7a * 163, _0x38ad7a * 95);
  _0x24e723.closePath();
  fill_path(_0x24e723, _0x386ced[3]);
  return _0x2c0c7a;
}
function create_crab(_0x47880b, _0x24de4e, _0x528833, _0x3b34da) {
  var _0x14a055 = document.createElement("canvas");
  var _0x48e3b0 = _0x14a055.getContext("2d");
  _0x14a055.width = _0x47880b * 283;
  _0x14a055.height = _0x47880b * 224;
  _0x48e3b0.translate(0, _0x47880b * 15);
  _0x48e3b0.globalAlpha = 0.5;
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 93, _0x47880b * 55);
  _0x48e3b0.bezierCurveTo(_0x47880b * 127, _0x47880b * 27, _0x47880b * 195, _0x47880b * 42, _0x47880b * 213, _0x47880b * 78);
  _0x48e3b0.bezierCurveTo(_0x47880b * 254, _0x47880b * 134, _0x47880b * 226, _0x47880b * 198, _0x47880b * 153, _0x47880b * 197);
  _0x48e3b0.bezierCurveTo(_0x47880b * 59, _0x47880b * 204, _0x47880b * 56, _0x47880b * 158, _0x47880b * 51, _0x47880b * 115);
  _0x48e3b0.bezierCurveTo(_0x47880b * 50, _0x47880b * 93, _0x47880b * 81, _0x47880b * 62, _0x47880b * 90, _0x47880b * 57);
  _0x48e3b0.closePath();
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 100, _0x47880b * 33);
  _0x48e3b0.bezierCurveTo(_0x47880b * 85, _0x47880b * 62, _0x47880b * 102, _0x47880b * 66, _0x47880b * 110, _0x47880b * 83);
  _0x48e3b0.closePath();
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 181, _0x47880b * 32);
  _0x48e3b0.bezierCurveTo(_0x47880b * 196, _0x47880b * 62, _0x47880b * 181, _0x47880b * 68, _0x47880b * 178, _0x47880b * 69);
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 225, _0x47880b * 52);
  _0x48e3b0.bezierCurveTo(_0x47880b * 228, _0x47880b * 78, _0x47880b * 207, _0x47880b * 77, _0x47880b * 192, _0x47880b * 88);
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 34, _0x47880b * 134);
  _0x48e3b0.bezierCurveTo(_0x47880b * 46, _0x47880b * 111, _0x47880b * 57, _0x47880b * 111, _0x47880b * 79, _0x47880b * 109);
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 249, _0x47880b * 135);
  _0x48e3b0.bezierCurveTo(_0x47880b * 233, _0x47880b * 107, _0x47880b * 212, _0x47880b * 112, _0x47880b * 202, _0x47880b * 115);
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 56, _0x47880b * 50);
  _0x48e3b0.bezierCurveTo(_0x47880b * 56, _0x47880b * 82, _0x47880b * 73, _0x47880b * 82, _0x47880b * 93, _0x47880b * 89);
  fill_path(_0x48e3b0, _0x528833[0]);
  _0x48e3b0.translate(0, _0x47880b * -15);
  _0x48e3b0.globalAlpha = 1;
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 100, _0x47880b * 33);
  _0x48e3b0.bezierCurveTo(_0x47880b * 85, _0x47880b * 62, _0x47880b * 102, _0x47880b * 66, _0x47880b * 110, _0x47880b * 83);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 181, _0x47880b * 32);
  _0x48e3b0.bezierCurveTo(_0x47880b * 196, _0x47880b * 62, _0x47880b * 181, _0x47880b * 68, _0x47880b * 178, _0x47880b * 69);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 225, _0x47880b * 52);
  _0x48e3b0.bezierCurveTo(_0x47880b * 228, _0x47880b * 78, _0x47880b * 207, _0x47880b * 77, _0x47880b * 192, _0x47880b * 88);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 34, _0x47880b * 134);
  _0x48e3b0.bezierCurveTo(_0x47880b * 46, _0x47880b * 111, _0x47880b * 57, _0x47880b * 111, _0x47880b * 79, _0x47880b * 109);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 249, _0x47880b * 135);
  _0x48e3b0.bezierCurveTo(_0x47880b * 233, _0x47880b * 107, _0x47880b * 212, _0x47880b * 112, _0x47880b * 202, _0x47880b * 115);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 56, _0x47880b * 50);
  _0x48e3b0.bezierCurveTo(_0x47880b * 56, _0x47880b * 82, _0x47880b * 73, _0x47880b * 82, _0x47880b * 93, _0x47880b * 89);
  fill_path(_0x48e3b0, undefined, _0x528833[2], _0x47880b * 40);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 93, _0x47880b * 55);
  _0x48e3b0.bezierCurveTo(_0x47880b * 127, _0x47880b * 27, _0x47880b * 195, _0x47880b * 42, _0x47880b * 213, _0x47880b * 78);
  _0x48e3b0.bezierCurveTo(_0x47880b * 254, _0x47880b * 134, _0x47880b * 226, _0x47880b * 198, _0x47880b * 153, _0x47880b * 197);
  _0x48e3b0.bezierCurveTo(_0x47880b * 59, _0x47880b * 204, _0x47880b * 56, _0x47880b * 158, _0x47880b * 51, _0x47880b * 115);
  _0x48e3b0.bezierCurveTo(_0x47880b * 50, _0x47880b * 93, _0x47880b * 81, _0x47880b * 62, _0x47880b * 90, _0x47880b * 57);
  _0x48e3b0.closePath();
  fill_path(_0x48e3b0, _0x528833[1], _0x528833[2], _0x47880b * 10);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 100, _0x47880b * 33);
  _0x48e3b0.bezierCurveTo(_0x47880b * 85, _0x47880b * 62, _0x47880b * 102, _0x47880b * 66, _0x47880b * 110, _0x47880b * 83);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 181, _0x47880b * 32);
  _0x48e3b0.bezierCurveTo(_0x47880b * 196, _0x47880b * 62, _0x47880b * 181, _0x47880b * 68, _0x47880b * 178, _0x47880b * 69);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 225, _0x47880b * 52);
  _0x48e3b0.bezierCurveTo(_0x47880b * 228, _0x47880b * 78, _0x47880b * 207, _0x47880b * 77, _0x47880b * 192, _0x47880b * 88);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 34, _0x47880b * 134);
  _0x48e3b0.bezierCurveTo(_0x47880b * 46, _0x47880b * 111, _0x47880b * 57, _0x47880b * 111, _0x47880b * 79, _0x47880b * 109);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 249, _0x47880b * 135);
  _0x48e3b0.bezierCurveTo(_0x47880b * 233, _0x47880b * 107, _0x47880b * 212, _0x47880b * 112, _0x47880b * 202, _0x47880b * 115);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  _0x48e3b0.beginPath();
  _0x48e3b0.lineCap = "round";
  _0x48e3b0.lineJoin = "round";
  _0x48e3b0.moveTo(_0x47880b * 56, _0x47880b * 50);
  _0x48e3b0.bezierCurveTo(_0x47880b * 56, _0x47880b * 82, _0x47880b * 73, _0x47880b * 82, _0x47880b * 93, _0x47880b * 89);
  fill_path(_0x48e3b0, undefined, _0x528833[1], _0x47880b * 20);
  circle(_0x48e3b0, _0x47880b * 101, _0x47880b * 155, _0x47880b * 20.591260281974);
  fill_path(_0x48e3b0, _0x528833[3]);
  circle(_0x48e3b0, _0x47880b * 180, _0x47880b * 155, _0x47880b * 20.591260281974);
  fill_path(_0x48e3b0, _0x528833[3]);
  circle(_0x48e3b0, _0x47880b * 95, _0x47880b * 148, _0x47880b * 7.211102550927978);
  fill_path(_0x48e3b0, _0x528833[4]);
  circle(_0x48e3b0, _0x47880b * 173, _0x47880b * 148, _0x47880b * 7.211102550927978);
  fill_path(_0x48e3b0, _0x528833[4]);
  if (_0x3b34da === 1) {
    _0x48e3b0.beginPath();
    _0x48e3b0.lineCap = "round";
    _0x48e3b0.lineJoin = "round";
    _0x48e3b0.moveTo(_0x47880b * 191, _0x47880b * 107);
    _0x48e3b0.bezierCurveTo(_0x47880b * 180, _0x47880b * 104, _0x47880b * 175, _0x47880b * 101, _0x47880b * 180, _0x47880b * 95);
    _0x48e3b0.bezierCurveTo(_0x47880b * 180, _0x47880b * 95, _0x47880b * 181, _0x47880b * 99, _0x47880b * 188, _0x47880b * 103);
    _0x48e3b0.bezierCurveTo(_0x47880b * 191, _0x47880b * 101, _0x47880b * 191, _0x47880b * 95, _0x47880b * 190, _0x47880b * 91);
    _0x48e3b0.bezierCurveTo(_0x47880b * 190, _0x47880b * 91, _0x47880b * 196, _0x47880b * 89, _0x47880b * 195, _0x47880b * 99);
    _0x48e3b0.closePath();
    fill_path(_0x48e3b0, _0x528833[2]);
    _0x48e3b0.beginPath();
    _0x48e3b0.lineCap = "round";
    _0x48e3b0.lineJoin = "round";
    _0x48e3b0.moveTo(_0x47880b * 206, _0x47880b * 98);
    _0x48e3b0.bezierCurveTo(_0x47880b * 203, _0x47880b * 95, _0x47880b * 200, _0x47880b * 93, _0x47880b * 198, _0x47880b * 101);
    _0x48e3b0.bezierCurveTo(_0x47880b * 194, _0x47880b * 109, _0x47880b * 193, _0x47880b * 109, _0x47880b * 196, _0x47880b * 110);
    _0x48e3b0.bezierCurveTo(_0x47880b * 206, _0x47880b * 115, _0x47880b * 209, _0x47880b * 114, _0x47880b * 211, _0x47880b * 111);
    _0x48e3b0.bezierCurveTo(_0x47880b * 211, _0x47880b * 106, _0x47880b * 208, _0x47880b * 108, _0x47880b * 203, _0x47880b * 108);
    _0x48e3b0.bezierCurveTo(_0x47880b * 193, _0x47880b * 107, _0x47880b * 204, _0x47880b * 101, _0x47880b * 206, _0x47880b * 99);
    _0x48e3b0.closePath();
    fill_path(_0x48e3b0, _0x528833[2]);
    _0x48e3b0.beginPath();
    _0x48e3b0.lineCap = "round";
    _0x48e3b0.lineJoin = "round";
    _0x48e3b0.moveTo(_0x47880b * 172, _0x47880b * 111);
    _0x48e3b0.bezierCurveTo(_0x47880b * 172, _0x47880b * 106, _0x47880b * 174, _0x47880b * 105, _0x47880b * 185, _0x47880b * 109);
    _0x48e3b0.bezierCurveTo(_0x47880b * 190, _0x47880b * 109, _0x47880b * 189, _0x47880b * 114, _0x47880b * 185, _0x47880b * 120);
    _0x48e3b0.bezierCurveTo(_0x47880b * 181, _0x47880b * 125, _0x47880b * 180, _0x47880b * 126, _0x47880b * 176, _0x47880b * 122);
    _0x48e3b0.bezierCurveTo(_0x47880b * 182, _0x47880b * 119, _0x47880b * 187, _0x47880b * 110, _0x47880b * 182, _0x47880b * 112);
    _0x48e3b0.closePath();
    fill_path(_0x48e3b0, _0x528833[2]);
    _0x48e3b0.beginPath();
    _0x48e3b0.lineCap = "round";
    _0x48e3b0.lineJoin = "round";
    _0x48e3b0.moveTo(_0x47880b * 202, _0x47880b * 125);
    _0x48e3b0.bezierCurveTo(_0x47880b * 197, _0x47880b * 117, _0x47880b * 193, _0x47880b * 116, _0x47880b * 193, _0x47880b * 120);
    _0x48e3b0.bezierCurveTo(_0x47880b * 192.5, _0x47880b * 124.5, _0x47880b * 192.5, _0x47880b * 124.5, _0x47880b * 192, _0x47880b * 129);
    _0x48e3b0.bezierCurveTo(_0x47880b * 188, _0x47880b * 129, _0x47880b * 187, _0x47880b * 124, _0x47880b * 189, _0x47880b * 120);
    _0x48e3b0.bezierCurveTo(_0x47880b * 191, _0x47880b * 110, _0x47880b * 192, _0x47880b * 110, _0x47880b * 200, _0x47880b * 116);
    _0x48e3b0.bezierCurveTo(_0x47880b * 208, _0x47880b * 120, _0x47880b * 207, _0x47880b * 123, _0x47880b * 202, _0x47880b * 125);
    _0x48e3b0.closePath();
    fill_path(_0x48e3b0, _0x528833[2]);
  }
  return _0x14a055;
}
function create_hurt_crab(_0x115dbc, _0x5bd3ef) {
  var _0xab86f5 = document.createElement("canvas");
  var _0x50e82c = _0xab86f5.getContext("2d");
  _0xab86f5.width = _0x115dbc * 283;
  _0xab86f5.height = _0x115dbc * 224;
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 100, _0x115dbc * 33);
  _0x50e82c.bezierCurveTo(_0x115dbc * 85, _0x115dbc * 62, _0x115dbc * 102, _0x115dbc * 66, _0x115dbc * 110, _0x115dbc * 83);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 181, _0x115dbc * 32);
  _0x50e82c.bezierCurveTo(_0x115dbc * 196, _0x115dbc * 62, _0x115dbc * 181, _0x115dbc * 68, _0x115dbc * 178, _0x115dbc * 69);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 225, _0x115dbc * 52);
  _0x50e82c.bezierCurveTo(_0x115dbc * 228, _0x115dbc * 78, _0x115dbc * 207, _0x115dbc * 77, _0x115dbc * 192, _0x115dbc * 88);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 34, _0x115dbc * 134);
  _0x50e82c.bezierCurveTo(_0x115dbc * 46, _0x115dbc * 111, _0x115dbc * 57, _0x115dbc * 111, _0x115dbc * 79, _0x115dbc * 109);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 249, _0x115dbc * 135);
  _0x50e82c.bezierCurveTo(_0x115dbc * 233, _0x115dbc * 107, _0x115dbc * 212, _0x115dbc * 112, _0x115dbc * 202, _0x115dbc * 115);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 56, _0x115dbc * 50);
  _0x50e82c.bezierCurveTo(_0x115dbc * 56, _0x115dbc * 82, _0x115dbc * 73, _0x115dbc * 82, _0x115dbc * 93, _0x115dbc * 89);
  fill_path(_0x50e82c, undefined, _0x5bd3ef[0], _0x115dbc * 40);
  _0x50e82c.beginPath();
  _0x50e82c.lineCap = "round";
  _0x50e82c.lineJoin = "round";
  _0x50e82c.moveTo(_0x115dbc * 93, _0x115dbc * 55);
  _0x50e82c.bezierCurveTo(_0x115dbc * 124, _0x115dbc * 29, _0x115dbc * 179, _0x115dbc * 44, _0x115dbc * 188, _0x115dbc * 52);
  _0x50e82c.bezierCurveTo(_0x115dbc * 207, _0x115dbc * 64, _0x115dbc * 226, _0x115dbc * 94, _0x115dbc * 231, _0x115dbc * 118);
  _0x50e82c.bezierCurveTo(_0x115dbc * 236, _0x115dbc * 145, _0x115dbc * 222, _0x115dbc * 184, _0x115dbc * 193, _0x115dbc * 192);
  _0x50e82c.bezierCurveTo(_0x115dbc * 147, _0x115dbc * 201, _0x115dbc * 116, _0x115dbc * 200, _0x115dbc * 93, _0x115dbc * 193);
  _0x50e82c.bezierCurveTo(_0x115dbc * 61, _0x115dbc * 180, _0x115dbc * 48, _0x115dbc * 147, _0x115dbc * 50, _0x115dbc * 123);
  _0x50e82c.bezierCurveTo(_0x115dbc * 50, _0x115dbc * 93, _0x115dbc * 76, _0x115dbc * 66, _0x115dbc * 92, _0x115dbc * 56);
  _0x50e82c.closePath();
  fill_path(_0x50e82c, _0x5bd3ef[0]);
  return _0xab86f5;
}
function create_crab_claw_left(_0x458c46, _0x17dc47, _0x1658a5) {
  var _0x53a479 = document.createElement("canvas");
  var _0x5cfbe0 = _0x53a479.getContext("2d");
  _0x53a479.width = _0x458c46 * 131;
  _0x53a479.height = _0x458c46 * 121;
  _0x5cfbe0.translate(0, _0x458c46 * 20);
  _0x5cfbe0.beginPath();
  _0x5cfbe0.lineCap = "round";
  _0x5cfbe0.lineJoin = "round";
  _0x5cfbe0.moveTo(_0x458c46 * 110, _0x458c46 * 59);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 93, _0x458c46 * 61.5, _0x458c46 * 93, _0x458c46 * 61.5, _0x458c46 * 76, _0x458c46 * 64);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 84.5, _0x458c46 * 78.5, _0x458c46 * 84.5, _0x458c46 * 78.5, _0x458c46 * 93, _0x458c46 * 93);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 70, _0x458c46 * 111, _0x458c46 * 43, _0x458c46 * 103, _0x458c46 * 30, _0x458c46 * 82);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 17, _0x458c46 * 61, _0x458c46 * 25, _0x458c46 * 30, _0x458c46 * 51, _0x458c46 * 21);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 66, _0x458c46 * 15, _0x458c46 * 83, _0x458c46 * 18, _0x458c46 * 96, _0x458c46 * 29);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 104, _0x458c46 * 35, _0x458c46 * 109, _0x458c46 * 47, _0x458c46 * 110, _0x458c46 * 58);
  _0x5cfbe0.closePath();
  fill_path(_0x5cfbe0, _0x1658a5[0]);
  _0x5cfbe0.globalAlpha = 1;
  _0x5cfbe0.translate(0, _0x458c46 * -20);
  _0x5cfbe0.beginPath();
  _0x5cfbe0.lineCap = "round";
  _0x5cfbe0.lineJoin = "round";
  _0x5cfbe0.moveTo(_0x458c46 * 110, _0x458c46 * 59);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 93, _0x458c46 * 61.5, _0x458c46 * 93, _0x458c46 * 61.5, _0x458c46 * 76, _0x458c46 * 64);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 84.5, _0x458c46 * 78.5, _0x458c46 * 84.5, _0x458c46 * 78.5, _0x458c46 * 93, _0x458c46 * 93);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 70, _0x458c46 * 111, _0x458c46 * 43, _0x458c46 * 103, _0x458c46 * 30, _0x458c46 * 82);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 17, _0x458c46 * 61, _0x458c46 * 25, _0x458c46 * 30, _0x458c46 * 51, _0x458c46 * 21);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 66, _0x458c46 * 15, _0x458c46 * 83, _0x458c46 * 18, _0x458c46 * 96, _0x458c46 * 29);
  _0x5cfbe0.bezierCurveTo(_0x458c46 * 104, _0x458c46 * 35, _0x458c46 * 109, _0x458c46 * 47, _0x458c46 * 110, _0x458c46 * 58);
  _0x5cfbe0.closePath();
  fill_path(_0x5cfbe0, _0x1658a5[1], _0x1658a5[2], _0x458c46 * 10);
  return _0x53a479;
}
function create_crab_claw_right(_0x3bf911, _0xd946c7, _0xfe7c4) {
  var _0x1f3e71 = document.createElement("canvas");
  var _0x10eaae = _0x1f3e71.getContext("2d");
  _0x1f3e71.width = _0x3bf911 * 104;
  _0x1f3e71.height = _0x3bf911 * 112;
  _0x10eaae.translate(0, _0x3bf911 * 15);
  _0x10eaae.beginPath();
  _0x10eaae.lineCap = "round";
  _0x10eaae.lineJoin = "round";
  _0x10eaae.moveTo(_0x3bf911 * 16, _0x3bf911 * 44);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 30.5, _0x3bf911 * 48, _0x3bf911 * 30.5, _0x3bf911 * 48, _0x3bf911 * 45, _0x3bf911 * 52);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 36.5, _0x3bf911 * 63, _0x3bf911 * 36.5, _0x3bf911 * 63, _0x3bf911 * 28, _0x3bf911 * 74);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 32, _0x3bf911 * 86, _0x3bf911 * 61, _0x3bf911 * 92, _0x3bf911 * 78, _0x3bf911 * 76);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 93, _0x3bf911 * 62, _0x3bf911 * 92, _0x3bf911 * 40, _0x3bf911 * 80, _0x3bf911 * 26);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 65, _0x3bf911 * 11, _0x3bf911 * 42, _0x3bf911 * 16, _0x3bf911 * 34, _0x3bf911 * 21);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 22, _0x3bf911 * 27, _0x3bf911 * 16, _0x3bf911 * 39, _0x3bf911 * 16, _0x3bf911 * 44);
  _0x10eaae.closePath();
  fill_path(_0x10eaae, _0xfe7c4[0]);
  _0x10eaae.globalAlpha = 1;
  _0x10eaae.translate(0, _0x3bf911 * -15);
  _0x10eaae.beginPath();
  _0x10eaae.lineCap = "round";
  _0x10eaae.lineJoin = "round";
  _0x10eaae.moveTo(_0x3bf911 * 16, _0x3bf911 * 44);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 30.5, _0x3bf911 * 48, _0x3bf911 * 30.5, _0x3bf911 * 48, _0x3bf911 * 45, _0x3bf911 * 52);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 36.5, _0x3bf911 * 63, _0x3bf911 * 36.5, _0x3bf911 * 63, _0x3bf911 * 28, _0x3bf911 * 74);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 32, _0x3bf911 * 86, _0x3bf911 * 61, _0x3bf911 * 92, _0x3bf911 * 78, _0x3bf911 * 76);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 93, _0x3bf911 * 62, _0x3bf911 * 92, _0x3bf911 * 40, _0x3bf911 * 80, _0x3bf911 * 26);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 65, _0x3bf911 * 11, _0x3bf911 * 42, _0x3bf911 * 16, _0x3bf911 * 34, _0x3bf911 * 21);
  _0x10eaae.bezierCurveTo(_0x3bf911 * 22, _0x3bf911 * 27, _0x3bf911 * 16, _0x3bf911 * 39, _0x3bf911 * 16, _0x3bf911 * 44);
  _0x10eaae.closePath();
  fill_path(_0x10eaae, _0xfe7c4[1], _0xfe7c4[2], _0x3bf911 * 8);
  return _0x1f3e71;
}
function create_crab_stick(_0x48d739, _0x296f9d, _0x3307ab) {
  var _0x4edbcc = document.createElement("canvas");
  var _0x27b69d = _0x4edbcc.getContext("2d");
  _0x4edbcc.width = _0x48d739 * 321;
  _0x4edbcc.height = _0x48d739 * 284;
  _0x27b69d.translate(_0x48d739 * 100, _0x48d739 * 30);
  _0x27b69d.translate(_0x48d739 * 5, _0x48d739 * 10);
  _0x27b69d.globalAlpha = _0x296f9d ? 0.5 : 1;
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[0]);
  _0x27b69d.globalAlpha = 1;
  _0x27b69d.translate(_0x48d739 * -5, _0x48d739 * -10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[1], _0x3307ab[2], _0x48d739 * 10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 167, _0x48d739 * 120);
  _0x27b69d.bezierCurveTo(_0x48d739 * 196, _0x48d739 * 106, _0x48d739 * 207, _0x48d739 * 111, _0x48d739 * 199, _0x48d739 * 135);
  _0x27b69d.bezierCurveTo(_0x48d739 * 185, _0x48d739 * 172, _0x48d739 * 166, _0x48d739 * 187, _0x48d739 * 145, _0x48d739 * 179);
  _0x27b69d.bezierCurveTo(_0x48d739 * 118, _0x48d739 * 166, _0x48d739 * 127, _0x48d739 * 139, _0x48d739 * 166, _0x48d739 * 121);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[3]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 25, _0x48d739 * 64);
  _0x27b69d.bezierCurveTo(_0x48d739 * 59, _0x48d739 * 96, _0x48d739 * 97, _0x48d739 * 128, _0x48d739 * 129, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 126, _0x48d739 * 163, _0x48d739 * 134, _0x48d739 * 174, _0x48d739 * 142, _0x48d739 * 180);
  _0x27b69d.bezierCurveTo(_0x48d739 * 114, _0x48d739 * 170, _0x48d739 * 68, _0x48d739 * 134, _0x48d739 * 31, _0x48d739 * 85);
  _0x27b69d.bezierCurveTo(_0x48d739 * 24, _0x48d739 * 71, _0x48d739 * 24, _0x48d739 * 70, _0x48d739 * 25, _0x48d739 * 65);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[2]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 161, _0x48d739 * 141);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 131, _0x48d739 * 186, _0x48d739 * 135, _0x48d739 * 173, _0x48d739 * 152);
  _0x27b69d.bezierCurveTo(_0x48d739 * 163, _0x48d739 * 163, _0x48d739 * 155, _0x48d739 * 161, _0x48d739 * 151, _0x48d739 * 150);
  _0x27b69d.bezierCurveTo(_0x48d739 * 147, _0x48d739 * 140, _0x48d739 * 155, _0x48d739 * 131, _0x48d739 * 175, _0x48d739 * 125);
  _0x27b69d.bezierCurveTo(_0x48d739 * 190, _0x48d739 * 120, _0x48d739 * 196, _0x48d739 * 121, _0x48d739 * 189, _0x48d739 * 143);
  _0x27b69d.bezierCurveTo(_0x48d739 * 182, _0x48d739 * 167, _0x48d739 * 169, _0x48d739 * 174, _0x48d739 * 157, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 138, _0x48d739 * 172, _0x48d739 * 139, _0x48d739 * 162, _0x48d739 * 140, _0x48d739 * 156);
  fill_path(_0x27b69d, undefined, _0x3307ab[4], _0x48d739 * 4);
  _0x27b69d.translate(_0x48d739 * -100, _0x48d739 * -30);
  _0x27b69d.translate(_0x48d739 * 10, _0x48d739 * 70);
  _0x27b69d.translate(_0x48d739 * 5, _0x48d739 * 10);
  _0x27b69d.globalAlpha = _0x296f9d ? 0.5 : 1;
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[0]);
  _0x27b69d.globalAlpha = 1;
  _0x27b69d.translate(_0x48d739 * -5, _0x48d739 * -10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[1], _0x3307ab[2], _0x48d739 * 10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 167, _0x48d739 * 120);
  _0x27b69d.bezierCurveTo(_0x48d739 * 196, _0x48d739 * 106, _0x48d739 * 207, _0x48d739 * 111, _0x48d739 * 199, _0x48d739 * 135);
  _0x27b69d.bezierCurveTo(_0x48d739 * 185, _0x48d739 * 172, _0x48d739 * 166, _0x48d739 * 187, _0x48d739 * 145, _0x48d739 * 179);
  _0x27b69d.bezierCurveTo(_0x48d739 * 118, _0x48d739 * 166, _0x48d739 * 127, _0x48d739 * 139, _0x48d739 * 166, _0x48d739 * 121);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[3]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 25, _0x48d739 * 64);
  _0x27b69d.bezierCurveTo(_0x48d739 * 59, _0x48d739 * 96, _0x48d739 * 97, _0x48d739 * 128, _0x48d739 * 129, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 126, _0x48d739 * 163, _0x48d739 * 134, _0x48d739 * 174, _0x48d739 * 142, _0x48d739 * 180);
  _0x27b69d.bezierCurveTo(_0x48d739 * 114, _0x48d739 * 170, _0x48d739 * 68, _0x48d739 * 134, _0x48d739 * 31, _0x48d739 * 85);
  _0x27b69d.bezierCurveTo(_0x48d739 * 24, _0x48d739 * 71, _0x48d739 * 24, _0x48d739 * 70, _0x48d739 * 25, _0x48d739 * 65);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[2]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 161, _0x48d739 * 141);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 131, _0x48d739 * 186, _0x48d739 * 135, _0x48d739 * 173, _0x48d739 * 152);
  _0x27b69d.bezierCurveTo(_0x48d739 * 163, _0x48d739 * 163, _0x48d739 * 155, _0x48d739 * 161, _0x48d739 * 151, _0x48d739 * 150);
  _0x27b69d.bezierCurveTo(_0x48d739 * 147, _0x48d739 * 140, _0x48d739 * 155, _0x48d739 * 131, _0x48d739 * 175, _0x48d739 * 125);
  _0x27b69d.bezierCurveTo(_0x48d739 * 190, _0x48d739 * 120, _0x48d739 * 196, _0x48d739 * 121, _0x48d739 * 189, _0x48d739 * 143);
  _0x27b69d.bezierCurveTo(_0x48d739 * 182, _0x48d739 * 167, _0x48d739 * 169, _0x48d739 * 174, _0x48d739 * 157, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 138, _0x48d739 * 172, _0x48d739 * 139, _0x48d739 * 162, _0x48d739 * 140, _0x48d739 * 156);
  fill_path(_0x27b69d, undefined, _0x3307ab[4], _0x48d739 * 4);
  _0x27b69d.translate(_0x48d739 * 20, _0x48d739 * -80);
  _0x27b69d.translate(_0x48d739 * 5, _0x48d739 * 10);
  _0x27b69d.globalAlpha = _0x296f9d ? 0.5 : 1;
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[0]);
  _0x27b69d.globalAlpha = 1;
  _0x27b69d.translate(_0x48d739 * -5, _0x48d739 * -10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 58, _0x48d739 * 33);
  _0x27b69d.bezierCurveTo(_0x48d739 * 81, _0x48d739 * 22, _0x48d739 * 93, _0x48d739 * 26, _0x48d739 * 123, _0x48d739 * 47);
  _0x27b69d.bezierCurveTo(_0x48d739 * 160, _0x48d739 * 73, _0x48d739 * 169, _0x48d739 * 80, _0x48d739 * 191, _0x48d739 * 99);
  _0x27b69d.bezierCurveTo(_0x48d739 * 202, _0x48d739 * 107, _0x48d739 * 211, _0x48d739 * 118, _0x48d739 * 195, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 183, _0x48d739 * 157, _0x48d739 * 192, _0x48d739 * 129, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 78, _0x48d739 * 140, _0x48d739 * 68, _0x48d739 * 129, _0x48d739 * 37, _0x48d739 * 94);
  _0x27b69d.bezierCurveTo(_0x48d739 * 15, _0x48d739 * 68, _0x48d739 * 25, _0x48d739 * 52, _0x48d739 * 56, _0x48d739 * 34);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[1], _0x3307ab[2], _0x48d739 * 10);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 167, _0x48d739 * 120);
  _0x27b69d.bezierCurveTo(_0x48d739 * 196, _0x48d739 * 106, _0x48d739 * 207, _0x48d739 * 111, _0x48d739 * 199, _0x48d739 * 135);
  _0x27b69d.bezierCurveTo(_0x48d739 * 185, _0x48d739 * 172, _0x48d739 * 166, _0x48d739 * 187, _0x48d739 * 145, _0x48d739 * 179);
  _0x27b69d.bezierCurveTo(_0x48d739 * 118, _0x48d739 * 166, _0x48d739 * 127, _0x48d739 * 139, _0x48d739 * 166, _0x48d739 * 121);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[3]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 25, _0x48d739 * 64);
  _0x27b69d.bezierCurveTo(_0x48d739 * 59, _0x48d739 * 96, _0x48d739 * 97, _0x48d739 * 128, _0x48d739 * 129, _0x48d739 * 151);
  _0x27b69d.bezierCurveTo(_0x48d739 * 126, _0x48d739 * 163, _0x48d739 * 134, _0x48d739 * 174, _0x48d739 * 142, _0x48d739 * 180);
  _0x27b69d.bezierCurveTo(_0x48d739 * 114, _0x48d739 * 170, _0x48d739 * 68, _0x48d739 * 134, _0x48d739 * 31, _0x48d739 * 85);
  _0x27b69d.bezierCurveTo(_0x48d739 * 24, _0x48d739 * 71, _0x48d739 * 24, _0x48d739 * 70, _0x48d739 * 25, _0x48d739 * 65);
  _0x27b69d.closePath();
  fill_path(_0x27b69d, _0x3307ab[2]);
  _0x27b69d.beginPath();
  _0x27b69d.lineCap = "round";
  _0x27b69d.lineJoin = "round";
  _0x27b69d.moveTo(_0x48d739 * 161, _0x48d739 * 141);
  _0x27b69d.bezierCurveTo(_0x48d739 * 181, _0x48d739 * 131, _0x48d739 * 186, _0x48d739 * 135, _0x48d739 * 173, _0x48d739 * 152);
  _0x27b69d.bezierCurveTo(_0x48d739 * 163, _0x48d739 * 163, _0x48d739 * 155, _0x48d739 * 161, _0x48d739 * 151, _0x48d739 * 150);
  _0x27b69d.bezierCurveTo(_0x48d739 * 147, _0x48d739 * 140, _0x48d739 * 155, _0x48d739 * 131, _0x48d739 * 175, _0x48d739 * 125);
  _0x27b69d.bezierCurveTo(_0x48d739 * 190, _0x48d739 * 120, _0x48d739 * 196, _0x48d739 * 121, _0x48d739 * 189, _0x48d739 * 143);
  _0x27b69d.bezierCurveTo(_0x48d739 * 182, _0x48d739 * 167, _0x48d739 * 169, _0x48d739 * 174, _0x48d739 * 157, _0x48d739 * 174);
  _0x27b69d.bezierCurveTo(_0x48d739 * 138, _0x48d739 * 172, _0x48d739 * 139, _0x48d739 * 162, _0x48d739 * 140, _0x48d739 * 156);
  fill_path(_0x27b69d, undefined, _0x3307ab[4], _0x48d739 * 4);
  return _0x4edbcc;
}
function create_goldsword(_0x2d7569, _0x3fc89f, _0x43af0a) {
  var _0x4bfdf8 = document.createElement("canvas");
  var _0x3590be = _0x4bfdf8.getContext("2d");
  _0x4bfdf8.width = _0x2d7569 * 290;
  _0x4bfdf8.height = _0x2d7569 * 525;
  _0x3590be.globalAlpha = _0x3fc89f ? 0.5 : 1;
  _0x3590be.translate(_0x2d7569 * 20, _0x2d7569 * 20);
  _0x3590be.beginPath();
  _0x3590be.lineCap = "round";
  _0x3590be.lineJoin = "round";
  _0x3590be.moveTo(_0x2d7569 * 111, _0x2d7569 * 351);
  _0x3590be.bezierCurveTo(_0x2d7569 * 128.5, _0x2d7569 * 218.5, _0x2d7569 * 128.5, _0x2d7569 * 218.5, _0x2d7569 * 146, _0x2d7569 * 86);
  _0x3590be.bezierCurveTo(_0x2d7569 * 166.5, _0x2d7569 * 66.5, _0x2d7569 * 166.5, _0x2d7569 * 66.5, _0x2d7569 * 187, _0x2d7569 * 47);
  _0x3590be.bezierCurveTo(_0x2d7569 * 201, _0x2d7569 * 71.5, _0x2d7569 * 201, _0x2d7569 * 71.5, _0x2d7569 * 215, _0x2d7569 * 96);
  _0x3590be.bezierCurveTo(_0x2d7569 * 193, _0x2d7569 * 228.5, _0x2d7569 * 193, _0x2d7569 * 228.5, _0x2d7569 * 171, _0x2d7569 * 361);
  _0x3590be.closePath();
  fill_path(_0x3590be, _0x43af0a[0]);
  _0x3590be.save();
  _0x3590be.translate(_0x2d7569 * 129.5, _0x2d7569 * 424);
  _0x3590be.rotate(0.16);
  round_rect(_0x3590be, _0x2d7569 * -15.5, _0x2d7569 * -63, _0x2d7569 * 31, _0x2d7569 * 126, _0x2d7569 * 10);
  _0x3590be.restore();
  fill_path(_0x3590be, _0x43af0a[0]);
  circle(_0x3590be, _0x2d7569 * 121, _0x2d7569 * 480, _0x2d7569 * 20.396078054371138);
  fill_path(_0x3590be, _0x43af0a[0]);
  _0x3590be.beginPath();
  _0x3590be.lineCap = "round";
  _0x3590be.lineJoin = "round";
  _0x3590be.moveTo(_0x2d7569 * 90, _0x2d7569 * 311);
  _0x3590be.bezierCurveTo(_0x2d7569 * 95, _0x2d7569 * 324, _0x2d7569 * 95, _0x2d7569 * 324, _0x2d7569 * 100, _0x2d7569 * 337);
  _0x3590be.bezierCurveTo(_0x2d7569 * 141.5, _0x2d7569 * 345.5, _0x2d7569 * 141.5, _0x2d7569 * 345.5, _0x2d7569 * 183, _0x2d7569 * 354);
  _0x3590be.bezierCurveTo(_0x2d7569 * 193.5, _0x2d7569 * 342.5, _0x2d7569 * 193.5, _0x2d7569 * 342.5, _0x2d7569 * 204, _0x2d7569 * 331);
  _0x3590be.bezierCurveTo(_0x2d7569 * 202, _0x2d7569 * 354, _0x2d7569 * 202, _0x2d7569 * 354, _0x2d7569 * 200, _0x2d7569 * 377);
  _0x3590be.bezierCurveTo(_0x2d7569 * 147, _0x2d7569 * 388, _0x2d7569 * 106, _0x2d7569 * 371, _0x2d7569 * 79, _0x2d7569 * 356);
  _0x3590be.closePath();
  fill_path(_0x3590be, _0x43af0a[0]);
  _0x3590be.globalAlpha = 1;
  _0x3590be.translate(_0x2d7569 * -20, _0x2d7569 * -20);
  _0x3590be.beginPath();
  _0x3590be.lineCap = "round";
  _0x3590be.lineJoin = "round";
  _0x3590be.moveTo(_0x2d7569 * 111, _0x2d7569 * 351);
  _0x3590be.bezierCurveTo(_0x2d7569 * 128.5, _0x2d7569 * 218.5, _0x2d7569 * 128.5, _0x2d7569 * 218.5, _0x2d7569 * 146, _0x2d7569 * 86);
  _0x3590be.bezierCurveTo(_0x2d7569 * 166.5, _0x2d7569 * 66.5, _0x2d7569 * 166.5, _0x2d7569 * 66.5, _0x2d7569 * 187, _0x2d7569 * 47);
  _0x3590be.bezierCurveTo(_0x2d7569 * 201, _0x2d7569 * 71.5, _0x2d7569 * 201, _0x2d7569 * 71.5, _0x2d7569 * 215, _0x2d7569 * 96);
  _0x3590be.bezierCurveTo(_0x2d7569 * 193, _0x2d7569 * 228.5, _0x2d7569 * 193, _0x2d7569 * 228.5, _0x2d7569 * 171, _0x2d7569 * 361);
  _0x3590be.closePath();
  fill_path(_0x3590be, _0x43af0a[1], _0x43af0a[2], _0x2d7569 * 12.5);
  _0x3590be.save();
  _0x3590be.translate(_0x2d7569 * 129.5, _0x2d7569 * 424);
  _0x3590be.rotate(0.16);
  round_rect(_0x3590be, _0x2d7569 * -15.5, _0x2d7569 * -63, _0x2d7569 * 31, _0x2d7569 * 126, _0x2d7569 * 10);
  _0x3590be.restore();
  fill_path(_0x3590be, _0x43af0a[4], _0x43af0a[5], _0x2d7569 * 12.5);
  circle(_0x3590be, _0x2d7569 * 121, _0x2d7569 * 480, _0x2d7569 * 20.396078054371138);
  fill_path(_0x3590be, _0x43af0a[4], _0x43af0a[5], _0x2d7569 * 12.5);
  _0x3590be.beginPath();
  _0x3590be.lineCap = "round";
  _0x3590be.lineJoin = "round";
  _0x3590be.moveTo(_0x2d7569 * 90, _0x2d7569 * 311);
  _0x3590be.bezierCurveTo(_0x2d7569 * 95, _0x2d7569 * 324, _0x2d7569 * 95, _0x2d7569 * 324, _0x2d7569 * 100, _0x2d7569 * 337);
  _0x3590be.bezierCurveTo(_0x2d7569 * 141.5, _0x2d7569 * 345.5, _0x2d7569 * 141.5, _0x2d7569 * 345.5, _0x2d7569 * 183, _0x2d7569 * 354);
  _0x3590be.bezierCurveTo(_0x2d7569 * 193.5, _0x2d7569 * 342.5, _0x2d7569 * 193.5, _0x2d7569 * 342.5, _0x2d7569 * 204, _0x2d7569 * 331);
  _0x3590be.bezierCurveTo(_0x2d7569 * 202, _0x2d7569 * 354, _0x2d7569 * 202, _0x2d7569 * 354, _0x2d7569 * 200, _0x2d7569 * 377);
  _0x3590be.bezierCurveTo(_0x2d7569 * 147, _0x2d7569 * 388, _0x2d7569 * 106, _0x2d7569 * 371, _0x2d7569 * 79, _0x2d7569 * 356);
  _0x3590be.closePath();
  fill_path(_0x3590be, _0x43af0a[1], _0x43af0a[2], _0x2d7569 * 12.5);
  return _0x4bfdf8;
}
function create_diamondsword(_0x28b238, _0x5b7392, _0x4d9f90) {
  var _0x58f3ca = document.createElement("canvas");
  var _0x17f708 = _0x58f3ca.getContext("2d");
  _0x58f3ca.width = _0x28b238 * 290;
  _0x58f3ca.height = _0x28b238 * 525;
  _0x17f708.globalAlpha = _0x5b7392 ? 0.5 : 1;
  _0x17f708.translate(_0x28b238 * 20, _0x28b238 * 20);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 112, _0x28b238 * 356);
  _0x17f708.bezierCurveTo(_0x28b238 * 124, _0x28b238 * 220.5, _0x28b238 * 124, _0x28b238 * 220.5, _0x28b238 * 136, _0x28b238 * 85);
  _0x17f708.bezierCurveTo(_0x28b238 * 162.5, _0x28b238 * 65.5, _0x28b238 * 162.5, _0x28b238 * 65.5, _0x28b238 * 189, _0x28b238 * 46);
  _0x17f708.bezierCurveTo(_0x28b238 * 208.5, _0x28b238 * 72.5, _0x28b238 * 208.5, _0x28b238 * 72.5, _0x28b238 * 228, _0x28b238 * 99);
  _0x17f708.bezierCurveTo(_0x28b238 * 200, _0x28b238 * 232, _0x28b238 * 200, _0x28b238 * 232, _0x28b238 * 172, _0x28b238 * 365);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[0]);
  _0x17f708.save();
  _0x17f708.translate(_0x28b238 * 131, _0x28b238 * 423);
  _0x17f708.rotate(0.16);
  round_rect(_0x17f708, _0x28b238 * -14, _0x28b238 * -53, _0x28b238 * 28, _0x28b238 * 106, _0x28b238 * 10);
  _0x17f708.restore();
  fill_path(_0x17f708, _0x4d9f90[0]);
  _0x17f708.save();
  _0x17f708.translate(_0x28b238 * 122, _0x28b238 * 480);
  _0x17f708.rotate(1.72);
  round_regular_polygon(_0x17f708, 4, _0x28b238 * 26.476404589747453, _0x28b238 * 10);
  _0x17f708.restore();
  fill_path(_0x17f708, _0x4d9f90[0]);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 210, _0x28b238 * 387);
  _0x17f708.bezierCurveTo(_0x28b238 * 138, _0x28b238 * 376, _0x28b238 * 138, _0x28b238 * 376, _0x28b238 * 66, _0x28b238 * 365);
  _0x17f708.bezierCurveTo(_0x28b238 * 76, _0x28b238 * 355, _0x28b238 * 76, _0x28b238 * 355, _0x28b238 * 86, _0x28b238 * 345);
  _0x17f708.bezierCurveTo(_0x28b238 * 99, _0x28b238 * 346.5, _0x28b238 * 99, _0x28b238 * 346.5, _0x28b238 * 112, _0x28b238 * 348);
  _0x17f708.bezierCurveTo(_0x28b238 * 128.5, _0x28b238 * 344, _0x28b238 * 128.5, _0x28b238 * 344, _0x28b238 * 145, _0x28b238 * 340);
  _0x17f708.bezierCurveTo(_0x28b238 * 158, _0x28b238 * 348, _0x28b238 * 158, _0x28b238 * 348, _0x28b238 * 171, _0x28b238 * 356);
  _0x17f708.bezierCurveTo(_0x28b238 * 184, _0x28b238 * 358, _0x28b238 * 184, _0x28b238 * 358, _0x28b238 * 197, _0x28b238 * 360);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[0]);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 129, _0x28b238 * 338);
  _0x17f708.bezierCurveTo(_0x28b238 * 137, _0x28b238 * 336, _0x28b238 * 137, _0x28b238 * 336, _0x28b238 * 145, _0x28b238 * 334);
  _0x17f708.bezierCurveTo(_0x28b238 * 152.5, _0x28b238 * 338, _0x28b238 * 152.5, _0x28b238 * 338, _0x28b238 * 160, _0x28b238 * 342);
  _0x17f708.bezierCurveTo(_0x28b238 * 184, _0x28b238 * 224, _0x28b238 * 184, _0x28b238 * 224, _0x28b238 * 208, _0x28b238 * 106);
  _0x17f708.bezierCurveTo(_0x28b238 * 197, _0x28b238 * 88, _0x28b238 * 187, _0x28b238 * 70, _0x28b238 * 186, _0x28b238 * 70);
  _0x17f708.bezierCurveTo(_0x28b238 * 169.5, _0x28b238 * 83, _0x28b238 * 169.5, _0x28b238 * 83, _0x28b238 * 153, _0x28b238 * 96);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[0]);
  _0x17f708.globalAlpha = 1;
  _0x17f708.translate(_0x28b238 * -20, _0x28b238 * -20);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 112, _0x28b238 * 356);
  _0x17f708.bezierCurveTo(_0x28b238 * 124, _0x28b238 * 220.5, _0x28b238 * 124, _0x28b238 * 220.5, _0x28b238 * 136, _0x28b238 * 85);
  _0x17f708.bezierCurveTo(_0x28b238 * 162.5, _0x28b238 * 65.5, _0x28b238 * 162.5, _0x28b238 * 65.5, _0x28b238 * 189, _0x28b238 * 46);
  _0x17f708.bezierCurveTo(_0x28b238 * 208.5, _0x28b238 * 72.5, _0x28b238 * 208.5, _0x28b238 * 72.5, _0x28b238 * 228, _0x28b238 * 99);
  _0x17f708.bezierCurveTo(_0x28b238 * 200, _0x28b238 * 232, _0x28b238 * 200, _0x28b238 * 232, _0x28b238 * 172, _0x28b238 * 365);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[1], _0x4d9f90[2], _0x28b238 * 12.5);
  _0x17f708.save();
  _0x17f708.translate(_0x28b238 * 131, _0x28b238 * 423);
  _0x17f708.rotate(0.16);
  round_rect(_0x17f708, _0x28b238 * -14, _0x28b238 * -53, _0x28b238 * 28, _0x28b238 * 106, _0x28b238 * 10);
  _0x17f708.restore();
  fill_path(_0x17f708, _0x4d9f90[4], _0x4d9f90[5], _0x28b238 * 12.5);
  _0x17f708.save();
  _0x17f708.translate(_0x28b238 * 122, _0x28b238 * 480);
  _0x17f708.rotate(1.72);
  round_regular_polygon(_0x17f708, 4, _0x28b238 * 26.476404589747453, _0x28b238 * 10);
  _0x17f708.restore();
  fill_path(_0x17f708, _0x4d9f90[1], _0x4d9f90[2], _0x28b238 * 12.5);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 210, _0x28b238 * 387);
  _0x17f708.bezierCurveTo(_0x28b238 * 138, _0x28b238 * 376, _0x28b238 * 138, _0x28b238 * 376, _0x28b238 * 66, _0x28b238 * 365);
  _0x17f708.bezierCurveTo(_0x28b238 * 76, _0x28b238 * 355, _0x28b238 * 76, _0x28b238 * 355, _0x28b238 * 86, _0x28b238 * 345);
  _0x17f708.bezierCurveTo(_0x28b238 * 99, _0x28b238 * 346.5, _0x28b238 * 99, _0x28b238 * 346.5, _0x28b238 * 112, _0x28b238 * 348);
  _0x17f708.bezierCurveTo(_0x28b238 * 128.5, _0x28b238 * 344, _0x28b238 * 128.5, _0x28b238 * 344, _0x28b238 * 145, _0x28b238 * 340);
  _0x17f708.bezierCurveTo(_0x28b238 * 158, _0x28b238 * 348, _0x28b238 * 158, _0x28b238 * 348, _0x28b238 * 171, _0x28b238 * 356);
  _0x17f708.bezierCurveTo(_0x28b238 * 184, _0x28b238 * 358, _0x28b238 * 184, _0x28b238 * 358, _0x28b238 * 197, _0x28b238 * 360);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[1], _0x4d9f90[2], _0x28b238 * 12.5);
  _0x17f708.beginPath();
  _0x17f708.lineCap = "round";
  _0x17f708.lineJoin = "round";
  _0x17f708.moveTo(_0x28b238 * 129, _0x28b238 * 338);
  _0x17f708.bezierCurveTo(_0x28b238 * 137, _0x28b238 * 336, _0x28b238 * 137, _0x28b238 * 336, _0x28b238 * 145, _0x28b238 * 334);
  _0x17f708.bezierCurveTo(_0x28b238 * 152.5, _0x28b238 * 338, _0x28b238 * 152.5, _0x28b238 * 338, _0x28b238 * 160, _0x28b238 * 342);
  _0x17f708.bezierCurveTo(_0x28b238 * 184, _0x28b238 * 224, _0x28b238 * 184, _0x28b238 * 224, _0x28b238 * 208, _0x28b238 * 106);
  _0x17f708.bezierCurveTo(_0x28b238 * 197, _0x28b238 * 88, _0x28b238 * 187, _0x28b238 * 70, _0x28b238 * 186, _0x28b238 * 70);
  _0x17f708.bezierCurveTo(_0x28b238 * 169.5, _0x28b238 * 83, _0x28b238 * 169.5, _0x28b238 * 83, _0x28b238 * 153, _0x28b238 * 96);
  _0x17f708.closePath();
  fill_path(_0x17f708, _0x4d9f90[3]);
  return _0x58f3ca;
}
function create_amesword(_0x2f35c0, _0x4eb8c3, _0x4a9fe1) {
  var _0xf6e75a = document.createElement("canvas");
  var _0x5aa7e0 = _0xf6e75a.getContext("2d");
  _0xf6e75a.width = _0x2f35c0 * 290;
  _0xf6e75a.height = _0x2f35c0 * 525;
  _0x5aa7e0.globalAlpha = _0x4eb8c3 ? 0.5 : 1;
  _0x5aa7e0.translate(_0x2f35c0 * 20, _0x2f35c0 * 20);
  _0x5aa7e0.translate(_0x2f35c0 * -20, _0x2f35c0 * -20);
  _0x5aa7e0.save();
  _0x5aa7e0.translate(_0x2f35c0 * 132, _0x2f35c0 * 423);
  _0x5aa7e0.rotate(0.16);
  round_rect(_0x5aa7e0, _0x2f35c0 * -14, _0x2f35c0 * -61, _0x2f35c0 * 28, _0x2f35c0 * 122, _0x2f35c0 * 10);
  _0x5aa7e0.restore();
  fill_path(_0x5aa7e0, _0x4a9fe1[0]);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 100, _0x2f35c0 * 344);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 123, _0x2f35c0 * 214, _0x2f35c0 * 123, _0x2f35c0 * 214, _0x2f35c0 * 146, _0x2f35c0 * 84);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 166.5, _0x2f35c0 * 65, _0x2f35c0 * 166.5, _0x2f35c0 * 65, _0x2f35c0 * 187, _0x2f35c0 * 46);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 201, _0x2f35c0 * 71, _0x2f35c0 * 201, _0x2f35c0 * 71, _0x2f35c0 * 215, _0x2f35c0 * 96);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 199.5, _0x2f35c0 * 226.5, _0x2f35c0 * 199.5, _0x2f35c0 * 226.5, _0x2f35c0 * 184, _0x2f35c0 * 357);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 162.5, _0x2f35c0 * 362.5, _0x2f35c0 * 162.5, _0x2f35c0 * 362.5, _0x2f35c0 * 141, _0x2f35c0 * 368);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[0]);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 75, _0x2f35c0 * 328);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 88, _0x2f35c0 * 336.5, _0x2f35c0 * 88, _0x2f35c0 * 336.5, _0x2f35c0 * 101, _0x2f35c0 * 345);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 123.5, _0x2f35c0 * 337.5, _0x2f35c0 * 123.5, _0x2f35c0 * 337.5, _0x2f35c0 * 146, _0x2f35c0 * 330);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 165, _0x2f35c0 * 343.5, _0x2f35c0 * 165, _0x2f35c0 * 343.5, _0x2f35c0 * 184, _0x2f35c0 * 357);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 198.5, _0x2f35c0 * 353, _0x2f35c0 * 198.5, _0x2f35c0 * 353, _0x2f35c0 * 213, _0x2f35c0 * 349);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 200.5, _0x2f35c0 * 364.5, _0x2f35c0 * 200.5, _0x2f35c0 * 364.5, _0x2f35c0 * 188, _0x2f35c0 * 380);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 163, _0x2f35c0 * 380.5, _0x2f35c0 * 163, _0x2f35c0 * 380.5, _0x2f35c0 * 138, _0x2f35c0 * 381);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 112, _0x2f35c0 * 373.5, _0x2f35c0 * 112, _0x2f35c0 * 373.5, _0x2f35c0 * 86, _0x2f35c0 * 366);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[0]);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 121, _0x2f35c0 * 332);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 133.5, _0x2f35c0 * 327.5, _0x2f35c0 * 133.5, _0x2f35c0 * 327.5, _0x2f35c0 * 146, _0x2f35c0 * 323);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 157, _0x2f35c0 * 330.5, _0x2f35c0 * 157, _0x2f35c0 * 330.5, _0x2f35c0 * 168, _0x2f35c0 * 338);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 182.5, _0x2f35c0 * 219.5, _0x2f35c0 * 182.5, _0x2f35c0 * 219.5, _0x2f35c0 * 197, _0x2f35c0 * 101);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 190, _0x2f35c0 * 84.5, _0x2f35c0 * 190, _0x2f35c0 * 84.5, _0x2f35c0 * 183, _0x2f35c0 * 68);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 172.5, _0x2f35c0 * 81, _0x2f35c0 * 172.5, _0x2f35c0 * 81, _0x2f35c0 * 162, _0x2f35c0 * 94);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[0]);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 105, _0x2f35c0 * 463);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 124.5, _0x2f35c0 * 466, _0x2f35c0 * 124.5, _0x2f35c0 * 466, _0x2f35c0 * 144, _0x2f35c0 * 469);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 145.5, _0x2f35c0 * 478.5, _0x2f35c0 * 145.5, _0x2f35c0 * 478.5, _0x2f35c0 * 147, _0x2f35c0 * 488);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 133.5, _0x2f35c0 * 495.5, _0x2f35c0 * 133.5, _0x2f35c0 * 495.5, _0x2f35c0 * 120, _0x2f35c0 * 503);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 108.5, _0x2f35c0 * 492, _0x2f35c0 * 108.5, _0x2f35c0 * 492, _0x2f35c0 * 97, _0x2f35c0 * 481);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[0]);
  _0x5aa7e0.globalAlpha = 1;
  _0x5aa7e0.translate(_0x2f35c0 * -20, _0x2f35c0 * -20);
  _0x5aa7e0.save();
  _0x5aa7e0.translate(_0x2f35c0 * 132, _0x2f35c0 * 423);
  _0x5aa7e0.rotate(0.16);
  round_rect(_0x5aa7e0, _0x2f35c0 * -14, _0x2f35c0 * -61, _0x2f35c0 * 28, _0x2f35c0 * 122, _0x2f35c0 * 10);
  _0x5aa7e0.restore();
  fill_path(_0x5aa7e0, _0x4a9fe1[4], _0x4a9fe1[5], _0x2f35c0 * 12.5);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 100, _0x2f35c0 * 344);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 123, _0x2f35c0 * 214, _0x2f35c0 * 123, _0x2f35c0 * 214, _0x2f35c0 * 146, _0x2f35c0 * 84);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 166.5, _0x2f35c0 * 65, _0x2f35c0 * 166.5, _0x2f35c0 * 65, _0x2f35c0 * 187, _0x2f35c0 * 46);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 201, _0x2f35c0 * 71, _0x2f35c0 * 201, _0x2f35c0 * 71, _0x2f35c0 * 215, _0x2f35c0 * 96);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 199.5, _0x2f35c0 * 226.5, _0x2f35c0 * 199.5, _0x2f35c0 * 226.5, _0x2f35c0 * 184, _0x2f35c0 * 357);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 162.5, _0x2f35c0 * 362.5, _0x2f35c0 * 162.5, _0x2f35c0 * 362.5, _0x2f35c0 * 141, _0x2f35c0 * 368);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[1], _0x4a9fe1[2], _0x2f35c0 * 12.5);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 75, _0x2f35c0 * 328);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 88, _0x2f35c0 * 336.5, _0x2f35c0 * 88, _0x2f35c0 * 336.5, _0x2f35c0 * 101, _0x2f35c0 * 345);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 123.5, _0x2f35c0 * 337.5, _0x2f35c0 * 123.5, _0x2f35c0 * 337.5, _0x2f35c0 * 146, _0x2f35c0 * 330);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 165, _0x2f35c0 * 343.5, _0x2f35c0 * 165, _0x2f35c0 * 343.5, _0x2f35c0 * 184, _0x2f35c0 * 357);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 198.5, _0x2f35c0 * 353, _0x2f35c0 * 198.5, _0x2f35c0 * 353, _0x2f35c0 * 213, _0x2f35c0 * 349);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 200.5, _0x2f35c0 * 364.5, _0x2f35c0 * 200.5, _0x2f35c0 * 364.5, _0x2f35c0 * 188, _0x2f35c0 * 380);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 163, _0x2f35c0 * 380.5, _0x2f35c0 * 163, _0x2f35c0 * 380.5, _0x2f35c0 * 138, _0x2f35c0 * 381);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 112, _0x2f35c0 * 373.5, _0x2f35c0 * 112, _0x2f35c0 * 373.5, _0x2f35c0 * 86, _0x2f35c0 * 366);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[1], _0x4a9fe1[2], _0x2f35c0 * 12.5);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 121, _0x2f35c0 * 332);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 133.5, _0x2f35c0 * 327.5, _0x2f35c0 * 133.5, _0x2f35c0 * 327.5, _0x2f35c0 * 146, _0x2f35c0 * 323);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 157, _0x2f35c0 * 330.5, _0x2f35c0 * 157, _0x2f35c0 * 330.5, _0x2f35c0 * 168, _0x2f35c0 * 338);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 182.5, _0x2f35c0 * 219.5, _0x2f35c0 * 182.5, _0x2f35c0 * 219.5, _0x2f35c0 * 197, _0x2f35c0 * 101);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 190, _0x2f35c0 * 84.5, _0x2f35c0 * 190, _0x2f35c0 * 84.5, _0x2f35c0 * 183, _0x2f35c0 * 68);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 172.5, _0x2f35c0 * 81, _0x2f35c0 * 172.5, _0x2f35c0 * 81, _0x2f35c0 * 162, _0x2f35c0 * 94);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[3]);
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 105, _0x2f35c0 * 463);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 124.5, _0x2f35c0 * 466, _0x2f35c0 * 124.5, _0x2f35c0 * 466, _0x2f35c0 * 144, _0x2f35c0 * 469);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 145.5, _0x2f35c0 * 478.5, _0x2f35c0 * 145.5, _0x2f35c0 * 478.5, _0x2f35c0 * 147, _0x2f35c0 * 488);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 133.5, _0x2f35c0 * 495.5, _0x2f35c0 * 133.5, _0x2f35c0 * 495.5, _0x2f35c0 * 120, _0x2f35c0 * 503);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 108.5, _0x2f35c0 * 492, _0x2f35c0 * 108.5, _0x2f35c0 * 492, _0x2f35c0 * 97, _0x2f35c0 * 481);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[1], _0x4a9fe1[2], _0x2f35c0 * 12.5);
  _0x5aa7e0.globalAlpha = 1;
  _0x5aa7e0.beginPath();
  _0x5aa7e0.lineCap = "round";
  _0x5aa7e0.lineJoin = "round";
  _0x5aa7e0.moveTo(_0x2f35c0 * 143, _0x2f35c0 * 346);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 125, _0x2f35c0 * 352, _0x2f35c0 * 125, _0x2f35c0 * 352, _0x2f35c0 * 107, _0x2f35c0 * 358);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 124, _0x2f35c0 * 363, _0x2f35c0 * 140, _0x2f35c0 * 368, _0x2f35c0 * 141, _0x2f35c0 * 368);
  _0x5aa7e0.bezierCurveTo(_0x2f35c0 * 156.5, _0x2f35c0 * 367, _0x2f35c0 * 156.5, _0x2f35c0 * 367, _0x2f35c0 * 172, _0x2f35c0 * 366);
  _0x5aa7e0.closePath();
  fill_path(_0x5aa7e0, _0x4a9fe1[3]);
  return _0xf6e75a;
}
function create_sugar_can(_0x446acb, _0x5a36da, _0x37d2be) {
  var _0x17971c = document.createElement("canvas");
  var _0x59a463 = _0x17971c.getContext("2d");
  _0x17971c.width = _0x446acb * 154;
  _0x17971c.height = _0x446acb * 261;
  _0x59a463.globalAlpha = _0x5a36da ? 0.5 : 1;
  _0x59a463.translate(0, _0x446acb * 10);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 125, _0x446acb * 69);
  _0x59a463.bezierCurveTo(_0x446acb * 123.5, _0x446acb * 141.5, _0x446acb * 123.5, _0x446acb * 141.5, _0x446acb * 122, _0x446acb * 214);
  _0x59a463.bezierCurveTo(_0x446acb * 123, _0x446acb * 228, _0x446acb * 119, _0x446acb * 239, _0x446acb * 102, _0x446acb * 239);
  _0x59a463.bezierCurveTo(_0x446acb * 90, _0x446acb * 238, _0x446acb * 86, _0x446acb * 225, _0x446acb * 89, _0x446acb * 197);
  _0x59a463.bezierCurveTo(_0x446acb * 92, _0x446acb * 159, _0x446acb * 92, _0x446acb * 141, _0x446acb * 94, _0x446acb * 84);
  _0x59a463.bezierCurveTo(_0x446acb * 94, _0x446acb * 58, _0x446acb * 87, _0x446acb * 50, _0x446acb * 73, _0x446acb * 52);
  _0x59a463.bezierCurveTo(_0x446acb * 53, _0x446acb * 54, _0x446acb * 54, _0x446acb * 92, _0x446acb * 34, _0x446acb * 87);
  _0x59a463.bezierCurveTo(_0x446acb * 13, _0x446acb * 85, _0x446acb * 22, _0x446acb * 58, _0x446acb * 34, _0x446acb * 40);
  _0x59a463.bezierCurveTo(_0x446acb * 44, _0x446acb * 24, _0x446acb * 68, _0x446acb * 17, _0x446acb * 86, _0x446acb * 21);
  _0x59a463.bezierCurveTo(_0x446acb * 111, _0x446acb * 23, _0x446acb * 123, _0x446acb * 39, _0x446acb * 125, _0x446acb * 67);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[0]);
  _0x59a463.globalAlpha = 1;
  _0x59a463.translate(0, _0x446acb * -10);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 125, _0x446acb * 69);
  _0x59a463.bezierCurveTo(_0x446acb * 123.5, _0x446acb * 141.5, _0x446acb * 123.5, _0x446acb * 141.5, _0x446acb * 122, _0x446acb * 214);
  _0x59a463.bezierCurveTo(_0x446acb * 123, _0x446acb * 228, _0x446acb * 119, _0x446acb * 239, _0x446acb * 102, _0x446acb * 239);
  _0x59a463.bezierCurveTo(_0x446acb * 90, _0x446acb * 238, _0x446acb * 86, _0x446acb * 225, _0x446acb * 89, _0x446acb * 197);
  _0x59a463.bezierCurveTo(_0x446acb * 92, _0x446acb * 159, _0x446acb * 92, _0x446acb * 141, _0x446acb * 94, _0x446acb * 84);
  _0x59a463.bezierCurveTo(_0x446acb * 94, _0x446acb * 58, _0x446acb * 87, _0x446acb * 50, _0x446acb * 73, _0x446acb * 52);
  _0x59a463.bezierCurveTo(_0x446acb * 53, _0x446acb * 54, _0x446acb * 54, _0x446acb * 92, _0x446acb * 34, _0x446acb * 87);
  _0x59a463.bezierCurveTo(_0x446acb * 13, _0x446acb * 85, _0x446acb * 22, _0x446acb * 58, _0x446acb * 34, _0x446acb * 40);
  _0x59a463.bezierCurveTo(_0x446acb * 44, _0x446acb * 24, _0x446acb * 68, _0x446acb * 17, _0x446acb * 86, _0x446acb * 21);
  _0x59a463.bezierCurveTo(_0x446acb * 111, _0x446acb * 23, _0x446acb * 123, _0x446acb * 39, _0x446acb * 125, _0x446acb * 67);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[1], _0x37d2be[2], _0x446acb * 4);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 31, _0x446acb * 43);
  _0x59a463.bezierCurveTo(_0x446acb * 31, _0x446acb * 61, _0x446acb * 43, _0x446acb * 70, _0x446acb * 51, _0x446acb * 75);
  _0x59a463.bezierCurveTo(_0x446acb * 48, _0x446acb * 84, _0x446acb * 41, _0x446acb * 89, _0x446acb * 33, _0x446acb * 86);
  _0x59a463.bezierCurveTo(_0x446acb * 23, _0x446acb * 88, _0x446acb * 20, _0x446acb * 76, _0x446acb * 23, _0x446acb * 62);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 45, _0x446acb * 29);
  _0x59a463.bezierCurveTo(_0x446acb * 49, _0x446acb * 45, _0x446acb * 61, _0x446acb * 54, _0x446acb * 64, _0x446acb * 55);
  _0x59a463.bezierCurveTo(_0x446acb * 67.5, _0x446acb * 53, _0x446acb * 67.5, _0x446acb * 53, _0x446acb * 71, _0x446acb * 51);
  _0x59a463.bezierCurveTo(_0x446acb * 80, _0x446acb * 44, _0x446acb * 83, _0x446acb * 33, _0x446acb * 82, _0x446acb * 20);
  _0x59a463.bezierCurveTo(_0x446acb * 59, _0x446acb * 17, _0x446acb * 51, _0x446acb * 23, _0x446acb * 45, _0x446acb * 30);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 86, _0x446acb * 56);
  _0x59a463.bezierCurveTo(_0x446acb * 90, _0x446acb * 33, _0x446acb * 103, _0x446acb * 25, _0x446acb * 105, _0x446acb * 27);
  _0x59a463.bezierCurveTo(_0x446acb * 116, _0x446acb * 31, _0x446acb * 121, _0x446acb * 45, _0x446acb * 122, _0x446acb * 50);
  _0x59a463.bezierCurveTo(_0x446acb * 112, _0x446acb * 62, _0x446acb * 103, _0x446acb * 63, _0x446acb * 91, _0x446acb * 62);
  _0x59a463.bezierCurveTo(_0x446acb * 89, _0x446acb * 59.5, _0x446acb * 89, _0x446acb * 59.5, _0x446acb * 87, _0x446acb * 57);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 93, _0x446acb * 81);
  _0x59a463.bezierCurveTo(_0x446acb * 109, _0x446acb * 82, _0x446acb * 123, _0x446acb * 70, _0x446acb * 124, _0x446acb * 63);
  _0x59a463.bezierCurveTo(_0x446acb * 124, _0x446acb * 75.5, _0x446acb * 124, _0x446acb * 75.5, _0x446acb * 124, _0x446acb * 88);
  _0x59a463.bezierCurveTo(_0x446acb * 119, _0x446acb * 99, _0x446acb * 103, _0x446acb * 103, _0x446acb * 94, _0x446acb * 103);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 93, _0x446acb * 124);
  _0x59a463.bezierCurveTo(_0x446acb * 108, _0x446acb * 125, _0x446acb * 122, _0x446acb * 113, _0x446acb * 124, _0x446acb * 106);
  _0x59a463.bezierCurveTo(_0x446acb * 124, _0x446acb * 119, _0x446acb * 124, _0x446acb * 129, _0x446acb * 124, _0x446acb * 132);
  _0x59a463.bezierCurveTo(_0x446acb * 110, _0x446acb * 147, _0x446acb * 94, _0x446acb * 148, _0x446acb * 90, _0x446acb * 147);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 90, _0x446acb * 170);
  _0x59a463.bezierCurveTo(_0x446acb * 104, _0x446acb * 166, _0x446acb * 122, _0x446acb * 158, _0x446acb * 122, _0x446acb * 151);
  _0x59a463.bezierCurveTo(_0x446acb * 122, _0x446acb * 162.5, _0x446acb * 122, _0x446acb * 162.5, _0x446acb * 122, _0x446acb * 174);
  _0x59a463.bezierCurveTo(_0x446acb * 111, _0x446acb * 191, _0x446acb * 97, _0x446acb * 191, _0x446acb * 89, _0x446acb * 191);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 88, _0x446acb * 208);
  _0x59a463.bezierCurveTo(_0x446acb * 100, _0x446acb * 209, _0x446acb * 115, _0x446acb * 205, _0x446acb * 122, _0x446acb * 193);
  _0x59a463.bezierCurveTo(_0x446acb * 122, _0x446acb * 205.5, _0x446acb * 122, _0x446acb * 205.5, _0x446acb * 122, _0x446acb * 218);
  _0x59a463.bezierCurveTo(_0x446acb * 115, _0x446acb * 229, _0x446acb * 103, _0x446acb * 235, _0x446acb * 90, _0x446acb * 228);
  _0x59a463.bezierCurveTo(_0x446acb * 88, _0x446acb * 224, _0x446acb * 88, _0x446acb * 217, _0x446acb * 88, _0x446acb * 211);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[3]);
  _0x59a463.globalAlpha = 0.4;
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 22, _0x446acb * 81);
  _0x59a463.bezierCurveTo(_0x446acb * 32, _0x446acb * 84, _0x446acb * 41, _0x446acb * 81, _0x446acb * 45, _0x446acb * 68);
  _0x59a463.bezierCurveTo(_0x446acb * 50, _0x446acb * 50, _0x446acb * 62, _0x446acb * 40, _0x446acb * 79, _0x446acb * 43);
  _0x59a463.bezierCurveTo(_0x446acb * 95, _0x446acb * 45, _0x446acb * 102, _0x446acb * 58, _0x446acb * 101, _0x446acb * 81);
  _0x59a463.bezierCurveTo(_0x446acb * 99.5, _0x446acb * 120.5, _0x446acb * 99.5, _0x446acb * 120.5, _0x446acb * 98, _0x446acb * 160);
  _0x59a463.bezierCurveTo(_0x446acb * 96.5, _0x446acb * 191.5, _0x446acb * 96.5, _0x446acb * 191.5, _0x446acb * 95, _0x446acb * 223);
  _0x59a463.bezierCurveTo(_0x446acb * 93, _0x446acb * 232, _0x446acb * 101, _0x446acb * 235, _0x446acb * 108, _0x446acb * 238);
  _0x59a463.bezierCurveTo(_0x446acb * 100, _0x446acb * 240, _0x446acb * 90, _0x446acb * 233, _0x446acb * 90, _0x446acb * 224);
  _0x59a463.bezierCurveTo(_0x446acb * 92, _0x446acb * 157, _0x446acb * 92, _0x446acb * 157, _0x446acb * 94, _0x446acb * 90);
  _0x59a463.bezierCurveTo(_0x446acb * 94, _0x446acb * 56, _0x446acb * 89, _0x446acb * 53, _0x446acb * 77, _0x446acb * 51);
  _0x59a463.bezierCurveTo(_0x446acb * 58, _0x446acb * 50, _0x446acb * 54, _0x446acb * 59, _0x446acb * 49, _0x446acb * 75);
  _0x59a463.bezierCurveTo(_0x446acb * 44, _0x446acb * 91, _0x446acb * 28, _0x446acb * 90, _0x446acb * 23, _0x446acb * 81);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[0]);
  _0x59a463.globalAlpha = 1;
  _0x59a463.beginPath();
  _0x59a463.lineCap = "round";
  _0x59a463.lineJoin = "round";
  _0x59a463.moveTo(_0x446acb * 82, _0x446acb * 123);
  _0x59a463.bezierCurveTo(_0x446acb * 88, _0x446acb * 130, _0x446acb * 88, _0x446acb * 127, _0x446acb * 94, _0x446acb * 128);
  _0x59a463.bezierCurveTo(_0x446acb * 91, _0x446acb * 136, _0x446acb * 94, _0x446acb * 137, _0x446acb * 99, _0x446acb * 142);
  _0x59a463.bezierCurveTo(_0x446acb * 97, _0x446acb * 149, _0x446acb * 99, _0x446acb * 152, _0x446acb * 105, _0x446acb * 155);
  _0x59a463.bezierCurveTo(_0x446acb * 107, _0x446acb * 159, _0x446acb * 113, _0x446acb * 159, _0x446acb * 120, _0x446acb * 158);
  _0x59a463.bezierCurveTo(_0x446acb * 121, _0x446acb * 160, _0x446acb * 125, _0x446acb * 163, _0x446acb * 132, _0x446acb * 163);
  _0x59a463.bezierCurveTo(_0x446acb * 133, _0x446acb * 166, _0x446acb * 136, _0x446acb * 169, _0x446acb * 138, _0x446acb * 170);
  _0x59a463.bezierCurveTo(_0x446acb * 133, _0x446acb * 171, _0x446acb * 132, _0x446acb * 172, _0x446acb * 129, _0x446acb * 174);
  _0x59a463.bezierCurveTo(_0x446acb * 122, _0x446acb * 170, _0x446acb * 120, _0x446acb * 170, _0x446acb * 116, _0x446acb * 174);
  _0x59a463.bezierCurveTo(_0x446acb * 108, _0x446acb * 170.5, _0x446acb * 108, _0x446acb * 170.5, _0x446acb * 100, _0x446acb * 167);
  _0x59a463.bezierCurveTo(_0x446acb * 95, _0x446acb * 172, _0x446acb * 94, _0x446acb * 179, _0x446acb * 95, _0x446acb * 184);
  _0x59a463.bezierCurveTo(_0x446acb * 87, _0x446acb * 185, _0x446acb * 87, _0x446acb * 189, _0x446acb * 88, _0x446acb * 194);
  _0x59a463.bezierCurveTo(_0x446acb * 82, _0x446acb * 194, _0x446acb * 81, _0x446acb * 195, _0x446acb * 79, _0x446acb * 197);
  _0x59a463.bezierCurveTo(_0x446acb * 78, _0x446acb * 192, _0x446acb * 78, _0x446acb * 191, _0x446acb * 77, _0x446acb * 189);
  _0x59a463.bezierCurveTo(_0x446acb * 81, _0x446acb * 185, _0x446acb * 82, _0x446acb * 183, _0x446acb * 80, _0x446acb * 176);
  _0x59a463.bezierCurveTo(_0x446acb * 89, _0x446acb * 170, _0x446acb * 92, _0x446acb * 168, _0x446acb * 95, _0x446acb * 163);
  _0x59a463.bezierCurveTo(_0x446acb * 91, _0x446acb * 151, _0x446acb * 88, _0x446acb * 151, _0x446acb * 82, _0x446acb * 147);
  _0x59a463.bezierCurveTo(_0x446acb * 85, _0x446acb * 142, _0x446acb * 85, _0x446acb * 137, _0x446acb * 81, _0x446acb * 133);
  _0x59a463.bezierCurveTo(_0x446acb * 84, _0x446acb * 127, _0x446acb * 84, _0x446acb * 125, _0x446acb * 82, _0x446acb * 124);
  _0x59a463.closePath();
  fill_path(_0x59a463, _0x37d2be[4], _0x37d2be[5], _0x446acb * 4);
  circle(_0x59a463, _0x446acb * 107, _0x446acb * 152, _0x446acb * 9);
  fill_path(_0x59a463, _0x37d2be[6]);
  circle(_0x59a463, _0x446acb * 105, _0x446acb * 173, _0x446acb * 9);
  fill_path(_0x59a463, _0x37d2be[6]);
  circle(_0x59a463, _0x446acb * 87, _0x446acb * 161, _0x446acb * 9);
  fill_path(_0x59a463, _0x37d2be[6]);
  circle(_0x59a463, _0x446acb * 106, _0x446acb * 147, _0x446acb * 4);
  fill_path(_0x59a463, _0x37d2be[7]);
  circle(_0x59a463, _0x446acb * 104, _0x446acb * 167, _0x446acb * 4);
  fill_path(_0x59a463, _0x37d2be[7]);
  circle(_0x59a463, _0x446acb * 86, _0x446acb * 154, _0x446acb * 4);
  fill_path(_0x59a463, _0x37d2be[7]);
  return _0x17971c;
}
function create_cookie(_0x482bd6, _0x16a755, _0x396d7d) {
  var _0x46e2ea = document.createElement("canvas");
  var _0x250361 = _0x46e2ea.getContext("2d");
  _0x46e2ea.width = _0x482bd6 * 350;
  _0x46e2ea.height = _0x482bd6 * 140;
  _0x250361.translate(_0x482bd6 * -50, _0x482bd6 * -150);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 184.5, _0x482bd6 * 222.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 185.5, _0x482bd6 * 184.0625, _0x482bd6 * 302.5, _0x482bd6 * 171.0625, _0x482bd6 * 313.5, _0x482bd6 * 222.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 330.5, _0x482bd6 * 263.0625, _0x482bd6 * 181.5, _0x482bd6 * 274.0625, _0x482bd6 * 184.5, _0x482bd6 * 223.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[0], _0x396d7d[1], _0x482bd6 * 8);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 131.5, _0x482bd6 * 241.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 144.5, _0x482bd6 * 278.0625, _0x482bd6 * 270.5, _0x482bd6 * 209.0625, _0x482bd6 * 228.5, _0x482bd6 * 174.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 196.5, _0x482bd6 * 147.0625, _0x482bd6 * 117.5, _0x482bd6 * 196.0625, _0x482bd6 * 131.5, _0x482bd6 * 240.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[0], _0x396d7d[1], _0x482bd6 * 8);
  circle(_0x250361, _0x482bd6 * 270.5, _0x482bd6 * 225.0625, _0x482bd6 * 15.811388300841896);
  fill_path(_0x250361, _0x396d7d[2]);
  circle(_0x250361, _0x482bd6 * 243.5, _0x482bd6 * 225.0625, _0x482bd6 * 6.082762530298219);
  fill_path(_0x250361, _0x396d7d[2]);
  circle(_0x250361, _0x482bd6 * 255.5, _0x482bd6 * 210.0625, _0x482bd6 * 10.816653826391969);
  fill_path(_0x250361, _0x396d7d[2]);
  circle(_0x250361, _0x482bd6 * 167.5, _0x482bd6 * 215.0625, _0x482bd6 * 15.297058540778355);
  fill_path(_0x250361, _0x396d7d[2]);
  circle(_0x250361, _0x482bd6 * 176.5, _0x482bd6 * 204.0625, _0x482bd6 * 7.280109889280518);
  fill_path(_0x250361, _0x396d7d[2]);
  circle(_0x250361, _0x482bd6 * 206.5, _0x482bd6 * 189.0625, _0x482bd6 * 7.280109889280518);
  fill_path(_0x250361, _0x396d7d[2]);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 151.5, _0x482bd6 * 212.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 161.5, _0x482bd6 * 204.0625, _0x482bd6 * 173.5, _0x482bd6 * 214.0625, _0x482bd6 * 158.5, _0x482bd6 * 221.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 145.5, _0x482bd6 * 228.0625, _0x482bd6 * 144.5, _0x482bd6 * 216.0625, _0x482bd6 * 151.5, _0x482bd6 * 212.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[3], _0x396d7d[4], _0x482bd6 * 4);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 194.5, _0x482bd6 * 209.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 205.5, _0x482bd6 * 202.0625, _0x482bd6 * 215.5, _0x482bd6 * 207.0625, _0x482bd6 * 199.5, _0x482bd6 * 217.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 187.5, _0x482bd6 * 224.0625, _0x482bd6 * 182.5, _0x482bd6 * 217.0625, _0x482bd6 * 194.5, _0x482bd6 * 209.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[3], _0x396d7d[4], _0x482bd6 * 4);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 188.5, _0x482bd6 * 183.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 201.5, _0x482bd6 * 176.0625, _0x482bd6 * 213.5, _0x482bd6 * 187.0625, _0x482bd6 * 193.5, _0x482bd6 * 193.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 185.5, _0x482bd6 * 194.0625, _0x482bd6 * 175.5, _0x482bd6 * 189.0625, _0x482bd6 * 188.5, _0x482bd6 * 183.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[3], _0x396d7d[4], _0x482bd6 * 4);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 261.5, _0x482bd6 * 202.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 274.5, _0x482bd6 * 201.0625, _0x482bd6 * 282.5, _0x482bd6 * 214.0625, _0x482bd6 * 261.5, _0x482bd6 * 215.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 246.5, _0x482bd6 * 214.0625, _0x482bd6 * 248.5, _0x482bd6 * 203.0625, _0x482bd6 * 261.5, _0x482bd6 * 202.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[3], _0x396d7d[4], _0x482bd6 * 4);
  _0x250361.beginPath();
  _0x250361.lineCap = "round";
  _0x250361.lineJoin = "round";
  _0x250361.moveTo(_0x482bd6 * 240.5, _0x482bd6 * 231.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 255.5, _0x482bd6 * 231.0625, _0x482bd6 * 254.5, _0x482bd6 * 243.0625, _0x482bd6 * 240.5, _0x482bd6 * 242.0625);
  _0x250361.bezierCurveTo(_0x482bd6 * 225.5, _0x482bd6 * 239.0625, _0x482bd6 * 225.5, _0x482bd6 * 232.0625, _0x482bd6 * 240.5, _0x482bd6 * 231.0625);
  _0x250361.closePath();
  fill_path(_0x250361, _0x396d7d[3], _0x396d7d[4], _0x482bd6 * 4);
  return _0x46e2ea;
}
function create_candy(_0x45411b, _0x40d40a, _0x120985) {
  var _0x5dc787 = document.createElement("canvas");
  var _0x39236f = _0x5dc787.getContext("2d");
  _0x5dc787.width = _0x45411b * 217;
  _0x5dc787.height = _0x45411b * 215;
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 79, _0x45411b * 113);
  _0x39236f.bezierCurveTo(_0x45411b * 135, _0x45411b * 98, _0x45411b * 136, _0x45411b * 96, _0x45411b * 142, _0x45411b * 97);
  _0x39236f.bezierCurveTo(_0x45411b * 167, _0x45411b * 106, _0x45411b * 167, _0x45411b * 106, _0x45411b * 171, _0x45411b * 109);
  _0x39236f.bezierCurveTo(_0x45411b * 173, _0x45411b * 120, _0x45411b * 173, _0x45411b * 134, _0x45411b * 169, _0x45411b * 141);
  _0x39236f.bezierCurveTo(_0x45411b * 140, _0x45411b * 149.5, _0x45411b * 140, _0x45411b * 149.5, _0x45411b * 111, _0x45411b * 158);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[1], _0x120985[2], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 154, _0x45411b * 103);
  _0x39236f.bezierCurveTo(_0x45411b * 167, _0x45411b * 91, _0x45411b * 175, _0x45411b * 87, _0x45411b * 176, _0x45411b * 94);
  _0x39236f.bezierCurveTo(_0x45411b * 175, _0x45411b * 102, _0x45411b * 176, _0x45411b * 102, _0x45411b * 186, _0x45411b * 103);
  _0x39236f.bezierCurveTo(_0x45411b * 191, _0x45411b * 104, _0x45411b * 192, _0x45411b * 105, _0x45411b * 185, _0x45411b * 116);
  _0x39236f.bezierCurveTo(_0x45411b * 183, _0x45411b * 120, _0x45411b * 191, _0x45411b * 124, _0x45411b * 189, _0x45411b * 129);
  _0x39236f.bezierCurveTo(_0x45411b * 185, _0x45411b * 139, _0x45411b * 178, _0x45411b * 134, _0x45411b * 166, _0x45411b * 131);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[1], _0x120985[2], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 60, _0x45411b * 46);
  _0x39236f.bezierCurveTo(_0x45411b * 60, _0x45411b * 34, _0x45411b * 60, _0x45411b * 29, _0x45411b * 56, _0x45411b * 19);
  _0x39236f.bezierCurveTo(_0x45411b * 52, _0x45411b * 12, _0x45411b * 52, _0x45411b * 16, _0x45411b * 49, _0x45411b * 24);
  _0x39236f.bezierCurveTo(_0x45411b * 48, _0x45411b * 27, _0x45411b * 46, _0x45411b * 28, _0x45411b * 39, _0x45411b * 27);
  _0x39236f.bezierCurveTo(_0x45411b * 33, _0x45411b * 26, _0x45411b * 34, _0x45411b * 31, _0x45411b * 35, _0x45411b * 37);
  _0x39236f.bezierCurveTo(_0x45411b * 36, _0x45411b * 41, _0x45411b * 27, _0x45411b * 46, _0x45411b * 29, _0x45411b * 52);
  _0x39236f.bezierCurveTo(_0x45411b * 36, _0x45411b * 55, _0x45411b * 35, _0x45411b * 56, _0x45411b * 31, _0x45411b * 59);
  _0x39236f.bezierCurveTo(_0x45411b * 27, _0x45411b * 65, _0x45411b * 32, _0x45411b * 64, _0x45411b * 35, _0x45411b * 62);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[4], _0x120985[5], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 46, _0x45411b * 50);
  _0x39236f.bezierCurveTo(_0x45411b * 51, _0x45411b * 35, _0x45411b * 70, _0x45411b * 32, _0x45411b * 78, _0x45411b * 29);
  _0x39236f.bezierCurveTo(_0x45411b * 84, _0x45411b * 27, _0x45411b * 113, _0x45411b * 36, _0x45411b * 127, _0x45411b * 41);
  _0x39236f.bezierCurveTo(_0x45411b * 140, _0x45411b * 47, _0x45411b * 147, _0x45411b * 69, _0x45411b * 137, _0x45411b * 73);
  _0x39236f.bezierCurveTo(_0x45411b * 124, _0x45411b * 92, _0x45411b * 117, _0x45411b * 92, _0x45411b * 109, _0x45411b * 94);
  _0x39236f.bezierCurveTo(_0x45411b * 101, _0x45411b * 96, _0x45411b * 89, _0x45411b * 92, _0x45411b * 65, _0x45411b * 83);
  _0x39236f.bezierCurveTo(_0x45411b * 54, _0x45411b * 80, _0x45411b * 46, _0x45411b * 58, _0x45411b * 46, _0x45411b * 51);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[4], _0x120985[5], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 51, _0x45411b * 40);
  _0x39236f.bezierCurveTo(_0x45411b * 49, _0x45411b * 34, _0x45411b * 49, _0x45411b * 34, _0x45411b * 47, _0x45411b * 28);
  _0x39236f.bezierCurveTo(_0x45411b * 38, _0x45411b * 28, _0x45411b * 34, _0x45411b * 27, _0x45411b * 37, _0x45411b * 37);
  _0x39236f.bezierCurveTo(_0x45411b * 43, _0x45411b * 40.5, _0x45411b * 43, _0x45411b * 40.5, _0x45411b * 49, _0x45411b * 44);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[7]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 29, _0x45411b * 48);
  _0x39236f.bezierCurveTo(_0x45411b * 38, _0x45411b * 49, _0x45411b * 38, _0x45411b * 49, _0x45411b * 47, _0x45411b * 50);
  _0x39236f.bezierCurveTo(_0x45411b * 46.5, _0x45411b * 51.5, _0x45411b * 46.5, _0x45411b * 51.5, _0x45411b * 46, _0x45411b * 53);
  _0x39236f.bezierCurveTo(_0x45411b * 40, _0x45411b * 53.5, _0x45411b * 40, _0x45411b * 53.5, _0x45411b * 34, _0x45411b * 54);
  _0x39236f.bezierCurveTo(_0x45411b * 29, _0x45411b * 51, _0x45411b * 32, _0x45411b * 51.5, _0x45411b * 30, _0x45411b * 49);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[7]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 89, _0x45411b * 61);
  _0x39236f.bezierCurveTo(_0x45411b * 101, _0x45411b * 70, _0x45411b * 109, _0x45411b * 90, _0x45411b * 102, _0x45411b * 90);
  _0x39236f.bezierCurveTo(_0x45411b * 97, _0x45411b * 91, _0x45411b * 87, _0x45411b * 91, _0x45411b * 60, _0x45411b * 80);
  _0x39236f.bezierCurveTo(_0x45411b * 48, _0x45411b * 65, _0x45411b * 46, _0x45411b * 56, _0x45411b * 48, _0x45411b * 53);
  _0x39236f.bezierCurveTo(_0x45411b * 50, _0x45411b * 52, _0x45411b * 66, _0x45411b * 56, _0x45411b * 89, _0x45411b * 61);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[7]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 99, _0x45411b * 59);
  _0x39236f.bezierCurveTo(_0x45411b * 115, _0x45411b * 45, _0x45411b * 125, _0x45411b * 42, _0x45411b * 129, _0x45411b * 47);
  _0x39236f.bezierCurveTo(_0x45411b * 138, _0x45411b * 56, _0x45411b * 140, _0x45411b * 63, _0x45411b * 138, _0x45411b * 67);
  _0x39236f.bezierCurveTo(_0x45411b * 131, _0x45411b * 80, _0x45411b * 122, _0x45411b * 87, _0x45411b * 114, _0x45411b * 90);
  _0x39236f.bezierCurveTo(_0x45411b * 105, _0x45411b * 80, _0x45411b * 95, _0x45411b * 62, _0x45411b * 98, _0x45411b * 61);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[7]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 118, _0x45411b * 62);
  _0x39236f.bezierCurveTo(_0x45411b * 139, _0x45411b * 45, _0x45411b * 153, _0x45411b * 40, _0x45411b * 150, _0x45411b * 48);
  _0x39236f.bezierCurveTo(_0x45411b * 145, _0x45411b * 57, _0x45411b * 157, _0x45411b * 63, _0x45411b * 157, _0x45411b * 70);
  _0x39236f.bezierCurveTo(_0x45411b * 157, _0x45411b * 74, _0x45411b * 142, _0x45411b * 77, _0x45411b * 142, _0x45411b * 85);
  _0x39236f.bezierCurveTo(_0x45411b * 143, _0x45411b * 91, _0x45411b * 141, _0x45411b * 92, _0x45411b * 135, _0x45411b * 90);
  _0x39236f.bezierCurveTo(_0x45411b * 132, _0x45411b * 90, _0x45411b * 132, _0x45411b * 96, _0x45411b * 124, _0x45411b * 99);
  _0x39236f.bezierCurveTo(_0x45411b * 118, _0x45411b * 93, _0x45411b * 116, _0x45411b * 77, _0x45411b * 116, _0x45411b * 64);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[4], _0x120985[5], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 90, _0x45411b * 130);
  _0x39236f.bezierCurveTo(_0x45411b * 157, _0x45411b * 115, _0x45411b * 165, _0x45411b * 111, _0x45411b * 167, _0x45411b * 115);
  _0x39236f.bezierCurveTo(_0x45411b * 170, _0x45411b * 117, _0x45411b * 171, _0x45411b * 135, _0x45411b * 167, _0x45411b * 141);
  _0x39236f.bezierCurveTo(_0x45411b * 135.5, _0x45411b * 149.5, _0x45411b * 135.5, _0x45411b * 149.5, _0x45411b * 104, _0x45411b * 158);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[8]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 53, _0x45411b * 119);
  _0x39236f.bezierCurveTo(_0x45411b * 46, _0x45411b * 120, _0x45411b * 40, _0x45411b * 118, _0x45411b * 34, _0x45411b * 116);
  _0x39236f.bezierCurveTo(_0x45411b * 28, _0x45411b * 111, _0x45411b * 41, _0x45411b * 112, _0x45411b * 39, _0x45411b * 108);
  _0x39236f.bezierCurveTo(_0x45411b * 36, _0x45411b * 100, _0x45411b * 49, _0x45411b * 102, _0x45411b * 53, _0x45411b * 95);
  _0x39236f.bezierCurveTo(_0x45411b * 57, _0x45411b * 84, _0x45411b * 58, _0x45411b * 85, _0x45411b * 63, _0x45411b * 93);
  _0x39236f.bezierCurveTo(_0x45411b * 68, _0x45411b * 96, _0x45411b * 72, _0x45411b * 94, _0x45411b * 80, _0x45411b * 88);
  _0x39236f.bezierCurveTo(_0x45411b * 80, _0x45411b * 96, _0x45411b * 78, _0x45411b * 107, _0x45411b * 66, _0x45411b * 115);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[9], _0x120985[10], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 118, _0x45411b * 64);
  _0x39236f.bezierCurveTo(_0x45411b * 133.5, _0x45411b * 57, _0x45411b * 133.5, _0x45411b * 57, _0x45411b * 149, _0x45411b * 50);
  _0x39236f.bezierCurveTo(_0x45411b * 145, _0x45411b * 54, _0x45411b * 154, _0x45411b * 65, _0x45411b * 157, _0x45411b * 68);
  _0x39236f.bezierCurveTo(_0x45411b * 138.5, _0x45411b * 66.5, _0x45411b * 138.5, _0x45411b * 66.5, _0x45411b * 120, _0x45411b * 65);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[8]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 118, _0x45411b * 65);
  _0x39236f.bezierCurveTo(_0x45411b * 129, _0x45411b * 77, _0x45411b * 129, _0x45411b * 77, _0x45411b * 140, _0x45411b * 89);
  _0x39236f.bezierCurveTo(_0x45411b * 131, _0x45411b * 89, _0x45411b * 130, _0x45411b * 92, _0x45411b * 128, _0x45411b * 96);
  _0x39236f.bezierCurveTo(_0x45411b * 123.5, _0x45411b * 82, _0x45411b * 123.5, _0x45411b * 82, _0x45411b * 119, _0x45411b * 68);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[8]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 51, _0x45411b * 112);
  _0x39236f.bezierCurveTo(_0x45411b * 63, _0x45411b * 108, _0x45411b * 78, _0x45411b * 111, _0x45411b * 88, _0x45411b * 112);
  _0x39236f.bezierCurveTo(_0x45411b * 98, _0x45411b * 122, _0x45411b * 117, _0x45411b * 136, _0x45411b * 125, _0x45411b * 157);
  _0x39236f.bezierCurveTo(_0x45411b * 123, _0x45411b * 180, _0x45411b * 123, _0x45411b * 185, _0x45411b * 118, _0x45411b * 186);
  _0x39236f.bezierCurveTo(_0x45411b * 101, _0x45411b * 190, _0x45411b * 89, _0x45411b * 191, _0x45411b * 79, _0x45411b * 187);
  _0x39236f.bezierCurveTo(_0x45411b * 53, _0x45411b * 165, _0x45411b * 50, _0x45411b * 153, _0x45411b * 47, _0x45411b * 144);
  _0x39236f.bezierCurveTo(_0x45411b * 46, _0x45411b * 128, _0x45411b * 46, _0x45411b * 124, _0x45411b * 50, _0x45411b * 112);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[9], _0x120985[10], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 50, _0x45411b * 114);
  _0x39236f.bezierCurveTo(_0x45411b * 81, _0x45411b * 149, _0x45411b * 80, _0x45411b * 147, _0x45411b * 80, _0x45411b * 149);
  _0x39236f.bezierCurveTo(_0x45411b * 82, _0x45411b * 155, _0x45411b * 80, _0x45411b * 182, _0x45411b * 74, _0x45411b * 182);
  _0x39236f.bezierCurveTo(_0x45411b * 60, _0x45411b * 172, _0x45411b * 52, _0x45411b * 157, _0x45411b * 47, _0x45411b * 144);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[11], _0x120985[11], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 85, _0x45411b * 152);
  _0x39236f.bezierCurveTo(_0x45411b * 99, _0x45411b * 150, _0x45411b * 109, _0x45411b * 152, _0x45411b * 119, _0x45411b * 156);
  _0x39236f.bezierCurveTo(_0x45411b * 122, _0x45411b * 163, _0x45411b * 122, _0x45411b * 174, _0x45411b * 117, _0x45411b * 182);
  _0x39236f.closePath();
  _0x39236f.bezierCurveTo(_0x45411b * 93, _0x45411b * 188, _0x45411b * 82, _0x45411b * 187, _0x45411b * 83, _0x45411b * 179);
  fill_path(_0x39236f, _0x120985[11], _0x120985[11], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 104, _0x45411b * 166);
  _0x39236f.bezierCurveTo(_0x45411b * 133, _0x45411b * 165, _0x45411b * 142, _0x45411b * 168, _0x45411b * 137, _0x45411b * 173);
  _0x39236f.bezierCurveTo(_0x45411b * 127, _0x45411b * 177, _0x45411b * 137, _0x45411b * 195, _0x45411b * 126, _0x45411b * 196);
  _0x39236f.bezierCurveTo(_0x45411b * 112, _0x45411b * 195, _0x45411b * 112, _0x45411b * 194, _0x45411b * 109, _0x45411b * 199);
  _0x39236f.bezierCurveTo(_0x45411b * 105, _0x45411b * 205, _0x45411b * 102, _0x45411b * 195, _0x45411b * 96, _0x45411b * 197);
  _0x39236f.bezierCurveTo(_0x45411b * 84, _0x45411b * 201, _0x45411b * 88, _0x45411b * 198, _0x45411b * 90, _0x45411b * 187);
  _0x39236f.bezierCurveTo(_0x45411b * 96, _0x45411b * 171, _0x45411b * 97, _0x45411b * 170, _0x45411b * 103, _0x45411b * 167);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[9], _0x120985[10], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 105, _0x45411b * 168);
  _0x39236f.bezierCurveTo(_0x45411b * 118, _0x45411b * 172.5, _0x45411b * 118, _0x45411b * 172.5, _0x45411b * 131, _0x45411b * 177);
  _0x39236f.bezierCurveTo(_0x45411b * 133, _0x45411b * 190, _0x45411b * 132, _0x45411b * 199, _0x45411b * 116, _0x45411b * 194);
  _0x39236f.bezierCurveTo(_0x45411b * 110, _0x45411b * 182, _0x45411b * 110, _0x45411b * 182, _0x45411b * 104, _0x45411b * 170);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[10]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 102, _0x45411b * 169);
  _0x39236f.bezierCurveTo(_0x45411b * 100.5, _0x45411b * 182, _0x45411b * 100.5, _0x45411b * 182, _0x45411b * 99, _0x45411b * 195);
  _0x39236f.bezierCurveTo(_0x45411b * 93.5, _0x45411b * 196.5, _0x45411b * 93.5, _0x45411b * 196.5, _0x45411b * 88, _0x45411b * 198);
  _0x39236f.bezierCurveTo(_0x45411b * 94, _0x45411b * 176, _0x45411b * 96, _0x45411b * 174, _0x45411b * 101, _0x45411b * 168);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[9], _0x120985[9], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 64, _0x45411b * 107);
  _0x39236f.bezierCurveTo(_0x45411b * 64, _0x45411b * 101, _0x45411b * 64, _0x45411b * 101, _0x45411b * 64, _0x45411b * 95);
  _0x39236f.bezierCurveTo(_0x45411b * 57, _0x45411b * 86, _0x45411b * 57, _0x45411b * 84, _0x45411b * 53, _0x45411b * 97);
  _0x39236f.bezierCurveTo(_0x45411b * 55, _0x45411b * 103.5, _0x45411b * 55, _0x45411b * 103.5, _0x45411b * 57, _0x45411b * 110);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[11], _0x120985[11], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 40, _0x45411b * 108);
  _0x39236f.bezierCurveTo(_0x45411b * 46.5, _0x45411b * 111, _0x45411b * 46.5, _0x45411b * 111, _0x45411b * 53, _0x45411b * 114);
  _0x39236f.bezierCurveTo(_0x45411b * 50.5, _0x45411b * 117, _0x45411b * 50.5, _0x45411b * 117, _0x45411b * 48, _0x45411b * 120);
  _0x39236f.bezierCurveTo(_0x45411b * 40.5, _0x45411b * 117.5, _0x45411b * 40.5, _0x45411b * 117.5, _0x45411b * 33, _0x45411b * 115);
  _0x39236f.bezierCurveTo(_0x45411b * 36, _0x45411b * 112, _0x45411b * 36, _0x45411b * 112, _0x45411b * 39, _0x45411b * 109);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[11], _0x120985[11], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 189, _0x45411b * 106);
  _0x39236f.bezierCurveTo(_0x45411b * 178.5, _0x45411b * 110.5, _0x45411b * 178.5, _0x45411b * 110.5, _0x45411b * 168, _0x45411b * 115);
  _0x39236f.bezierCurveTo(_0x45411b * 168.5, _0x45411b * 119, _0x45411b * 168.5, _0x45411b * 119, _0x45411b * 169, _0x45411b * 123);
  _0x39236f.bezierCurveTo(_0x45411b * 179, _0x45411b * 124.5, _0x45411b * 179, _0x45411b * 124.5, _0x45411b * 189, _0x45411b * 126);
  _0x39236f.bezierCurveTo(_0x45411b * 182, _0x45411b * 118, _0x45411b * 183, _0x45411b * 115, _0x45411b * 188, _0x45411b * 106);
  _0x39236f.closePath();
  fill_path(_0x39236f, _0x120985[8]);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 69, _0x45411b * 178);
  _0x39236f.bezierCurveTo(_0x45411b * 69, _0x45411b * 141, _0x45411b * 70, _0x45411b * 136, _0x45411b * 77, _0x45411b * 137);
  _0x39236f.bezierCurveTo(_0x45411b * 88, _0x45411b * 133, _0x45411b * 101, _0x45411b * 134, _0x45411b * 108, _0x45411b * 137);
  fill_path(_0x39236f, undefined, _0x120985[3], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 55, _0x45411b * 161);
  _0x39236f.bezierCurveTo(_0x45411b * 54, _0x45411b * 124, _0x45411b * 55, _0x45411b * 119, _0x45411b * 62, _0x45411b * 119);
  _0x39236f.bezierCurveTo(_0x45411b * 74, _0x45411b * 117, _0x45411b * 85, _0x45411b * 117, _0x45411b * 93, _0x45411b * 119);
  fill_path(_0x39236f, undefined, _0x120985[3], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 91, _0x45411b * 29);
  _0x39236f.bezierCurveTo(_0x45411b * 74, _0x45411b * 33, _0x45411b * 62, _0x45411b * 46, _0x45411b * 57, _0x45411b * 54);
  _0x39236f.bezierCurveTo(_0x45411b * 57, _0x45411b * 63, _0x45411b * 68, _0x45411b * 76, _0x45411b * 77, _0x45411b * 87);
  fill_path(_0x39236f, undefined, _0x120985[6], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 107, _0x45411b * 33);
  _0x39236f.bezierCurveTo(_0x45411b * 82, _0x45411b * 51, _0x45411b * 80, _0x45411b * 52, _0x45411b * 79, _0x45411b * 59);
  _0x39236f.bezierCurveTo(_0x45411b * 78, _0x45411b * 65, _0x45411b * 93, _0x45411b * 86, _0x45411b * 101, _0x45411b * 93);
  fill_path(_0x39236f, undefined, _0x120985[6], _0x45411b * 4);
  _0x39236f.beginPath();
  _0x39236f.lineCap = "round";
  _0x39236f.lineJoin = "round";
  _0x39236f.moveTo(_0x45411b * 130, _0x45411b * 98);
  _0x39236f.bezierCurveTo(_0x45411b * 126.5, _0x45411b * 103, _0x45411b * 126.5, _0x45411b * 103, _0x45411b * 123, _0x45411b * 108);
  _0x39236f.bezierCurveTo(_0x45411b * 133.5, _0x45411b * 107, _0x45411b * 133.5, _0x45411b * 107, _0x45411b * 144, _0x45411b * 106);
  _0x39236f.bezierCurveTo(_0x45411b * 138.5, _0x45411b * 110, _0x45411b * 138.5, _0x45411b * 110, _0x45411b * 133, _0x45411b * 114);
  _0x39236f.bezierCurveTo(_0x45411b * 142, _0x45411b * 114, _0x45411b * 142, _0x45411b * 114, _0x45411b * 151, _0x45411b * 114);
  _0x39236f.bezierCurveTo(_0x45411b * 146.5, _0x45411b * 119.5, _0x45411b * 146.5, _0x45411b * 119.5, _0x45411b * 142, _0x45411b * 125);
  _0x39236f.bezierCurveTo(_0x45411b * 146.5, _0x45411b * 127, _0x45411b * 146.5, _0x45411b * 127, _0x45411b * 151, _0x45411b * 129);
  _0x39236f.bezierCurveTo(_0x45411b * 147.5, _0x45411b * 132, _0x45411b * 147.5, _0x45411b * 132, _0x45411b * 144, _0x45411b * 135);
  _0x39236f.bezierCurveTo(_0x45411b * 148, _0x45411b * 137, _0x45411b * 148, _0x45411b * 137, _0x45411b * 152, _0x45411b * 139);
  _0x39236f.bezierCurveTo(_0x45411b * 149, _0x45411b * 142.5, _0x45411b * 149, _0x45411b * 142.5, _0x45411b * 146, _0x45411b * 146);
  fill_path(_0x39236f, undefined, _0x120985[3], _0x45411b * 4);
  return _0x5dc787;
}
function create_ferrero_rocher(_0x5f1fa8, _0x276bfa, _0x1ba783) {
  var _0x18f5ab = document.createElement("canvas");
  var _0x134e8f = _0x18f5ab.getContext("2d");
  _0x18f5ab.width = _0x5f1fa8 * 118;
  _0x18f5ab.height = _0x5f1fa8 * 114;
  _0x134e8f.translate(0, _0x5f1fa8 * 10);
  circle(_0x134e8f, _0x5f1fa8 * 42, _0x5f1fa8 * 43, _0x5f1fa8 * 24.758836806279895);
  fill_path(_0x134e8f, _0x1ba783[0]);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 65, _0x5f1fa8 * 90);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 72, _0x5f1fa8 * 91, _0x5f1fa8 * 75, _0x5f1fa8 * 92, _0x5f1fa8 * 71, _0x5f1fa8 * 96);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 65, _0x5f1fa8 * 98, _0x5f1fa8 * 65, _0x5f1fa8 * 94, _0x5f1fa8 * 65, _0x5f1fa8 * 91);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[0]);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 87, _0x5f1fa8 * 45);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 108, _0x5f1fa8 * 59, _0x5f1fa8 * 100, _0x5f1fa8 * 86, _0x5f1fa8 * 85, _0x5f1fa8 * 91);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 96, _0x5f1fa8 * 68, _0x5f1fa8 * 95, _0x5f1fa8 * 58, _0x5f1fa8 * 87);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 53, _0x5f1fa8 * 80, _0x5f1fa8 * 61, _0x5f1fa8 * 64, _0x5f1fa8 * 66, _0x5f1fa8 * 58);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 73, _0x5f1fa8 * 48, _0x5f1fa8 * 78, _0x5f1fa8 * 44, _0x5f1fa8 * 87, _0x5f1fa8 * 45);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[0]);
  _0x134e8f.translate(0, _0x5f1fa8 * -10);
  circle(_0x134e8f, _0x5f1fa8 * 42, _0x5f1fa8 * 43, _0x5f1fa8 * 24.758836806279895);
  fill_path(_0x134e8f, _0x1ba783[1], _0x1ba783[2], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 65, _0x5f1fa8 * 90);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 72, _0x5f1fa8 * 91, _0x5f1fa8 * 75, _0x5f1fa8 * 92, _0x5f1fa8 * 71, _0x5f1fa8 * 96);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 65, _0x5f1fa8 * 98, _0x5f1fa8 * 65, _0x5f1fa8 * 94, _0x5f1fa8 * 65, _0x5f1fa8 * 91);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[1], _0x1ba783[2], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 87, _0x5f1fa8 * 45);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 108, _0x5f1fa8 * 59, _0x5f1fa8 * 100, _0x5f1fa8 * 86, _0x5f1fa8 * 85, _0x5f1fa8 * 91);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 96, _0x5f1fa8 * 68, _0x5f1fa8 * 95, _0x5f1fa8 * 58, _0x5f1fa8 * 87);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 53, _0x5f1fa8 * 80, _0x5f1fa8 * 61, _0x5f1fa8 * 64, _0x5f1fa8 * 66, _0x5f1fa8 * 58);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 73, _0x5f1fa8 * 48, _0x5f1fa8 * 78, _0x5f1fa8 * 44, _0x5f1fa8 * 87, _0x5f1fa8 * 45);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[1], _0x1ba783[2], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 52, _0x5f1fa8 * 16);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 55, _0x5f1fa8 * 19, _0x5f1fa8 * 54, _0x5f1fa8 * 20, _0x5f1fa8 * 55, _0x5f1fa8 * 22);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 52, _0x5f1fa8 * 24.5, _0x5f1fa8 * 52, _0x5f1fa8 * 24.5, _0x5f1fa8 * 49, _0x5f1fa8 * 27);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 45, _0x5f1fa8 * 25, _0x5f1fa8 * 45, _0x5f1fa8 * 25, _0x5f1fa8 * 41, _0x5f1fa8 * 23);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 45, _0x5f1fa8 * 19, _0x5f1fa8 * 48, _0x5f1fa8 * 16, _0x5f1fa8 * 52, _0x5f1fa8 * 16);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 62, _0x5f1fa8 * 30);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 66, _0x5f1fa8 * 29, _0x5f1fa8 * 64, _0x5f1fa8 * 30, _0x5f1fa8 * 66, _0x5f1fa8 * 30);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 67, _0x5f1fa8 * 31, _0x5f1fa8 * 67, _0x5f1fa8 * 31, _0x5f1fa8 * 68, _0x5f1fa8 * 32);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 66.5, _0x5f1fa8 * 33.5, _0x5f1fa8 * 66.5, _0x5f1fa8 * 33.5, _0x5f1fa8 * 65, _0x5f1fa8 * 35);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 63.5, _0x5f1fa8 * 32.5, _0x5f1fa8 * 63.5, _0x5f1fa8 * 32.5, _0x5f1fa8 * 62, _0x5f1fa8 * 30);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 29, _0x5f1fa8 * 21);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 31, _0x5f1fa8 * 22, _0x5f1fa8 * 31, _0x5f1fa8 * 26, _0x5f1fa8 * 29, _0x5f1fa8 * 29);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 26, _0x5f1fa8 * 28.5, _0x5f1fa8 * 26, _0x5f1fa8 * 28.5, _0x5f1fa8 * 23, _0x5f1fa8 * 28);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 23, _0x5f1fa8 * 26.5, _0x5f1fa8 * 23, _0x5f1fa8 * 26.5, _0x5f1fa8 * 23, _0x5f1fa8 * 25);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 25, _0x5f1fa8 * 23, _0x5f1fa8 * 25, _0x5f1fa8 * 23, _0x5f1fa8 * 27, _0x5f1fa8 * 21);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 18, _0x5f1fa8 * 36);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 23, _0x5f1fa8 * 36, _0x5f1fa8 * 24, _0x5f1fa8 * 42, _0x5f1fa8 * 19, _0x5f1fa8 * 46);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 12, _0x5f1fa8 * 39, _0x5f1fa8 * 15, _0x5f1fa8 * 38, _0x5f1fa8 * 18, _0x5f1fa8 * 37);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 30, _0x5f1fa8 * 34);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 35, _0x5f1fa8 * 36, _0x5f1fa8 * 36, _0x5f1fa8 * 39, _0x5f1fa8 * 32, _0x5f1fa8 * 45);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 25, _0x5f1fa8 * 46, _0x5f1fa8 * 25, _0x5f1fa8 * 44, _0x5f1fa8 * 30, _0x5f1fa8 * 34);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 59, _0x5f1fa8 * 35);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 58, _0x5f1fa8 * 27, _0x5f1fa8 * 57, _0x5f1fa8 * 27, _0x5f1fa8 * 52, _0x5f1fa8 * 31);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 50, _0x5f1fa8 * 36, _0x5f1fa8 * 53, _0x5f1fa8 * 38, _0x5f1fa8 * 58, _0x5f1fa8 * 36);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 63, _0x5f1fa8 * 46);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 64.5, _0x5f1fa8 * 46.5, _0x5f1fa8 * 64.5, _0x5f1fa8 * 46.5, _0x5f1fa8 * 66, _0x5f1fa8 * 47);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 70, _0x5f1fa8 * 50, _0x5f1fa8 * 70, _0x5f1fa8 * 53, _0x5f1fa8 * 61, _0x5f1fa8 * 55);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 62, _0x5f1fa8 * 50.5, _0x5f1fa8 * 62, _0x5f1fa8 * 50.5, _0x5f1fa8 * 63, _0x5f1fa8 * 46);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 41, _0x5f1fa8 * 42);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 47, _0x5f1fa8 * 41, _0x5f1fa8 * 53, _0x5f1fa8 * 47, _0x5f1fa8 * 46, _0x5f1fa8 * 51);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 38, _0x5f1fa8 * 49, _0x5f1fa8 * 39, _0x5f1fa8 * 46, _0x5f1fa8 * 41, _0x5f1fa8 * 43);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 44, _0x5f1fa8 * 57);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 54, _0x5f1fa8 * 57, _0x5f1fa8 * 54, _0x5f1fa8 * 58, _0x5f1fa8 * 55, _0x5f1fa8 * 61);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 54, _0x5f1fa8 * 63, _0x5f1fa8 * 52, _0x5f1fa8 * 64, _0x5f1fa8 * 48, _0x5f1fa8 * 65);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 20, _0x5f1fa8 * 52);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 25, _0x5f1fa8 * 51, _0x5f1fa8 * 27, _0x5f1fa8 * 50, _0x5f1fa8 * 28, _0x5f1fa8 * 54);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 27, _0x5f1fa8 * 58, _0x5f1fa8 * 24, _0x5f1fa8 * 58, _0x5f1fa8 * 22, _0x5f1fa8 * 58);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 21, _0x5f1fa8 * 55.5, _0x5f1fa8 * 21, _0x5f1fa8 * 55.5, _0x5f1fa8 * 20, _0x5f1fa8 * 53);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 30, _0x5f1fa8 * 61);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 37, _0x5f1fa8 * 61, _0x5f1fa8 * 39, _0x5f1fa8 * 63, _0x5f1fa8 * 39, _0x5f1fa8 * 68);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 36, _0x5f1fa8 * 68.5, _0x5f1fa8 * 36, _0x5f1fa8 * 68.5, _0x5f1fa8 * 33, _0x5f1fa8 * 69);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 30.5, _0x5f1fa8 * 67.5, _0x5f1fa8 * 30.5, _0x5f1fa8 * 67.5, _0x5f1fa8 * 28, _0x5f1fa8 * 66);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 88, _0x5f1fa8 * 45);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 90, _0x5f1fa8 * 46.5, _0x5f1fa8 * 90, _0x5f1fa8 * 46.5, _0x5f1fa8 * 92, _0x5f1fa8 * 48);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 92, _0x5f1fa8 * 50, _0x5f1fa8 * 92, _0x5f1fa8 * 50, _0x5f1fa8 * 92, _0x5f1fa8 * 52);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 96, _0x5f1fa8 * 53);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 97.5, _0x5f1fa8 * 55, _0x5f1fa8 * 97.5, _0x5f1fa8 * 55, _0x5f1fa8 * 99, _0x5f1fa8 * 57);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 97.5, _0x5f1fa8 * 59.5, _0x5f1fa8 * 97.5, _0x5f1fa8 * 59.5, _0x5f1fa8 * 96, _0x5f1fa8 * 62);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 93.5, _0x5f1fa8 * 60.5, _0x5f1fa8 * 93.5, _0x5f1fa8 * 60.5, _0x5f1fa8 * 91, _0x5f1fa8 * 59);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 91.5, _0x5f1fa8 * 57, _0x5f1fa8 * 91.5, _0x5f1fa8 * 57, _0x5f1fa8 * 92, _0x5f1fa8 * 55);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 92, _0x5f1fa8 * 71);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 94.5, _0x5f1fa8 * 70.5, _0x5f1fa8 * 94.5, _0x5f1fa8 * 70.5, _0x5f1fa8 * 97, _0x5f1fa8 * 70);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 98.5, _0x5f1fa8 * 72.5, _0x5f1fa8 * 98.5, _0x5f1fa8 * 72.5, _0x5f1fa8 * 100, _0x5f1fa8 * 75);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 97, _0x5f1fa8 * 76.5, _0x5f1fa8 * 97, _0x5f1fa8 * 76.5, _0x5f1fa8 * 94, _0x5f1fa8 * 78);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 95, _0x5f1fa8 * 82);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 96, _0x5f1fa8 * 83, _0x5f1fa8 * 96, _0x5f1fa8 * 83, _0x5f1fa8 * 97, _0x5f1fa8 * 84);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 97, _0x5f1fa8 * 85.5, _0x5f1fa8 * 97, _0x5f1fa8 * 85.5, _0x5f1fa8 * 97, _0x5f1fa8 * 87);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 93.5, _0x5f1fa8 * 87.5, _0x5f1fa8 * 93.5, _0x5f1fa8 * 87.5, _0x5f1fa8 * 90, _0x5f1fa8 * 88);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 86, _0x5f1fa8 * 72);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 89, _0x5f1fa8 * 76, _0x5f1fa8 * 88, _0x5f1fa8 * 81, _0x5f1fa8 * 85, _0x5f1fa8 * 82);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 80, _0x5f1fa8 * 82, _0x5f1fa8 * 78, _0x5f1fa8 * 85, _0x5f1fa8 * 72);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 86);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 84, _0x5f1fa8 * 88, _0x5f1fa8 * 86, _0x5f1fa8 * 88, _0x5f1fa8 * 85, _0x5f1fa8 * 93);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 96, _0x5f1fa8 * 79, _0x5f1fa8 * 96, _0x5f1fa8 * 76, _0x5f1fa8 * 91);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[3], _0x1ba783[4], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 84, _0x5f1fa8 * 46);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 93, _0x5f1fa8 * 51, _0x5f1fa8 * 91, _0x5f1fa8 * 62, _0x5f1fa8 * 80, _0x5f1fa8 * 78);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 74, _0x5f1fa8 * 86, _0x5f1fa8 * 66, _0x5f1fa8 * 90, _0x5f1fa8 * 60, _0x5f1fa8 * 86);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 55, _0x5f1fa8 * 79, _0x5f1fa8 * 57, _0x5f1fa8 * 73, _0x5f1fa8 * 67, _0x5f1fa8 * 57);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 71, _0x5f1fa8 * 51, _0x5f1fa8 * 79, _0x5f1fa8 * 44, _0x5f1fa8 * 84, _0x5f1fa8 * 46);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[5], _0x1ba783[6], _0x5f1fa8 * 5);
  _0x134e8f.beginPath();
  _0x134e8f.lineCap = "round";
  _0x134e8f.lineJoin = "round";
  _0x134e8f.moveTo(_0x5f1fa8 * 76, _0x5f1fa8 * 60);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 80, _0x5f1fa8 * 66, _0x5f1fa8 * 75, _0x5f1fa8 * 74, _0x5f1fa8 * 68, _0x5f1fa8 * 74);
  _0x134e8f.bezierCurveTo(_0x5f1fa8 * 60, _0x5f1fa8 * 64, _0x5f1fa8 * 68, _0x5f1fa8 * 59, _0x5f1fa8 * 76, _0x5f1fa8 * 59);
  _0x134e8f.closePath();
  fill_path(_0x134e8f, _0x1ba783[7], _0x1ba783[8], _0x5f1fa8 * 5);
  return _0x18f5ab;
}
function create_seed(_0x929706, _0x5a5a38, _0x50ab2d) {
  var _0x1eddc1 = document.createElement("canvas");
  var _0x328d49 = _0x1eddc1.getContext("2d");
  var _0x327602 = _0x929706 * 70;
  var _0x1ae6dc = _0x929706 * 90;
  var _0x3cc08e = _0x929706 * 4;
  var _0x3ab74d = _0x929706 * 5;
  var _0x2457e2 = _0x327602 / 2;
  var _0x33c024 = _0x1ae6dc / 2;
  var _0x50452a = _0x929706 * 10;
  var _0x1dfa4c = _0x929706 * 100;
  var _0x34eaa3 = _0x929706 * 100;
  var _0xf68521 = _0x1dfa4c / 2;
  var _0x48e9b6 = _0x34eaa3 / 2;
  _0x1eddc1.width = _0x327602;
  _0x1eddc1.height = _0x1ae6dc;
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70 + _0x3ab74d);
  _0x328d49.globalAlpha = 0.5;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 130, _0x929706 * 79, _0x929706 * 132, _0x929706 * 86, _0x929706 * 130, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 128, _0x929706 * 100, _0x929706 * 121, _0x929706 * 107, _0x929706 * 120, _0x929706 * 107);
  _0x328d49.bezierCurveTo(_0x929706 * 120, _0x929706 * 107, _0x929706 * 115, _0x929706 * 98, _0x929706 * 115, _0x929706 * 92);
  _0x328d49.bezierCurveTo(_0x929706 * 115, _0x929706 * 86, _0x929706 * 119, _0x929706 * 76, _0x929706 * 127, _0x929706 * 73);
  _0x328d49.closePath();
  fill_path(_0x328d49, "#0d1b1c");
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70 + _0x3ab74d);
  _0x328d49.globalAlpha = 0.5;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 112, _0x929706 * 109, _0x929706 * 111, _0x929706 * 100, _0x929706 * 106, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 104, _0x929706 * 90, _0x929706 * 91, _0x929706 * 87, _0x929706 * 91, _0x929706 * 87);
  _0x328d49.bezierCurveTo(_0x929706 * 91, _0x929706 * 88, _0x929706 * 91, _0x929706 * 96, _0x929706 * 94, _0x929706 * 102);
  _0x328d49.bezierCurveTo(_0x929706 * 97, _0x929706 * 108, _0x929706 * 106, _0x929706 * 112, _0x929706 * 113, _0x929706 * 112);
  _0x328d49.closePath();
  fill_path(_0x328d49, "#0d1b1c");
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70 + _0x3ab74d);
  _0x328d49.globalAlpha = 0.5;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 108, _0x929706 * 120, _0x929706 * 100, _0x929706 * 119, _0x929706 * 91, _0x929706 * 127);
  _0x328d49.bezierCurveTo(_0x929706 * 83, _0x929706 * 134, _0x929706 * 82, _0x929706 * 146, _0x929706 * 83, _0x929706 * 146);
  _0x328d49.bezierCurveTo(_0x929706 * 84, _0x929706 * 146, _0x929706 * 98, _0x929706 * 142, _0x929706 * 103, _0x929706 * 138);
  _0x328d49.bezierCurveTo(_0x929706 * 107, _0x929706 * 135, _0x929706 * 110, _0x929706 * 130, _0x929706 * 112, _0x929706 * 121);
  _0x328d49.closePath();
  fill_path(_0x328d49, "#0d1b1c");
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * 3, _0x929706 * -93 + _0x3ab74d);
  _0x328d49.rotate(Math.PI / 5);
  _0x328d49.globalAlpha = 0.5;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 130, _0x929706 * 79, _0x929706 * 132, _0x929706 * 86, _0x929706 * 130, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 128, _0x929706 * 100, _0x929706 * 121, _0x929706 * 107, _0x929706 * 120, _0x929706 * 107);
  _0x328d49.bezierCurveTo(_0x929706 * 120, _0x929706 * 107, _0x929706 * 115, _0x929706 * 98, _0x929706 * 115, _0x929706 * 92);
  _0x328d49.bezierCurveTo(_0x929706 * 115, _0x929706 * 86, _0x929706 * 119, _0x929706 * 76, _0x929706 * 127, _0x929706 * 73);
  _0x328d49.closePath();
  fill_path(_0x328d49, "#0d1b1c");
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70);
  _0x328d49.globalAlpha = 1;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 130, _0x929706 * 79, _0x929706 * 132, _0x929706 * 86, _0x929706 * 130, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 128, _0x929706 * 100, _0x929706 * 121, _0x929706 * 107, _0x929706 * 120, _0x929706 * 107);
  _0x328d49.bezierCurveTo(_0x929706 * 120, _0x929706 * 107, _0x929706 * 115, _0x929706 * 98, _0x929706 * 115, _0x929706 * 92);
  _0x328d49.bezierCurveTo(_0x929706 * 115, _0x929706 * 86, _0x929706 * 119, _0x929706 * 76, _0x929706 * 127, _0x929706 * 73);
  _0x328d49.closePath();
  fill_path(_0x328d49, _0x50ab2d[0], _0x50ab2d[1], _0x3cc08e);
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70);
  _0x328d49.globalAlpha = 1;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 112, _0x929706 * 109, _0x929706 * 111, _0x929706 * 100, _0x929706 * 106, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 104, _0x929706 * 90, _0x929706 * 91, _0x929706 * 87, _0x929706 * 91, _0x929706 * 87);
  _0x328d49.bezierCurveTo(_0x929706 * 91, _0x929706 * 88, _0x929706 * 91, _0x929706 * 96, _0x929706 * 94, _0x929706 * 102);
  _0x328d49.bezierCurveTo(_0x929706 * 97, _0x929706 * 108, _0x929706 * 106, _0x929706 * 112, _0x929706 * 113, _0x929706 * 112);
  _0x328d49.closePath();
  fill_path(_0x328d49, _0x50ab2d[0], _0x50ab2d[1], _0x3cc08e);
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * -80, _0x929706 * -70);
  _0x328d49.globalAlpha = 1;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 108, _0x929706 * 120, _0x929706 * 100, _0x929706 * 119, _0x929706 * 91, _0x929706 * 127);
  _0x328d49.bezierCurveTo(_0x929706 * 83, _0x929706 * 134, _0x929706 * 82, _0x929706 * 146, _0x929706 * 83, _0x929706 * 146);
  _0x328d49.bezierCurveTo(_0x929706 * 84, _0x929706 * 146, _0x929706 * 98, _0x929706 * 142, _0x929706 * 103, _0x929706 * 138);
  _0x328d49.bezierCurveTo(_0x929706 * 107, _0x929706 * 135, _0x929706 * 110, _0x929706 * 130, _0x929706 * 112, _0x929706 * 121);
  _0x328d49.closePath();
  fill_path(_0x328d49, _0x50ab2d[0], _0x50ab2d[1], _0x3cc08e);
  _0x328d49.restore();
  _0x328d49.save();
  _0x328d49.translate(_0x929706 * 3, _0x929706 * -93);
  _0x328d49.rotate(Math.PI / 5);
  _0x328d49.globalAlpha = 1;
  _0x328d49.beginPath();
  _0x328d49.bezierCurveTo(_0x929706 * 130, _0x929706 * 79, _0x929706 * 132, _0x929706 * 86, _0x929706 * 130, _0x929706 * 93);
  _0x328d49.bezierCurveTo(_0x929706 * 128, _0x929706 * 100, _0x929706 * 121, _0x929706 * 107, _0x929706 * 120, _0x929706 * 107);
  _0x328d49.bezierCurveTo(_0x929706 * 120, _0x929706 * 107, _0x929706 * 115, _0x929706 * 98, _0x929706 * 115, _0x929706 * 92);
  _0x328d49.bezierCurveTo(_0x929706 * 115, _0x929706 * 86, _0x929706 * 119, _0x929706 * 76, _0x929706 * 127, _0x929706 * 73);
  _0x328d49.closePath();
  fill_path(_0x328d49, _0x50ab2d[0], _0x50ab2d[1], _0x3cc08e);
  _0x328d49.restore();
  return _0x1eddc1;
}
function create_info_box(_0x1330a1) {
  var _0x435657 = document.createElement("canvas");
  var _0x2602ce = _0x435657.getContext("2d");
  var _0x53941a = LANG[_0x1330a1];
  _0x2602ce.font = "20px Baloo Paaji";
  var _0x10521e = 0;
  if (_0x53941a.length >= 1) {
    _0x10521e = Math.max(0, _0x2602ce.measureText(_0x53941a[0]).width);
  }
  _0x2602ce.font = "17px Baloo Paaji";
  if (_0x53941a.length >= 2) {
    _0x10521e = Math.max(_0x10521e, _0x2602ce.measureText(_0x53941a[1]).width);
  }
  _0x2602ce.font = "14px Baloo Paaji";
  for (i = 2; i < _0x53941a.length; i++) {
    _0x10521e = Math.max(_0x10521e, _0x2602ce.measureText(_0x53941a[i]).width);
  }
  var _0x4cbfee = _0x10521e + 35;
  var _0x5166bc = 26;
  var _0x16022b = 0;
  if (_0x53941a.length === 1) {
    _0x16022b = 55;
  } else if (_0x53941a.length === 2) {
    _0x16022b = 85;
  } else {
    _0x16022b = (_0x53941a.length - 2) * _0x5166bc + 85;
  }
  _0x435657.width = _0x4cbfee;
  _0x435657.height = _0x16022b;
  round_rect(_0x2602ce, 0, 0, _0x4cbfee, _0x16022b, 10);
  _0x2602ce.fillStyle = "#000000";
  _0x2602ce.globalAlpha = 0.5;
  _0x2602ce.fill();
  if (_0x53941a.length >= 1) {
    _0x2602ce.textBaseline = "middle";
    _0x2602ce.font = "20px Baloo Paaji";
    _0x2602ce.globalAlpha = 1;
    _0x2602ce.fillStyle = "#e2c340";
    _0x2602ce.fillText(_0x53941a[0], 15, 28);
  }
  if (_0x53941a.length >= 2) {
    _0x2602ce.font = "17px Baloo Paaji";
    _0x2602ce.fillStyle = "#ffffff";
    _0x2602ce.fillText(_0x53941a[1], 15, 55);
    _0x16022b = 55;
  }
  if (_0x53941a.length >= 3) {
    _0x2602ce.font = "14px Baloo Paaji";
    _0x2602ce.globalAlpha = 0.7;
    for (i = 2; i < _0x53941a.length; i++) {
      _0x2602ce.fillText(_0x53941a[i], 15, _0x16022b + 28);
      _0x16022b += _0x5166bc;
    }
  }
  return _0x435657;
}
function create_welcome_text(_0x1d36b6) {
  var _0x24804c = document.createElement("canvas");
  var _0x30a605 = _0x24804c.getContext("2d");
  _0x30a605.lineJoin = "round";
  while (_0x1d36b6.indexOf("\\n") !== -1) {
    _0x1d36b6 = _0x1d36b6.replace("\\n", "\n");
  }
  _0x1d36b6 = _0x1d36b6.split("\n");
  color = [];
  var _0x4b970d = 14;
  var _0x252a0b = _0x1d36b6.length * (_0x4b970d + 4) + 10;
  var _0x3545fa = 0;
  _0x30a605.font = _0x4b970d + "px Baloo Paaji";
  for (var _0x16b6fd = 0; _0x16b6fd < _0x1d36b6.length; _0x16b6fd++) {
    if (_0x1d36b6[_0x16b6fd].charAt(0) === "#") {
      color[_0x16b6fd] = _0x1d36b6[_0x16b6fd].substring(0, 7);
      _0x1d36b6[_0x16b6fd] = _0x1d36b6[_0x16b6fd].substring(8);
    } else {
      color[_0x16b6fd] = "#FFFFFF";
    }
    _0x3545fa = Math.max(_0x30a605.measureText(_0x1d36b6[_0x16b6fd]).width + 16, _0x3545fa);
  }
  _0x24804c.height = _0x252a0b;
  _0x24804c.width = _0x3545fa;
  for (var _0x16b6fd = 0; _0x16b6fd < _0x1d36b6.length; _0x16b6fd++) {
    var _0x1bcb18 = create_text(1, _0x1d36b6[_0x16b6fd], _0x4b970d, color[_0x16b6fd], null, null, null, null, null, "#000", 6);
    _0x30a605.drawImage(_0x1bcb18, 8, _0x16b6fd * (_0x4b970d + 4) + 5);
  }
  return _0x24804c;
}
;
function create_text(_0x5a50e1, _0x35ec9b, _0x3c876e, _0x20c67e, _0x53805a, _0x36996, _0x3c3537, _0x2dff4f, _0x1df496, _0x13f766, _0x58eb44) {
  if (_0x58eb44 === undefined) {
    _0x58eb44 = 0;
  }
  var _0x1880fc = document.createElement("canvas");
  var _0x192c6c = _0x1880fc.getContext("2d");
  _0x36996 = !_0x36996 ? 0 : _0x36996 * _0x5a50e1;
  var _0x45dfc6 = Math.floor(_0x5a50e1 * _0x3c876e);
  _0x192c6c.font = _0x45dfc6 + "px Baloo Paaji";
  _0x192c6c.lineJoin = "round";
  _0x2dff4f = _0x2dff4f * _0x5a50e1;
  var _0x492d25 = _0x3c3537 ? _0x2dff4f * 2 : 0;
  if (_0x1df496) {
    var _0x255d20 = Math.min(_0x192c6c.measureText(_0x35ec9b).width + _0x5a50e1 * 2 + _0x492d25, _0x1df496);
  } else {
    var _0x255d20 = _0x192c6c.measureText(_0x35ec9b).width + _0x5a50e1 * 2 + _0x492d25 + _0x58eb44 * _0x5a50e1 * 2;
  }
  var _0x45dfc6 = (_0x45dfc6 + _0x36996 + _0x58eb44) * _0x5a50e1 + _0x492d25;
  _0x1880fc.width = _0x255d20;
  _0x1880fc.height = _0x45dfc6;
  if (_0x3c3537) {
    _0x192c6c.fillStyle = _0x3c3537;
    round_rect(_0x192c6c, 0, 0, _0x255d20, _0x45dfc6, _0x2dff4f * 2);
    _0x192c6c.fill();
    _0x192c6c.translate(_0x2dff4f, _0x2dff4f);
  }
  _0x192c6c.textBaseline = "middle";
  _0x192c6c.font = _0x3c876e + "px Baloo Paaji";
  _0x192c6c.lineJoin = "round";
  if (_0x53805a) {
    _0x192c6c.beginPath();
    _0x192c6c.fillStyle = _0x53805a;
    _0x192c6c.fillText(_0x35ec9b, 0, _0x45dfc6 / 2 + _0x36996 - _0x492d25 / 2, _0x255d20);
  }
  _0x192c6c.beginPath();
  if (_0x13f766) {
    _0x192c6c.strokeStyle = _0x13f766;
    _0x192c6c.lineWidth = _0x58eb44;
    _0x192c6c.strokeText(_0x35ec9b, _0x58eb44, (_0x45dfc6 - _0x492d25) / 2, _0x255d20);
  }
  _0x192c6c.fillStyle = _0x20c67e;
  _0x192c6c.fillText(_0x35ec9b, _0x58eb44, (_0x45dfc6 - _0x492d25) / 2, _0x255d20);
  return _0x1880fc;
}
function create_stone(_0x374fb0, _0x5a1dec, _0x536d70) {
  var _0xf68d71 = document.createElement("canvas");
  var _0x1e7145 = _0xf68d71.getContext("2d");
  var _0x426b2f = _0x374fb0 * 220;
  var _0x311e9c = _0x374fb0 * 230;
  var _0x51a068 = _0x374fb0 * 100;
  var _0x1ee447 = _0x51a068 / 4;
  var _0x5f04b5 = _0x374fb0 * 20;
  _0xf68d71.width = _0x426b2f;
  _0xf68d71.height = _0x311e9c;
  _0x1e7145.translate(_0x426b2f / 2, _0x311e9c / 2 + _0x5f04b5);
  _0x1e7145.globalAlpha = 0.5;
  round_regular_polygon(_0x1e7145, 7, _0x51a068, _0x1ee447);
  fill_path(_0x1e7145, _0x536d70[0]);
  _0x1e7145.globalAlpha = 1;
  _0x1e7145.translate(0, -_0x5f04b5);
  round_regular_polygon(_0x1e7145, 7, _0x51a068, _0x1ee447);
  fill_path(_0x1e7145, _0x536d70[1]);
  round_regular_polygon(_0x1e7145, 6, _0x51a068 * 0.65, _0x1ee447 * 0.65);
  fill_path(_0x1e7145, _0x536d70[2]);
  return _0xf68d71;
}
function create_cave_stone(_0x526c5c, _0x2a0ac5, _0x73445b, _0x2a5e7c) {
  var _0x279c3d = document.createElement("canvas");
  var _0x46a12f = _0x279c3d.getContext("2d");
  var _0x522242 = _0x526c5c * 220;
  var _0x3c1275 = _0x526c5c * 220;
  var _0x46a84e = _0x526c5c * 100;
  var _0x15e6ab = _0x46a84e / 4;
  var _0x50537f = _0x526c5c * 20;
  _0x279c3d.width = _0x522242;
  _0x279c3d.height = _0x3c1275;
  _0x46a12f.translate(_0x522242 / 2, _0x3c1275 / 2);
  _0x46a12f.globalAlpha = _0x2a0ac5 ? 0.5 : 1;
  if (!_0x2a0ac5) {
    _0x46a12f.translate(_0x526c5c * 0, _0x526c5c * -8);
  }
  round_regular_polygon(_0x46a12f, 7, _0x46a84e, _0x15e6ab);
  if (_0x2a0ac5) {
    fill_path(_0x46a12f, _0x73445b[0]);
  } else {
    fill_path(_0x46a12f, _0x73445b[1]);
  }
  _0x46a12f.globalAlpha = 1;
  if (_0x2a5e7c == 0) {
    round_regular_polygon(_0x46a12f, 6, _0x46a84e * 0.65, _0x15e6ab * 0.65);
    fill_path(_0x46a12f, _0x73445b[2]);
  } else if (_0x2a5e7c == 1) {
    _0x46a12f.translate(_0x526c5c * 20, _0x526c5c * 20);
    round_regular_polygon(_0x46a12f, 6, _0x46a84e * 0.45, _0x15e6ab * 0.4);
    fill_path(_0x46a12f, _0x73445b[2]);
  }
  return _0x279c3d;
}
function create_gold(_0x2867f0, _0x682cef, _0x9eab8c) {
  var _0x181034 = document.createElement("canvas");
  var _0x4bb454 = _0x181034.getContext("2d");
  var _0x1b94e4 = _0x2867f0 * 120;
  var _0x300514 = _0x2867f0 * 150;
  var _0x2dc42 = _0x2867f0 * 60;
  var _0x209d7a = _0x2dc42 / 4;
  var _0xc389d3 = _0x2867f0 * 15;
  _0x181034.width = _0x1b94e4;
  _0x181034.height = _0x300514;
  _0x4bb454.save();
  _0x4bb454.translate(_0x1b94e4 / 2 + _0x2867f0 * 0, _0x300514 / 2 + _0x2867f0 * 0 + _0xc389d3);
  _0x4bb454.rotate(Math.PI / 3);
  _0x4bb454.globalAlpha = 0.5;
  round_regular_polygon(_0x4bb454, 8, _0x2dc42, _0x209d7a);
  fill_path(_0x4bb454, _0x9eab8c[0]);
  _0x4bb454.restore();
  _0x4bb454.save();
  _0x4bb454.translate(_0x1b94e4 / 2 - _0x2867f0 * 11, _0x300514 / 2 + _0x2867f0 * 12);
  _0x4bb454.globalAlpha = 1;
  _0x4bb454.rotate(Math.PI / 3);
  _0x4bb454.translate(0, -_0xc389d3);
  round_regular_polygon(_0x4bb454, 8, _0x2dc42, _0x209d7a);
  fill_path(_0x4bb454, _0x9eab8c[1]);
  _0x4bb454.restore();
  _0x4bb454.save();
  _0x4bb454.translate(_0x1b94e4 / 2 - _0x2867f0 * 9, _0x300514 / 2 - _0x2867f0 * 12);
  _0x4bb454.rotate(Math.PI / 2.8);
  round_regular_polygon(_0x4bb454, 5, _0x2dc42 * 0.5, _0x209d7a * 0.4);
  fill_path(_0x4bb454, _0x9eab8c[2]);
  _0x4bb454.restore();
  _0x4bb454.save();
  _0x4bb454.translate(_0x1b94e4 / 2 + _0x2867f0 * 19, _0x300514 / 2 + _0x2867f0 * 5);
  _0x4bb454.rotate(Math.PI / 1);
  round_regular_polygon(_0x4bb454, 5, _0x2dc42 * 0.5, _0x209d7a * 0.4);
  fill_path(_0x4bb454, _0x9eab8c[2]);
  _0x4bb454.restore();
  _0x4bb454.save();
  _0x4bb454.translate(_0x1b94e4 / 2 - _0x2867f0 * 8, _0x300514 / 2 + _0x2867f0 * 20);
  _0x4bb454.rotate(Math.PI / 2.25);
  round_regular_polygon(_0x4bb454, 5, _0x2dc42 * 0.5, _0x209d7a * 0.4);
  fill_path(_0x4bb454, _0x9eab8c[2]);
  _0x4bb454.restore();
  return _0x181034;
}
function create_diamond(_0xfe29ca, _0x171efb, _0xee5e8b) {
  var _0x35e223 = document.createElement("canvas");
  var _0x5a7413 = _0x35e223.getContext("2d");
  var _0x15a220 = _0xfe29ca * 180;
  var _0xa72bfb = _0xfe29ca * 210;
  var _0xe523f4 = _0xfe29ca * 60;
  var _0xf62934 = _0xe523f4 / 4;
  var _0x4dac17 = _0xfe29ca * 20;
  _0x35e223.width = _0x15a220;
  _0x35e223.height = _0xa72bfb;
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 - _0xfe29ca * 0, _0xa72bfb / 2 - _0xfe29ca * 35 + _0x4dac17);
  _0x5a7413.rotate(Math.PI / -1.8);
  _0x5a7413.globalAlpha = 0.5;
  _0x5a7413.translate(_0xfe29ca * 0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[0]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 + _0xfe29ca * 10, _0xa72bfb / 2 + _0xfe29ca * 15 + _0x4dac17);
  _0x5a7413.rotate(Math.PI / 2);
  _0x5a7413.globalAlpha = 0.5;
  _0x5a7413.translate(_0xfe29ca * 0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[0]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 - _0xfe29ca * 50, _0xa72bfb / 2 + _0xfe29ca * 40 + _0x4dac17);
  _0x5a7413.rotate(Math.PI / 3);
  _0x5a7413.globalAlpha = 0.5;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[0]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 - _0xfe29ca * 0, _0xa72bfb / 2 - _0xfe29ca * 35);
  _0x5a7413.rotate(Math.PI / -1.8);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(_0xfe29ca * 0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[1]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 + _0xfe29ca * 10, _0xa72bfb / 2 + _0xfe29ca * 15);
  _0x5a7413.rotate(Math.PI / 2);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[1]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 - _0xfe29ca * 50, _0xa72bfb / 2 + _0xfe29ca * 40);
  _0x5a7413.rotate(Math.PI / 3);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[1]);
  _0x5a7413.restore();
  var _0xe523f4 = _0xfe29ca * 30;
  var _0xf62934 = _0xe523f4 / 4;
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 + _0xfe29ca * 5, _0xa72bfb / 2 - _0xfe29ca * 20);
  _0x5a7413.rotate(Math.PI / -1.8);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[2]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 + _0xfe29ca * 0, _0xa72bfb / 2 + _0xfe29ca * 10);
  _0x5a7413.rotate(Math.PI / 2);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[2]);
  _0x5a7413.restore();
  _0x5a7413.save();
  _0x5a7413.translate(_0x15a220 / 2 - _0xfe29ca * 45, _0xa72bfb / 2 + _0xfe29ca * 35);
  _0x5a7413.rotate(Math.PI / 3);
  _0x5a7413.globalAlpha = 1;
  _0x5a7413.translate(0, _0xfe29ca * -20);
  round_regular_polygon(_0x5a7413, 5, _0xe523f4, _0xf62934);
  fill_path(_0x5a7413, _0xee5e8b[2]);
  _0x5a7413.restore();
  circle(_0x5a7413, _0x15a220 / 2 - _0xfe29ca * 7, _0xa72bfb / 2 + _0xfe29ca * 7, 5);
  fill_path(_0x5a7413, _0xee5e8b[2]);
  return _0x35e223;
}
function create_plant(_0x4de2b5, _0x139f43, _0x386dee) {
  var _0x1b3958 = document.createElement("canvas");
  var _0x472e19 = _0x1b3958.getContext("2d");
  var _0x5b5582 = _0x4de2b5 * 140;
  var _0x299963 = _0x4de2b5 * 150;
  var _0x106350 = _0x4de2b5 * 10;
  var _0x177366 = _0x4de2b5 * 4;
  _0x1b3958.width = _0x5b5582;
  _0x1b3958.height = _0x299963;
  _0x472e19.translate(_0x4de2b5 * -50, _0x4de2b5 * -38 + _0x106350);
  _0x472e19.globalAlpha = _0x139f43 ? 0.5 : 1;
  _0x472e19.beginPath();
  _0x472e19.bezierCurveTo(_0x4de2b5 * 160, _0x4de2b5 * 65, _0x4de2b5 * 160, _0x4de2b5 * 85, _0x4de2b5 * 152, _0x4de2b5 * 95);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 152, _0x4de2b5 * 95, _0x4de2b5 * 173, _0x4de2b5 * 94, _0x4de2b5 * 187, _0x4de2b5 * 102);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 187, _0x4de2b5 * 102, _0x4de2b5 * 180, _0x4de2b5 * 120, _0x4de2b5 * 155, _0x4de2b5 * 126);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 154, _0x4de2b5 * 126, _0x4de2b5 * 166, _0x4de2b5 * 138, _0x4de2b5 * 169, _0x4de2b5 * 148);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 169, _0x4de2b5 * 148, _0x4de2b5 * 148, _0x4de2b5 * 152, _0x4de2b5 * 133, _0x4de2b5 * 140);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 133, _0x4de2b5 * 140, _0x4de2b5 * 134, _0x4de2b5 * 160, _0x4de2b5 * 122, _0x4de2b5 * 175);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 122, _0x4de2b5 * 175, _0x4de2b5 * 107, _0x4de2b5 * 162, _0x4de2b5 * 107, _0x4de2b5 * 144);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 107, _0x4de2b5 * 144, _0x4de2b5 * 98, _0x4de2b5 * 164, _0x4de2b5 * 73, _0x4de2b5 * 167);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 73, _0x4de2b5 * 167, _0x4de2b5 * 72, _0x4de2b5 * 134, _0x4de2b5 * 90, _0x4de2b5 * 127);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 90, _0x4de2b5 * 127, _0x4de2b5 * 70, _0x4de2b5 * 134, _0x4de2b5 * 55, _0x4de2b5 * 123);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 55, _0x4de2b5 * 123, _0x4de2b5 * 58, _0x4de2b5 * 115, _0x4de2b5 * 75, _0x4de2b5 * 104);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 75, _0x4de2b5 * 104, _0x4de2b5 * 66, _0x4de2b5 * 96, _0x4de2b5 * 61, _0x4de2b5 * 77);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 61, _0x4de2b5 * 77, _0x4de2b5 * 83, _0x4de2b5 * 74, _0x4de2b5 * 102, _0x4de2b5 * 89);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 102, _0x4de2b5 * 89, _0x4de2b5 * 92, _0x4de2b5 * 66, _0x4de2b5 * 110, _0x4de2b5 * 41);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 111, _0x4de2b5 * 40, _0x4de2b5 * 130, _0x4de2b5 * 54, _0x4de2b5 * 130, _0x4de2b5 * 82);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 130, _0x4de2b5 * 82, _0x4de2b5 * 143, _0x4de2b5 * 67, _0x4de2b5 * 159, _0x4de2b5 * 65);
  _0x472e19.closePath();
  fill_path(_0x472e19, _0x386dee[0]);
  _0x472e19.translate(0, 0 - _0x106350);
  _0x472e19.globalAlpha = 1;
  _0x472e19.beginPath();
  _0x472e19.bezierCurveTo(_0x4de2b5 * 160, _0x4de2b5 * 65, _0x4de2b5 * 160, _0x4de2b5 * 85, _0x4de2b5 * 152, _0x4de2b5 * 95);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 152, _0x4de2b5 * 95, _0x4de2b5 * 173, _0x4de2b5 * 94, _0x4de2b5 * 187, _0x4de2b5 * 102);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 187, _0x4de2b5 * 102, _0x4de2b5 * 180, _0x4de2b5 * 120, _0x4de2b5 * 155, _0x4de2b5 * 126);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 154, _0x4de2b5 * 126, _0x4de2b5 * 166, _0x4de2b5 * 138, _0x4de2b5 * 169, _0x4de2b5 * 148);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 169, _0x4de2b5 * 148, _0x4de2b5 * 148, _0x4de2b5 * 152, _0x4de2b5 * 133, _0x4de2b5 * 140);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 133, _0x4de2b5 * 140, _0x4de2b5 * 134, _0x4de2b5 * 160, _0x4de2b5 * 122, _0x4de2b5 * 175);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 122, _0x4de2b5 * 175, _0x4de2b5 * 107, _0x4de2b5 * 162, _0x4de2b5 * 107, _0x4de2b5 * 144);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 107, _0x4de2b5 * 144, _0x4de2b5 * 98, _0x4de2b5 * 164, _0x4de2b5 * 73, _0x4de2b5 * 167);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 73, _0x4de2b5 * 167, _0x4de2b5 * 72, _0x4de2b5 * 134, _0x4de2b5 * 90, _0x4de2b5 * 127);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 90, _0x4de2b5 * 127, _0x4de2b5 * 70, _0x4de2b5 * 134, _0x4de2b5 * 55, _0x4de2b5 * 123);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 55, _0x4de2b5 * 123, _0x4de2b5 * 58, _0x4de2b5 * 115, _0x4de2b5 * 75, _0x4de2b5 * 104);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 75, _0x4de2b5 * 104, _0x4de2b5 * 66, _0x4de2b5 * 96, _0x4de2b5 * 61, _0x4de2b5 * 77);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 61, _0x4de2b5 * 77, _0x4de2b5 * 83, _0x4de2b5 * 74, _0x4de2b5 * 102, _0x4de2b5 * 89);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 102, _0x4de2b5 * 89, _0x4de2b5 * 92, _0x4de2b5 * 66, _0x4de2b5 * 110, _0x4de2b5 * 41);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 111, _0x4de2b5 * 40, _0x4de2b5 * 130, _0x4de2b5 * 54, _0x4de2b5 * 130, _0x4de2b5 * 82);
  _0x472e19.bezierCurveTo(_0x4de2b5 * 130, _0x4de2b5 * 82, _0x4de2b5 * 143, _0x4de2b5 * 67, _0x4de2b5 * 159, _0x4de2b5 * 65);
  _0x472e19.closePath();
  fill_path(_0x472e19, _0x386dee[1], _0x386dee[2], _0x177366);
  return _0x1b3958;
}
function create_fruit(_0x2f6b60, _0x28162d, _0x372602) {
  var _0x439a13 = document.createElement("canvas");
  var _0x422587 = _0x439a13.getContext("2d");
  var _0x1fc278 = _0x2f6b60 * 18;
  var _0x311789 = _0x2f6b60 * 18;
  _0x439a13.width = _0x1fc278;
  _0x439a13.height = _0x311789;
  var _0x48e95b = _0x2f6b60 * 9;
  var _0x4a8f03 = _0x2f6b60 * 9;
  var _0x349531 = _0x2f6b60 * 8;
  _0x422587.save();
  _0x422587.translate(_0x48e95b, _0x4a8f03);
  _0x422587.globalAlpha = 1;
  circle(_0x422587, 0, 0, _0x349531);
  fill_path(_0x422587, _0x372602[0]);
  var _0x349531 = _0x2f6b60 * 3;
  var _0x48e95b = 0;
  var _0x4a8f03 = _0x2f6b60 * -3;
  _0x422587.translate(_0x48e95b, _0x4a8f03);
  _0x422587.globalAlpha = 1;
  circle(_0x422587, 0, 0, _0x349531);
  fill_path(_0x422587, _0x372602[1]);
  _0x422587.restore();
  return _0x439a13;
}
function create_leaf(_0x1baaa0, _0x552c03) {
  var _0x2c9489 = document.createElement("canvas");
  var _0x40158c = _0x2c9489.getContext("2d");
  _0x2c9489.width = _0x1baaa0 * 80;
  _0x2c9489.height = _0x1baaa0 * 100;
  _0x40158c.scale(0.5, 0.5);
  _0x40158c.translate(10, 15);
  _0x40158c.globalAlpha = 0.5;
  _0x40158c.beginPath();
  _0x40158c.lineCap = "round";
  _0x40158c.lineJoin = "round";
  _0x40158c.moveTo(_0x1baaa0 * 47, _0x1baaa0 * 5);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 19, _0x1baaa0 * 30, _0x1baaa0 * 12, _0x1baaa0 * 42, _0x1baaa0 * 10, _0x1baaa0 * 55);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 11, _0x1baaa0 * 75, _0x1baaa0 * 27, _0x1baaa0 * 76, _0x1baaa0 * 36, _0x1baaa0 * 72);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 52, _0x1baaa0 * 60, _0x1baaa0 * 53, _0x1baaa0 * 46, _0x1baaa0 * 54, _0x1baaa0 * 31);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 53, _0x1baaa0 * 14, _0x1baaa0 * 50, _0x1baaa0 * 9, _0x1baaa0 * 48, _0x1baaa0 * 6);
  _0x40158c.closePath();
  fill_path(_0x40158c, _0x552c03[0]);
  _0x40158c.beginPath();
  _0x40158c.lineCap = "round";
  _0x40158c.lineJoin = "round";
  _0x40158c.moveTo(_0x1baaa0 * 17, _0x1baaa0 * 70);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 18, _0x1baaa0 * 77, _0x1baaa0 * 10, _0x1baaa0 * 83, _0x1baaa0 * 4, _0x1baaa0 * 87);
  fill_path(_0x40158c, undefined, _0x552c03[0], _0x1baaa0 * 10);
  _0x40158c.translate(0, -10);
  _0x40158c.globalAlpha = 1;
  _0x40158c.beginPath();
  _0x40158c.lineCap = "round";
  _0x40158c.lineJoin = "round";
  _0x40158c.moveTo(_0x1baaa0 * 47, _0x1baaa0 * 5);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 19, _0x1baaa0 * 30, _0x1baaa0 * 12, _0x1baaa0 * 42, _0x1baaa0 * 10, _0x1baaa0 * 55);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 11, _0x1baaa0 * 75, _0x1baaa0 * 27, _0x1baaa0 * 76, _0x1baaa0 * 36, _0x1baaa0 * 72);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 52, _0x1baaa0 * 60, _0x1baaa0 * 53, _0x1baaa0 * 46, _0x1baaa0 * 54, _0x1baaa0 * 31);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 53, _0x1baaa0 * 14, _0x1baaa0 * 50, _0x1baaa0 * 9, _0x1baaa0 * 48, _0x1baaa0 * 6);
  _0x40158c.closePath();
  fill_path(_0x40158c, _0x552c03[1], _0x552c03[2], _0x1baaa0 * 8);
  _0x40158c.beginPath();
  _0x40158c.lineCap = "round";
  _0x40158c.lineJoin = "round";
  _0x40158c.moveTo(_0x1baaa0 * 17, _0x1baaa0 * 70);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 18, _0x1baaa0 * 77, _0x1baaa0 * 10, _0x1baaa0 * 83, _0x1baaa0 * 4, _0x1baaa0 * 87);
  fill_path(_0x40158c, undefined, _0x552c03[2], _0x1baaa0 * 8);
  _0x40158c.globalAlpha = 0.5;
  _0x40158c.beginPath();
  _0x40158c.lineCap = "round";
  _0x40158c.lineJoin = "round";
  _0x40158c.moveTo(_0x1baaa0 * 17, _0x1baaa0 * 70);
  _0x40158c.bezierCurveTo(_0x1baaa0 * 33, _0x1baaa0 * 52, _0x1baaa0 * 39, _0x1baaa0 * 33, _0x1baaa0 * 48, _0x1baaa0 * 7);
  fill_path(_0x40158c, undefined, _0x552c03[2], _0x1baaa0 * 8);
  return _0x2c9489;
}
function create_leaf(_0x42b777, _0x417fd6) {
  var _0x2e66af = document.createElement("canvas");
  var _0x58e8e7 = _0x2e66af.getContext("2d");
  _0x2e66af.width = _0x42b777 * 234;
  _0x2e66af.height = _0x42b777 * 183;
  _0x58e8e7.beginPath();
  _0x58e8e7.lineCap = "round";
  _0x58e8e7.lineJoin = "round";
  _0x58e8e7.moveTo(_0x42b777 * 76, _0x42b777 * 25);
  _0x58e8e7.bezierCurveTo(_0x42b777 * 150, _0x42b777 * 3, _0x42b777 * 181, _0x42b777 * 22, _0x42b777 * 203, _0x42b777 * 41);
  _0x58e8e7.bezierCurveTo(_0x42b777 * 225, _0x42b777 * 63, _0x42b777 * 225, _0x42b777 * 105, _0x42b777 * 198, _0x42b777 * 133);
  _0x58e8e7.bezierCurveTo(_0x42b777 * 179, _0x42b777 * 157, _0x42b777 * 134, _0x42b777 * 178, _0x42b777 * 81, _0x42b777 * 164);
  _0x58e8e7.bezierCurveTo(_0x42b777 * 19, _0x42b777 * 148, _0x42b777 * 6, _0x42b777 * 95, _0x42b777 * 21, _0x42b777 * 66);
  _0x58e8e7.bezierCurveTo(_0x42b777 * 34, _0x42b777 * 39, _0x42b777 * 52, _0x42b777 * 33, _0x42b777 * 75, _0x42b777 * 25);
  _0x58e8e7.closePath();
  fill_path(_0x58e8e7, _0x417fd6[0], _0x417fd6[0], _0x42b777 * 4);
  return _0x2e66af;
}
function create_herb(_0x37f855, _0x572ba9, _0x2bacb5, _0x2938be, _0x8049ee) {
  var _0x1ae38a = document.createElement("canvas");
  var _0x3584f0 = _0x1ae38a.getContext("2d");
  if (_0x2938be == 0) {
    var _0x4943e8 = _0x37f855 * 270;
    var _0x344b02 = _0x37f855 * 250;
    _0x1ae38a.width = _0x4943e8;
    _0x1ae38a.height = _0x344b02;
    _0x3584f0.beginPath();
    _0x3584f0.moveTo(_0x37f855 * 140, _0x37f855 * 3);
    _0x3584f0.translate(_0x37f855 * -25, _0x37f855 * -20);
    _0x3584f0.bezierCurveTo(_0x37f855 * 218, _0x37f855 * 31, _0x37f855 * 251, _0x37f855 * 61, _0x37f855 * 265, _0x37f855 * 85);
    _0x3584f0.bezierCurveTo(_0x37f855 * 278, _0x37f855 * 108, _0x37f855 * 295, _0x37f855 * 160, _0x37f855 * 285, _0x37f855 * 195);
    _0x3584f0.bezierCurveTo(_0x37f855 * 271, _0x37f855 * 242, _0x37f855 * 213, _0x37f855 * 268, _0x37f855 * 188, _0x37f855 * 266);
    _0x3584f0.bezierCurveTo(_0x37f855 * 139, _0x37f855 * 262, _0x37f855 * 70, _0x37f855 * 244, _0x37f855 * 47, _0x37f855 * 204);
    _0x3584f0.bezierCurveTo(_0x37f855 * 20, _0x37f855 * 158, _0x37f855 * 35, _0x37f855 * 78, _0x37f855 * 59, _0x37f855 * 56);
    _0x3584f0.bezierCurveTo(_0x37f855 * 90, _0x37f855 * 28, _0x37f855 * 124, _0x37f855 * 23, _0x37f855 * 140, _0x37f855 * 23);
    _0x3584f0.closePath();
    fill_path(_0x3584f0, _0x2bacb5[0]);
  } else if (_0x2938be == 1) {
    var _0x4943e8 = _0x37f855 * 430;
    var _0x344b02 = _0x37f855 * 350;
    _0x1ae38a.width = _0x4943e8;
    _0x1ae38a.height = _0x344b02;
    _0x3584f0.beginPath();
    _0x3584f0.moveTo(_0x37f855 * 180, _0x37f855 * 5);
    _0x3584f0.translate(_0x37f855 * -30, _0x37f855 * -60);
    _0x3584f0.bezierCurveTo(_0x37f855 * 283, _0x37f855 * 60, _0x37f855 * 265, _0x37f855 * 163, _0x37f855 * 335, _0x37f855 * 206);
    _0x3584f0.bezierCurveTo(_0x37f855 * 376, _0x37f855 * 231, _0x37f855 * 492, _0x37f855 * 299, _0x37f855 * 434, _0x37f855 * 357);
    _0x3584f0.bezierCurveTo(_0x37f855 * 371, _0x37f855 * 421, _0x37f855 * 289, _0x37f855 * 394, _0x37f855 * 255, _0x37f855 * 386);
    _0x3584f0.bezierCurveTo(_0x37f855 * 218, _0x37f855 * 377, _0x37f855 * 91, _0x37f855 * 359, _0x37f855 * 50, _0x37f855 * 272);
    _0x3584f0.bezierCurveTo(_0x37f855 * 12, _0x37f855 * 192, _0x37f855 * 107, _0x37f855 * 75, _0x37f855 * 178, _0x37f855 * 69);
    _0x3584f0.closePath();
    fill_path(_0x3584f0, _0x2bacb5[0]);
  } else if (_0x2938be == 2) {
    var _0x4943e8 = _0x37f855 * 400;
    var _0x344b02 = _0x37f855 * 300;
    _0x1ae38a.width = _0x4943e8;
    _0x1ae38a.height = _0x344b02;
    _0x3584f0.beginPath();
    _0x3584f0.moveTo(_0x37f855 * 80, _0x37f855 * 52);
    _0x3584f0.translate(_0x37f855 * -40, _0x37f855 * -30);
    _0x3584f0.bezierCurveTo(_0x37f855 * 124, _0x37f855 * 77, _0x37f855 * 241, _0x37f855 * 22, _0x37f855 * 311, _0x37f855 * 65);
    _0x3584f0.bezierCurveTo(_0x37f855 * 352, _0x37f855 * 90, _0x37f855 * 404, _0x37f855 * 176, _0x37f855 * 346, _0x37f855 * 234);
    _0x3584f0.bezierCurveTo(_0x37f855 * 283, _0x37f855 * 298, _0x37f855 * 179, _0x37f855 * 299, _0x37f855 * 145, _0x37f855 * 291);
    _0x3584f0.bezierCurveTo(_0x37f855 * 108, _0x37f855 * 282, _0x37f855 * 100, _0x37f855 * 239, _0x37f855 * 63, _0x37f855 * 205);
    _0x3584f0.bezierCurveTo(_0x37f855 * 37, _0x37f855 * 181, _0x37f855 * 45, _0x37f855 * 131, _0x37f855 * 80, _0x37f855 * 107);
    _0x3584f0.closePath();
    fill_path(_0x3584f0, _0x2bacb5[0]);
  }
  return _0x1ae38a;
}
function create_flake(_0x13e63f, _0x704851, _0x9065c4) {
  var _0x16803c = document.createElement("canvas");
  var _0x5e24ce = _0x16803c.getContext("2d");
  var _0x34435c = _0x13e63f * _0x704851 * 2;
  var _0x5c70ae = _0x13e63f * _0x704851 * 2;
  var _0x37f155 = _0x34435c / 2;
  var _0x2005d7 = _0x5c70ae / 2;
  _0x16803c.width = _0x34435c;
  _0x16803c.height = _0x5c70ae;
  _0x5e24ce.translate(_0x37f155, _0x2005d7);
  circle(_0x5e24ce, 0, 0, _0x704851 * _0x13e63f, 0);
  fill_path(_0x5e24ce, _0x9065c4);
  return _0x16803c;
}
function create_divingmask(_0x50f381, _0x343eec, _0x4eab80) {
  var _0x205e3b = document.createElement("canvas");
  var _0x432c71 = _0x205e3b.getContext("2d");
  _0x205e3b.width = _0x50f381 * 373;
  _0x205e3b.height = _0x50f381 * 314;
  _0x432c71.globalAlpha = _0x343eec ? 0.5 : 1;
  _0x432c71.translate(_0x50f381 * 5, _0x50f381 * 5);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 184.048583984375, _0x50f381 * 69.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -40, _0x50f381 * -28.5, _0x50f381 * 80, _0x50f381 * 57, _0x50f381 * 10);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[1], _0x4eab80[2], _0x50f381 * 4);
  _0x432c71.beginPath();
  _0x432c71.lineCap = "round";
  _0x432c71.lineJoin = "round";
  _0x432c71.moveTo(_0x50f381 * 185.048583984375, _0x50f381 * 61.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 145.048583984375, _0x50f381 * 59.6805419921875, _0x50f381 * 138.048583984375, _0x50f381 * 41.6805419921875, _0x50f381 * 148.048583984375, _0x50f381 * 33.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 169.048583984375, _0x50f381 * 17.6805419921875, _0x50f381 * 194.048583984375, _0x50f381 * 20.6805419921875, _0x50f381 * 210.048583984375, _0x50f381 * 27.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 234.048583984375, _0x50f381 * 40.6805419921875, _0x50f381 * 225.048583984375, _0x50f381 * 57.6805419921875, _0x50f381 * 186.048583984375, _0x50f381 * 61.6805419921875);
  _0x432c71.closePath();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.beginPath();
  _0x432c71.lineCap = "round";
  _0x432c71.lineJoin = "round";
  _0x432c71.moveTo(_0x50f381 * 224.048583984375, _0x50f381 * 56.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 326.048583984375, _0x50f381 * 69.6805419921875, _0x50f381 * 363.048583984375, _0x50f381 * 148.6805419921875, _0x50f381 * 349.048583984375, _0x50f381 * 206.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 329.048583984375, _0x50f381 * 278.6805419921875, _0x50f381 * 252.048583984375, _0x50f381 * 283.6805419921875, _0x50f381 * 206.048583984375, _0x50f381 * 275.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 206.548583984375, _0x50f381 * 266.6805419921875, _0x50f381 * 206.548583984375, _0x50f381 * 266.6805419921875, _0x50f381 * 207.048583984375, _0x50f381 * 257.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 276.048583984375, _0x50f381 * 268.6805419921875, _0x50f381 * 308.048583984375, _0x50f381 * 239.6805419921875, _0x50f381 * 323.048583984375, _0x50f381 * 208.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 352.048583984375, _0x50f381 * 145.6805419921875, _0x50f381 * 292.048583984375, _0x50f381 * 86.6805419921875, _0x50f381 * 223.048583984375, _0x50f381 * 74.6805419921875);
  _0x432c71.closePath();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.548583984375, _0x50f381 * 119.6805419921875);
  round_rect(_0x432c71, _0x50f381 * -121.5, _0x50f381 * -45, _0x50f381 * 243, _0x50f381 * 90, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.048583984375, _0x50f381 * 155.6805419921875);
  round_rect(_0x432c71, _0x50f381 * -121, _0x50f381 * -52, _0x50f381 * 242, _0x50f381 * 104, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.048583984375, _0x50f381 * 205.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -121, _0x50f381 * -50.5, _0x50f381 * 242, _0x50f381 * 101, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 185.048583984375, _0x50f381 * 204.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -100, _0x50f381 * -34.5, _0x50f381 * 200, _0x50f381 * 69, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  circle(_0x432c71, _0x50f381 * 185.048583984375, _0x50f381 * 257.6805419921875, _0x50f381 * 27.018512172212592);
  fill_path(_0x432c71, _0x4eab80[0], _0x4eab80[0], _0x50f381 * 6);
  _0x432c71.globalAlpha = 1;
  _0x432c71.translate(_0x50f381 * -5, _0x50f381 * -5);
  _0x432c71.beginPath();
  _0x432c71.lineCap = "round";
  _0x432c71.lineJoin = "round";
  _0x432c71.moveTo(_0x50f381 * 224.048583984375, _0x50f381 * 56.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 326.048583984375, _0x50f381 * 69.6805419921875, _0x50f381 * 363.048583984375, _0x50f381 * 148.6805419921875, _0x50f381 * 349.048583984375, _0x50f381 * 206.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 329.048583984375, _0x50f381 * 278.6805419921875, _0x50f381 * 252.048583984375, _0x50f381 * 283.6805419921875, _0x50f381 * 206.048583984375, _0x50f381 * 275.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 206.548583984375, _0x50f381 * 266.6805419921875, _0x50f381 * 206.548583984375, _0x50f381 * 266.6805419921875, _0x50f381 * 207.048583984375, _0x50f381 * 257.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 276.048583984375, _0x50f381 * 268.6805419921875, _0x50f381 * 308.048583984375, _0x50f381 * 239.6805419921875, _0x50f381 * 323.048583984375, _0x50f381 * 208.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 352.048583984375, _0x50f381 * 145.6805419921875, _0x50f381 * 292.048583984375, _0x50f381 * 86.6805419921875, _0x50f381 * 223.048583984375, _0x50f381 * 74.6805419921875);
  _0x432c71.closePath();
  fill_path(_0x432c71, _0x4eab80[3], _0x4eab80[4], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 184.048583984375, _0x50f381 * 69.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -40, _0x50f381 * -28.5, _0x50f381 * 80, _0x50f381 * 57, _0x50f381 * 10);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[1], _0x4eab80[2], _0x50f381 * 4);
  _0x432c71.beginPath();
  _0x432c71.lineCap = "round";
  _0x432c71.lineJoin = "round";
  _0x432c71.moveTo(_0x50f381 * 185.048583984375, _0x50f381 * 61.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 145.048583984375, _0x50f381 * 59.6805419921875, _0x50f381 * 138.048583984375, _0x50f381 * 41.6805419921875, _0x50f381 * 148.048583984375, _0x50f381 * 33.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 169.048583984375, _0x50f381 * 17.6805419921875, _0x50f381 * 194.048583984375, _0x50f381 * 20.6805419921875, _0x50f381 * 210.048583984375, _0x50f381 * 27.6805419921875);
  _0x432c71.bezierCurveTo(_0x50f381 * 234.048583984375, _0x50f381 * 40.6805419921875, _0x50f381 * 225.048583984375, _0x50f381 * 57.6805419921875, _0x50f381 * 186.048583984375, _0x50f381 * 61.6805419921875);
  _0x432c71.closePath();
  fill_path(_0x432c71, _0x4eab80[1], _0x4eab80[2], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.548583984375, _0x50f381 * 119.6805419921875);
  round_rect(_0x432c71, _0x50f381 * -121.5, _0x50f381 * -45, _0x50f381 * 243, _0x50f381 * 90, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[5], _0x4eab80[4], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.048583984375, _0x50f381 * 155.6805419921875);
  round_rect(_0x432c71, _0x50f381 * -121, _0x50f381 * -52, _0x50f381 * 242, _0x50f381 * 104, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[3], _0x4eab80[4], _0x50f381 * 6);
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 183.048583984375, _0x50f381 * 205.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -121, _0x50f381 * -50.5, _0x50f381 * 242, _0x50f381 * 101, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[6], _0x4eab80[4], _0x50f381 * 6);
  _0x432c71.globalCompositeOperation = "destination-out";
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 185.048583984375, _0x50f381 * 204.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -100, _0x50f381 * -34.5, _0x50f381 * 200, _0x50f381 * 69, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[7], _0x4eab80[8], _0x50f381 * 6);
  _0x432c71.globalCompositeOperation = "source-over";
  _0x432c71.globalAlpha = 0.5;
  _0x432c71.save();
  _0x432c71.translate(_0x50f381 * 185.048583984375, _0x50f381 * 204.1805419921875);
  round_rect(_0x432c71, _0x50f381 * -100, _0x50f381 * -34.5, _0x50f381 * 200, _0x50f381 * 69, _0x50f381 * 40);
  _0x432c71.restore();
  fill_path(_0x432c71, _0x4eab80[7], _0x4eab80[8], _0x50f381 * 6);
  _0x432c71.globalAlpha = 1;
  _0x432c71.save();
  circle(_0x432c71, _0x50f381 * 185.048583984375, _0x50f381 * 257.6805419921875, _0x50f381 * 27.018512172212592);
  fill_path(_0x432c71, _0x4eab80[3], _0x4eab80[4], _0x50f381 * 6);
  _0x432c71.restore();
  return _0x205e3b;
}
function create_superdivingsuit(_0x1b79a8, _0x1d7b29, _0x26f292) {
  var _0x40b351 = document.createElement("canvas");
  var _0x477d9b = _0x40b351.getContext("2d");
  _0x40b351.width = _0x1b79a8 * 220;
  _0x40b351.height = _0x1b79a8 * 180;
  _0x477d9b.globalAlpha = _0x1d7b29 ? 0.5 : 1;
  _0x477d9b.translate(_0x1b79a8 * -90, _0x1b79a8 * -150);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 104, _0x1b79a8 * 237.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 110, _0x1b79a8 * 237.8000030517578, _0x1b79a8 * 110, _0x1b79a8 * 237.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 237.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 241.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 241.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 245.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 245.3000030517578, _0x1b79a8 * 115, _0x1b79a8 * 245.3000030517578, _0x1b79a8 * 114, _0x1b79a8 * 244.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 109.5, _0x1b79a8 * 244.8000030517578, _0x1b79a8 * 109.5, _0x1b79a8 * 244.8000030517578, _0x1b79a8 * 105, _0x1b79a8 * 244.8000030517578);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[5], _0x26f292[5], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 115, _0x1b79a8 * 211.20000457763672);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 106, _0x1b79a8 * 216.20000457763672, _0x1b79a8 * 101, _0x1b79a8 * 234.20000457763672, _0x1b79a8 * 102, _0x1b79a8 * 241.20000457763672);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 102, _0x1b79a8 * 260.2000045776367, _0x1b79a8 * 115, _0x1b79a8 * 269.2000045776367, _0x1b79a8 * 115, _0x1b79a8 * 269.2000045776367);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 265.2000045776367, _0x1b79a8 * 115.5, _0x1b79a8 * 265.2000045776367, _0x1b79a8 * 116, _0x1b79a8 * 261.2000045776367);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 112, _0x1b79a8 * 264, _0x1b79a8 * 108, _0x1b79a8 * 254, _0x1b79a8 * 106, _0x1b79a8 * 242);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 105, _0x1b79a8 * 232, _0x1b79a8 * 110, _0x1b79a8 * 222, _0x1b79a8 * 115, _0x1b79a8 * 218);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 216.75, _0x1b79a8 * 115.5, _0x1b79a8 * 217.375, _0x1b79a8 * 116, _0x1b79a8 * 216.75);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[5], _0x26f292[5], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 120, _0x1b79a8 * 207);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 206, _0x1b79a8 * 114, _0x1b79a8 * 209, _0x1b79a8 * 114, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 114, _0x1b79a8 * 268, _0x1b79a8 * 114, _0x1b79a8 * 241, _0x1b79a8 * 114, _0x1b79a8 * 271);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 276, _0x1b79a8 * 118, _0x1b79a8 * 276, _0x1b79a8 * 120, _0x1b79a8 * 276);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 122, _0x1b79a8 * 273, _0x1b79a8 * 120.5, _0x1b79a8 * 274.5, _0x1b79a8 * 121, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 241, _0x1b79a8 * 121, _0x1b79a8 * 241, _0x1b79a8 * 121, _0x1b79a8 * 209);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 284, _0x1b79a8 * 238);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 289.5, _0x1b79a8 * 238, _0x1b79a8 * 289.5, _0x1b79a8 * 238, _0x1b79a8 * 295, _0x1b79a8 * 238);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 295, _0x1b79a8 * 241.5, _0x1b79a8 * 295, _0x1b79a8 * 241.5, _0x1b79a8 * 295, _0x1b79a8 * 245);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 289.5, _0x1b79a8 * 245, _0x1b79a8 * 289.5, _0x1b79a8 * 245, _0x1b79a8 * 284, _0x1b79a8 * 245);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 283, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 293, _0x1b79a8 * 216, _0x1b79a8 * 297, _0x1b79a8 * 231, _0x1b79a8 * 297, _0x1b79a8 * 241);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 298, _0x1b79a8 * 254, _0x1b79a8 * 290, _0x1b79a8 * 265, _0x1b79a8 * 284, _0x1b79a8 * 269);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 283, _0x1b79a8 * 266, _0x1b79a8 * 283.5, _0x1b79a8 * 266, _0x1b79a8 * 283, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 290, _0x1b79a8 * 260, _0x1b79a8 * 292, _0x1b79a8 * 251, _0x1b79a8 * 293, _0x1b79a8 * 242);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 292, _0x1b79a8 * 223, _0x1b79a8 * 289, _0x1b79a8 * 224, _0x1b79a8 * 284, _0x1b79a8 * 218);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 280, _0x1b79a8 * 206);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 284, _0x1b79a8 * 206, _0x1b79a8 * 285, _0x1b79a8 * 208, _0x1b79a8 * 285, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 285, _0x1b79a8 * 241.5, _0x1b79a8 * 285, _0x1b79a8 * 241.5, _0x1b79a8 * 285, _0x1b79a8 * 272);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 284, _0x1b79a8 * 275, _0x1b79a8 * 284, _0x1b79a8 * 275, _0x1b79a8 * 280, _0x1b79a8 * 275);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 279, _0x1b79a8 * 273.5, _0x1b79a8 * 279, _0x1b79a8 * 273.5, _0x1b79a8 * 278, _0x1b79a8 * 272);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 278, _0x1b79a8 * 240.5, _0x1b79a8 * 278, _0x1b79a8 * 240.5, _0x1b79a8 * 278, _0x1b79a8 * 209);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 138, _0x1b79a8 * 298.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 141, _0x1b79a8 * 311.40000915527344, _0x1b79a8 * 151, _0x1b79a8 * 314.40000915527344, _0x1b79a8 * 162, _0x1b79a8 * 316.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 224, _0x1b79a8 * 316.40000915527344, _0x1b79a8 * 200, _0x1b79a8 * 315.90000915527344, _0x1b79a8 * 238, _0x1b79a8 * 315.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 254, _0x1b79a8 * 316.40000915527344, _0x1b79a8 * 261, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 264, _0x1b79a8 * 298.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 255, _0x1b79a8 * 304.40000915527344, _0x1b79a8 * 250, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 244, _0x1b79a8 * 306.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 201, _0x1b79a8 * 306.90000915527344, _0x1b79a8 * 201, _0x1b79a8 * 306.90000915527344, _0x1b79a8 * 158, _0x1b79a8 * 307.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 150, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 148, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 139, _0x1b79a8 * 300.40000915527344);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 161, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 130, _0x1b79a8 * 175.5999984741211, _0x1b79a8 * 123, _0x1b79a8 * 190.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 205.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 277.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 242.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 279.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 128, _0x1b79a8 * 297.5999984741211, _0x1b79a8 * 137, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 143, _0x1b79a8 * 300.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 163, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 163, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 183, _0x1b79a8 * 301.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 150, _0x1b79a8 * 300.5999984741211, _0x1b79a8 * 135, _0x1b79a8 * 290.5999984741211, _0x1b79a8 * 134, _0x1b79a8 * 267.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 133, _0x1b79a8 * 245.5999984741211, _0x1b79a8 * 146, _0x1b79a8 * 235.5999984741211, _0x1b79a8 * 164, _0x1b79a8 * 235.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 206, _0x1b79a8 * 236.0999984741211, _0x1b79a8 * 206, _0x1b79a8 * 236.0999984741211, _0x1b79a8 * 248, _0x1b79a8 * 236.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 266, _0x1b79a8 * 243.5999984741211, _0x1b79a8 * 268, _0x1b79a8 * 259.5999984741211, _0x1b79a8 * 267, _0x1b79a8 * 266.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 266, _0x1b79a8 * 288.5999984741211, _0x1b79a8 * 251, _0x1b79a8 * 294.5999984741211, _0x1b79a8 * 244, _0x1b79a8 * 297.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 228.5, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 228.5, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 213, _0x1b79a8 * 301.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 236, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 236, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 259, _0x1b79a8 * 300.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 272, _0x1b79a8 * 295.5999984741211, _0x1b79a8 * 277, _0x1b79a8 * 288.5999984741211, _0x1b79a8 * 278, _0x1b79a8 * 271.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 277.5, _0x1b79a8 * 236.5999984741211, _0x1b79a8 * 277.5, _0x1b79a8 * 236.5999984741211, _0x1b79a8 * 277, _0x1b79a8 * 201.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 276, _0x1b79a8 * 186.5999984741211, _0x1b79a8 * 265, _0x1b79a8 * 178.5999984741211, _0x1b79a8 * 254, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 247.5, _0x1b79a8 * 177.5999984741211, _0x1b79a8 * 247.5, _0x1b79a8 * 177.5999984741211, _0x1b79a8 * 241, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 255, _0x1b79a8 * 202.5999984741211, _0x1b79a8 * 214, _0x1b79a8 * 217.5999984741211, _0x1b79a8 * 201, _0x1b79a8 * 215.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 170, _0x1b79a8 * 215.5999984741211, _0x1b79a8 * 152, _0x1b79a8 * 197.5999984741211, _0x1b79a8 * 161, _0x1b79a8 * 178.5999984741211);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 162, _0x1b79a8 * 175.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 153, _0x1b79a8 * 176.0999984741211, _0x1b79a8 * 153, _0x1b79a8 * 176.0999984741211, _0x1b79a8 * 144, _0x1b79a8 * 176.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 125, _0x1b79a8 * 178.5999984741211, _0x1b79a8 * 121, _0x1b79a8 * 196.5999984741211, _0x1b79a8 * 121, _0x1b79a8 * 207.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 243.20000076293945, _0x1b79a8 * 121, _0x1b79a8 * 243.20000076293945, _0x1b79a8 * 121, _0x1b79a8 * 278.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 126, _0x1b79a8 * 298.8000030517578, _0x1b79a8 * 137, _0x1b79a8 * 300.8000030517578, _0x1b79a8 * 146, _0x1b79a8 * 302.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 302.8000030517578, _0x1b79a8 * 200.5, _0x1b79a8 * 302.8000030517578, _0x1b79a8 * 255, _0x1b79a8 * 302.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 271, _0x1b79a8 * 301.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 288.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 273.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 279, _0x1b79a8 * 236.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 236.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 199.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 274, _0x1b79a8 * 178.8000030517578, _0x1b79a8 * 263, _0x1b79a8 * 177.8000030517578, _0x1b79a8 * 255, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 248, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 248, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 241, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 240, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 240, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 239, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 254, _0x1b79a8 * 200.8000030517578, _0x1b79a8 * 222, _0x1b79a8 * 211.8000030517578, _0x1b79a8 * 202, _0x1b79a8 * 212.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 168, _0x1b79a8 * 213.8000030517578, _0x1b79a8 * 151, _0x1b79a8 * 190.8000030517578, _0x1b79a8 * 163, _0x1b79a8 * 176.8000030517578);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[4], _0x1b79a8 * 6);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 198, _0x1b79a8 * 161.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 198, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 198, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 198, _0x1b79a8 * 212.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 201, _0x1b79a8 * 212.4000015258789, _0x1b79a8 * 201, _0x1b79a8 * 212.4000015258789, _0x1b79a8 * 204, _0x1b79a8 * 212.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 204, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 204, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 204, _0x1b79a8 * 161.4000015258789);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 161, _0x1b79a8 * 194);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 188, _0x1b79a8 * 169, _0x1b79a8 * 231, _0x1b79a8 * 179, _0x1b79a8 * 241, _0x1b79a8 * 194);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 239.5, _0x1b79a8 * 196, _0x1b79a8 * 239.5, _0x1b79a8 * 196, _0x1b79a8 * 238, _0x1b79a8 * 198);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 221, _0x1b79a8 * 179, _0x1b79a8 * 182, _0x1b79a8 * 182, _0x1b79a8 * 165, _0x1b79a8 * 198);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 157, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 162, _0x1b79a8 * 150.80000019073486, _0x1b79a8 * 241, _0x1b79a8 * 150.80000019073486, _0x1b79a8 * 245, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 242, _0x1b79a8 * 224.80000019073486, _0x1b79a8 * 162, _0x1b79a8 * 228.80000019073486, _0x1b79a8 * 157, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 159, _0x1b79a8 * 188.80000019073486, _0x1b79a8 * 159, _0x1b79a8 * 188.80000019073486, _0x1b79a8 * 161, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 168, _0x1b79a8 * 216.80000019073486, _0x1b79a8 * 231, _0x1b79a8 * 218.80000019073486, _0x1b79a8 * 241, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 236, _0x1b79a8 * 156.80000019073486, _0x1b79a8 * 169, _0x1b79a8 * 152.80000019073486, _0x1b79a8 * 161, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 156, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 160, _0x1b79a8 * 164, _0x1b79a8 * 183, _0x1b79a8 * 159, _0x1b79a8 * 201, _0x1b79a8 * 158);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 232, _0x1b79a8 * 159, _0x1b79a8 * 244, _0x1b79a8 * 174, _0x1b79a8 * 246, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 245, _0x1b79a8 * 212, _0x1b79a8 * 213, _0x1b79a8 * 219, _0x1b79a8 * 201, _0x1b79a8 * 218);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 181, _0x1b79a8 * 221, _0x1b79a8 * 158, _0x1b79a8 * 207, _0x1b79a8 * 156, _0x1b79a8 * 190);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[4], _0x1b79a8 * 6);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 162, _0x1b79a8 * 189);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 166, _0x1b79a8 * 170, _0x1b79a8 * 185, _0x1b79a8 * 165, _0x1b79a8 * 201, _0x1b79a8 * 164);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 227, _0x1b79a8 * 165, _0x1b79a8 * 240, _0x1b79a8 * 178, _0x1b79a8 * 239, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 239, _0x1b79a8 * 204, _0x1b79a8 * 210, _0x1b79a8 * 210, _0x1b79a8 * 201, _0x1b79a8 * 210);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 182, _0x1b79a8 * 211, _0x1b79a8 * 166, _0x1b79a8 * 200, _0x1b79a8 * 162, _0x1b79a8 * 190);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[4], _0x1b79a8 * 6);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 131, _0x1b79a8 * 262);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 136, _0x1b79a8 * 241, _0x1b79a8 * 144, _0x1b79a8 * 236, _0x1b79a8 * 158, _0x1b79a8 * 233);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 233, _0x1b79a8 * 229, _0x1b79a8 * 232, _0x1b79a8 * 243, _0x1b79a8 * 233);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 259, _0x1b79a8 * 235, _0x1b79a8 * 267, _0x1b79a8 * 248, _0x1b79a8 * 269, _0x1b79a8 * 260);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 269, _0x1b79a8 * 266.5, _0x1b79a8 * 269, _0x1b79a8 * 266.5, _0x1b79a8 * 269, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 265, _0x1b79a8 * 290, _0x1b79a8 * 251, _0x1b79a8 * 297, _0x1b79a8 * 242, _0x1b79a8 * 298);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 202, _0x1b79a8 * 298, _0x1b79a8 * 202, _0x1b79a8 * 298, _0x1b79a8 * 162, _0x1b79a8 * 298);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 148, _0x1b79a8 * 298, _0x1b79a8 * 136, _0x1b79a8 * 289, _0x1b79a8 * 132, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 131.5, _0x1b79a8 * 268, _0x1b79a8 * 131.5, _0x1b79a8 * 268, _0x1b79a8 * 131, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 135, _0x1b79a8 * 263, _0x1b79a8 * 135, _0x1b79a8 * 263, _0x1b79a8 * 139, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 139, _0x1b79a8 * 281, _0x1b79a8 * 151, _0x1b79a8 * 287, _0x1b79a8 * 160, _0x1b79a8 * 290);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 290, _0x1b79a8 * 200.5, _0x1b79a8 * 290, _0x1b79a8 * 241, _0x1b79a8 * 290);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 252, _0x1b79a8 * 290, _0x1b79a8 * 257, _0x1b79a8 * 281, _0x1b79a8 * 262, _0x1b79a8 * 271);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 261.5, _0x1b79a8 * 267, _0x1b79a8 * 261.5, _0x1b79a8 * 267, _0x1b79a8 * 261, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 260, _0x1b79a8 * 249, _0x1b79a8 * 251, _0x1b79a8 * 242, _0x1b79a8 * 241, _0x1b79a8 * 241);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240, _0x1b79a8 * 240);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200, _0x1b79a8 * 240, _0x1b79a8 * 200, _0x1b79a8 * 240, _0x1b79a8 * 160, _0x1b79a8 * 240);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 145, _0x1b79a8 * 244, _0x1b79a8 * 142, _0x1b79a8 * 250, _0x1b79a8 * 139, _0x1b79a8 * 264);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[4], _0x26f292[4], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 130, _0x1b79a8 * 264);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 132, _0x1b79a8 * 244, _0x1b79a8 * 144, _0x1b79a8 * 235, _0x1b79a8 * 157, _0x1b79a8 * 232);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 245, _0x1b79a8 * 232, _0x1b79a8 * 201, _0x1b79a8 * 232, _0x1b79a8 * 245, _0x1b79a8 * 232);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 264, _0x1b79a8 * 235, _0x1b79a8 * 269, _0x1b79a8 * 251, _0x1b79a8 * 270, _0x1b79a8 * 264);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 272, _0x1b79a8 * 291, _0x1b79a8 * 248, _0x1b79a8 * 299, _0x1b79a8 * 242, _0x1b79a8 * 299);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200, _0x1b79a8 * 299, _0x1b79a8 * 200, _0x1b79a8 * 299, _0x1b79a8 * 158, _0x1b79a8 * 299);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 139, _0x1b79a8 * 298, _0x1b79a8 * 130, _0x1b79a8 * 276, _0x1b79a8 * 130, _0x1b79a8 * 265);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[4], _0x1b79a8 * 6);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 140, _0x1b79a8 * 265.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 141, _0x1b79a8 * 250.33333587646484, _0x1b79a8 * 148, _0x1b79a8 * 244.33333587646484, _0x1b79a8 * 160, _0x1b79a8 * 241.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200, _0x1b79a8 * 241.33333587646484, _0x1b79a8 * 200, _0x1b79a8 * 241.33333587646484, _0x1b79a8 * 240, _0x1b79a8 * 241.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 256, _0x1b79a8 * 243.33333587646484, _0x1b79a8 * 260, _0x1b79a8 * 255.33333587646484, _0x1b79a8 * 260, _0x1b79a8 * 265.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 261, _0x1b79a8 * 281.33333587646484, _0x1b79a8 * 247, _0x1b79a8 * 289.33333587646484, _0x1b79a8 * 240, _0x1b79a8 * 289.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 161, _0x1b79a8 * 289.33333587646484, _0x1b79a8 * 200.5, _0x1b79a8 * 289.33333587646484, _0x1b79a8 * 161, _0x1b79a8 * 289.33333587646484);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 149, _0x1b79a8 * 288.33333587646484, _0x1b79a8 * 142, _0x1b79a8 * 278.33333587646484, _0x1b79a8 * 140, _0x1b79a8 * 266.33333587646484);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[4], _0x1b79a8 * 6);
  _0x477d9b.globalAlpha = 0.5;
  _0x477d9b.scale(1, 1);
  _0x477d9b.translate(_0x1b79a8 * 105, _0x1b79a8 * 155);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 59.27557373046875, _0x1b79a8 * 20.406280517578125);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 74.27557373046875, _0x1b79a8 * 5.406280517578125, _0x1b79a8 * 90.27557373046875, _0x1b79a8 * 6.406280517578125, _0x1b79a8 * 99.27557373046875, _0x1b79a8 * 5.406280517578125);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 120.27557373046875, _0x1b79a8 * 5.406280517578125, _0x1b79a8 * 126.27557373046875, _0x1b79a8 * 10.406280517578125, _0x1b79a8 * 136.27557373046875, _0x1b79a8 * 20.406280517578125);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 157.77557373046875, _0x1b79a8 * 37.906280517578125, _0x1b79a8 * 157.77557373046875, _0x1b79a8 * 37.906280517578125, _0x1b79a8 * 179.27557373046875, _0x1b79a8 * 55.406280517578125);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 190.27557373046875, _0x1b79a8 * 63.406280517578125, _0x1b79a8 * 192.27557373046875, _0x1b79a8 * 77.40628051757812, _0x1b79a8 * 189.27557373046875, _0x1b79a8 * 91.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 183.27557373046875, _0x1b79a8 * 108.40628051757812, _0x1b79a8 * 176.27557373046875, _0x1b79a8 * 110.40628051757812, _0x1b79a8 * 169.27557373046875, _0x1b79a8 * 118.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 152.27557373046875, _0x1b79a8 * 133.40628051757812, _0x1b79a8 * 152.27557373046875, _0x1b79a8 * 133.40628051757812, _0x1b79a8 * 135.27557373046875, _0x1b79a8 * 148.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 87.27557373046875, _0x1b79a8 * 143.40628051757812, _0x1b79a8 * 87.27557373046875, _0x1b79a8 * 143.40628051757812, _0x1b79a8 * 39.27557373046875, _0x1b79a8 * 138.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 26.77557373046875, _0x1b79a8 * 123.40628051757812, _0x1b79a8 * 26.77557373046875, _0x1b79a8 * 123.40628051757812, _0x1b79a8 * 14.27557373046875, _0x1b79a8 * 108.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 2.27557373046875, _0x1b79a8 * 95.40628051757812, _0x1b79a8 * 2.27557373046875, _0x1b79a8 * 92.40628051757812, _0x1b79a8 * 3.27557373046875, _0x1b79a8 * 83.40628051757812);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 4.27557373046875, _0x1b79a8 * 63.406280517578125, _0x1b79a8 * 12.27557373046875, _0x1b79a8 * 60.406280517578125, _0x1b79a8 * 24.27557373046875, _0x1b79a8 * 40.406280517578125);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[5], _0x26f292[5], _0x1b79a8 * 4);
  _0x477d9b.globalAlpha = 1;
  _0x477d9b.translate(_0x1b79a8 * -110, _0x1b79a8 * -155);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 104, _0x1b79a8 * 237.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 110, _0x1b79a8 * 237.8000030517578, _0x1b79a8 * 110, _0x1b79a8 * 237.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 237.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 241.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 241.8000030517578, _0x1b79a8 * 116, _0x1b79a8 * 245.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 245.3000030517578, _0x1b79a8 * 115, _0x1b79a8 * 245.3000030517578, _0x1b79a8 * 114, _0x1b79a8 * 244.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 109.5, _0x1b79a8 * 244.8000030517578, _0x1b79a8 * 109.5, _0x1b79a8 * 244.8000030517578, _0x1b79a8 * 105, _0x1b79a8 * 244.8000030517578);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 115, _0x1b79a8 * 211.20000457763672);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 106, _0x1b79a8 * 216.20000457763672, _0x1b79a8 * 101, _0x1b79a8 * 234.20000457763672, _0x1b79a8 * 102, _0x1b79a8 * 241.20000457763672);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 102, _0x1b79a8 * 260.2000045776367, _0x1b79a8 * 115, _0x1b79a8 * 269.2000045776367, _0x1b79a8 * 115, _0x1b79a8 * 269.2000045776367);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 265.2000045776367, _0x1b79a8 * 115.5, _0x1b79a8 * 265.2000045776367, _0x1b79a8 * 116, _0x1b79a8 * 261.2000045776367);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 112, _0x1b79a8 * 264, _0x1b79a8 * 108, _0x1b79a8 * 254, _0x1b79a8 * 106, _0x1b79a8 * 242);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 105, _0x1b79a8 * 232, _0x1b79a8 * 110, _0x1b79a8 * 222, _0x1b79a8 * 115, _0x1b79a8 * 218);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 116, _0x1b79a8 * 216.75, _0x1b79a8 * 115.5, _0x1b79a8 * 217.375, _0x1b79a8 * 116, _0x1b79a8 * 216.75);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 120, _0x1b79a8 * 207);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 206, _0x1b79a8 * 114, _0x1b79a8 * 209, _0x1b79a8 * 114, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 114, _0x1b79a8 * 268, _0x1b79a8 * 114, _0x1b79a8 * 241, _0x1b79a8 * 114, _0x1b79a8 * 271);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 115, _0x1b79a8 * 276, _0x1b79a8 * 118, _0x1b79a8 * 276, _0x1b79a8 * 120, _0x1b79a8 * 276);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 122, _0x1b79a8 * 273, _0x1b79a8 * 120.5, _0x1b79a8 * 274.5, _0x1b79a8 * 121, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 241, _0x1b79a8 * 121, _0x1b79a8 * 241, _0x1b79a8 * 121, _0x1b79a8 * 209);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 284, _0x1b79a8 * 238);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 289.5, _0x1b79a8 * 238, _0x1b79a8 * 289.5, _0x1b79a8 * 238, _0x1b79a8 * 295, _0x1b79a8 * 238);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 295, _0x1b79a8 * 241.5, _0x1b79a8 * 295, _0x1b79a8 * 241.5, _0x1b79a8 * 295, _0x1b79a8 * 245);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 289.5, _0x1b79a8 * 245, _0x1b79a8 * 289.5, _0x1b79a8 * 245, _0x1b79a8 * 284, _0x1b79a8 * 245);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 283, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 293, _0x1b79a8 * 216, _0x1b79a8 * 297, _0x1b79a8 * 231, _0x1b79a8 * 297, _0x1b79a8 * 241);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 298, _0x1b79a8 * 254, _0x1b79a8 * 290, _0x1b79a8 * 265, _0x1b79a8 * 284, _0x1b79a8 * 269);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 283, _0x1b79a8 * 266, _0x1b79a8 * 283.5, _0x1b79a8 * 266, _0x1b79a8 * 283, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 290, _0x1b79a8 * 260, _0x1b79a8 * 292, _0x1b79a8 * 251, _0x1b79a8 * 293, _0x1b79a8 * 242);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 292, _0x1b79a8 * 223, _0x1b79a8 * 289, _0x1b79a8 * 224, _0x1b79a8 * 284, _0x1b79a8 * 218);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 280, _0x1b79a8 * 206);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 284, _0x1b79a8 * 206, _0x1b79a8 * 285, _0x1b79a8 * 208, _0x1b79a8 * 285, _0x1b79a8 * 211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 285, _0x1b79a8 * 241.5, _0x1b79a8 * 285, _0x1b79a8 * 241.5, _0x1b79a8 * 285, _0x1b79a8 * 272);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 284, _0x1b79a8 * 275, _0x1b79a8 * 284, _0x1b79a8 * 275, _0x1b79a8 * 280, _0x1b79a8 * 275);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 279, _0x1b79a8 * 273.5, _0x1b79a8 * 279, _0x1b79a8 * 273.5, _0x1b79a8 * 278, _0x1b79a8 * 272);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 278, _0x1b79a8 * 240.5, _0x1b79a8 * 278, _0x1b79a8 * 240.5, _0x1b79a8 * 278, _0x1b79a8 * 209);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 138, _0x1b79a8 * 298.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 141, _0x1b79a8 * 311.40000915527344, _0x1b79a8 * 151, _0x1b79a8 * 314.40000915527344, _0x1b79a8 * 162, _0x1b79a8 * 316.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 224, _0x1b79a8 * 316.40000915527344, _0x1b79a8 * 200, _0x1b79a8 * 315.90000915527344, _0x1b79a8 * 238, _0x1b79a8 * 315.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 254, _0x1b79a8 * 316.40000915527344, _0x1b79a8 * 261, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 264, _0x1b79a8 * 298.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 255, _0x1b79a8 * 304.40000915527344, _0x1b79a8 * 250, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 244, _0x1b79a8 * 306.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 201, _0x1b79a8 * 306.90000915527344, _0x1b79a8 * 201, _0x1b79a8 * 306.90000915527344, _0x1b79a8 * 158, _0x1b79a8 * 307.40000915527344);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 150, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 148, _0x1b79a8 * 306.40000915527344, _0x1b79a8 * 139, _0x1b79a8 * 300.40000915527344);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 161, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 130, _0x1b79a8 * 175.5999984741211, _0x1b79a8 * 123, _0x1b79a8 * 190.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 205.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 277.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 242.5999984741211, _0x1b79a8 * 122, _0x1b79a8 * 279.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 128, _0x1b79a8 * 297.5999984741211, _0x1b79a8 * 137, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 143, _0x1b79a8 * 300.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 163, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 163, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 183, _0x1b79a8 * 301.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 150, _0x1b79a8 * 300.5999984741211, _0x1b79a8 * 135, _0x1b79a8 * 290.5999984741211, _0x1b79a8 * 134, _0x1b79a8 * 267.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 133, _0x1b79a8 * 245.5999984741211, _0x1b79a8 * 146, _0x1b79a8 * 235.5999984741211, _0x1b79a8 * 164, _0x1b79a8 * 235.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 206, _0x1b79a8 * 236.0999984741211, _0x1b79a8 * 206, _0x1b79a8 * 236.0999984741211, _0x1b79a8 * 248, _0x1b79a8 * 236.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 266, _0x1b79a8 * 243.5999984741211, _0x1b79a8 * 268, _0x1b79a8 * 259.5999984741211, _0x1b79a8 * 267, _0x1b79a8 * 266.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 266, _0x1b79a8 * 288.5999984741211, _0x1b79a8 * 251, _0x1b79a8 * 294.5999984741211, _0x1b79a8 * 244, _0x1b79a8 * 297.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 228.5, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 228.5, _0x1b79a8 * 299.5999984741211, _0x1b79a8 * 213, _0x1b79a8 * 301.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 236, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 236, _0x1b79a8 * 301.0999984741211, _0x1b79a8 * 259, _0x1b79a8 * 300.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 272, _0x1b79a8 * 295.5999984741211, _0x1b79a8 * 277, _0x1b79a8 * 288.5999984741211, _0x1b79a8 * 278, _0x1b79a8 * 271.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 277.5, _0x1b79a8 * 236.5999984741211, _0x1b79a8 * 277.5, _0x1b79a8 * 236.5999984741211, _0x1b79a8 * 277, _0x1b79a8 * 201.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 276, _0x1b79a8 * 186.5999984741211, _0x1b79a8 * 265, _0x1b79a8 * 178.5999984741211, _0x1b79a8 * 254, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 247.5, _0x1b79a8 * 177.5999984741211, _0x1b79a8 * 247.5, _0x1b79a8 * 177.5999984741211, _0x1b79a8 * 241, _0x1b79a8 * 177.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 255, _0x1b79a8 * 202.5999984741211, _0x1b79a8 * 214, _0x1b79a8 * 217.5999984741211, _0x1b79a8 * 201, _0x1b79a8 * 215.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 170, _0x1b79a8 * 215.5999984741211, _0x1b79a8 * 152, _0x1b79a8 * 197.5999984741211, _0x1b79a8 * 161, _0x1b79a8 * 178.5999984741211);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[2], _0x26f292[2], _0x1b79a8 * 4);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 162, _0x1b79a8 * 175.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 153, _0x1b79a8 * 176.0999984741211, _0x1b79a8 * 153, _0x1b79a8 * 176.0999984741211, _0x1b79a8 * 144, _0x1b79a8 * 176.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 125, _0x1b79a8 * 178.5999984741211, _0x1b79a8 * 121, _0x1b79a8 * 196.5999984741211, _0x1b79a8 * 121, _0x1b79a8 * 207.5999984741211);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 121, _0x1b79a8 * 243.20000076293945, _0x1b79a8 * 121, _0x1b79a8 * 243.20000076293945, _0x1b79a8 * 121, _0x1b79a8 * 278.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 126, _0x1b79a8 * 298.8000030517578, _0x1b79a8 * 137, _0x1b79a8 * 300.8000030517578, _0x1b79a8 * 146, _0x1b79a8 * 302.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 302.8000030517578, _0x1b79a8 * 200.5, _0x1b79a8 * 302.8000030517578, _0x1b79a8 * 255, _0x1b79a8 * 302.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 271, _0x1b79a8 * 301.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 288.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 273.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 279, _0x1b79a8 * 236.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 236.8000030517578, _0x1b79a8 * 279, _0x1b79a8 * 199.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 274, _0x1b79a8 * 178.8000030517578, _0x1b79a8 * 263, _0x1b79a8 * 177.8000030517578, _0x1b79a8 * 255, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 248, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 248, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 241, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 240, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 240, _0x1b79a8 * 175.8000030517578, _0x1b79a8 * 239, _0x1b79a8 * 175.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 254, _0x1b79a8 * 200.8000030517578, _0x1b79a8 * 222, _0x1b79a8 * 211.8000030517578, _0x1b79a8 * 202, _0x1b79a8 * 212.8000030517578);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 168, _0x1b79a8 * 213.8000030517578, _0x1b79a8 * 151, _0x1b79a8 * 190.8000030517578, _0x1b79a8 * 163, _0x1b79a8 * 176.8000030517578);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[3], _0x1b79a8 * 6);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 198, _0x1b79a8 * 161.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 198, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 198, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 198, _0x1b79a8 * 212.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 201, _0x1b79a8 * 212.4000015258789, _0x1b79a8 * 201, _0x1b79a8 * 212.4000015258789, _0x1b79a8 * 204, _0x1b79a8 * 212.4000015258789);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 204, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 204, _0x1b79a8 * 186.9000015258789, _0x1b79a8 * 204, _0x1b79a8 * 161.4000015258789);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 161, _0x1b79a8 * 194);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 188, _0x1b79a8 * 169, _0x1b79a8 * 231, _0x1b79a8 * 179, _0x1b79a8 * 241, _0x1b79a8 * 194);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 239.5, _0x1b79a8 * 196, _0x1b79a8 * 239.5, _0x1b79a8 * 196, _0x1b79a8 * 238, _0x1b79a8 * 198);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 221, _0x1b79a8 * 179, _0x1b79a8 * 182, _0x1b79a8 * 182, _0x1b79a8 * 165, _0x1b79a8 * 198);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 157, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 162, _0x1b79a8 * 150.80000019073486, _0x1b79a8 * 241, _0x1b79a8 * 150.80000019073486, _0x1b79a8 * 245, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 242, _0x1b79a8 * 224.80000019073486, _0x1b79a8 * 162, _0x1b79a8 * 228.80000019073486, _0x1b79a8 * 157, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 159, _0x1b79a8 * 188.80000019073486, _0x1b79a8 * 159, _0x1b79a8 * 188.80000019073486, _0x1b79a8 * 161, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 168, _0x1b79a8 * 216.80000019073486, _0x1b79a8 * 231, _0x1b79a8 * 218.80000019073486, _0x1b79a8 * 241, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 236, _0x1b79a8 * 156.80000019073486, _0x1b79a8 * 169, _0x1b79a8 * 152.80000019073486, _0x1b79a8 * 161, _0x1b79a8 * 188.80000019073486);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 156, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 160, _0x1b79a8 * 164, _0x1b79a8 * 183, _0x1b79a8 * 159, _0x1b79a8 * 201, _0x1b79a8 * 158);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 232, _0x1b79a8 * 159, _0x1b79a8 * 244, _0x1b79a8 * 174, _0x1b79a8 * 246, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 245, _0x1b79a8 * 212, _0x1b79a8 * 213, _0x1b79a8 * 219, _0x1b79a8 * 201, _0x1b79a8 * 218);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 181, _0x1b79a8 * 221, _0x1b79a8 * 158, _0x1b79a8 * 207, _0x1b79a8 * 156, _0x1b79a8 * 190);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 162, _0x1b79a8 * 189);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 166, _0x1b79a8 * 170, _0x1b79a8 * 185, _0x1b79a8 * 165, _0x1b79a8 * 201, _0x1b79a8 * 164);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 227, _0x1b79a8 * 165, _0x1b79a8 * 240, _0x1b79a8 * 178, _0x1b79a8 * 239, _0x1b79a8 * 188);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 239, _0x1b79a8 * 204, _0x1b79a8 * 210, _0x1b79a8 * 210, _0x1b79a8 * 201, _0x1b79a8 * 210);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 182, _0x1b79a8 * 211, _0x1b79a8 * 166, _0x1b79a8 * 200, _0x1b79a8 * 162, _0x1b79a8 * 190);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[1], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 131, _0x1b79a8 * 262);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 136, _0x1b79a8 * 241, _0x1b79a8 * 144, _0x1b79a8 * 236, _0x1b79a8 * 158, _0x1b79a8 * 233);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 233, _0x1b79a8 * 229, _0x1b79a8 * 232, _0x1b79a8 * 243, _0x1b79a8 * 233);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 259, _0x1b79a8 * 235, _0x1b79a8 * 267, _0x1b79a8 * 248, _0x1b79a8 * 269, _0x1b79a8 * 260);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 269, _0x1b79a8 * 266.5, _0x1b79a8 * 269, _0x1b79a8 * 266.5, _0x1b79a8 * 269, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 265, _0x1b79a8 * 290, _0x1b79a8 * 251, _0x1b79a8 * 297, _0x1b79a8 * 242, _0x1b79a8 * 298);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 202, _0x1b79a8 * 298, _0x1b79a8 * 202, _0x1b79a8 * 298, _0x1b79a8 * 162, _0x1b79a8 * 298);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 148, _0x1b79a8 * 298, _0x1b79a8 * 136, _0x1b79a8 * 289, _0x1b79a8 * 132, _0x1b79a8 * 273);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 131.5, _0x1b79a8 * 268, _0x1b79a8 * 131.5, _0x1b79a8 * 268, _0x1b79a8 * 131, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 135, _0x1b79a8 * 263, _0x1b79a8 * 135, _0x1b79a8 * 263, _0x1b79a8 * 139, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 139, _0x1b79a8 * 281, _0x1b79a8 * 151, _0x1b79a8 * 287, _0x1b79a8 * 160, _0x1b79a8 * 290);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200.5, _0x1b79a8 * 290, _0x1b79a8 * 200.5, _0x1b79a8 * 290, _0x1b79a8 * 241, _0x1b79a8 * 290);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 252, _0x1b79a8 * 290, _0x1b79a8 * 257, _0x1b79a8 * 281, _0x1b79a8 * 262, _0x1b79a8 * 271);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 261.5, _0x1b79a8 * 267, _0x1b79a8 * 261.5, _0x1b79a8 * 267, _0x1b79a8 * 261, _0x1b79a8 * 263);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 260, _0x1b79a8 * 249, _0x1b79a8 * 251, _0x1b79a8 * 242, _0x1b79a8 * 241, _0x1b79a8 * 241);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240.5, _0x1b79a8 * 240, _0x1b79a8 * 240);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200, _0x1b79a8 * 240, _0x1b79a8 * 200, _0x1b79a8 * 240, _0x1b79a8 * 160, _0x1b79a8 * 240);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 145, _0x1b79a8 * 244, _0x1b79a8 * 142, _0x1b79a8 * 250, _0x1b79a8 * 139, _0x1b79a8 * 264);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, _0x26f292[0], _0x26f292[0], _0x1b79a8 * 2);
  _0x477d9b.beginPath();
  _0x477d9b.lineCap = "round";
  _0x477d9b.lineJoin = "round";
  _0x477d9b.moveTo(_0x1b79a8 * 130, _0x1b79a8 * 264);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 132, _0x1b79a8 * 244, _0x1b79a8 * 144, _0x1b79a8 * 235, _0x1b79a8 * 157, _0x1b79a8 * 232);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 245, _0x1b79a8 * 232, _0x1b79a8 * 201, _0x1b79a8 * 232, _0x1b79a8 * 245, _0x1b79a8 * 232);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 264, _0x1b79a8 * 235, _0x1b79a8 * 269, _0x1b79a8 * 251, _0x1b79a8 * 270, _0x1b79a8 * 264);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 272, _0x1b79a8 * 291, _0x1b79a8 * 248, _0x1b79a8 * 299, _0x1b79a8 * 242, _0x1b79a8 * 299);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 200, _0x1b79a8 * 299, _0x1b79a8 * 200, _0x1b79a8 * 299, _0x1b79a8 * 158, _0x1b79a8 * 299);
  _0x477d9b.bezierCurveTo(_0x1b79a8 * 139, _0x1b79a8 * 298, _0x1b79a8 * 130, _0x1b79a8 * 276, _0x1b79a8 * 130, _0x1b79a8 * 265);
  _0x477d9b.closePath();
  fill_path(_0x477d9b, undefined, _0x26f292[1], _0x1b79a8 * 2);
  return _0x40b351;
}
function create_windmill_chest(_0x50c935, _0x2970a1) {
  var _0x305293 = document.createElement("canvas");
  var _0xdd9fcd = _0x305293.getContext("2d");
  _0x305293.width = _0x50c935 * 243;
  _0x305293.height = _0x50c935 * 172;
  circle(_0xdd9fcd, _0x50c935 * 119.5, _0x50c935 * 140.125, _0x50c935 * 19);
  fill_path(_0xdd9fcd, undefined, _0x2970a1[1], _0x50c935 * 5);
  _0xdd9fcd.beginPath();
  _0xdd9fcd.lineCap = "round";
  _0xdd9fcd.lineJoin = "round";
  _0xdd9fcd.moveTo(_0x50c935 * 36.5, _0x50c935 * 20.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 119.5, _0x50c935 * 20.625, _0x50c935 * 119.5, _0x50c935 * 20.625, _0x50c935 * 202.5, _0x50c935 * 21.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 214.5, _0x50c935 * 22.125, _0x50c935 * 216.5, _0x50c935 * 26.125, _0x50c935 * 217.5, _0x50c935 * 35.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 221, _0x50c935 * 76.125, _0x50c935 * 221, _0x50c935 * 76.125, _0x50c935 * 224.5, _0x50c935 * 117.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 225.5, _0x50c935 * 127.125, _0x50c935 * 221.5, _0x50c935 * 131.125, _0x50c935 * 210.5, _0x50c935 * 132.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 117.5, _0x50c935 * 132.125, _0x50c935 * 117.5, _0x50c935 * 132.125, _0x50c935 * 24.5, _0x50c935 * 132.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 14.5, _0x50c935 * 131.125, _0x50c935 * 13.5, _0x50c935 * 126.125, _0x50c935 * 16.5, _0x50c935 * 111.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 19.5, _0x50c935 * 73.125, _0x50c935 * 19.5, _0x50c935 * 73.125, _0x50c935 * 22.5, _0x50c935 * 35.125);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 23.5, _0x50c935 * 23.125, _0x50c935 * 29.5, _0x50c935 * 21.125, _0x50c935 * 36.5, _0x50c935 * 20.125);
  _0xdd9fcd.closePath();
  fill_path(_0xdd9fcd, _0x2970a1[0], _0x2970a1[1], _0x50c935 * 4);
  _0xdd9fcd.beginPath();
  _0xdd9fcd.lineCap = "round";
  _0xdd9fcd.lineJoin = "round";
  _0xdd9fcd.moveTo(_0x50c935 * 15.5, _0x50c935 * 138.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 120, _0x50c935 * 138.625, _0x50c935 * 120, _0x50c935 * 138.625, _0x50c935 * 224.5, _0x50c935 * 138.625);
  _0xdd9fcd.closePath();
  fill_path(_0xdd9fcd, undefined, _0x2970a1[2], _0x50c935 * 10);
  _0xdd9fcd.beginPath();
  _0xdd9fcd.lineCap = "round";
  _0xdd9fcd.lineJoin = "round";
  _0xdd9fcd.moveTo(_0x50c935 * 13.5, _0x50c935 * 131.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 119.5, _0x50c935 * 131.625, _0x50c935 * 119.5, _0x50c935 * 131.625, _0x50c935 * 225.5, _0x50c935 * 131.625);
  _0xdd9fcd.closePath();
  fill_path(_0xdd9fcd, undefined, _0x2970a1[3], _0x50c935 * 10);
  circle(_0xdd9fcd, _0x50c935 * 119.5, _0x50c935 * 140.125, _0x50c935 * 14.866068747318506);
  fill_path(_0xdd9fcd, _0x2970a1[4], _0x2970a1[5], _0x50c935 * 4);
  _0xdd9fcd.beginPath();
  _0xdd9fcd.lineCap = "round";
  _0xdd9fcd.lineJoin = "round";
  _0xdd9fcd.moveTo(_0x50c935 * 106.5, _0x50c935 * 146.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 116.5, _0x50c935 * 137.625, _0x50c935 * 118.5, _0x50c935 * 136.625, _0x50c935 * 123.5, _0x50c935 * 138.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 131.5, _0x50c935 * 145.625, _0x50c935 * 133.5, _0x50c935 * 148.625, _0x50c935 * 127.5, _0x50c935 * 152.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 115.5, _0x50c935 * 158.625, _0x50c935 * 111.5, _0x50c935 * 153.625, _0x50c935 * 106.5, _0x50c935 * 147.625);
  _0xdd9fcd.closePath();
  fill_path(_0xdd9fcd, _0x2970a1[6], _0x2970a1[7], _0x50c935 * 2);
  _0xdd9fcd.beginPath();
  _0xdd9fcd.lineCap = "round";
  _0xdd9fcd.lineJoin = "round";
  _0xdd9fcd.moveTo(_0x50c935 * 105.5, _0x50c935 * 146.625);
  _0xdd9fcd.bezierCurveTo(_0x50c935 * 116.5, _0x50c935 * 159.625, _0x50c935 * 124.5, _0x50c935 * 156.625, _0x50c935 * 132.5, _0x50c935 * 146.625);
  fill_path(_0xdd9fcd, undefined, _0x2970a1[8], _0x50c935 * 5);
  _0xdd9fcd.save();
  _0xdd9fcd.translate(_0x50c935 * 75.5, _0x50c935 * 80.125);
  round_rect(_0xdd9fcd, _0x50c935 * -39, _0x50c935 * -40, _0x50c935 * 78, _0x50c935 * 78, _0x50c935 * 10);
  _0xdd9fcd.restore();
  fill_path(_0xdd9fcd, _0x2970a1[9]);
  _0xdd9fcd.save();
  _0xdd9fcd.translate(_0x50c935 * 167, _0x50c935 * 80.125);
  round_rect(_0xdd9fcd, _0x50c935 * -38.5, _0x50c935 * -39, _0x50c935 * 78, _0x50c935 * 78, _0x50c935 * 10);
  _0xdd9fcd.restore();
  fill_path(_0xdd9fcd, _0x2970a1[9]);
  return _0x305293;
}
function create_cake(_0x2099b2, _0x514f8d, _0x582a9b) {
  var _0x47cdc3 = document.createElement("canvas");
  var _0xa30e27 = _0x47cdc3.getContext("2d");
  _0x47cdc3.width = _0x2099b2 * 400;
  _0x47cdc3.height = _0x2099b2 * 400;
  _0xa30e27.beginPath();
  _0xa30e27.lineCap = "round";
  _0xa30e27.lineJoin = "round";
  _0xa30e27.moveTo(_0x2099b2 * 96.5, _0x2099b2 * 277.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 197.5, _0x2099b2 * 259.84375, _0x2099b2 * 197.5, _0x2099b2 * 259.84375, _0x2099b2 * 298.5, _0x2099b2 * 242.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 311.5, _0x2099b2 * 231.34375, _0x2099b2 * 307.5, _0x2099b2 * 168.34375, _0x2099b2 * 298.5, _0x2099b2 * 150.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 198, _0x2099b2 * 170.34375, _0x2099b2 * 198, _0x2099b2 * 170.34375, _0x2099b2 * 97.5, _0x2099b2 * 190.34375);
  _0xa30e27.closePath();
  fill_path(_0xa30e27, _0x582a9b[1], _0x582a9b[2], _0x2099b2 * 12);
  _0xa30e27.beginPath();
  _0xa30e27.lineCap = "round";
  _0xa30e27.lineJoin = "round";
  _0xa30e27.moveTo(_0x2099b2 * 98.5, _0x2099b2 * 214.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 199, _0x2099b2 * 196.34375, _0x2099b2 * 199, _0x2099b2 * 196.34375, _0x2099b2 * 299.5, _0x2099b2 * 178.34375);
  _0xa30e27.closePath();
  fill_path(_0xa30e27, undefined, _0x582a9b[2], _0x2099b2 * 12);
  _0xa30e27.beginPath();
  _0xa30e27.lineCap = "round";
  _0xa30e27.lineJoin = "round";
  _0xa30e27.moveTo(_0x2099b2 * 98.5, _0x2099b2 * 247.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 201.5, _0x2099b2 * 229.34375, _0x2099b2 * 201.5, _0x2099b2 * 229.34375, _0x2099b2 * 304.5, _0x2099b2 * 211.34375);
  _0xa30e27.closePath();
  fill_path(_0xa30e27, undefined, _0x582a9b[2], _0x2099b2 * 12);
  _0xa30e27.beginPath();
  _0xa30e27.lineCap = "round";
  _0xa30e27.lineJoin = "round";
  _0xa30e27.moveTo(_0x2099b2 * 97.5, _0x2099b2 * 189.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 97, _0x2099b2 * 199.84375, _0x2099b2 * 97, _0x2099b2 * 199.84375, _0x2099b2 * 96.5, _0x2099b2 * 210.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 110.5, _0x2099b2 * 204.34375, _0x2099b2 * 110.5, _0x2099b2 * 204.34375, _0x2099b2 * 124.5, _0x2099b2 * 198.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 137.5, _0x2099b2 * 203.84375, _0x2099b2 * 137.5, _0x2099b2 * 203.84375, _0x2099b2 * 150.5, _0x2099b2 * 209.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 172, _0x2099b2 * 197.84375, _0x2099b2 * 172, _0x2099b2 * 197.84375, _0x2099b2 * 193.5, _0x2099b2 * 186.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 211.5, _0x2099b2 * 189.84375, _0x2099b2 * 211.5, _0x2099b2 * 189.84375, _0x2099b2 * 229.5, _0x2099b2 * 193.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 240.5, _0x2099b2 * 193.34375, _0x2099b2 * 240.5, _0x2099b2 * 193.34375, _0x2099b2 * 251.5, _0x2099b2 * 193.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 261, _0x2099b2 * 182.84375, _0x2099b2 * 261, _0x2099b2 * 182.84375, _0x2099b2 * 270.5, _0x2099b2 * 172.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 287.5, _0x2099b2 * 169.34375, _0x2099b2 * 287.5, _0x2099b2 * 169.34375, _0x2099b2 * 304.5, _0x2099b2 * 166.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 304.5, _0x2099b2 * 156.34375, _0x2099b2 * 300.5, _0x2099b2 * 145.34375, _0x2099b2 * 298.5, _0x2099b2 * 147.34375);
  _0xa30e27.closePath();
  fill_path(_0xa30e27, _0x582a9b[3], _0x582a9b[4], _0x2099b2 * 12);
  _0xa30e27.beginPath();
  _0xa30e27.lineCap = "round";
  _0xa30e27.lineJoin = "round";
  _0xa30e27.moveTo(_0x2099b2 * 300.5, _0x2099b2 * 147.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 293.5, _0x2099b2 * 121.34375, _0x2099b2 * 278.5, _0x2099b2 * 106.34375, _0x2099b2 * 256.5, _0x2099b2 * 101.34375);
  _0xa30e27.bezierCurveTo(_0x2099b2 * 176.5, _0x2099b2 * 145.34375, _0x2099b2 * 176.5, _0x2099b2 * 145.34375, _0x2099b2 * 96.5, _0x2099b2 * 189.34375);
  _0xa30e27.closePath();
  fill_path(_0xa30e27, _0x582a9b[5], _0x582a9b[6], _0x2099b2 * 12);
  circle(_0xa30e27, _0x2099b2 * 252.5, _0x2099b2 * 129.34375, _0x2099b2 * 18.027756377319946);
  fill_path(_0xa30e27, _0x582a9b[7]);
  circle(_0xa30e27, _0x2099b2 * 248.5, _0x2099b2 * 121.34375, _0x2099b2 * 8.246211251235321);
  fill_path(_0xa30e27, _0x582a9b[8]);
  return _0x47cdc3;
}
function create_fishfood(_0x568b3b, _0x415bb6, _0x290986) {
  var _0xdce38c = document.createElement("canvas");
  var _0x304c9f = _0xdce38c.getContext("2d");
  _0xdce38c.width = _0x568b3b * 400;
  _0xdce38c.height = _0x568b3b * 400;
  _0x304c9f.globalAlpha = _0x415bb6 ? 0.5 : 1;
  _0x304c9f.translate(_0x568b3b * 10, _0x568b3b * 5);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 100.5, _0x568b3b * 126.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 151.5, _0x568b3b * 104.34375, _0x568b3b * 279.5, _0x568b3b * 188.34375, _0x568b3b * 297.5, _0x568b3b * 292.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 222.5, _0x568b3b * 307.34375, _0x568b3b * 106.5, _0x568b3b * 196.34375, _0x568b3b * 100.5, _0x568b3b * 127.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0], _0x290986[0], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 106.5, _0x568b3b * 131.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 140.5, _0x568b3b * 142.34375, _0x568b3b * 225.5, _0x568b3b * 184.34375, _0x568b3b * 290.5, _0x568b3b * 287.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 270.5, _0x568b3b * 188.34375, _0x568b3b * 152.5, _0x568b3b * 118.34375, _0x568b3b * 107.5, _0x568b3b * 131.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0]);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 157.5, _0x568b3b * 137.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 161.5, _0x568b3b * 138.34375, _0x568b3b * 164.5, _0x568b3b * 140.34375, _0x568b3b * 168.5, _0x568b3b * 142.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 165.5, _0x568b3b * 156.34375, _0x568b3b * 141.5, _0x568b3b * 176.34375, _0x568b3b * 126.5, _0x568b3b * 179.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 123.5, _0x568b3b * 173.34375, _0x568b3b * 120.5, _0x568b3b * 169.34375, _0x568b3b * 120.5, _0x568b3b * 169.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 141.5, _0x568b3b * 161.34375, _0x568b3b * 156.5, _0x568b3b * 145.34375, _0x568b3b * 155.5, _0x568b3b * 136.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0]);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 196.5, _0x568b3b * 151.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 211.5, _0x568b3b * 158.34375, _0x568b3b * 224.5, _0x568b3b * 171.34375, _0x568b3b * 229.5, _0x568b3b * 176.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 246.5, _0x568b3b * 163.34375, _0x568b3b * 259.5, _0x568b3b * 166.34375, _0x568b3b * 272.5, _0x568b3b * 168.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 254.5, _0x568b3b * 146.34375, _0x568b3b * 214.5, _0x568b3b * 145.34375, _0x568b3b * 198.5, _0x568b3b * 151.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0], _0x290986[0], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 154.5, _0x568b3b * 222.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 164.5, _0x568b3b * 234.34375, _0x568b3b * 173.5, _0x568b3b * 242.34375, _0x568b3b * 178.5, _0x568b3b * 245.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 174.5, _0x568b3b * 265.34375, _0x568b3b * 180.5, _0x568b3b * 274.34375, _0x568b3b * 186.5, _0x568b3b * 283.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 165.5, _0x568b3b * 277.34375, _0x568b3b * 151.5, _0x568b3b * 245.34375, _0x568b3b * 155.5, _0x568b3b * 224.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0], _0x290986[0], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 279.5, _0x568b3b * 294.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 286.5, _0x568b3b * 285.84375, _0x568b3b * 286.5, _0x568b3b * 285.84375, _0x568b3b * 293.5, _0x568b3b * 277.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 315.5, _0x568b3b * 280.34375, _0x568b3b * 315.5, _0x568b3b * 280.34375, _0x568b3b * 337.5, _0x568b3b * 283.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 340.5, _0x568b3b * 311.34375, _0x568b3b * 317.5, _0x568b3b * 326.34375, _0x568b3b * 307.5, _0x568b3b * 331.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[0], _0x290986[0], _0x568b3b * 12);
  _0x304c9f.globalAlpha = 1;
  _0x304c9f.translate(_0x568b3b * -10, _0x568b3b * -5);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 100.5, _0x568b3b * 126.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 151.5, _0x568b3b * 104.34375, _0x568b3b * 279.5, _0x568b3b * 188.34375, _0x568b3b * 297.5, _0x568b3b * 292.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 222.5, _0x568b3b * 307.34375, _0x568b3b * 106.5, _0x568b3b * 196.34375, _0x568b3b * 100.5, _0x568b3b * 127.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[1], _0x290986[2], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 106.5, _0x568b3b * 131.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 140.5, _0x568b3b * 142.34375, _0x568b3b * 225.5, _0x568b3b * 184.34375, _0x568b3b * 290.5, _0x568b3b * 287.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 270.5, _0x568b3b * 188.34375, _0x568b3b * 152.5, _0x568b3b * 118.34375, _0x568b3b * 107.5, _0x568b3b * 131.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[3]);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 157.5, _0x568b3b * 137.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 161.5, _0x568b3b * 138.34375, _0x568b3b * 164.5, _0x568b3b * 140.34375, _0x568b3b * 168.5, _0x568b3b * 142.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 165.5, _0x568b3b * 156.34375, _0x568b3b * 141.5, _0x568b3b * 176.34375, _0x568b3b * 126.5, _0x568b3b * 179.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 123.5, _0x568b3b * 173.34375, _0x568b3b * 120.5, _0x568b3b * 169.34375, _0x568b3b * 120.5, _0x568b3b * 169.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 141.5, _0x568b3b * 161.34375, _0x568b3b * 156.5, _0x568b3b * 145.34375, _0x568b3b * 155.5, _0x568b3b * 136.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[4]);
  circle(_0x304c9f, _0x568b3b * 125.5, _0x568b3b * 140.34375, _0x568b3b * 11.180339887498949);
  fill_path(_0x304c9f, _0x290986[5]);
  circle(_0x304c9f, _0x568b3b * 122.5, _0x568b3b * 135.34375, _0x568b3b * 5.0990195135927845);
  fill_path(_0x304c9f, _0x290986[6]);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 196.5, _0x568b3b * 151.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 211.5, _0x568b3b * 158.34375, _0x568b3b * 224.5, _0x568b3b * 171.34375, _0x568b3b * 229.5, _0x568b3b * 176.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 246.5, _0x568b3b * 163.34375, _0x568b3b * 259.5, _0x568b3b * 166.34375, _0x568b3b * 272.5, _0x568b3b * 168.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 254.5, _0x568b3b * 146.34375, _0x568b3b * 214.5, _0x568b3b * 145.34375, _0x568b3b * 198.5, _0x568b3b * 151.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[7], _0x290986[8], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 154.5, _0x568b3b * 222.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 164.5, _0x568b3b * 234.34375, _0x568b3b * 173.5, _0x568b3b * 242.34375, _0x568b3b * 178.5, _0x568b3b * 245.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 174.5, _0x568b3b * 265.34375, _0x568b3b * 180.5, _0x568b3b * 274.34375, _0x568b3b * 186.5, _0x568b3b * 283.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 165.5, _0x568b3b * 277.34375, _0x568b3b * 151.5, _0x568b3b * 245.34375, _0x568b3b * 155.5, _0x568b3b * 224.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[7], _0x290986[8], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 279.5, _0x568b3b * 294.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 286.5, _0x568b3b * 285.84375, _0x568b3b * 286.5, _0x568b3b * 285.84375, _0x568b3b * 293.5, _0x568b3b * 277.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 315.5, _0x568b3b * 280.34375, _0x568b3b * 315.5, _0x568b3b * 280.34375, _0x568b3b * 337.5, _0x568b3b * 283.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 340.5, _0x568b3b * 311.34375, _0x568b3b * 317.5, _0x568b3b * 326.34375, _0x568b3b * 307.5, _0x568b3b * 331.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, _0x290986[7], _0x290986[8], _0x568b3b * 12);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 296.5, _0x568b3b * 287.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 311.5, _0x568b3b * 291.34375, _0x568b3b * 311.5, _0x568b3b * 291.34375, _0x568b3b * 326.5, _0x568b3b * 295.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, undefined, _0x290986[9], _0x568b3b * 6);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 294.5, _0x568b3b * 289.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 308.5, _0x568b3b * 297.34375, _0x568b3b * 308.5, _0x568b3b * 297.34375, _0x568b3b * 322.5, _0x568b3b * 305.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, undefined, _0x290986[9], _0x568b3b * 6);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 294.5, _0x568b3b * 291.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 304, _0x568b3b * 303.34375, _0x568b3b * 304, _0x568b3b * 303.34375, _0x568b3b * 313.5, _0x568b3b * 315.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, undefined, _0x290986[9], _0x568b3b * 6);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 226.5, _0x568b3b * 161.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 230.5, _0x568b3b * 160.34375, _0x568b3b * 236.5, _0x568b3b * 158.34375, _0x568b3b * 238.5, _0x568b3b * 161.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 238.5, _0x568b3b * 157.34375, _0x568b3b * 228.5, _0x568b3b * 159.34375, _0x568b3b * 227.5, _0x568b3b * 161.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, undefined, _0x290986[9], _0x568b3b * 4);
  _0x304c9f.beginPath();
  _0x304c9f.lineCap = "round";
  _0x304c9f.lineJoin = "round";
  _0x304c9f.moveTo(_0x568b3b * 167.5, _0x568b3b * 248.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 165.5, _0x568b3b * 251.34375, _0x568b3b * 168.5, _0x568b3b * 256.34375, _0x568b3b * 168.5, _0x568b3b * 253.34375);
  _0x304c9f.bezierCurveTo(_0x568b3b * 166.5, _0x568b3b * 252.34375, _0x568b3b * 168.5, _0x568b3b * 246.34375, _0x568b3b * 166.5, _0x568b3b * 247.34375);
  _0x304c9f.closePath();
  fill_path(_0x304c9f, undefined, _0x290986[9], _0x568b3b * 3);
  return _0xdce38c;
}
function create_fishfood_cooked(_0x309665, _0x946733, _0x1e8182) {
  var _0x3b2fdf = document.createElement("canvas");
  var _0x2e39b3 = _0x3b2fdf.getContext("2d");
  _0x3b2fdf.width = _0x309665 * 309;
  _0x3b2fdf.height = _0x309665 * 287;
  _0x2e39b3.globalAlpha = _0x946733 ? 0.5 : 1;
  _0x2e39b3.translate(_0x309665 * 10, _0x309665 * 5);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 34.5, _0x309665 * 38.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 91.5, _0x309665 * 30.53125, _0x309665 * 138.5, _0x309665 * 68.53125, _0x309665 * 169.5, _0x309665 * 93.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 208.5, _0x309665 * 128.53125, _0x309665 * 226.5, _0x309665 * 157.53125, _0x309665 * 233.5, _0x309665 * 209.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 195.5, _0x309665 * 218.53125, _0x309665 * 138.5, _0x309665 * 191.53125, _0x309665 * 105.5, _0x309665 * 157.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 54.5, _0x309665 * 112.53125, _0x309665 * 41.5, _0x309665 * 80.53125, _0x309665 * 33.5, _0x309665 * 38.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[0], _0x1e8182[0], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 143.5, _0x309665 * 74.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 164.5, _0x309665 * 73.53125, _0x309665 * 159, _0x309665 * 74.53125, _0x309665 * 174.5, _0x309665 * 74.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 186, _0x309665 * 86.53125, _0x309665 * 186, _0x309665 * 86.53125, _0x309665 * 197.5, _0x309665 * 98.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 186, _0x309665 * 97.03125, _0x309665 * 186, _0x309665 * 97.03125, _0x309665 * 174.5, _0x309665 * 95.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[0], _0x1e8182[0], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 87.5, _0x309665 * 142.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 92, _0x309665 * 160.03125, _0x309665 * 92, _0x309665 * 160.03125, _0x309665 * 96.5, _0x309665 * 177.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 108, _0x309665 * 181.53125, _0x309665 * 108, _0x309665 * 181.53125, _0x309665 * 119.5, _0x309665 * 185.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 116.5, _0x309665 * 175.53125, _0x309665 * 116.5, _0x309665 * 175.53125, _0x309665 * 113.5, _0x309665 * 165.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[0], _0x1e8182[0], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 236.5, _0x309665 * 189.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 274.5, _0x309665 * 197.53125, _0x309665 * 255.5, _0x309665 * 194.03125, _0x309665 * 274.5, _0x309665 * 198.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 272.5, _0x309665 * 236.53125, _0x309665 * 261.5, _0x309665 * 237.53125, _0x309665 * 242.5, _0x309665 * 248.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 230.5, _0x309665 * 231.03125, _0x309665 * 230.5, _0x309665 * 231.03125, _0x309665 * 218.5, _0x309665 * 213.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[0], _0x1e8182[0], _0x309665 * 10);
  _0x2e39b3.globalAlpha = 1;
  _0x2e39b3.translate(_0x309665 * -10, _0x309665 * -5);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 34.5, _0x309665 * 38.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 91.5, _0x309665 * 30.53125, _0x309665 * 138.5, _0x309665 * 68.53125, _0x309665 * 169.5, _0x309665 * 93.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 208.5, _0x309665 * 128.53125, _0x309665 * 226.5, _0x309665 * 157.53125, _0x309665 * 233.5, _0x309665 * 209.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 195.5, _0x309665 * 218.53125, _0x309665 * 138.5, _0x309665 * 191.53125, _0x309665 * 105.5, _0x309665 * 157.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 54.5, _0x309665 * 112.53125, _0x309665 * 41.5, _0x309665 * 80.53125, _0x309665 * 33.5, _0x309665 * 38.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 143.5, _0x309665 * 74.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 164.5, _0x309665 * 73.53125, _0x309665 * 159, _0x309665 * 74.53125, _0x309665 * 174.5, _0x309665 * 74.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 186, _0x309665 * 86.53125, _0x309665 * 186, _0x309665 * 86.53125, _0x309665 * 197.5, _0x309665 * 98.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 186, _0x309665 * 97.03125, _0x309665 * 186, _0x309665 * 97.03125, _0x309665 * 174.5, _0x309665 * 95.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 87.5, _0x309665 * 142.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 92, _0x309665 * 160.03125, _0x309665 * 92, _0x309665 * 160.03125, _0x309665 * 96.5, _0x309665 * 177.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 108, _0x309665 * 181.53125, _0x309665 * 108, _0x309665 * 181.53125, _0x309665 * 119.5, _0x309665 * 185.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 116.5, _0x309665 * 175.53125, _0x309665 * 116.5, _0x309665 * 175.53125, _0x309665 * 113.5, _0x309665 * 165.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 236.5, _0x309665 * 189.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 274.5, _0x309665 * 197.53125, _0x309665 * 255.5, _0x309665 * 194.03125, _0x309665 * 274.5, _0x309665 * 198.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 272.5, _0x309665 * 236.53125, _0x309665 * 261.5, _0x309665 * 237.53125, _0x309665 * 242.5, _0x309665 * 248.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 230.5, _0x309665 * 231.03125, _0x309665 * 230.5, _0x309665 * 231.03125, _0x309665 * 218.5, _0x309665 * 213.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 10);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 109.5, _0x309665 * 51.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 107.5, _0x309665 * 92.53125, _0x309665 * 91.5, _0x309665 * 95.53125, _0x309665 * 59.5, _0x309665 * 101.53125);
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 7);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 72.5, _0x309665 * 51.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 71, _0x309665 * 64.53125, _0x309665 * 69.5, _0x309665 * 76.53125, _0x309665 * 69.5, _0x309665 * 77.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 7);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 84.5, _0x309665 * 63.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 70.5, _0x309665 * 65.03125, _0x309665 * 70.5, _0x309665 * 65.03125, _0x309665 * 56.5, _0x309665 * 66.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 7);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 125.5, _0x309665 * 84.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 125.5, _0x309665 * 110.03125, _0x309665 * 125.5, _0x309665 * 110.03125, _0x309665 * 125.5, _0x309665 * 135.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 7);
  _0x2e39b3.beginPath();
  _0x2e39b3.lineCap = "round";
  _0x2e39b3.lineJoin = "round";
  _0x2e39b3.moveTo(_0x309665 * 149.5, _0x309665 * 108.53125);
  _0x2e39b3.bezierCurveTo(_0x309665 * 150, _0x309665 * 137.03125, _0x309665 * 150, _0x309665 * 137.03125, _0x309665 * 150.5, _0x309665 * 165.53125);
  _0x2e39b3.closePath();
  fill_path(_0x2e39b3, _0x1e8182[1], _0x1e8182[2], _0x309665 * 7);
  return _0x3b2fdf;
}
function create_wall(_0x3605b2, _0x31128c, _0x580edf) {
  var _0x2a7980 = document.createElement("canvas");
  var _0x2b1cc7 = _0x2a7980.getContext("2d");
  var _0x256d5c = _0x3605b2 * 130;
  var _0x2f87d4 = _0x3605b2 * 142;
  var _0x1643d5 = _0x256d5c / 2;
  var _0x73c048 = _0x2f87d4 / 2;
  _0x2a7980.width = _0x256d5c;
  _0x2a7980.height = _0x2f87d4;
  _0x2b1cc7.translate(_0x1643d5, _0x73c048 + _0x3605b2 * 7);
  _0x2b1cc7.globalAlpha = _0x31128c ? 0.5 : 1;
  circle(_0x2b1cc7, 0, 0, _0x3605b2 * 60);
  fill_path(_0x2b1cc7, _0x580edf[0]);
  _0x2b1cc7.translate(0, _0x3605b2 * -7);
  _0x2b1cc7.globalAlpha = 1;
  circle(_0x2b1cc7, 0, 0, _0x3605b2 * 60, 0);
  fill_path(_0x2b1cc7, _0x580edf[1], _0x580edf[2], _0x3605b2 * 4);
  circle(_0x2b1cc7, 0, 0, _0x3605b2 * 40);
  fill_path(_0x2b1cc7, _0x580edf[3]);
  circle(_0x2b1cc7, 0, 0, _0x3605b2 * 25);
  fill_path(_0x2b1cc7, _0x580edf[4], _0x580edf[5], _0x3605b2 * 8);
  return _0x2a7980;
}
function create_delay_wall(_0x592aa7, _0x90880e) {
  var _0x44ce00 = document.createElement("canvas");
  var _0x312c57 = _0x44ce00.getContext("2d");
  var _0x5da24b = _0x592aa7 * 130;
  var _0x37fd58 = _0x592aa7 * 142;
  var _0x1a524e = _0x5da24b / 2;
  var _0x32a8c6 = _0x37fd58 / 2;
  _0x44ce00.width = _0x5da24b;
  _0x44ce00.height = _0x37fd58;
  circle(_0x312c57, _0x1a524e, _0x32a8c6, _0x592aa7 * 40, 0);
  fill_path(_0x312c57, undefined, _0x90880e[0], _0x592aa7 * 7);
  circle(_0x312c57, _0x1a524e, _0x32a8c6, _0x592aa7 * 30, 0);
  fill_path(_0x312c57, undefined, _0x90880e[0], _0x592aa7 * 7);
  circle(_0x312c57, _0x1a524e, _0x32a8c6, _0x592aa7 * 20, 0);
  fill_path(_0x312c57, _0x90880e[0]);
  return _0x44ce00;
}
function create_wall_diamond(_0x3a53a0, _0x1e1bc8, _0xd6beb3) {
  var _0x4e14fc = document.createElement("canvas");
  var _0x28325f = _0x4e14fc.getContext("2d");
  _0x4e14fc.width = _0x3a53a0 * 130;
  _0x4e14fc.height = _0x3a53a0 * 142;
  _0x28325f.globalAlpha = _0x1e1bc8 ? 0.5 : 1;
  _0x28325f.save();
  _0x28325f.translate(_0x3a53a0 * 65, _0x3a53a0 * 80);
  _0x28325f.rotate(0.2);
  round_regular_polygon(_0x28325f, 9, _0x3a53a0 * 60, _0x3a53a0 * 10);
  _0x28325f.restore();
  fill_path(_0x28325f, _0xd6beb3[0]);
  _0x28325f.globalAlpha = 1;
  _0x28325f.save();
  _0x28325f.translate(_0x3a53a0 * 65, _0x3a53a0 * 71);
  _0x28325f.rotate(0.2);
  round_regular_polygon(_0x28325f, 9, _0x3a53a0 * 60, _0x3a53a0 * 10);
  fill_path(_0x28325f, _0xd6beb3[1], _0xd6beb3[2], 4);
  _0x28325f.rotate(-0.32);
  round_regular_polygon(_0x28325f, 9, _0x3a53a0 * 38, _0x3a53a0 * 10);
  fill_path(_0x28325f, _0xd6beb3[3], _0xd6beb3[4], 4);
  _0x28325f.rotate(0.68);
  round_regular_polygon(_0x28325f, 9, _0x3a53a0 * 20, _0x3a53a0 * 8);
  fill_path(_0x28325f, _0xd6beb3[5], _0xd6beb3[6], 6);
  _0x28325f.restore();
  return _0x4e14fc;
}
function create_palm(_0x384229, _0x1502cf) {
  var _0x4e0375 = document.createElement("canvas");
  var _0x5ed697 = _0x4e0375.getContext("2d");
  _0x4e0375.width = _0x384229 * 372;
  _0x4e0375.height = _0x384229 * 375;
  _0x5ed697.globalAlpha = 0.5;
  _0x5ed697.translate(_0x384229 * 15, _0x384229 * 15);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 313.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 308.0000305175781, _0x384229 * 130.58523559570312, _0x384229 * 279.0000305175781, _0x384229 * 158.58523559570312, _0x384229 * 254.00003051757812, _0x384229 * 175.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 287.0000305175781, _0x384229 * 182.58523559570312, _0x384229 * 274.0000305175781, _0x384229 * 181.08523559570312, _0x384229 * 294.0000305175781, _0x384229 * 186.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.0000305175781, _0x384229 * 205.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 315.0000305175781, _0x384229 * 196.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 350.0000305175781, _0x384229 * 219.58523559570312, _0x384229 * 343.0000305175781, _0x384229 * 221.58523559570312, _0x384229 * 351.0000305175781, _0x384229 * 230.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 296.0000305175781, _0x384229 * 260.5852355957031, _0x384229 * 264.0000305175781, _0x384229 * 256.5852355957031, _0x384229 * 220.00003051757812, _0x384229 * 236.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 233.00003051757812, _0x384229 * 266.5852355957031, _0x384229 * 232.00003051757812, _0x384229 * 279.5852355957031, _0x384229 * 231.00003051757812, _0x384229 * 295.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 213.00003051757812, _0x384229 * 299.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 226.00003051757812, _0x384229 * 316.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 223.00003051757812, _0x384229 * 344.5852355957031, _0x384229 * 216.00003051757812, _0x384229 * 350.5852355957031, _0x384229 * 209.00003051757812, _0x384229 * 363.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 154.00003051757812, _0x384229 * 318.5852355957031, _0x384229 * 156.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 160.00003051757812, _0x384229 * 238.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 135.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 125.00003051757812, _0x384229 * 267.5852355957031, _0x384229 * 112.00003051757812, _0x384229 * 272.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 97.00003051757812, _0x384229 * 260.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 89.00003051757812, _0x384229 * 281.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 66.00003051757812, _0x384229 * 288.5852355957031, _0x384229 * 59.000030517578125, _0x384229 * 288.5852355957031, _0x384229 * 39.000030517578125, _0x384229 * 285.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 56.000030517578125, _0x384229 * 216.58523559570312, _0x384229 * 91.00003051757812, _0x384229 * 204.58523559570312, _0x384229 * 129.00003051757812, _0x384229 * 189.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 90.00003051757812, _0x384229 * 176.58523559570312, _0x384229 * 89.00003051757812, _0x384229 * 173.58523559570312, _0x384229 * 79.00003051757812, _0x384229 * 166.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 85.00003051757812, _0x384229 * 143.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 66.00003051757812, _0x384229 * 151.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 44.000030517578125, _0x384229 * 133.58523559570312, _0x384229 * 41.000030517578125, _0x384229 * 124.58523559570312, _0x384229 * 34.000030517578125, _0x384229 * 102.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 100.00003051757812, _0x384229 * 81.58523559570312, _0x384229 * 134.00003051757812, _0x384229 * 118.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 128.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 144.00003051757812, _0x384229 * 102.58523559570312, _0x384229 * 147.00003051757812, _0x384229 * 90.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 80.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 169.00003051757812, _0x384229 * 77.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 157.00003051757812, _0x384229 * 67.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 162.00003051757812, _0x384229 * 42.585235595703125, _0x384229 * 169.00003051757812, _0x384229 * 29.585235595703125, _0x384229 * 182.00003051757812, _0x384229 * 14.585235595703125);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.00003051757812, _0x384229 * 48.585235595703125, _0x384229 * 222.00003051757812, _0x384229 * 92.58523559570312, _0x384229 * 218.00003051757812, _0x384229 * 112.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 239.00003051757812, _0x384229 * 95.58523559570312, _0x384229 * 242.00003051757812, _0x384229 * 97.58523559570312, _0x384229 * 249.00003051757812, _0x384229 * 94.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 261.0000305175781, _0x384229 * 111.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 262.0000305175781, _0x384229 * 87.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 282.0000305175781, _0x384229 * 77.58523559570312, _0x384229 * 301.0000305175781, _0x384229 * 74.58523559570312, _0x384229 * 314.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[0]);
  _0x5ed697.globalAlpha = 1;
  _0x5ed697.translate(_0x384229 * -15, _0x384229 * -15);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 313.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 308.0000305175781, _0x384229 * 130.58523559570312, _0x384229 * 279.0000305175781, _0x384229 * 158.58523559570312, _0x384229 * 254.00003051757812, _0x384229 * 175.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 287.0000305175781, _0x384229 * 182.58523559570312, _0x384229 * 274.0000305175781, _0x384229 * 181.08523559570312, _0x384229 * 294.0000305175781, _0x384229 * 186.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.0000305175781, _0x384229 * 205.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 315.0000305175781, _0x384229 * 196.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 350.0000305175781, _0x384229 * 219.58523559570312, _0x384229 * 343.0000305175781, _0x384229 * 221.58523559570312, _0x384229 * 351.0000305175781, _0x384229 * 230.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 296.0000305175781, _0x384229 * 260.5852355957031, _0x384229 * 264.0000305175781, _0x384229 * 256.5852355957031, _0x384229 * 220.00003051757812, _0x384229 * 236.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 233.00003051757812, _0x384229 * 266.5852355957031, _0x384229 * 232.00003051757812, _0x384229 * 279.5852355957031, _0x384229 * 231.00003051757812, _0x384229 * 295.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 213.00003051757812, _0x384229 * 299.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 226.00003051757812, _0x384229 * 316.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 223.00003051757812, _0x384229 * 344.5852355957031, _0x384229 * 216.00003051757812, _0x384229 * 350.5852355957031, _0x384229 * 209.00003051757812, _0x384229 * 363.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 154.00003051757812, _0x384229 * 318.5852355957031, _0x384229 * 156.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 160.00003051757812, _0x384229 * 238.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 135.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 125.00003051757812, _0x384229 * 267.5852355957031, _0x384229 * 112.00003051757812, _0x384229 * 272.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 97.00003051757812, _0x384229 * 260.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 89.00003051757812, _0x384229 * 281.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 66.00003051757812, _0x384229 * 288.5852355957031, _0x384229 * 59.000030517578125, _0x384229 * 288.5852355957031, _0x384229 * 39.000030517578125, _0x384229 * 285.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 56.000030517578125, _0x384229 * 216.58523559570312, _0x384229 * 91.00003051757812, _0x384229 * 204.58523559570312, _0x384229 * 129.00003051757812, _0x384229 * 189.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 90.00003051757812, _0x384229 * 176.58523559570312, _0x384229 * 89.00003051757812, _0x384229 * 173.58523559570312, _0x384229 * 79.00003051757812, _0x384229 * 166.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 85.00003051757812, _0x384229 * 143.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 66.00003051757812, _0x384229 * 151.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 44.000030517578125, _0x384229 * 133.58523559570312, _0x384229 * 41.000030517578125, _0x384229 * 124.58523559570312, _0x384229 * 34.000030517578125, _0x384229 * 102.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 100.00003051757812, _0x384229 * 81.58523559570312, _0x384229 * 134.00003051757812, _0x384229 * 118.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 128.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 144.00003051757812, _0x384229 * 102.58523559570312, _0x384229 * 147.00003051757812, _0x384229 * 90.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 80.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 169.00003051757812, _0x384229 * 77.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 157.00003051757812, _0x384229 * 67.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 162.00003051757812, _0x384229 * 42.585235595703125, _0x384229 * 169.00003051757812, _0x384229 * 29.585235595703125, _0x384229 * 182.00003051757812, _0x384229 * 14.585235595703125);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.00003051757812, _0x384229 * 48.585235595703125, _0x384229 * 222.00003051757812, _0x384229 * 92.58523559570312, _0x384229 * 218.00003051757812, _0x384229 * 112.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 239.00003051757812, _0x384229 * 95.58523559570312, _0x384229 * 242.00003051757812, _0x384229 * 97.58523559570312, _0x384229 * 249.00003051757812, _0x384229 * 94.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 261.0000305175781, _0x384229 * 111.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 262.0000305175781, _0x384229 * 87.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 282.0000305175781, _0x384229 * 77.58523559570312, _0x384229 * 301.0000305175781, _0x384229 * 74.58523559570312, _0x384229 * 314.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[1], _0x1502cf[2], _0x384229 * 4);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 186.00003051757812, _0x384229 * 192.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 185.00003051757812, _0x384229 * 66.94886779785156, _0x384229 * 184.50003051757812, _0x384229 * 104.94886779785156, _0x384229 * 183.00003051757812, _0x384229 * 16.948867797851562);
  _0x5ed697.bezierCurveTo(_0x384229 * 216.00003051757812, _0x384229 * 47.94886779785156, _0x384229 * 219.00003051757812, _0x384229 * 80.94886779785156, _0x384229 * 218.00003051757812, _0x384229 * 113.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 209.00003051757812, _0x384229 * 165.94886779785156, _0x384229 * 200.00003051757812, _0x384229 * 176.94886779785156, _0x384229 * 189.00003051757812, _0x384229 * 192.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 190.00003051757812, _0x384229 * 191.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 207.00003051757812, _0x384229 * 348.94886779785156, _0x384229 * 205.00003051757812, _0x384229 * 323.94886779785156, _0x384229 * 209.00003051757812, _0x384229 * 358.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 171.00003051757812, _0x384229 * 334.94886779785156, _0x384229 * 167.00003051757812, _0x384229 * 302.94886779785156, _0x384229 * 161.00003051757812, _0x384229 * 268.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 160.00003051757812, _0x384229 * 218.94886779785156, _0x384229 * 181.00003051757812, _0x384229 * 191.94886779785156, _0x384229 * 189.00003051757812, _0x384229 * 186.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 194.00003051757812, _0x384229 * 195.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 116.00003051757812, _0x384229 * 150.94886779785156, _0x384229 * 116.00003051757812, _0x384229 * 150.94886779785156, _0x384229 * 38.000030517578125, _0x384229 * 105.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 67.00003051757812, _0x384229 * 90.94886779785156, _0x384229 * 96.00003051757812, _0x384229 * 99.94886779785156, _0x384229 * 123.00003051757812, _0x384229 * 111.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 183.00003051757812, _0x384229 * 152.94886779785156, _0x384229 * 179.00003051757812, _0x384229 * 180.94886779785156, _0x384229 * 193.00003051757812, _0x384229 * 194.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 189.00003051757812, _0x384229 * 190.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 250.00003051757812, _0x384229 * 133.94886779785156, _0x384229 * 311.0000305175781, _0x384229 * 78.94886779785156, _0x384229 * 311.0000305175781, _0x384229 * 76.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 306.0000305175781, _0x384229 * 127.94886779785156, _0x384229 * 283.0000305175781, _0x384229 * 148.94886779785156, _0x384229 * 261.0000305175781, _0x384229 * 166.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 220.00003051757812, _0x384229 * 197.94886779785156, _0x384229 * 191.00003051757812, _0x384229 * 194.94886779785156, _0x384229 * 189.00003051757812, _0x384229 * 195.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 189.00003051757812, _0x384229 * 194.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 268.5000305175781, _0x384229 * 211.94886779785156, _0x384229 * 268.5000305175781, _0x384229 * 211.94886779785156, _0x384229 * 348.0000305175781, _0x384229 * 228.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 316.0000305175781, _0x384229 * 247.94886779785156, _0x384229 * 298.0000305175781, _0x384229 * 256.94886779785156, _0x384229 * 250.00003051757812, _0x384229 * 246.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 197.00003051757812, _0x384229 * 229.94886779785156, _0x384229 * 189.00003051757812, _0x384229 * 202.94886779785156, _0x384229 * 188.00003051757812, _0x384229 * 199.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 192.00003051757812, _0x384229 * 191.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 116.50003051757812, _0x384229 * 238.44886779785156, _0x384229 * 116.50003051757812, _0x384229 * 238.44886779785156, _0x384229 * 41.000030517578125, _0x384229 * 284.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 49.000030517578125, _0x384229 * 252.94886779785156, _0x384229 * 56.000030517578125, _0x384229 * 242.94886779785156, _0x384229 * 80.00003051757812, _0x384229 * 215.94886779785156);
  _0x5ed697.bezierCurveTo(_0x384229 * 125.00003051757812, _0x384229 * 181.94886779785156, _0x384229 * 174.00003051757812, _0x384229 * 183.94886779785156, _0x384229 * 192.00003051757812, _0x384229 * 191.94886779785156);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, _0x1502cf[3], _0x1502cf[3], _0x384229 * 2);
  _0x5ed697.beginPath();
  _0x5ed697.lineCap = "round";
  _0x5ed697.lineJoin = "round";
  _0x5ed697.moveTo(_0x384229 * 313.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 308.0000305175781, _0x384229 * 130.58523559570312, _0x384229 * 279.0000305175781, _0x384229 * 158.58523559570312, _0x384229 * 254.00003051757812, _0x384229 * 175.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 287.0000305175781, _0x384229 * 182.58523559570312, _0x384229 * 274.0000305175781, _0x384229 * 181.08523559570312, _0x384229 * 294.0000305175781, _0x384229 * 186.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.5000305175781, _0x384229 * 196.08523559570312, _0x384229 * 293.0000305175781, _0x384229 * 205.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 304.0000305175781, _0x384229 * 201.08523559570312, _0x384229 * 315.0000305175781, _0x384229 * 196.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 350.0000305175781, _0x384229 * 219.58523559570312, _0x384229 * 343.0000305175781, _0x384229 * 221.58523559570312, _0x384229 * 351.0000305175781, _0x384229 * 230.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 296.0000305175781, _0x384229 * 260.5852355957031, _0x384229 * 264.0000305175781, _0x384229 * 256.5852355957031, _0x384229 * 220.00003051757812, _0x384229 * 236.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 233.00003051757812, _0x384229 * 266.5852355957031, _0x384229 * 232.00003051757812, _0x384229 * 279.5852355957031, _0x384229 * 231.00003051757812, _0x384229 * 295.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 222.00003051757812, _0x384229 * 297.5852355957031, _0x384229 * 213.00003051757812, _0x384229 * 299.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 219.50003051757812, _0x384229 * 308.0852355957031, _0x384229 * 226.00003051757812, _0x384229 * 316.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 223.00003051757812, _0x384229 * 344.5852355957031, _0x384229 * 216.00003051757812, _0x384229 * 350.5852355957031, _0x384229 * 209.00003051757812, _0x384229 * 363.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 154.00003051757812, _0x384229 * 318.5852355957031, _0x384229 * 156.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 160.00003051757812, _0x384229 * 238.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 135.00003051757812, _0x384229 * 268.5852355957031, _0x384229 * 125.00003051757812, _0x384229 * 267.5852355957031, _0x384229 * 112.00003051757812, _0x384229 * 272.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 104.50003051757812, _0x384229 * 266.5852355957031, _0x384229 * 97.00003051757812, _0x384229 * 260.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 93.00003051757812, _0x384229 * 271.0852355957031, _0x384229 * 89.00003051757812, _0x384229 * 281.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 66.00003051757812, _0x384229 * 288.5852355957031, _0x384229 * 59.000030517578125, _0x384229 * 288.5852355957031, _0x384229 * 39.000030517578125, _0x384229 * 285.5852355957031);
  _0x5ed697.bezierCurveTo(_0x384229 * 56.000030517578125, _0x384229 * 216.58523559570312, _0x384229 * 91.00003051757812, _0x384229 * 204.58523559570312, _0x384229 * 129.00003051757812, _0x384229 * 189.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 90.00003051757812, _0x384229 * 176.58523559570312, _0x384229 * 89.00003051757812, _0x384229 * 173.58523559570312, _0x384229 * 79.00003051757812, _0x384229 * 166.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 82.00003051757812, _0x384229 * 155.08523559570312, _0x384229 * 85.00003051757812, _0x384229 * 143.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 75.50003051757812, _0x384229 * 147.58523559570312, _0x384229 * 66.00003051757812, _0x384229 * 151.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 44.000030517578125, _0x384229 * 133.58523559570312, _0x384229 * 41.000030517578125, _0x384229 * 124.58523559570312, _0x384229 * 34.000030517578125, _0x384229 * 102.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 100.00003051757812, _0x384229 * 81.58523559570312, _0x384229 * 134.00003051757812, _0x384229 * 118.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 128.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 144.00003051757812, _0x384229 * 102.58523559570312, _0x384229 * 147.00003051757812, _0x384229 * 90.58523559570312, _0x384229 * 150.00003051757812, _0x384229 * 80.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 159.50003051757812, _0x384229 * 79.08523559570312, _0x384229 * 169.00003051757812, _0x384229 * 77.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 163.00003051757812, _0x384229 * 72.58523559570312, _0x384229 * 157.00003051757812, _0x384229 * 67.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 162.00003051757812, _0x384229 * 42.585235595703125, _0x384229 * 169.00003051757812, _0x384229 * 29.585235595703125, _0x384229 * 182.00003051757812, _0x384229 * 14.585235595703125);
  _0x5ed697.bezierCurveTo(_0x384229 * 219.00003051757812, _0x384229 * 48.585235595703125, _0x384229 * 222.00003051757812, _0x384229 * 92.58523559570312, _0x384229 * 218.00003051757812, _0x384229 * 112.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 239.00003051757812, _0x384229 * 95.58523559570312, _0x384229 * 242.00003051757812, _0x384229 * 97.58523559570312, _0x384229 * 249.00003051757812, _0x384229 * 94.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 255.00003051757812, _0x384229 * 103.08523559570312, _0x384229 * 261.0000305175781, _0x384229 * 111.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 261.5000305175781, _0x384229 * 99.58523559570312, _0x384229 * 262.0000305175781, _0x384229 * 87.58523559570312);
  _0x5ed697.bezierCurveTo(_0x384229 * 282.0000305175781, _0x384229 * 77.58523559570312, _0x384229 * 301.0000305175781, _0x384229 * 74.58523559570312, _0x384229 * 314.0000305175781, _0x384229 * 76.58523559570312);
  _0x5ed697.closePath();
  fill_path(_0x5ed697, undefined, _0x1502cf[2], _0x384229 * 4);
  return _0x4e0375;
}
function create_special_fur(_0x2a82ef, _0x407be6, _0x153a80) {
  var _0x26051d = document.createElement("canvas");
  var _0x2a655c = _0x26051d.getContext("2d");
  _0x26051d.width = _0x2a82ef * 248;
  _0x26051d.height = _0x2a82ef * 128;
  _0x2a655c.beginPath();
  _0x2a655c.lineCap = "round";
  _0x2a655c.lineJoin = "round";
  _0x2a655c.moveTo(_0x2a82ef * 137, _0x2a82ef * 7);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 169, _0x2a82ef * 14, _0x2a82ef * 212, _0x2a82ef * 9, _0x2a82ef * 241, _0x2a82ef * 5);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 211, _0x2a82ef * 63, _0x2a82ef * 158, _0x2a82ef * 92, _0x2a82ef * 103, _0x2a82ef * 109);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 73, _0x2a82ef * 126, _0x2a82ef * 54, _0x2a82ef * 124, _0x2a82ef * 6, _0x2a82ef * 99);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 82, _0x2a82ef * 63, _0x2a82ef * 113, _0x2a82ef * 35, _0x2a82ef * 137, _0x2a82ef * 8);
  _0x2a655c.closePath();
  fill_path(_0x2a655c, _0x153a80[0], _0x153a80[1], _0x2a82ef * 14);
  _0x2a655c.beginPath();
  _0x2a655c.lineCap = "round";
  _0x2a655c.lineJoin = "round";
  _0x2a655c.moveTo(_0x2a82ef * 73, _0x2a82ef * 124);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 111, _0x2a82ef * 126, _0x2a82ef * 162, _0x2a82ef * 97, _0x2a82ef * 203, _0x2a82ef * 61);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 156, _0x2a82ef * 98, _0x2a82ef * 131, _0x2a82ef * 106, _0x2a82ef * 105, _0x2a82ef * 109);
  _0x2a655c.bezierCurveTo(_0x2a82ef * 99, _0x2a82ef * 121, _0x2a82ef * 87, _0x2a82ef * 124, _0x2a82ef * 72, _0x2a82ef * 124);
  _0x2a655c.closePath();
  fill_path(_0x2a655c, _0x153a80[2], _0x153a80[3], _0x2a82ef * 1);
  return _0x26051d;
}
function create_wall_stone(_0x1f8f59, _0x4f17b7, _0x2d83d9) {
  var _0x39391b = document.createElement("canvas");
  var _0x3cf680 = _0x39391b.getContext("2d");
  _0x39391b.width = _0x1f8f59 * 130;
  _0x39391b.height = _0x1f8f59 * 148;
  _0x3cf680.globalAlpha = _0x4f17b7 ? 0.5 : 1;
  _0x3cf680.save();
  _0x3cf680.translate(_0x1f8f59 * 65, _0x1f8f59 * 85);
  _0x3cf680.rotate(1.4);
  round_regular_polygon(_0x3cf680, 7, _0x1f8f59 * 60, _0x1f8f59 * 10);
  _0x3cf680.restore();
  fill_path(_0x3cf680, _0x2d83d9[0]);
  _0x3cf680.globalAlpha = 1;
  _0x3cf680.save();
  _0x3cf680.translate(_0x1f8f59 * 65, _0x1f8f59 * 74);
  _0x3cf680.rotate(1.4);
  round_regular_polygon(_0x3cf680, 7, _0x1f8f59 * 60, _0x1f8f59 * 10);
  fill_path(_0x3cf680, _0x2d83d9[1], _0x2d83d9[2], 4);
  _0x3cf680.rotate(0.64);
  round_regular_polygon(_0x3cf680, 7, _0x1f8f59 * 40, _0x1f8f59 * 10);
  fill_path(_0x3cf680, _0x2d83d9[3], _0x2d83d9[4], 4);
  _0x3cf680.rotate(0.12);
  round_regular_polygon(_0x3cf680, 7, _0x1f8f59 * 23, _0x1f8f59 * 5);
  _0x3cf680.restore();
  fill_path(_0x3cf680, _0x2d83d9[5]);
  return _0x39391b;
}
function create_wall_gold(_0x52475c, _0x1a9029, _0x3b6885) {
  var _0x2c6e17 = document.createElement("canvas");
  var _0x4f9a02 = _0x2c6e17.getContext("2d");
  _0x2c6e17.width = _0x52475c * 125;
  _0x2c6e17.height = _0x52475c * 139;
  _0x4f9a02.globalAlpha = _0x1a9029 ? 0.5 : 1;
  _0x4f9a02.save();
  _0x4f9a02.translate(_0x52475c * 63, _0x52475c * 79);
  _0x4f9a02.rotate(1);
  round_regular_polygon(_0x4f9a02, 8, _0x52475c * 60, _0x52475c * 10);
  fill_path(_0x4f9a02, _0x3b6885[0]);
  _0x4f9a02.restore();
  _0x4f9a02.globalAlpha = 1;
  _0x4f9a02.save();
  _0x4f9a02.translate(_0x52475c * 63, _0x52475c * 69);
  _0x4f9a02.rotate(1);
  round_regular_polygon(_0x4f9a02, 8, _0x52475c * 60, _0x52475c * 10);
  fill_path(_0x4f9a02, _0x3b6885[1], _0x3b6885[2], 4);
  _0x4f9a02.rotate(0.56);
  round_regular_polygon(_0x4f9a02, 8, _0x52475c * 40, _0x52475c * 10);
  fill_path(_0x4f9a02, _0x3b6885[3], _0x3b6885[4], 4);
  _0x4f9a02.rotate(0.28);
  round_regular_polygon(_0x4f9a02, 8, _0x52475c * 28, _0x52475c * 8);
  fill_path(_0x4f9a02, _0x3b6885[5]);
  _0x4f9a02.restore();
  return _0x2c6e17;
}
function create_door_wood(_0xb3c9f8, _0x12aa91, _0x2ba005) {
  var _0xb9ef5f = document.createElement("canvas");
  var _0x1fab7 = _0xb9ef5f.getContext("2d");
  _0xb9ef5f.width = _0xb3c9f8 * 90;
  _0xb9ef5f.height = _0xb3c9f8 * 101;
  _0x1fab7.translate(_0xb3c9f8 * 0, _0xb3c9f8 * 5);
  if (i === 0) {
    _0x1fab7.globalAlpha = _0x12aa91 ? 0.5 : 1;
    circle(_0x1fab7, _0xb3c9f8 * 44, _0xb3c9f8 * 55, _0xb3c9f8 * 41);
    fill_path(_0x1fab7, _0x2ba005[0]);
  }
  _0x1fab7.globalAlpha = 1;
  circle(_0x1fab7, _0xb3c9f8 * 44, _0xb3c9f8 * 45, _0xb3c9f8 * 41);
  fill_path(_0x1fab7, _0x2ba005[1], _0x2ba005[2], _0xb3c9f8 * 4);
  circle(_0x1fab7, _0xb3c9f8 * 44, _0xb3c9f8 * 45, _0xb3c9f8 * 31);
  fill_path(_0x1fab7, _0x2ba005[3]);
  _0x1fab7.save();
  _0x1fab7.translate(_0xb3c9f8 * 45, _0xb3c9f8 * 45);
  round_rect(_0x1fab7, _0xb3c9f8 * -9, _0xb3c9f8 * -25.5, _0xb3c9f8 * 18, _0xb3c9f8 * 51, _0xb3c9f8 * 30);
  _0x1fab7.restore();
  fill_path(_0x1fab7, _0x2ba005[4], _0x2ba005[4], _0xb3c9f8 * 2);
  _0x1fab7.save();
  _0x1fab7.translate(_0xb3c9f8 * 45, _0xb3c9f8 * 45);
  round_rect(_0x1fab7, _0xb3c9f8 * -26, _0xb3c9f8 * -9, _0xb3c9f8 * 52, _0xb3c9f8 * 18, _0xb3c9f8 * 30);
  _0x1fab7.restore();
  fill_path(_0x1fab7, _0x2ba005[4], _0x2ba005[4], _0xb3c9f8 * 2);
  circle(_0x1fab7, _0xb3c9f8 * 45, _0xb3c9f8 * 29, _0xb3c9f8 * 7);
  fill_path(_0x1fab7, _0x2ba005[5]);
  circle(_0x1fab7, _0xb3c9f8 * 45, _0xb3c9f8 * 61, _0xb3c9f8 * 7);
  fill_path(_0x1fab7, _0x2ba005[5]);
  circle(_0x1fab7, _0xb3c9f8 * 28, _0xb3c9f8 * 45, _0xb3c9f8 * 7);
  fill_path(_0x1fab7, _0x2ba005[5]);
  circle(_0x1fab7, _0xb3c9f8 * 62, _0xb3c9f8 * 45, _0xb3c9f8 * 7);
  fill_path(_0x1fab7, _0x2ba005[5]);
  return _0xb9ef5f;
}
function create_door_stone(_0x4ec6f9, _0x555edd, _0x490dd4) {
  var _0x50305c = document.createElement("canvas");
  var _0x403ca3 = _0x50305c.getContext("2d");
  _0x50305c.width = _0x4ec6f9 * 90;
  _0x50305c.height = _0x4ec6f9 * 98;
  _0x403ca3.translate(0, _0x4ec6f9 * 4);
  if (i === 0) {
    _0x403ca3.globalAlpha = _0x555edd ? 0.5 : 1;
    _0x403ca3.save();
    _0x403ca3.translate(_0x4ec6f9 * 44, _0x4ec6f9 * 50);
    _0x403ca3.rotate(1.4);
    round_regular_polygon(_0x403ca3, 7, _0x4ec6f9 * 41, _0x4ec6f9 * 10);
    _0x403ca3.restore();
    fill_path(_0x403ca3, _0x490dd4[0]);
  }
  _0x403ca3.globalAlpha = 1;
  _0x403ca3.save();
  _0x403ca3.translate(_0x4ec6f9 * 44, _0x4ec6f9 * 44);
  _0x403ca3.rotate(1.4);
  round_regular_polygon(_0x403ca3, 7, _0x4ec6f9 * 41, _0x4ec6f9 * 10);
  fill_path(_0x403ca3, _0x490dd4[1], _0x490dd4[2], _0x4ec6f9 * 4);
  round_regular_polygon(_0x403ca3, 7, _0x4ec6f9 * 35, _0x4ec6f9 * 10);
  fill_path(_0x403ca3, _0x490dd4[3], _0x490dd4[4], _0x4ec6f9 * 4);
  round_regular_polygon(_0x403ca3, 7, _0x4ec6f9 * 23, _0x4ec6f9 * 5);
  _0x403ca3.restore();
  fill_path(_0x403ca3, _0x490dd4[5]);
  _0x403ca3.save();
  _0x403ca3.translate(_0x4ec6f9 * 45, _0x4ec6f9 * 45);
  _0x403ca3.rotate(0);
  round_rect(_0x403ca3, _0x4ec6f9 * -9, _0x4ec6f9 * -25.5, _0x4ec6f9 * 18, _0x4ec6f9 * 51, _0x4ec6f9 * 30);
  _0x403ca3.restore();
  fill_path(_0x403ca3, _0x490dd4[4], _0x490dd4[4], _0x4ec6f9 * 2);
  _0x403ca3.save();
  _0x403ca3.translate(_0x4ec6f9 * 45, _0x4ec6f9 * 45);
  _0x403ca3.rotate(0);
  round_rect(_0x403ca3, _0x4ec6f9 * -26, _0x4ec6f9 * -9, _0x4ec6f9 * 52, _0x4ec6f9 * 18, _0x4ec6f9 * 30);
  _0x403ca3.restore();
  fill_path(_0x403ca3, _0x490dd4[4], _0x490dd4[4], _0x4ec6f9 * 2);
  circle(_0x403ca3, _0x4ec6f9 * 45, _0x4ec6f9 * 29, _0x4ec6f9 * 7);
  fill_path(_0x403ca3, _0x490dd4[5]);
  circle(_0x403ca3, _0x4ec6f9 * 45, _0x4ec6f9 * 61, _0x4ec6f9 * 7);
  fill_path(_0x403ca3, _0x490dd4[5]);
  circle(_0x403ca3, _0x4ec6f9 * 28, _0x4ec6f9 * 45, _0x4ec6f9 * 7);
  fill_path(_0x403ca3, _0x490dd4[5]);
  circle(_0x403ca3, _0x4ec6f9 * 62, _0x4ec6f9 * 45, _0x4ec6f9 * 7);
  fill_path(_0x403ca3, _0x490dd4[5]);
  return _0x50305c;
}
function create_door_gold(_0x3ddd53, _0x3ce0ae, _0x479da9) {
  var _0x22d05a = document.createElement("canvas");
  var _0x36d74f = _0x22d05a.getContext("2d");
  _0x22d05a.width = _0x3ddd53 * 90;
  _0x22d05a.height = _0x3ddd53 * 98;
  _0x36d74f.translate(0, _0x3ddd53 * 4);
  if (i === 0) {
    _0x36d74f.globalAlpha = _0x3ce0ae ? 0.5 : 1;
    _0x36d74f.save();
    _0x36d74f.translate(_0x3ddd53 * 44, _0x3ddd53 * 50);
    _0x36d74f.rotate(1);
    round_regular_polygon(_0x36d74f, 8, _0x3ddd53 * 41, _0x3ddd53 * 10);
    fill_path(_0x36d74f, _0x479da9[0]);
    _0x36d74f.restore();
  }
  _0x36d74f.globalAlpha = 1;
  _0x36d74f.save();
  _0x36d74f.translate(_0x3ddd53 * 44, _0x3ddd53 * 44);
  _0x36d74f.rotate(1);
  round_regular_polygon(_0x36d74f, 8, _0x3ddd53 * 41, _0x3ddd53 * 10);
  fill_path(_0x36d74f, _0x479da9[1], _0x479da9[2], _0x3ddd53 * 4);
  _0x36d74f.rotate(0.56);
  round_regular_polygon(_0x36d74f, 8, _0x3ddd53 * 33, _0x3ddd53 * 10);
  fill_path(_0x36d74f, _0x479da9[3], _0x479da9[4], _0x3ddd53 * 4);
  _0x36d74f.rotate(0.28);
  round_regular_polygon(_0x36d74f, 8, _0x3ddd53 * 24, _0x3ddd53 * 8);
  fill_path(_0x36d74f, _0x479da9[5]);
  _0x36d74f.restore();
  _0x36d74f.save();
  _0x36d74f.translate(_0x3ddd53 * 45, _0x3ddd53 * 45);
  _0x36d74f.rotate(0);
  round_rect(_0x36d74f, _0x3ddd53 * -9, _0x3ddd53 * -25.5, _0x3ddd53 * 18, _0x3ddd53 * 51, _0x3ddd53 * 30);
  _0x36d74f.restore();
  fill_path(_0x36d74f, _0x479da9[4], _0x479da9[4], _0x3ddd53 * 2);
  _0x36d74f.save();
  _0x36d74f.translate(_0x3ddd53 * 45, _0x3ddd53 * 45);
  _0x36d74f.rotate(0);
  round_rect(_0x36d74f, _0x3ddd53 * -26, _0x3ddd53 * -9, _0x3ddd53 * 52, _0x3ddd53 * 18, _0x3ddd53 * 30);
  _0x36d74f.restore();
  fill_path(_0x36d74f, _0x479da9[4], _0x479da9[4], _0x3ddd53 * 2);
  circle(_0x36d74f, _0x3ddd53 * 45, _0x3ddd53 * 29, _0x3ddd53 * 7);
  fill_path(_0x36d74f, _0x479da9[5]);
  circle(_0x36d74f, _0x3ddd53 * 45, _0x3ddd53 * 61, _0x3ddd53 * 7);
  fill_path(_0x36d74f, _0x479da9[5]);
  circle(_0x36d74f, _0x3ddd53 * 28, _0x3ddd53 * 45, _0x3ddd53 * 7);
  fill_path(_0x36d74f, _0x479da9[5]);
  circle(_0x36d74f, _0x3ddd53 * 62, _0x3ddd53 * 45, _0x3ddd53 * 7);
  fill_path(_0x36d74f, _0x479da9[5]);
  return _0x22d05a;
}
function create_furnace_on(_0x544411, _0xdb774d, _0x194431) {
  var _0x5c7bb0 = document.createElement("canvas");
  var _0x244183 = _0x5c7bb0.getContext("2d");
  _0x5c7bb0.width = _0x544411 * 300;
  _0x5c7bb0.height = _0x544411 * 300;
  _0x244183.globalAlpha = _0xdb774d ? 0.5 : 1;
  _0x244183.save();
  _0x244183.translate(_0x544411 * 150, _0x544411 * 160);
  _0x244183.rotate(6.28);
  round_regular_polygon(_0x244183, 6, _0x544411 * 146, _0x544411 * 30);
  _0x244183.restore();
  fill_path(_0x244183, _0x194431[0]);
  _0x244183.globalAlpha = 1;
  _0x244183.save();
  _0x244183.translate(_0x544411 * 150, _0x544411 * 150);
  _0x244183.rotate(6.28);
  round_regular_polygon(_0x244183, 6, _0x544411 * 146, _0x544411 * 30);
  _0x244183.restore();
  fill_path(_0x244183, _0x194431[1], _0x194431[2], _0x544411 * 8);
  _0x244183.save();
  _0x244183.translate(_0x544411 * 150, _0x544411 * 150);
  _0x244183.rotate(0);
  round_regular_polygon(_0x244183, 6, _0x544411 * 105, _0x544411 * 30);
  _0x244183.restore();
  fill_path(_0x244183, _0x194431[3], _0x194431[3], _0x544411 * 8);
  _0x244183.save();
  _0x244183.translate(_0x544411 * 150, _0x544411 * 150);
  _0x244183.rotate(0);
  round_regular_polygon(_0x244183, 6, _0x544411 * 66, _0x544411 * 30);
  _0x244183.restore();
  fill_path(_0x244183, _0x194431[4], _0x194431[2], _0x544411 * 8);
  _0x244183.save();
  _0x244183.translate(_0x544411 * 150, _0x544411 * 150);
  _0x244183.rotate(0);
  round_regular_polygon(_0x244183, 6, _0x544411 * 31, _0x544411 * 30);
  _0x244183.restore();
  fill_path(_0x244183, _0x194431[5], _0x194431[6], _0x544411 * 8);
  _0x244183.beginPath();
  _0x244183.lineCap = "round";
  _0x244183.lineJoin = "round";
  _0x244183.moveTo(_0x544411 * 150, _0x544411 * 207);
  _0x244183.bezierCurveTo(_0x544411 * 150, _0x544411 * 151, _0x544411 * 150, _0x544411 * 101, _0x544411 * 150, _0x544411 * 94);
  _0x244183.closePath();
  fill_path(_0x244183, undefined, _0x194431[2], _0x544411 * 8);
  _0x244183.beginPath();
  _0x244183.lineCap = "round";
  _0x244183.lineJoin = "round";
  _0x244183.moveTo(_0x544411 * 118, _0x544411 * 100);
  _0x244183.bezierCurveTo(_0x544411 * 118, _0x544411 * 205, _0x544411 * 118, _0x544411 * 207, _0x544411 * 118, _0x544411 * 200);
  _0x244183.closePath();
  fill_path(_0x244183, undefined, _0x194431[2], _0x544411 * 8);
  _0x244183.beginPath();
  _0x244183.lineCap = "round";
  _0x244183.lineJoin = "round";
  _0x244183.moveTo(_0x544411 * 183, _0x544411 * 100);
  _0x244183.bezierCurveTo(_0x544411 * 183, _0x544411 * 203, _0x544411 * 183, _0x544411 * 203, _0x544411 * 183, _0x544411 * 200);
  _0x244183.closePath();
  fill_path(_0x244183, undefined, _0x194431[2], _0x544411 * 8);
  return _0x5c7bb0;
}
function create_furnace_off(_0x419bb7, _0x484b5a, _0xafd947) {
  var _0x4e209b = document.createElement("canvas");
  var _0x509fb1 = _0x4e209b.getContext("2d");
  _0x4e209b.width = _0x419bb7 * 300;
  _0x4e209b.height = _0x419bb7 * 300;
  _0x509fb1.globalAlpha = _0x484b5a ? 0.5 : 1;
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 150, _0x419bb7 * 160);
  _0x509fb1.rotate(6.28);
  round_regular_polygon(_0x509fb1, 6, _0x419bb7 * 146, _0x419bb7 * 30);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[0]);
  _0x509fb1.globalAlpha = 1;
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 150, _0x419bb7 * 150);
  _0x509fb1.rotate(6.28);
  round_regular_polygon(_0x509fb1, 6, _0x419bb7 * 146, _0x419bb7 * 30);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[1], _0xafd947[2], _0x419bb7 * 8);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 150, _0x419bb7 * 150);
  _0x509fb1.rotate(0);
  round_regular_polygon(_0x509fb1, 6, _0x419bb7 * 105, _0x419bb7 * 30);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[3], _0xafd947[3], _0x419bb7 * 8);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 150, _0x419bb7 * 150);
  _0x509fb1.rotate(0);
  round_regular_polygon(_0x509fb1, 6, _0x419bb7 * 66, _0x419bb7 * 30);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[4], _0xafd947[2], _0x419bb7 * 8);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 131, _0x419bb7 * 116);
  round_regular_polygon(_0x509fb1, 7, _0x419bb7 * 17, _0x419bb7 * 8);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[6]);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 163, _0x419bb7 * 168);
  round_regular_polygon(_0x509fb1, 7, _0x419bb7 * 25, _0x419bb7 * 8);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[6]);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 117, _0x419bb7 * 151);
  round_regular_polygon(_0x509fb1, 7, _0x419bb7 * 11, _0x419bb7 * 8);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[6]);
  _0x509fb1.save();
  _0x509fb1.translate(_0x419bb7 * 167, _0x419bb7 * 122);
  round_regular_polygon(_0x509fb1, 7, _0x419bb7 * 12, _0x419bb7 * 8);
  _0x509fb1.restore();
  fill_path(_0x509fb1, _0xafd947[6]);
  _0x509fb1.beginPath();
  _0x509fb1.lineCap = "round";
  _0x509fb1.lineJoin = "round";
  _0x509fb1.moveTo(_0x419bb7 * 150, _0x419bb7 * 207);
  _0x509fb1.bezierCurveTo(_0x419bb7 * 150, _0x419bb7 * 151, _0x419bb7 * 150, _0x419bb7 * 101, _0x419bb7 * 150, _0x419bb7 * 94);
  _0x509fb1.closePath();
  fill_path(_0x509fb1, undefined, _0xafd947[2], _0x419bb7 * 8);
  _0x509fb1.beginPath();
  _0x509fb1.lineCap = "round";
  _0x509fb1.lineJoin = "round";
  _0x509fb1.moveTo(_0x419bb7 * 118, _0x419bb7 * 100);
  _0x509fb1.bezierCurveTo(_0x419bb7 * 118, _0x419bb7 * 205, _0x419bb7 * 118, _0x419bb7 * 207, _0x419bb7 * 118, _0x419bb7 * 200);
  _0x509fb1.closePath();
  fill_path(_0x509fb1, undefined, _0xafd947[2], _0x419bb7 * 8);
  _0x509fb1.beginPath();
  _0x509fb1.lineCap = "round";
  _0x509fb1.lineJoin = "round";
  _0x509fb1.moveTo(_0x419bb7 * 183, _0x419bb7 * 100);
  _0x509fb1.bezierCurveTo(_0x419bb7 * 183, _0x419bb7 * 203, _0x419bb7 * 183, _0x419bb7 * 203, _0x419bb7 * 183, _0x419bb7 * 200);
  _0x509fb1.closePath();
  fill_path(_0x509fb1, undefined, _0xafd947[2], _0x419bb7 * 8);
  return _0x4e209b;
}
function create_furnace_slot(_0x33283d, _0x3def10, _0x54ab5a) {
  var _0x30d3b1 = document.createElement("canvas");
  var _0x223246 = _0x30d3b1.getContext("2d");
  _0x30d3b1.width = _0x33283d * 118;
  _0x30d3b1.height = _0x33283d * 129;
  _0x223246.save();
  _0x223246.translate(_0x33283d * 90, _0x33283d * 90);
  round_rect(_0x223246, _0x33283d * -86.5, _0x33283d * -86, _0x33283d * 110, _0x33283d * 110, _0x33283d * 15);
  _0x223246.restore();
  fill_path(_0x223246, _0x54ab5a[0], _0x54ab5a[1], 4);
  return _0x30d3b1;
}
function create_door_diamond(_0x23ef59, _0x3c10d4, _0x30f850) {
  var _0x56e897 = document.createElement("canvas");
  var _0x153730 = _0x56e897.getContext("2d");
  _0x56e897.width = _0x23ef59 * 90;
  _0x56e897.height = _0x23ef59 * 98;
  _0x153730.translate(0, _0x23ef59 * 4);
  if (i === 0) {
    _0x153730.globalAlpha = _0x3c10d4 ? 0.5 : 1;
    _0x153730.save();
    _0x153730.translate(_0x23ef59 * 44, _0x23ef59 * 50);
    _0x153730.rotate(0.2);
    round_regular_polygon(_0x153730, 9, _0x23ef59 * 41, _0x23ef59 * 10);
    _0x153730.restore();
    fill_path(_0x153730, _0x30f850[0]);
  }
  _0x153730.globalAlpha = 1;
  _0x153730.save();
  _0x153730.translate(_0x23ef59 * 44, _0x23ef59 * 44);
  _0x153730.rotate(0.2);
  round_regular_polygon(_0x153730, 9, _0x23ef59 * 41, _0x23ef59 * 10);
  fill_path(_0x153730, _0x30f850[1], _0x30f850[2], _0x23ef59 * 4);
  _0x153730.rotate(-0.32);
  round_regular_polygon(_0x153730, 9, _0x23ef59 * 32, _0x23ef59 * 10);
  fill_path(_0x153730, _0x30f850[3], _0x30f850[4], _0x23ef59 * 4);
  _0x153730.rotate(0.68);
  round_regular_polygon(_0x153730, 9, _0x23ef59 * 23, _0x23ef59 * 8);
  fill_path(_0x153730, _0x30f850[5], _0x30f850[6], _0x23ef59 * 6);
  _0x153730.restore();
  _0x153730.save();
  _0x153730.translate(_0x23ef59 * 45, _0x23ef59 * 45);
  _0x153730.rotate(0);
  round_rect(_0x153730, _0x23ef59 * -9, _0x23ef59 * -25.5, _0x23ef59 * 18, _0x23ef59 * 51, _0x23ef59 * 30);
  _0x153730.restore();
  fill_path(_0x153730, _0x30f850[4], _0x30f850[4], _0x23ef59 * 2);
  _0x153730.save();
  _0x153730.translate(_0x23ef59 * 45, _0x23ef59 * 45);
  _0x153730.rotate(0);
  round_rect(_0x153730, _0x23ef59 * -26, _0x23ef59 * -9, _0x23ef59 * 52, _0x23ef59 * 18, _0x23ef59 * 30);
  _0x153730.restore();
  fill_path(_0x153730, _0x30f850[4], _0x30f850[4], _0x23ef59 * 2);
  circle(_0x153730, _0x23ef59 * 45, _0x23ef59 * 29, _0x23ef59 * 7);
  fill_path(_0x153730, _0x30f850[5]);
  circle(_0x153730, _0x23ef59 * 45, _0x23ef59 * 61, _0x23ef59 * 7);
  fill_path(_0x153730, _0x30f850[5]);
  circle(_0x153730, _0x23ef59 * 28, _0x23ef59 * 45, _0x23ef59 * 7);
  fill_path(_0x153730, _0x30f850[5]);
  circle(_0x153730, _0x23ef59 * 62, _0x23ef59 * 45, _0x23ef59 * 7);
  fill_path(_0x153730, _0x30f850[5]);
  return _0x56e897;
}
function create_coat(_0x241aba, _0x5d1a38, _0x28bc82) {
  var _0x5d3420 = document.createElement("canvas");
  var _0x14c9b4 = _0x5d3420.getContext("2d");
  _0x5d3420.width = _0x241aba * 135;
  _0x5d3420.height = _0x241aba * 120;
  _0x14c9b4.beginPath();
  _0x14c9b4.lineCap = "round";
  _0x14c9b4.lineJoin = "round";
  _0x14c9b4.moveTo(_0x241aba * 3.5, _0x241aba * 55.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 3.5, _0x241aba * 114.25, _0x241aba * 2.5, _0x241aba * 109.25, _0x241aba * 3.5, _0x241aba * 112.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 5.5, _0x241aba * 119.25, _0x241aba * 8.5, _0x241aba * 119.25, _0x241aba * 11.5, _0x241aba * 119.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 15.5, _0x241aba * 114.25, _0x241aba * 13.5, _0x241aba * 95.25, _0x241aba * 14.5, _0x241aba * 82.25);
  _0x14c9b4.closePath();
  fill_path(_0x14c9b4, _0x28bc82[0], _0x28bc82[1], _0x241aba * 7);
  _0x14c9b4.beginPath();
  _0x14c9b4.lineCap = "round";
  _0x14c9b4.lineJoin = "round";
  _0x14c9b4.moveTo(_0x241aba * 6.5, _0x241aba * 43.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 3.5, _0x241aba * 27.25, _0x241aba * 7.5, _0x241aba * 20.25, _0x241aba * 25.5, _0x241aba * 11.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 45.5, _0x241aba * -0.75, _0x241aba * 73.5, _0x241aba * 1.25, _0x241aba * 107.5, _0x241aba * 10.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 131.5, _0x241aba * 21.25, _0x241aba * 125.5, _0x241aba * 34.25, _0x241aba * 125.5, _0x241aba * 36.25);
  _0x14c9b4.closePath();
  fill_path(_0x14c9b4, _0x28bc82[0], _0x28bc82[1], _0x241aba * 7);
  _0x14c9b4.beginPath();
  _0x14c9b4.lineCap = "round";
  _0x14c9b4.lineJoin = "round";
  _0x14c9b4.moveTo(_0x241aba * 120.5, _0x241aba * 62.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 121.5, _0x241aba * 95.25, _0x241aba * 120.5, _0x241aba * 80.25, _0x241aba * 120.5, _0x241aba * 100.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 118.5, _0x241aba * 119.25, _0x241aba * 123.5, _0x241aba * 118.25, _0x241aba * 129.5, _0x241aba * 113.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 133.5, _0x241aba * 107.25, _0x241aba * 130.5, _0x241aba * 97.25, _0x241aba * 130.5, _0x241aba * 87.25);
  _0x14c9b4.bezierCurveTo(_0x241aba * 129.5, _0x241aba * 56.25, _0x241aba * 130, _0x241aba * 70.75, _0x241aba * 129.5, _0x241aba * 54.25);
  _0x14c9b4.closePath();
  fill_path(_0x14c9b4, _0x28bc82[0], _0x28bc82[1], _0x241aba * 7);
  _0x14c9b4.beginPath();
  _0x14c9b4.lineCap = "round";
  _0x14c9b4.lineJoin = "round";
  _0x14c9b4.moveTo(_0x241aba * 17.5, _0x241aba * 27);
  _0x14c9b4.bezierCurveTo(_0x241aba * 48.5, _0x241aba * 5, _0x241aba * 93.5, _0x241aba * 14, _0x241aba * 118.5, _0x241aba * 26);
  _0x14c9b4.bezierCurveTo(_0x241aba * 132.5, _0x241aba * 35, _0x241aba * 133.5, _0x241aba * 52, _0x241aba * 132.5, _0x241aba * 68);
  _0x14c9b4.bezierCurveTo(_0x241aba * 125.5, _0x241aba * 87, _0x241aba * 116.5, _0x241aba * 84, _0x241aba * 96.5, _0x241aba * 75);
  _0x14c9b4.bezierCurveTo(_0x241aba * 60.5, _0x241aba * 66, _0x241aba * 52.5, _0x241aba * 74, _0x241aba * 37.5, _0x241aba * 78);
  _0x14c9b4.bezierCurveTo(_0x241aba * 2.5, _0x241aba * 86, _0x241aba * 3.5, _0x241aba * 78, _0x241aba * 1.5, _0x241aba * 61);
  _0x14c9b4.bezierCurveTo(_0x241aba * 1.5, _0x241aba * 37, _0x241aba * 9.5, _0x241aba * 32, _0x241aba * 15.5, _0x241aba * 28);
  _0x14c9b4.closePath();
  fill_path(_0x14c9b4, _0x28bc82[2], _0x28bc82[3], _0x241aba * 7);
  return _0x5d3420;
}
function create_crab_crown(_0x2685dc, _0x5f56ca, _0x55a178) {
  var _0x669f67 = document.createElement("canvas");
  var _0x1295f8 = _0x669f67.getContext("2d");
  _0x669f67.width = _0x2685dc * 501;
  _0x669f67.height = _0x2685dc * 309;
  _0x1295f8.translate(0, _0x2685dc * 6);
  _0x1295f8.globalAlpha = _0x5f56ca ? 0.5 : 1;
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 126, _0x2685dc * 184);
  _0x1295f8.bezierCurveTo(_0x2685dc * 169, _0x2685dc * 196, _0x2685dc * 194, _0x2685dc * 198, _0x2685dc * 227, _0x2685dc * 198);
  _0x1295f8.bezierCurveTo(_0x2685dc * 235, _0x2685dc * 222, _0x2685dc * 236, _0x2685dc * 223, _0x2685dc * 241, _0x2685dc * 226);
  _0x1295f8.bezierCurveTo(_0x2685dc * 245, _0x2685dc * 228, _0x2685dc * 257, _0x2685dc * 228, _0x2685dc * 263, _0x2685dc * 226);
  _0x1295f8.bezierCurveTo(_0x2685dc * 267, _0x2685dc * 225, _0x2685dc * 270, _0x2685dc * 211, _0x2685dc * 275, _0x2685dc * 198);
  _0x1295f8.bezierCurveTo(_0x2685dc * 332, _0x2685dc * 194, _0x2685dc * 347, _0x2685dc * 192, _0x2685dc * 372, _0x2685dc * 188);
  _0x1295f8.bezierCurveTo(_0x2685dc * 366, _0x2685dc * 174.5, _0x2685dc * 366, _0x2685dc * 174.5, _0x2685dc * 360, _0x2685dc * 161);
  _0x1295f8.bezierCurveTo(_0x2685dc * 253.5, _0x2685dc * 162, _0x2685dc * 253.5, _0x2685dc * 162, _0x2685dc * 147, _0x2685dc * 163);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[0]);
  _0x1295f8.globalAlpha = 1;
  _0x1295f8.translate(0, _0x2685dc * -6);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 100, _0x2685dc * 116);
  _0x1295f8.bezierCurveTo(_0x2685dc * 90, _0x2685dc * 101, _0x2685dc * 96, _0x2685dc * 89, _0x2685dc * 106, _0x2685dc * 83);
  _0x1295f8.bezierCurveTo(_0x2685dc * 86, _0x2685dc * 79, _0x2685dc * 86, _0x2685dc * 52, _0x2685dc * 93, _0x2685dc * 38);
  _0x1295f8.bezierCurveTo(_0x2685dc * 99, _0x2685dc * 51, _0x2685dc * 107, _0x2685dc * 57, _0x2685dc * 122, _0x2685dc * 63);
  _0x1295f8.bezierCurveTo(_0x2685dc * 130, _0x2685dc * 53, _0x2685dc * 141, _0x2685dc * 46, _0x2685dc * 161, _0x2685dc * 46);
  _0x1295f8.bezierCurveTo(_0x2685dc * 157, _0x2685dc * 31, _0x2685dc * 158, _0x2685dc * 20, _0x2685dc * 169, _0x2685dc * 6);
  _0x1295f8.bezierCurveTo(_0x2685dc * 171, _0x2685dc * 24, _0x2685dc * 186, _0x2685dc * 33, _0x2685dc * 198, _0x2685dc * 45);
  _0x1295f8.bezierCurveTo(_0x2685dc * 252, _0x2685dc * 45, _0x2685dc * 252, _0x2685dc * 45, _0x2685dc * 306, _0x2685dc * 45);
  _0x1295f8.bezierCurveTo(_0x2685dc * 323, _0x2685dc * 33, _0x2685dc * 332, _0x2685dc * 21, _0x2685dc * 335, _0x2685dc * 7);
  _0x1295f8.bezierCurveTo(_0x2685dc * 349, _0x2685dc * 21, _0x2685dc * 347, _0x2685dc * 36, _0x2685dc * 345, _0x2685dc * 46);
  _0x1295f8.bezierCurveTo(_0x2685dc * 364, _0x2685dc * 46, _0x2685dc * 369, _0x2685dc * 48, _0x2685dc * 377, _0x2685dc * 63);
  _0x1295f8.bezierCurveTo(_0x2685dc * 398, _0x2685dc * 58, _0x2685dc * 403, _0x2685dc * 49, _0x2685dc * 409, _0x2685dc * 40);
  _0x1295f8.bezierCurveTo(_0x2685dc * 419, _0x2685dc * 57, _0x2685dc * 411, _0x2685dc * 79, _0x2685dc * 398, _0x2685dc * 85);
  _0x1295f8.bezierCurveTo(_0x2685dc * 405, _0x2685dc * 100, _0x2685dc * 405, _0x2685dc * 106, _0x2685dc * 401, _0x2685dc * 118);
  _0x1295f8.bezierCurveTo(_0x2685dc * 332.5, _0x2685dc * 128.5, _0x2685dc * 332.5, _0x2685dc * 128.5, _0x2685dc * 264, _0x2685dc * 139);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[1], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 122, _0x2685dc * 191);
  _0x1295f8.bezierCurveTo(_0x2685dc * 123, _0x2685dc * 237, _0x2685dc * 135, _0x2685dc * 245, _0x2685dc * 153, _0x2685dc * 259);
  _0x1295f8.bezierCurveTo(_0x2685dc * 167, _0x2685dc * 269, _0x2685dc * 158, _0x2685dc * 281, _0x2685dc * 118, _0x2685dc * 276);
  _0x1295f8.bezierCurveTo(_0x2685dc * 104, _0x2685dc * 273, _0x2685dc * 98, _0x2685dc * 268, _0x2685dc * 93, _0x2685dc * 242);
  _0x1295f8.bezierCurveTo(_0x2685dc * 89, _0x2685dc * 220, _0x2685dc * 92, _0x2685dc * 201, _0x2685dc * 102, _0x2685dc * 179);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[3], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 403, _0x2685dc * 182);
  _0x1295f8.bezierCurveTo(_0x2685dc * 414, _0x2685dc * 215, _0x2685dc * 412, _0x2685dc * 232, _0x2685dc * 403, _0x2685dc * 260);
  _0x1295f8.bezierCurveTo(_0x2685dc * 395, _0x2685dc * 274, _0x2685dc * 375, _0x2685dc * 272, _0x2685dc * 356, _0x2685dc * 270);
  _0x1295f8.bezierCurveTo(_0x2685dc * 345, _0x2685dc * 268, _0x2685dc * 339, _0x2685dc * 262, _0x2685dc * 354, _0x2685dc * 252);
  _0x1295f8.bezierCurveTo(_0x2685dc * 370, _0x2685dc * 242, _0x2685dc * 380, _0x2685dc * 225, _0x2685dc * 384, _0x2685dc * 184);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[3], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 155, _0x2685dc * 157);
  _0x1295f8.bezierCurveTo(_0x2685dc * 146, _0x2685dc * 189, _0x2685dc * 137, _0x2685dc * 198, _0x2685dc * 114, _0x2685dc * 219);
  _0x1295f8.bezierCurveTo(_0x2685dc * 104, _0x2685dc * 212, _0x2685dc * 98, _0x2685dc * 203, _0x2685dc * 89, _0x2685dc * 189);
  _0x1295f8.bezierCurveTo(_0x2685dc * 82, _0x2685dc * 178, _0x2685dc * 91, _0x2685dc * 164, _0x2685dc * 93, _0x2685dc * 136);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[4], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 347, _0x2685dc * 162);
  _0x1295f8.bezierCurveTo(_0x2685dc * 357, _0x2685dc * 195, _0x2685dc * 376, _0x2685dc * 209, _0x2685dc * 387, _0x2685dc * 217);
  _0x1295f8.bezierCurveTo(_0x2685dc * 409, _0x2685dc * 201, _0x2685dc * 420, _0x2685dc * 181, _0x2685dc * 416, _0x2685dc * 166);
  _0x1295f8.bezierCurveTo(_0x2685dc * 410, _0x2685dc * 150, _0x2685dc * 412, _0x2685dc * 149, _0x2685dc * 408, _0x2685dc * 130);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[4], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 86, _0x2685dc * 134);
  _0x1295f8.bezierCurveTo(_0x2685dc * 79, _0x2685dc * 102, _0x2685dc * 92, _0x2685dc * 84, _0x2685dc * 108, _0x2685dc * 92);
  _0x1295f8.bezierCurveTo(_0x2685dc * 149, _0x2685dc * 108, _0x2685dc * 184, _0x2685dc * 111, _0x2685dc * 242, _0x2685dc * 111);
  _0x1295f8.bezierCurveTo(_0x2685dc * 294, _0x2685dc * 108, _0x2685dc * 341, _0x2685dc * 105, _0x2685dc * 386, _0x2685dc * 98);
  _0x1295f8.bezierCurveTo(_0x2685dc * 412, _0x2685dc * 91, _0x2685dc * 417, _0x2685dc * 86, _0x2685dc * 415, _0x2685dc * 133);
  _0x1295f8.bezierCurveTo(_0x2685dc * 413, _0x2685dc * 160, _0x2685dc * 413, _0x2685dc * 160, _0x2685dc * 368, _0x2685dc * 174);
  _0x1295f8.bezierCurveTo(_0x2685dc * 308, _0x2685dc * 184, _0x2685dc * 291, _0x2685dc * 185, _0x2685dc * 270, _0x2685dc * 186);
  _0x1295f8.bezierCurveTo(_0x2685dc * 264, _0x2685dc * 206, _0x2685dc * 262, _0x2685dc * 215, _0x2685dc * 253, _0x2685dc * 215);
  _0x1295f8.bezierCurveTo(_0x2685dc * 239, _0x2685dc * 217, _0x2685dc * 239, _0x2685dc * 211, _0x2685dc * 231, _0x2685dc * 186);
  _0x1295f8.bezierCurveTo(_0x2685dc * 178, _0x2685dc * 184, _0x2685dc * 156, _0x2685dc * 179, _0x2685dc * 112, _0x2685dc * 162);
  _0x1295f8.bezierCurveTo(_0x2685dc * 87, _0x2685dc * 151, _0x2685dc * 90, _0x2685dc * 144, _0x2685dc * 87, _0x2685dc * 137);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[4], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 63, _0x2685dc * 98);
  _0x1295f8.bezierCurveTo(_0x2685dc * 84, _0x2685dc * 121, _0x2685dc * 109, _0x2685dc * 102, _0x2685dc * 124, _0x2685dc * 117);
  _0x1295f8.bezierCurveTo(_0x2685dc * 138, _0x2685dc * 136, _0x2685dc * 123, _0x2685dc * 165, _0x2685dc * 94, _0x2685dc * 150);
  _0x1295f8.bezierCurveTo(_0x2685dc * 66, _0x2685dc * 131, _0x2685dc * 64, _0x2685dc * 115, _0x2685dc * 63, _0x2685dc * 99);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[3], _0x55a178[2], _0x2685dc * 10);
  _0x1295f8.beginPath();
  _0x1295f8.lineCap = "round";
  _0x1295f8.lineJoin = "round";
  _0x1295f8.moveTo(_0x2685dc * 449, _0x2685dc * 97);
  _0x1295f8.bezierCurveTo(_0x2685dc * 446, _0x2685dc * 143, _0x2685dc * 415, _0x2685dc * 151, _0x2685dc * 402, _0x2685dc * 155);
  _0x1295f8.bezierCurveTo(_0x2685dc * 386, _0x2685dc * 157, _0x2685dc * 373, _0x2685dc * 133, _0x2685dc * 391, _0x2685dc * 116);
  _0x1295f8.bezierCurveTo(_0x2685dc * 402, _0x2685dc * 106, _0x2685dc * 432, _0x2685dc * 124, _0x2685dc * 449, _0x2685dc * 97);
  _0x1295f8.closePath();
  fill_path(_0x1295f8, _0x55a178[3], _0x55a178[2], _0x2685dc * 10);
  return _0x669f67;
}
function create_crab_loot(_0x41d9c4, _0x1600cd, _0x56df96) {
  var _0x288a3a = document.createElement("canvas");
  var _0x45f732 = _0x288a3a.getContext("2d");
  _0x288a3a.width = _0x41d9c4 * 304;
  _0x288a3a.height = _0x41d9c4 * 278;
  _0x45f732.translate(_0x41d9c4 * 10, _0x41d9c4 * 25);
  _0x45f732.globalAlpha = _0x1600cd ? 0.5 : 1;
  _0x45f732.beginPath();
  _0x45f732.lineCap = "round";
  _0x45f732.lineJoin = "round";
  _0x45f732.moveTo(_0x41d9c4 * 128, _0x41d9c4 * 137);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 155, _0x41d9c4 * 144, _0x41d9c4 * 223, _0x41d9c4 * 143, _0x41d9c4 * 256, _0x41d9c4 * 122);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 249, _0x41d9c4 * 180, _0x41d9c4 * 210, _0x41d9c4 * 227, _0x41d9c4 * 164, _0x41d9c4 * 242);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 74, _0x41d9c4 * 213, _0x41d9c4 * 99, _0x41d9c4 * 166, _0x41d9c4 * 127, _0x41d9c4 * 138);
  _0x45f732.closePath();
  fill_path(_0x45f732, _0x56df96[0]);
  _0x45f732.beginPath();
  _0x45f732.lineCap = "round";
  _0x45f732.lineJoin = "round";
  _0x45f732.moveTo(_0x41d9c4 * 284, _0x41d9c4 * 52);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 126, _0x41d9c4 * 112, _0x41d9c4 * 89, _0x41d9c4 * 177, _0x41d9c4 * 170, _0x41d9c4 * 241);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 103, _0x41d9c4 * 275, _0x41d9c4 * 20, _0x41d9c4 * 239, _0x41d9c4 * 12, _0x41d9c4 * 159);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 5, _0x41d9c4 * 76, _0x41d9c4 * 75, _0x41d9c4 * 4, _0x41d9c4 * 165, _0x41d9c4 * 13);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 233, _0x41d9c4 * 15, _0x41d9c4 * 260, _0x41d9c4 * 33, _0x41d9c4 * 284, _0x41d9c4 * 52);
  _0x45f732.closePath();
  fill_path(_0x45f732, _0x56df96[0]);
  _0x45f732.translate(_0x41d9c4 * -10, _0x41d9c4 * -25);
  _0x45f732.globalAlpha = 1;
  _0x45f732.beginPath();
  _0x45f732.lineCap = "round";
  _0x45f732.lineJoin = "round";
  _0x45f732.moveTo(_0x41d9c4 * 128, _0x41d9c4 * 137);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 155, _0x41d9c4 * 144, _0x41d9c4 * 223, _0x41d9c4 * 143, _0x41d9c4 * 256, _0x41d9c4 * 122);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 249, _0x41d9c4 * 180, _0x41d9c4 * 210, _0x41d9c4 * 227, _0x41d9c4 * 164, _0x41d9c4 * 242);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 74, _0x41d9c4 * 213, _0x41d9c4 * 99, _0x41d9c4 * 166, _0x41d9c4 * 127, _0x41d9c4 * 138);
  _0x45f732.closePath();
  fill_path(_0x45f732, _0x56df96[1], _0x56df96[2], _0x41d9c4 * 15);
  _0x45f732.beginPath();
  _0x45f732.lineCap = "round";
  _0x45f732.lineJoin = "round";
  _0x45f732.moveTo(_0x41d9c4 * 284, _0x41d9c4 * 52);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 126, _0x41d9c4 * 112, _0x41d9c4 * 89, _0x41d9c4 * 177, _0x41d9c4 * 170, _0x41d9c4 * 241);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 103, _0x41d9c4 * 275, _0x41d9c4 * 20, _0x41d9c4 * 239, _0x41d9c4 * 12, _0x41d9c4 * 159);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 5, _0x41d9c4 * 76, _0x41d9c4 * 75, _0x41d9c4 * 4, _0x41d9c4 * 165, _0x41d9c4 * 13);
  _0x45f732.bezierCurveTo(_0x41d9c4 * 233, _0x41d9c4 * 15, _0x41d9c4 * 260, _0x41d9c4 * 33, _0x41d9c4 * 284, _0x41d9c4 * 52);
  _0x45f732.closePath();
  fill_path(_0x45f732, _0x56df96[3], _0x56df96[4], _0x41d9c4 * 15);
  return _0x288a3a;
}
function create_bed(_0x2b665d, _0x375f39, _0x2012bf) {
  var _0x3671a0 = document.createElement("canvas");
  var _0x306a15 = _0x3671a0.getContext("2d");
  _0x3671a0.width = _0x2b665d * 175;
  _0x3671a0.height = _0x2b665d * 169;
  _0x306a15.globalAlpha = 0.5;
  _0x306a15.translate(0, _0x2b665d * 3);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 19, _0x2b665d * 139);
  _0x306a15.bezierCurveTo(_0x2b665d * 18, _0x2b665d * 163, _0x2b665d * 22, _0x2b665d * 156, _0x2b665d * 53, _0x2b665d * 157);
  _0x306a15.bezierCurveTo(_0x2b665d * 97.5, _0x2b665d * 157, _0x2b665d * 97.5, _0x2b665d * 157, _0x2b665d * 142, _0x2b665d * 157);
  _0x306a15.bezierCurveTo(_0x2b665d * 150, _0x2b665d * 157, _0x2b665d * 153, _0x2b665d * 156, _0x2b665d * 154, _0x2b665d * 142);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[0]);
  _0x306a15.globalAlpha = 1;
  _0x306a15.translate(0, _0x2b665d * -3);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 86.5, _0x2b665d * 81.5);
  round_rect(_0x306a15, _0x2b665d * -66.5, _0x2b665d * -65.5, _0x2b665d * 133, _0x2b665d * 131, _0x2b665d * 10);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[1], _0x2012bf[2], _0x2b665d * 5);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 84.5, _0x2b665d * 79);
  round_rect(_0x306a15, _0x2b665d * -50.5, _0x2b665d * -49, _0x2b665d * 101, _0x2b665d * 98, _0x2b665d * 10);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[3], _0x2012bf[2], _0x2b665d * 5);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 42, _0x2b665d * 54);
  _0x306a15.bezierCurveTo(_0x2b665d * 37, _0x2b665d * 48, _0x2b665d * 39, _0x2b665d * 44, _0x2b665d * 38, _0x2b665d * 41);
  _0x306a15.bezierCurveTo(_0x2b665d * 42, _0x2b665d * 40, _0x2b665d * 45, _0x2b665d * 40, _0x2b665d * 50, _0x2b665d * 41);
  _0x306a15.bezierCurveTo(_0x2b665d * 85, _0x2b665d * 36, _0x2b665d * 98, _0x2b665d * 37, _0x2b665d * 116, _0x2b665d * 42);
  _0x306a15.bezierCurveTo(_0x2b665d * 132, _0x2b665d * 39, _0x2b665d * 132, _0x2b665d * 39, _0x2b665d * 133, _0x2b665d * 56);
  _0x306a15.bezierCurveTo(_0x2b665d * 136, _0x2b665d * 73, _0x2b665d * 136, _0x2b665d * 84, _0x2b665d * 132, _0x2b665d * 106);
  _0x306a15.bezierCurveTo(_0x2b665d * 47, _0x2b665d * 113, _0x2b665d * 85.5, _0x2b665d * 106, _0x2b665d * 39, _0x2b665d * 106);
  _0x306a15.bezierCurveTo(_0x2b665d * 32, _0x2b665d * 81, _0x2b665d * 38, _0x2b665d * 60, _0x2b665d * 42, _0x2b665d * 55);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[4], _0x2012bf[5], _0x2b665d * 5);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 28, _0x2b665d * 24);
  _0x306a15.rotate(0);
  round_rect(_0x306a15, _0x2b665d * -14, _0x2b665d * -14, _0x2b665d * 28, _0x2b665d * 28, _0x2b665d * 4);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[1], _0x2012bf[2], _0x2b665d * 5);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 143, _0x2b665d * 23);
  _0x306a15.rotate(0);
  round_rect(_0x306a15, _0x2b665d * -14, _0x2b665d * -14, _0x2b665d * 28, _0x2b665d * 28, _0x2b665d * 4);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[1], _0x2012bf[2], _0x2b665d * 5);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 55, _0x2b665d * 80);
  _0x306a15.bezierCurveTo(_0x2b665d * 73, _0x2b665d * 78, _0x2b665d * 84, _0x2b665d * 74, _0x2b665d * 100, _0x2b665d * 64);
  _0x306a15.bezierCurveTo(_0x2b665d * 111, _0x2b665d * 57, _0x2b665d * 125, _0x2b665d * 67, _0x2b665d * 108, _0x2b665d * 84);
  _0x306a15.bezierCurveTo(_0x2b665d * 96, _0x2b665d * 95, _0x2b665d * 86, _0x2b665d * 96, _0x2b665d * 70, _0x2b665d * 88);
  _0x306a15.bezierCurveTo(_0x2b665d * 62.5, _0x2b665d * 84, _0x2b665d * 62.5, _0x2b665d * 84, _0x2b665d * 55, _0x2b665d * 80);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[5]);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 17, _0x2b665d * 112);
  _0x306a15.bezierCurveTo(_0x2b665d * 14, _0x2b665d * 146, _0x2b665d * 27, _0x2b665d * 152, _0x2b665d * 37, _0x2b665d * 149);
  _0x306a15.bezierCurveTo(_0x2b665d * 78, _0x2b665d * 155, _0x2b665d * 128, _0x2b665d * 150, _0x2b665d * 146, _0x2b665d * 150);
  _0x306a15.bezierCurveTo(_0x2b665d * 158, _0x2b665d * 144, _0x2b665d * 158, _0x2b665d * 121, _0x2b665d * 153, _0x2b665d * 114);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[8], _0x2012bf[9], _0x2b665d * 5);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 127, _0x2b665d * 111);
  _0x306a15.bezierCurveTo(_0x2b665d * 133, _0x2b665d * 136, _0x2b665d * 115, _0x2b665d * 149, _0x2b665d * 88, _0x2b665d * 150);
  _0x306a15.bezierCurveTo(_0x2b665d * 119.5, _0x2b665d * 151, _0x2b665d * 119.5, _0x2b665d * 151, _0x2b665d * 151, _0x2b665d * 152);
  _0x306a15.bezierCurveTo(_0x2b665d * 159, _0x2b665d * 136, _0x2b665d * 155, _0x2b665d * 126, _0x2b665d * 154, _0x2b665d * 113);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[9]);
  _0x306a15.globalAlpha = 0.5;
  _0x306a15.translate(0, _0x2b665d * 3);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 15, _0x2b665d * 117);
  _0x306a15.bezierCurveTo(_0x2b665d * 34, _0x2b665d * 109, _0x2b665d * 61, _0x2b665d * 106, _0x2b665d * 94, _0x2b665d * 109);
  _0x306a15.bezierCurveTo(_0x2b665d * 126, _0x2b665d * 110, _0x2b665d * 142, _0x2b665d * 113, _0x2b665d * 154, _0x2b665d * 119);
  _0x306a15.bezierCurveTo(_0x2b665d * 154, _0x2b665d * 123, _0x2b665d * 154, _0x2b665d * 123, _0x2b665d * 154, _0x2b665d * 127);
  _0x306a15.bezierCurveTo(_0x2b665d * 127, _0x2b665d * 118, _0x2b665d * 15, _0x2b665d * 122, _0x2b665d * 18, _0x2b665d * 129);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[0]);
  _0x306a15.globalAlpha = 1;
  _0x306a15.translate(0, _0x2b665d * -3);
  _0x306a15.beginPath();
  _0x306a15.lineCap = "round";
  _0x306a15.lineJoin = "round";
  _0x306a15.moveTo(_0x2b665d * 14, _0x2b665d * 127);
  _0x306a15.bezierCurveTo(_0x2b665d * 13, _0x2b665d * 117, _0x2b665d * 12, _0x2b665d * 109, _0x2b665d * 15, _0x2b665d * 103);
  _0x306a15.bezierCurveTo(_0x2b665d * 16, _0x2b665d * 95, _0x2b665d * 21, _0x2b665d * 92, _0x2b665d * 60, _0x2b665d * 93);
  _0x306a15.bezierCurveTo(_0x2b665d * 91, _0x2b665d * 93, _0x2b665d * 118, _0x2b665d * 93, _0x2b665d * 143, _0x2b665d * 96);
  _0x306a15.bezierCurveTo(_0x2b665d * 151, _0x2b665d * 96, _0x2b665d * 155, _0x2b665d * 99, _0x2b665d * 156, _0x2b665d * 112);
  _0x306a15.bezierCurveTo(_0x2b665d * 157, _0x2b665d * 124, _0x2b665d * 157, _0x2b665d * 127, _0x2b665d * 156, _0x2b665d * 128);
  _0x306a15.bezierCurveTo(_0x2b665d * 138, _0x2b665d * 112, _0x2b665d * 100, _0x2b665d * 118, _0x2b665d * 84, _0x2b665d * 118);
  _0x306a15.bezierCurveTo(_0x2b665d * 28, _0x2b665d * 118, _0x2b665d * 20, _0x2b665d * 120, _0x2b665d * 16, _0x2b665d * 127);
  _0x306a15.closePath();
  fill_path(_0x306a15, _0x2012bf[4], _0x2012bf[5], _0x2b665d * 5);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 27.5, _0x2b665d * 138.5);
  round_rect(_0x306a15, _0x2b665d * -13.5, _0x2b665d * -14.5, _0x2b665d * 27, _0x2b665d * 29, _0x2b665d * 4);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[1], _0x2012bf[2], _0x2b665d * 5);
  _0x306a15.save();
  _0x306a15.translate(_0x2b665d * 143.5, _0x2b665d * 137);
  round_rect(_0x306a15, _0x2b665d * -13.5, _0x2b665d * -14, _0x2b665d * 27, _0x2b665d * 28, _0x2b665d * 4);
  _0x306a15.restore();
  fill_path(_0x306a15, _0x2012bf[1], _0x2012bf[2], _0x2b665d * 5);
  return _0x3671a0;
}
function create_bed_top(_0x238dbf, _0x34889a, _0x429065) {
  var _0x3b64c6 = document.createElement("canvas");
  var _0x316ecf = _0x3b64c6.getContext("2d");
  _0x3b64c6.width = _0x238dbf * 175;
  _0x3b64c6.height = _0x238dbf * 169;
  _0x316ecf.beginPath();
  _0x316ecf.lineCap = "round";
  _0x316ecf.lineJoin = "round";
  _0x316ecf.moveTo(_0x238dbf * 17, _0x238dbf * 112);
  _0x316ecf.bezierCurveTo(_0x238dbf * 14, _0x238dbf * 146, _0x238dbf * 27, _0x238dbf * 152, _0x238dbf * 37, _0x238dbf * 149);
  _0x316ecf.bezierCurveTo(_0x238dbf * 78, _0x238dbf * 155, _0x238dbf * 128, _0x238dbf * 150, _0x238dbf * 146, _0x238dbf * 150);
  _0x316ecf.bezierCurveTo(_0x238dbf * 158, _0x238dbf * 144, _0x238dbf * 158, _0x238dbf * 121, _0x238dbf * 153, _0x238dbf * 114);
  _0x316ecf.closePath();
  fill_path(_0x316ecf, _0x429065[8], _0x429065[9], _0x238dbf * 5);
  _0x316ecf.beginPath();
  _0x316ecf.lineCap = "round";
  _0x316ecf.lineJoin = "round";
  _0x316ecf.moveTo(_0x238dbf * 127, _0x238dbf * 111);
  _0x316ecf.bezierCurveTo(_0x238dbf * 133, _0x238dbf * 136, _0x238dbf * 115, _0x238dbf * 149, _0x238dbf * 88, _0x238dbf * 150);
  _0x316ecf.bezierCurveTo(_0x238dbf * 119.5, _0x238dbf * 151, _0x238dbf * 119.5, _0x238dbf * 151, _0x238dbf * 151, _0x238dbf * 152);
  _0x316ecf.bezierCurveTo(_0x238dbf * 159, _0x238dbf * 136, _0x238dbf * 155, _0x238dbf * 126, _0x238dbf * 154, _0x238dbf * 113);
  _0x316ecf.closePath();
  fill_path(_0x316ecf, _0x429065[9]);
  _0x316ecf.globalAlpha = 0.5;
  _0x316ecf.translate(0, _0x238dbf * 3);
  _0x316ecf.beginPath();
  _0x316ecf.lineCap = "round";
  _0x316ecf.lineJoin = "round";
  _0x316ecf.moveTo(_0x238dbf * 15, _0x238dbf * 117);
  _0x316ecf.bezierCurveTo(_0x238dbf * 34, _0x238dbf * 109, _0x238dbf * 61, _0x238dbf * 106, _0x238dbf * 94, _0x238dbf * 109);
  _0x316ecf.bezierCurveTo(_0x238dbf * 126, _0x238dbf * 110, _0x238dbf * 142, _0x238dbf * 113, _0x238dbf * 154, _0x238dbf * 119);
  _0x316ecf.bezierCurveTo(_0x238dbf * 154, _0x238dbf * 123, _0x238dbf * 154, _0x238dbf * 123, _0x238dbf * 154, _0x238dbf * 127);
  _0x316ecf.bezierCurveTo(_0x238dbf * 127, _0x238dbf * 118, _0x238dbf * 15, _0x238dbf * 122, _0x238dbf * 18, _0x238dbf * 129);
  _0x316ecf.closePath();
  fill_path(_0x316ecf, _0x429065[0]);
  _0x316ecf.globalAlpha = 1;
  _0x316ecf.translate(0, _0x238dbf * -3);
  _0x316ecf.beginPath();
  _0x316ecf.lineCap = "round";
  _0x316ecf.lineJoin = "round";
  _0x316ecf.moveTo(_0x238dbf * 14, _0x238dbf * 127);
  _0x316ecf.bezierCurveTo(_0x238dbf * 13, _0x238dbf * 117, _0x238dbf * 12, _0x238dbf * 109, _0x238dbf * 15, _0x238dbf * 103);
  _0x316ecf.bezierCurveTo(_0x238dbf * 16, _0x238dbf * 95, _0x238dbf * 21, _0x238dbf * 92, _0x238dbf * 60, _0x238dbf * 93);
  _0x316ecf.bezierCurveTo(_0x238dbf * 91, _0x238dbf * 93, _0x238dbf * 118, _0x238dbf * 93, _0x238dbf * 143, _0x238dbf * 96);
  _0x316ecf.bezierCurveTo(_0x238dbf * 151, _0x238dbf * 96, _0x238dbf * 155, _0x238dbf * 99, _0x238dbf * 156, _0x238dbf * 112);
  _0x316ecf.bezierCurveTo(_0x238dbf * 157, _0x238dbf * 124, _0x238dbf * 157, _0x238dbf * 127, _0x238dbf * 156, _0x238dbf * 128);
  _0x316ecf.bezierCurveTo(_0x238dbf * 138, _0x238dbf * 112, _0x238dbf * 100, _0x238dbf * 118, _0x238dbf * 84, _0x238dbf * 118);
  _0x316ecf.bezierCurveTo(_0x238dbf * 28, _0x238dbf * 118, _0x238dbf * 20, _0x238dbf * 120, _0x238dbf * 16, _0x238dbf * 127);
  _0x316ecf.closePath();
  fill_path(_0x316ecf, _0x429065[4], _0x429065[5], _0x238dbf * 5);
  _0x316ecf.save();
  _0x316ecf.translate(_0x238dbf * 27.5, _0x238dbf * 138.5);
  round_rect(_0x316ecf, _0x238dbf * -13.5, _0x238dbf * -14.5, _0x238dbf * 27, _0x238dbf * 29, _0x238dbf * 4);
  _0x316ecf.restore();
  fill_path(_0x316ecf, _0x429065[1], _0x429065[2], _0x238dbf * 5);
  _0x316ecf.save();
  _0x316ecf.translate(_0x238dbf * 143.5, _0x238dbf * 137);
  round_rect(_0x316ecf, _0x238dbf * -13.5, _0x238dbf * -14, _0x238dbf * 27, _0x238dbf * 28, _0x238dbf * 4);
  _0x316ecf.restore();
  fill_path(_0x316ecf, _0x429065[1], _0x429065[2], _0x238dbf * 5);
  return _0x3b64c6;
}
function create_crab_spear(_0x54b6b4, _0x4b0f65, _0x4a9c4f) {
  var _0x29bf4e = document.createElement("canvas");
  var _0x35dd13 = _0x29bf4e.getContext("2d");
  _0x29bf4e.width = _0x54b6b4 * 115;
  _0x29bf4e.height = _0x54b6b4 * 585;
  _0x35dd13.scale(-1, 1);
  _0x35dd13.translate(_0x54b6b4 * -110, 0);
  _0x35dd13.translate(_0x54b6b4 * 10, _0x54b6b4 * 10);
  _0x35dd13.globalAlpha = _0x4b0f65 ? 0.5 : 1;
  _0x35dd13.save();
  _0x35dd13.translate(_0x54b6b4 * 51.5, _0x54b6b4 * 342);
  round_rect(_0x35dd13, _0x54b6b4 * -14.5, _0x54b6b4 * -225, _0x54b6b4 * 29, _0x54b6b4 * 450, _0x54b6b4 * 20);
  _0x35dd13.restore();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 54, _0x54b6b4 * 83);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 70, _0x54b6b4 * 69, _0x54b6b4 * 78, _0x54b6b4 * 62, _0x54b6b4 * 82, _0x54b6b4 * 40);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 93, _0x54b6b4 * 48, _0x54b6b4 * 103, _0x54b6b4 * 64, _0x54b6b4 * 95, _0x54b6b4 * 102);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 60, _0x54b6b4 * 114, _0x54b6b4 * 53, _0x54b6b4 * 103, _0x54b6b4 * 54, _0x54b6b4 * 85);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 95, _0x54b6b4 * 97);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 102, _0x54b6b4 * 43, _0x54b6b4 * 77, _0x54b6b4 * 71, _0x54b6b4 * 6);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 34, _0x54b6b4 * 10, _0x54b6b4 * 6, _0x54b6b4 * 43, _0x54b6b4 * 5, _0x54b6b4 * 76);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 4, _0x54b6b4 * 98, _0x54b6b4 * 15, _0x54b6b4 * 130, _0x54b6b4 * 64, _0x54b6b4 * 130);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 76, _0x54b6b4 * 129, _0x54b6b4 * 95, _0x54b6b4 * 113, _0x54b6b4 * 97, _0x54b6b4 * 97);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 55, _0x54b6b4 * 176);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 74, _0x54b6b4 * 175, _0x54b6b4 * 82, _0x54b6b4 * 169, _0x54b6b4 * 96, _0x54b6b4 * 155);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 103, _0x54b6b4 * 183, _0x54b6b4 * 95, _0x54b6b4 * 214, _0x54b6b4 * 54, _0x54b6b4 * 219);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 50, _0x54b6b4 * 176);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 25, _0x54b6b4 * 177, _0x54b6b4 * 16, _0x54b6b4 * 164, _0x54b6b4 * 7, _0x54b6b4 * 156);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 0, _0x54b6b4 * 186, _0x54b6b4 * 10, _0x54b6b4 * 201, _0x54b6b4 * 43, _0x54b6b4 * 220);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 403);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 412, _0x54b6b4 * 58, _0x54b6b4 * 412, _0x54b6b4 * 67, _0x54b6b4 * 403);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 66.5, _0x54b6b4 * 434, _0x54b6b4 * 66.5, _0x54b6b4 * 434, _0x54b6b4 * 66, _0x54b6b4 * 465);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 480, _0x54b6b4 * 40, _0x54b6b4 * 472, _0x54b6b4 * 36, _0x54b6b4 * 465);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 59, _0x54b6b4 * 67);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 97, _0x54b6b4 * 18, _0x54b6b4 * 117, _0x54b6b4 * 11, _0x54b6b4 * 110);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 11, _0x54b6b4 * 115, _0x54b6b4 * 15, _0x54b6b4 * 122, _0x54b6b4 * 23, _0x54b6b4 * 124);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 46, _0x54b6b4 * 118, _0x54b6b4 * 52, _0x54b6b4 * 113, _0x54b6b4 * 62, _0x54b6b4 * 86);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 30, _0x54b6b4 * 125);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 136, _0x54b6b4 * 57, _0x54b6b4 * 134, _0x54b6b4 * 77, _0x54b6b4 * 127);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 71, _0x54b6b4 * 158, _0x54b6b4 * 71, _0x54b6b4 * 159, _0x54b6b4 * 66, _0x54b6b4 * 159);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 50.5, _0x54b6b4 * 156.5, _0x54b6b4 * 50.5, _0x54b6b4 * 156.5, _0x54b6b4 * 35, _0x54b6b4 * 154);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 31, _0x54b6b4 * 145, _0x54b6b4 * 31, _0x54b6b4 * 136, _0x54b6b4 * 31, _0x54b6b4 * 125);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 171);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 32, _0x54b6b4 * 221, _0x54b6b4 * 43, _0x54b6b4 * 233, _0x54b6b4 * 70, _0x54b6b4 * 247);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 75, _0x54b6b4 * 234, _0x54b6b4 * 75, _0x54b6b4 * 230, _0x54b6b4 * 72, _0x54b6b4 * 221);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 48, _0x54b6b4 * 206, _0x54b6b4 * 54, _0x54b6b4 * 188, _0x54b6b4 * 50, _0x54b6b4 * 176);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 60, _0x54b6b4 * 68);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 63, _0x54b6b4 * 69, _0x54b6b4 * 65, _0x54b6b4 * 71, _0x54b6b4 * 67, _0x54b6b4 * 77);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 61, _0x54b6b4 * 123, _0x54b6b4 * 52, _0x54b6b4 * 137, _0x54b6b4 * 42, _0x54b6b4 * 150);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 38, _0x54b6b4 * 151, _0x54b6b4 * 38, _0x54b6b4 * 151, _0x54b6b4 * 34, _0x54b6b4 * 152);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 33, _0x54b6b4 * 146.5, _0x54b6b4 * 33, _0x54b6b4 * 146.5, _0x54b6b4 * 32, _0x54b6b4 * 141);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 49, _0x54b6b4 * 118, _0x54b6b4 * 63, _0x54b6b4 * 87, _0x54b6b4 * 59, _0x54b6b4 * 68);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 71, _0x54b6b4 * 172);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 222, _0x54b6b4 * 49, _0x54b6b4 * 234, _0x54b6b4 * 35, _0x54b6b4 * 248);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 30, _0x54b6b4 * 236, _0x54b6b4 * 30, _0x54b6b4 * 230, _0x54b6b4 * 31, _0x54b6b4 * 217);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 44, _0x54b6b4 * 202, _0x54b6b4 * 49, _0x54b6b4 * 191, _0x54b6b4 * 52, _0x54b6b4 * 172);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 151);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 27, _0x54b6b4 * 165, _0x54b6b4 * 31, _0x54b6b4 * 173, _0x54b6b4 * 36, _0x54b6b4 * 178);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 185, _0x54b6b4 * 73, _0x54b6b4 * 184, _0x54b6b4 * 71, _0x54b6b4 * 170);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 72, _0x54b6b4 * 154, _0x54b6b4 * 71, _0x54b6b4 * 154, _0x54b6b4 * 63, _0x54b6b4 * 155);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[0]);
  _0x35dd13.translate(_0x54b6b4 * -10, _0x54b6b4 * -10);
  _0x35dd13.globalAlpha = 1;
  _0x35dd13.save();
  _0x35dd13.translate(_0x54b6b4 * 51.5, _0x54b6b4 * 342);
  round_rect(_0x35dd13, _0x54b6b4 * -14.5, _0x54b6b4 * -225, _0x54b6b4 * 29, _0x54b6b4 * 450, _0x54b6b4 * 20);
  _0x35dd13.restore();
  fill_path(_0x35dd13, _0x4a9c4f[1], _0x4a9c4f[2], _0x54b6b4 * 5);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 54, _0x54b6b4 * 83);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 70, _0x54b6b4 * 69, _0x54b6b4 * 78, _0x54b6b4 * 62, _0x54b6b4 * 82, _0x54b6b4 * 40);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 93, _0x54b6b4 * 48, _0x54b6b4 * 103, _0x54b6b4 * 64, _0x54b6b4 * 95, _0x54b6b4 * 102);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 60, _0x54b6b4 * 114, _0x54b6b4 * 53, _0x54b6b4 * 103, _0x54b6b4 * 54, _0x54b6b4 * 85);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[3], _0x4a9c4f[4], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 95, _0x54b6b4 * 97);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 102, _0x54b6b4 * 43, _0x54b6b4 * 77, _0x54b6b4 * 71, _0x54b6b4 * 6);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 34, _0x54b6b4 * 10, _0x54b6b4 * 6, _0x54b6b4 * 43, _0x54b6b4 * 5, _0x54b6b4 * 76);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 4, _0x54b6b4 * 98, _0x54b6b4 * 15, _0x54b6b4 * 130, _0x54b6b4 * 64, _0x54b6b4 * 130);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 76, _0x54b6b4 * 129, _0x54b6b4 * 95, _0x54b6b4 * 113, _0x54b6b4 * 97, _0x54b6b4 * 97);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[5], _0x4a9c4f[6], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 403);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 412, _0x54b6b4 * 58, _0x54b6b4 * 412, _0x54b6b4 * 67, _0x54b6b4 * 403);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 66.5, _0x54b6b4 * 434, _0x54b6b4 * 66.5, _0x54b6b4 * 434, _0x54b6b4 * 66, _0x54b6b4 * 465);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 480, _0x54b6b4 * 40, _0x54b6b4 * 472, _0x54b6b4 * 36, _0x54b6b4 * 465);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 37, _0x54b6b4 * 427);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 435, _0x54b6b4 * 55, _0x54b6b4 * 435, _0x54b6b4 * 67, _0x54b6b4 * 427);
  fill_path(_0x35dd13, undefined, _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 36, _0x54b6b4 * 448);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 46, _0x54b6b4 * 454, _0x54b6b4 * 54, _0x54b6b4 * 457, _0x54b6b4 * 65, _0x54b6b4 * 449);
  fill_path(_0x35dd13, undefined, _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 55, _0x54b6b4 * 176);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 74, _0x54b6b4 * 175, _0x54b6b4 * 82, _0x54b6b4 * 169, _0x54b6b4 * 96, _0x54b6b4 * 155);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 103, _0x54b6b4 * 183, _0x54b6b4 * 95, _0x54b6b4 * 214, _0x54b6b4 * 54, _0x54b6b4 * 219);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[3], _0x4a9c4f[4], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 50, _0x54b6b4 * 176);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 25, _0x54b6b4 * 177, _0x54b6b4 * 16, _0x54b6b4 * 164, _0x54b6b4 * 7, _0x54b6b4 * 156);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 0, _0x54b6b4 * 186, _0x54b6b4 * 10, _0x54b6b4 * 201, _0x54b6b4 * 43, _0x54b6b4 * 220);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[3], _0x4a9c4f[4], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 59, _0x54b6b4 * 67);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 97, _0x54b6b4 * 18, _0x54b6b4 * 117, _0x54b6b4 * 11, _0x54b6b4 * 110);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 11, _0x54b6b4 * 115, _0x54b6b4 * 15, _0x54b6b4 * 122, _0x54b6b4 * 23, _0x54b6b4 * 124);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 46, _0x54b6b4 * 118, _0x54b6b4 * 52, _0x54b6b4 * 113, _0x54b6b4 * 62, _0x54b6b4 * 86);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 30, _0x54b6b4 * 125);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 47, _0x54b6b4 * 136, _0x54b6b4 * 57, _0x54b6b4 * 134, _0x54b6b4 * 77, _0x54b6b4 * 127);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 71, _0x54b6b4 * 158, _0x54b6b4 * 71, _0x54b6b4 * 159, _0x54b6b4 * 66, _0x54b6b4 * 159);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 50.5, _0x54b6b4 * 156.5, _0x54b6b4 * 50.5, _0x54b6b4 * 156.5, _0x54b6b4 * 35, _0x54b6b4 * 154);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 31, _0x54b6b4 * 145, _0x54b6b4 * 31, _0x54b6b4 * 136, _0x54b6b4 * 31, _0x54b6b4 * 125);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 171);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 32, _0x54b6b4 * 221, _0x54b6b4 * 43, _0x54b6b4 * 233, _0x54b6b4 * 70, _0x54b6b4 * 247);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 75, _0x54b6b4 * 234, _0x54b6b4 * 75, _0x54b6b4 * 230, _0x54b6b4 * 72, _0x54b6b4 * 221);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 48, _0x54b6b4 * 206, _0x54b6b4 * 54, _0x54b6b4 * 188, _0x54b6b4 * 50, _0x54b6b4 * 176);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 60, _0x54b6b4 * 68);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 63, _0x54b6b4 * 69, _0x54b6b4 * 65, _0x54b6b4 * 71, _0x54b6b4 * 67, _0x54b6b4 * 77);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 61, _0x54b6b4 * 123, _0x54b6b4 * 52, _0x54b6b4 * 137, _0x54b6b4 * 42, _0x54b6b4 * 150);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 38, _0x54b6b4 * 151, _0x54b6b4 * 38, _0x54b6b4 * 151, _0x54b6b4 * 34, _0x54b6b4 * 152);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 33, _0x54b6b4 * 146.5, _0x54b6b4 * 33, _0x54b6b4 * 146.5, _0x54b6b4 * 32, _0x54b6b4 * 141);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 49, _0x54b6b4 * 118, _0x54b6b4 * 63, _0x54b6b4 * 87, _0x54b6b4 * 59, _0x54b6b4 * 68);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 71, _0x54b6b4 * 172);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 222, _0x54b6b4 * 49, _0x54b6b4 * 234, _0x54b6b4 * 35, _0x54b6b4 * 248);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 30, _0x54b6b4 * 236, _0x54b6b4 * 30, _0x54b6b4 * 230, _0x54b6b4 * 31, _0x54b6b4 * 217);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 44, _0x54b6b4 * 202, _0x54b6b4 * 49, _0x54b6b4 * 191, _0x54b6b4 * 52, _0x54b6b4 * 172);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 35, _0x54b6b4 * 151);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 27, _0x54b6b4 * 165, _0x54b6b4 * 31, _0x54b6b4 * 173, _0x54b6b4 * 36, _0x54b6b4 * 178);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 56, _0x54b6b4 * 185, _0x54b6b4 * 73, _0x54b6b4 * 184, _0x54b6b4 * 71, _0x54b6b4 * 170);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 72, _0x54b6b4 * 154, _0x54b6b4 * 71, _0x54b6b4 * 154, _0x54b6b4 * 63, _0x54b6b4 * 155);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[7], _0x4a9c4f[8], _0x54b6b4 * 6);
  _0x35dd13.beginPath();
  _0x35dd13.lineCap = "round";
  _0x35dd13.lineJoin = "round";
  _0x35dd13.moveTo(_0x54b6b4 * 53, _0x54b6b4 * 113);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 65, _0x54b6b4 * 140, _0x54b6b4 * 75, _0x54b6b4 * 166, _0x54b6b4 * 52, _0x54b6b4 * 169);
  _0x35dd13.bezierCurveTo(_0x54b6b4 * 29, _0x54b6b4 * 168, _0x54b6b4 * 41, _0x54b6b4 * 143, _0x54b6b4 * 53, _0x54b6b4 * 112);
  _0x35dd13.closePath();
  fill_path(_0x35dd13, _0x4a9c4f[3], _0x4a9c4f[4], _0x54b6b4 * 6);
  return _0x29bf4e;
}
function create_wood_spear(_0x118bb2, _0x3220e3, _0x3e6600) {
  var _0x237403 = document.createElement("canvas");
  var _0x902057 = _0x237403.getContext("2d");
  _0x237403.width = _0x118bb2 * 81;
  _0x237403.height = _0x118bb2 * 626;
  _0x902057.translate(_0x118bb2 * 20, _0x118bb2 * 20);
  _0x902057.globalAlpha = _0x3220e3 ? 0.5 : 1;
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 55, _0x118bb2 * 565);
  _0x902057.bezierCurveTo(_0x118bb2 * 56, _0x118bb2 * 586, _0x118bb2 * 53, _0x118bb2 * 591, _0x118bb2 * 40, _0x118bb2 * 592);
  _0x902057.bezierCurveTo(_0x118bb2 * 28, _0x118bb2 * 591, _0x118bb2 * 27, _0x118bb2 * 583, _0x118bb2 * 28, _0x118bb2 * 557);
  _0x902057.bezierCurveTo(_0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27, _0x118bb2 * 135);
  _0x902057.bezierCurveTo(_0x118bb2 * 26, _0x118bb2 * 74, _0x118bb2 * 36, _0x118bb2 * 26, _0x118bb2 * 41, _0x118bb2 * 15);
  _0x902057.bezierCurveTo(_0x118bb2 * 54, _0x118bb2 * 51, _0x118bb2 * 54, _0x118bb2 * 81, _0x118bb2 * 55, _0x118bb2 * 128);
  _0x902057.closePath();
  fill_path(_0x902057, _0x3e6600[0]);
  _0x902057.translate(_0x118bb2 * -20, _0x118bb2 * -20);
  _0x902057.globalAlpha = 1;
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 55, _0x118bb2 * 565);
  _0x902057.bezierCurveTo(_0x118bb2 * 56, _0x118bb2 * 586, _0x118bb2 * 53, _0x118bb2 * 591, _0x118bb2 * 40, _0x118bb2 * 592);
  _0x902057.bezierCurveTo(_0x118bb2 * 28, _0x118bb2 * 591, _0x118bb2 * 27, _0x118bb2 * 583, _0x118bb2 * 28, _0x118bb2 * 557);
  _0x902057.bezierCurveTo(_0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27, _0x118bb2 * 135);
  _0x902057.bezierCurveTo(_0x118bb2 * 26, _0x118bb2 * 74, _0x118bb2 * 36, _0x118bb2 * 26, _0x118bb2 * 41, _0x118bb2 * 15);
  _0x902057.bezierCurveTo(_0x118bb2 * 54, _0x118bb2 * 51, _0x118bb2 * 54, _0x118bb2 * 81, _0x118bb2 * 55, _0x118bb2 * 128);
  _0x902057.closePath();
  fill_path(_0x902057, _0x3e6600[1], _0x3e6600[2], _0x118bb2 * 8);
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 27, _0x118bb2 * 129);
  _0x902057.bezierCurveTo(_0x118bb2 * 32, _0x118bb2 * 135, _0x118bb2 * 48, _0x118bb2 * 136, _0x118bb2 * 53, _0x118bb2 * 129);
  _0x902057.bezierCurveTo(_0x118bb2 * 56, _0x118bb2 * 97, _0x118bb2 * 53, _0x118bb2 * 82, _0x118bb2 * 52, _0x118bb2 * 64);
  _0x902057.bezierCurveTo(_0x118bb2 * 49, _0x118bb2 * 33, _0x118bb2 * 44, _0x118bb2 * 27, _0x118bb2 * 41, _0x118bb2 * 21);
  _0x902057.bezierCurveTo(_0x118bb2 * 31, _0x118bb2 * 40, _0x118bb2 * 28, _0x118bb2 * 84, _0x118bb2 * 27, _0x118bb2 * 127);
  _0x902057.closePath();
  fill_path(_0x902057, _0x3e6600[3]);
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 55, _0x118bb2 * 565);
  _0x902057.bezierCurveTo(_0x118bb2 * 56, _0x118bb2 * 586, _0x118bb2 * 53, _0x118bb2 * 591, _0x118bb2 * 40, _0x118bb2 * 592);
  _0x902057.bezierCurveTo(_0x118bb2 * 28, _0x118bb2 * 591, _0x118bb2 * 27, _0x118bb2 * 583, _0x118bb2 * 28, _0x118bb2 * 557);
  _0x902057.bezierCurveTo(_0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27.5, _0x118bb2 * 346, _0x118bb2 * 27, _0x118bb2 * 135);
  _0x902057.bezierCurveTo(_0x118bb2 * 26, _0x118bb2 * 74, _0x118bb2 * 36, _0x118bb2 * 26, _0x118bb2 * 41, _0x118bb2 * 15);
  _0x902057.bezierCurveTo(_0x118bb2 * 54, _0x118bb2 * 51, _0x118bb2 * 54, _0x118bb2 * 81, _0x118bb2 * 55, _0x118bb2 * 128);
  _0x902057.closePath();
  fill_path(_0x902057, undefined, _0x3e6600[2], _0x118bb2 * 8);
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 28, _0x118bb2 * 475);
  _0x902057.bezierCurveTo(_0x118bb2 * 38, _0x118bb2 * 482, _0x118bb2 * 48, _0x118bb2 * 480, _0x118bb2 * 54, _0x118bb2 * 474);
  _0x902057.bezierCurveTo(_0x118bb2 * 54, _0x118bb2 * 509.5, _0x118bb2 * 54, _0x118bb2 * 509.5, _0x118bb2 * 54, _0x118bb2 * 545);
  _0x902057.bezierCurveTo(_0x118bb2 * 46, _0x118bb2 * 554, _0x118bb2 * 36, _0x118bb2 * 552, _0x118bb2 * 28, _0x118bb2 * 545);
  _0x902057.closePath();
  fill_path(_0x902057, _0x3e6600[4], _0x3e6600[5], _0x118bb2 * 8);
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 28, _0x118bb2 * 496);
  _0x902057.bezierCurveTo(_0x118bb2 * 39, _0x118bb2 * 506, _0x118bb2 * 49, _0x118bb2 * 503, _0x118bb2 * 54, _0x118bb2 * 496);
  fill_path(_0x902057, undefined, _0x3e6600[5], _0x118bb2 * 8);
  _0x902057.beginPath();
  _0x902057.lineCap = "round";
  _0x902057.lineJoin = "round";
  _0x902057.moveTo(_0x118bb2 * 28, _0x118bb2 * 521);
  _0x902057.bezierCurveTo(_0x118bb2 * 41, _0x118bb2 * 529, _0x118bb2 * 49, _0x118bb2 * 524, _0x118bb2 * 54, _0x118bb2 * 520);
  fill_path(_0x902057, undefined, _0x3e6600[5], _0x118bb2 * 8);
  return _0x237403;
}
function create_stonespear(_0x306d11, _0x378590, _0x557cc8) {
  var _0x464c03 = document.createElement("canvas");
  var _0x122713 = _0x464c03.getContext("2d");
  _0x464c03.width = _0x306d11 * 100;
  _0x464c03.height = _0x306d11 * 648;
  _0x122713.translate(_0x306d11 * 20, _0x306d11 * 20);
  _0x122713.globalAlpha = _0x378590 ? 0.5 : 1;
  _0x122713.save();
  _0x122713.translate(_0x306d11 * 50.5, _0x306d11 * 349.5);
  round_rect(_0x122713, _0x306d11 * -13.5, _0x306d11 * -249.5, _0x306d11 * 27, _0x306d11 * 499, _0x306d11 * 10);
  _0x122713.restore();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 36, _0x306d11 * 538);
  _0x122713.bezierCurveTo(_0x306d11 * 49.5, _0x306d11 * 538, _0x306d11 * 49.5, _0x306d11 * 538, _0x306d11 * 63, _0x306d11 * 538);
  _0x122713.bezierCurveTo(_0x306d11 * 63.5, _0x306d11 * 568, _0x306d11 * 63.5, _0x306d11 * 568, _0x306d11 * 64, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 50, _0x306d11 * 598, _0x306d11 * 50, _0x306d11 * 598, _0x306d11 * 36, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 36, _0x306d11 * 568.5, _0x306d11 * 36, _0x306d11 * 568.5, _0x306d11 * 36, _0x306d11 * 539);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 36, _0x306d11 * 554);
  _0x122713.bezierCurveTo(_0x306d11 * 45, _0x306d11 * 561, _0x306d11 * 56, _0x306d11 * 558, _0x306d11 * 63, _0x306d11 * 554);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 32, _0x306d11 * 569);
  _0x122713.bezierCurveTo(_0x306d11 * 44, _0x306d11 * 576, _0x306d11 * 58, _0x306d11 * 574, _0x306d11 * 68, _0x306d11 * 569);
  _0x122713.bezierCurveTo(_0x306d11 * 68, _0x306d11 * 584, _0x306d11 * 68, _0x306d11 * 584, _0x306d11 * 68, _0x306d11 * 599);
  _0x122713.bezierCurveTo(_0x306d11 * 68, _0x306d11 * 608, _0x306d11 * 65, _0x306d11 * 618, _0x306d11 * 49, _0x306d11 * 617);
  _0x122713.bezierCurveTo(_0x306d11 * 34, _0x306d11 * 617, _0x306d11 * 32, _0x306d11 * 610, _0x306d11 * 32, _0x306d11 * 598);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 41, _0x306d11 * 581);
  _0x122713.bezierCurveTo(_0x306d11 * 48, _0x306d11 * 584, _0x306d11 * 55, _0x306d11 * 583, _0x306d11 * 60, _0x306d11 * 581);
  _0x122713.bezierCurveTo(_0x306d11 * 60, _0x306d11 * 589.5, _0x306d11 * 60, _0x306d11 * 589.5, _0x306d11 * 60, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 60, _0x306d11 * 604, _0x306d11 * 59, _0x306d11 * 609, _0x306d11 * 48, _0x306d11 * 608);
  _0x122713.bezierCurveTo(_0x306d11 * 40, _0x306d11 * 607, _0x306d11 * 40, _0x306d11 * 606, _0x306d11 * 41, _0x306d11 * 581);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 31, _0x306d11 * 106);
  _0x122713.bezierCurveTo(_0x306d11 * 31, _0x306d11 * 124.5, _0x306d11 * 31, _0x306d11 * 124.5, _0x306d11 * 31, _0x306d11 * 143);
  _0x122713.bezierCurveTo(_0x306d11 * 31, _0x306d11 * 163, _0x306d11 * 38, _0x306d11 * 169, _0x306d11 * 48, _0x306d11 * 168);
  _0x122713.bezierCurveTo(_0x306d11 * 57, _0x306d11 * 168, _0x306d11 * 67, _0x306d11 * 165, _0x306d11 * 67, _0x306d11 * 148);
  _0x122713.bezierCurveTo(_0x306d11 * 67, _0x306d11 * 123.5, _0x306d11 * 67, _0x306d11 * 123.5, _0x306d11 * 67, _0x306d11 * 99);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 49, _0x306d11 * 27);
  _0x122713.bezierCurveTo(_0x306d11 * 64, _0x306d11 * 62.5, _0x306d11 * 64, _0x306d11 * 62.5, _0x306d11 * 79, _0x306d11 * 98);
  _0x122713.bezierCurveTo(_0x306d11 * 74, _0x306d11 * 113, _0x306d11 * 63, _0x306d11 * 121, _0x306d11 * 50, _0x306d11 * 122);
  _0x122713.bezierCurveTo(_0x306d11 * 35, _0x306d11 * 123, _0x306d11 * 22, _0x306d11 * 109, _0x306d11 * 20, _0x306d11 * 98);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 49, _0x306d11 * 43);
  _0x122713.bezierCurveTo(_0x306d11 * 61, _0x306d11 * 70, _0x306d11 * 61, _0x306d11 * 70, _0x306d11 * 73, _0x306d11 * 97);
  _0x122713.bezierCurveTo(_0x306d11 * 66, _0x306d11 * 116, _0x306d11 * 43, _0x306d11 * 122, _0x306d11 * 26, _0x306d11 * 99);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[0]);
  _0x122713.translate(_0x306d11 * -20, _0x306d11 * -20);
  _0x122713.globalAlpha = 1;
  _0x122713.save();
  _0x122713.translate(_0x306d11 * 50.5, _0x306d11 * 349.5);
  round_rect(_0x122713, _0x306d11 * -13.5, _0x306d11 * -249.5, _0x306d11 * 27, _0x306d11 * 499, _0x306d11 * 10);
  _0x122713.restore();
  fill_path(_0x122713, _0x557cc8[1], _0x557cc8[2], _0x306d11 * 8);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 36, _0x306d11 * 538);
  _0x122713.bezierCurveTo(_0x306d11 * 49.5, _0x306d11 * 538, _0x306d11 * 49.5, _0x306d11 * 538, _0x306d11 * 63, _0x306d11 * 538);
  _0x122713.bezierCurveTo(_0x306d11 * 63.5, _0x306d11 * 568, _0x306d11 * 63.5, _0x306d11 * 568, _0x306d11 * 64, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 50, _0x306d11 * 598, _0x306d11 * 50, _0x306d11 * 598, _0x306d11 * 36, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 36, _0x306d11 * 568.5, _0x306d11 * 36, _0x306d11 * 568.5, _0x306d11 * 36, _0x306d11 * 539);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[3], _0x557cc8[4], _0x306d11 * 8);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 36, _0x306d11 * 554);
  _0x122713.bezierCurveTo(_0x306d11 * 45, _0x306d11 * 561, _0x306d11 * 56, _0x306d11 * 558, _0x306d11 * 63, _0x306d11 * 554);
  _0x122713.closePath();
  fill_path(_0x122713, undefined, _0x557cc8[4], _0x306d11 * 8);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 32, _0x306d11 * 569);
  _0x122713.bezierCurveTo(_0x306d11 * 44, _0x306d11 * 576, _0x306d11 * 58, _0x306d11 * 574, _0x306d11 * 68, _0x306d11 * 569);
  _0x122713.bezierCurveTo(_0x306d11 * 68, _0x306d11 * 584, _0x306d11 * 68, _0x306d11 * 584, _0x306d11 * 68, _0x306d11 * 599);
  _0x122713.bezierCurveTo(_0x306d11 * 68, _0x306d11 * 608, _0x306d11 * 65, _0x306d11 * 618, _0x306d11 * 49, _0x306d11 * 617);
  _0x122713.bezierCurveTo(_0x306d11 * 34, _0x306d11 * 617, _0x306d11 * 32, _0x306d11 * 610, _0x306d11 * 32, _0x306d11 * 598);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[5], _0x557cc8[6], _0x306d11 * 8);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 41, _0x306d11 * 581);
  _0x122713.bezierCurveTo(_0x306d11 * 48, _0x306d11 * 584, _0x306d11 * 55, _0x306d11 * 583, _0x306d11 * 60, _0x306d11 * 581);
  _0x122713.bezierCurveTo(_0x306d11 * 60, _0x306d11 * 589.5, _0x306d11 * 60, _0x306d11 * 589.5, _0x306d11 * 60, _0x306d11 * 598);
  _0x122713.bezierCurveTo(_0x306d11 * 60, _0x306d11 * 604, _0x306d11 * 59, _0x306d11 * 609, _0x306d11 * 48, _0x306d11 * 608);
  _0x122713.bezierCurveTo(_0x306d11 * 40, _0x306d11 * 607, _0x306d11 * 40, _0x306d11 * 606, _0x306d11 * 41, _0x306d11 * 581);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[7]);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 31, _0x306d11 * 106);
  _0x122713.bezierCurveTo(_0x306d11 * 31, _0x306d11 * 124.5, _0x306d11 * 31, _0x306d11 * 124.5, _0x306d11 * 31, _0x306d11 * 143);
  _0x122713.bezierCurveTo(_0x306d11 * 31, _0x306d11 * 163, _0x306d11 * 38, _0x306d11 * 169, _0x306d11 * 48, _0x306d11 * 168);
  _0x122713.bezierCurveTo(_0x306d11 * 57, _0x306d11 * 168, _0x306d11 * 67, _0x306d11 * 165, _0x306d11 * 67, _0x306d11 * 148);
  _0x122713.bezierCurveTo(_0x306d11 * 67, _0x306d11 * 123.5, _0x306d11 * 67, _0x306d11 * 123.5, _0x306d11 * 67, _0x306d11 * 99);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[5], _0x557cc8[6], _0x306d11 * 8);
  _0x122713.save();
  _0x122713.translate(_0x306d11 * -46, _0x306d11 * -50);
  _0x122713.scale(2, 2);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 51, _0x306d11 * 80);
  _0x122713.bezierCurveTo(_0x306d11 * 51, _0x306d11 * 89.5, _0x306d11 * 51, _0x306d11 * 89.5, _0x306d11 * 51, _0x306d11 * 99);
  _0x122713.bezierCurveTo(_0x306d11 * 49, _0x306d11 * 103, _0x306d11 * 46, _0x306d11 * 105, _0x306d11 * 44, _0x306d11 * 99);
  _0x122713.bezierCurveTo(_0x306d11 * 44, _0x306d11 * 88.5, _0x306d11 * 44, _0x306d11 * 88.5, _0x306d11 * 44, _0x306d11 * 78);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[8]);
  _0x122713.restore();
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 49, _0x306d11 * 27);
  _0x122713.bezierCurveTo(_0x306d11 * 64, _0x306d11 * 62.5, _0x306d11 * 64, _0x306d11 * 62.5, _0x306d11 * 79, _0x306d11 * 98);
  _0x122713.bezierCurveTo(_0x306d11 * 74, _0x306d11 * 113, _0x306d11 * 63, _0x306d11 * 121, _0x306d11 * 50, _0x306d11 * 122);
  _0x122713.bezierCurveTo(_0x306d11 * 35, _0x306d11 * 123, _0x306d11 * 22, _0x306d11 * 109, _0x306d11 * 20, _0x306d11 * 98);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[8], _0x557cc8[9], _0x306d11 * 8);
  _0x122713.scale(2, 2);
  _0x122713.translate(_0x306d11 * -23, _0x306d11 * -20);
  _0x122713.beginPath();
  _0x122713.lineCap = "round";
  _0x122713.lineJoin = "round";
  _0x122713.moveTo(_0x306d11 * 57, _0x306d11 * 69);
  _0x122713.bezierCurveTo(_0x306d11 * 50, _0x306d11 * 76, _0x306d11 * 43, _0x306d11 * 75, _0x306d11 * 38, _0x306d11 * 69);
  _0x122713.bezierCurveTo(_0x306d11 * 43, _0x306d11 * 57, _0x306d11 * 43, _0x306d11 * 57, _0x306d11 * 48, _0x306d11 * 45);
  _0x122713.closePath();
  fill_path(_0x122713, _0x557cc8[10]);
  return _0x464c03;
}
function create_goldspear(_0x2eb599, _0x321691, _0x496659) {
  var _0x2f0a7e = document.createElement("canvas");
  var _0x121bf1 = _0x2f0a7e.getContext("2d");
  _0x2f0a7e.width = _0x2eb599 * 88;
  _0x2f0a7e.height = _0x2eb599 * 647;
  _0x121bf1.translate(_0x2eb599 * 20, _0x2eb599 * 20);
  _0x121bf1.globalAlpha = _0x321691 ? 0.5 : 1;
  _0x121bf1.save();
  _0x121bf1.translate(_0x2eb599 * 45, _0x2eb599 * 384.5);
  round_rect(_0x121bf1, _0x2eb599 * -15, _0x2eb599 * -216.5, _0x2eb599 * 30, _0x2eb599 * 433, _0x2eb599 * 10);
  _0x121bf1.restore();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 27, _0x2eb599 * 572);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 44, _0x2eb599 * 580, _0x2eb599 * 55, _0x2eb599 * 576, _0x2eb599 * 62, _0x2eb599 * 572);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 65, _0x2eb599 * 585.5, _0x2eb599 * 65, _0x2eb599 * 585.5, _0x2eb599 * 68, _0x2eb599 * 599);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 71, _0x2eb599 * 612, _0x2eb599 * 68, _0x2eb599 * 618, _0x2eb599 * 34, _0x2eb599 * 616);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 14, _0x2eb599 * 615, _0x2eb599 * 19, _0x2eb599 * 607, _0x2eb599 * 27, _0x2eb599 * 573);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 32, _0x2eb599 * 587);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 39, _0x2eb599 * 590, _0x2eb599 * 48, _0x2eb599 * 588, _0x2eb599 * 54, _0x2eb599 * 587);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 57, _0x2eb599 * 604, _0x2eb599 * 59, _0x2eb599 * 609, _0x2eb599 * 46, _0x2eb599 * 609);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 27, _0x2eb599 * 609, _0x2eb599 * 28, _0x2eb599 * 605, _0x2eb599 * 33, _0x2eb599 * 588);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 31, _0x2eb599 * 113);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 27, _0x2eb599 * 139, _0x2eb599 * 27, _0x2eb599 * 139, _0x2eb599 * 23, _0x2eb599 * 165);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 18, _0x2eb599 * 187, _0x2eb599 * 39, _0x2eb599 * 195, _0x2eb599 * 57, _0x2eb599 * 186);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 68, _0x2eb599 * 180, _0x2eb599 * 65, _0x2eb599 * 171, _0x2eb599 * 62, _0x2eb599 * 153);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 58.5, _0x2eb599 * 131, _0x2eb599 * 58.5, _0x2eb599 * 131, _0x2eb599 * 55, _0x2eb599 * 109);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 39, _0x2eb599 * 139);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 43, _0x2eb599 * 139, _0x2eb599 * 43, _0x2eb599 * 139, _0x2eb599 * 47, _0x2eb599 * 139);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 51, _0x2eb599 * 158, _0x2eb599 * 56, _0x2eb599 * 176, _0x2eb599 * 44, _0x2eb599 * 175);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 33, _0x2eb599 * 177, _0x2eb599 * 34, _0x2eb599 * 167, _0x2eb599 * 39, _0x2eb599 * 140);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 44, _0x2eb599 * 29);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 57, _0x2eb599 * 63, _0x2eb599 * 57, _0x2eb599 * 63, _0x2eb599 * 70, _0x2eb599 * 97);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 60, _0x2eb599 * 111, _0x2eb599 * 60, _0x2eb599 * 111, _0x2eb599 * 50, _0x2eb599 * 125);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 45, _0x2eb599 * 128, _0x2eb599 * 41, _0x2eb599 * 128, _0x2eb599 * 35, _0x2eb599 * 124);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 26.5, _0x2eb599 * 110, _0x2eb599 * 26.5, _0x2eb599 * 110, _0x2eb599 * 18, _0x2eb599 * 96);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 44, _0x2eb599 * 54);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 50, _0x2eb599 * 72, _0x2eb599 * 50, _0x2eb599 * 72, _0x2eb599 * 56, _0x2eb599 * 90);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 58, _0x2eb599 * 94, _0x2eb599 * 59, _0x2eb599 * 98, _0x2eb599 * 53, _0x2eb599 * 105);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 47, _0x2eb599 * 113, _0x2eb599 * 43, _0x2eb599 * 113, _0x2eb599 * 36, _0x2eb599 * 103);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 29, _0x2eb599 * 96, _0x2eb599 * 31, _0x2eb599 * 94, _0x2eb599 * 35, _0x2eb599 * 83);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[0]);
  _0x121bf1.translate(_0x2eb599 * -20, _0x2eb599 * -20);
  _0x121bf1.globalAlpha = 1;
  _0x121bf1.save();
  _0x121bf1.translate(_0x2eb599 * 45, _0x2eb599 * 384.5);
  round_rect(_0x121bf1, _0x2eb599 * -15, _0x2eb599 * -216.5, _0x2eb599 * 30, _0x2eb599 * 433, _0x2eb599 * 10);
  _0x121bf1.restore();
  fill_path(_0x121bf1, _0x496659[1], _0x496659[2], _0x2eb599 * 8);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 27, _0x2eb599 * 572);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 44, _0x2eb599 * 580, _0x2eb599 * 55, _0x2eb599 * 576, _0x2eb599 * 62, _0x2eb599 * 572);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 65, _0x2eb599 * 585.5, _0x2eb599 * 65, _0x2eb599 * 585.5, _0x2eb599 * 68, _0x2eb599 * 599);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 71, _0x2eb599 * 612, _0x2eb599 * 68, _0x2eb599 * 618, _0x2eb599 * 34, _0x2eb599 * 616);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 14, _0x2eb599 * 615, _0x2eb599 * 19, _0x2eb599 * 607, _0x2eb599 * 27, _0x2eb599 * 573);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[3], _0x496659[4], _0x2eb599 * 8);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 32, _0x2eb599 * 587);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 39, _0x2eb599 * 590, _0x2eb599 * 48, _0x2eb599 * 588, _0x2eb599 * 54, _0x2eb599 * 587);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 57, _0x2eb599 * 604, _0x2eb599 * 59, _0x2eb599 * 609, _0x2eb599 * 46, _0x2eb599 * 609);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 27, _0x2eb599 * 609, _0x2eb599 * 28, _0x2eb599 * 605, _0x2eb599 * 33, _0x2eb599 * 588);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[5]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 31, _0x2eb599 * 113);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 27, _0x2eb599 * 139, _0x2eb599 * 27, _0x2eb599 * 139, _0x2eb599 * 23, _0x2eb599 * 165);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 18, _0x2eb599 * 187, _0x2eb599 * 39, _0x2eb599 * 195, _0x2eb599 * 57, _0x2eb599 * 186);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 68, _0x2eb599 * 180, _0x2eb599 * 65, _0x2eb599 * 171, _0x2eb599 * 62, _0x2eb599 * 153);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 58.5, _0x2eb599 * 131, _0x2eb599 * 58.5, _0x2eb599 * 131, _0x2eb599 * 55, _0x2eb599 * 109);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[3], _0x496659[4], _0x2eb599 * 8);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 39, _0x2eb599 * 139);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 43, _0x2eb599 * 139, _0x2eb599 * 43, _0x2eb599 * 139, _0x2eb599 * 47, _0x2eb599 * 139);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 51, _0x2eb599 * 158, _0x2eb599 * 56, _0x2eb599 * 176, _0x2eb599 * 44, _0x2eb599 * 175);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 33, _0x2eb599 * 177, _0x2eb599 * 34, _0x2eb599 * 167, _0x2eb599 * 39, _0x2eb599 * 140);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[5]);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 44, _0x2eb599 * 29);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 57, _0x2eb599 * 63, _0x2eb599 * 57, _0x2eb599 * 63, _0x2eb599 * 70, _0x2eb599 * 97);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 60, _0x2eb599 * 111, _0x2eb599 * 60, _0x2eb599 * 111, _0x2eb599 * 50, _0x2eb599 * 125);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 45, _0x2eb599 * 128, _0x2eb599 * 41, _0x2eb599 * 128, _0x2eb599 * 35, _0x2eb599 * 124);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 26.5, _0x2eb599 * 110, _0x2eb599 * 26.5, _0x2eb599 * 110, _0x2eb599 * 18, _0x2eb599 * 96);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[6], _0x496659[7], _0x2eb599 * 8);
  _0x121bf1.beginPath();
  _0x121bf1.lineCap = "round";
  _0x121bf1.lineJoin = "round";
  _0x121bf1.moveTo(_0x2eb599 * 44, _0x2eb599 * 54);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 50, _0x2eb599 * 72, _0x2eb599 * 50, _0x2eb599 * 72, _0x2eb599 * 56, _0x2eb599 * 90);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 58, _0x2eb599 * 94, _0x2eb599 * 59, _0x2eb599 * 98, _0x2eb599 * 53, _0x2eb599 * 105);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 47, _0x2eb599 * 113, _0x2eb599 * 43, _0x2eb599 * 113, _0x2eb599 * 36, _0x2eb599 * 103);
  _0x121bf1.bezierCurveTo(_0x2eb599 * 29, _0x2eb599 * 96, _0x2eb599 * 31, _0x2eb599 * 94, _0x2eb599 * 35, _0x2eb599 * 83);
  _0x121bf1.closePath();
  fill_path(_0x121bf1, _0x496659[8]);
  return _0x2f0a7e;
}
function create_diamondspear(_0x2ce650, _0x883e90, _0x1445ae) {
  var _0x16db13 = document.createElement("canvas");
  var _0x55d51e = _0x16db13.getContext("2d");
  _0x16db13.width = _0x2ce650 * 106;
  _0x16db13.height = _0x2ce650 * 681;
  _0x55d51e.translate(_0x2ce650 * 20, _0x2ce650 * 20);
  _0x55d51e.globalAlpha = _0x883e90 ? 0.5 : 1;
  _0x55d51e.save();
  _0x55d51e.translate(_0x2ce650 * 52.5, _0x2ce650 * 395);
  _0x55d51e.rotate(0);
  round_rect(_0x55d51e, _0x2ce650 * -11.5, _0x2ce650 * -226, _0x2ce650 * 23, _0x2ce650 * 452, _0x2ce650 * 10);
  _0x55d51e.restore();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 35, _0x2ce650 * 588);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 47, _0x2ce650 * 596, _0x2ce650 * 61, _0x2ce650 * 594, _0x2ce650 * 69, _0x2ce650 * 588);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 79, _0x2ce650 * 615, _0x2ce650 * 78, _0x2ce650 * 632, _0x2ce650 * 59, _0x2ce650 * 643);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 41, _0x2ce650 * 650, _0x2ce650 * 27, _0x2ce650 * 632, _0x2ce650 * 30, _0x2ce650 * 610);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 135);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 61.5, _0x2ce650 * 142, _0x2ce650 * 61.5, _0x2ce650 * 142, _0x2ce650 * 71, _0x2ce650 * 149);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 69.5, _0x2ce650 * 166, _0x2ce650 * 69.5, _0x2ce650 * 166, _0x2ce650 * 68, _0x2ce650 * 183);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 60.5, _0x2ce650 * 187.5, _0x2ce650 * 60.5, _0x2ce650 * 187.5, _0x2ce650 * 53, _0x2ce650 * 192);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 45, _0x2ce650 * 187.5, _0x2ce650 * 45, _0x2ce650 * 187.5, _0x2ce650 * 37, _0x2ce650 * 183);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 35.5, _0x2ce650 * 167, _0x2ce650 * 35.5, _0x2ce650 * 167, _0x2ce650 * 34, _0x2ce650 * 151);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 64, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 63, _0x2ce650 * 164, _0x2ce650 * 63, _0x2ce650 * 164, _0x2ce650 * 62, _0x2ce650 * 178);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 58, _0x2ce650 * 181, _0x2ce650 * 58, _0x2ce650 * 181, _0x2ce650 * 54, _0x2ce650 * 184);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 48.5, _0x2ce650 * 181.5, _0x2ce650 * 48.5, _0x2ce650 * 181.5, _0x2ce650 * 43, _0x2ce650 * 179);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 42, _0x2ce650 * 164.5, _0x2ce650 * 42, _0x2ce650 * 164.5, _0x2ce650 * 41, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 46, _0x2ce650 * 152.5, _0x2ce650 * 46, _0x2ce650 * 152.5, _0x2ce650 * 51, _0x2ce650 * 155);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 39);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 65.5, _0x2ce650 * 82, _0x2ce650 * 65.5, _0x2ce650 * 82, _0x2ce650 * 79, _0x2ce650 * 125);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 66, _0x2ce650 * 137.5, _0x2ce650 * 66, _0x2ce650 * 137.5, _0x2ce650 * 53, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 39, _0x2ce650 * 138, _0x2ce650 * 39, _0x2ce650 * 138, _0x2ce650 * 25, _0x2ce650 * 126);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 64);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 60, _0x2ce650 * 92.5, _0x2ce650 * 60, _0x2ce650 * 92.5, _0x2ce650 * 68, _0x2ce650 * 121);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 61, _0x2ce650 * 127.5, _0x2ce650 * 61, _0x2ce650 * 127.5, _0x2ce650 * 54, _0x2ce650 * 134);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 46.5, _0x2ce650 * 127.5, _0x2ce650 * 46.5, _0x2ce650 * 127.5, _0x2ce650 * 39, _0x2ce650 * 121);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[0]);
  _0x55d51e.translate(_0x2ce650 * -20, _0x2ce650 * -20);
  _0x55d51e.globalAlpha = 1;
  _0x55d51e.save();
  _0x55d51e.translate(_0x2ce650 * 52.5, _0x2ce650 * 395);
  _0x55d51e.rotate(0);
  round_rect(_0x55d51e, _0x2ce650 * -11.5, _0x2ce650 * -226, _0x2ce650 * 23, _0x2ce650 * 452, _0x2ce650 * 10);
  _0x55d51e.restore();
  fill_path(_0x55d51e, _0x1445ae[1], _0x1445ae[2], _0x2ce650 * 8);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 35, _0x2ce650 * 588);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 47, _0x2ce650 * 596, _0x2ce650 * 61, _0x2ce650 * 594, _0x2ce650 * 69, _0x2ce650 * 588);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 79, _0x2ce650 * 615, _0x2ce650 * 78, _0x2ce650 * 632, _0x2ce650 * 59, _0x2ce650 * 643);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 41, _0x2ce650 * 650, _0x2ce650 * 27, _0x2ce650 * 632, _0x2ce650 * 30, _0x2ce650 * 610);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[3], _0x1445ae[4], _0x2ce650 * 8);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 135);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 61.5, _0x2ce650 * 142, _0x2ce650 * 61.5, _0x2ce650 * 142, _0x2ce650 * 71, _0x2ce650 * 149);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 69.5, _0x2ce650 * 166, _0x2ce650 * 69.5, _0x2ce650 * 166, _0x2ce650 * 68, _0x2ce650 * 183);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 60.5, _0x2ce650 * 187.5, _0x2ce650 * 60.5, _0x2ce650 * 187.5, _0x2ce650 * 53, _0x2ce650 * 192);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 45, _0x2ce650 * 187.5, _0x2ce650 * 45, _0x2ce650 * 187.5, _0x2ce650 * 37, _0x2ce650 * 183);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 35.5, _0x2ce650 * 167, _0x2ce650 * 35.5, _0x2ce650 * 167, _0x2ce650 * 34, _0x2ce650 * 151);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[3], _0x1445ae[4], _0x2ce650 * 8);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 64, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 63, _0x2ce650 * 164, _0x2ce650 * 63, _0x2ce650 * 164, _0x2ce650 * 62, _0x2ce650 * 178);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 58, _0x2ce650 * 181, _0x2ce650 * 58, _0x2ce650 * 181, _0x2ce650 * 54, _0x2ce650 * 184);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 48.5, _0x2ce650 * 181.5, _0x2ce650 * 48.5, _0x2ce650 * 181.5, _0x2ce650 * 43, _0x2ce650 * 179);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 42, _0x2ce650 * 164.5, _0x2ce650 * 42, _0x2ce650 * 164.5, _0x2ce650 * 41, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 46, _0x2ce650 * 152.5, _0x2ce650 * 46, _0x2ce650 * 152.5, _0x2ce650 * 51, _0x2ce650 * 155);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[5]);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 39);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 65.5, _0x2ce650 * 82, _0x2ce650 * 65.5, _0x2ce650 * 82, _0x2ce650 * 79, _0x2ce650 * 125);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 66, _0x2ce650 * 137.5, _0x2ce650 * 66, _0x2ce650 * 137.5, _0x2ce650 * 53, _0x2ce650 * 150);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 39, _0x2ce650 * 138, _0x2ce650 * 39, _0x2ce650 * 138, _0x2ce650 * 25, _0x2ce650 * 126);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[6], _0x1445ae[7], _0x2ce650 * 8);
  _0x55d51e.beginPath();
  _0x55d51e.lineCap = "round";
  _0x55d51e.lineJoin = "round";
  _0x55d51e.moveTo(_0x2ce650 * 52, _0x2ce650 * 64);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 60, _0x2ce650 * 92.5, _0x2ce650 * 60, _0x2ce650 * 92.5, _0x2ce650 * 68, _0x2ce650 * 121);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 61, _0x2ce650 * 127.5, _0x2ce650 * 61, _0x2ce650 * 127.5, _0x2ce650 * 54, _0x2ce650 * 134);
  _0x55d51e.bezierCurveTo(_0x2ce650 * 46.5, _0x2ce650 * 127.5, _0x2ce650 * 46.5, _0x2ce650 * 127.5, _0x2ce650 * 39, _0x2ce650 * 121);
  _0x55d51e.closePath();
  fill_path(_0x55d51e, _0x1445ae[8]);
  return _0x16db13;
}
function create_amespear(_0x14b10b, _0x553494, _0x572af4) {
  var _0xe8b7d7 = document.createElement("canvas");
  var _0x2df5ba = _0xe8b7d7.getContext("2d");
  _0xe8b7d7.width = _0x14b10b * 108;
  _0xe8b7d7.height = _0x14b10b * 669;
  _0x2df5ba.translate(_0x14b10b * 20, _0x14b10b * 20);
  _0x2df5ba.globalAlpha = _0x553494 ? 0.5 : 1;
  _0x2df5ba.save();
  _0x2df5ba.translate(_0x14b10b * 54, _0x14b10b * 389.5);
  round_rect(_0x2df5ba, _0x14b10b * -15, _0x14b10b * -228.5, _0x14b10b * 30, _0x14b10b * 457, _0x14b10b * 10);
  _0x2df5ba.restore();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 35, _0x14b10b * 579);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 47, _0x14b10b * 587, _0x14b10b * 61, _0x14b10b * 584, _0x14b10b * 71, _0x14b10b * 579);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 75, _0x14b10b * 597.5, _0x14b10b * 75, _0x14b10b * 597.5, _0x14b10b * 79, _0x14b10b * 616);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 66.5, _0x14b10b * 628, _0x14b10b * 66.5, _0x14b10b * 628, _0x14b10b * 54, _0x14b10b * 640);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 41, _0x14b10b * 628.5, _0x14b10b * 41, _0x14b10b * 628.5, _0x14b10b * 28, _0x14b10b * 617);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 30, _0x14b10b * 141);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 40, _0x14b10b * 136, _0x14b10b * 40, _0x14b10b * 136, _0x14b10b * 50, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 63, _0x14b10b * 136, _0x14b10b * 63, _0x14b10b * 136, _0x14b10b * 76, _0x14b10b * 141);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 72.5, _0x14b10b * 161.5, _0x14b10b * 72.5, _0x14b10b * 161.5, _0x14b10b * 69, _0x14b10b * 182);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 61.5, _0x14b10b * 186.5, _0x14b10b * 61.5, _0x14b10b * 186.5, _0x14b10b * 54, _0x14b10b * 191);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 45, _0x14b10b * 186.5, _0x14b10b * 45, _0x14b10b * 186.5, _0x14b10b * 36, _0x14b10b * 182);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 42, _0x14b10b * 152);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 53, _0x14b10b * 152, _0x14b10b * 53, _0x14b10b * 152, _0x14b10b * 64, _0x14b10b * 152);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 62, _0x14b10b * 171, _0x14b10b * 62, _0x14b10b * 176, _0x14b10b * 55, _0x14b10b * 177);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 42, _0x14b10b * 176, _0x14b10b * 45, _0x14b10b * 174, _0x14b10b * 42, _0x14b10b * 152);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 52, _0x14b10b * 28);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 67.5, _0x14b10b * 55, _0x14b10b * 67.5, _0x14b10b * 55, _0x14b10b * 83, _0x14b10b * 82);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 80, _0x14b10b * 106.5, _0x14b10b * 80, _0x14b10b * 106.5, _0x14b10b * 77, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 58, _0x14b10b * 147, _0x14b10b * 44, _0x14b10b * 141, _0x14b10b * 29, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 26.5, _0x14b10b * 106.5, _0x14b10b * 26.5, _0x14b10b * 106.5, _0x14b10b * 24, _0x14b10b * 82);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 53, _0x14b10b * 53);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 61, _0x14b10b * 70, _0x14b10b * 61, _0x14b10b * 70, _0x14b10b * 69, _0x14b10b * 87);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 67, _0x14b10b * 106, _0x14b10b * 67, _0x14b10b * 106, _0x14b10b * 65, _0x14b10b * 125);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 54, _0x14b10b * 130, _0x14b10b * 51, _0x14b10b * 130, _0x14b10b * 41, _0x14b10b * 125);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 39, _0x14b10b * 105, _0x14b10b * 39, _0x14b10b * 105, _0x14b10b * 37, _0x14b10b * 85);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[0]);
  _0x2df5ba.translate(_0x14b10b * -20, _0x14b10b * -20);
  _0x2df5ba.globalAlpha = 1;
  _0x2df5ba.save();
  _0x2df5ba.translate(_0x14b10b * 54, _0x14b10b * 389.5);
  _0x2df5ba.rotate(0);
  round_rect(_0x2df5ba, _0x14b10b * -15, _0x14b10b * -228.5, _0x14b10b * 30, _0x14b10b * 457, _0x14b10b * 10);
  _0x2df5ba.restore();
  fill_path(_0x2df5ba, _0x572af4[1], _0x572af4[2], _0x14b10b * 8);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 35, _0x14b10b * 579);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 47, _0x14b10b * 587, _0x14b10b * 61, _0x14b10b * 584, _0x14b10b * 71, _0x14b10b * 579);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 75, _0x14b10b * 597.5, _0x14b10b * 75, _0x14b10b * 597.5, _0x14b10b * 79, _0x14b10b * 616);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 66.5, _0x14b10b * 628, _0x14b10b * 66.5, _0x14b10b * 628, _0x14b10b * 54, _0x14b10b * 640);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 41, _0x14b10b * 628.5, _0x14b10b * 41, _0x14b10b * 628.5, _0x14b10b * 28, _0x14b10b * 617);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[3], _0x572af4[4], _0x14b10b * 8);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 30, _0x14b10b * 141);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 40, _0x14b10b * 136, _0x14b10b * 40, _0x14b10b * 136, _0x14b10b * 50, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 63, _0x14b10b * 136, _0x14b10b * 63, _0x14b10b * 136, _0x14b10b * 76, _0x14b10b * 141);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 72.5, _0x14b10b * 161.5, _0x14b10b * 72.5, _0x14b10b * 161.5, _0x14b10b * 69, _0x14b10b * 182);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 61.5, _0x14b10b * 186.5, _0x14b10b * 61.5, _0x14b10b * 186.5, _0x14b10b * 54, _0x14b10b * 191);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 45, _0x14b10b * 186.5, _0x14b10b * 45, _0x14b10b * 186.5, _0x14b10b * 36, _0x14b10b * 182);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[3], _0x572af4[4], _0x14b10b * 8);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 42, _0x14b10b * 152);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 53, _0x14b10b * 152, _0x14b10b * 53, _0x14b10b * 152, _0x14b10b * 64, _0x14b10b * 152);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 62, _0x14b10b * 171, _0x14b10b * 62, _0x14b10b * 176, _0x14b10b * 55, _0x14b10b * 177);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 42, _0x14b10b * 176, _0x14b10b * 45, _0x14b10b * 174, _0x14b10b * 42, _0x14b10b * 152);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[5]);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 52, _0x14b10b * 28);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 67.5, _0x14b10b * 55, _0x14b10b * 67.5, _0x14b10b * 55, _0x14b10b * 83, _0x14b10b * 82);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 80, _0x14b10b * 106.5, _0x14b10b * 80, _0x14b10b * 106.5, _0x14b10b * 77, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 58, _0x14b10b * 147, _0x14b10b * 44, _0x14b10b * 141, _0x14b10b * 29, _0x14b10b * 131);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 26.5, _0x14b10b * 106.5, _0x14b10b * 26.5, _0x14b10b * 106.5, _0x14b10b * 24, _0x14b10b * 82);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[6], _0x572af4[7], _0x14b10b * 8);
  _0x2df5ba.beginPath();
  _0x2df5ba.lineCap = "round";
  _0x2df5ba.lineJoin = "round";
  _0x2df5ba.moveTo(_0x14b10b * 53, _0x14b10b * 53);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 61, _0x14b10b * 70, _0x14b10b * 61, _0x14b10b * 70, _0x14b10b * 69, _0x14b10b * 87);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 67, _0x14b10b * 106, _0x14b10b * 67, _0x14b10b * 106, _0x14b10b * 65, _0x14b10b * 125);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 54, _0x14b10b * 130, _0x14b10b * 51, _0x14b10b * 130, _0x14b10b * 41, _0x14b10b * 125);
  _0x2df5ba.bezierCurveTo(_0x14b10b * 39, _0x14b10b * 105, _0x14b10b * 39, _0x14b10b * 105, _0x14b10b * 37, _0x14b10b * 85);
  _0x2df5ba.closePath();
  fill_path(_0x2df5ba, _0x572af4[8]);
  return _0xe8b7d7;
}
function create_spear(_0x3c5201, _0x253fc7, _0x118814) {
  var _0x186360 = document.createElement("canvas");
  var _0x651214 = _0x186360.getContext("2d");
  _0x186360.width = _0x3c5201 * 81;
  _0x186360.height = _0x3c5201 * 350;
  _0x651214.globalAlpha = _0x253fc7 ? 0.6 : 1;
  _0x651214.translate(0, _0x3c5201 * 5);
  _0x651214.save();
  _0x651214.translate(_0x3c5201 * 35, _0x3c5201 * 160);
  _0x651214.rotate(0);
  round_rect(_0x651214, _0x3c5201 * -6, _0x3c5201 * -100.5, _0x3c5201 * 12, _0x3c5201 * 240, _0x3c5201 * 10);
  _0x651214.restore();
  fill_path(_0x651214, _0x118814[0]);
  _0x651214.translate(0, _0x3c5201 * -5);
  _0x651214.beginPath();
  _0x651214.lineCap = "round";
  _0x651214.lineJoin = "round";
  _0x651214.save();
  _0x651214.translate(_0x3c5201 * -6, _0x3c5201 * 11);
  _0x651214.moveTo(_0x3c5201 * 26.0714111328125, _0x3c5201 * 50.9);
  _0x651214.bezierCurveTo(_0x3c5201 * 32.0714111328125, _0x3c5201 * 35.892852783203125, _0x3c5201 * 39.0714111328125, _0x3c5201 * 18.892852783203125, _0x3c5201 * 45.0714111328125, _0x3c5201 * 7.892852783203125);
  _0x651214.bezierCurveTo(_0x3c5201 * 51.0714111328125, _0x3c5201 * 13.892852783203125, _0x3c5201 * 56.0714111328125, _0x3c5201 * 36.892852783203125, _0x3c5201 * 60.0714111328125, _0x3c5201 * 50.892852783203125);
  _0x651214.bezierCurveTo(_0x3c5201 * 52.5714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 52.5714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 45.0714111328125, _0x3c5201 * 66.89285278320312);
  _0x651214.bezierCurveTo(_0x3c5201 * 37.0714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 37.0714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 29.0714111328125, _0x3c5201 * 50.892852783203125);
  _0x651214.closePath();
  fill_path(_0x651214, _0x118814[0]);
  _0x651214.restore();
  _0x651214.globalAlpha = 1;
  _0x651214.save();
  _0x651214.translate(0, _0x3c5201 * -10);
  _0x651214.translate(_0x3c5201 * 45.0714111328125, _0x3c5201 * 149.39285278320312);
  _0x651214.rotate(0);
  round_rect(_0x651214, _0x3c5201 * -6, _0x3c5201 * -94.5, _0x3c5201 * 12, _0x3c5201 * 250, _0x3c5201 * 10);
  _0x651214.restore();
  fill_path(_0x651214, _0x118814[1], _0x118814[2], _0x3c5201 * 6);
  _0x651214.translate(0, _0x3c5201 * 0);
  _0x651214.beginPath();
  _0x651214.lineCap = "round";
  _0x651214.lineJoin = "round";
  _0x651214.moveTo(_0x3c5201 * 29.0714111328125, _0x3c5201 * 50.9);
  _0x651214.bezierCurveTo(_0x3c5201 * 32.0714111328125, _0x3c5201 * 35.892852783203125, _0x3c5201 * 39.0714111328125, _0x3c5201 * 18.892852783203125, _0x3c5201 * 45.0714111328125, _0x3c5201 * 7.892852783203125);
  _0x651214.bezierCurveTo(_0x3c5201 * 51.0714111328125, _0x3c5201 * 13.892852783203125, _0x3c5201 * 56.0714111328125, _0x3c5201 * 36.892852783203125, _0x3c5201 * 60.0714111328125, _0x3c5201 * 50.892852783203125);
  _0x651214.bezierCurveTo(_0x3c5201 * 52.5714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 52.5714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 45.0714111328125, _0x3c5201 * 66.89285278320312);
  _0x651214.bezierCurveTo(_0x3c5201 * 37.0714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 37.0714111328125, _0x3c5201 * 58.892852783203125, _0x3c5201 * 29.0714111328125, _0x3c5201 * 50.892852783203125);
  _0x651214.closePath();
  fill_path(_0x651214, _0x118814[3], _0x118814[4], _0x3c5201 * 6);
  return _0x186360;
}
function create_dragon_spear(_0x5ce2f9, _0x3ebfa2, _0x2d9b18) {
  var _0x3bbeb9 = document.createElement("canvas");
  var _0x38d5c2 = _0x3bbeb9.getContext("2d");
  _0x3bbeb9.width = _0x5ce2f9 * 43;
  _0x3bbeb9.height = _0x5ce2f9 * 209;
  _0x38d5c2.globalAlpha = _0x3ebfa2 ? 0.5 : 1;
  _0x38d5c2.translate(0, _0x5ce2f9 * 10);
  _0x38d5c2.translate(_0x5ce2f9 * 5, _0x5ce2f9 * 5);
  _0x38d5c2.save();
  _0x38d5c2.translate(_0x5ce2f9 * 21, _0x5ce2f9 * 102.5);
  round_rect(_0x38d5c2, _0x5ce2f9 * -4, _0x5ce2f9 * -76.5, _0x5ce2f9 * 8, _0x5ce2f9 * 163, _0x5ce2f9 * 10);
  _0x38d5c2.restore();
  fill_path(_0x38d5c2, _0x2d9b18[0]);
  _0x38d5c2.translate(0, _0x5ce2f9 * 10);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 20, _0x5ce2f9 * 10);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 25, _0x5ce2f9 * 25.5, _0x5ce2f9 * 25, _0x5ce2f9 * 25.5, _0x5ce2f9 * 30, _0x5ce2f9 * 41);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 25.5, _0x5ce2f9 * 38.5, _0x5ce2f9 * 25.5, _0x5ce2f9 * 38.5, _0x5ce2f9 * 21, _0x5ce2f9 * 36);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 16, _0x5ce2f9 * 38.5, _0x5ce2f9 * 16, _0x5ce2f9 * 38.5, _0x5ce2f9 * 11, _0x5ce2f9 * 41);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[0]);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 1);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 28, _0x5ce2f9 * 18, _0x5ce2f9 * 28, _0x5ce2f9 * 18, _0x5ce2f9 * 35, _0x5ce2f9 * 35);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 28.5, _0x5ce2f9 * 32, _0x5ce2f9 * 28.5, _0x5ce2f9 * 32, _0x5ce2f9 * 22, _0x5ce2f9 * 29);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14.5, _0x5ce2f9 * 32.5, _0x5ce2f9 * 14.5, _0x5ce2f9 * 32.5, _0x5ce2f9 * 7, _0x5ce2f9 * 36);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[0]);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 14, _0x5ce2f9 * 146);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 146, _0x5ce2f9 * 21, _0x5ce2f9 * 146, _0x5ce2f9 * 28, _0x5ce2f9 * 146);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27.5, _0x5ce2f9 * 147.5, _0x5ce2f9 * 27.5, _0x5ce2f9 * 147.5, _0x5ce2f9 * 27, _0x5ce2f9 * 149);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27, _0x5ce2f9 * 160, _0x5ce2f9 * 27, _0x5ce2f9 * 160, _0x5ce2f9 * 27, _0x5ce2f9 * 171);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 27.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 28, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 172, _0x5ce2f9 * 21, _0x5ce2f9 * 172, _0x5ce2f9 * 14, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14, _0x5ce2f9 * 171);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 15, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 15, _0x5ce2f9 * 160.5, _0x5ce2f9 * 15, _0x5ce2f9 * 160.5, _0x5ce2f9 * 15, _0x5ce2f9 * 149);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[0]);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 6);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 26.5, _0x5ce2f9 * 18.5, _0x5ce2f9 * 26.5, _0x5ce2f9 * 18.5, _0x5ce2f9 * 32, _0x5ce2f9 * 31);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27, _0x5ce2f9 * 29, _0x5ce2f9 * 27, _0x5ce2f9 * 29, _0x5ce2f9 * 22, _0x5ce2f9 * 27);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[0]);
  _0x38d5c2.translate(0, _0x5ce2f9 * -20);
  _0x38d5c2.globalAlpha = 1;
  _0x38d5c2.translate(0, _0x5ce2f9 * 10);
  _0x38d5c2.translate(_0x5ce2f9 * -5, _0x5ce2f9 * -5);
  _0x38d5c2.save();
  _0x38d5c2.translate(_0x5ce2f9 * 21, _0x5ce2f9 * 102.5);
  round_rect(_0x38d5c2, _0x5ce2f9 * -4, _0x5ce2f9 * -76.5, _0x5ce2f9 * 8, _0x5ce2f9 * 163, _0x5ce2f9 * 10);
  _0x38d5c2.restore();
  fill_path(_0x38d5c2, _0x2d9b18[1], _0x2d9b18[2], _0x5ce2f9 * 4);
  _0x38d5c2.translate(0, _0x5ce2f9 * 10);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 20, _0x5ce2f9 * 10);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 25, _0x5ce2f9 * 25.5, _0x5ce2f9 * 25, _0x5ce2f9 * 25.5, _0x5ce2f9 * 30, _0x5ce2f9 * 41);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 25.5, _0x5ce2f9 * 38.5, _0x5ce2f9 * 25.5, _0x5ce2f9 * 38.5, _0x5ce2f9 * 21, _0x5ce2f9 * 36);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 16, _0x5ce2f9 * 38.5, _0x5ce2f9 * 16, _0x5ce2f9 * 38.5, _0x5ce2f9 * 11, _0x5ce2f9 * 41);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[3], _0x2d9b18[4], _0x5ce2f9 * 4);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 1);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 28, _0x5ce2f9 * 18, _0x5ce2f9 * 28, _0x5ce2f9 * 18, _0x5ce2f9 * 35, _0x5ce2f9 * 35);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 28.5, _0x5ce2f9 * 32, _0x5ce2f9 * 28.5, _0x5ce2f9 * 32, _0x5ce2f9 * 22, _0x5ce2f9 * 29);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14.5, _0x5ce2f9 * 32.5, _0x5ce2f9 * 14.5, _0x5ce2f9 * 32.5, _0x5ce2f9 * 7, _0x5ce2f9 * 36);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[5], _0x2d9b18[6], _0x5ce2f9 * 4);
  _0x38d5c2.translate(0, _0x5ce2f9 * 0);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 14, _0x5ce2f9 * 146);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 146, _0x5ce2f9 * 21, _0x5ce2f9 * 146, _0x5ce2f9 * 28, _0x5ce2f9 * 146);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27.5, _0x5ce2f9 * 147.5, _0x5ce2f9 * 27.5, _0x5ce2f9 * 147.5, _0x5ce2f9 * 27, _0x5ce2f9 * 149);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27, _0x5ce2f9 * 160, _0x5ce2f9 * 27, _0x5ce2f9 * 160, _0x5ce2f9 * 27, _0x5ce2f9 * 171);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 27.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 28, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 172, _0x5ce2f9 * 21, _0x5ce2f9 * 172, _0x5ce2f9 * 14, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14, _0x5ce2f9 * 171);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 14.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 14.5, _0x5ce2f9 * 171.5, _0x5ce2f9 * 15, _0x5ce2f9 * 172);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 15, _0x5ce2f9 * 160.5, _0x5ce2f9 * 15, _0x5ce2f9 * 160.5, _0x5ce2f9 * 15, _0x5ce2f9 * 149);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[1], _0x2d9b18[2], _0x5ce2f9 * 4);
  _0x38d5c2.beginPath();
  _0x38d5c2.lineCap = "round";
  _0x38d5c2.lineJoin = "round";
  _0x38d5c2.moveTo(_0x5ce2f9 * 21, _0x5ce2f9 * 6);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 26.5, _0x5ce2f9 * 18.5, _0x5ce2f9 * 26.5, _0x5ce2f9 * 18.5, _0x5ce2f9 * 32, _0x5ce2f9 * 31);
  _0x38d5c2.bezierCurveTo(_0x5ce2f9 * 27, _0x5ce2f9 * 29, _0x5ce2f9 * 27, _0x5ce2f9 * 29, _0x5ce2f9 * 22, _0x5ce2f9 * 27);
  _0x38d5c2.closePath();
  fill_path(_0x38d5c2, _0x2d9b18[8]);
  return _0x3bbeb9;
}
function create_plus_chest(_0x5a5c31, _0x39ce03, _0x3025a9) {
  var _0x3aacf2 = document.createElement("canvas");
  var _0x34f5ee = _0x3aacf2.getContext("2d");
  _0x3aacf2.width = _0x5a5c31 * 200;
  _0x3aacf2.height = _0x5a5c31 * 200;
  _0x34f5ee.save();
  _0x34f5ee.translate(_0x5a5c31 * 112, _0x5a5c31 * 158);
  round_rect(_0x34f5ee, _0x5a5c31 * -86.5, _0x5a5c31 * -86, _0x5a5c31 * 150, _0x5a5c31 * 35, _0x5a5c31 * 20);
  _0x34f5ee.restore();
  fill_path(_0x34f5ee, _0x3025a9[0]);
  _0x34f5ee.save();
  _0x34f5ee.translate(_0x5a5c31 * 170, _0x5a5c31 * 100);
  round_rect(_0x34f5ee, _0x5a5c31 * -86.5, _0x5a5c31 * -86, _0x5a5c31 * 35, _0x5a5c31 * 150, _0x5a5c31 * 20);
  _0x34f5ee.restore();
  fill_path(_0x34f5ee, _0x3025a9[0]);
  return _0x3aacf2;
}
function create_chest_slot(_0x547c5b, _0x5f4c2e, _0x188f9a) {
  var _0x25ba44 = document.createElement("canvas");
  var _0x3c85eb = _0x25ba44.getContext("2d");
  _0x25ba44.width = _0x547c5b * 118;
  _0x25ba44.height = _0x547c5b * 129;
  _0x3c85eb.save();
  _0x3c85eb.translate(_0x547c5b * 90, _0x547c5b * 90);
  round_rect(_0x3c85eb, _0x547c5b * -86.5, _0x547c5b * -86, _0x547c5b * 110, _0x547c5b * 110, _0x547c5b * 15);
  _0x3c85eb.restore();
  fill_path(_0x3c85eb, _0x188f9a[0], _0x188f9a[1], 4);
  _0x3c85eb.save();
  round_rect(_0x3c85eb, _0x547c5b * 30, _0x547c5b * 115, _0x547c5b * 60, _0x547c5b * 5, _0x547c5b * 15);
  _0x3c85eb.restore();
  fill_path(_0x3c85eb, _0x188f9a[2], _0x188f9a[3], 4);
  _0x3c85eb.save();
  round_rect(_0x3c85eb, _0x547c5b * 50, _0x547c5b * 117, _0x547c5b * 20, _0x547c5b * 10, _0x547c5b * 15);
  _0x3c85eb.restore();
  fill_path(_0x3c85eb, _0x188f9a[2]);
  return _0x25ba44;
}
function create_chest(_0x381ef8, _0x1d0c3b, _0x5e3954) {
  var _0x399182 = document.createElement("canvas");
  var _0x3d723a = _0x399182.getContext("2d");
  _0x399182.width = _0x381ef8 * 165;
  _0x399182.height = _0x381ef8 * 123;
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 81, _0x381ef8 * 65);
  round_rect(_0x3d723a, _0x381ef8 * -78, _0x381ef8 * -54.5, _0x381ef8 * 156, _0x381ef8 * 109, _0x381ef8 * 20);
  _0x3d723a.restore();
  fill_path(_0x3d723a, _0x5e3954[0]);
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 81, _0x381ef8 * 58);
  round_rect(_0x3d723a, _0x381ef8 * -78, _0x381ef8 * -54.5, _0x381ef8 * 156, _0x381ef8 * 109, _0x381ef8 * 20);
  _0x3d723a.restore();
  fill_path(_0x3d723a, _0x5e3954[1], _0x5e3954[2], 4);
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 81, _0x381ef8 * 58);
  round_rect(_0x3d723a, _0x381ef8 * -69, _0x381ef8 * -47, _0x381ef8 * 138, _0x381ef8 * 93, _0x381ef8 * 15);
  _0x3d723a.restore();
  fill_path(_0x3d723a, _0x5e3954[3], _0x5e3954[4], 4);
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 79, _0x381ef8 * 54);
  round_rect(_0x3d723a, _0x381ef8 * -34, _0x381ef8 * -40, _0x381ef8 * 68, _0x381ef8 * 88, _0x381ef8 * 13);
  _0x3d723a.restore();
  fill_path(_0x3d723a, undefined, _0x5e3954[5], 4);
  _0x3d723a.beginPath();
  _0x3d723a.lineCap = "round";
  _0x3d723a.lineJoin = "round";
  _0x3d723a.moveTo(_0x381ef8 * 44, _0x381ef8 * 13);
  _0x3d723a.bezierCurveTo(_0x381ef8 * 43.5, _0x381ef8 * 55, _0x381ef8 * 43.5, _0x381ef8 * 55, _0x381ef8 * 43, _0x381ef8 * 101);
  _0x3d723a.closePath();
  fill_path(_0x3d723a, undefined, _0x5e3954[6], 4);
  _0x3d723a.beginPath();
  _0x3d723a.lineCap = "round";
  _0x3d723a.lineJoin = "round";
  _0x3d723a.moveTo(_0x381ef8 * 115, _0x381ef8 * 13);
  _0x3d723a.bezierCurveTo(_0x381ef8 * 115, _0x381ef8 * 56, _0x381ef8 * 115, _0x381ef8 * 56, _0x381ef8 * 115, _0x381ef8 * 101);
  _0x3d723a.closePath();
  fill_path(_0x3d723a, undefined, _0x5e3954[6], 4);
  _0x3d723a.beginPath();
  _0x3d723a.lineCap = "round";
  _0x3d723a.lineJoin = "round";
  _0x3d723a.moveTo(_0x381ef8 * 35, _0x381ef8 * 6);
  _0x3d723a.bezierCurveTo(_0x381ef8 * 35, _0x381ef8 * 56, _0x381ef8 * 36, _0x381ef8 * 109, _0x381ef8 * 35, _0x381ef8 * 110);
  _0x3d723a.closePath();
  fill_path(_0x3d723a, undefined, _0x5e3954[7], 4);
  _0x3d723a.beginPath();
  _0x3d723a.lineCap = "round";
  _0x3d723a.lineJoin = "round";
  _0x3d723a.moveTo(_0x381ef8 * 123, _0x381ef8 * 6);
  _0x3d723a.bezierCurveTo(_0x381ef8 * 123, _0x381ef8 * 56, _0x381ef8 * 123, _0x381ef8 * 56, _0x381ef8 * 123, _0x381ef8 * 110);
  _0x3d723a.closePath();
  fill_path(_0x3d723a, undefined, _0x5e3954[7], 4);
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 79, _0x381ef8 * 113);
  round_rect(_0x3d723a, _0x381ef8 * -18, _0x381ef8 * -2, _0x381ef8 * 36, _0x381ef8 * 4, _0x381ef8 * 20);
  _0x3d723a.restore();
  fill_path(_0x3d723a, undefined, _0x5e3954[8], 4);
  _0x3d723a.save();
  _0x3d723a.translate(_0x381ef8 * 75, _0x381ef8 * 118);
  round_rect(_0x3d723a, _0x381ef8 * -6, _0x381ef8 * -2.5, _0x381ef8 * 20, _0x381ef8 * 5, _0x381ef8 * 20);
  _0x3d723a.restore();
  fill_path(_0x3d723a, _0x5e3954[8]);
  return _0x399182;
}
function create_bag(_0x37fa0d, _0x42a627, _0x346aec) {
  var _0xc114c = document.createElement("canvas");
  var _0x49ee0a = _0xc114c.getContext("2d");
  _0xc114c.width = _0x37fa0d * 86;
  _0xc114c.height = _0x37fa0d * 45;
  _0x49ee0a.beginPath();
  _0x49ee0a.lineCap = "round";
  _0x49ee0a.lineJoin = "round";
  _0x49ee0a.moveTo(_0x37fa0d * 15, _0x37fa0d * 15);
  _0x49ee0a.bezierCurveTo(_0x37fa0d * 16, _0x37fa0d * 15, _0x37fa0d * 19.5, _0x37fa0d * 9, _0x37fa0d * 24, _0x37fa0d * 2);
  _0x49ee0a.bezierCurveTo(_0x37fa0d * 41, _0x37fa0d * 2, _0x37fa0d * 41, _0x37fa0d * 2, _0x37fa0d * 58, _0x37fa0d * 2);
  _0x49ee0a.bezierCurveTo(_0x37fa0d * 64, _0x37fa0d * 13, _0x37fa0d * 61, _0x37fa0d * 8, _0x37fa0d * 65, _0x37fa0d * 13);
  _0x49ee0a.closePath();
  fill_path(_0x49ee0a, _0x346aec[0], _0x346aec[1], 4);
  _0x49ee0a.save();
  _0x49ee0a.translate(_0x37fa0d * 43, _0x37fa0d * 27);
  _0x49ee0a.rotate(0);
  round_rect(_0x49ee0a, _0x37fa0d * -40, _0x37fa0d * -15, _0x37fa0d * 80, _0x37fa0d * 30, _0x37fa0d * 10);
  _0x49ee0a.restore();
  fill_path(_0x49ee0a, _0x346aec[0], _0x346aec[1], 4);
  _0x49ee0a.save();
  _0x49ee0a.translate(_0x37fa0d * 43, _0x37fa0d * 33);
  _0x49ee0a.rotate(0);
  round_rect(_0x49ee0a, _0x37fa0d * -17, _0x37fa0d * -4.5, _0x37fa0d * 34, _0x37fa0d * 9, _0x37fa0d * 10);
  _0x49ee0a.restore();
  fill_path(_0x49ee0a, _0x346aec[0], _0x346aec[1], 4);
  return _0xc114c;
}
function create_fur(_0x30feb5, _0x3bb270, _0x4003b8) {
  var _0x4b1fe0 = document.createElement("canvas");
  var _0x1d9027 = _0x4b1fe0.getContext("2d");
  _0x4b1fe0.width = _0x30feb5 * 92;
  _0x4b1fe0.height = _0x30feb5 * 108;
  _0x1d9027.beginPath();
  _0x1d9027.lineCap = "round";
  _0x1d9027.lineJoin = "round";
  _0x1d9027.moveTo(_0x30feb5 * 31, _0x30feb5 * 10);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 37, _0x30feb5 * 2, _0x30feb5 * 49, _0x30feb5 * 0, _0x30feb5 * 61, _0x30feb5 * 15);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 81, _0x30feb5 * 31, _0x30feb5 * 78, _0x30feb5 * 25, _0x30feb5 * 79, _0x30feb5 * 37);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 76, _0x30feb5 * 44, _0x30feb5 * 81, _0x30feb5 * 56, _0x30feb5 * 85, _0x30feb5 * 63);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 91, _0x30feb5 * 71, _0x30feb5 * 90, _0x30feb5 * 78, _0x30feb5 * 83, _0x30feb5 * 84);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 60, _0x30feb5 * 98, _0x30feb5 * 67, _0x30feb5 * 95, _0x30feb5 * 57, _0x30feb5 * 102);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 47, _0x30feb5 * 106, _0x30feb5 * 43, _0x30feb5 * 106, _0x30feb5 * 31, _0x30feb5 * 98);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 22, _0x30feb5 * 91, _0x30feb5 * 17, _0x30feb5 * 89, _0x30feb5 * 7, _0x30feb5 * 84);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 1, _0x30feb5 * 77, _0x30feb5 * 4, _0x30feb5 * 73, _0x30feb5 * 7, _0x30feb5 * 60);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 11, _0x30feb5 * 50, _0x30feb5 * 5, _0x30feb5 * 32, _0x30feb5 * 15, _0x30feb5 * 27);
  _0x1d9027.bezierCurveTo(_0x30feb5 * 26, _0x30feb5 * 18, _0x30feb5 * 26, _0x30feb5 * 24, _0x30feb5 * 31, _0x30feb5 * 10);
  _0x1d9027.closePath();
  fill_path(_0x1d9027, _0x4003b8[0], _0x4003b8[1], 4);
  return _0x4b1fe0;
}
function create_verified(_0x2a5df5, _0x5350ad) {
  var _0x2f38f8 = document.createElement("canvas");
  var _0x193aea = _0x2f38f8.getContext("2d");
  _0x2f38f8.width = _0x2a5df5 * 60;
  _0x2f38f8.height = _0x2a5df5 * 60;
  _0x193aea.translate(_0x2a5df5 * -25, _0x2a5df5 * -25);
  _0x193aea.translate(0, _0x2a5df5 * 5);
  _0x193aea.beginPath();
  _0x193aea.lineCap = "round";
  _0x193aea.lineJoin = "round";
  _0x193aea.moveTo(_0x2a5df5 * 24, _0x2a5df5 * 50);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 32.5, _0x2a5df5 * 54.5, _0x2a5df5 * 32.5, _0x2a5df5 * 54.5, _0x2a5df5 * 41, _0x2a5df5 * 59);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 57, _0x2a5df5 * 47, _0x2a5df5 * 57, _0x2a5df5 * 47, _0x2a5df5 * 73, _0x2a5df5 * 35);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 57, _0x2a5df5 * 53, _0x2a5df5 * 57, _0x2a5df5 * 53, _0x2a5df5 * 41, _0x2a5df5 * 71);
  _0x193aea.closePath();
  fill_path(_0x193aea, _0x5350ad[0]);
  _0x193aea.translate(0, _0x2a5df5 * -5);
  _0x193aea.beginPath();
  _0x193aea.lineCap = "round";
  _0x193aea.lineJoin = "round";
  _0x193aea.moveTo(_0x2a5df5 * 24, _0x2a5df5 * 50);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 32.5, _0x2a5df5 * 54.5, _0x2a5df5 * 32.5, _0x2a5df5 * 54.5, _0x2a5df5 * 41, _0x2a5df5 * 59);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 57, _0x2a5df5 * 47, _0x2a5df5 * 57, _0x2a5df5 * 47, _0x2a5df5 * 73, _0x2a5df5 * 35);
  _0x193aea.bezierCurveTo(_0x2a5df5 * 57, _0x2a5df5 * 53, _0x2a5df5 * 57, _0x2a5df5 * 53, _0x2a5df5 * 41, _0x2a5df5 * 71);
  _0x193aea.closePath();
  fill_path(_0x193aea, _0x5350ad[1]);
  return _0x2f38f8;
}
function create_earmuff(_0x5a7630, _0xf42299, _0x5c4e41) {
  var _0x449fc1 = document.createElement("canvas");
  var _0x3828e4 = _0x449fc1.getContext("2d");
  _0x449fc1.width = _0x5a7630 * 151;
  _0x449fc1.height = _0x5a7630 * 80;
  _0x3828e4.beginPath();
  _0x3828e4.lineCap = "round";
  _0x3828e4.lineJoin = "round";
  _0x3828e4.moveTo(_0x5a7630 * 133, _0x5a7630 * 54);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 136, _0x5a7630 * 18, _0x5a7630 * 129, _0x5a7630 * 18, _0x5a7630 * 114, _0x5a7630 * 13);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 51, _0x5a7630 * 0, _0x5a7630 * 36, _0x5a7630 * 16, _0x5a7630 * 34, _0x5a7630 * 16);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 8, _0x5a7630 * 28, _0x5a7630 * 22, _0x5a7630 * 56, _0x5a7630 * 21, _0x5a7630 * 57);
  _0x3828e4.closePath();
  fill_path(_0x3828e4, _0x5c4e41[2], _0x5c4e41[3], 4);
  _0x3828e4.beginPath();
  _0x3828e4.lineCap = "round";
  _0x3828e4.lineJoin = "round";
  _0x3828e4.moveTo(_0x5a7630 * 130, _0x5a7630 * 40);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 132, _0x5a7630 * 35, _0x5a7630 * 132, _0x5a7630 * 30, _0x5a7630 * 132, _0x5a7630 * 29);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 145, _0x5a7630 * 38, _0x5a7630 * 144, _0x5a7630 * 43, _0x5a7630 * 137, _0x5a7630 * 54);
  _0x3828e4.closePath();
  fill_path(_0x3828e4, _0x5c4e41[0], _0x5c4e41[1], 4);
  _0x3828e4.beginPath();
  _0x3828e4.lineCap = "round";
  _0x3828e4.lineJoin = "round";
  _0x3828e4.moveTo(_0x5a7630 * 20, _0x5a7630 * 33);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 24, _0x5a7630 * 44, _0x5a7630 * 215, _0x5a7630 * 39, _0x5a7630 * 23, _0x5a7630 * 44);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 19, _0x5a7630 * 49, _0x5a7630 * 19, _0x5a7630 * 49, _0x5a7630 * 15, _0x5a7630 * 54);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 4, _0x5a7630 * 43, _0x5a7630 * 10, _0x5a7630 * 35, _0x5a7630 * 20, _0x5a7630 * 32);
  _0x3828e4.closePath();
  fill_path(_0x3828e4, _0x5c4e41[0], _0x5c4e41[1], 4);
  _0x3828e4.beginPath();
  _0x3828e4.lineCap = "round";
  _0x3828e4.lineJoin = "round";
  _0x3828e4.moveTo(_0x5a7630 * 18, _0x5a7630 * 52);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 24, _0x5a7630 * 31, _0x5a7630 * 34, _0x5a7630 * 25, _0x5a7630 * 75, _0x5a7630 * 23);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 130, _0x5a7630 * 24, _0x5a7630 * 129, _0x5a7630 * 32, _0x5a7630 * 134, _0x5a7630 * 51);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 138, _0x5a7630 * 70, _0x5a7630 * 126, _0x5a7630 * 72, _0x5a7630 * 90, _0x5a7630 * 73);
  _0x3828e4.bezierCurveTo(_0x5a7630 * 18, _0x5a7630 * 72, _0x5a7630 * 15, _0x5a7630 * 68, _0x5a7630 * 18, _0x5a7630 * 54);
  _0x3828e4.closePath();
  fill_path(_0x3828e4, _0x5c4e41[0], _0x5c4e41[1], 4);
  return _0x449fc1;
}
function create_cap_scarf(_0x2c9cc5, _0x2bd5c4, _0x55535e) {
  var _0x1157e6 = document.createElement("canvas");
  var _0x9e745d = _0x1157e6.getContext("2d");
  _0x1157e6.width = _0x2c9cc5 * 138;
  _0x1157e6.height = _0x2c9cc5 * 133;
  _0x9e745d.globalAlpha = _0x2bd5c4 ? 0.3 : 1;
  _0x9e745d.translate(0, _0x2c9cc5 * 5);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 26, _0x2c9cc5 * 79.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 13, _0x2c9cc5 * 84.640625, _0x2c9cc5 * 9, _0x2c9cc5 * 86.640625, _0x2c9cc5 * 7, _0x2c9cc5 * 78.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 6, _0x2c9cc5 * 69.640625, _0x2c9cc5 * 15, _0x2c9cc5 * 67.640625, _0x2c9cc5 * 31, _0x2c9cc5 * 62.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 63, _0x2c9cc5 * 55.640625, _0x2c9cc5 * 85, _0x2c9cc5 * 57.640625, _0x2c9cc5 * 104, _0x2c9cc5 * 63.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 131, _0x2c9cc5 * 69.640625, _0x2c9cc5 * 132, _0x2c9cc5 * 71.640625, _0x2c9cc5 * 131, _0x2c9cc5 * 78.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 131, _0x2c9cc5 * 91.640625, _0x2c9cc5 * 112, _0x2c9cc5 * 80.640625, _0x2c9cc5 * 91, _0x2c9cc5 * 75.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 51, _0x2c9cc5 * 70.640625, _0x2c9cc5 * 45, _0x2c9cc5 * 74.640625, _0x2c9cc5 * 28, _0x2c9cc5 * 78.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[0]);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 8, _0x2c9cc5 * 82.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 40, _0x2c9cc5 * 107.640625, _0x2c9cc5 * 53, _0x2c9cc5 * 104.640625, _0x2c9cc5 * 67, _0x2c9cc5 * 106.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 101, _0x2c9cc5 * 103.640625, _0x2c9cc5 * 117, _0x2c9cc5 * 93.640625, _0x2c9cc5 * 127, _0x2c9cc5 * 84.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 135, _0x2c9cc5 * 95.640625, _0x2c9cc5 * 131, _0x2c9cc5 * 107.640625, _0x2c9cc5 * 110, _0x2c9cc5 * 118.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 78, _0x2c9cc5 * 129.640625, _0x2c9cc5 * 67, _0x2c9cc5 * 130.640625, _0x2c9cc5 * 27, _0x2c9cc5 * 119.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 0, _0x2c9cc5 * 105.640625, _0x2c9cc5 * 8, _0x2c9cc5 * 83.640625, _0x2c9cc5 * 10, _0x2c9cc5 * 84.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[0]);
  _0x9e745d.globalAlpha = 1;
  _0x9e745d.translate(0, _0x2c9cc5 * -5);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 8, _0x2c9cc5 * 73.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 7, _0x2c9cc5 * 23.640625, _0x2c9cc5 * 33, _0x2c9cc5 * 19.640625, _0x2c9cc5 * 71, _0x2c9cc5 * 17.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 129, _0x2c9cc5 * 19.640625, _0x2c9cc5 * 130, _0x2c9cc5 * 45.640625, _0x2c9cc5 * 130, _0x2c9cc5 * 76.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 90, _0x2c9cc5 * 63.640625, _0x2c9cc5 * 85, _0x2c9cc5 * 63.640625, _0x2c9cc5 * 73, _0x2c9cc5 * 63.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 38, _0x2c9cc5 * 63.640625, _0x2c9cc5 * 33, _0x2c9cc5 * 66.640625, _0x2c9cc5 * 8, _0x2c9cc5 * 73.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[1], _0x55535e[2], _0x2c9cc5 * 4);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 72, _0x2c9cc5 * 28.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 51, _0x2c9cc5 * 25.640625, _0x2c9cc5 * 56, _0x2c9cc5 * 7.640625, _0x2c9cc5 * 70, _0x2c9cc5 * 5.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 94, _0x2c9cc5 * 7.640625, _0x2c9cc5 * 87, _0x2c9cc5 * 29.640625, _0x2c9cc5 * 72, _0x2c9cc5 * 28.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[3], _0x55535e[2], _0x2c9cc5 * 4);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 51, _0x2c9cc5 * 26.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 42, _0x2c9cc5 * 29.640625, _0x2c9cc5 * 43, _0x2c9cc5 * 31.640625, _0x2c9cc5 * 42, _0x2c9cc5 * 37.640625);
  fill_path(_0x9e745d, undefined, _0x55535e[2], _0x2c9cc5 * 4);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 90, _0x2c9cc5 * 26.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 100, _0x2c9cc5 * 28.640625, _0x2c9cc5 * 98, _0x2c9cc5 * 34.640625, _0x2c9cc5 * 99, _0x2c9cc5 * 38.640625);
  fill_path(_0x9e745d, undefined, _0x55535e[2], _0x2c9cc5 * 4);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 26, _0x2c9cc5 * 79.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 13, _0x2c9cc5 * 84.640625, _0x2c9cc5 * 9, _0x2c9cc5 * 86.640625, _0x2c9cc5 * 7, _0x2c9cc5 * 78.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 6, _0x2c9cc5 * 69.640625, _0x2c9cc5 * 15, _0x2c9cc5 * 67.640625, _0x2c9cc5 * 31, _0x2c9cc5 * 62.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 63, _0x2c9cc5 * 55.640625, _0x2c9cc5 * 85, _0x2c9cc5 * 57.640625, _0x2c9cc5 * 104, _0x2c9cc5 * 63.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 131, _0x2c9cc5 * 69.640625, _0x2c9cc5 * 132, _0x2c9cc5 * 71.640625, _0x2c9cc5 * 131, _0x2c9cc5 * 78.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 131, _0x2c9cc5 * 91.640625, _0x2c9cc5 * 112, _0x2c9cc5 * 80.640625, _0x2c9cc5 * 91, _0x2c9cc5 * 75.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 51, _0x2c9cc5 * 70.640625, _0x2c9cc5 * 45, _0x2c9cc5 * 74.640625, _0x2c9cc5 * 28, _0x2c9cc5 * 78.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[3], _0x55535e[4], _0x2c9cc5 * 4);
  _0x9e745d.beginPath();
  _0x9e745d.lineCap = "round";
  _0x9e745d.lineJoin = "round";
  _0x9e745d.moveTo(_0x2c9cc5 * 8, _0x2c9cc5 * 82.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 40, _0x2c9cc5 * 107.640625, _0x2c9cc5 * 53, _0x2c9cc5 * 104.640625, _0x2c9cc5 * 67, _0x2c9cc5 * 106.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 101, _0x2c9cc5 * 103.640625, _0x2c9cc5 * 117, _0x2c9cc5 * 93.640625, _0x2c9cc5 * 127, _0x2c9cc5 * 84.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 135, _0x2c9cc5 * 95.640625, _0x2c9cc5 * 131, _0x2c9cc5 * 107.640625, _0x2c9cc5 * 110, _0x2c9cc5 * 118.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 78, _0x2c9cc5 * 129.640625, _0x2c9cc5 * 67, _0x2c9cc5 * 130.640625, _0x2c9cc5 * 27, _0x2c9cc5 * 119.640625);
  _0x9e745d.bezierCurveTo(_0x2c9cc5 * 0, _0x2c9cc5 * 105.640625, _0x2c9cc5 * 8, _0x2c9cc5 * 83.640625, _0x2c9cc5 * 10, _0x2c9cc5 * 84.640625);
  _0x9e745d.closePath();
  fill_path(_0x9e745d, _0x55535e[3], _0x55535e[4], _0x2c9cc5 * 4);
  return _0x1157e6;
}
function create_spike(_0x2b7d4e, _0x4ce39c, _0x24711e) {
  var _0x2ce597 = document.createElement("canvas");
  var _0x384548 = _0x2ce597.getContext("2d");
  var _0x20c8d0 = _0x2b7d4e * 170;
  var _0x5af418 = _0x2b7d4e * 172;
  var _0x25495c = _0x20c8d0 / 2;
  var _0x369bf6 = _0x5af418 / 2;
  _0x2ce597.width = _0x20c8d0;
  _0x2ce597.height = _0x5af418;
  _0x384548.translate(_0x25495c, _0x369bf6 + _0x2b7d4e * 7);
  _0x384548.globalAlpha = _0x4ce39c ? 0.5 : 0;
  circle(_0x384548, 0, 0, _0x2b7d4e * 60);
  fill_path(_0x384548, _0x24711e[0]);
  _0x384548.globalAlpha = 1;
  _0x384548.translate(0, _0x2b7d4e * -7);
  _0x384548.save();
  for (var _0x2c6a99 = 0; _0x2c6a99 < 10; _0x2c6a99++) {
    _0x384548.rotate(Math.PI / 5);
    _0x384548.save();
    _0x384548.translate(_0x2b7d4e * 65, 0);
    round_regular_polygon(_0x384548, 3, _0x2b7d4e * 20, _0x2b7d4e * 4);
    fill_path(_0x384548, _0x24711e[1], _0x24711e[2], _0x2b7d4e * 4);
    _0x384548.restore();
  }
  _0x384548.restore();
  circle(_0x384548, 0, 0, _0x2b7d4e * 60, 0);
  fill_path(_0x384548, _0x24711e[3], _0x24711e[4], _0x2b7d4e * 4);
  circle(_0x384548, 0, 0, _0x2b7d4e * 40);
  fill_path(_0x384548, _0x24711e[5]);
  circle(_0x384548, 0, 0, _0x2b7d4e * 25);
  fill_path(_0x384548, _0x24711e[6], _0x24711e[7], _0x2b7d4e * 8);
  return _0x2ce597;
}
function create_spiketimer(_0xab78d3, _0x524a0b) {
  var _0x1e5c94 = document.createElement("canvas");
  var _0x2c8ab1 = _0x1e5c94.getContext("2d");
  var _0x3c6f9d = _0xab78d3 * 170;
  var _0x3c71e1 = _0xab78d3 * 172;
  var _0x52fe3c = _0x3c6f9d / 2;
  var _0x4419b0 = _0x3c71e1 / 2;
  _0x1e5c94.width = _0x3c6f9d;
  _0x1e5c94.height = _0x3c71e1;
  _0x2c8ab1.translate(_0x52fe3c, _0x4419b0);
  _0x2c8ab1.save();
  for (var _0x4eed23 = 0; _0x4eed23 < 10; _0x4eed23++) {
    _0x2c8ab1.rotate(Math.PI / 5);
    _0x2c8ab1.save();
    _0x2c8ab1.translate(_0xab78d3 * 65, 0);
    round_regular_polygon(_0x2c8ab1, 3, _0xab78d3 * 18, _0xab78d3 * 4);
    fill_path(_0x2c8ab1, _0x524a0b[0]);
    _0x2c8ab1.restore();
  }
  _0x2c8ab1.restore();
  circle(_0x2c8ab1, 0, 0, _0xab78d3 * 40, 0);
  fill_path(_0x2c8ab1, undefined, _0x524a0b[0], _0xab78d3 * 6);
  circle(_0x2c8ab1, 0, 0, _0xab78d3 * 20, 0);
  fill_path(_0x2c8ab1, _0x524a0b[0]);
  return _0x1e5c94;
}
function create_spike_stone(_0x4d759a, _0x41c8a9, _0x12a882) {
  var _0x1d80a6 = document.createElement("canvas");
  var _0x312771 = _0x1d80a6.getContext("2d");
  _0x1d80a6.width = _0x4d759a * 170;
  _0x1d80a6.height = _0x4d759a * 170;
  _0x312771.globalAlpha = _0x41c8a9 ? 0.5 : 1;
  _0x312771.translate(0, _0x4d759a * 5);
  _0x312771.save();
  _0x312771.translate(_0x4d759a * 85, _0x4d759a * 88);
  _0x312771.rotate(1.4);
  round_regular_polygon(_0x312771, 7, _0x4d759a * 60, _0x4d759a * 10);
  _0x312771.restore();
  fill_path(_0x312771, _0x12a882[0]);
  _0x312771.globalAlpha = 1;
  _0x312771.translate(_0x4d759a * 85, _0x4d759a * 80);
  for (var _0x25b4ab = 0; _0x25b4ab < 10; _0x25b4ab++) {
    _0x312771.rotate(Math.PI / 5);
    _0x312771.save();
    _0x312771.translate(_0x4d759a * 65, 0);
    round_regular_polygon(_0x312771, 3, _0x4d759a * 21, _0x4d759a * 4);
    fill_path(_0x312771, _0x12a882[1], _0x12a882[2], _0x4d759a * 4);
    _0x312771.restore();
  }
  _0x312771.save();
  _0x312771.translate(_0x4d759a * 0, _0x4d759a * 0);
  _0x312771.rotate(1.4);
  round_regular_polygon(_0x312771, 7, _0x4d759a * 60, _0x4d759a * 10);
  fill_path(_0x312771, _0x12a882[3], _0x12a882[4], _0x4d759a * 4);
  _0x312771.rotate(0.64);
  round_regular_polygon(_0x312771, 7, _0x4d759a * 40, _0x4d759a * 10);
  fill_path(_0x312771, _0x12a882[5], _0x12a882[6], _0x4d759a * 4);
  _0x312771.rotate(0.12);
  round_regular_polygon(_0x312771, 7, _0x4d759a * 23, _0x4d759a * 5);
  _0x312771.restore();
  fill_path(_0x312771, _0x12a882[7]);
  return _0x1d80a6;
}
function create_spike_gold(_0x27f338, _0x4d2a0e, _0x5ce343) {
  var _0x1f1751 = document.createElement("canvas");
  var _0x308f59 = _0x1f1751.getContext("2d");
  _0x1f1751.width = _0x27f338 * 170;
  _0x1f1751.height = _0x27f338 * 170;
  _0x308f59.globalAlpha = _0x4d2a0e ? 0.5 : 1;
  _0x308f59.translate(0, _0x27f338 * 3);
  _0x308f59.save();
  _0x308f59.translate(_0x27f338 * 85, _0x27f338 * 95);
  _0x308f59.rotate(1.4);
  round_regular_polygon(_0x308f59, 7, _0x27f338 * 60, _0x27f338 * 10);
  _0x308f59.restore();
  fill_path(_0x308f59, _0x5ce343[0]);
  _0x308f59.globalAlpha = 1;
  _0x308f59.translate(_0x27f338 * 85, _0x27f338 * 82);
  for (var _0x25973c = 0; _0x25973c < 10; _0x25973c++) {
    _0x308f59.rotate(Math.PI / 5);
    _0x308f59.save();
    _0x308f59.translate(_0x27f338 * 65, 0);
    round_regular_polygon(_0x308f59, 3, _0x27f338 * 21, _0x27f338 * 4);
    fill_path(_0x308f59, _0x5ce343[1], _0x5ce343[2], _0x27f338 * 4);
    _0x308f59.restore();
  }
  _0x308f59.save();
  _0x308f59.translate(_0x27f338 * 0, _0x27f338 * 0);
  _0x308f59.rotate(1);
  round_regular_polygon(_0x308f59, 8, _0x27f338 * 60, _0x27f338 * 10);
  fill_path(_0x308f59, _0x5ce343[3], _0x5ce343[4], _0x27f338 * 4);
  _0x308f59.rotate(0.56);
  round_regular_polygon(_0x308f59, 8, _0x27f338 * 40, _0x27f338 * 10);
  fill_path(_0x308f59, _0x5ce343[5], _0x5ce343[6], _0x27f338 * 4);
  _0x308f59.rotate(0.28);
  round_regular_polygon(_0x308f59, 8, _0x27f338 * 28, _0x27f338 * 8);
  fill_path(_0x308f59, _0x5ce343[7]);
  _0x308f59.restore();
  return _0x1f1751;
}
function create_spike_diamond(_0x556a59, _0x5a56db, _0x327f64) {
  var _0x287f59 = document.createElement("canvas");
  var _0x4a1118 = _0x287f59.getContext("2d");
  _0x287f59.width = _0x556a59 * 170;
  _0x287f59.height = _0x556a59 * 170;
  _0x4a1118.translate(0, _0x556a59 * 3);
  _0x4a1118.globalAlpha = _0x5a56db ? 0.5 : 1;
  _0x4a1118.save();
  _0x4a1118.translate(_0x556a59 * 85, _0x556a59 * 95);
  _0x4a1118.rotate(1.4);
  round_regular_polygon(_0x4a1118, 7, _0x556a59 * 60, _0x556a59 * 10);
  _0x4a1118.restore();
  fill_path(_0x4a1118, _0x327f64[0]);
  _0x4a1118.globalAlpha = 1;
  _0x4a1118.translate(_0x556a59 * 85, _0x556a59 * 82);
  for (var _0x2f541b = 0; _0x2f541b < 10; _0x2f541b++) {
    _0x4a1118.rotate(Math.PI / 5);
    _0x4a1118.save();
    _0x4a1118.translate(_0x556a59 * 65, 0);
    round_regular_polygon(_0x4a1118, 3, _0x556a59 * 21, _0x556a59 * 4);
    fill_path(_0x4a1118, _0x327f64[1], _0x327f64[2], _0x556a59 * 4);
    _0x4a1118.restore();
  }
  _0x4a1118.save();
  _0x4a1118.translate(_0x556a59 * 0, _0x556a59 * 0);
  _0x4a1118.rotate(0.2);
  round_regular_polygon(_0x4a1118, 9, _0x556a59 * 60, _0x556a59 * 10);
  fill_path(_0x4a1118, _0x327f64[3], _0x327f64[4], _0x556a59 * 4);
  _0x4a1118.rotate(-0.32);
  round_regular_polygon(_0x4a1118, 9, _0x556a59 * 38, _0x556a59 * 10);
  fill_path(_0x4a1118, _0x327f64[5], _0x327f64[6], _0x556a59 * 4);
  _0x4a1118.rotate(0.68);
  round_regular_polygon(_0x4a1118, 9, _0x556a59 * 20, _0x556a59 * 8);
  fill_path(_0x4a1118, _0x327f64[7], _0x327f64[8], _0x556a59 * 6);
  _0x4a1118.restore();
  return _0x287f59;
}
function create_hammer(_0xe3813, _0x4b36a4, _0x40eceb) {
  var _0x97a80 = document.createElement("canvas");
  var _0x12c044 = _0x97a80.getContext("2d");
  _0x97a80.width = _0xe3813 * 69;
  _0x97a80.height = _0xe3813 * 120;
  _0x12c044.globalAlpha = _0x4b36a4 ? 0.5 : 1;
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 30, _0xe3813 * 84);
  round_rect(_0x12c044, _0xe3813 * -6, _0xe3813 * -66.5, _0xe3813 * 8, _0xe3813 * 100, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[0]);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 30, _0xe3813 * 45);
  round_rect(_0x12c044, _0xe3813 * -9.5, _0xe3813 * -6.5, _0xe3813 * 16, _0xe3813 * 13, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[0]);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 30, _0xe3813 * 17);
  round_rect(_0x12c044, _0xe3813 * -7.5, _0xe3813 * -5.5, _0xe3813 * 12, _0xe3813 * 11, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[0]);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 30, _0xe3813 * 31);
  round_rect(_0x12c044, _0xe3813 * -26, _0xe3813 * -14.5, _0xe3813 * 52, _0xe3813 * 29, _0xe3813 * 5);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[0]);
  _0x12c044.globalAlpha = 1;
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 36, _0xe3813 * 79.140625);
  round_rect(_0x12c044, _0xe3813 * -6, _0xe3813 * -66.5, _0xe3813 * 8, _0xe3813 * 100, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[1], _0x40eceb[2], _0xe3813 * 3);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 35, _0xe3813 * 40.140625);
  round_rect(_0x12c044, _0xe3813 * -9.5, _0xe3813 * -6.5, _0xe3813 * 16, _0xe3813 * 13, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[3], _0x40eceb[4], _0xe3813 * 3);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 35, _0xe3813 * 12.140625);
  round_rect(_0x12c044, _0xe3813 * -7.5, _0xe3813 * -5.5, _0xe3813 * 12, _0xe3813 * 11, _0xe3813 * 10);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[3], _0x40eceb[4], _0xe3813 * 3);
  _0x12c044.save();
  _0x12c044.translate(_0xe3813 * 34.5, _0xe3813 * 26.140625);
  round_rect(_0x12c044, _0xe3813 * -26, _0xe3813 * -14.5, _0xe3813 * 52, _0xe3813 * 29, _0xe3813 * 5);
  _0x12c044.restore();
  fill_path(_0x12c044, _0x40eceb[3], _0x40eceb[4], _0xe3813 * 3);
  return _0x97a80;
}
function create_clock_day(_0x463d8e) {
  var _0x147a79 = document.createElement("canvas");
  var _0x447cf2 = _0x147a79.getContext("2d");
  _0x147a79.width = _0x463d8e * 321;
  _0x147a79.height = _0x463d8e * 345;
  _0x447cf2.translate(0, _0x463d8e * 5);
  _0x447cf2.translate(0, _0x463d8e * 20);
  circle(_0x447cf2, _0x463d8e * 160.5, _0x463d8e * 159.5, _0x463d8e * 156.39595138242822);
  fill_path(_0x447cf2, "#322413", "#322413", _0x463d8e * 4);
  _0x447cf2.translate(0, _0x463d8e * -20);
  circle(_0x447cf2, _0x463d8e * 160.5, _0x463d8e * 159.5, _0x463d8e * 156.39595138242822);
  fill_path(_0x447cf2, "#392C16", "#5E3E1A", _0x463d8e * 10);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 31.999969482421875, _0x463d8e * 163.07290649414062);
  _0x447cf2.bezierCurveTo(_0x463d8e * 22.999969482421875, _0x463d8e * 67.07290649414062, _0x463d8e * 106, _0x463d8e * 20.072906494140625, _0x463d8e * 162, _0x463d8e * 23.072906494140625);
  _0x447cf2.bezierCurveTo(_0x463d8e * 269.9999694824219, _0x463d8e * 31.072906494140625, _0x463d8e * 292.9999694824219, _0x463d8e * 120.07290649414062, _0x463d8e * 294.9999694824219, _0x463d8e * 161.07290649414062);
  _0x447cf2.bezierCurveTo(_0x463d8e * 165.49996948242188, _0x463d8e * 162.07290649414062, _0x463d8e * 165.49996948242188, _0x463d8e * 162.07290649414062, _0x463d8e * 35.999969482421875, _0x463d8e * 163.07290649414062);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, "#12432D");
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 32.999969482421875, _0x463d8e * 165.07290649414062);
  _0x447cf2.bezierCurveTo(_0x463d8e * 16.999969482421875, _0x463d8e * 221.07290649414062, _0x463d8e * 85, _0x463d8e * 289.0729064941406, _0x463d8e * 156, _0x463d8e * 294.0729064941406);
  _0x447cf2.bezierCurveTo(_0x463d8e * 263.9999694824219, _0x463d8e * 293.0729064941406, _0x463d8e * 295.9999694824219, _0x463d8e * 199.07290649414062, _0x463d8e * 294.9999694824219, _0x463d8e * 159.07290649414062);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, "#3A2A0D");
  circle(_0x447cf2, _0x463d8e * 161, _0x463d8e * 158.07290649414062, _0x463d8e * 133.4053971921676);
  fill_path(_0x447cf2, undefined, "#5E3E1A", _0x463d8e * 10);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 31.999969482421875, _0x463d8e * 161.62844848632812);
  _0x447cf2.bezierCurveTo(_0x463d8e * 162.49996948242188, _0x463d8e * 161.62844848632812, _0x463d8e * 162.49996948242188, _0x463d8e * 161.62844848632812, _0x463d8e * 292.9999694824219, _0x463d8e * 161.62844848632812);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#5E3E1A", _0x463d8e * 12);
  _0x447cf2.translate(0, _0x463d8e * 8);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 66, _0x463d8e * 158.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 86, _0x463d8e * 158.29513549804688, _0x463d8e * 86, _0x463d8e * 158.29513549804688, _0x463d8e * 106, _0x463d8e * 158.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 57.999969482421875, _0x463d8e * 117.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 85, _0x463d8e * 128.29513549804688, _0x463d8e * 85, _0x463d8e * 128.29513549804688, _0x463d8e * 113, _0x463d8e * 139.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 95, _0x463d8e * 90.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 112, _0x463d8e * 105.79513549804688, _0x463d8e * 112, _0x463d8e * 105.79513549804688, _0x463d8e * 129, _0x463d8e * 121.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 116, _0x463d8e * 52.850677490234375);
  _0x447cf2.bezierCurveTo(_0x463d8e * 130, _0x463d8e * 83.85067749023438, _0x463d8e * 130, _0x463d8e * 83.85067749023438, _0x463d8e * 144, _0x463d8e * 114.85067749023438);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 159, _0x463d8e * 61.295135498046875);
  _0x447cf2.bezierCurveTo(_0x463d8e * 160.49996948242188, _0x463d8e * 92.29513549804688, _0x463d8e * 160.49996948242188, _0x463d8e * 92.29513549804688, _0x463d8e * 160, _0x463d8e * 123.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 203, _0x463d8e * 51.295135498046875);
  _0x447cf2.bezierCurveTo(_0x463d8e * 190.49996948242188, _0x463d8e * 83.29513549804688, _0x463d8e * 190.49996948242188, _0x463d8e * 83.29513549804688, _0x463d8e * 176, _0x463d8e * 115.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 225, _0x463d8e * 89.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 210.49996948242188, _0x463d8e * 104.79513549804688, _0x463d8e * 210.49996948242188, _0x463d8e * 104.79513549804688, _0x463d8e * 194, _0x463d8e * 120.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 266.9999694824219, _0x463d8e * 112.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 233.49996948242188, _0x463d8e * 127.29513549804688, _0x463d8e * 233.49996948242188, _0x463d8e * 127.29513549804688, _0x463d8e * 199, _0x463d8e * 142.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 256.9999694824219, _0x463d8e * 155.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 238.49996948242188, _0x463d8e * 156.29513549804688, _0x463d8e * 238.49996948242188, _0x463d8e * 156.29513549804688, _0x463d8e * 219, _0x463d8e * 157.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#c7a726", _0x463d8e * 12);
  _0x447cf2.translate(0, _0x463d8e * -8);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 66, _0x463d8e * 158.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 86, _0x463d8e * 158.29513549804688, _0x463d8e * 86, _0x463d8e * 158.29513549804688, _0x463d8e * 106, _0x463d8e * 158.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 57.999969482421875, _0x463d8e * 117.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 85, _0x463d8e * 128.29513549804688, _0x463d8e * 85, _0x463d8e * 128.29513549804688, _0x463d8e * 113, _0x463d8e * 139.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 95, _0x463d8e * 90.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 112, _0x463d8e * 105.79513549804688, _0x463d8e * 112, _0x463d8e * 105.79513549804688, _0x463d8e * 129, _0x463d8e * 121.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 116, _0x463d8e * 52.850677490234375);
  _0x447cf2.bezierCurveTo(_0x463d8e * 130, _0x463d8e * 83.85067749023438, _0x463d8e * 130, _0x463d8e * 83.85067749023438, _0x463d8e * 144, _0x463d8e * 114.85067749023438);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 159, _0x463d8e * 61.295135498046875);
  _0x447cf2.bezierCurveTo(_0x463d8e * 160.49996948242188, _0x463d8e * 92.29513549804688, _0x463d8e * 160.49996948242188, _0x463d8e * 92.29513549804688, _0x463d8e * 160, _0x463d8e * 123.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 203, _0x463d8e * 51.295135498046875);
  _0x447cf2.bezierCurveTo(_0x463d8e * 190.49996948242188, _0x463d8e * 83.29513549804688, _0x463d8e * 190.49996948242188, _0x463d8e * 83.29513549804688, _0x463d8e * 176, _0x463d8e * 115.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 225, _0x463d8e * 89.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 210.49996948242188, _0x463d8e * 104.79513549804688, _0x463d8e * 210.49996948242188, _0x463d8e * 104.79513549804688, _0x463d8e * 194, _0x463d8e * 120.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 266.9999694824219, _0x463d8e * 112.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 233.49996948242188, _0x463d8e * 127.29513549804688, _0x463d8e * 233.49996948242188, _0x463d8e * 127.29513549804688, _0x463d8e * 199, _0x463d8e * 142.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 256.9999694824219, _0x463d8e * 155.29513549804688);
  _0x447cf2.bezierCurveTo(_0x463d8e * 238.49996948242188, _0x463d8e * 156.29513549804688, _0x463d8e * 238.49996948242188, _0x463d8e * 156.29513549804688, _0x463d8e * 219, _0x463d8e * 157.29513549804688);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, undefined, "#EDCE4F", _0x463d8e * 12);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 94.00003051757812, _0x463d8e * 164.40341186523438);
  _0x447cf2.bezierCurveTo(_0x463d8e * 162.50003051757812, _0x463d8e * 164.40341186523438, _0x463d8e * 230.00003051757812, _0x463d8e * 165.40341186523438, _0x463d8e * 231.00003051757812, _0x463d8e * 164.40341186523438);
  _0x447cf2.bezierCurveTo(_0x463d8e * 214.00003051757812, _0x463d8e * 267.4034118652344, _0x463d8e * 92.00003051757812, _0x463d8e * 243.40341186523438, _0x463d8e * 93.00003051757812, _0x463d8e * 165.40341186523438);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, "#704618", "#5D3D1A", _0x463d8e * 8);
  _0x447cf2.beginPath();
  _0x447cf2.lineCap = "round";
  _0x447cf2.lineJoin = "round";
  _0x447cf2.moveTo(_0x463d8e * 96, _0x463d8e * 166);
  _0x447cf2.bezierCurveTo(_0x463d8e * 88, _0x463d8e * 117, _0x463d8e * 129, _0x463d8e * 92, _0x463d8e * 161, _0x463d8e * 91);
  _0x447cf2.bezierCurveTo(_0x463d8e * 201, _0x463d8e * 90, _0x463d8e * 223, _0x463d8e * 121, _0x463d8e * 230, _0x463d8e * 161);
  _0x447cf2.closePath();
  fill_path(_0x447cf2, "#ECBE35", "#EDCE4F", _0x463d8e * 8);
  circle(_0x447cf2, _0x463d8e * 160.00003051757812, _0x463d8e * 166.49432373046875, _0x463d8e * 28.30194339616981);
  fill_path(_0x447cf2, "#392C16", "#5E3E1A", _0x463d8e * 10);
  return _0x147a79;
}
function create_clock_night(_0x4db5a6) {
  var _0x191b86 = document.createElement("canvas");
  var _0x1e81ea = _0x191b86.getContext("2d");
  _0x191b86.width = _0x4db5a6 * 321;
  _0x191b86.height = _0x4db5a6 * 345;
  _0x1e81ea.translate(0, _0x4db5a6 * 5);
  _0x1e81ea.translate(0, _0x4db5a6 * 20);
  circle(_0x1e81ea, _0x4db5a6 * 160.5, _0x4db5a6 * 159.5, _0x4db5a6 * 156.39595138242822);
  fill_path(_0x1e81ea, "#322413", "#322413", _0x4db5a6 * 4);
  _0x1e81ea.translate(0, _0x4db5a6 * -20);
  circle(_0x1e81ea, _0x4db5a6 * 160.5, _0x4db5a6 * 159.5, _0x4db5a6 * 156.39595138242822);
  fill_path(_0x1e81ea, "#392C16", "#5E3E1A", _0x4db5a6 * 10);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 31.999969482421875, _0x4db5a6 * 163.07290649414062);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 22.999969482421875, _0x4db5a6 * 67.07290649414062, _0x4db5a6 * 106, _0x4db5a6 * 20.072906494140625, _0x4db5a6 * 162, _0x4db5a6 * 23.072906494140625);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 269.9999694824219, _0x4db5a6 * 31.072906494140625, _0x4db5a6 * 292.9999694824219, _0x4db5a6 * 120.07290649414062, _0x4db5a6 * 294.9999694824219, _0x4db5a6 * 161.07290649414062);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 165.49996948242188, _0x4db5a6 * 162.07290649414062, _0x4db5a6 * 165.49996948242188, _0x4db5a6 * 162.07290649414062, _0x4db5a6 * 35.999969482421875, _0x4db5a6 * 163.07290649414062);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, "#3A2A0D");
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 32.999969482421875, _0x4db5a6 * 165.07290649414062);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 16.999969482421875, _0x4db5a6 * 221.07290649414062, _0x4db5a6 * 85, _0x4db5a6 * 289.0729064941406, _0x4db5a6 * 156, _0x4db5a6 * 294.0729064941406);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 263.9999694824219, _0x4db5a6 * 293.0729064941406, _0x4db5a6 * 295.9999694824219, _0x4db5a6 * 199.07290649414062, _0x4db5a6 * 294.9999694824219, _0x4db5a6 * 159.07290649414062);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, "#071A1B");
  circle(_0x1e81ea, _0x4db5a6 * 161, _0x4db5a6 * 158.07290649414062, _0x4db5a6 * 133.4053971921676);
  fill_path(_0x1e81ea, undefined, "#5E3E1A", _0x4db5a6 * 10);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 31.999969482421875, _0x4db5a6 * 161.62844848632812);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 162.49996948242188, _0x4db5a6 * 161.62844848632812, _0x4db5a6 * 162.49996948242188, _0x4db5a6 * 161.62844848632812, _0x4db5a6 * 292.9999694824219, _0x4db5a6 * 161.62844848632812);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3E1A", _0x4db5a6 * 12);
  _0x1e81ea.translate(0, _0x4db5a6 * 8);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 66, _0x4db5a6 * 158.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 86, _0x4db5a6 * 158.29513549804688, _0x4db5a6 * 86, _0x4db5a6 * 158.29513549804688, _0x4db5a6 * 106, _0x4db5a6 * 158.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 57.999969482421875, _0x4db5a6 * 117.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 85, _0x4db5a6 * 128.29513549804688, _0x4db5a6 * 85, _0x4db5a6 * 128.29513549804688, _0x4db5a6 * 113, _0x4db5a6 * 139.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 95, _0x4db5a6 * 90.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 112, _0x4db5a6 * 105.79513549804688, _0x4db5a6 * 112, _0x4db5a6 * 105.79513549804688, _0x4db5a6 * 129, _0x4db5a6 * 121.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 116, _0x4db5a6 * 52.850677490234375);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 130, _0x4db5a6 * 83.85067749023438, _0x4db5a6 * 130, _0x4db5a6 * 83.85067749023438, _0x4db5a6 * 144, _0x4db5a6 * 114.85067749023438);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 159, _0x4db5a6 * 61.295135498046875);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 160.49996948242188, _0x4db5a6 * 92.29513549804688, _0x4db5a6 * 160.49996948242188, _0x4db5a6 * 92.29513549804688, _0x4db5a6 * 160, _0x4db5a6 * 123.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 203, _0x4db5a6 * 51.295135498046875);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 190.49996948242188, _0x4db5a6 * 83.29513549804688, _0x4db5a6 * 190.49996948242188, _0x4db5a6 * 83.29513549804688, _0x4db5a6 * 176, _0x4db5a6 * 115.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 225, _0x4db5a6 * 89.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 210.49996948242188, _0x4db5a6 * 104.79513549804688, _0x4db5a6 * 210.49996948242188, _0x4db5a6 * 104.79513549804688, _0x4db5a6 * 194, _0x4db5a6 * 120.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 266.9999694824219, _0x4db5a6 * 112.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 233.49996948242188, _0x4db5a6 * 127.29513549804688, _0x4db5a6 * 233.49996948242188, _0x4db5a6 * 127.29513549804688, _0x4db5a6 * 199, _0x4db5a6 * 142.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 256.9999694824219, _0x4db5a6 * 155.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 238.49996948242188, _0x4db5a6 * 156.29513549804688, _0x4db5a6 * 238.49996948242188, _0x4db5a6 * 156.29513549804688, _0x4db5a6 * 219, _0x4db5a6 * 157.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#281C08", _0x4db5a6 * 12);
  _0x1e81ea.translate(0, _0x4db5a6 * -8);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 66, _0x4db5a6 * 158.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 86, _0x4db5a6 * 158.29513549804688, _0x4db5a6 * 86, _0x4db5a6 * 158.29513549804688, _0x4db5a6 * 106, _0x4db5a6 * 158.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 57.999969482421875, _0x4db5a6 * 117.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 85, _0x4db5a6 * 128.29513549804688, _0x4db5a6 * 85, _0x4db5a6 * 128.29513549804688, _0x4db5a6 * 113, _0x4db5a6 * 139.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 95, _0x4db5a6 * 90.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 112, _0x4db5a6 * 105.79513549804688, _0x4db5a6 * 112, _0x4db5a6 * 105.79513549804688, _0x4db5a6 * 129, _0x4db5a6 * 121.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 116, _0x4db5a6 * 52.850677490234375);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 130, _0x4db5a6 * 83.85067749023438, _0x4db5a6 * 130, _0x4db5a6 * 83.85067749023438, _0x4db5a6 * 144, _0x4db5a6 * 114.85067749023438);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 159, _0x4db5a6 * 61.295135498046875);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 160.49996948242188, _0x4db5a6 * 92.29513549804688, _0x4db5a6 * 160.49996948242188, _0x4db5a6 * 92.29513549804688, _0x4db5a6 * 160, _0x4db5a6 * 123.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 203, _0x4db5a6 * 51.295135498046875);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 190.49996948242188, _0x4db5a6 * 83.29513549804688, _0x4db5a6 * 190.49996948242188, _0x4db5a6 * 83.29513549804688, _0x4db5a6 * 176, _0x4db5a6 * 115.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 225, _0x4db5a6 * 89.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 210.49996948242188, _0x4db5a6 * 104.79513549804688, _0x4db5a6 * 210.49996948242188, _0x4db5a6 * 104.79513549804688, _0x4db5a6 * 194, _0x4db5a6 * 120.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 266.9999694824219, _0x4db5a6 * 112.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 233.49996948242188, _0x4db5a6 * 127.29513549804688, _0x4db5a6 * 233.49996948242188, _0x4db5a6 * 127.29513549804688, _0x4db5a6 * 199, _0x4db5a6 * 142.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 256.9999694824219, _0x4db5a6 * 155.29513549804688);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 238.49996948242188, _0x4db5a6 * 156.29513549804688, _0x4db5a6 * 238.49996948242188, _0x4db5a6 * 156.29513549804688, _0x4db5a6 * 219, _0x4db5a6 * 157.29513549804688);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, undefined, "#5E3C10", _0x4db5a6 * 12);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 96, _0x4db5a6 * 166);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 88, _0x4db5a6 * 117, _0x4db5a6 * 129, _0x4db5a6 * 92, _0x4db5a6 * 161, _0x4db5a6 * 91);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 201, _0x4db5a6 * 90, _0x4db5a6 * 223, _0x4db5a6 * 121, _0x4db5a6 * 230, _0x4db5a6 * 161);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, "#704618", "#5D3D1A", _0x4db5a6 * 8);
  _0x1e81ea.beginPath();
  _0x1e81ea.lineCap = "round";
  _0x1e81ea.lineJoin = "round";
  _0x1e81ea.moveTo(_0x4db5a6 * 94.00003051757812, _0x4db5a6 * 164.40341186523438);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 162.50003051757812, _0x4db5a6 * 164.40341186523438, _0x4db5a6 * 230.00003051757812, _0x4db5a6 * 165.40341186523438, _0x4db5a6 * 231.00003051757812, _0x4db5a6 * 164.40341186523438);
  _0x1e81ea.bezierCurveTo(_0x4db5a6 * 214.00003051757812, _0x4db5a6 * 267.4034118652344, _0x4db5a6 * 92.00003051757812, _0x4db5a6 * 243.40341186523438, _0x4db5a6 * 93.00003051757812, _0x4db5a6 * 165.40341186523438);
  _0x1e81ea.closePath();
  fill_path(_0x1e81ea, "#E1DDD5", "#EAE7E4", _0x4db5a6 * 8);
  circle(_0x1e81ea, _0x4db5a6 * 160.00003051757812, _0x4db5a6 * 166.49432373046875, _0x4db5a6 * 28.30194339616981);
  fill_path(_0x1e81ea, "#392C16", "#5E3E1A", _0x4db5a6 * 10);
  return _0x191b86;
}
function create_arrow_clock(_0x1133bc) {
  var _0x353c38 = document.createElement("canvas");
  var _0x1ffe78 = _0x353c38.getContext("2d");
  _0x353c38.width = _0x1133bc * 321;
  _0x353c38.height = _0x1133bc * 345;
  _0x1ffe78.translate(0, _0x1133bc * 5);
  circle(_0x1ffe78, _0x1133bc * 161.00003051757812, _0x1133bc * 165.40341186523438, _0x1133bc * 20.808652046684813);
  fill_path(_0x1ffe78, "#C09D6F", "#A37943", _0x1133bc * 10);
  _0x1ffe78.beginPath();
  _0x1ffe78.lineCap = "round";
  _0x1ffe78.lineJoin = "round";
  _0x1ffe78.moveTo(_0x1133bc * 162.00003051757812, _0x1133bc * 48.403411865234375);
  _0x1ffe78.bezierCurveTo(_0x1133bc * 172.50003051757812, _0x1133bc * 67.40341186523438, _0x1133bc * 172.50003051757812, _0x1133bc * 67.40341186523438, _0x1133bc * 183.00003051757812, _0x1133bc * 86.40341186523438);
  _0x1ffe78.bezierCurveTo(_0x1133bc * 160.50003051757812, _0x1133bc * 86.40341186523438, _0x1133bc * 160.50003051757812, _0x1133bc * 86.40341186523438, _0x1133bc * 138.00003051757812, _0x1133bc * 86.40341186523438);
  _0x1ffe78.closePath();
  fill_path(_0x1ffe78, "#C09D6F", "#A37943", _0x1133bc * 10);
  _0x1ffe78.save();
  _0x1ffe78.translate(_0x1133bc * 161.50003051757812, _0x1133bc * 117.90341186523438);
  round_rect(_0x1ffe78, _0x1133bc * -5.5, _0x1133bc * -37.5, _0x1133bc * 11, _0x1133bc * 75, _0x1133bc * 10);
  _0x1ffe78.restore();
  fill_path(_0x1ffe78, "#C09D6F", "#A37943", _0x1133bc * 10);
  _0x1ffe78.save();
  _0x1ffe78.translate(_0x1133bc * 162.00003051757812, _0x1133bc * 78.90341186523438);
  round_rect(_0x1ffe78, _0x1133bc * -10, _0x1133bc * -5.5, _0x1133bc * 20, _0x1133bc * 11, _0x1133bc * 1);
  _0x1ffe78.restore();
  fill_path(_0x1ffe78, "#C09D6F");
  circle(_0x1ffe78, _0x1133bc * 161.00003051757812, _0x1133bc * 163.6761474609375, _0x1133bc * 17.08800749063506);
  fill_path(_0x1ffe78, "#C09D6F");
  return _0x353c38;
}
function create_island(_0x3108c2, _0x362ed2, _0x1838ed) {
  var _0x4efdce = document.createElement("canvas");
  var _0x15c7cd = _0x4efdce.getContext("2d");
  if (_0x1838ed == 0) {
    _0x4efdce.width = _0x3108c2 * 566;
    _0x4efdce.height = _0x3108c2 * 429;
    _0x15c7cd.beginPath();
    _0x15c7cd.lineCap = "round";
    _0x15c7cd.lineJoin = "round";
    _0x15c7cd.moveTo(_0x3108c2 * 312.625, _0x3108c2 * 39.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 456.625, _0x3108c2 * 60.046875, _0x3108c2 * 521.625, _0x3108c2 * 134.046875, _0x3108c2 * 528.625, _0x3108c2 * 199.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 540.625, _0x3108c2 * 298.046875, _0x3108c2 * 491.625, _0x3108c2 * 364.046875, _0x3108c2 * 405.625, _0x3108c2 * 394.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 270.625, _0x3108c2 * 429.046875, _0x3108c2 * 182.625, _0x3108c2 * 395.046875, _0x3108c2 * 100.625, _0x3108c2 * 344.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 15.625, _0x3108c2 * 283.046875, _0x3108c2 * 20.625, _0x3108c2 * 195.046875, _0x3108c2 * 33.625, _0x3108c2 * 158.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 56.625, _0x3108c2 * 80.046875, _0x3108c2 * 102.625, _0x3108c2 * 46.046875, _0x3108c2 * 183.625, _0x3108c2 * 33.046875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 225.625, _0x3108c2 * 25.046875, _0x3108c2 * 270.625, _0x3108c2 * 30.046875, _0x3108c2 * 312.625, _0x3108c2 * 39.046875);
    _0x15c7cd.closePath();
    fill_path(_0x15c7cd, _0x362ed2[0]);
  } else if (_0x1838ed == 1) {
    var _0x4efdce = document.createElement("canvas");
    var _0x15c7cd = _0x4efdce.getContext("2d");
    _0x4efdce.width = _0x3108c2 * 511;
    _0x4efdce.height = _0x3108c2 * 408;
    _0x15c7cd.beginPath();
    _0x15c7cd.lineCap = "round";
    _0x15c7cd.lineJoin = "round";
    _0x15c7cd.moveTo(_0x3108c2 * 141.625, _0x3108c2 * 49.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 225.625, _0x3108c2 * 10.296875, _0x3108c2 * 320.625, _0x3108c2 * 16.296875, _0x3108c2 * 390.625, _0x3108c2 * 39.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 476.625, _0x3108c2 * 71.296875, _0x3108c2 * 483.625, _0x3108c2 * 142.296875, _0x3108c2 * 486.625, _0x3108c2 * 197.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 491.625, _0x3108c2 * 289.296875, _0x3108c2 * 462.625, _0x3108c2 * 317.296875, _0x3108c2 * 417.625, _0x3108c2 * 351.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 367.625, _0x3108c2 * 385.296875, _0x3108c2 * 313.625, _0x3108c2 * 404.296875, _0x3108c2 * 218.625, _0x3108c2 * 395.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 108.625, _0x3108c2 * 381.296875, _0x3108c2 * 81.625, _0x3108c2 * 350.296875, _0x3108c2 * 52.625, _0x3108c2 * 305.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 16.625, _0x3108c2 * 244.296875, _0x3108c2 * 23.625, _0x3108c2 * 171.296875, _0x3108c2 * 37.625, _0x3108c2 * 145.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 65.625, _0x3108c2 * 84.296875, _0x3108c2 * 97.625, _0x3108c2 * 74.296875, _0x3108c2 * 141.625, _0x3108c2 * 49.296875);
    _0x15c7cd.closePath();
    fill_path(_0x15c7cd, _0x362ed2[0]);
  } else if (_0x1838ed == 2) {
    var _0x4efdce = document.createElement("canvas");
    var _0x15c7cd = _0x4efdce.getContext("2d");
    _0x4efdce.width = _0x3108c2 * 504;
    _0x4efdce.height = _0x3108c2 * 408;
    _0x15c7cd.beginPath();
    _0x15c7cd.lineCap = "round";
    _0x15c7cd.lineJoin = "round";
    _0x15c7cd.moveTo(_0x3108c2 * 153.625, _0x3108c2 * 46.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 271.625, _0x3108c2 * 17.296875, _0x3108c2 * 345.625, _0x3108c2 * 35.296875, _0x3108c2 * 410.625, _0x3108c2 * 71.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 473.625, _0x3108c2 * 109.296875, _0x3108c2 * 478.625, _0x3108c2 * 167.296875, _0x3108c2 * 473.625, _0x3108c2 * 205.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 462.625, _0x3108c2 * 295.296875, _0x3108c2 * 438.625, _0x3108c2 * 316.296875, _0x3108c2 * 388.625, _0x3108c2 * 345.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 331.625, _0x3108c2 * 374.296875, _0x3108c2 * 273.625, _0x3108c2 * 392.296875, _0x3108c2 * 180.625, _0x3108c2 * 387.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 111.625, _0x3108c2 * 380.296875, _0x3108c2 * 86.625, _0x3108c2 * 360.296875, _0x3108c2 * 51.625, _0x3108c2 * 309.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 23.625, _0x3108c2 * 267.296875, _0x3108c2 * 25.625, _0x3108c2 * 226.296875, _0x3108c2 * 27.625, _0x3108c2 * 175.296875);
    _0x15c7cd.bezierCurveTo(_0x3108c2 * 37.625, _0x3108c2 * 99.296875, _0x3108c2 * 88.625, _0x3108c2 * 57.296875, _0x3108c2 * 153.625, _0x3108c2 * 46.296875);
    _0x15c7cd.closePath();
    fill_path(_0x15c7cd, _0x362ed2[0]);
  }
  return _0x4efdce;
}
function create_sign(_0xd7f40d, _0x2cdd25, _0x415bb3) {
  var _0x484e9b = document.createElement("canvas");
  var _0x1b5923 = _0x484e9b.getContext("2d");
  _0x484e9b.width = _0xd7f40d * 450;
  _0x484e9b.height = _0xd7f40d * 260;
  _0x1b5923.translate(_0xd7f40d * 10, _0xd7f40d * 10);
  _0x1b5923.globalAlpha = _0x2cdd25 ? 0.5 : 1;
  _0x1b5923.translate(_0xd7f40d * 20, _0xd7f40d * 20);
  round_rect(_0x1b5923, 0, 0, _0xd7f40d * 400, _0xd7f40d * 220, _0xd7f40d * 30);
  fill_path(_0x1b5923, _0x415bb3[0]);
  _0x1b5923.globalAlpha = 1;
  _0x1b5923.translate(_0xd7f40d * -20, _0xd7f40d * -20);
  _0x1b5923.beginPath();
  _0x1b5923.lineCap = "round";
  _0x1b5923.lineJoin = "round";
  _0x1b5923.moveTo(_0xd7f40d * 9, _0xd7f40d * 5);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 381, _0xd7f40d * 2, _0xd7f40d * 197, _0xd7f40d * 4.5, _0xd7f40d * 385, _0xd7f40d * 4);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 397, _0xd7f40d * 4, _0xd7f40d * 401, _0xd7f40d * 4, _0xd7f40d * 399, _0xd7f40d * 23);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 367, _0xd7f40d * 27, _0xd7f40d * 367, _0xd7f40d * 27, _0xd7f40d * 335, _0xd7f40d * 31);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 366.5, _0xd7f40d * 33.5, _0xd7f40d * 366.5, _0xd7f40d * 33.5, _0xd7f40d * 398, _0xd7f40d * 36);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 398, _0xd7f40d * 41.5, _0xd7f40d * 398, _0xd7f40d * 41.5, _0xd7f40d * 398, _0xd7f40d * 47);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 398, _0xd7f40d * 56, _0xd7f40d * 399, _0xd7f40d * 56, _0xd7f40d * 386, _0xd7f40d * 56);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 200.5, _0xd7f40d * 56.5, _0xd7f40d * 200.5, _0xd7f40d * 56.5, _0xd7f40d * 15, _0xd7f40d * 57);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 2, _0xd7f40d * 55, _0xd7f40d * 4, _0xd7f40d * 52, _0xd7f40d * 4, _0xd7f40d * 43);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 4, _0xd7f40d * 30.5, _0xd7f40d * 4, _0xd7f40d * 30.5, _0xd7f40d * 4, _0xd7f40d * 18);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 16, _0xd7f40d * 18.5, _0xd7f40d * 16, _0xd7f40d * 18.5, _0xd7f40d * 28, _0xd7f40d * 19);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 18.5, _0xd7f40d * 12, _0xd7f40d * 18.5, _0xd7f40d * 12, _0xd7f40d * 9, _0xd7f40d * 5);
  _0x1b5923.closePath();
  fill_path(_0x1b5923, _0x415bb3[2], _0x415bb3[1], _0xd7f40d * 12);
  _0x1b5923.beginPath();
  _0x1b5923.lineCap = "round";
  _0x1b5923.lineJoin = "round";
  _0x1b5923.moveTo(_0xd7f40d * 5, _0xd7f40d * 70);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 5, _0xd7f40d * 58, _0xd7f40d * 5, _0xd7f40d * 55, _0xd7f40d * 17, _0xd7f40d * 57);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 203, _0xd7f40d * 57, _0xd7f40d * 203, _0xd7f40d * 57, _0xd7f40d * 389, _0xd7f40d * 57);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 400, _0xd7f40d * 57, _0xd7f40d * 400, _0xd7f40d * 59, _0xd7f40d * 400, _0xd7f40d * 69);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 400.5, _0xd7f40d * 83.5, _0xd7f40d * 400.5, _0xd7f40d * 83.5, _0xd7f40d * 401, _0xd7f40d * 98);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 402, _0xd7f40d * 108, _0xd7f40d * 401, _0xd7f40d * 108, _0xd7f40d * 388, _0xd7f40d * 108);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 201.5, _0xd7f40d * 108, _0xd7f40d * 201.5, _0xd7f40d * 108, _0xd7f40d * 15, _0xd7f40d * 108);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 1, _0xd7f40d * 106, _0xd7f40d * 5, _0xd7f40d * 106, _0xd7f40d * 5, _0xd7f40d * 87);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 33, _0xd7f40d * 84.5, _0xd7f40d * 33, _0xd7f40d * 84.5, _0xd7f40d * 61, _0xd7f40d * 82);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 33.5, _0xd7f40d * 76.5, _0xd7f40d * 33.5, _0xd7f40d * 76.5, _0xd7f40d * 6, _0xd7f40d * 71);
  _0x1b5923.closePath();
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  _0x1b5923.beginPath();
  _0x1b5923.lineCap = "round";
  _0x1b5923.lineJoin = "round";
  _0x1b5923.moveTo(_0xd7f40d * 19, _0xd7f40d * 158);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 2, _0xd7f40d * 159, _0xd7f40d * 4, _0xd7f40d * 156, _0xd7f40d * 5, _0xd7f40d * 118);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 4, _0xd7f40d * 110, _0xd7f40d * 6, _0xd7f40d * 107, _0xd7f40d * 26, _0xd7f40d * 109);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 206.5, _0xd7f40d * 109, _0xd7f40d * 206.5, _0xd7f40d * 109, _0xd7f40d * 387, _0xd7f40d * 109);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 400, _0xd7f40d * 108, _0xd7f40d * 400, _0xd7f40d * 108, _0xd7f40d * 398, _0xd7f40d * 127);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 384.5, _0xd7f40d * 130, _0xd7f40d * 384.5, _0xd7f40d * 130, _0xd7f40d * 371, _0xd7f40d * 133);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 385.5, _0xd7f40d * 138, _0xd7f40d * 385.5, _0xd7f40d * 138, _0xd7f40d * 400, _0xd7f40d * 143);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 402, _0xd7f40d * 156, _0xd7f40d * 402, _0xd7f40d * 162, _0xd7f40d * 385, _0xd7f40d * 160);
  _0x1b5923.closePath();
  fill_path(_0x1b5923, _0x415bb3[2], _0x415bb3[1], _0xd7f40d * 12);
  _0x1b5923.beginPath();
  _0x1b5923.lineCap = "round";
  _0x1b5923.lineJoin = "round";
  _0x1b5923.moveTo(_0xd7f40d * 4, _0xd7f40d * 183);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 1, _0xd7f40d * 163, _0xd7f40d * 4, _0xd7f40d * 158, _0xd7f40d * 28, _0xd7f40d * 161);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 207.5, _0xd7f40d * 161, _0xd7f40d * 207.5, _0xd7f40d * 161, _0xd7f40d * 387, _0xd7f40d * 161);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 401, _0xd7f40d * 159, _0xd7f40d * 400, _0xd7f40d * 164, _0xd7f40d * 400, _0xd7f40d * 177);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 364.5, _0xd7f40d * 184, _0xd7f40d * 364.5, _0xd7f40d * 184, _0xd7f40d * 329, _0xd7f40d * 191);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 364.5, _0xd7f40d * 192.5, _0xd7f40d * 364.5, _0xd7f40d * 192.5, _0xd7f40d * 400, _0xd7f40d * 194);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 403, _0xd7f40d * 209, _0xd7f40d * 401, _0xd7f40d * 214, _0xd7f40d * 385, _0xd7f40d * 213);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 201.5, _0xd7f40d * 213, _0xd7f40d * 201.5, _0xd7f40d * 213, _0xd7f40d * 18, _0xd7f40d * 213);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 3, _0xd7f40d * 213, _0xd7f40d * 2, _0xd7f40d * 213, _0xd7f40d * 4, _0xd7f40d * 198);
  _0x1b5923.bezierCurveTo(_0xd7f40d * 12.5, _0xd7f40d * 193, _0xd7f40d * 12.5, _0xd7f40d * 193, _0xd7f40d * 21, _0xd7f40d * 188);
  _0x1b5923.closePath();
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  circle(_0x1b5923, _0xd7f40d * 41, _0xd7f40d * 30, _0xd7f40d * 14.7648230602334);
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  circle(_0x1b5923, _0xd7f40d * 369, _0xd7f40d * 30, _0xd7f40d * 15.556349186104045);
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  circle(_0x1b5923, _0xd7f40d * 364, _0xd7f40d * 190, _0xd7f40d * 15.620499351813308);
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  circle(_0x1b5923, _0xd7f40d * 41, _0xd7f40d * 186, _0xd7f40d * 15.556349186104045);
  fill_path(_0x1b5923, _0x415bb3[3], _0x415bb3[1], _0xd7f40d * 12);
  return _0x484e9b;
}
function create_sign_button(_0x4a788f, _0x46289b, _0x13711c) {
  var _0xdf098 = document.createElement("canvas");
  var _0x50539a = _0xdf098.getContext("2d");
  _0xdf098.width = _0x4a788f * 450;
  _0xdf098.height = _0x4a788f * 260;
  _0x50539a.translate(_0x4a788f * 10, _0x4a788f * 10);
  if (_0x13711c == 1) {
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 9, _0x4a788f * 5);
    _0x50539a.bezierCurveTo(_0x4a788f * 381, _0x4a788f * 2, _0x4a788f * 197, _0x4a788f * 4.5, _0x4a788f * 385, _0x4a788f * 4);
    _0x50539a.bezierCurveTo(_0x4a788f * 397, _0x4a788f * 4, _0x4a788f * 401, _0x4a788f * 4, _0x4a788f * 399, _0x4a788f * 23);
    _0x50539a.bezierCurveTo(_0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 335, _0x4a788f * 31);
    _0x50539a.bezierCurveTo(_0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 398, _0x4a788f * 36);
    _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 47);
    _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 56, _0x4a788f * 399, _0x4a788f * 56, _0x4a788f * 386, _0x4a788f * 56);
    _0x50539a.bezierCurveTo(_0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 15, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 55, _0x4a788f * 4, _0x4a788f * 52, _0x4a788f * 4, _0x4a788f * 43);
    _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 18);
    _0x50539a.bezierCurveTo(_0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 28, _0x4a788f * 19);
    _0x50539a.bezierCurveTo(_0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 9, _0x4a788f * 5);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 5, _0x4a788f * 70);
    _0x50539a.bezierCurveTo(_0x4a788f * 5, _0x4a788f * 58, _0x4a788f * 5, _0x4a788f * 55, _0x4a788f * 17, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 389, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 57, _0x4a788f * 400, _0x4a788f * 59, _0x4a788f * 400, _0x4a788f * 69);
    _0x50539a.bezierCurveTo(_0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 401, _0x4a788f * 98);
    _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 108, _0x4a788f * 401, _0x4a788f * 108, _0x4a788f * 388, _0x4a788f * 108);
    _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 15, _0x4a788f * 108);
    _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 87);
    _0x50539a.bezierCurveTo(_0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 61, _0x4a788f * 82);
    _0x50539a.bezierCurveTo(_0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 6, _0x4a788f * 71);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 19, _0x4a788f * 158);
    _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 159, _0x4a788f * 4, _0x4a788f * 156, _0x4a788f * 5, _0x4a788f * 118);
    _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 110, _0x4a788f * 6, _0x4a788f * 107, _0x4a788f * 26, _0x4a788f * 109);
    _0x50539a.bezierCurveTo(_0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 387, _0x4a788f * 109);
    _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 398, _0x4a788f * 127);
    _0x50539a.bezierCurveTo(_0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 371, _0x4a788f * 133);
    _0x50539a.bezierCurveTo(_0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 400, _0x4a788f * 143);
    _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 156, _0x4a788f * 402, _0x4a788f * 162, _0x4a788f * 385, _0x4a788f * 160);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 4, _0x4a788f * 183);
    _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 163, _0x4a788f * 4, _0x4a788f * 158, _0x4a788f * 28, _0x4a788f * 161);
    _0x50539a.bezierCurveTo(_0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 387, _0x4a788f * 161);
    _0x50539a.bezierCurveTo(_0x4a788f * 401, _0x4a788f * 159, _0x4a788f * 400, _0x4a788f * 164, _0x4a788f * 400, _0x4a788f * 177);
    _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 329, _0x4a788f * 191);
    _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 400, _0x4a788f * 194);
    _0x50539a.bezierCurveTo(_0x4a788f * 403, _0x4a788f * 209, _0x4a788f * 401, _0x4a788f * 214, _0x4a788f * 385, _0x4a788f * 213);
    _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 18, _0x4a788f * 213);
    _0x50539a.bezierCurveTo(_0x4a788f * 3, _0x4a788f * 213, _0x4a788f * 2, _0x4a788f * 213, _0x4a788f * 4, _0x4a788f * 198);
    _0x50539a.bezierCurveTo(_0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 21, _0x4a788f * 188);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 30, _0x4a788f * 14.7648230602334);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 369, _0x4a788f * 30, _0x4a788f * 15.556349186104045);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 364, _0x4a788f * 190, _0x4a788f * 15.620499351813308);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 186, _0x4a788f * 15.556349186104045);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
  } else if (_0x13711c == 2) {
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 9, _0x4a788f * 5);
    _0x50539a.bezierCurveTo(_0x4a788f * 381, _0x4a788f * 2, _0x4a788f * 197, _0x4a788f * 4.5, _0x4a788f * 385, _0x4a788f * 4);
    _0x50539a.bezierCurveTo(_0x4a788f * 397, _0x4a788f * 4, _0x4a788f * 401, _0x4a788f * 4, _0x4a788f * 399, _0x4a788f * 23);
    _0x50539a.bezierCurveTo(_0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 335, _0x4a788f * 31);
    _0x50539a.bezierCurveTo(_0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 398, _0x4a788f * 36);
    _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 47);
    _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 56, _0x4a788f * 399, _0x4a788f * 56, _0x4a788f * 386, _0x4a788f * 56);
    _0x50539a.bezierCurveTo(_0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 15, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 55, _0x4a788f * 4, _0x4a788f * 52, _0x4a788f * 4, _0x4a788f * 43);
    _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 18);
    _0x50539a.bezierCurveTo(_0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 28, _0x4a788f * 19);
    _0x50539a.bezierCurveTo(_0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 9, _0x4a788f * 5);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 5, _0x4a788f * 70);
    _0x50539a.bezierCurveTo(_0x4a788f * 5, _0x4a788f * 58, _0x4a788f * 5, _0x4a788f * 55, _0x4a788f * 17, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 389, _0x4a788f * 57);
    _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 57, _0x4a788f * 400, _0x4a788f * 59, _0x4a788f * 400, _0x4a788f * 69);
    _0x50539a.bezierCurveTo(_0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 401, _0x4a788f * 98);
    _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 108, _0x4a788f * 401, _0x4a788f * 108, _0x4a788f * 388, _0x4a788f * 108);
    _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 15, _0x4a788f * 108);
    _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 87);
    _0x50539a.bezierCurveTo(_0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 61, _0x4a788f * 82);
    _0x50539a.bezierCurveTo(_0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 6, _0x4a788f * 71);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 19, _0x4a788f * 158);
    _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 159, _0x4a788f * 4, _0x4a788f * 156, _0x4a788f * 5, _0x4a788f * 118);
    _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 110, _0x4a788f * 6, _0x4a788f * 107, _0x4a788f * 26, _0x4a788f * 109);
    _0x50539a.bezierCurveTo(_0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 387, _0x4a788f * 109);
    _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 398, _0x4a788f * 127);
    _0x50539a.bezierCurveTo(_0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 371, _0x4a788f * 133);
    _0x50539a.bezierCurveTo(_0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 400, _0x4a788f * 143);
    _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 156, _0x4a788f * 402, _0x4a788f * 162, _0x4a788f * 385, _0x4a788f * 160);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    _0x50539a.beginPath();
    _0x50539a.lineCap = "round";
    _0x50539a.lineJoin = "round";
    _0x50539a.moveTo(_0x4a788f * 4, _0x4a788f * 183);
    _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 163, _0x4a788f * 4, _0x4a788f * 158, _0x4a788f * 28, _0x4a788f * 161);
    _0x50539a.bezierCurveTo(_0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 387, _0x4a788f * 161);
    _0x50539a.bezierCurveTo(_0x4a788f * 401, _0x4a788f * 159, _0x4a788f * 400, _0x4a788f * 164, _0x4a788f * 400, _0x4a788f * 177);
    _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 329, _0x4a788f * 191);
    _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 400, _0x4a788f * 194);
    _0x50539a.bezierCurveTo(_0x4a788f * 403, _0x4a788f * 209, _0x4a788f * 401, _0x4a788f * 214, _0x4a788f * 385, _0x4a788f * 213);
    _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 18, _0x4a788f * 213);
    _0x50539a.bezierCurveTo(_0x4a788f * 3, _0x4a788f * 213, _0x4a788f * 2, _0x4a788f * 213, _0x4a788f * 4, _0x4a788f * 198);
    _0x50539a.bezierCurveTo(_0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 21, _0x4a788f * 188);
    _0x50539a.closePath();
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 30, _0x4a788f * 14.7648230602334);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 369, _0x4a788f * 30, _0x4a788f * 15.556349186104045);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 364, _0x4a788f * 190, _0x4a788f * 15.620499351813308);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
    circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 186, _0x4a788f * 15.556349186104045);
    fill_path(_0x50539a, _0x46289b[3], _0x46289b[3], _0x4a788f * 32);
  }
  _0x50539a.beginPath();
  _0x50539a.lineCap = "round";
  _0x50539a.lineJoin = "round";
  _0x50539a.moveTo(_0x4a788f * 9, _0x4a788f * 5);
  _0x50539a.bezierCurveTo(_0x4a788f * 381, _0x4a788f * 2, _0x4a788f * 197, _0x4a788f * 4.5, _0x4a788f * 385, _0x4a788f * 4);
  _0x50539a.bezierCurveTo(_0x4a788f * 397, _0x4a788f * 4, _0x4a788f * 401, _0x4a788f * 4, _0x4a788f * 399, _0x4a788f * 23);
  _0x50539a.bezierCurveTo(_0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 367, _0x4a788f * 27, _0x4a788f * 335, _0x4a788f * 31);
  _0x50539a.bezierCurveTo(_0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 366.5, _0x4a788f * 33.5, _0x4a788f * 398, _0x4a788f * 36);
  _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 41.5, _0x4a788f * 398, _0x4a788f * 47);
  _0x50539a.bezierCurveTo(_0x4a788f * 398, _0x4a788f * 56, _0x4a788f * 399, _0x4a788f * 56, _0x4a788f * 386, _0x4a788f * 56);
  _0x50539a.bezierCurveTo(_0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 200.5, _0x4a788f * 56.5, _0x4a788f * 15, _0x4a788f * 57);
  _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 55, _0x4a788f * 4, _0x4a788f * 52, _0x4a788f * 4, _0x4a788f * 43);
  _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 30.5, _0x4a788f * 4, _0x4a788f * 18);
  _0x50539a.bezierCurveTo(_0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 16, _0x4a788f * 18.5, _0x4a788f * 28, _0x4a788f * 19);
  _0x50539a.bezierCurveTo(_0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 18.5, _0x4a788f * 12, _0x4a788f * 9, _0x4a788f * 5);
  _0x50539a.closePath();
  fill_path(_0x50539a, _0x46289b[1], _0x46289b[0], _0x4a788f * 12);
  _0x50539a.beginPath();
  _0x50539a.lineCap = "round";
  _0x50539a.lineJoin = "round";
  _0x50539a.moveTo(_0x4a788f * 5, _0x4a788f * 70);
  _0x50539a.bezierCurveTo(_0x4a788f * 5, _0x4a788f * 58, _0x4a788f * 5, _0x4a788f * 55, _0x4a788f * 17, _0x4a788f * 57);
  _0x50539a.bezierCurveTo(_0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 203, _0x4a788f * 57, _0x4a788f * 389, _0x4a788f * 57);
  _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 57, _0x4a788f * 400, _0x4a788f * 59, _0x4a788f * 400, _0x4a788f * 69);
  _0x50539a.bezierCurveTo(_0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 400.5, _0x4a788f * 83.5, _0x4a788f * 401, _0x4a788f * 98);
  _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 108, _0x4a788f * 401, _0x4a788f * 108, _0x4a788f * 388, _0x4a788f * 108);
  _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 201.5, _0x4a788f * 108, _0x4a788f * 15, _0x4a788f * 108);
  _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 106, _0x4a788f * 5, _0x4a788f * 87);
  _0x50539a.bezierCurveTo(_0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 33, _0x4a788f * 84.5, _0x4a788f * 61, _0x4a788f * 82);
  _0x50539a.bezierCurveTo(_0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 33.5, _0x4a788f * 76.5, _0x4a788f * 6, _0x4a788f * 71);
  _0x50539a.closePath();
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  _0x50539a.beginPath();
  _0x50539a.lineCap = "round";
  _0x50539a.lineJoin = "round";
  _0x50539a.moveTo(_0x4a788f * 19, _0x4a788f * 158);
  _0x50539a.bezierCurveTo(_0x4a788f * 2, _0x4a788f * 159, _0x4a788f * 4, _0x4a788f * 156, _0x4a788f * 5, _0x4a788f * 118);
  _0x50539a.bezierCurveTo(_0x4a788f * 4, _0x4a788f * 110, _0x4a788f * 6, _0x4a788f * 107, _0x4a788f * 26, _0x4a788f * 109);
  _0x50539a.bezierCurveTo(_0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 206.5, _0x4a788f * 109, _0x4a788f * 387, _0x4a788f * 109);
  _0x50539a.bezierCurveTo(_0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 400, _0x4a788f * 108, _0x4a788f * 398, _0x4a788f * 127);
  _0x50539a.bezierCurveTo(_0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 384.5, _0x4a788f * 130, _0x4a788f * 371, _0x4a788f * 133);
  _0x50539a.bezierCurveTo(_0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 385.5, _0x4a788f * 138, _0x4a788f * 400, _0x4a788f * 143);
  _0x50539a.bezierCurveTo(_0x4a788f * 402, _0x4a788f * 156, _0x4a788f * 402, _0x4a788f * 162, _0x4a788f * 385, _0x4a788f * 160);
  _0x50539a.closePath();
  fill_path(_0x50539a, _0x46289b[1], _0x46289b[0], _0x4a788f * 12);
  _0x50539a.beginPath();
  _0x50539a.lineCap = "round";
  _0x50539a.lineJoin = "round";
  _0x50539a.moveTo(_0x4a788f * 4, _0x4a788f * 183);
  _0x50539a.bezierCurveTo(_0x4a788f * 1, _0x4a788f * 163, _0x4a788f * 4, _0x4a788f * 158, _0x4a788f * 28, _0x4a788f * 161);
  _0x50539a.bezierCurveTo(_0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 207.5, _0x4a788f * 161, _0x4a788f * 387, _0x4a788f * 161);
  _0x50539a.bezierCurveTo(_0x4a788f * 401, _0x4a788f * 159, _0x4a788f * 400, _0x4a788f * 164, _0x4a788f * 400, _0x4a788f * 177);
  _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 364.5, _0x4a788f * 184, _0x4a788f * 329, _0x4a788f * 191);
  _0x50539a.bezierCurveTo(_0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 364.5, _0x4a788f * 192.5, _0x4a788f * 400, _0x4a788f * 194);
  _0x50539a.bezierCurveTo(_0x4a788f * 403, _0x4a788f * 209, _0x4a788f * 401, _0x4a788f * 214, _0x4a788f * 385, _0x4a788f * 213);
  _0x50539a.bezierCurveTo(_0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 201.5, _0x4a788f * 213, _0x4a788f * 18, _0x4a788f * 213);
  _0x50539a.bezierCurveTo(_0x4a788f * 3, _0x4a788f * 213, _0x4a788f * 2, _0x4a788f * 213, _0x4a788f * 4, _0x4a788f * 198);
  _0x50539a.bezierCurveTo(_0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 12.5, _0x4a788f * 193, _0x4a788f * 21, _0x4a788f * 188);
  _0x50539a.closePath();
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 30, _0x4a788f * 14.7648230602334);
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  circle(_0x50539a, _0x4a788f * 369, _0x4a788f * 30, _0x4a788f * 15.556349186104045);
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  circle(_0x50539a, _0x4a788f * 364, _0x4a788f * 190, _0x4a788f * 15.620499351813308);
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  circle(_0x50539a, _0x4a788f * 41, _0x4a788f * 186, _0x4a788f * 15.556349186104045);
  fill_path(_0x50539a, _0x46289b[2], _0x46289b[0], _0x4a788f * 12);
  return _0xdf098;
}
function create_symbols(_0x24b31f, _0x2d9682, _0x2d8412, _0x24bb77) {
  var _0x1aaa6d = document.createElement("canvas");
  var _0x515bd3 = _0x1aaa6d.getContext("2d");
  _0x1aaa6d.width = _0x24b31f * 450;
  _0x1aaa6d.height = _0x24b31f * 260;
  var _0x46861b = create_sign(_0x24b31f * 1, true, _0x2d8412);
  _0x515bd3.drawImage(_0x46861b, _0x24b31f * 0, _0x24b31f * 0);
  if (_0x24bb77 == 1) {
    _0x515bd3.translate(_0x24b31f * 100, _0x24b31f * 0);
    circle(_0x515bd3, _0x24b31f * 113, _0x24b31f * 120, _0x24b31f * 66);
    fill_path(_0x515bd3, undefined, _0x2d8412[4], _0x24b31f * 13);
    var _0x46861b = create_sword(_0x24b31f * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]);
    _0x515bd3.rotate(0.7);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 133, _0x24b31f * -64);
    _0x515bd3.rotate(-0.7);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 70, _0x24b31f * 70);
    _0x515bd3.bezierCurveTo(_0x24b31f * 113, _0x24b31f * 120.5, _0x24b31f * 113, _0x24b31f * 120.5, _0x24b31f * 156, _0x24b31f * 171);
    _0x515bd3.closePath();
    fill_path(_0x515bd3, undefined, _0x2d8412[4], _0x24b31f * 13);
  } else if (_0x24bb77 == 2) {
    _0x515bd3.translate(_0x24b31f * 100, _0x24b31f * 0);
    circle(_0x515bd3, _0x24b31f * 113, _0x24b31f * 120, _0x24b31f * 66);
    fill_path(_0x515bd3, undefined, _0x2d8412[4], _0x24b31f * 13);
    _0x515bd3.translate(_0x24b31f * 30, _0x24b31f * 40);
    _0x515bd3.save();
    _0x515bd3.translate(_0x24b31f * 83.5, _0x24b31f * 66.5);
    round_rect(_0x515bd3, _0x24b31f * -40.5, _0x24b31f * -29.5, _0x24b31f * 81, _0x24b31f * 59, _0x24b31f * 15);
    _0x515bd3.restore();
    fill_path(_0x515bd3, "#dff2f7", "#187484", _0x24b31f * 7);
    circle(_0x515bd3, _0x24b31f * 22, _0x24b31f * 82, _0x24b31f * 12);
    fill_path(_0x515bd3, "#dff2f7", "#187484", _0x24b31f * 7);
    circle(_0x515bd3, _0x24b31f * 145, _0x24b31f * 82, _0x24b31f * 12);
    fill_path(_0x515bd3, "#dff2f7", "#187484", _0x24b31f * 7);
    var _0x46861b = create_plant(_0x24b31f * 0.5, true, ["#80500b", "#7c4908"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 10, _0x24b31f * 85);
    var _0x46861b = create_plant(_0x24b31f * 0.5, true, ["#80500b", "#7c4908"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 50, _0x24b31f * 85);
    var _0x46861b = create_plant(_0x24b31f * 0.5, true, ["#80500b", "#7c4908"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 90, _0x24b31f * 85);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 90, _0x24b31f * 105);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 90, _0x24b31f * 105);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 30, _0x24b31f * 125);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 50, _0x24b31f * 115);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 30, _0x24b31f * 100);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 80, _0x24b31f * 120);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 110, _0x24b31f * 125);
    var _0x46861b = create_fruit(_0x24b31f * 1, true, ["#3d2a6e", "#8255b5"]);
    _0x515bd3.drawImage(_0x46861b, _0x24b31f * 120, _0x24b31f * 105);
  } else if (_0x24bb77 == 3) {
    _0x515bd3.translate(_0x24b31f * 100, _0x24b31f * 0);
    circle(_0x515bd3, _0x24b31f * 113, _0x24b31f * 120, _0x24b31f * 66);
    fill_path(_0x515bd3, undefined, _0x2d8412[4], _0x24b31f * 13);
    _0x515bd3.translate(_0x24b31f * 40, _0x24b31f * 50);
    _0x515bd3.save();
    _0x515bd3.translate(_0x24b31f * 71, _0x24b31f * 69);
    round_rect(_0x515bd3, _0x24b31f * -30, _0x24b31f * -42, _0x24b31f * 60, _0x24b31f * 84, _0x24b31f * 10);
    _0x515bd3.restore();
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 4);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 42, _0x24b31f * 28);
    _0x515bd3.bezierCurveTo(_0x24b31f * 60, _0x24b31f * 31, _0x24b31f * 60, _0x24b31f * 31, _0x24b31f * 78, _0x24b31f * 34);
    _0x515bd3.bezierCurveTo(_0x24b31f * 82, _0x24b31f * 34, _0x24b31f * 84, _0x24b31f * 37, _0x24b31f * 83, _0x24b31f * 45);
    _0x515bd3.bezierCurveTo(_0x24b31f * 83, _0x24b31f * 80, _0x24b31f * 83, _0x24b31f * 80, _0x24b31f * 83, _0x24b31f * 115);
    _0x515bd3.bezierCurveTo(_0x24b31f * 83, _0x24b31f * 120, _0x24b31f * 80, _0x24b31f * 122, _0x24b31f * 73, _0x24b31f * 120);
    _0x515bd3.bezierCurveTo(_0x24b31f * 42, _0x24b31f * 111, _0x24b31f * 43, _0x24b31f * 109, _0x24b31f * 41, _0x24b31f * 102);
    _0x515bd3.bezierCurveTo(_0x24b31f * 41, _0x24b31f * 71, _0x24b31f * 41, _0x24b31f * 71, _0x24b31f * 41, _0x24b31f * 40);
    _0x515bd3.closePath();
    fill_path(_0x515bd3, _0x2d8412[5], _0x2d8412[5], _0x24b31f * 4);
    _0x515bd3.translate(_0x24b31f * -40, _0x24b31f * -50);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 70, _0x24b31f * 70);
    _0x515bd3.bezierCurveTo(_0x24b31f * 113, _0x24b31f * 120.5, _0x24b31f * 113, _0x24b31f * 120.5, _0x24b31f * 156, _0x24b31f * 171);
    _0x515bd3.closePath();
    fill_path(_0x515bd3, undefined, _0x2d8412[4], _0x24b31f * 13);
  } else if (_0x24bb77 == 4) {
    _0x515bd3.scale(1, 1);
    _0x515bd3.translate(_0x24b31f * 70, _0x24b31f * 50);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 23, _0x24b31f * 6);
    _0x515bd3.bezierCurveTo(_0x24b31f * 25.5, _0x24b31f * 56, _0x24b31f * 25.5, _0x24b31f * 56, _0x24b31f * 28, _0x24b31f * 106);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 59, _0x24b31f * 10);
    _0x515bd3.bezierCurveTo(_0x24b31f * 61, _0x24b31f * 51.5, _0x24b31f * 61, _0x24b31f * 51.5, _0x24b31f * 63, _0x24b31f * 93);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 7, _0x24b31f * 55);
    _0x515bd3.bezierCurveTo(_0x24b31f * 33.5, _0x24b31f * 55, _0x24b31f * 33.5, _0x24b31f * 55, _0x24b31f * 60, _0x24b31f * 55);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.translate(_0x24b31f * 10, _0x24b31f * 0);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 123, _0x24b31f * 16);
    _0x515bd3.bezierCurveTo(_0x24b31f * 103, _0x24b31f * 16.5, _0x24b31f * 103, _0x24b31f * 16.5, _0x24b31f * 83, _0x24b31f * 17);
    _0x515bd3.bezierCurveTo(_0x24b31f * 83.5, _0x24b31f * 61, _0x24b31f * 83.5, _0x24b31f * 61, _0x24b31f * 84, _0x24b31f * 105);
    _0x515bd3.bezierCurveTo(_0x24b31f * 106, _0x24b31f * 105, _0x24b31f * 106, _0x24b31f * 105, _0x24b31f * 128, _0x24b31f * 105);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 72, _0x24b31f * 63);
    _0x515bd3.bezierCurveTo(_0x24b31f * 88.5, _0x24b31f * 62.5, _0x24b31f * 88.5, _0x24b31f * 62.5, _0x24b31f * 105, _0x24b31f * 62);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.translate(_0x24b31f * 10, _0x24b31f * 10);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 141, _0x24b31f * 8);
    _0x515bd3.bezierCurveTo(_0x24b31f * 143, _0x24b31f * 50, _0x24b31f * 143, _0x24b31f * 50, _0x24b31f * 145, _0x24b31f * 92);
    _0x515bd3.bezierCurveTo(_0x24b31f * 169, _0x24b31f * 88.5, _0x24b31f * 169, _0x24b31f * 88.5, _0x24b31f * 193, _0x24b31f * 85);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
    _0x515bd3.translate(_0x24b31f * 10, _0x24b31f * -10);
    _0x515bd3.beginPath();
    _0x515bd3.lineCap = "round";
    _0x515bd3.lineJoin = "round";
    _0x515bd3.moveTo(_0x24b31f * 205, _0x24b31f * 124);
    _0x515bd3.bezierCurveTo(_0x24b31f * 205, _0x24b31f * 69, _0x24b31f * 205, _0x24b31f * 69, _0x24b31f * 205, _0x24b31f * 14);
    _0x515bd3.bezierCurveTo(_0x24b31f * 239, _0x24b31f * 15, _0x24b31f * 250, _0x24b31f * 37, _0x24b31f * 249, _0x24b31f * 49);
    _0x515bd3.bezierCurveTo(_0x24b31f * 251, _0x24b31f * 65, _0x24b31f * 242, _0x24b31f * 76, _0x24b31f * 206, _0x24b31f * 75);
    fill_path(_0x515bd3, undefined, _0x2d8412[5], _0x24b31f * 14);
  }
  return _0x1aaa6d;
}
function create_dragon_helmet(_0x347105, _0x3a5050, _0x1bdbff) {
  var _0x171903 = document.createElement("canvas");
  var _0x44cead = _0x171903.getContext("2d");
  _0x171903.width = _0x347105 * 345;
  _0x171903.height = _0x347105 * 250;
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 105, _0x347105 * 58);
  _0x44cead.bezierCurveTo(_0x347105 * 100.5, _0x347105 * 43, _0x347105 * 100.5, _0x347105 * 43, _0x347105 * 96, _0x347105 * 28);
  _0x44cead.bezierCurveTo(_0x347105 * 119.5, _0x347105 * 33.5, _0x347105 * 119.5, _0x347105 * 33.5, _0x347105 * 143, _0x347105 * 39);
  _0x44cead.bezierCurveTo(_0x347105 * 170, _0x347105 * 37, _0x347105 * 177, _0x347105 * 37, _0x347105 * 188, _0x347105 * 40);
  _0x44cead.bezierCurveTo(_0x347105 * 213, _0x347105 * 33.5, _0x347105 * 213, _0x347105 * 33.5, _0x347105 * 238, _0x347105 * 27);
  _0x44cead.bezierCurveTo(_0x347105 * 231, _0x347105 * 52, _0x347105 * 234, _0x347105 * 42.5, _0x347105 * 230, _0x347105 * 58);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[1], _0x1bdbff[2], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 108, _0x347105 * 51);
  _0x44cead.bezierCurveTo(_0x347105 * 91, _0x347105 * 55, _0x347105 * 85, _0x347105 * 44, _0x347105 * 86, _0x347105 * 29);
  _0x44cead.bezierCurveTo(_0x347105 * 62, _0x347105 * 50, _0x347105 * 78, _0x347105 * 69, _0x347105 * 92, _0x347105 * 75);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[3], _0x1bdbff[4], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 249, _0x347105 * 27);
  _0x44cead.bezierCurveTo(_0x347105 * 273, _0x347105 * 49, _0x347105 * 262, _0x347105 * 68, _0x347105 * 246, _0x347105 * 77);
  _0x44cead.bezierCurveTo(_0x347105 * 231, _0x347105 * 59, _0x347105 * 236, _0x347105 * 66.5, _0x347105 * 226, _0x347105 * 56);
  _0x44cead.bezierCurveTo(_0x347105 * 243, _0x347105 * 53, _0x347105 * 252, _0x347105 * 43, _0x347105 * 249, _0x347105 * 28);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[3], _0x1bdbff[4], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 87, _0x347105 * 78);
  _0x44cead.bezierCurveTo(_0x347105 * 87, _0x347105 * 59, _0x347105 * 98, _0x347105 * 46, _0x347105 * 127, _0x347105 * 48);
  _0x44cead.bezierCurveTo(_0x347105 * 176, _0x347105 * 48.5, _0x347105 * 176, _0x347105 * 48.5, _0x347105 * 225, _0x347105 * 49);
  _0x44cead.bezierCurveTo(_0x347105 * 243, _0x347105 * 49, _0x347105 * 253, _0x347105 * 59, _0x347105 * 253, _0x347105 * 76);
  _0x44cead.bezierCurveTo(_0x347105 * 211, _0x347105 * 85.5, _0x347105 * 211, _0x347105 * 85.5, _0x347105 * 169, _0x347105 * 95);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[5], _0x1bdbff[6], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 56, _0x347105 * 105);
  _0x44cead.bezierCurveTo(_0x347105 * 56, _0x347105 * 92, _0x347105 * 59, _0x347105 * 86, _0x347105 * 65, _0x347105 * 73);
  _0x44cead.bezierCurveTo(_0x347105 * 62.5, _0x347105 * 61.5, _0x347105 * 62.5, _0x347105 * 61.5, _0x347105 * 60, _0x347105 * 50);
  _0x44cead.bezierCurveTo(_0x347105 * 99.5, _0x347105 * 64.5, _0x347105 * 99.5, _0x347105 * 64.5, _0x347105 * 139, _0x347105 * 79);
  _0x44cead.bezierCurveTo(_0x347105 * 164, _0x347105 * 77, _0x347105 * 177, _0x347105 * 76, _0x347105 * 203, _0x347105 * 78);
  _0x44cead.bezierCurveTo(_0x347105 * 242, _0x347105 * 63.5, _0x347105 * 242, _0x347105 * 63.5, _0x347105 * 281, _0x347105 * 49);
  _0x44cead.bezierCurveTo(_0x347105 * 279, _0x347105 * 60.5, _0x347105 * 279, _0x347105 * 60.5, _0x347105 * 277, _0x347105 * 72);
  _0x44cead.bezierCurveTo(_0x347105 * 286, _0x347105 * 88, _0x347105 * 286, _0x347105 * 96, _0x347105 * 287, _0x347105 * 104);
  _0x44cead.bezierCurveTo(_0x347105 * 228.5, _0x347105 * 127, _0x347105 * 228.5, _0x347105 * 127, _0x347105 * 170, _0x347105 * 150);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[1], _0x1bdbff[2], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 48, _0x347105 * 130);
  _0x44cead.bezierCurveTo(_0x347105 * 61, _0x347105 * 155, _0x347105 * 63, _0x347105 * 165, _0x347105 * 56, _0x347105 * 171);
  _0x44cead.bezierCurveTo(_0x347105 * 48, _0x347105 * 177, _0x347105 * 40, _0x347105 * 171, _0x347105 * 38, _0x347105 * 178);
  _0x44cead.bezierCurveTo(_0x347105 * 33, _0x347105 * 180, _0x347105 * 37, _0x347105 * 188, _0x347105 * 47, _0x347105 * 208);
  _0x44cead.bezierCurveTo(_0x347105 * 52, _0x347105 * 221, _0x347105 * 55, _0x347105 * 222, _0x347105 * 75, _0x347105 * 229);
  _0x44cead.bezierCurveTo(_0x347105 * 91, _0x347105 * 213, _0x347105 * 98, _0x347105 * 212, _0x347105 * 112, _0x347105 * 219);
  _0x44cead.bezierCurveTo(_0x347105 * 167, _0x347105 * 225, _0x347105 * 187, _0x347105 * 224, _0x347105 * 222, _0x347105 * 220);
  _0x44cead.bezierCurveTo(_0x347105 * 244, _0x347105 * 214, _0x347105 * 247, _0x347105 * 213, _0x347105 * 263, _0x347105 * 229);
  _0x44cead.bezierCurveTo(_0x347105 * 295, _0x347105 * 220, _0x347105 * 291, _0x347105 * 215, _0x347105 * 301, _0x347105 * 194);
  _0x44cead.bezierCurveTo(_0x347105 * 308, _0x347105 * 178, _0x347105 * 309, _0x347105 * 176, _0x347105 * 302, _0x347105 * 173);
  _0x44cead.bezierCurveTo(_0x347105 * 290, _0x347105 * 177, _0x347105 * 289, _0x347105 * 177, _0x347105 * 283, _0x347105 * 169);
  _0x44cead.bezierCurveTo(_0x347105 * 279, _0x347105 * 163, _0x347105 * 279, _0x347105 * 161, _0x347105 * 290, _0x347105 * 130);
  _0x44cead.bezierCurveTo(_0x347105 * 270, _0x347105 * 127, _0x347105 * 270, _0x347105 * 127, _0x347105 * 250, _0x347105 * 124);
  _0x44cead.bezierCurveTo(_0x347105 * 209, _0x347105 * 137.5, _0x347105 * 209, _0x347105 * 137.5, _0x347105 * 168, _0x347105 * 151);
  _0x44cead.bezierCurveTo(_0x347105 * 121, _0x347105 * 135, _0x347105 * 121, _0x347105 * 135, _0x347105 * 74, _0x347105 * 119);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[1], _0x1bdbff[2], _0x347105 * 8);
  _0x44cead.globalCompositeOperation = "destination-out";
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 133, _0x347105 * 158);
  _0x44cead.bezierCurveTo(_0x347105 * 152, _0x347105 * 193, _0x347105 * 158, _0x347105 * 205, _0x347105 * 140, _0x347105 * 203);
  _0x44cead.bezierCurveTo(_0x347105 * 99, _0x347105 * 195, _0x347105 * 96, _0x347105 * 189, _0x347105 * 86, _0x347105 * 173);
  _0x44cead.bezierCurveTo(_0x347105 * 80, _0x347105 * 159, _0x347105 * 88, _0x347105 * 145, _0x347105 * 104, _0x347105 * 141);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[7], _0x1bdbff[8], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 215, _0x347105 * 146);
  _0x44cead.bezierCurveTo(_0x347105 * 204, _0x347105 * 167, _0x347105 * 204, _0x347105 * 167, _0x347105 * 193, _0x347105 * 188);
  _0x44cead.bezierCurveTo(_0x347105 * 187, _0x347105 * 201, _0x347105 * 191, _0x347105 * 209, _0x347105 * 213, _0x347105 * 201);
  _0x44cead.bezierCurveTo(_0x347105 * 247, _0x347105 * 192, _0x347105 * 253, _0x347105 * 181, _0x347105 * 257, _0x347105 * 169);
  _0x44cead.bezierCurveTo(_0x347105 * 260, _0x347105 * 157, _0x347105 * 254, _0x347105 * 149, _0x347105 * 243, _0x347105 * 141);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[7], _0x1bdbff[8], _0x347105 * 8);
  _0x44cead.globalCompositeOperation = "source-over";
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 133, _0x347105 * 158);
  _0x44cead.bezierCurveTo(_0x347105 * 152, _0x347105 * 193, _0x347105 * 158, _0x347105 * 205, _0x347105 * 140, _0x347105 * 203);
  _0x44cead.bezierCurveTo(_0x347105 * 99, _0x347105 * 195, _0x347105 * 96, _0x347105 * 189, _0x347105 * 86, _0x347105 * 173);
  _0x44cead.bezierCurveTo(_0x347105 * 80, _0x347105 * 159, _0x347105 * 88, _0x347105 * 145, _0x347105 * 104, _0x347105 * 141);
  _0x44cead.closePath();
  fill_path(_0x44cead, undefined, _0x1bdbff[8], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 215, _0x347105 * 146);
  _0x44cead.bezierCurveTo(_0x347105 * 204, _0x347105 * 167, _0x347105 * 204, _0x347105 * 167, _0x347105 * 193, _0x347105 * 188);
  _0x44cead.bezierCurveTo(_0x347105 * 187, _0x347105 * 201, _0x347105 * 191, _0x347105 * 209, _0x347105 * 213, _0x347105 * 201);
  _0x44cead.bezierCurveTo(_0x347105 * 247, _0x347105 * 192, _0x347105 * 253, _0x347105 * 181, _0x347105 * 257, _0x347105 * 169);
  _0x44cead.bezierCurveTo(_0x347105 * 260, _0x347105 * 157, _0x347105 * 254, _0x347105 * 149, _0x347105 * 243, _0x347105 * 141);
  _0x44cead.closePath();
  fill_path(_0x44cead, undefined, _0x1bdbff[8], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 39, _0x347105 * 66);
  _0x44cead.bezierCurveTo(_0x347105 * 57, _0x347105 * 107, _0x347105 * 63, _0x347105 * 96, _0x347105 * 120, _0x347105 * 106);
  _0x44cead.bezierCurveTo(_0x347105 * 154, _0x347105 * 112, _0x347105 * 163, _0x347105 * 116, _0x347105 * 174, _0x347105 * 135);
  _0x44cead.bezierCurveTo(_0x347105 * 180, _0x347105 * 109, _0x347105 * 191, _0x347105 * 113, _0x347105 * 237, _0x347105 * 103);
  _0x44cead.bezierCurveTo(_0x347105 * 276, _0x347105 * 100, _0x347105 * 289, _0x347105 * 94, _0x347105 * 301, _0x347105 * 67);
  _0x44cead.bezierCurveTo(_0x347105 * 317, _0x347105 * 112, _0x347105 * 301, _0x347105 * 141, _0x347105 * 274, _0x347105 * 139);
  _0x44cead.bezierCurveTo(_0x347105 * 204, _0x347105 * 166, _0x347105 * 197, _0x347105 * 169, _0x347105 * 173, _0x347105 * 183);
  _0x44cead.bezierCurveTo(_0x347105 * 170, _0x347105 * 183, _0x347105 * 170, _0x347105 * 183, _0x347105 * 167, _0x347105 * 183);
  _0x44cead.bezierCurveTo(_0x347105 * 132, _0x347105 * 160, _0x347105 * 112, _0x347105 * 156, _0x347105 * 73, _0x347105 * 141);
  _0x44cead.bezierCurveTo(_0x347105 * 43, _0x347105 * 146, _0x347105 * 27, _0x347105 * 120, _0x347105 * 39, _0x347105 * 66);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[7], _0x1bdbff[8], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 115, _0x347105 * 185);
  _0x44cead.bezierCurveTo(_0x347105 * 115, _0x347105 * 200, _0x347105 * 118, _0x347105 * 206, _0x347105 * 124, _0x347105 * 212);
  _0x44cead.bezierCurveTo(_0x347105 * 133, _0x347105 * 223, _0x347105 * 132, _0x347105 * 231, _0x347105 * 121, _0x347105 * 230);
  _0x44cead.bezierCurveTo(_0x347105 * 108, _0x347105 * 226, _0x347105 * 108, _0x347105 * 215, _0x347105 * 107, _0x347105 * 209);
  _0x44cead.bezierCurveTo(_0x347105 * 106, _0x347105 * 201, _0x347105 * 110, _0x347105 * 196, _0x347105 * 114, _0x347105 * 185);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[3], _0x1bdbff[4], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 226, _0x347105 * 186);
  _0x44cead.bezierCurveTo(_0x347105 * 234, _0x347105 * 201, _0x347105 * 238, _0x347105 * 209, _0x347105 * 228, _0x347105 * 225);
  _0x44cead.bezierCurveTo(_0x347105 * 223, _0x347105 * 233, _0x347105 * 213, _0x347105 * 233, _0x347105 * 211, _0x347105 * 226);
  _0x44cead.bezierCurveTo(_0x347105 * 206, _0x347105 * 219, _0x347105 * 217, _0x347105 * 216, _0x347105 * 221, _0x347105 * 207);
  _0x44cead.bezierCurveTo(_0x347105 * 225, _0x347105 * 196, _0x347105 * 225, _0x347105 * 191, _0x347105 * 226, _0x347105 * 186);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[3], _0x1bdbff[4], _0x347105 * 8);
  _0x44cead.beginPath();
  _0x44cead.lineCap = "round";
  _0x44cead.lineJoin = "round";
  _0x44cead.moveTo(_0x347105 * 172, _0x347105 * 110);
  _0x44cead.bezierCurveTo(_0x347105 * 189, _0x347105 * 153, _0x347105 * 192, _0x347105 * 160, _0x347105 * 188, _0x347105 * 175);
  _0x44cead.bezierCurveTo(_0x347105 * 183, _0x347105 * 190, _0x347105 * 176, _0x347105 * 197, _0x347105 * 165, _0x347105 * 191);
  _0x44cead.bezierCurveTo(_0x347105 * 153, _0x347105 * 181, _0x347105 * 152, _0x347105 * 166, _0x347105 * 157, _0x347105 * 151);
  _0x44cead.bezierCurveTo(_0x347105 * 164.5, _0x347105 * 131, _0x347105 * 164.5, _0x347105 * 131, _0x347105 * 172, _0x347105 * 111);
  _0x44cead.closePath();
  fill_path(_0x44cead, _0x1bdbff[3], _0x1bdbff[4], _0x347105 * 8);
  return _0x171903;
}
function create_fir_one(_0x424d4b, _0x26c949) {
  var _0x4a7c6e = document.createElement("canvas");
  var _0x22d217 = _0x4a7c6e.getContext("2d");
  _0x4a7c6e.width = _0x424d4b * 149;
  _0x4a7c6e.height = _0x424d4b * 153;
  _0x22d217.globalAlpha = 0.5;
  circle(_0x22d217, _0x424d4b * 74.5, _0x424d4b * 85, _0x424d4b * 66);
  fill_path(_0x22d217, _0x26c949[0]);
  _0x22d217.globalAlpha = 1;
  circle(_0x22d217, _0x424d4b * 75.5, _0x424d4b * 72.5, _0x424d4b * 67);
  fill_path(_0x22d217, _0x26c949[1], _0x26c949[2], _0x424d4b * 4);
  circle(_0x22d217, _0x424d4b * 75.5, _0x424d4b * 73.5, _0x424d4b * 54);
  fill_path(_0x22d217, _0x26c949[3]);
  _0x22d217.globalAlpha = 0.5;
  circle(_0x22d217, _0x424d4b * 74.5, _0x424d4b * 80.5, _0x424d4b * 39);
  fill_path(_0x22d217, _0x26c949[4]);
  _0x22d217.globalAlpha = 1;
  circle(_0x22d217, _0x424d4b * 74.5, _0x424d4b * 74.5, _0x424d4b * 37);
  fill_path(_0x22d217, _0x26c949[5]);
  return _0x4a7c6e;
}
function create_fir_two(_0x323a1a, _0x997ad9) {
  var _0x301327 = document.createElement("canvas");
  var _0x567fe0 = _0x301327.getContext("2d");
  _0x301327.width = _0x323a1a * 173;
  _0x301327.height = _0x323a1a * 178;
  _0x567fe0.globalAlpha = 0.5;
  circle(_0x567fe0, _0x323a1a * 86.5, _0x323a1a * 98, _0x323a1a * 80);
  fill_path(_0x567fe0, _0x997ad9[0]);
  _0x567fe0.globalAlpha = 1;
  circle(_0x567fe0, _0x323a1a * 86.5, _0x323a1a * 89, _0x323a1a * 81);
  fill_path(_0x567fe0, _0x997ad9[1], _0x997ad9[2], _0x323a1a * 4);
  circle(_0x567fe0, _0x323a1a * 86.5, _0x323a1a * 86, _0x323a1a * 59);
  fill_path(_0x567fe0, _0x997ad9[3], _0x997ad9[4], _0x323a1a * 4);
  _0x567fe0.globalAlpha = 0.5;
  circle(_0x567fe0, _0x323a1a * 86.5, _0x323a1a * 95, _0x323a1a * 34);
  fill_path(_0x567fe0, _0x997ad9[0]);
  _0x567fe0.globalAlpha = 1;
  circle(_0x567fe0, _0x323a1a * 86.5, _0x323a1a * 89, _0x323a1a * 34);
  fill_path(_0x567fe0, _0x997ad9[5]);
  return _0x301327;
}
function create_fir_three(_0x2d9920, _0x19aef1) {
  var _0x39577e = document.createElement("canvas");
  var _0x1b278f = _0x39577e.getContext("2d");
  _0x39577e.width = _0x2d9920 * 253;
  _0x39577e.height = _0x2d9920 * 260;
  _0x1b278f.globalAlpha = 0.5;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 134, _0x2d9920 * 119);
  fill_path(_0x1b278f, _0x19aef1[0]);
  _0x1b278f.globalAlpha = 1;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 124, _0x2d9920 * 119);
  fill_path(_0x1b278f, _0x19aef1[1], _0x19aef1[2], _0x2d9920 * 4);
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 127, _0x2d9920 * 100);
  fill_path(_0x1b278f, _0x19aef1[3]);
  _0x1b278f.globalAlpha = 0.5;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 135, _0x2d9920 * 81);
  fill_path(_0x1b278f, _0x19aef1[0]);
  _0x1b278f.globalAlpha = 1;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 125, _0x2d9920 * 84);
  fill_path(_0x1b278f, _0x19aef1[4], _0x19aef1[5], _0x2d9920 * 4);
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 125, _0x2d9920 * 61);
  fill_path(_0x1b278f, _0x19aef1[6], _0x19aef1[7], _0x2d9920 * 4);
  _0x1b278f.globalAlpha = 0.5;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 134, _0x2d9920 * 40);
  fill_path(_0x1b278f, _0x19aef1[8]);
  _0x1b278f.globalAlpha = 1;
  circle(_0x1b278f, _0x2d9920 * 126.5, _0x2d9920 * 125, _0x2d9920 * 40);
  fill_path(_0x1b278f, _0x19aef1[9]);
  return _0x39577e;
}
function create_amethyst(_0xd8512e, _0x260ffd, _0xfee181) {
  var _0x4efdc9 = document.createElement("canvas");
  var _0x23ba02 = _0x4efdc9.getContext("2d");
  _0x4efdc9.width = _0xd8512e * 139;
  _0x4efdc9.height = _0xd8512e * 135;
  _0x23ba02.translate(0, _0xd8512e * 10);
  _0x23ba02.globalAlpha = _0x260ffd ? 0.5 : 1;
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 32, _0xd8512e * 77);
  _0x23ba02.bezierCurveTo(_0xd8512e * 6, _0xd8512e * 41, _0xd8512e * 6, _0xd8512e * 33, _0xd8512e * 12, _0xd8512e * 27);
  _0x23ba02.bezierCurveTo(_0xd8512e * 27, _0xd8512e * 6, _0xd8512e * 28, _0xd8512e * 6, _0xd8512e * 37, _0xd8512e * 6);
  _0x23ba02.bezierCurveTo(_0xd8512e * 62, _0xd8512e * 3, _0xd8512e * 64, _0xd8512e * 5, _0xd8512e * 67, _0xd8512e * 13);
  _0x23ba02.bezierCurveTo(_0xd8512e * 80, _0xd8512e * 36, _0xd8512e * 73.5, _0xd8512e * 25, _0xd8512e * 80, _0xd8512e * 37);
  _0x23ba02.bezierCurveTo(_0xd8512e * 73.5, _0xd8512e * 54, _0xd8512e * 65, _0xd8512e * 74, _0xd8512e * 67, _0xd8512e * 71);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[0]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 65, _0xd8512e * 37);
  _0x23ba02.bezierCurveTo(_0xd8512e * 105, _0xd8512e * 40, _0xd8512e * 113, _0xd8512e * 39, _0xd8512e * 117, _0xd8512e * 48);
  _0x23ba02.bezierCurveTo(_0xd8512e * 126, _0xd8512e * 70, _0xd8512e * 128, _0xd8512e * 72, _0xd8512e * 124, _0xd8512e * 80);
  _0x23ba02.bezierCurveTo(_0xd8512e * 112, _0xd8512e * 101, _0xd8512e * 110, _0xd8512e * 104, _0xd8512e * 99, _0xd8512e * 104);
  _0x23ba02.bezierCurveTo(_0xd8512e * 59, _0xd8512e * 100, _0xd8512e * 55, _0xd8512e * 99, _0xd8512e * 56, _0xd8512e * 99);
  _0x23ba02.bezierCurveTo(_0xd8512e * 47.5, _0xd8512e * 79, _0xd8512e * 45, _0xd8512e * 66, _0xd8512e * 39, _0xd8512e * 59);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[0]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 30, _0xd8512e * 63);
  _0x23ba02.bezierCurveTo(_0xd8512e * 5, _0xd8512e * 99, _0xd8512e * 5, _0xd8512e * 101, _0xd8512e * 8, _0xd8512e * 103);
  _0x23ba02.bezierCurveTo(_0xd8512e * 19, _0xd8512e * 123, _0xd8512e * 22, _0xd8512e * 125, _0xd8512e * 28, _0xd8512e * 126);
  _0x23ba02.bezierCurveTo(_0xd8512e * 57, _0xd8512e * 127, _0xd8512e * 55, _0xd8512e * 127, _0xd8512e * 58, _0xd8512e * 120);
  _0x23ba02.bezierCurveTo(_0xd8512e * 82, _0xd8512e * 86, _0xd8512e * 83, _0xd8512e * 78, _0xd8512e * 82, _0xd8512e * 87);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[0]);
  _0x23ba02.translate(0, _0xd8512e * -10);
  _0x23ba02.globalAlpha = 1;
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 32, _0xd8512e * 77);
  _0x23ba02.bezierCurveTo(_0xd8512e * 6, _0xd8512e * 41, _0xd8512e * 6, _0xd8512e * 33, _0xd8512e * 12, _0xd8512e * 27);
  _0x23ba02.bezierCurveTo(_0xd8512e * 27, _0xd8512e * 6, _0xd8512e * 28, _0xd8512e * 6, _0xd8512e * 37, _0xd8512e * 6);
  _0x23ba02.bezierCurveTo(_0xd8512e * 62, _0xd8512e * 3, _0xd8512e * 64, _0xd8512e * 5, _0xd8512e * 67, _0xd8512e * 13);
  _0x23ba02.bezierCurveTo(_0xd8512e * 80, _0xd8512e * 36, _0xd8512e * 73.5, _0xd8512e * 25, _0xd8512e * 80, _0xd8512e * 37);
  _0x23ba02.bezierCurveTo(_0xd8512e * 73.5, _0xd8512e * 54, _0xd8512e * 65, _0xd8512e * 74, _0xd8512e * 67, _0xd8512e * 71);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[1]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 65, _0xd8512e * 37);
  _0x23ba02.bezierCurveTo(_0xd8512e * 105, _0xd8512e * 40, _0xd8512e * 113, _0xd8512e * 39, _0xd8512e * 117, _0xd8512e * 48);
  _0x23ba02.bezierCurveTo(_0xd8512e * 126, _0xd8512e * 70, _0xd8512e * 128, _0xd8512e * 72, _0xd8512e * 124, _0xd8512e * 80);
  _0x23ba02.bezierCurveTo(_0xd8512e * 112, _0xd8512e * 101, _0xd8512e * 110, _0xd8512e * 104, _0xd8512e * 99, _0xd8512e * 104);
  _0x23ba02.bezierCurveTo(_0xd8512e * 59, _0xd8512e * 100, _0xd8512e * 55, _0xd8512e * 99, _0xd8512e * 56, _0xd8512e * 99);
  _0x23ba02.bezierCurveTo(_0xd8512e * 47.5, _0xd8512e * 79, _0xd8512e * 45, _0xd8512e * 66, _0xd8512e * 39, _0xd8512e * 59);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[1]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 30, _0xd8512e * 63);
  _0x23ba02.bezierCurveTo(_0xd8512e * 5, _0xd8512e * 99, _0xd8512e * 5, _0xd8512e * 101, _0xd8512e * 8, _0xd8512e * 103);
  _0x23ba02.bezierCurveTo(_0xd8512e * 19, _0xd8512e * 123, _0xd8512e * 22, _0xd8512e * 125, _0xd8512e * 28, _0xd8512e * 126);
  _0x23ba02.bezierCurveTo(_0xd8512e * 57, _0xd8512e * 127, _0xd8512e * 55, _0xd8512e * 127, _0xd8512e * 58, _0xd8512e * 120);
  _0x23ba02.bezierCurveTo(_0xd8512e * 82, _0xd8512e * 86, _0xd8512e * 83, _0xd8512e * 78, _0xd8512e * 82, _0xd8512e * 87);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[1]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 80, _0xd8512e * 38);
  _0x23ba02.bezierCurveTo(_0xd8512e * 72.5, _0xd8512e * 52, _0xd8512e * 72.5, _0xd8512e * 52, _0xd8512e * 65, _0xd8512e * 66);
  _0x23ba02.bezierCurveTo(_0xd8512e * 47.5, _0xd8512e * 37, _0xd8512e * 47.5, _0xd8512e * 37, _0xd8512e * 30, _0xd8512e * 7);
  _0x23ba02.bezierCurveTo(_0xd8512e * 48, _0xd8512e * 4, _0xd8512e * 57, _0xd8512e * 4, _0xd8512e * 64, _0xd8512e * 10);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[2]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 65, _0xd8512e * 65);
  _0x23ba02.bezierCurveTo(_0xd8512e * 125, _0xd8512e * 73, _0xd8512e * 95.5, _0xd8512e * 69, _0xd8512e * 126, _0xd8512e * 73);
  _0x23ba02.bezierCurveTo(_0xd8512e * 119, _0xd8512e * 98, _0xd8512e * 106, _0xd8512e * 104, _0xd8512e * 98, _0xd8512e * 103);
  _0x23ba02.bezierCurveTo(_0xd8512e * 84.5, _0xd8512e * 102, _0xd8512e * 84.5, _0xd8512e * 102, _0xd8512e * 71, _0xd8512e * 101);
  _0x23ba02.bezierCurveTo(_0xd8512e * 64, _0xd8512e * 86, _0xd8512e * 64, _0xd8512e * 86, _0xd8512e * 57, _0xd8512e * 70);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[2]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 27, _0xd8512e * 69);
  _0x23ba02.bezierCurveTo(_0xd8512e * 64, _0xd8512e * 65, _0xd8512e * 46, _0xd8512e * 67, _0xd8512e * 65, _0xd8512e * 65);
  _0x23ba02.bezierCurveTo(_0xd8512e * 43.5, _0xd8512e * 94, _0xd8512e * 43.5, _0xd8512e * 94, _0xd8512e * 22, _0xd8512e * 123);
  _0x23ba02.bezierCurveTo(_0xd8512e * 8, _0xd8512e * 103, _0xd8512e * 8, _0xd8512e * 103, _0xd8512e * 9, _0xd8512e * 103);
  _0x23ba02.bezierCurveTo(_0xd8512e * 5, _0xd8512e * 98, _0xd8512e * 11, _0xd8512e * 89, _0xd8512e * 26, _0xd8512e * 70);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[2]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 26, _0xd8512e * 69);
  _0x23ba02.bezierCurveTo(_0xd8512e * 65, _0xd8512e * 60, _0xd8512e * 45, _0xd8512e * 65, _0xd8512e * 64, _0xd8512e * 60);
  _0x23ba02.bezierCurveTo(_0xd8512e * 63, _0xd8512e * 65, _0xd8512e * 63, _0xd8512e * 65, _0xd8512e * 62, _0xd8512e * 70);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[2]);
  _0x23ba02.beginPath();
  _0x23ba02.lineCap = "round";
  _0x23ba02.lineJoin = "round";
  _0x23ba02.moveTo(_0xd8512e * 80, _0xd8512e * 38);
  _0x23ba02.bezierCurveTo(_0xd8512e * 68, _0xd8512e * 70, _0xd8512e * 75, _0xd8512e * 53, _0xd8512e * 70, _0xd8512e * 68);
  _0x23ba02.bezierCurveTo(_0xd8512e * 65, _0xd8512e * 67, _0xd8512e * 65, _0xd8512e * 67, _0xd8512e * 60, _0xd8512e * 65);
  _0x23ba02.closePath();
  fill_path(_0x23ba02, _0xfee181[2]);
  return _0x4efdc9;
}
function create_dragon_ground(_0x11c181, _0x426a10) {
  var _0x4745dc = document.createElement("canvas");
  var _0x2926ed = _0x4745dc.getContext("2d");
  _0x4745dc.width = _0x11c181 * 100;
  _0x4745dc.height = _0x11c181 * 100;
  _0x2926ed.globalAlpha = 0.5;
  _0x2926ed.fillStyle = _0x426a10[0];
  _0x2926ed.fillRect(0, 0, _0x4745dc.width, _0x4745dc.height);
  return _0x4745dc;
}
function create_snow_one(_0x48a161, _0x33f44b) {
  var _0x598c66 = document.createElement("canvas");
  var _0x5eb7b3 = _0x598c66.getContext("2d");
  _0x598c66.width = _0x48a161 * 120;
  _0x598c66.height = _0x48a161 * 300;
  _0x5eb7b3.translate(_0x48a161 * -80, -20);
  _0x5eb7b3.beginPath();
  _0x5eb7b3.lineCap = "round";
  _0x5eb7b3.lineJoin = "round";
  _0x5eb7b3.moveTo(_0x48a161 * 200.5, _0x48a161 * 14.953125);
  _0x5eb7b3.bezierCurveTo(_0x48a161 * 203, _0x48a161 * 171.953125, _0x48a161 * 203, _0x48a161 * 171.953125, _0x48a161 * 205.5, _0x48a161 * 328.953125);
  _0x5eb7b3.bezierCurveTo(_0x48a161 * 188.5, _0x48a161 * 257.953125, _0x48a161 * 164.5, _0x48a161 * 216.953125, _0x48a161 * 166.5, _0x48a161 * 176.953125);
  _0x5eb7b3.bezierCurveTo(_0x48a161 * 168.5, _0x48a161 * 133.953125, _0x48a161 * 198.5, _0x48a161 * 98.953125, _0x48a161 * 200.5, _0x48a161 * 14.953125);
  _0x5eb7b3.closePath();
  fill_path(_0x5eb7b3, _0x33f44b[0]);
  return _0x598c66;
}
function create_snow_two(_0x3273fd, _0x1996dc) {
  var _0x44951b = document.createElement("canvas");
  var _0x387fa9 = _0x44951b.getContext("2d");
  _0x44951b.width = _0x3273fd * 120;
  _0x44951b.height = _0x3273fd * 300;
  _0x387fa9.translate(_0x3273fd * -200, _0x3273fd * -40);
  _0x387fa9.beginPath();
  _0x387fa9.lineCap = "round";
  _0x387fa9.lineJoin = "round";
  _0x387fa9.moveTo(_0x3273fd * 344, _0x3273fd * 18.40625);
  _0x387fa9.bezierCurveTo(_0x3273fd * 345, _0x3273fd * 361.40625, _0x3273fd * 344, _0x3273fd * 191.40625, _0x3273fd * 344, _0x3273fd * 364.40625);
  _0x387fa9.bezierCurveTo(_0x3273fd * 261, _0x3273fd * 275.40625, _0x3273fd * 274, _0x3273fd * 259.40625, _0x3273fd * 229, _0x3273fd * 213.40625);
  _0x387fa9.bezierCurveTo(_0x3273fd * 199, _0x3273fd * 187.40625, _0x3273fd * 222, _0x3273fd * 133.40625, _0x3273fd * 273, _0x3273fd * 100.40625);
  _0x387fa9.bezierCurveTo(_0x3273fd * 321, _0x3273fd * 71.40625, _0x3273fd * 327, _0x3273fd * 34.40625, _0x3273fd * 344, _0x3273fd * 18.40625);
  _0x387fa9.closePath();
  fill_path(_0x387fa9, _0x1996dc[0]);
  _0x387fa9.beginPath();
  _0x387fa9.lineCap = "round";
  _0x387fa9.lineJoin = "round";
  _0x387fa9.moveTo(_0x3273fd * 335, _0x3273fd * 38.072906494140625);
  _0x387fa9.bezierCurveTo(_0x3273fd * 307, _0x3273fd * 62.072906494140625, _0x3273fd * 291, _0x3273fd * 60.072906494140625, _0x3273fd * 262, _0x3273fd * 68.07290649414062);
  _0x387fa9.bezierCurveTo(_0x3273fd * 223, _0x3273fd * 80.07290649414062, _0x3273fd * 225, _0x3273fd * 111.07290649414062, _0x3273fd * 264, _0x3273fd * 139.07290649414062);
  _0x387fa9.closePath();
  fill_path(_0x387fa9, _0x1996dc[0]);
  return _0x44951b;
}
function create_snow_three(_0x2b2534, _0x45dc53) {
  var _0x31be57 = document.createElement("canvas");
  var _0x795661 = _0x31be57.getContext("2d");
  _0x31be57.width = _0x2b2534 * 120;
  _0x31be57.height = _0x2b2534 * 320;
  _0x795661.translate(_0x2b2534 * -60, _0x2b2534 * -15);
  _0x795661.beginPath();
  _0x795661.lineCap = "round";
  _0x795661.lineJoin = "round";
  _0x795661.moveTo(_0x2b2534 * 188.5, _0x2b2534 * 3.953125);
  _0x795661.bezierCurveTo(_0x2b2534 * 188.5, _0x2b2534 * 171.453125, _0x2b2534 * 188.5, _0x2b2534 * 171.453125, _0x2b2534 * 188.5, _0x2b2534 * 338.953125);
  _0x795661.bezierCurveTo(_0x2b2534 * 162.5, _0x2b2534 * 268.953125, _0x2b2534 * 145.5, _0x2b2534 * 265.953125, _0x2b2534 * 116.5, _0x2b2534 * 244.953125);
  _0x795661.bezierCurveTo(_0x2b2534 * 67.5, _0x2b2534 * 204.953125, _0x2b2534 * 87.5, _0x2b2534 * 160.953125, _0x2b2534 * 113.5, _0x2b2534 * 125.953125);
  _0x795661.bezierCurveTo(_0x2b2534 * 141.5, _0x2b2534 * 90.953125, _0x2b2534 * 176.5, _0x2b2534 * 56.953125, _0x2b2534 * 188.5, _0x2b2534 * 3.953125);
  _0x795661.closePath();
  fill_path(_0x795661, _0x45dc53[0]);
  return _0x31be57;
}
function create_snow_four(_0x532a3e, _0x584afa) {
  var _0x2645df = document.createElement("canvas");
  var _0x28ca70 = _0x2645df.getContext("2d");
  _0x2645df.width = _0x532a3e * 120;
  _0x2645df.height = _0x532a3e * 330;
  _0x28ca70.translate(_0x532a3e * -60, _0x532a3e * -10);
  _0x28ca70.beginPath();
  _0x28ca70.lineCap = "round";
  _0x28ca70.lineJoin = "round";
  _0x28ca70.moveTo(_0x532a3e * 188.5, _0x532a3e * 7.953125);
  _0x28ca70.bezierCurveTo(_0x532a3e * 188.5, _0x532a3e * 334.953125, _0x532a3e * 188.5, _0x532a3e * 332.953125, _0x532a3e * 188.5, _0x532a3e * 339.953125);
  _0x28ca70.bezierCurveTo(_0x532a3e * 166.5, _0x532a3e * 295.953125, _0x532a3e * 145.5, _0x532a3e * 295.953125, _0x532a3e * 139.5, _0x532a3e * 282.953125);
  _0x28ca70.bezierCurveTo(_0x532a3e * 124.5, _0x532a3e * 244.953125, _0x532a3e * 139.5, _0x532a3e * 243.953125, _0x532a3e * 131.5, _0x532a3e * 212.953125);
  _0x28ca70.bezierCurveTo(_0x532a3e * 118.5, _0x532a3e * 161.953125, _0x532a3e * 69.5, _0x532a3e * 156.953125, _0x532a3e * 74.5, _0x532a3e * 92.953125);
  _0x28ca70.bezierCurveTo(_0x532a3e * 85.5, _0x532a3e * 41.953125, _0x532a3e * 158.5, _0x532a3e * 49.953125, _0x532a3e * 188.5, _0x532a3e * 7.953125);
  _0x28ca70.closePath();
  fill_path(_0x28ca70, _0x584afa[0]);
  return _0x2645df;
}
function create_snow_five(_0x3cbf2c, _0x11a393) {
  var _0xb89178 = document.createElement("canvas");
  var _0x52bdc5 = _0xb89178.getContext("2d");
  _0xb89178.width = _0x3cbf2c * 48;
  _0xb89178.height = _0x3cbf2c * 47;
  _0x52bdc5.beginPath();
  _0x52bdc5.lineCap = "round";
  _0x52bdc5.lineJoin = "round";
  _0x52bdc5.moveTo(_0x3cbf2c * 7.1875, _0x3cbf2c * 25.434661865234375);
  _0x52bdc5.bezierCurveTo(_0x3cbf2c * 11.1875, _0x3cbf2c * 13.434661865234375, _0x3cbf2c * 18.1875, _0x3cbf2c * 8.434661865234375, _0x3cbf2c * 32.1875, _0x3cbf2c * 10.434661865234375);
  _0x52bdc5.bezierCurveTo(_0x3cbf2c * 45.1875, _0x3cbf2c * 14.434661865234375, _0x3cbf2c * 41.1875, _0x3cbf2c * 24.434661865234375, _0x3cbf2c * 36.1875, _0x3cbf2c * 30.434661865234375);
  _0x52bdc5.bezierCurveTo(_0x3cbf2c * 22.1875, _0x3cbf2c * 42.434661865234375, _0x3cbf2c * 2.1875, _0x3cbf2c * 41.434661865234375, _0x3cbf2c * 7.1875, _0x3cbf2c * 25.434661865234375);
  _0x52bdc5.closePath();
  fill_path(_0x52bdc5, _0x11a393[0]);
  return _0xb89178;
}
function create_snow_six(_0x126dce, _0x867d93) {
  var _0x48694c = document.createElement("canvas");
  var _0x3c191b = _0x48694c.getContext("2d");
  _0x48694c.width = _0x126dce * 120;
  _0x48694c.height = _0x126dce * 280;
  _0x3c191b.translate(_0x126dce * -100, _0x126dce * -20);
  _0x3c191b.beginPath();
  _0x3c191b.lineCap = "round";
  _0x3c191b.lineJoin = "round";
  _0x3c191b.moveTo(_0x126dce * 228.5, _0x126dce * 331.953125);
  _0x3c191b.bezierCurveTo(_0x126dce * 228.5, _0x126dce * 12.953125, _0x126dce * 228.5, _0x126dce * 171.453125, _0x126dce * 228.5, _0x126dce * 10.953125);
  _0x3c191b.bezierCurveTo(_0x126dce * 196.5, _0x126dce * 76.953125, _0x126dce * 206.5, _0x126dce * 78.953125, _0x126dce * 191.5, _0x126dce * 114.953125);
  _0x3c191b.bezierCurveTo(_0x126dce * 162.5, _0x126dce * 170.953125, _0x126dce * 206.5, _0x126dce * 220.953125, _0x126dce * 210.5, _0x126dce * 251.953125);
  _0x3c191b.bezierCurveTo(_0x126dce * 218.5, _0x126dce * 287.953125, _0x126dce * 220.5, _0x126dce * 291.953125, _0x126dce * 228.5, _0x126dce * 331.953125);
  _0x3c191b.closePath();
  fill_path(_0x3c191b, _0x867d93[0]);
  return _0x48694c;
}
function create_snow_sept(_0x3f03c7, _0x1b7507) {
  var _0x1ca061 = document.createElement("canvas");
  var _0x3bbb26 = _0x1ca061.getContext("2d");
  _0x1ca061.width = _0x3f03c7 * 33;
  _0x1ca061.height = _0x3f03c7 * 35;
  _0x3bbb26.beginPath();
  _0x3bbb26.lineCap = "round";
  _0x3bbb26.lineJoin = "round";
  _0x3bbb26.moveTo(_0x3f03c7 * 12.75, _0x3f03c7 * 7.1328125);
  _0x3bbb26.bezierCurveTo(_0x3f03c7 * 26.75, _0x3f03c7 * 8.1328125, _0x3f03c7 * 27.75, _0x3f03c7 * 14.1328125, _0x3f03c7 * 24.75, _0x3f03c7 * 23.1328125);
  _0x3bbb26.bezierCurveTo(_0x3f03c7 * 19.75, _0x3f03c7 * 31.1328125, _0x3f03c7 * 15.75, _0x3f03c7 * 33.1328125, _0x3f03c7 * 6.75, _0x3f03c7 * 26.1328125);
  _0x3bbb26.bezierCurveTo(_0x3f03c7 * 0.75, _0x3f03c7 * 19.1328125, _0x3f03c7 * 4.75, _0x3f03c7 * 8.1328125, _0x3f03c7 * 12.75, _0x3f03c7 * 7.1328125);
  _0x3bbb26.closePath();
  fill_path(_0x3bbb26, _0x1b7507[0]);
  return _0x1ca061;
}
function create_snow_step(_0x5ab80e, _0x34ed65) {
  var _0x35c91f = document.createElement("canvas");
  var _0x5cdd53 = _0x35c91f.getContext("2d");
  _0x35c91f.width = _0x5ab80e * 20;
  _0x35c91f.height = _0x5ab80e * 35;
  round_rect(_0x5cdd53, 0, 0, 20, 35, 7);
  fill_path(_0x5cdd53, _0x34ed65[0]);
  return _0x35c91f;
}
function create_winter_fox(_0x45971e, _0x1783fc) {
  var _0x49b14b = document.createElement("canvas");
  var _0x2a81dd = _0x49b14b.getContext("2d");
  _0x49b14b.width = _0x45971e * 161;
  _0x49b14b.height = _0x45971e * 190;
  _0x2a81dd.globalAlpha = 0.5;
  _0x2a81dd.translate(0, 8);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 9, _0x45971e * 93);
  _0x2a81dd.bezierCurveTo(_0x45971e * 17, _0x45971e * 95, _0x45971e * 19, _0x45971e * 95, _0x45971e * 21, _0x45971e * 95);
  _0x2a81dd.bezierCurveTo(_0x45971e * 9, _0x45971e * 83, _0x45971e * 17, _0x45971e * 93, _0x45971e * 4, _0x45971e * 76);
  _0x2a81dd.bezierCurveTo(_0x45971e * 11, _0x45971e * 75, _0x45971e * 11, _0x45971e * 75, _0x45971e * 18, _0x45971e * 75);
  _0x2a81dd.bezierCurveTo(_0x45971e * 13, _0x45971e * 67, _0x45971e * 13, _0x45971e * 67, _0x45971e * 7, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 14, _0x45971e * 59, _0x45971e * 14, _0x45971e * 59, _0x45971e * 21, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 46, _0x45971e * 35, _0x45971e * 35, _0x45971e * 45, _0x45971e * 49, _0x45971e * 31);
  _0x2a81dd.bezierCurveTo(_0x45971e * 53, _0x45971e * 24, _0x45971e * 51, _0x45971e * 21, _0x45971e * 51, _0x45971e * 16);
  _0x2a81dd.bezierCurveTo(_0x45971e * 63, _0x45971e * 23, _0x45971e * 63, _0x45971e * 24, _0x45971e * 69, _0x45971e * 29);
  _0x2a81dd.bezierCurveTo(_0x45971e * 76, _0x45971e * 7, _0x45971e * 75, _0x45971e * 11, _0x45971e * 76, _0x45971e * 6);
  _0x2a81dd.bezierCurveTo(_0x45971e * 81, _0x45971e * 12, _0x45971e * 84, _0x45971e * 18, _0x45971e * 89, _0x45971e * 27);
  _0x2a81dd.bezierCurveTo(_0x45971e * 95, _0x45971e * 25, _0x45971e * 100, _0x45971e * 16, _0x45971e * 105, _0x45971e * 14);
  _0x2a81dd.bezierCurveTo(_0x45971e * 103, _0x45971e * 25, _0x45971e * 111, _0x45971e * 33, _0x45971e * 110, _0x45971e * 34);
  _0x2a81dd.bezierCurveTo(_0x45971e * 123, _0x45971e * 48, _0x45971e * 123, _0x45971e * 48, _0x45971e * 136, _0x45971e * 62);
  _0x2a81dd.bezierCurveTo(_0x45971e * 142, _0x45971e * 60, _0x45971e * 147, _0x45971e * 59, _0x45971e * 155, _0x45971e * 58);
  _0x2a81dd.bezierCurveTo(_0x45971e * 147, _0x45971e * 65, _0x45971e * 147, _0x45971e * 65, _0x45971e * 139, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 73, _0x45971e * 145, _0x45971e * 73, _0x45971e * 151, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 80, _0x45971e * 145, _0x45971e * 80, _0x45971e * 138, _0x45971e * 87);
  _0x2a81dd.bezierCurveTo(_0x45971e * 144, _0x45971e * 88, _0x45971e * 144, _0x45971e * 88, _0x45971e * 150, _0x45971e * 89);
  _0x2a81dd.bezierCurveTo(_0x45971e * 125, _0x45971e * 103, _0x45971e * 125, _0x45971e * 125, _0x45971e * 113, _0x45971e * 141);
  _0x2a81dd.bezierCurveTo(_0x45971e * 92, _0x45971e * 178, _0x45971e * 85, _0x45971e * 177, _0x45971e * 76, _0x45971e * 178);
  _0x2a81dd.bezierCurveTo(_0x45971e * 64, _0x45971e * 179, _0x45971e * 51, _0x45971e * 164, _0x45971e * 35, _0x45971e * 131);
  _0x2a81dd.bezierCurveTo(_0x45971e * 18, _0x45971e * 95, _0x45971e * 13, _0x45971e * 99, _0x45971e * 8, _0x45971e * 93);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[0]);
  _0x2a81dd.globalAlpha = 1;
  _0x2a81dd.translate(0, -8);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 9, _0x45971e * 93);
  _0x2a81dd.bezierCurveTo(_0x45971e * 17, _0x45971e * 95, _0x45971e * 19, _0x45971e * 95, _0x45971e * 21, _0x45971e * 95);
  _0x2a81dd.bezierCurveTo(_0x45971e * 9, _0x45971e * 83, _0x45971e * 17, _0x45971e * 93, _0x45971e * 4, _0x45971e * 76);
  _0x2a81dd.bezierCurveTo(_0x45971e * 11, _0x45971e * 75, _0x45971e * 11, _0x45971e * 75, _0x45971e * 18, _0x45971e * 75);
  _0x2a81dd.bezierCurveTo(_0x45971e * 13, _0x45971e * 67, _0x45971e * 13, _0x45971e * 67, _0x45971e * 7, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 14, _0x45971e * 59, _0x45971e * 14, _0x45971e * 59, _0x45971e * 21, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 46, _0x45971e * 35, _0x45971e * 35, _0x45971e * 45, _0x45971e * 49, _0x45971e * 31);
  _0x2a81dd.bezierCurveTo(_0x45971e * 53, _0x45971e * 24, _0x45971e * 51, _0x45971e * 21, _0x45971e * 51, _0x45971e * 16);
  _0x2a81dd.bezierCurveTo(_0x45971e * 63, _0x45971e * 23, _0x45971e * 63, _0x45971e * 24, _0x45971e * 69, _0x45971e * 29);
  _0x2a81dd.bezierCurveTo(_0x45971e * 76, _0x45971e * 7, _0x45971e * 75, _0x45971e * 11, _0x45971e * 76, _0x45971e * 6);
  _0x2a81dd.bezierCurveTo(_0x45971e * 81, _0x45971e * 12, _0x45971e * 84, _0x45971e * 18, _0x45971e * 89, _0x45971e * 27);
  _0x2a81dd.bezierCurveTo(_0x45971e * 95, _0x45971e * 25, _0x45971e * 100, _0x45971e * 16, _0x45971e * 105, _0x45971e * 14);
  _0x2a81dd.bezierCurveTo(_0x45971e * 103, _0x45971e * 25, _0x45971e * 111, _0x45971e * 33, _0x45971e * 110, _0x45971e * 34);
  _0x2a81dd.bezierCurveTo(_0x45971e * 123, _0x45971e * 48, _0x45971e * 123, _0x45971e * 48, _0x45971e * 136, _0x45971e * 62);
  _0x2a81dd.bezierCurveTo(_0x45971e * 142, _0x45971e * 60, _0x45971e * 147, _0x45971e * 59, _0x45971e * 155, _0x45971e * 58);
  _0x2a81dd.bezierCurveTo(_0x45971e * 147, _0x45971e * 65, _0x45971e * 147, _0x45971e * 65, _0x45971e * 139, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 73, _0x45971e * 145, _0x45971e * 73, _0x45971e * 151, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 80, _0x45971e * 145, _0x45971e * 80, _0x45971e * 138, _0x45971e * 87);
  _0x2a81dd.bezierCurveTo(_0x45971e * 144, _0x45971e * 88, _0x45971e * 144, _0x45971e * 88, _0x45971e * 150, _0x45971e * 89);
  _0x2a81dd.bezierCurveTo(_0x45971e * 125, _0x45971e * 103, _0x45971e * 125, _0x45971e * 125, _0x45971e * 113, _0x45971e * 141);
  _0x2a81dd.bezierCurveTo(_0x45971e * 92, _0x45971e * 178, _0x45971e * 85, _0x45971e * 177, _0x45971e * 76, _0x45971e * 178);
  _0x2a81dd.bezierCurveTo(_0x45971e * 64, _0x45971e * 179, _0x45971e * 51, _0x45971e * 164, _0x45971e * 35, _0x45971e * 131);
  _0x2a81dd.bezierCurveTo(_0x45971e * 18, _0x45971e * 95, _0x45971e * 13, _0x45971e * 99, _0x45971e * 8, _0x45971e * 93);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[1]);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 28, _0x45971e * 63);
  _0x2a81dd.bezierCurveTo(_0x45971e * 23, _0x45971e * 54, _0x45971e * 24, _0x45971e * 47, _0x45971e * 26, _0x45971e * 37);
  _0x2a81dd.bezierCurveTo(_0x45971e * 28, _0x45971e * 29, _0x45971e * 31, _0x45971e * 31, _0x45971e * 41, _0x45971e * 35);
  _0x2a81dd.bezierCurveTo(_0x45971e * 52, _0x45971e * 45, _0x45971e * 55, _0x45971e * 51, _0x45971e * 57, _0x45971e * 53);
  _0x2a81dd.bezierCurveTo(_0x45971e * 50, _0x45971e * 50, _0x45971e * 44, _0x45971e * 47, _0x45971e * 43, _0x45971e * 48);
  _0x2a81dd.bezierCurveTo(_0x45971e * 43, _0x45971e * 52, _0x45971e * 43, _0x45971e * 52, _0x45971e * 42, _0x45971e * 57);
  _0x2a81dd.bezierCurveTo(_0x45971e * 38, _0x45971e * 54, _0x45971e * 38, _0x45971e * 54, _0x45971e * 33, _0x45971e * 51);
  _0x2a81dd.bezierCurveTo(_0x45971e * 34, _0x45971e * 56, _0x45971e * 34, _0x45971e * 56, _0x45971e * 34, _0x45971e * 61);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[3]);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 99, _0x45971e * 55);
  _0x2a81dd.bezierCurveTo(_0x45971e * 107, _0x45971e * 43, _0x45971e * 113, _0x45971e * 39, _0x45971e * 121, _0x45971e * 34);
  _0x2a81dd.bezierCurveTo(_0x45971e * 130, _0x45971e * 29, _0x45971e * 130, _0x45971e * 34, _0x45971e * 130, _0x45971e * 42);
  _0x2a81dd.bezierCurveTo(_0x45971e * 131, _0x45971e * 57, _0x45971e * 128, _0x45971e * 61, _0x45971e * 129, _0x45971e * 63);
  _0x2a81dd.bezierCurveTo(_0x45971e * 124, _0x45971e * 62, _0x45971e * 124, _0x45971e * 62, _0x45971e * 119, _0x45971e * 61);
  _0x2a81dd.bezierCurveTo(_0x45971e * 119, _0x45971e * 56, _0x45971e * 120, _0x45971e * 61, _0x45971e * 118, _0x45971e * 52);
  _0x2a81dd.bezierCurveTo(_0x45971e * 115, _0x45971e * 55, _0x45971e * 111, _0x45971e * 59, _0x45971e * 111, _0x45971e * 58);
  _0x2a81dd.bezierCurveTo(_0x45971e * 110, _0x45971e * 54, _0x45971e * 109, _0x45971e * 57, _0x45971e * 109, _0x45971e * 51);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[3]);
  circle(_0x2a81dd, _0x45971e * 103, _0x45971e * 110, _0x45971e * 11);
  fill_path(_0x2a81dd, _0x1783fc[4]);
  circle(_0x2a81dd, _0x45971e * 55, _0x45971e * 111, _0x45971e * 11);
  fill_path(_0x2a81dd, _0x1783fc[4]);
  circle(_0x2a81dd, _0x45971e * 99, _0x45971e * 107, _0x45971e * 5);
  fill_path(_0x2a81dd, _0x1783fc[1]);
  circle(_0x2a81dd, _0x45971e * 51, _0x45971e * 108, _0x45971e * 5);
  fill_path(_0x2a81dd, _0x1783fc[1]);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 31, _0x45971e * 121);
  _0x2a81dd.bezierCurveTo(_0x45971e * 45, _0x45971e * 128, _0x45971e * 51, _0x45971e * 133, _0x45971e * 53, _0x45971e * 141);
  _0x2a81dd.bezierCurveTo(_0x45971e * 59, _0x45971e * 161, _0x45971e * 70, _0x45971e * 173, _0x45971e * 80, _0x45971e * 169);
  _0x2a81dd.bezierCurveTo(_0x45971e * 89, _0x45971e * 172, _0x45971e * 99, _0x45971e * 149, _0x45971e * 107, _0x45971e * 133);
  _0x2a81dd.bezierCurveTo(_0x45971e * 114, _0x45971e * 122, _0x45971e * 119, _0x45971e * 123, _0x45971e * 124, _0x45971e * 119);
  _0x2a81dd.bezierCurveTo(_0x45971e * 109, _0x45971e * 148, _0x45971e * 117, _0x45971e * 133, _0x45971e * 109, _0x45971e * 147);
  _0x2a81dd.bezierCurveTo(_0x45971e * 87, _0x45971e * 180, _0x45971e * 84, _0x45971e * 179, _0x45971e * 76, _0x45971e * 178);
  _0x2a81dd.bezierCurveTo(_0x45971e * 49, _0x45971e * 173, _0x45971e * 44, _0x45971e * 149, _0x45971e * 31, _0x45971e * 121);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[5]);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.translate(-2, 0);
  _0x2a81dd.moveTo(_0x45971e * 71, _0x45971e * 162);
  _0x2a81dd.bezierCurveTo(_0x45971e * 80, _0x45971e * 155, _0x45971e * 85, _0x45971e * 159, _0x45971e * 89, _0x45971e * 164);
  _0x2a81dd.bezierCurveTo(_0x45971e * 90, _0x45971e * 171, _0x45971e * 86, _0x45971e * 173, _0x45971e * 79, _0x45971e * 173);
  _0x2a81dd.bezierCurveTo(_0x45971e * 67, _0x45971e * 172, _0x45971e * 67, _0x45971e * 168, _0x45971e * 71, _0x45971e * 162);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[3]);
  _0x2a81dd.translate(2, 0);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 9, _0x45971e * 93);
  _0x2a81dd.bezierCurveTo(_0x45971e * 17, _0x45971e * 95, _0x45971e * 19, _0x45971e * 95, _0x45971e * 21, _0x45971e * 95);
  _0x2a81dd.bezierCurveTo(_0x45971e * 9, _0x45971e * 83, _0x45971e * 17, _0x45971e * 93, _0x45971e * 4, _0x45971e * 76);
  _0x2a81dd.bezierCurveTo(_0x45971e * 11, _0x45971e * 75, _0x45971e * 11, _0x45971e * 75, _0x45971e * 18, _0x45971e * 75);
  _0x2a81dd.bezierCurveTo(_0x45971e * 13, _0x45971e * 67, _0x45971e * 13, _0x45971e * 67, _0x45971e * 7, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 14, _0x45971e * 59, _0x45971e * 14, _0x45971e * 59, _0x45971e * 21, _0x45971e * 59);
  _0x2a81dd.bezierCurveTo(_0x45971e * 46, _0x45971e * 35, _0x45971e * 35, _0x45971e * 45, _0x45971e * 49, _0x45971e * 31);
  _0x2a81dd.bezierCurveTo(_0x45971e * 53, _0x45971e * 24, _0x45971e * 51, _0x45971e * 21, _0x45971e * 51, _0x45971e * 16);
  _0x2a81dd.bezierCurveTo(_0x45971e * 63, _0x45971e * 23, _0x45971e * 63, _0x45971e * 24, _0x45971e * 69, _0x45971e * 29);
  _0x2a81dd.bezierCurveTo(_0x45971e * 76, _0x45971e * 7, _0x45971e * 75, _0x45971e * 11, _0x45971e * 76, _0x45971e * 6);
  _0x2a81dd.bezierCurveTo(_0x45971e * 81, _0x45971e * 12, _0x45971e * 84, _0x45971e * 18, _0x45971e * 89, _0x45971e * 27);
  _0x2a81dd.bezierCurveTo(_0x45971e * 95, _0x45971e * 25, _0x45971e * 100, _0x45971e * 16, _0x45971e * 105, _0x45971e * 14);
  _0x2a81dd.bezierCurveTo(_0x45971e * 103, _0x45971e * 25, _0x45971e * 111, _0x45971e * 33, _0x45971e * 110, _0x45971e * 34);
  _0x2a81dd.bezierCurveTo(_0x45971e * 123, _0x45971e * 48, _0x45971e * 123, _0x45971e * 48, _0x45971e * 136, _0x45971e * 62);
  _0x2a81dd.bezierCurveTo(_0x45971e * 142, _0x45971e * 60, _0x45971e * 147, _0x45971e * 59, _0x45971e * 155, _0x45971e * 58);
  _0x2a81dd.bezierCurveTo(_0x45971e * 147, _0x45971e * 65, _0x45971e * 147, _0x45971e * 65, _0x45971e * 139, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 73, _0x45971e * 145, _0x45971e * 73, _0x45971e * 151, _0x45971e * 73);
  _0x2a81dd.bezierCurveTo(_0x45971e * 145, _0x45971e * 80, _0x45971e * 145, _0x45971e * 80, _0x45971e * 138, _0x45971e * 87);
  _0x2a81dd.bezierCurveTo(_0x45971e * 144, _0x45971e * 88, _0x45971e * 144, _0x45971e * 88, _0x45971e * 150, _0x45971e * 89);
  _0x2a81dd.bezierCurveTo(_0x45971e * 125, _0x45971e * 103, _0x45971e * 125, _0x45971e * 125, _0x45971e * 113, _0x45971e * 141);
  _0x2a81dd.bezierCurveTo(_0x45971e * 92, _0x45971e * 178, _0x45971e * 85, _0x45971e * 177, _0x45971e * 76, _0x45971e * 178);
  _0x2a81dd.bezierCurveTo(_0x45971e * 64, _0x45971e * 179, _0x45971e * 51, _0x45971e * 164, _0x45971e * 35, _0x45971e * 131);
  _0x2a81dd.bezierCurveTo(_0x45971e * 18, _0x45971e * 95, _0x45971e * 13, _0x45971e * 99, _0x45971e * 8, _0x45971e * 93);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, undefined, _0x1783fc[2], _0x45971e * 4);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 25, _0x45971e * 63);
  _0x2a81dd.bezierCurveTo(_0x45971e * 16, _0x45971e * 58, _0x45971e * 17, _0x45971e * 51, _0x45971e * 17, _0x45971e * 33);
  _0x2a81dd.bezierCurveTo(_0x45971e * 19, _0x45971e * 12, _0x45971e * 21, _0x45971e * 12, _0x45971e * 32, _0x45971e * 17);
  _0x2a81dd.bezierCurveTo(_0x45971e * 63, _0x45971e * 31, _0x45971e * 66, _0x45971e * 45, _0x45971e * 66, _0x45971e * 54);
  fill_path(_0x2a81dd, _0x1783fc[1], _0x1783fc[2], _0x45971e * 4);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 91, _0x45971e * 53);
  _0x2a81dd.bezierCurveTo(_0x45971e * 91, _0x45971e * 40, _0x45971e * 98, _0x45971e * 33, _0x45971e * 121, _0x45971e * 20);
  _0x2a81dd.bezierCurveTo(_0x45971e * 137, _0x45971e * 12, _0x45971e * 137, _0x45971e * 16, _0x45971e * 139, _0x45971e * 27);
  _0x2a81dd.bezierCurveTo(_0x45971e * 141, _0x45971e * 49, _0x45971e * 140, _0x45971e * 57, _0x45971e * 134, _0x45971e * 64);
  fill_path(_0x2a81dd, _0x1783fc[1], _0x1783fc[2], _0x45971e * 4);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 31, _0x45971e * 63);
  _0x2a81dd.bezierCurveTo(_0x45971e * 23, _0x45971e * 54, _0x45971e * 24, _0x45971e * 47, _0x45971e * 26, _0x45971e * 37);
  _0x2a81dd.bezierCurveTo(_0x45971e * 28, _0x45971e * 29, _0x45971e * 31, _0x45971e * 31, _0x45971e * 41, _0x45971e * 35);
  _0x2a81dd.bezierCurveTo(_0x45971e * 52, _0x45971e * 45, _0x45971e * 55, _0x45971e * 51, _0x45971e * 57, _0x45971e * 53);
  _0x2a81dd.bezierCurveTo(_0x45971e * 50, _0x45971e * 50, _0x45971e * 44, _0x45971e * 47, _0x45971e * 43, _0x45971e * 48);
  _0x2a81dd.bezierCurveTo(_0x45971e * 43, _0x45971e * 52, _0x45971e * 43, _0x45971e * 52, _0x45971e * 42, _0x45971e * 57);
  _0x2a81dd.bezierCurveTo(_0x45971e * 38, _0x45971e * 54, _0x45971e * 38, _0x45971e * 54, _0x45971e * 33, _0x45971e * 51);
  _0x2a81dd.bezierCurveTo(_0x45971e * 34, _0x45971e * 56, _0x45971e * 34, _0x45971e * 56, _0x45971e * 34, _0x45971e * 61);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[3]);
  _0x2a81dd.beginPath();
  _0x2a81dd.lineCap = "round";
  _0x2a81dd.lineJoin = "round";
  _0x2a81dd.moveTo(_0x45971e * 99, _0x45971e * 55);
  _0x2a81dd.bezierCurveTo(_0x45971e * 107, _0x45971e * 43, _0x45971e * 113, _0x45971e * 39, _0x45971e * 121, _0x45971e * 34);
  _0x2a81dd.bezierCurveTo(_0x45971e * 130, _0x45971e * 29, _0x45971e * 130, _0x45971e * 34, _0x45971e * 130, _0x45971e * 42);
  _0x2a81dd.bezierCurveTo(_0x45971e * 131, _0x45971e * 57, _0x45971e * 128, _0x45971e * 61, _0x45971e * 129, _0x45971e * 63);
  _0x2a81dd.bezierCurveTo(_0x45971e * 124, _0x45971e * 62, _0x45971e * 124, _0x45971e * 62, _0x45971e * 119, _0x45971e * 61);
  _0x2a81dd.bezierCurveTo(_0x45971e * 119, _0x45971e * 56, _0x45971e * 120, _0x45971e * 61, _0x45971e * 118, _0x45971e * 52);
  _0x2a81dd.bezierCurveTo(_0x45971e * 115, _0x45971e * 55, _0x45971e * 111, _0x45971e * 59, _0x45971e * 111, _0x45971e * 58);
  _0x2a81dd.bezierCurveTo(_0x45971e * 110, _0x45971e * 54, _0x45971e * 109, _0x45971e * 57, _0x45971e * 109, _0x45971e * 51);
  _0x2a81dd.closePath();
  fill_path(_0x2a81dd, _0x1783fc[3]);
  return _0x49b14b;
}
function create_hurt_fox_winter(_0x993e79, _0x1642b6) {
  var _0x505f52 = document.createElement("canvas");
  var _0x374096 = _0x505f52.getContext("2d");
  _0x505f52.width = _0x993e79 * 161;
  _0x505f52.height = _0x993e79 * 190;
  _0x374096.beginPath();
  _0x374096.lineCap = "round";
  _0x374096.lineJoin = "round";
  _0x374096.moveTo(_0x993e79 * 9, _0x993e79 * 93);
  _0x374096.bezierCurveTo(_0x993e79 * 17, _0x993e79 * 95, _0x993e79 * 19, _0x993e79 * 95, _0x993e79 * 21, _0x993e79 * 95);
  _0x374096.bezierCurveTo(_0x993e79 * 9, _0x993e79 * 83, _0x993e79 * 17, _0x993e79 * 93, _0x993e79 * 4, _0x993e79 * 76);
  _0x374096.bezierCurveTo(_0x993e79 * 11, _0x993e79 * 75, _0x993e79 * 11, _0x993e79 * 75, _0x993e79 * 18, _0x993e79 * 75);
  _0x374096.bezierCurveTo(_0x993e79 * 13, _0x993e79 * 67, _0x993e79 * 13, _0x993e79 * 67, _0x993e79 * 7, _0x993e79 * 59);
  _0x374096.bezierCurveTo(_0x993e79 * 14, _0x993e79 * 59, _0x993e79 * 14, _0x993e79 * 59, _0x993e79 * 21, _0x993e79 * 59);
  _0x374096.bezierCurveTo(_0x993e79 * 46, _0x993e79 * 35, _0x993e79 * 35, _0x993e79 * 45, _0x993e79 * 49, _0x993e79 * 31);
  _0x374096.bezierCurveTo(_0x993e79 * 53, _0x993e79 * 24, _0x993e79 * 51, _0x993e79 * 21, _0x993e79 * 51, _0x993e79 * 16);
  _0x374096.bezierCurveTo(_0x993e79 * 63, _0x993e79 * 23, _0x993e79 * 63, _0x993e79 * 24, _0x993e79 * 69, _0x993e79 * 29);
  _0x374096.bezierCurveTo(_0x993e79 * 76, _0x993e79 * 7, _0x993e79 * 75, _0x993e79 * 11, _0x993e79 * 76, _0x993e79 * 6);
  _0x374096.bezierCurveTo(_0x993e79 * 81, _0x993e79 * 12, _0x993e79 * 84, _0x993e79 * 18, _0x993e79 * 89, _0x993e79 * 27);
  _0x374096.bezierCurveTo(_0x993e79 * 95, _0x993e79 * 25, _0x993e79 * 100, _0x993e79 * 16, _0x993e79 * 105, _0x993e79 * 14);
  _0x374096.bezierCurveTo(_0x993e79 * 103, _0x993e79 * 25, _0x993e79 * 111, _0x993e79 * 33, _0x993e79 * 110, _0x993e79 * 34);
  _0x374096.bezierCurveTo(_0x993e79 * 123, _0x993e79 * 48, _0x993e79 * 123, _0x993e79 * 48, _0x993e79 * 136, _0x993e79 * 62);
  _0x374096.bezierCurveTo(_0x993e79 * 142, _0x993e79 * 60, _0x993e79 * 147, _0x993e79 * 59, _0x993e79 * 155, _0x993e79 * 58);
  _0x374096.bezierCurveTo(_0x993e79 * 147, _0x993e79 * 65, _0x993e79 * 147, _0x993e79 * 65, _0x993e79 * 139, _0x993e79 * 73);
  _0x374096.bezierCurveTo(_0x993e79 * 145, _0x993e79 * 73, _0x993e79 * 145, _0x993e79 * 73, _0x993e79 * 151, _0x993e79 * 73);
  _0x374096.bezierCurveTo(_0x993e79 * 145, _0x993e79 * 80, _0x993e79 * 145, _0x993e79 * 80, _0x993e79 * 138, _0x993e79 * 87);
  _0x374096.bezierCurveTo(_0x993e79 * 144, _0x993e79 * 88, _0x993e79 * 144, _0x993e79 * 88, _0x993e79 * 150, _0x993e79 * 89);
  _0x374096.bezierCurveTo(_0x993e79 * 125, _0x993e79 * 103, _0x993e79 * 125, _0x993e79 * 125, _0x993e79 * 113, _0x993e79 * 141);
  _0x374096.bezierCurveTo(_0x993e79 * 92, _0x993e79 * 178, _0x993e79 * 85, _0x993e79 * 177, _0x993e79 * 76, _0x993e79 * 178);
  _0x374096.bezierCurveTo(_0x993e79 * 64, _0x993e79 * 179, _0x993e79 * 51, _0x993e79 * 164, _0x993e79 * 35, _0x993e79 * 131);
  _0x374096.bezierCurveTo(_0x993e79 * 18, _0x993e79 * 95, _0x993e79 * 13, _0x993e79 * 99, _0x993e79 * 8, _0x993e79 * 93);
  _0x374096.closePath();
  fill_path(_0x374096, _0x1642b6, _0x1642b6, _0x993e79 * 4);
  _0x374096.beginPath();
  _0x374096.lineCap = "round";
  _0x374096.lineJoin = "round";
  _0x374096.moveTo(_0x993e79 * 25, _0x993e79 * 63);
  _0x374096.bezierCurveTo(_0x993e79 * 16, _0x993e79 * 58, _0x993e79 * 17, _0x993e79 * 51, _0x993e79 * 17, _0x993e79 * 33);
  _0x374096.bezierCurveTo(_0x993e79 * 19, _0x993e79 * 12, _0x993e79 * 21, _0x993e79 * 12, _0x993e79 * 32, _0x993e79 * 17);
  _0x374096.bezierCurveTo(_0x993e79 * 63, _0x993e79 * 31, _0x993e79 * 66, _0x993e79 * 45, _0x993e79 * 66, _0x993e79 * 54);
  fill_path(_0x374096, _0x1642b6, _0x1642b6, _0x993e79 * 4);
  _0x374096.beginPath();
  _0x374096.lineCap = "round";
  _0x374096.lineJoin = "round";
  _0x374096.moveTo(_0x993e79 * 91, _0x993e79 * 53);
  _0x374096.bezierCurveTo(_0x993e79 * 91, _0x993e79 * 40, _0x993e79 * 98, _0x993e79 * 33, _0x993e79 * 121, _0x993e79 * 20);
  _0x374096.bezierCurveTo(_0x993e79 * 137, _0x993e79 * 12, _0x993e79 * 137, _0x993e79 * 16, _0x993e79 * 139, _0x993e79 * 27);
  _0x374096.bezierCurveTo(_0x993e79 * 141, _0x993e79 * 49, _0x993e79 * 140, _0x993e79 * 57, _0x993e79 * 134, _0x993e79 * 64);
  fill_path(_0x374096, _0x1642b6, _0x1642b6, _0x993e79 * 4);
  return _0x505f52;
}
function create_polar_bear(_0x31e906, _0x26022d) {
  var _0xe2187f = document.createElement("canvas");
  var _0x4cfbe9 = _0xe2187f.getContext("2d");
  _0xe2187f.width = _0x31e906 * 147;
  _0xe2187f.height = _0x31e906 * 172;
  _0x4cfbe9.globalAlpha = 0.5;
  _0x4cfbe9.translate(0, _0x31e906 * 8);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 8, _0x31e906 * 50);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 15, _0x31e906 * 16, _0x31e906 * 49, _0x31e906 * 6, _0x31e906 * 67, _0x31e906 * 6);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 121, _0x31e906 * 3, _0x31e906 * 128, _0x31e906 * 32, _0x31e906 * 135, _0x31e906 * 48);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 146, _0x31e906 * 96, _0x31e906 * 124, _0x31e906 * 131, _0x31e906 * 96, _0x31e906 * 135);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 96, _0x31e906 * 158, _0x31e906 * 79, _0x31e906 * 156, _0x31e906 * 75, _0x31e906 * 156);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 50, _0x31e906 * 154, _0x31e906 * 53, _0x31e906 * 150, _0x31e906 * 52, _0x31e906 * 135);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 2, _0x31e906 * 127, _0x31e906 * 3, _0x31e906 * 87, _0x31e906 * 8, _0x31e906 * 50);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[0]);
  _0x4cfbe9.translate(0, _0x31e906 * -8);
  _0x4cfbe9.globalAlpha = 1;
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 8, _0x31e906 * 50);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 15, _0x31e906 * 16, _0x31e906 * 49, _0x31e906 * 6, _0x31e906 * 67, _0x31e906 * 6);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 121, _0x31e906 * 3, _0x31e906 * 128, _0x31e906 * 32, _0x31e906 * 135, _0x31e906 * 48);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 146, _0x31e906 * 96, _0x31e906 * 124, _0x31e906 * 131, _0x31e906 * 96, _0x31e906 * 135);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 96, _0x31e906 * 158, _0x31e906 * 79, _0x31e906 * 156, _0x31e906 * 75, _0x31e906 * 156);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 50, _0x31e906 * 154, _0x31e906 * 53, _0x31e906 * 150, _0x31e906 * 52, _0x31e906 * 135);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 2, _0x31e906 * 127, _0x31e906 * 3, _0x31e906 * 87, _0x31e906 * 8, _0x31e906 * 50);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[1], _0x26022d[2], _0x31e906 * 4);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 14, _0x31e906 * 57);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 2, _0x31e906 * 50, _0x31e906 * 5, _0x31e906 * 22, _0x31e906 * 24, _0x31e906 * 22);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 41, _0x31e906 * 21, _0x31e906 * 54, _0x31e906 * 32, _0x31e906 * 55, _0x31e906 * 48);
  fill_path(_0x4cfbe9, _0x26022d[1], _0x26022d[2], _0x31e906 * 4);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 93, _0x31e906 * 47);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 94, _0x31e906 * 24, _0x31e906 * 116, _0x31e906 * 21, _0x31e906 * 120, _0x31e906 * 20);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 144, _0x31e906 * 17, _0x31e906 * 146, _0x31e906 * 52, _0x31e906 * 133, _0x31e906 * 58);
  fill_path(_0x4cfbe9, _0x26022d[1], _0x26022d[2], _0x31e906 * 4);
  circle(_0x4cfbe9, _0x31e906 * 51, _0x31e906 * 91, _0x31e906 * 9);
  fill_path(_0x4cfbe9, _0x26022d[3]);
  circle(_0x4cfbe9, _0x31e906 * 95, _0x31e906 * 91, _0x31e906 * 9);
  fill_path(_0x4cfbe9, _0x26022d[3]);
  circle(_0x4cfbe9, _0x31e906 * 91, _0x31e906 * 89, _0x31e906 * 4);
  fill_path(_0x4cfbe9, _0x26022d[4]);
  circle(_0x4cfbe9, _0x31e906 * 47, _0x31e906 * 89, _0x31e906 * 4);
  fill_path(_0x4cfbe9, _0x26022d[4]);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 54, _0x31e906 * 133);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 56, _0x31e906 * 108, _0x31e906 * 64, _0x31e906 * 99, _0x31e906 * 73, _0x31e906 * 98);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 86, _0x31e906 * 97, _0x31e906 * 91, _0x31e906 * 119, _0x31e906 * 93, _0x31e906 * 133);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 94, _0x31e906 * 155, _0x31e906 * 90, _0x31e906 * 150, _0x31e906 * 74, _0x31e906 * 155);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 50, _0x31e906 * 152, _0x31e906 * 55, _0x31e906 * 145, _0x31e906 * 54, _0x31e906 * 134);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[5]);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 65.25, _0x31e906 * 135);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 75.25, _0x31e906 * 128, _0x31e906 * 83.25, _0x31e906 * 133, _0x31e906 * 83.25, _0x31e906 * 138);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 88.25, _0x31e906 * 148, _0x31e906 * 61.25, _0x31e906 * 149, _0x31e906 * 64.25, _0x31e906 * 137);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[6]);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 74, _0x31e906 * 145);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 74, _0x31e906 * 148, _0x31e906 * 74, _0x31e906 * 148, _0x31e906 * 74, _0x31e906 * 151);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, undefined, _0x26022d[6], _0x31e906 * 2);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 19, _0x31e906 * 58);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 10, _0x31e906 * 38, _0x31e906 * 18, _0x31e906 * 33, _0x31e906 * 28, _0x31e906 * 34);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 41, _0x31e906 * 39, _0x31e906 * 45, _0x31e906 * 45, _0x31e906 * 50, _0x31e906 * 51);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[6]);
  _0x4cfbe9.beginPath();
  _0x4cfbe9.lineCap = "round";
  _0x4cfbe9.lineJoin = "round";
  _0x4cfbe9.moveTo(_0x31e906 * 100, _0x31e906 * 51);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 106, _0x31e906 * 36, _0x31e906 * 119, _0x31e906 * 31, _0x31e906 * 128, _0x31e906 * 36);
  _0x4cfbe9.bezierCurveTo(_0x31e906 * 137, _0x31e906 * 49, _0x31e906 * 128, _0x31e906 * 58, _0x31e906 * 128, _0x31e906 * 60);
  _0x4cfbe9.closePath();
  fill_path(_0x4cfbe9, _0x26022d[6]);
  return _0xe2187f;
}
function create_hurt_polar_bear(_0x46cf25, _0x517ef6) {
  var _0x412459 = document.createElement("canvas");
  var _0x2cafb7 = _0x412459.getContext("2d");
  _0x412459.width = _0x46cf25 * 147;
  _0x412459.height = _0x46cf25 * 172;
  _0x2cafb7.beginPath();
  _0x2cafb7.lineCap = "round";
  _0x2cafb7.lineJoin = "round";
  _0x2cafb7.moveTo(_0x46cf25 * 8, _0x46cf25 * 50);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 15, _0x46cf25 * 16, _0x46cf25 * 49, _0x46cf25 * 6, _0x46cf25 * 67, _0x46cf25 * 6);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 121, _0x46cf25 * 3, _0x46cf25 * 128, _0x46cf25 * 32, _0x46cf25 * 135, _0x46cf25 * 48);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 146, _0x46cf25 * 96, _0x46cf25 * 124, _0x46cf25 * 131, _0x46cf25 * 96, _0x46cf25 * 135);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 96, _0x46cf25 * 158, _0x46cf25 * 79, _0x46cf25 * 156, _0x46cf25 * 75, _0x46cf25 * 156);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 50, _0x46cf25 * 154, _0x46cf25 * 53, _0x46cf25 * 150, _0x46cf25 * 52, _0x46cf25 * 135);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 2, _0x46cf25 * 127, _0x46cf25 * 3, _0x46cf25 * 87, _0x46cf25 * 8, _0x46cf25 * 50);
  _0x2cafb7.closePath();
  fill_path(_0x2cafb7, _0x517ef6, _0x517ef6, _0x46cf25 * 4);
  _0x2cafb7.beginPath();
  _0x2cafb7.lineCap = "round";
  _0x2cafb7.lineJoin = "round";
  _0x2cafb7.moveTo(_0x46cf25 * 14, _0x46cf25 * 57);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 2, _0x46cf25 * 50, _0x46cf25 * 5, _0x46cf25 * 22, _0x46cf25 * 24, _0x46cf25 * 22);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 41, _0x46cf25 * 21, _0x46cf25 * 54, _0x46cf25 * 32, _0x46cf25 * 55, _0x46cf25 * 48);
  fill_path(_0x2cafb7, _0x517ef6, _0x517ef6, _0x46cf25 * 4);
  _0x2cafb7.beginPath();
  _0x2cafb7.lineCap = "round";
  _0x2cafb7.lineJoin = "round";
  _0x2cafb7.moveTo(_0x46cf25 * 93, _0x46cf25 * 47);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 94, _0x46cf25 * 24, _0x46cf25 * 116, _0x46cf25 * 21, _0x46cf25 * 120, _0x46cf25 * 20);
  _0x2cafb7.bezierCurveTo(_0x46cf25 * 144, _0x46cf25 * 17, _0x46cf25 * 146, _0x46cf25 * 52, _0x46cf25 * 133, _0x46cf25 * 58);
  fill_path(_0x2cafb7, _0x517ef6, _0x517ef6, _0x46cf25 * 4);
  return _0x412459;
}
function create_dragon(_0x3b3c69, _0x20292f) {
  var _0xfc1c1b = document.createElement("canvas");
  var _0x1a6111 = _0xfc1c1b.getContext("2d");
  _0xfc1c1b.width = _0x3b3c69 * 271;
  _0xfc1c1b.height = _0x3b3c69 * 366;
  _0x1a6111.globalAlpha = 0.5;
  _0x1a6111.translate(0, _0x3b3c69 * 10);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 99);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 186, _0x3b3c69 * 123, _0x3b3c69 * 199, _0x3b3c69 * 152, _0x3b3c69 * 209, _0x3b3c69 * 169);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 228, _0x3b3c69 * 205, _0x3b3c69 * 224, _0x3b3c69 * 245, _0x3b3c69 * 190, _0x3b3c69 * 276);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 296, _0x3b3c69 * 99, _0x3b3c69 * 292, _0x3b3c69 * 79, _0x3b3c69 * 274);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 49, _0x3b3c69 * 253, _0x3b3c69 * 47, _0x3b3c69 * 214, _0x3b3c69 * 50, _0x3b3c69 * 197);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 61, _0x3b3c69 * 143, _0x3b3c69 * 102, _0x3b3c69 * 113, _0x3b3c69 * 131, _0x3b3c69 * 99);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 73, _0x3b3c69 * 270);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 79, _0x3b3c69 * 280, _0x3b3c69 * 77, _0x3b3c69 * 280, _0x3b3c69 * 78, _0x3b3c69 * 287);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 78, _0x3b3c69 * 290, _0x3b3c69 * 83, _0x3b3c69 * 291, _0x3b3c69 * 82, _0x3b3c69 * 299);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 81, _0x3b3c69 * 301, _0x3b3c69 * 87, _0x3b3c69 * 301, _0x3b3c69 * 92, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 94, _0x3b3c69 * 319, _0x3b3c69 * 100, _0x3b3c69 * 321, _0x3b3c69 * 107, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 323, _0x3b3c69 * 114, _0x3b3c69 * 324, _0x3b3c69 * 119, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 321, _0x3b3c69 * 146, _0x3b3c69 * 323, _0x3b3c69 * 139, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 324, _0x3b3c69 * 150, _0x3b3c69 * 324, _0x3b3c69 * 153, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 168, _0x3b3c69 * 319, _0x3b3c69 * 171, _0x3b3c69 * 316, _0x3b3c69 * 173, _0x3b3c69 * 307);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 180, _0x3b3c69 * 305, _0x3b3c69 * 180, _0x3b3c69 * 301, _0x3b3c69 * 178, _0x3b3c69 * 296);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 183, _0x3b3c69 * 296, _0x3b3c69 * 185, _0x3b3c69 * 289, _0x3b3c69 * 188, _0x3b3c69 * 279);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 171, _0x3b3c69 * 286, _0x3b3c69 * 149, _0x3b3c69 * 290, _0x3b3c69 * 132, _0x3b3c69 * 289);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 101, _0x3b3c69 * 290, _0x3b3c69 * 86, _0x3b3c69 * 280, _0x3b3c69 * 74, _0x3b3c69 * 271);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 76, _0x3b3c69 * 252);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 85, _0x3b3c69 * 294, _0x3b3c69 * 96, _0x3b3c69 * 314, _0x3b3c69 * 103, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 316, _0x3b3c69 * 151, _0x3b3c69 * 314, _0x3b3c69 * 156, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 169, _0x3b3c69 * 317, _0x3b3c69 * 182, _0x3b3c69 * 285, _0x3b3c69 * 191, _0x3b3c69 * 256);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 78, _0x3b3c69 * 252);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 273, _0x3b3c69 * 146, _0x3b3c69 * 268, _0x3b3c69 * 179, _0x3b3c69 * 261);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 190, _0x3b3c69 * 258, _0x3b3c69 * 187, _0x3b3c69 * 266, _0x3b3c69 * 178, _0x3b3c69 * 272);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 160, _0x3b3c69 * 284, _0x3b3c69 * 123, _0x3b3c69 * 282, _0x3b3c69 * 100, _0x3b3c69 * 277);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 73, _0x3b3c69 * 260, _0x3b3c69 * 79, _0x3b3c69 * 257, _0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 133, _0x3b3c69 * 45, _0x3b3c69 * 136, _0x3b3c69 * 42, _0x3b3c69 * 141, _0x3b3c69 * 55);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 151, _0x3b3c69 * 96, _0x3b3c69 * 164, _0x3b3c69 * 117, _0x3b3c69 * 175, _0x3b3c69 * 134);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 203, _0x3b3c69 * 181, _0x3b3c69 * 207, _0x3b3c69 * 182, _0x3b3c69 * 208, _0x3b3c69 * 215);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 206, _0x3b3c69 * 240, _0x3b3c69 * 205, _0x3b3c69 * 246, _0x3b3c69 * 184, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 267, _0x3b3c69 * 131, _0x3b3c69 * 272, _0x3b3c69 * 86, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 67, _0x3b3c69 * 252, _0x3b3c69 * 68, _0x3b3c69 * 239, _0x3b3c69 * 64, _0x3b3c69 * 216);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 62, _0x3b3c69 * 194, _0x3b3c69 * 72, _0x3b3c69 * 169, _0x3b3c69 * 92, _0x3b3c69 * 142);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 121, _0x3b3c69 * 114, _0x3b3c69 * 101, _0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 115, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 116, _0x3b3c69 * 28, _0x3b3c69 * 119, _0x3b3c69 * 27, _0x3b3c69 * 126, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134, _0x3b3c69 * 48, _0x3b3c69 * 134, _0x3b3c69 * 49, _0x3b3c69 * 132, _0x3b3c69 * 59);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 131, _0x3b3c69 * 67, _0x3b3c69 * 127, _0x3b3c69 * 65, _0x3b3c69 * 120, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 49, _0x3b3c69 * 113, _0x3b3c69 * 43, _0x3b3c69 * 115, _0x3b3c69 * 38);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 146, _0x3b3c69 * 34);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 152, _0x3b3c69 * 28, _0x3b3c69 * 155, _0x3b3c69 * 27, _0x3b3c69 * 157, _0x3b3c69 * 39);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 157, _0x3b3c69 * 45, _0x3b3c69 * 157, _0x3b3c69 * 49, _0x3b3c69 * 150, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 57);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 50, _0x3b3c69 * 137, _0x3b3c69 * 47, _0x3b3c69 * 141, _0x3b3c69 * 42);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 143, _0x3b3c69 * 69);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 56, _0x3b3c69 * 156, _0x3b3c69 * 50, _0x3b3c69 * 158, _0x3b3c69 * 58);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 159, _0x3b3c69 * 64, _0x3b3c69 * 160, _0x3b3c69 * 67, _0x3b3c69 * 153, _0x3b3c69 * 77);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 83, _0x3b3c69 * 145, _0x3b3c69 * 84, _0x3b3c69 * 143, _0x3b3c69 * 77);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 149, _0x3b3c69 * 92);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 149, _0x3b3c69 * 89, _0x3b3c69 * 151, _0x3b3c69 * 84, _0x3b3c69 * 156, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 73, _0x3b3c69 * 163, _0x3b3c69 * 78, _0x3b3c69 * 162, _0x3b3c69 * 86);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 91, _0x3b3c69 * 155, _0x3b3c69 * 99, _0x3b3c69 * 152, _0x3b3c69 * 98);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 111, _0x3b3c69 * 61);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 51, _0x3b3c69 * 117, _0x3b3c69 * 51, _0x3b3c69 * 124, _0x3b3c69 * 64);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 128, _0x3b3c69 * 68, _0x3b3c69 * 128, _0x3b3c69 * 76, _0x3b3c69 * 126, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 123, _0x3b3c69 * 84, _0x3b3c69 * 122, _0x3b3c69 * 82, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 112, _0x3b3c69 * 67, _0x3b3c69 * 115, _0x3b3c69 * 74, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 68, _0x3b3c69 * 111, _0x3b3c69 * 66, _0x3b3c69 * 111, _0x3b3c69 * 62);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 107, _0x3b3c69 * 81);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 108, _0x3b3c69 * 74, _0x3b3c69 * 112, _0x3b3c69 * 73, _0x3b3c69 * 118, _0x3b3c69 * 84);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 88, _0x3b3c69 * 122, _0x3b3c69 * 93, _0x3b3c69 * 121, _0x3b3c69 * 98);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 98, _0x3b3c69 * 113, _0x3b3c69 * 98, _0x3b3c69 * 109, _0x3b3c69 * 90);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 107, _0x3b3c69 * 87, _0x3b3c69 * 106, _0x3b3c69 * 85, _0x3b3c69 * 107, _0x3b3c69 * 82);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[0]);
  _0x1a6111.globalAlpha = 1;
  _0x1a6111.translate(0, _0x3b3c69 * -10);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 99);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 186, _0x3b3c69 * 123, _0x3b3c69 * 199, _0x3b3c69 * 152, _0x3b3c69 * 209, _0x3b3c69 * 169);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 228, _0x3b3c69 * 205, _0x3b3c69 * 224, _0x3b3c69 * 245, _0x3b3c69 * 190, _0x3b3c69 * 276);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 296, _0x3b3c69 * 99, _0x3b3c69 * 292, _0x3b3c69 * 79, _0x3b3c69 * 274);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 49, _0x3b3c69 * 253, _0x3b3c69 * 47, _0x3b3c69 * 214, _0x3b3c69 * 50, _0x3b3c69 * 197);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 61, _0x3b3c69 * 143, _0x3b3c69 * 102, _0x3b3c69 * 113, _0x3b3c69 * 131, _0x3b3c69 * 99);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 73, _0x3b3c69 * 270);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 79, _0x3b3c69 * 280, _0x3b3c69 * 77, _0x3b3c69 * 280, _0x3b3c69 * 78, _0x3b3c69 * 287);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 78, _0x3b3c69 * 290, _0x3b3c69 * 83, _0x3b3c69 * 291, _0x3b3c69 * 82, _0x3b3c69 * 299);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 81, _0x3b3c69 * 301, _0x3b3c69 * 87, _0x3b3c69 * 301, _0x3b3c69 * 92, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 94, _0x3b3c69 * 319, _0x3b3c69 * 100, _0x3b3c69 * 321, _0x3b3c69 * 107, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 323, _0x3b3c69 * 114, _0x3b3c69 * 324, _0x3b3c69 * 119, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 321, _0x3b3c69 * 146, _0x3b3c69 * 323, _0x3b3c69 * 139, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 324, _0x3b3c69 * 150, _0x3b3c69 * 324, _0x3b3c69 * 153, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 168, _0x3b3c69 * 319, _0x3b3c69 * 171, _0x3b3c69 * 316, _0x3b3c69 * 173, _0x3b3c69 * 307);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 180, _0x3b3c69 * 305, _0x3b3c69 * 180, _0x3b3c69 * 301, _0x3b3c69 * 178, _0x3b3c69 * 296);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 183, _0x3b3c69 * 296, _0x3b3c69 * 185, _0x3b3c69 * 289, _0x3b3c69 * 188, _0x3b3c69 * 279);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 171, _0x3b3c69 * 286, _0x3b3c69 * 149, _0x3b3c69 * 290, _0x3b3c69 * 132, _0x3b3c69 * 289);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 101, _0x3b3c69 * 290, _0x3b3c69 * 86, _0x3b3c69 * 280, _0x3b3c69 * 74, _0x3b3c69 * 271);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 76, _0x3b3c69 * 252);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 85, _0x3b3c69 * 294, _0x3b3c69 * 96, _0x3b3c69 * 314, _0x3b3c69 * 103, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 316, _0x3b3c69 * 151, _0x3b3c69 * 314, _0x3b3c69 * 156, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 169, _0x3b3c69 * 317, _0x3b3c69 * 182, _0x3b3c69 * 285, _0x3b3c69 * 191, _0x3b3c69 * 256);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 78, _0x3b3c69 * 252);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 273, _0x3b3c69 * 146, _0x3b3c69 * 268, _0x3b3c69 * 179, _0x3b3c69 * 261);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 190, _0x3b3c69 * 258, _0x3b3c69 * 187, _0x3b3c69 * 266, _0x3b3c69 * 178, _0x3b3c69 * 272);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 160, _0x3b3c69 * 284, _0x3b3c69 * 123, _0x3b3c69 * 282, _0x3b3c69 * 100, _0x3b3c69 * 277);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 73, _0x3b3c69 * 260, _0x3b3c69 * 79, _0x3b3c69 * 257, _0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 133, _0x3b3c69 * 45, _0x3b3c69 * 136, _0x3b3c69 * 42, _0x3b3c69 * 141, _0x3b3c69 * 55);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 151, _0x3b3c69 * 96, _0x3b3c69 * 164, _0x3b3c69 * 117, _0x3b3c69 * 175, _0x3b3c69 * 134);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 203, _0x3b3c69 * 181, _0x3b3c69 * 207, _0x3b3c69 * 182, _0x3b3c69 * 208, _0x3b3c69 * 215);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 206, _0x3b3c69 * 240, _0x3b3c69 * 205, _0x3b3c69 * 246, _0x3b3c69 * 184, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 267, _0x3b3c69 * 131, _0x3b3c69 * 272, _0x3b3c69 * 86, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 67, _0x3b3c69 * 252, _0x3b3c69 * 68, _0x3b3c69 * 239, _0x3b3c69 * 64, _0x3b3c69 * 216);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 62, _0x3b3c69 * 194, _0x3b3c69 * 72, _0x3b3c69 * 169, _0x3b3c69 * 92, _0x3b3c69 * 142);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 121, _0x3b3c69 * 114, _0x3b3c69 * 101, _0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 115, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 116, _0x3b3c69 * 28, _0x3b3c69 * 119, _0x3b3c69 * 27, _0x3b3c69 * 126, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134, _0x3b3c69 * 48, _0x3b3c69 * 134, _0x3b3c69 * 49, _0x3b3c69 * 132, _0x3b3c69 * 59);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 131, _0x3b3c69 * 67, _0x3b3c69 * 127, _0x3b3c69 * 65, _0x3b3c69 * 120, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 49, _0x3b3c69 * 113, _0x3b3c69 * 43, _0x3b3c69 * 115, _0x3b3c69 * 38);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 146, _0x3b3c69 * 34);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 152, _0x3b3c69 * 28, _0x3b3c69 * 155, _0x3b3c69 * 27, _0x3b3c69 * 157, _0x3b3c69 * 39);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 157, _0x3b3c69 * 45, _0x3b3c69 * 157, _0x3b3c69 * 49, _0x3b3c69 * 150, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 57);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 50, _0x3b3c69 * 137, _0x3b3c69 * 47, _0x3b3c69 * 141, _0x3b3c69 * 42);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 143, _0x3b3c69 * 69);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 56, _0x3b3c69 * 156, _0x3b3c69 * 50, _0x3b3c69 * 158, _0x3b3c69 * 58);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 159, _0x3b3c69 * 64, _0x3b3c69 * 160, _0x3b3c69 * 67, _0x3b3c69 * 153, _0x3b3c69 * 77);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 83, _0x3b3c69 * 145, _0x3b3c69 * 84, _0x3b3c69 * 143, _0x3b3c69 * 77);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 149, _0x3b3c69 * 92);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 149, _0x3b3c69 * 89, _0x3b3c69 * 151, _0x3b3c69 * 84, _0x3b3c69 * 156, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 73, _0x3b3c69 * 163, _0x3b3c69 * 78, _0x3b3c69 * 162, _0x3b3c69 * 86);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 91, _0x3b3c69 * 155, _0x3b3c69 * 99, _0x3b3c69 * 152, _0x3b3c69 * 98);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 111, _0x3b3c69 * 61);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 51, _0x3b3c69 * 117, _0x3b3c69 * 51, _0x3b3c69 * 124, _0x3b3c69 * 64);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 128, _0x3b3c69 * 68, _0x3b3c69 * 128, _0x3b3c69 * 76, _0x3b3c69 * 126, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 123, _0x3b3c69 * 84, _0x3b3c69 * 122, _0x3b3c69 * 82, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 112, _0x3b3c69 * 67, _0x3b3c69 * 115, _0x3b3c69 * 74, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 68, _0x3b3c69 * 111, _0x3b3c69 * 66, _0x3b3c69 * 111, _0x3b3c69 * 62);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 107, _0x3b3c69 * 81);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 108, _0x3b3c69 * 74, _0x3b3c69 * 112, _0x3b3c69 * 73, _0x3b3c69 * 118, _0x3b3c69 * 84);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 88, _0x3b3c69 * 122, _0x3b3c69 * 93, _0x3b3c69 * 121, _0x3b3c69 * 98);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 98, _0x3b3c69 * 113, _0x3b3c69 * 98, _0x3b3c69 * 109, _0x3b3c69 * 90);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 107, _0x3b3c69 * 87, _0x3b3c69 * 106, _0x3b3c69 * 85, _0x3b3c69 * 107, _0x3b3c69 * 82);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[3], _0x20292f[3], _0x3b3c69 * 8);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 99);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 186, _0x3b3c69 * 123, _0x3b3c69 * 199, _0x3b3c69 * 152, _0x3b3c69 * 209, _0x3b3c69 * 169);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 228, _0x3b3c69 * 205, _0x3b3c69 * 224, _0x3b3c69 * 245, _0x3b3c69 * 190, _0x3b3c69 * 276);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 296, _0x3b3c69 * 99, _0x3b3c69 * 292, _0x3b3c69 * 79, _0x3b3c69 * 274);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 49, _0x3b3c69 * 253, _0x3b3c69 * 47, _0x3b3c69 * 214, _0x3b3c69 * 50, _0x3b3c69 * 197);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 61, _0x3b3c69 * 143, _0x3b3c69 * 102, _0x3b3c69 * 113, _0x3b3c69 * 131, _0x3b3c69 * 99);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[1]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 73, _0x3b3c69 * 270);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 79, _0x3b3c69 * 280, _0x3b3c69 * 77, _0x3b3c69 * 280, _0x3b3c69 * 78, _0x3b3c69 * 287);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 78, _0x3b3c69 * 290, _0x3b3c69 * 83, _0x3b3c69 * 291, _0x3b3c69 * 82, _0x3b3c69 * 299);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 81, _0x3b3c69 * 301, _0x3b3c69 * 87, _0x3b3c69 * 301, _0x3b3c69 * 92, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 94, _0x3b3c69 * 319, _0x3b3c69 * 100, _0x3b3c69 * 321, _0x3b3c69 * 107, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 323, _0x3b3c69 * 114, _0x3b3c69 * 324, _0x3b3c69 * 119, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 321, _0x3b3c69 * 146, _0x3b3c69 * 323, _0x3b3c69 * 139, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 324, _0x3b3c69 * 150, _0x3b3c69 * 324, _0x3b3c69 * 153, _0x3b3c69 * 320);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 168, _0x3b3c69 * 319, _0x3b3c69 * 171, _0x3b3c69 * 316, _0x3b3c69 * 173, _0x3b3c69 * 307);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 180, _0x3b3c69 * 305, _0x3b3c69 * 180, _0x3b3c69 * 301, _0x3b3c69 * 178, _0x3b3c69 * 296);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 183, _0x3b3c69 * 296, _0x3b3c69 * 185, _0x3b3c69 * 289, _0x3b3c69 * 188, _0x3b3c69 * 279);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 171, _0x3b3c69 * 286, _0x3b3c69 * 149, _0x3b3c69 * 290, _0x3b3c69 * 132, _0x3b3c69 * 289);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 101, _0x3b3c69 * 290, _0x3b3c69 * 86, _0x3b3c69 * 280, _0x3b3c69 * 74, _0x3b3c69 * 271);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[5]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 76, _0x3b3c69 * 252);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 85, _0x3b3c69 * 294, _0x3b3c69 * 96, _0x3b3c69 * 314, _0x3b3c69 * 103, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 316, _0x3b3c69 * 151, _0x3b3c69 * 314, _0x3b3c69 * 156, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 169, _0x3b3c69 * 317, _0x3b3c69 * 182, _0x3b3c69 * 285, _0x3b3c69 * 191, _0x3b3c69 * 256);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 134.5, _0x3b3c69 * 254, _0x3b3c69 * 78, _0x3b3c69 * 252);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[2]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 273, _0x3b3c69 * 146, _0x3b3c69 * 268, _0x3b3c69 * 179, _0x3b3c69 * 261);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 190, _0x3b3c69 * 258, _0x3b3c69 * 187, _0x3b3c69 * 266, _0x3b3c69 * 178, _0x3b3c69 * 272);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 160, _0x3b3c69 * 284, _0x3b3c69 * 123, _0x3b3c69 * 282, _0x3b3c69 * 100, _0x3b3c69 * 277);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 73, _0x3b3c69 * 260, _0x3b3c69 * 79, _0x3b3c69 * 257, _0x3b3c69 * 84, _0x3b3c69 * 257);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[1]);
  circle(_0x1a6111, _0x3b3c69 * 102, _0x3b3c69 * 269, _0x3b3c69 * 11);
  fill_path(_0x1a6111, _0x20292f[3]);
  circle(_0x1a6111, _0x3b3c69 * 98, _0x3b3c69 * 266, _0x3b3c69 * 5);
  fill_path(_0x1a6111, _0x20292f[6]);
  circle(_0x1a6111, _0x3b3c69 * 168, _0x3b3c69 * 269, _0x3b3c69 * 11);
  fill_path(_0x1a6111, _0x20292f[3]);
  circle(_0x1a6111, _0x3b3c69 * 164, _0x3b3c69 * 266, _0x3b3c69 * 5);
  fill_path(_0x1a6111, _0x20292f[6]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 133, _0x3b3c69 * 45, _0x3b3c69 * 136, _0x3b3c69 * 42, _0x3b3c69 * 141, _0x3b3c69 * 55);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 151, _0x3b3c69 * 96, _0x3b3c69 * 164, _0x3b3c69 * 117, _0x3b3c69 * 175, _0x3b3c69 * 134);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 203, _0x3b3c69 * 181, _0x3b3c69 * 207, _0x3b3c69 * 182, _0x3b3c69 * 208, _0x3b3c69 * 215);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 206, _0x3b3c69 * 240, _0x3b3c69 * 205, _0x3b3c69 * 246, _0x3b3c69 * 184, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 267, _0x3b3c69 * 131, _0x3b3c69 * 272, _0x3b3c69 * 86, _0x3b3c69 * 258);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 67, _0x3b3c69 * 252, _0x3b3c69 * 68, _0x3b3c69 * 239, _0x3b3c69 * 64, _0x3b3c69 * 216);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 62, _0x3b3c69 * 194, _0x3b3c69 * 72, _0x3b3c69 * 169, _0x3b3c69 * 92, _0x3b3c69 * 142);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 106, _0x3b3c69 * 121, _0x3b3c69 * 114, _0x3b3c69 * 101, _0x3b3c69 * 125, _0x3b3c69 * 65);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[2]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 115, _0x3b3c69 * 235);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 118, _0x3b3c69 * 258, _0x3b3c69 * 137, _0x3b3c69 * 268, _0x3b3c69 * 148, _0x3b3c69 * 246);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 156, _0x3b3c69 * 228, _0x3b3c69 * 152, _0x3b3c69 * 169, _0x3b3c69 * 150, _0x3b3c69 * 140);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 147, _0x3b3c69 * 87, _0x3b3c69 * 143, _0x3b3c69 * 69, _0x3b3c69 * 142, _0x3b3c69 * 60);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 136, _0x3b3c69 * 44, _0x3b3c69 * 132, _0x3b3c69 * 43, _0x3b3c69 * 127, _0x3b3c69 * 62);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 119, _0x3b3c69 * 116, _0x3b3c69 * 119, _0x3b3c69 * 140, _0x3b3c69 * 116, _0x3b3c69 * 166);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 113, _0x3b3c69 * 202, _0x3b3c69 * 113, _0x3b3c69 * 223, _0x3b3c69 * 115, _0x3b3c69 * 233);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[4]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 132, _0x3b3c69 * 219);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 140, _0x3b3c69 * 229, _0x3b3c69 * 142, _0x3b3c69 * 231, _0x3b3c69 * 145, _0x3b3c69 * 237);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 145, _0x3b3c69 * 245, _0x3b3c69 * 139, _0x3b3c69 * 249, _0x3b3c69 * 133, _0x3b3c69 * 249);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 123, _0x3b3c69 * 248, _0x3b3c69 * 123, _0x3b3c69 * 243, _0x3b3c69 * 121, _0x3b3c69 * 239);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 126, _0x3b3c69 * 227, _0x3b3c69 * 129, _0x3b3c69 * 223, _0x3b3c69 * 132, _0x3b3c69 * 219);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 179);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 140, _0x3b3c69 * 188.5, _0x3b3c69 * 140, _0x3b3c69 * 188.5, _0x3b3c69 * 147, _0x3b3c69 * 198);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 209, _0x3b3c69 * 142, _0x3b3c69 * 214, _0x3b3c69 * 133, _0x3b3c69 * 214);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 121, _0x3b3c69 * 211, _0x3b3c69 * 121, _0x3b3c69 * 207, _0x3b3c69 * 120, _0x3b3c69 * 200);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 126.5, _0x3b3c69 * 189.5, _0x3b3c69 * 126.5, _0x3b3c69 * 189.5, _0x3b3c69 * 133, _0x3b3c69 * 179);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 143);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 139, _0x3b3c69 * 151.5, _0x3b3c69 * 139, _0x3b3c69 * 151.5, _0x3b3c69 * 145, _0x3b3c69 * 160);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 143, _0x3b3c69 * 167, _0x3b3c69 * 140, _0x3b3c69 * 170, _0x3b3c69 * 134, _0x3b3c69 * 170);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 128, _0x3b3c69 * 169, _0x3b3c69 * 124, _0x3b3c69 * 167, _0x3b3c69 * 123, _0x3b3c69 * 161);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 128, _0x3b3c69 * 152, _0x3b3c69 * 128, _0x3b3c69 * 152, _0x3b3c69 * 133, _0x3b3c69 * 143);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 115);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137.5, _0x3b3c69 * 121.5, _0x3b3c69 * 137.5, _0x3b3c69 * 121.5, _0x3b3c69 * 142, _0x3b3c69 * 128);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 133, _0x3b3c69 * 138, _0x3b3c69 * 135, _0x3b3c69 * 133, _0x3b3c69 * 135);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 129, _0x3b3c69 * 135, _0x3b3c69 * 125, _0x3b3c69 * 132, _0x3b3c69 * 125, _0x3b3c69 * 129);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 129, _0x3b3c69 * 122, _0x3b3c69 * 129, _0x3b3c69 * 122, _0x3b3c69 * 133, _0x3b3c69 * 115);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 133, _0x3b3c69 * 94);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 136.5, _0x3b3c69 * 98.5, _0x3b3c69 * 136.5, _0x3b3c69 * 98.5, _0x3b3c69 * 140, _0x3b3c69 * 103);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 139, _0x3b3c69 * 109, _0x3b3c69 * 137, _0x3b3c69 * 109, _0x3b3c69 * 133, _0x3b3c69 * 110);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 127, _0x3b3c69 * 108, _0x3b3c69 * 129, _0x3b3c69 * 107, _0x3b3c69 * 127, _0x3b3c69 * 105);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 130, _0x3b3c69 * 99.5, _0x3b3c69 * 130, _0x3b3c69 * 99.5, _0x3b3c69 * 133, _0x3b3c69 * 94);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 130, _0x3b3c69 * 279);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 136.5, _0x3b3c69 * 287.5, _0x3b3c69 * 136.5, _0x3b3c69 * 287.5, _0x3b3c69 * 143, _0x3b3c69 * 296);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 143, _0x3b3c69 * 302, _0x3b3c69 * 139, _0x3b3c69 * 309, _0x3b3c69 * 131, _0x3b3c69 * 308);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 123, _0x3b3c69 * 306, _0x3b3c69 * 121, _0x3b3c69 * 303, _0x3b3c69 * 120, _0x3b3c69 * 297);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 125.5, _0x3b3c69 * 288.5, _0x3b3c69 * 125.5, _0x3b3c69 * 288.5, _0x3b3c69 * 131, _0x3b3c69 * 280);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 147, _0x3b3c69 * 303);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 151, _0x3b3c69 * 311, _0x3b3c69 * 151, _0x3b3c69 * 319, _0x3b3c69 * 147, _0x3b3c69 * 321);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 138, _0x3b3c69 * 320, _0x3b3c69 * 145, _0x3b3c69 * 308, _0x3b3c69 * 147, _0x3b3c69 * 303);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 115, _0x3b3c69 * 303);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 115, _0x3b3c69 * 312, _0x3b3c69 * 118, _0x3b3c69 * 319, _0x3b3c69 * 115, _0x3b3c69 * 319);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 112, _0x3b3c69 * 324, _0x3b3c69 * 109, _0x3b3c69 * 318, _0x3b3c69 * 109, _0x3b3c69 * 314);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 109, _0x3b3c69 * 308, _0x3b3c69 * 112, _0x3b3c69 * 303, _0x3b3c69 * 115, _0x3b3c69 * 303);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 89, _0x3b3c69 * 280);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 83, _0x3b3c69 * 279, _0x3b3c69 * 80, _0x3b3c69 * 281, _0x3b3c69 * 81, _0x3b3c69 * 286);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 83, _0x3b3c69 * 290, _0x3b3c69 * 84, _0x3b3c69 * 290, _0x3b3c69 * 87, _0x3b3c69 * 286);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 94, _0x3b3c69 * 290);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 93, _0x3b3c69 * 294, _0x3b3c69 * 90, _0x3b3c69 * 303, _0x3b3c69 * 86, _0x3b3c69 * 298);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 84, _0x3b3c69 * 295, _0x3b3c69 * 84, _0x3b3c69 * 291, _0x3b3c69 * 89, _0x3b3c69 * 291);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 163, _0x3b3c69 * 295);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 175, _0x3b3c69 * 294, _0x3b3c69 * 176, _0x3b3c69 * 296, _0x3b3c69 * 175, _0x3b3c69 * 301);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 174, _0x3b3c69 * 305, _0x3b3c69 * 171, _0x3b3c69 * 305, _0x3b3c69 * 166, _0x3b3c69 * 300);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 172, _0x3b3c69 * 286);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 180, _0x3b3c69 * 285, _0x3b3c69 * 181, _0x3b3c69 * 285, _0x3b3c69 * 180, _0x3b3c69 * 291);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 176, _0x3b3c69 * 295, _0x3b3c69 * 174, _0x3b3c69 * 294, _0x3b3c69 * 172, _0x3b3c69 * 286);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[8]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 115, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 116, _0x3b3c69 * 28, _0x3b3c69 * 119, _0x3b3c69 * 27, _0x3b3c69 * 126, _0x3b3c69 * 37);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 134, _0x3b3c69 * 48, _0x3b3c69 * 134, _0x3b3c69 * 49, _0x3b3c69 * 132, _0x3b3c69 * 59);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 131, _0x3b3c69 * 67, _0x3b3c69 * 127, _0x3b3c69 * 65, _0x3b3c69 * 120, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 49, _0x3b3c69 * 113, _0x3b3c69 * 43, _0x3b3c69 * 115, _0x3b3c69 * 38);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 146, _0x3b3c69 * 34);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 152, _0x3b3c69 * 28, _0x3b3c69 * 155, _0x3b3c69 * 27, _0x3b3c69 * 157, _0x3b3c69 * 39);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 157, _0x3b3c69 * 45, _0x3b3c69 * 157, _0x3b3c69 * 49, _0x3b3c69 * 150, _0x3b3c69 * 56);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 141, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 66, _0x3b3c69 * 138, _0x3b3c69 * 57);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 137, _0x3b3c69 * 50, _0x3b3c69 * 137, _0x3b3c69 * 47, _0x3b3c69 * 141, _0x3b3c69 * 42);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 143, _0x3b3c69 * 69);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 56, _0x3b3c69 * 156, _0x3b3c69 * 50, _0x3b3c69 * 158, _0x3b3c69 * 58);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 159, _0x3b3c69 * 64, _0x3b3c69 * 160, _0x3b3c69 * 67, _0x3b3c69 * 153, _0x3b3c69 * 77);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 148, _0x3b3c69 * 83, _0x3b3c69 * 145, _0x3b3c69 * 84, _0x3b3c69 * 143, _0x3b3c69 * 77);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 149, _0x3b3c69 * 92);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 149, _0x3b3c69 * 89, _0x3b3c69 * 151, _0x3b3c69 * 84, _0x3b3c69 * 156, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 73, _0x3b3c69 * 163, _0x3b3c69 * 78, _0x3b3c69 * 162, _0x3b3c69 * 86);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 161, _0x3b3c69 * 91, _0x3b3c69 * 155, _0x3b3c69 * 99, _0x3b3c69 * 152, _0x3b3c69 * 98);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 111, _0x3b3c69 * 61);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 51, _0x3b3c69 * 117, _0x3b3c69 * 51, _0x3b3c69 * 124, _0x3b3c69 * 64);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 128, _0x3b3c69 * 68, _0x3b3c69 * 128, _0x3b3c69 * 76, _0x3b3c69 * 126, _0x3b3c69 * 79);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 123, _0x3b3c69 * 84, _0x3b3c69 * 122, _0x3b3c69 * 82, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 112, _0x3b3c69 * 67, _0x3b3c69 * 115, _0x3b3c69 * 74, _0x3b3c69 * 115, _0x3b3c69 * 74);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 111, _0x3b3c69 * 68, _0x3b3c69 * 111, _0x3b3c69 * 66, _0x3b3c69 * 111, _0x3b3c69 * 62);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  _0x1a6111.beginPath();
  _0x1a6111.lineCap = "round";
  _0x1a6111.lineJoin = "round";
  _0x1a6111.moveTo(_0x3b3c69 * 107, _0x3b3c69 * 81);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 108, _0x3b3c69 * 74, _0x3b3c69 * 112, _0x3b3c69 * 73, _0x3b3c69 * 118, _0x3b3c69 * 84);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 122, _0x3b3c69 * 88, _0x3b3c69 * 122, _0x3b3c69 * 93, _0x3b3c69 * 121, _0x3b3c69 * 98);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 114, _0x3b3c69 * 98, _0x3b3c69 * 113, _0x3b3c69 * 98, _0x3b3c69 * 109, _0x3b3c69 * 90);
  _0x1a6111.bezierCurveTo(_0x3b3c69 * 107, _0x3b3c69 * 87, _0x3b3c69 * 106, _0x3b3c69 * 85, _0x3b3c69 * 107, _0x3b3c69 * 82);
  _0x1a6111.closePath();
  fill_path(_0x1a6111, _0x20292f[7]);
  return _0xfc1c1b;
}
function create_hurt_dragon(_0x5d165e, _0x509b09) {
  var _0x5b4c43 = document.createElement("canvas");
  var _0x40eddd = _0x5b4c43.getContext("2d");
  _0x5b4c43.width = _0x5d165e * 271;
  _0x5b4c43.height = _0x5d165e * 366;
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 133, _0x5d165e * 99);
  _0x40eddd.bezierCurveTo(_0x5d165e * 186, _0x5d165e * 123, _0x5d165e * 199, _0x5d165e * 152, _0x5d165e * 209, _0x5d165e * 169);
  _0x40eddd.bezierCurveTo(_0x5d165e * 228, _0x5d165e * 205, _0x5d165e * 224, _0x5d165e * 245, _0x5d165e * 190, _0x5d165e * 276);
  _0x40eddd.bezierCurveTo(_0x5d165e * 161, _0x5d165e * 296, _0x5d165e * 99, _0x5d165e * 292, _0x5d165e * 79, _0x5d165e * 274);
  _0x40eddd.bezierCurveTo(_0x5d165e * 49, _0x5d165e * 253, _0x5d165e * 47, _0x5d165e * 214, _0x5d165e * 50, _0x5d165e * 197);
  _0x40eddd.bezierCurveTo(_0x5d165e * 61, _0x5d165e * 143, _0x5d165e * 102, _0x5d165e * 113, _0x5d165e * 131, _0x5d165e * 99);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 73, _0x5d165e * 270);
  _0x40eddd.bezierCurveTo(_0x5d165e * 79, _0x5d165e * 280, _0x5d165e * 77, _0x5d165e * 280, _0x5d165e * 78, _0x5d165e * 287);
  _0x40eddd.bezierCurveTo(_0x5d165e * 78, _0x5d165e * 290, _0x5d165e * 83, _0x5d165e * 291, _0x5d165e * 82, _0x5d165e * 299);
  _0x40eddd.bezierCurveTo(_0x5d165e * 81, _0x5d165e * 301, _0x5d165e * 87, _0x5d165e * 301, _0x5d165e * 92, _0x5d165e * 314);
  _0x40eddd.bezierCurveTo(_0x5d165e * 94, _0x5d165e * 319, _0x5d165e * 100, _0x5d165e * 321, _0x5d165e * 107, _0x5d165e * 320);
  _0x40eddd.bezierCurveTo(_0x5d165e * 111, _0x5d165e * 323, _0x5d165e * 114, _0x5d165e * 324, _0x5d165e * 119, _0x5d165e * 320);
  _0x40eddd.bezierCurveTo(_0x5d165e * 137, _0x5d165e * 321, _0x5d165e * 146, _0x5d165e * 323, _0x5d165e * 139, _0x5d165e * 320);
  _0x40eddd.bezierCurveTo(_0x5d165e * 141, _0x5d165e * 324, _0x5d165e * 150, _0x5d165e * 324, _0x5d165e * 153, _0x5d165e * 320);
  _0x40eddd.bezierCurveTo(_0x5d165e * 168, _0x5d165e * 319, _0x5d165e * 171, _0x5d165e * 316, _0x5d165e * 173, _0x5d165e * 307);
  _0x40eddd.bezierCurveTo(_0x5d165e * 180, _0x5d165e * 305, _0x5d165e * 180, _0x5d165e * 301, _0x5d165e * 178, _0x5d165e * 296);
  _0x40eddd.bezierCurveTo(_0x5d165e * 183, _0x5d165e * 296, _0x5d165e * 185, _0x5d165e * 289, _0x5d165e * 188, _0x5d165e * 279);
  _0x40eddd.bezierCurveTo(_0x5d165e * 171, _0x5d165e * 286, _0x5d165e * 149, _0x5d165e * 290, _0x5d165e * 132, _0x5d165e * 289);
  _0x40eddd.bezierCurveTo(_0x5d165e * 101, _0x5d165e * 290, _0x5d165e * 86, _0x5d165e * 280, _0x5d165e * 74, _0x5d165e * 271);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 76, _0x5d165e * 252);
  _0x40eddd.bezierCurveTo(_0x5d165e * 85, _0x5d165e * 294, _0x5d165e * 96, _0x5d165e * 314, _0x5d165e * 103, _0x5d165e * 314);
  _0x40eddd.bezierCurveTo(_0x5d165e * 106, _0x5d165e * 316, _0x5d165e * 151, _0x5d165e * 314, _0x5d165e * 156, _0x5d165e * 314);
  _0x40eddd.bezierCurveTo(_0x5d165e * 169, _0x5d165e * 317, _0x5d165e * 182, _0x5d165e * 285, _0x5d165e * 191, _0x5d165e * 256);
  _0x40eddd.bezierCurveTo(_0x5d165e * 134.5, _0x5d165e * 254, _0x5d165e * 134.5, _0x5d165e * 254, _0x5d165e * 78, _0x5d165e * 252);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 84, _0x5d165e * 257);
  _0x40eddd.bezierCurveTo(_0x5d165e * 122, _0x5d165e * 273, _0x5d165e * 146, _0x5d165e * 268, _0x5d165e * 179, _0x5d165e * 261);
  _0x40eddd.bezierCurveTo(_0x5d165e * 190, _0x5d165e * 258, _0x5d165e * 187, _0x5d165e * 266, _0x5d165e * 178, _0x5d165e * 272);
  _0x40eddd.bezierCurveTo(_0x5d165e * 160, _0x5d165e * 284, _0x5d165e * 123, _0x5d165e * 282, _0x5d165e * 100, _0x5d165e * 277);
  _0x40eddd.bezierCurveTo(_0x5d165e * 73, _0x5d165e * 260, _0x5d165e * 79, _0x5d165e * 257, _0x5d165e * 84, _0x5d165e * 257);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 125, _0x5d165e * 65);
  _0x40eddd.bezierCurveTo(_0x5d165e * 133, _0x5d165e * 45, _0x5d165e * 136, _0x5d165e * 42, _0x5d165e * 141, _0x5d165e * 55);
  _0x40eddd.bezierCurveTo(_0x5d165e * 151, _0x5d165e * 96, _0x5d165e * 164, _0x5d165e * 117, _0x5d165e * 175, _0x5d165e * 134);
  _0x40eddd.bezierCurveTo(_0x5d165e * 203, _0x5d165e * 181, _0x5d165e * 207, _0x5d165e * 182, _0x5d165e * 208, _0x5d165e * 215);
  _0x40eddd.bezierCurveTo(_0x5d165e * 206, _0x5d165e * 240, _0x5d165e * 205, _0x5d165e * 246, _0x5d165e * 184, _0x5d165e * 258);
  _0x40eddd.bezierCurveTo(_0x5d165e * 161, _0x5d165e * 267, _0x5d165e * 131, _0x5d165e * 272, _0x5d165e * 86, _0x5d165e * 258);
  _0x40eddd.bezierCurveTo(_0x5d165e * 67, _0x5d165e * 252, _0x5d165e * 68, _0x5d165e * 239, _0x5d165e * 64, _0x5d165e * 216);
  _0x40eddd.bezierCurveTo(_0x5d165e * 62, _0x5d165e * 194, _0x5d165e * 72, _0x5d165e * 169, _0x5d165e * 92, _0x5d165e * 142);
  _0x40eddd.bezierCurveTo(_0x5d165e * 106, _0x5d165e * 121, _0x5d165e * 114, _0x5d165e * 101, _0x5d165e * 125, _0x5d165e * 65);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 115, _0x5d165e * 37);
  _0x40eddd.bezierCurveTo(_0x5d165e * 116, _0x5d165e * 28, _0x5d165e * 119, _0x5d165e * 27, _0x5d165e * 126, _0x5d165e * 37);
  _0x40eddd.bezierCurveTo(_0x5d165e * 134, _0x5d165e * 48, _0x5d165e * 134, _0x5d165e * 49, _0x5d165e * 132, _0x5d165e * 59);
  _0x40eddd.bezierCurveTo(_0x5d165e * 131, _0x5d165e * 67, _0x5d165e * 127, _0x5d165e * 65, _0x5d165e * 120, _0x5d165e * 56);
  _0x40eddd.bezierCurveTo(_0x5d165e * 114, _0x5d165e * 49, _0x5d165e * 113, _0x5d165e * 43, _0x5d165e * 115, _0x5d165e * 38);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 146, _0x5d165e * 34);
  _0x40eddd.bezierCurveTo(_0x5d165e * 152, _0x5d165e * 28, _0x5d165e * 155, _0x5d165e * 27, _0x5d165e * 157, _0x5d165e * 39);
  _0x40eddd.bezierCurveTo(_0x5d165e * 157, _0x5d165e * 45, _0x5d165e * 157, _0x5d165e * 49, _0x5d165e * 150, _0x5d165e * 56);
  _0x40eddd.bezierCurveTo(_0x5d165e * 141, _0x5d165e * 66, _0x5d165e * 138, _0x5d165e * 66, _0x5d165e * 138, _0x5d165e * 57);
  _0x40eddd.bezierCurveTo(_0x5d165e * 137, _0x5d165e * 50, _0x5d165e * 137, _0x5d165e * 47, _0x5d165e * 141, _0x5d165e * 42);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 143, _0x5d165e * 69);
  _0x40eddd.bezierCurveTo(_0x5d165e * 148, _0x5d165e * 56, _0x5d165e * 156, _0x5d165e * 50, _0x5d165e * 158, _0x5d165e * 58);
  _0x40eddd.bezierCurveTo(_0x5d165e * 159, _0x5d165e * 64, _0x5d165e * 160, _0x5d165e * 67, _0x5d165e * 153, _0x5d165e * 77);
  _0x40eddd.bezierCurveTo(_0x5d165e * 148, _0x5d165e * 83, _0x5d165e * 145, _0x5d165e * 84, _0x5d165e * 143, _0x5d165e * 77);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 149, _0x5d165e * 92);
  _0x40eddd.bezierCurveTo(_0x5d165e * 149, _0x5d165e * 89, _0x5d165e * 151, _0x5d165e * 84, _0x5d165e * 156, _0x5d165e * 79);
  _0x40eddd.bezierCurveTo(_0x5d165e * 161, _0x5d165e * 73, _0x5d165e * 163, _0x5d165e * 78, _0x5d165e * 162, _0x5d165e * 86);
  _0x40eddd.bezierCurveTo(_0x5d165e * 161, _0x5d165e * 91, _0x5d165e * 155, _0x5d165e * 99, _0x5d165e * 152, _0x5d165e * 98);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 111, _0x5d165e * 61);
  _0x40eddd.bezierCurveTo(_0x5d165e * 114, _0x5d165e * 51, _0x5d165e * 117, _0x5d165e * 51, _0x5d165e * 124, _0x5d165e * 64);
  _0x40eddd.bezierCurveTo(_0x5d165e * 128, _0x5d165e * 68, _0x5d165e * 128, _0x5d165e * 76, _0x5d165e * 126, _0x5d165e * 79);
  _0x40eddd.bezierCurveTo(_0x5d165e * 123, _0x5d165e * 84, _0x5d165e * 122, _0x5d165e * 82, _0x5d165e * 115, _0x5d165e * 74);
  _0x40eddd.bezierCurveTo(_0x5d165e * 112, _0x5d165e * 67, _0x5d165e * 115, _0x5d165e * 74, _0x5d165e * 115, _0x5d165e * 74);
  _0x40eddd.bezierCurveTo(_0x5d165e * 111, _0x5d165e * 68, _0x5d165e * 111, _0x5d165e * 66, _0x5d165e * 111, _0x5d165e * 62);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  _0x40eddd.beginPath();
  _0x40eddd.lineCap = "round";
  _0x40eddd.lineJoin = "round";
  _0x40eddd.moveTo(_0x5d165e * 107, _0x5d165e * 81);
  _0x40eddd.bezierCurveTo(_0x5d165e * 108, _0x5d165e * 74, _0x5d165e * 112, _0x5d165e * 73, _0x5d165e * 118, _0x5d165e * 84);
  _0x40eddd.bezierCurveTo(_0x5d165e * 122, _0x5d165e * 88, _0x5d165e * 122, _0x5d165e * 93, _0x5d165e * 121, _0x5d165e * 98);
  _0x40eddd.bezierCurveTo(_0x5d165e * 114, _0x5d165e * 98, _0x5d165e * 113, _0x5d165e * 98, _0x5d165e * 109, _0x5d165e * 90);
  _0x40eddd.bezierCurveTo(_0x5d165e * 107, _0x5d165e * 87, _0x5d165e * 106, _0x5d165e * 85, _0x5d165e * 107, _0x5d165e * 82);
  _0x40eddd.closePath();
  fill_path(_0x40eddd, _0x509b09[0]);
  return _0x5b4c43;
}
function create_wingleft(_0x5cbd44, _0x444b47) {
  var _0x189125 = document.createElement("canvas");
  var _0x38525f = _0x189125.getContext("2d");
  _0x189125.width = _0x5cbd44 * 85;
  _0x189125.height = _0x5cbd44 * 145;
  _0x38525f.translate(_0x5cbd44 * -20, _0x5cbd44 * -95);
  _0x38525f.beginPath();
  _0x38525f.lineCap = "round";
  _0x38525f.lineJoin = "round";
  _0x38525f.moveTo(_0x5cbd44 * 50, _0x5cbd44 * 105);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 52, _0x5cbd44 * 119, _0x5cbd44 * 64, _0x5cbd44 * 137, _0x5cbd44 * 71, _0x5cbd44 * 146);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 71, _0x5cbd44 * 161, _0x5cbd44 * 74, _0x5cbd44 * 169, _0x5cbd44 * 79, _0x5cbd44 * 179);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 68, _0x5cbd44 * 192, _0x5cbd44 * 70, _0x5cbd44 * 204, _0x5cbd44 * 69, _0x5cbd44 * 216);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 50, _0x5cbd44 * 189.5, _0x5cbd44 * 50, _0x5cbd44 * 189.5, _0x5cbd44 * 31, _0x5cbd44 * 163);
  _0x38525f.closePath();
  fill_path(_0x38525f, _0x444b47[1]);
  _0x38525f.beginPath();
  _0x38525f.lineCap = "round";
  _0x38525f.lineJoin = "round";
  _0x38525f.moveTo(_0x5cbd44 * 44, _0x5cbd44 * 106);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 49, _0x5cbd44 * 90, _0x5cbd44 * 58, _0x5cbd44 * 104, _0x5cbd44 * 51, _0x5cbd44 * 121);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 45, _0x5cbd44 * 143, _0x5cbd44 * 41, _0x5cbd44 * 151, _0x5cbd44 * 37, _0x5cbd44 * 162);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 48, _0x5cbd44 * 180, _0x5cbd44 * 58, _0x5cbd44 * 188, _0x5cbd44 * 76, _0x5cbd44 * 205);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 104, _0x5cbd44 * 209, _0x5cbd44 * 105, _0x5cbd44 * 229, _0x5cbd44 * 92, _0x5cbd44 * 235);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 76, _0x5cbd44 * 239, _0x5cbd44 * 75, _0x5cbd44 * 232, _0x5cbd44 * 56, _0x5cbd44 * 213);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 31, _0x5cbd44 * 187, _0x5cbd44 * 28, _0x5cbd44 * 176, _0x5cbd44 * 23, _0x5cbd44 * 162);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 38, _0x5cbd44 * 131, _0x5cbd44 * 40, _0x5cbd44 * 120, _0x5cbd44 * 44, _0x5cbd44 * 106);
  _0x38525f.closePath();
  fill_path(_0x38525f, _0x444b47[2], _0x444b47[3], _0x5cbd44 * 4);
  _0x38525f.beginPath();
  _0x38525f.lineCap = "round";
  _0x38525f.lineJoin = "round";
  _0x38525f.moveTo(_0x5cbd44 * 30, _0x5cbd44 * 159);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 46, _0x5cbd44 * 157, _0x5cbd44 * 59, _0x5cbd44 * 152, _0x5cbd44 * 68, _0x5cbd44 * 148);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 63, _0x5cbd44 * 155, _0x5cbd44 * 52, _0x5cbd44 * 160, _0x5cbd44 * 44, _0x5cbd44 * 164);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 59, _0x5cbd44 * 169, _0x5cbd44 * 66, _0x5cbd44 * 174, _0x5cbd44 * 75, _0x5cbd44 * 178);
  _0x38525f.bezierCurveTo(_0x5cbd44 * 58, _0x5cbd44 * 178, _0x5cbd44 * 49, _0x5cbd44 * 175, _0x5cbd44 * 37, _0x5cbd44 * 174);
  _0x38525f.closePath();
  fill_path(_0x38525f, _0x444b47[2]);
  return _0x189125;
}
function create_hurt_wingleft(_0x23c81f, _0x305bd7) {
  var _0x50b873 = document.createElement("canvas");
  var _0x5216bc = _0x50b873.getContext("2d");
  _0x50b873.width = _0x23c81f * 85;
  _0x50b873.height = _0x23c81f * 145;
  _0x5216bc.translate(_0x23c81f * -20, _0x23c81f * -95);
  _0x5216bc.beginPath();
  _0x5216bc.lineCap = "round";
  _0x5216bc.lineJoin = "round";
  _0x5216bc.moveTo(_0x23c81f * 50, _0x23c81f * 105);
  _0x5216bc.bezierCurveTo(_0x23c81f * 52, _0x23c81f * 119, _0x23c81f * 64, _0x23c81f * 137, _0x23c81f * 71, _0x23c81f * 146);
  _0x5216bc.bezierCurveTo(_0x23c81f * 71, _0x23c81f * 161, _0x23c81f * 74, _0x23c81f * 169, _0x23c81f * 79, _0x23c81f * 179);
  _0x5216bc.bezierCurveTo(_0x23c81f * 68, _0x23c81f * 192, _0x23c81f * 70, _0x23c81f * 204, _0x23c81f * 69, _0x23c81f * 216);
  _0x5216bc.bezierCurveTo(_0x23c81f * 50, _0x23c81f * 189.5, _0x23c81f * 50, _0x23c81f * 189.5, _0x23c81f * 31, _0x23c81f * 163);
  _0x5216bc.closePath();
  fill_path(_0x5216bc, _0x305bd7);
  _0x5216bc.beginPath();
  _0x5216bc.lineCap = "round";
  _0x5216bc.lineJoin = "round";
  _0x5216bc.moveTo(_0x23c81f * 44, _0x23c81f * 106);
  _0x5216bc.bezierCurveTo(_0x23c81f * 49, _0x23c81f * 90, _0x23c81f * 58, _0x23c81f * 104, _0x23c81f * 51, _0x23c81f * 121);
  _0x5216bc.bezierCurveTo(_0x23c81f * 45, _0x23c81f * 143, _0x23c81f * 41, _0x23c81f * 151, _0x23c81f * 37, _0x23c81f * 162);
  _0x5216bc.bezierCurveTo(_0x23c81f * 48, _0x23c81f * 180, _0x23c81f * 58, _0x23c81f * 188, _0x23c81f * 76, _0x23c81f * 205);
  _0x5216bc.bezierCurveTo(_0x23c81f * 104, _0x23c81f * 209, _0x23c81f * 105, _0x23c81f * 229, _0x23c81f * 92, _0x23c81f * 235);
  _0x5216bc.bezierCurveTo(_0x23c81f * 76, _0x23c81f * 239, _0x23c81f * 75, _0x23c81f * 232, _0x23c81f * 56, _0x23c81f * 213);
  _0x5216bc.bezierCurveTo(_0x23c81f * 31, _0x23c81f * 187, _0x23c81f * 28, _0x23c81f * 176, _0x23c81f * 23, _0x23c81f * 162);
  _0x5216bc.bezierCurveTo(_0x23c81f * 38, _0x23c81f * 131, _0x23c81f * 40, _0x23c81f * 120, _0x23c81f * 44, _0x23c81f * 106);
  _0x5216bc.closePath();
  fill_path(_0x5216bc, _0x305bd7, _0x305bd7, _0x23c81f * 4);
  _0x5216bc.beginPath();
  _0x5216bc.lineCap = "round";
  _0x5216bc.lineJoin = "round";
  _0x5216bc.moveTo(_0x23c81f * 30, _0x23c81f * 159);
  _0x5216bc.bezierCurveTo(_0x23c81f * 46, _0x23c81f * 157, _0x23c81f * 59, _0x23c81f * 152, _0x23c81f * 68, _0x23c81f * 148);
  _0x5216bc.bezierCurveTo(_0x23c81f * 63, _0x23c81f * 155, _0x23c81f * 52, _0x23c81f * 160, _0x23c81f * 44, _0x23c81f * 164);
  _0x5216bc.bezierCurveTo(_0x23c81f * 59, _0x23c81f * 169, _0x23c81f * 66, _0x23c81f * 174, _0x23c81f * 75, _0x23c81f * 178);
  _0x5216bc.bezierCurveTo(_0x23c81f * 58, _0x23c81f * 178, _0x23c81f * 49, _0x23c81f * 175, _0x23c81f * 37, _0x23c81f * 174);
  _0x5216bc.closePath();
  fill_path(_0x5216bc, _0x305bd7);
  return _0x50b873;
}
function create_wingright(_0x4c2f8e, _0x231939) {
  var _0x11ba1d = document.createElement("canvas");
  var _0x15582e = _0x11ba1d.getContext("2d");
  _0x11ba1d.width = _0x4c2f8e * 85;
  _0x11ba1d.height = _0x4c2f8e * 145;
  _0x15582e.translate(_0x4c2f8e * -165, _0x4c2f8e * -95);
  _0x15582e.beginPath();
  _0x15582e.lineCap = "round";
  _0x15582e.lineJoin = "round";
  _0x15582e.moveTo(_0x4c2f8e * 217, _0x4c2f8e * 103);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 209, _0x4c2f8e * 129, _0x4c2f8e * 203, _0x4c2f8e * 137, _0x4c2f8e * 195, _0x4c2f8e * 146);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 195, _0x4c2f8e * 159, _0x4c2f8e * 194, _0x4c2f8e * 167, _0x4c2f8e * 189, _0x4c2f8e * 178);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 193, _0x4c2f8e * 186, _0x4c2f8e * 196, _0x4c2f8e * 195, _0x4c2f8e * 198, _0x4c2f8e * 216);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 217.5, _0x4c2f8e * 189.5, _0x4c2f8e * 217.5, _0x4c2f8e * 189.5, _0x4c2f8e * 237, _0x4c2f8e * 163);
  _0x15582e.closePath();
  fill_path(_0x15582e, _0x231939[1]);
  _0x15582e.beginPath();
  _0x15582e.lineCap = "round";
  _0x15582e.lineJoin = "round";
  _0x15582e.moveTo(_0x4c2f8e * 231, _0x4c2f8e * 163);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 221, _0x4c2f8e * 139, _0x4c2f8e * 218, _0x4c2f8e * 128, _0x4c2f8e * 215, _0x4c2f8e * 114);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 213, _0x4c2f8e * 102, _0x4c2f8e * 220, _0x4c2f8e * 92, _0x4c2f8e * 222, _0x4c2f8e * 107);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 224, _0x4c2f8e * 118, _0x4c2f8e * 233, _0x4c2f8e * 138, _0x4c2f8e * 244, _0x4c2f8e * 161);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 235, _0x4c2f8e * 188, _0x4c2f8e * 224, _0x4c2f8e * 198, _0x4c2f8e * 204, _0x4c2f8e * 221);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 190, _0x4c2f8e * 233, _0x4c2f8e * 190, _0x4c2f8e * 235, _0x4c2f8e * 180, _0x4c2f8e * 235);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 167, _0x4c2f8e * 235, _0x4c2f8e * 164, _0x4c2f8e * 216, _0x4c2f8e * 175, _0x4c2f8e * 211);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 176, _0x4c2f8e * 208, _0x4c2f8e * 181, _0x4c2f8e * 207, _0x4c2f8e * 191, _0x4c2f8e * 205);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 213, _0x4c2f8e * 186, _0x4c2f8e * 218, _0x4c2f8e * 180, _0x4c2f8e * 230, _0x4c2f8e * 163);
  _0x15582e.closePath();
  fill_path(_0x15582e, _0x231939[2], _0x231939[3], _0x4c2f8e * 4);
  _0x15582e.beginPath();
  _0x15582e.lineCap = "round";
  _0x15582e.lineJoin = "round";
  _0x15582e.moveTo(_0x4c2f8e * 234, _0x4c2f8e * 154);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 227, _0x4c2f8e * 156, _0x4c2f8e * 222, _0x4c2f8e * 156, _0x4c2f8e * 199, _0x4c2f8e * 148);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 201, _0x4c2f8e * 151, _0x4c2f8e * 216, _0x4c2f8e * 159, _0x4c2f8e * 224, _0x4c2f8e * 162);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 209, _0x4c2f8e * 169.5, _0x4c2f8e * 209, _0x4c2f8e * 169.5, _0x4c2f8e * 194, _0x4c2f8e * 177);
  _0x15582e.bezierCurveTo(_0x4c2f8e * 213.5, _0x4c2f8e * 175, _0x4c2f8e * 213.5, _0x4c2f8e * 175, _0x4c2f8e * 233, _0x4c2f8e * 173);
  _0x15582e.closePath();
  fill_path(_0x15582e, _0x231939[2]);
  return _0x11ba1d;
}
function create_hurt_wingright(_0x348ff1, _0x33f961) {
  var _0x35743b = document.createElement("canvas");
  var _0x3dde4d = _0x35743b.getContext("2d");
  _0x35743b.width = _0x348ff1 * 85;
  _0x35743b.height = _0x348ff1 * 145;
  _0x3dde4d.translate(_0x348ff1 * -165, _0x348ff1 * -95);
  _0x3dde4d.beginPath();
  _0x3dde4d.lineCap = "round";
  _0x3dde4d.lineJoin = "round";
  _0x3dde4d.moveTo(_0x348ff1 * 217, _0x348ff1 * 103);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 209, _0x348ff1 * 129, _0x348ff1 * 203, _0x348ff1 * 137, _0x348ff1 * 195, _0x348ff1 * 146);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 195, _0x348ff1 * 159, _0x348ff1 * 194, _0x348ff1 * 167, _0x348ff1 * 189, _0x348ff1 * 178);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 193, _0x348ff1 * 186, _0x348ff1 * 196, _0x348ff1 * 195, _0x348ff1 * 198, _0x348ff1 * 216);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 217.5, _0x348ff1 * 189.5, _0x348ff1 * 217.5, _0x348ff1 * 189.5, _0x348ff1 * 237, _0x348ff1 * 163);
  _0x3dde4d.closePath();
  fill_path(_0x3dde4d, _0x33f961);
  _0x3dde4d.beginPath();
  _0x3dde4d.lineCap = "round";
  _0x3dde4d.lineJoin = "round";
  _0x3dde4d.moveTo(_0x348ff1 * 231, _0x348ff1 * 163);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 221, _0x348ff1 * 139, _0x348ff1 * 218, _0x348ff1 * 128, _0x348ff1 * 215, _0x348ff1 * 114);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 213, _0x348ff1 * 102, _0x348ff1 * 220, _0x348ff1 * 92, _0x348ff1 * 222, _0x348ff1 * 107);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 224, _0x348ff1 * 118, _0x348ff1 * 233, _0x348ff1 * 138, _0x348ff1 * 244, _0x348ff1 * 161);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 235, _0x348ff1 * 188, _0x348ff1 * 224, _0x348ff1 * 198, _0x348ff1 * 204, _0x348ff1 * 221);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 190, _0x348ff1 * 233, _0x348ff1 * 190, _0x348ff1 * 235, _0x348ff1 * 180, _0x348ff1 * 235);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 167, _0x348ff1 * 235, _0x348ff1 * 164, _0x348ff1 * 216, _0x348ff1 * 175, _0x348ff1 * 211);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 176, _0x348ff1 * 208, _0x348ff1 * 181, _0x348ff1 * 207, _0x348ff1 * 191, _0x348ff1 * 205);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 213, _0x348ff1 * 186, _0x348ff1 * 218, _0x348ff1 * 180, _0x348ff1 * 230, _0x348ff1 * 163);
  _0x3dde4d.closePath();
  fill_path(_0x3dde4d, _0x33f961, _0x33f961, _0x348ff1 * 4);
  _0x3dde4d.beginPath();
  _0x3dde4d.lineCap = "round";
  _0x3dde4d.lineJoin = "round";
  _0x3dde4d.moveTo(_0x348ff1 * 234, _0x348ff1 * 154);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 227, _0x348ff1 * 156, _0x348ff1 * 222, _0x348ff1 * 156, _0x348ff1 * 199, _0x348ff1 * 148);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 201, _0x348ff1 * 151, _0x348ff1 * 216, _0x348ff1 * 159, _0x348ff1 * 224, _0x348ff1 * 162);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 209, _0x348ff1 * 169.5, _0x348ff1 * 209, _0x348ff1 * 169.5, _0x348ff1 * 194, _0x348ff1 * 177);
  _0x3dde4d.bezierCurveTo(_0x348ff1 * 213.5, _0x348ff1 * 175, _0x348ff1 * 213.5, _0x348ff1 * 175, _0x348ff1 * 233, _0x348ff1 * 173);
  _0x3dde4d.closePath();
  fill_path(_0x3dde4d, _0x33f961);
  return _0x35743b;
}
function create_explorer_hat(_0x396cdd, _0x4c5ede, _0x468463) {
  var _0x1bc08b = document.createElement("canvas");
  var _0x520514 = _0x1bc08b.getContext("2d");
  _0x1bc08b.width = _0x396cdd * 187;
  _0x1bc08b.height = _0x396cdd * 119;
  _0x520514.globalAlpha = _0x4c5ede ? 0.5 : 1;
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.translate(0, 3);
  _0x520514.moveTo(_0x396cdd * 53, _0x396cdd * 45);
  _0x520514.bezierCurveTo(_0x396cdd * 3, _0x396cdd * 60, _0x396cdd * 11, _0x396cdd * 72, _0x396cdd * 19, _0x396cdd * 81);
  _0x520514.bezierCurveTo(_0x396cdd * 28, _0x396cdd * 82, _0x396cdd * 24, _0x396cdd * 81, _0x396cdd * 29, _0x396cdd * 82);
  _0x520514.bezierCurveTo(_0x396cdd * 26, _0x396cdd * 87, _0x396cdd * 28, _0x396cdd * 84, _0x396cdd * 28, _0x396cdd * 87);
  _0x520514.bezierCurveTo(_0x396cdd * 63, _0x396cdd * 101, _0x396cdd * 92, _0x396cdd * 100, _0x396cdd * 138, _0x396cdd * 93);
  _0x520514.bezierCurveTo(_0x396cdd * 172, _0x396cdd * 87, _0x396cdd * 180, _0x396cdd * 72, _0x396cdd * 168, _0x396cdd * 62);
  _0x520514.bezierCurveTo(_0x396cdd * 154, _0x396cdd * 51, _0x396cdd * 150, _0x396cdd * 50, _0x396cdd * 148, _0x396cdd * 49);
  _0x520514.bezierCurveTo(_0x396cdd * 132, _0x396cdd * 42, _0x396cdd * 90, _0x396cdd * 40, _0x396cdd * 55, _0x396cdd * 45);
  _0x520514.closePath();
  fill_path(_0x520514, _0x468463[5]);
  _0x520514.globalAlpha = 1;
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.translate(0, -3);
  _0x520514.moveTo(_0x396cdd * 53, _0x396cdd * 45);
  _0x520514.bezierCurveTo(_0x396cdd * 3, _0x396cdd * 60, _0x396cdd * 11, _0x396cdd * 72, _0x396cdd * 19, _0x396cdd * 81);
  _0x520514.bezierCurveTo(_0x396cdd * 28, _0x396cdd * 82, _0x396cdd * 24, _0x396cdd * 81, _0x396cdd * 29, _0x396cdd * 82);
  _0x520514.bezierCurveTo(_0x396cdd * 26, _0x396cdd * 87, _0x396cdd * 28, _0x396cdd * 84, _0x396cdd * 28, _0x396cdd * 87);
  _0x520514.bezierCurveTo(_0x396cdd * 63, _0x396cdd * 101, _0x396cdd * 92, _0x396cdd * 100, _0x396cdd * 138, _0x396cdd * 93);
  _0x520514.bezierCurveTo(_0x396cdd * 172, _0x396cdd * 87, _0x396cdd * 180, _0x396cdd * 72, _0x396cdd * 168, _0x396cdd * 62);
  _0x520514.bezierCurveTo(_0x396cdd * 154, _0x396cdd * 51, _0x396cdd * 150, _0x396cdd * 50, _0x396cdd * 148, _0x396cdd * 49);
  _0x520514.bezierCurveTo(_0x396cdd * 132, _0x396cdd * 42, _0x396cdd * 90, _0x396cdd * 40, _0x396cdd * 55, _0x396cdd * 45);
  _0x520514.closePath();
  fill_path(_0x520514, _0x468463[0], _0x468463[1], _0x396cdd * 4);
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.moveTo(_0x396cdd * 151, _0x396cdd * 60);
  _0x520514.bezierCurveTo(_0x396cdd * 140, _0x396cdd * 36, _0x396cdd * 137, _0x396cdd * 32, _0x396cdd * 124, _0x396cdd * 29);
  _0x520514.bezierCurveTo(_0x396cdd * 98, _0x396cdd * 22, _0x396cdd * 80, _0x396cdd * 24, _0x396cdd * 62, _0x396cdd * 28);
  _0x520514.bezierCurveTo(_0x396cdd * 42, _0x396cdd * 35, _0x396cdd * 38, _0x396cdd * 46, _0x396cdd * 34, _0x396cdd * 58);
  _0x520514.bezierCurveTo(_0x396cdd * 53, _0x396cdd * 74, _0x396cdd * 76, _0x396cdd * 76, _0x396cdd * 91, _0x396cdd * 78);
  _0x520514.closePath();
  fill_path(_0x520514, _0x468463[0], _0x468463[1], _0x396cdd * 4);
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.moveTo(_0x396cdd * 37, _0x396cdd * 53);
  _0x520514.bezierCurveTo(_0x396cdd * 30, _0x396cdd * 56, _0x396cdd * 29, _0x396cdd * 67, _0x396cdd * 30, _0x396cdd * 68);
  _0x520514.bezierCurveTo(_0x396cdd * 94, _0x396cdd * 108, _0x396cdd * 150, _0x396cdd * 76, _0x396cdd * 155, _0x396cdd * 70);
  _0x520514.bezierCurveTo(_0x396cdd * 154, _0x396cdd * 60, _0x396cdd * 151, _0x396cdd * 54, _0x396cdd * 149, _0x396cdd * 53);
  _0x520514.bezierCurveTo(_0x396cdd * 101, _0x396cdd * 74, _0x396cdd * 66, _0x396cdd * 66, _0x396cdd * 37, _0x396cdd * 53);
  _0x520514.closePath();
  fill_path(_0x520514, _0x468463[2], _0x468463[3], _0x396cdd * 4);
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.moveTo(_0x396cdd * 100, _0x396cdd * 36);
  _0x520514.bezierCurveTo(_0x396cdd * 92, _0x396cdd * 25, _0x396cdd * 86, _0x396cdd * 28, _0x396cdd * 82, _0x396cdd * 34);
  _0x520514.bezierCurveTo(_0x396cdd * 88, _0x396cdd * 40, _0x396cdd * 93, _0x396cdd * 40, _0x396cdd * 98, _0x396cdd * 36);
  _0x520514.closePath();
  fill_path(_0x520514, _0x468463[0], _0x468463[1], _0x396cdd * 4);
  _0x520514.beginPath();
  _0x520514.lineCap = "round";
  _0x520514.lineJoin = "round";
  _0x520514.moveTo(_0x396cdd * 80, _0x396cdd * 43);
  _0x520514.bezierCurveTo(_0x396cdd * 69, _0x396cdd * 46, _0x396cdd * 67, _0x396cdd * 52, _0x396cdd * 69, _0x396cdd * 58);
  fill_path(_0x520514, undefined, _0x468463[1], _0x396cdd * 4);
  circle(_0x520514, _0x396cdd * 58, _0x396cdd * 50, _0x396cdd * 5);
  fill_path(_0x520514, _0x468463[4]);
  circle(_0x520514, _0x396cdd * 43, _0x396cdd * 65, _0x396cdd * 5);
  fill_path(_0x520514, _0x468463[4]);
  circle(_0x520514, _0x396cdd * 58, _0x396cdd * 73, _0x396cdd * 5);
  fill_path(_0x520514, _0x468463[4]);
  circle(_0x520514, _0x396cdd * 58, _0x396cdd * 50, _0x396cdd * 2);
  fill_path(_0x520514, _0x468463[5]);
  circle(_0x520514, _0x396cdd * 43, _0x396cdd * 65, _0x396cdd * 2);
  fill_path(_0x520514, _0x468463[5]);
  circle(_0x520514, _0x396cdd * 58, _0x396cdd * 73, _0x396cdd * 2);
  fill_path(_0x520514, _0x468463[5]);
  return _0x1bc08b;
}
function create_wooden_helmet(_0x17d162, _0x10628, _0x5d8373) {
  var _0x433463 = document.createElement("canvas");
  var _0x2637af = _0x433463.getContext("2d");
  _0x433463.width = _0x17d162 * 180;
  _0x433463.height = _0x17d162 * 120;
  _0x2637af.translate(_0x17d162 * -65, _0x17d162 * -35);
  _0x2637af.globalAlpha = _0x10628 ? 0.5 : 1;
  _0x2637af.translate(0, _0x17d162 * 10);
  _0x2637af.save();
  _0x2637af.translate(_0x17d162 * 150.5, _0x17d162 * 63.84375);
  round_rect(_0x2637af, _0x17d162 * -67, _0x17d162 * -16.5, _0x17d162 * 134, _0x17d162 * 33, _0x17d162 * 5);
  _0x2637af.restore();
  fill_path(_0x2637af, _0x5d8373[0]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 80.5, _0x17d162 * 75.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 83, _0x17d162 * 106.34375, _0x17d162 * 83, _0x17d162 * 106.34375, _0x17d162 * 85.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 93, _0x17d162 * 135.84375, _0x17d162 * 93, _0x17d162 * 135.84375, _0x17d162 * 100.5, _0x17d162 * 134.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 99.5, _0x17d162 * 100.84375, _0x17d162 * 99.5, _0x17d162 * 100.84375, _0x17d162 * 98.5, _0x17d162 * 67.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[0]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 206.5, _0x17d162 * 71.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 203.5, _0x17d162 * 104.34375, _0x17d162 * 203.5, _0x17d162 * 104.34375, _0x17d162 * 200.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 208.5, _0x17d162 * 137.34375, _0x17d162 * 208.5, _0x17d162 * 137.34375, _0x17d162 * 216.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 219, _0x17d162 * 102.84375, _0x17d162 * 219, _0x17d162 * 102.84375, _0x17d162 * 221.5, _0x17d162 * 68.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[0]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 136.5, _0x17d162 * 75.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 139, _0x17d162 * 94.34375, _0x17d162 * 139, _0x17d162 * 94.34375, _0x17d162 * 141.5, _0x17d162 * 113.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 149.5, _0x17d162 * 115.34375, _0x17d162 * 149.5, _0x17d162 * 115.34375, _0x17d162 * 157.5, _0x17d162 * 117.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 162, _0x17d162 * 97.34375, _0x17d162 * 162, _0x17d162 * 97.34375, _0x17d162 * 166.5, _0x17d162 * 77.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[0]);
  _0x2637af.save();
  _0x2637af.translate(_0x17d162 * 152.5, _0x17d162 * 80.84375);
  _0x2637af.rotate(3.12);
  round_rect(_0x2637af, _0x17d162 * -73, _0x17d162 * -20.5, _0x17d162 * 146, _0x17d162 * 41, _0x17d162 * 5);
  _0x2637af.restore();
  fill_path(_0x2637af, _0x5d8373[0]);
  _0x2637af.globalAlpha = 1;
  _0x2637af.translate(0, _0x17d162 * -10);
  _0x2637af.save();
  _0x2637af.translate(_0x17d162 * 150.5, _0x17d162 * 63.84375);
  round_rect(_0x2637af, _0x17d162 * -67, _0x17d162 * -16.5, _0x17d162 * 134, _0x17d162 * 33, _0x17d162 * 5);
  _0x2637af.restore();
  fill_path(_0x2637af, _0x5d8373[1], _0x5d8373[2], _0x17d162 * 4);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 80.5, _0x17d162 * 75.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 83, _0x17d162 * 106.34375, _0x17d162 * 83, _0x17d162 * 106.34375, _0x17d162 * 85.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 93, _0x17d162 * 135.84375, _0x17d162 * 93, _0x17d162 * 135.84375, _0x17d162 * 100.5, _0x17d162 * 134.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 99.5, _0x17d162 * 100.84375, _0x17d162 * 99.5, _0x17d162 * 100.84375, _0x17d162 * 98.5, _0x17d162 * 67.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[1], _0x5d8373[2], _0x17d162 * 4);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 206.5, _0x17d162 * 71.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 203.5, _0x17d162 * 104.34375, _0x17d162 * 203.5, _0x17d162 * 104.34375, _0x17d162 * 200.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 208.5, _0x17d162 * 137.34375, _0x17d162 * 208.5, _0x17d162 * 137.34375, _0x17d162 * 216.5, _0x17d162 * 137.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 219, _0x17d162 * 102.84375, _0x17d162 * 219, _0x17d162 * 102.84375, _0x17d162 * 221.5, _0x17d162 * 68.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[1], _0x5d8373[2], _0x17d162 * 4);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 136.5, _0x17d162 * 75.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 139, _0x17d162 * 94.34375, _0x17d162 * 139, _0x17d162 * 94.34375, _0x17d162 * 141.5, _0x17d162 * 113.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 149.5, _0x17d162 * 115.34375, _0x17d162 * 149.5, _0x17d162 * 115.34375, _0x17d162 * 157.5, _0x17d162 * 117.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 162, _0x17d162 * 97.34375, _0x17d162 * 162, _0x17d162 * 97.34375, _0x17d162 * 166.5, _0x17d162 * 77.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[1], _0x5d8373[2], _0x17d162 * 4);
  _0x2637af.save();
  _0x2637af.translate(_0x17d162 * 152.5, _0x17d162 * 80.84375);
  _0x2637af.rotate(3.12);
  round_rect(_0x2637af, _0x17d162 * -73, _0x17d162 * -20.5, _0x17d162 * 146, _0x17d162 * 41, _0x17d162 * 5);
  _0x2637af.restore();
  fill_path(_0x2637af, _0x5d8373[1], _0x5d8373[2], _0x17d162 * 4);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 83.5, _0x17d162 * 73.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 93.5, _0x17d162 * 70.34375, _0x17d162 * 105.5, _0x17d162 * 70.34375, _0x17d162 * 124.5, _0x17d162 * 72.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 132.5, _0x17d162 * 78.34375, _0x17d162 * 162.5, _0x17d162 * 80.34375, _0x17d162 * 176.5, _0x17d162 * 76.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 194.5, _0x17d162 * 69.34375, _0x17d162 * 192.5, _0x17d162 * 68.34375, _0x17d162 * 199.5, _0x17d162 * 63.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 204.5, _0x17d162 * 63.34375, _0x17d162 * 204.5, _0x17d162 * 63.34375, _0x17d162 * 209.5, _0x17d162 * 63.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 153.5, _0x17d162 * 82.34375, _0x17d162 * 157.5, _0x17d162 * 85.34375, _0x17d162 * 209.5, _0x17d162 * 63.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 194.5, _0x17d162 * 88.34375, _0x17d162 * 162.5, _0x17d162 * 87.34375, _0x17d162 * 149.5, _0x17d162 * 88.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 129.5, _0x17d162 * 81.34375, _0x17d162 * 103.5, _0x17d162 * 75.34375, _0x17d162 * 83.5, _0x17d162 * 82.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 137.5, _0x17d162 * 65.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 150.5, _0x17d162 * 76.34375, _0x17d162 * 170.5, _0x17d162 * 71.34375, _0x17d162 * 174.5, _0x17d162 * 65.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 221.5, _0x17d162 * 85.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 211.5, _0x17d162 * 79.34375, _0x17d162 * 191.5, _0x17d162 * 88.34375, _0x17d162 * 181.5, _0x17d162 * 96.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 201.5, _0x17d162 * 96.34375, _0x17d162 * 201.5, _0x17d162 * 96.34375, _0x17d162 * 221.5, _0x17d162 * 96.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 84.5, _0x17d162 * 89.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 102.5, _0x17d162 * 87.34375, _0x17d162 * 112.5, _0x17d162 * 88.34375, _0x17d162 * 119.5, _0x17d162 * 97.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 102, _0x17d162 * 98.34375, _0x17d162 * 102, _0x17d162 * 98.34375, _0x17d162 * 84.5, _0x17d162 * 99.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 208.5, _0x17d162 * 104.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 208.5, _0x17d162 * 110.34375, _0x17d162 * 208.5, _0x17d162 * 110.34375, _0x17d162 * 208.5, _0x17d162 * 116.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 211.5, _0x17d162 * 110.34375, _0x17d162 * 211.5, _0x17d162 * 110.34375, _0x17d162 * 214.5, _0x17d162 * 104.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 87.5, _0x17d162 * 117.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 92, _0x17d162 * 118.84375, _0x17d162 * 92, _0x17d162 * 118.84375, _0x17d162 * 96.5, _0x17d162 * 120.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 93, _0x17d162 * 123.84375, _0x17d162 * 93, _0x17d162 * 123.84375, _0x17d162 * 89.5, _0x17d162 * 127.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 107.5, _0x17d162 * 51.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 122.5, _0x17d162 * 54.34375, _0x17d162 * 122.5, _0x17d162 * 54.34375, _0x17d162 * 137.5, _0x17d162 * 57.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 118, _0x17d162 * 57.34375, _0x17d162 * 118, _0x17d162 * 57.34375, _0x17d162 * 98.5, _0x17d162 * 57.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 94.5, _0x17d162 * 54.84375, _0x17d162 * 94.5, _0x17d162 * 54.84375, _0x17d162 * 90.5, _0x17d162 * 52.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 170.5, _0x17d162 * 52.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 179.5, _0x17d162 * 51.84375, _0x17d162 * 179.5, _0x17d162 * 51.84375, _0x17d162 * 188.5, _0x17d162 * 51.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 187.5, _0x17d162 * 53.84375, _0x17d162 * 187.5, _0x17d162 * 53.84375, _0x17d162 * 186.5, _0x17d162 * 56.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 177, _0x17d162 * 56.34375, _0x17d162 * 177, _0x17d162 * 56.34375, _0x17d162 * 167.5, _0x17d162 * 56.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[3]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 80.5, _0x17d162 * 69.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 86.5, _0x17d162 * 70.34375, _0x17d162 * 86.5, _0x17d162 * 70.34375, _0x17d162 * 92.5, _0x17d162 * 71.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 86, _0x17d162 * 73.34375, _0x17d162 * 86, _0x17d162 * 73.34375, _0x17d162 * 79.5, _0x17d162 * 75.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 222.5, _0x17d162 * 75.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 214.5, _0x17d162 * 76.34375, _0x17d162 * 214.5, _0x17d162 * 76.34375, _0x17d162 * 206.5, _0x17d162 * 77.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 216.5, _0x17d162 * 79.34375, _0x17d162 * 216.5, _0x17d162 * 79.34375, _0x17d162 * 226.5, _0x17d162 * 81.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 116.5, _0x17d162 * 100.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 128, _0x17d162 * 97.34375, _0x17d162 * 128, _0x17d162 * 97.34375, _0x17d162 * 139.5, _0x17d162 * 94.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 140, _0x17d162 * 96.84375, _0x17d162 * 140, _0x17d162 * 96.84375, _0x17d162 * 140.5, _0x17d162 * 99.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 112.5, _0x17d162 * 48.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 115.5, _0x17d162 * 50.84375, _0x17d162 * 115.5, _0x17d162 * 50.84375, _0x17d162 * 118.5, _0x17d162 * 53.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 131, _0x17d162 * 50.84375, _0x17d162 * 131, _0x17d162 * 50.84375, _0x17d162 * 143.5, _0x17d162 * 48.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 216.5, _0x17d162 * 109.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 213, _0x17d162 * 114.84375, _0x17d162 * 213, _0x17d162 * 114.84375, _0x17d162 * 209.5, _0x17d162 * 120.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 212, _0x17d162 * 118.84375, _0x17d162 * 212, _0x17d162 * 118.84375, _0x17d162 * 214.5, _0x17d162 * 117.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  _0x2637af.beginPath();
  _0x2637af.lineCap = "round";
  _0x2637af.lineJoin = "round";
  _0x2637af.moveTo(_0x17d162 * 86.5, _0x17d162 * 133.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 89, _0x17d162 * 127.34375, _0x17d162 * 89, _0x17d162 * 127.34375, _0x17d162 * 91.5, _0x17d162 * 121.34375);
  _0x2637af.bezierCurveTo(_0x17d162 * 92.5, _0x17d162 * 127.34375, _0x17d162 * 92.5, _0x17d162 * 127.34375, _0x17d162 * 93.5, _0x17d162 * 133.34375);
  _0x2637af.closePath();
  fill_path(_0x2637af, _0x5d8373[2]);
  return _0x433463;
}
function create_viking_hat(_0x568d9a, _0x5de2b8, _0x359f01) {
  var _0x448b54 = document.createElement("canvas");
  var _0x58d21f = _0x448b54.getContext("2d");
  _0x448b54.width = _0x568d9a * 175;
  _0x448b54.height = _0x568d9a * 106;
  _0x58d21f.globalAlpha = _0x5de2b8 ? 0.5 : 1;
  _0x58d21f.translate(0, _0x568d9a * 8);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 28, _0x568d9a * 67);
  _0x58d21f.bezierCurveTo(_0x568d9a * 55, _0x568d9a * 80, _0x568d9a * 126, _0x568d9a * 74, _0x568d9a * 144, _0x568d9a * 68);
  _0x58d21f.bezierCurveTo(_0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 145, _0x568d9a * 82);
  _0x58d21f.bezierCurveTo(_0x568d9a * 114, _0x568d9a * 94, _0x568d9a * 47, _0x568d9a * 91, _0x568d9a * 28, _0x568d9a * 82);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[0]);
  _0x58d21f.globalAlpha = 1;
  _0x58d21f.translate(0, _0x568d9a * -8);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 145, _0x568d9a * 75);
  _0x58d21f.bezierCurveTo(_0x568d9a * 143, _0x568d9a * 51, _0x568d9a * 133, _0x568d9a * 29, _0x568d9a * 100, _0x568d9a * 27);
  _0x58d21f.bezierCurveTo(_0x568d9a * 52, _0x568d9a * 21, _0x568d9a * 37, _0x568d9a * 37, _0x568d9a * 31, _0x568d9a * 54);
  _0x58d21f.bezierCurveTo(_0x568d9a * 23, _0x568d9a * 78, _0x568d9a * 28, _0x568d9a * 77, _0x568d9a * 36, _0x568d9a * 79);
  _0x58d21f.bezierCurveTo(_0x568d9a * 80, _0x568d9a * 87, _0x568d9a * 120, _0x568d9a * 81, _0x568d9a * 145, _0x568d9a * 76);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[1]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 38, _0x568d9a * 46);
  _0x58d21f.bezierCurveTo(_0x568d9a * 52, _0x568d9a * 37, _0x568d9a * 69, _0x568d9a * 36, _0x568d9a * 85, _0x568d9a * 36);
  _0x58d21f.bezierCurveTo(_0x568d9a * 118, _0x568d9a * 38, _0x568d9a * 129, _0x568d9a * 42, _0x568d9a * 137, _0x568d9a * 48);
  _0x58d21f.bezierCurveTo(_0x568d9a * 135, _0x568d9a * 45, _0x568d9a * 135, _0x568d9a * 45, _0x568d9a * 133, _0x568d9a * 42);
  _0x58d21f.bezierCurveTo(_0x568d9a * 124, _0x568d9a * 32, _0x568d9a * 116, _0x568d9a * 28, _0x568d9a * 88, _0x568d9a * 25);
  _0x58d21f.bezierCurveTo(_0x568d9a * 47, _0x568d9a * 28, _0x568d9a * 40, _0x568d9a * 32, _0x568d9a * 36, _0x568d9a * 44);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[5]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 145, _0x568d9a * 75);
  _0x58d21f.bezierCurveTo(_0x568d9a * 143, _0x568d9a * 51, _0x568d9a * 133, _0x568d9a * 29, _0x568d9a * 100, _0x568d9a * 27);
  _0x58d21f.bezierCurveTo(_0x568d9a * 52, _0x568d9a * 21, _0x568d9a * 37, _0x568d9a * 37, _0x568d9a * 31, _0x568d9a * 54);
  _0x58d21f.bezierCurveTo(_0x568d9a * 23, _0x568d9a * 78, _0x568d9a * 28, _0x568d9a * 77, _0x568d9a * 36, _0x568d9a * 79);
  _0x58d21f.bezierCurveTo(_0x568d9a * 80, _0x568d9a * 87, _0x568d9a * 120, _0x568d9a * 81, _0x568d9a * 145, _0x568d9a * 76);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, undefined, _0x359f01[2], _0x568d9a * 4);
  _0x58d21f.translate(0, _0x568d9a * -3);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 28, _0x568d9a * 67);
  _0x58d21f.bezierCurveTo(_0x568d9a * 55, _0x568d9a * 80, _0x568d9a * 126, _0x568d9a * 74, _0x568d9a * 144, _0x568d9a * 68);
  _0x58d21f.bezierCurveTo(_0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 145, _0x568d9a * 82);
  _0x58d21f.bezierCurveTo(_0x568d9a * 114, _0x568d9a * 94, _0x568d9a * 47, _0x568d9a * 91, _0x568d9a * 28, _0x568d9a * 82);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[10], _0x359f01[10], _0x568d9a * 4);
  _0x58d21f.translate(0, _0x568d9a * 3);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 131, _0x568d9a * 43);
  _0x58d21f.bezierCurveTo(_0x568d9a * 145, _0x568d9a * 40, _0x568d9a * 148, _0x568d9a * 32, _0x568d9a * 147, _0x568d9a * 17);
  _0x58d21f.bezierCurveTo(_0x568d9a * 166, _0x568d9a * 39, _0x568d9a * 155, _0x568d9a * 62, _0x568d9a * 140, _0x568d9a * 67);
  _0x58d21f.bezierCurveTo(_0x568d9a * 128, _0x568d9a * 65, _0x568d9a * 128, _0x568d9a * 52, _0x568d9a * 131, _0x568d9a * 45);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[3]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 41, _0x568d9a * 43);
  _0x58d21f.bezierCurveTo(_0x568d9a * 30, _0x568d9a * 42, _0x568d9a * 24, _0x568d9a * 33, _0x568d9a * 25, _0x568d9a * 17);
  _0x58d21f.bezierCurveTo(_0x568d9a * 7, _0x568d9a * 34, _0x568d9a * 17, _0x568d9a * 63, _0x568d9a * 33, _0x568d9a * 66);
  _0x58d21f.bezierCurveTo(_0x568d9a * 45, _0x568d9a * 59, _0x568d9a * 44, _0x568d9a * 53, _0x568d9a * 42, _0x568d9a * 44);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[3]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 24, _0x568d9a * 19);
  _0x58d21f.bezierCurveTo(_0x568d9a * 24, _0x568d9a * 35, _0x568d9a * 35, _0x568d9a * 42, _0x568d9a * 42, _0x568d9a * 44);
  _0x58d21f.bezierCurveTo(_0x568d9a * 43, _0x568d9a * 51, _0x568d9a * 43, _0x568d9a * 48, _0x568d9a * 43, _0x568d9a * 56);
  _0x58d21f.bezierCurveTo(_0x568d9a * 25, _0x568d9a * 47, _0x568d9a * 17, _0x568d9a * 36, _0x568d9a * 23, _0x568d9a * 20);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[6]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 148, _0x568d9a * 18);
  _0x58d21f.bezierCurveTo(_0x568d9a * 159, _0x568d9a * 44, _0x568d9a * 139, _0x568d9a * 52, _0x568d9a * 130, _0x568d9a * 55);
  _0x58d21f.bezierCurveTo(_0x568d9a * 129, _0x568d9a * 48, _0x568d9a * 129, _0x568d9a * 46, _0x568d9a * 131, _0x568d9a * 43);
  _0x58d21f.bezierCurveTo(_0x568d9a * 144, _0x568d9a * 37, _0x568d9a * 148, _0x568d9a * 35, _0x568d9a * 147, _0x568d9a * 18);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[6]);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 131, _0x568d9a * 43);
  _0x58d21f.bezierCurveTo(_0x568d9a * 145, _0x568d9a * 40, _0x568d9a * 148, _0x568d9a * 32, _0x568d9a * 147, _0x568d9a * 17);
  _0x58d21f.bezierCurveTo(_0x568d9a * 166, _0x568d9a * 39, _0x568d9a * 155, _0x568d9a * 62, _0x568d9a * 140, _0x568d9a * 67);
  _0x58d21f.bezierCurveTo(_0x568d9a * 128, _0x568d9a * 65, _0x568d9a * 128, _0x568d9a * 52, _0x568d9a * 131, _0x568d9a * 45);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, undefined, _0x359f01[4], _0x568d9a * 4);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 41, _0x568d9a * 43);
  _0x58d21f.bezierCurveTo(_0x568d9a * 30, _0x568d9a * 42, _0x568d9a * 24, _0x568d9a * 33, _0x568d9a * 25, _0x568d9a * 17);
  _0x58d21f.bezierCurveTo(_0x568d9a * 7, _0x568d9a * 34, _0x568d9a * 17, _0x568d9a * 63, _0x568d9a * 33, _0x568d9a * 66);
  _0x58d21f.bezierCurveTo(_0x568d9a * 45, _0x568d9a * 59, _0x568d9a * 44, _0x568d9a * 53, _0x568d9a * 42, _0x568d9a * 44);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, undefined, _0x359f01[4], _0x568d9a * 4);
  _0x58d21f.save();
  _0x58d21f.translate(_0x568d9a * 87, _0x568d9a * 34.5);
  _0x58d21f.rotate(0);
  round_rect(_0x58d21f, _0x568d9a * -8, _0x568d9a * -10.5, _0x568d9a * 16, _0x568d9a * 21, _0x568d9a * 10);
  _0x58d21f.restore();
  fill_path(_0x58d21f, _0x359f01[7], _0x359f01[2], _0x568d9a * 4);
  _0x58d21f.save();
  _0x58d21f.translate(_0x568d9a * 87, _0x568d9a * 57);
  _0x58d21f.rotate(0);
  round_rect(_0x58d21f, _0x568d9a * -8, _0x568d9a * -23, _0x568d9a * 16, _0x568d9a * 46, _0x568d9a * 10);
  _0x58d21f.restore();
  fill_path(_0x58d21f, _0x359f01[8], _0x359f01[2], _0x568d9a * 4);
  circle(_0x58d21f, _0x568d9a * 87, _0x568d9a * 39, _0x568d9a * 4.123105625617661);
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  circle(_0x58d21f, _0x568d9a * 87, _0x568d9a * 60, _0x568d9a * 4.242640687119285);
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 28, _0x568d9a * 67);
  _0x58d21f.bezierCurveTo(_0x568d9a * 55, _0x568d9a * 80, _0x568d9a * 126, _0x568d9a * 74, _0x568d9a * 144, _0x568d9a * 68);
  _0x58d21f.bezierCurveTo(_0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 144.5, _0x568d9a * 75, _0x568d9a * 145, _0x568d9a * 82);
  _0x58d21f.bezierCurveTo(_0x568d9a * 114, _0x568d9a * 94, _0x568d9a * 47, _0x568d9a * 91, _0x568d9a * 28, _0x568d9a * 82);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[8], _0x359f01[2], _0x568d9a * 4);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 27, _0x568d9a * 69);
  _0x58d21f.bezierCurveTo(_0x568d9a * 13, _0x568d9a * 77, _0x568d9a * 16, _0x568d9a * 74, _0x568d9a * 27, _0x568d9a * 80);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  _0x58d21f.beginPath();
  _0x58d21f.lineCap = "round";
  _0x58d21f.lineJoin = "round";
  _0x58d21f.moveTo(_0x568d9a * 145, _0x568d9a * 70);
  _0x58d21f.bezierCurveTo(_0x568d9a * 149.5, _0x568d9a * 72, _0x568d9a * 149.5, _0x568d9a * 72, _0x568d9a * 154, _0x568d9a * 74);
  _0x58d21f.bezierCurveTo(_0x568d9a * 150, _0x568d9a * 77, _0x568d9a * 150, _0x568d9a * 77, _0x568d9a * 146, _0x568d9a * 80);
  _0x58d21f.closePath();
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  circle(_0x58d21f, _0x568d9a * 50, _0x568d9a * 80, _0x568d9a * 5);
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  circle(_0x58d21f, _0x568d9a * 86.01141357421875, _0x568d9a * 81.76705932617188, _0x568d9a * 5);
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  circle(_0x58d21f, _0x568d9a * 119.01141357421875, _0x568d9a * 80.13069152832031, _0x568d9a * 5);
  fill_path(_0x58d21f, _0x359f01[9], _0x359f01[2], _0x568d9a * 4);
  return _0x448b54;
}
function create_gold_helmet(_0x4c0438, _0x364be2, _0x578bc2) {
  var _0xe88f50 = document.createElement("canvas");
  var _0xd60b13 = _0xe88f50.getContext("2d");
  _0xe88f50.width = _0x4c0438 * 142;
  _0xe88f50.height = _0x4c0438 * 118;
  _0xd60b13.save();
  _0xd60b13.translate(_0x4c0438 * 70.16665649414062, _0x4c0438 * 38.20831298828125);
  round_rect(_0xd60b13, _0x4c0438 * -58.5, _0x4c0438 * -27.5, _0x4c0438 * 117, _0x4c0438 * 55, _0x4c0438 * 20);
  _0xd60b13.restore();
  fill_path(_0xd60b13, _0x578bc2[0], _0x578bc2[1], _0x4c0438 * 4);
  _0xd60b13.save();
  _0xd60b13.translate(_0x4c0438 * 70, _0x4c0438 * 42.70831298828125);
  round_rect(_0xd60b13, _0x4c0438 * -61, _0x4c0438 * -20, _0x4c0438 * 122, _0x4c0438 * 40, _0x4c0438 * 20);
  _0xd60b13.restore();
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  _0xd60b13.beginPath();
  _0xd60b13.lineCap = "round";
  _0xd60b13.lineJoin = "round";
  _0xd60b13.moveTo(_0x4c0438 * 123, _0x4c0438 * 70.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 115, _0x4c0438 * 99.375, _0x4c0438 * 119, _0x4c0438 * 85.375, _0x4c0438 * 115, _0x4c0438 * 100.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 112, _0x4c0438 * 116.375, _0x4c0438 * 117, _0x4c0438 * 109.375, _0x4c0438 * 131, _0x4c0438 * 100.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 131, _0x4c0438 * 83.375, _0x4c0438 * 131, _0x4c0438 * 83.375, _0x4c0438 * 131, _0x4c0438 * 66.375);
  _0xd60b13.closePath();
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  _0xd60b13.beginPath();
  _0xd60b13.lineCap = "round";
  _0xd60b13.lineJoin = "round";
  _0xd60b13.moveTo(_0x4c0438 * 11, _0x4c0438 * 68.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 11.166656494140625, _0x4c0438 * 84.375, _0x4c0438 * 9, _0x4c0438 * 99.375, _0x4c0438 * 10, _0x4c0438 * 100.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 35, _0x4c0438 * 113.375, _0x4c0438 * 27, _0x4c0438 * 110.375, _0x4c0438 * 25, _0x4c0438 * 95.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 16, _0x4c0438 * 68.375, _0x4c0438 * 17, _0x4c0438 * 69.375, _0x4c0438 * 17, _0x4c0438 * 68.375);
  _0xd60b13.closePath();
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  _0xd60b13.beginPath();
  _0xd60b13.lineCap = "round";
  _0xd60b13.lineJoin = "round";
  _0xd60b13.moveTo(_0x4c0438 * 46, _0x4c0438 * 32.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 43, _0x4c0438 * 8.375, _0x4c0438 * 45, _0x4c0438 * 7.375, _0x4c0438 * 56, _0x4c0438 * 6.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 105, _0x4c0438 * 4.375, _0x4c0438 * 102, _0x4c0438 * 6.375, _0x4c0438 * 97, _0x4c0438 * 32.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 138, _0x4c0438 * 43.375, _0x4c0438 * 133, _0x4c0438 * 45.375, _0x4c0438 * 133, _0x4c0438 * 58.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 133, _0x4c0438 * 85.375, _0x4c0438 * 125, _0x4c0438 * 74.375, _0x4c0438 * 111, _0x4c0438 * 70.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 70, _0x4c0438 * 69.875, _0x4c0438 * 29, _0x4c0438 * 69.375, _0x4c0438 * 29, _0x4c0438 * 69.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 7, _0x4c0438 * 84.375, _0x4c0438 * 7, _0x4c0438 * 70.375, _0x4c0438 * 7, _0x4c0438 * 59.375);
  _0xd60b13.bezierCurveTo(_0x4c0438 * 6, _0x4c0438 * 28.375, _0x4c0438 * 32, _0x4c0438 * 39.375, _0x4c0438 * 44, _0x4c0438 * 32.375);
  _0xd60b13.closePath();
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  circle(_0xd60b13, _0x4c0438 * 71, _0x4c0438 * 44.375, _0x4c0438 * 16.55294535724685);
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  circle(_0xd60b13, _0x4c0438 * 71, _0x4c0438 * 43.70831298828125, _0x4c0438 * 8.94427190999916);
  fill_path(_0xd60b13, _0x578bc2[2], _0x578bc2[1], _0x4c0438 * 4);
  return _0xe88f50;
}
function create_diamond_helmet(_0x455882, _0x363848, _0x4c2e0b) {
  var _0x4195ff = document.createElement("canvas");
  var _0x3b2852 = _0x4195ff.getContext("2d");
  _0x4195ff.width = _0x455882 * 142;
  _0x4195ff.height = _0x455882 * 118;
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 111, _0x455882 * 27.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 128, _0x455882 * 9.3671875, _0x455882 * 125, _0x455882 * 13.3671875, _0x455882 * 126, _0x455882 * 21.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 126, _0x455882 * 33.3671875, _0x455882 * 119, _0x455882 * 43.3671875, _0x455882 * 118, _0x455882 * 42.3671875);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 31, _0x455882 * 23.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 17, _0x455882 * 15.3671875, _0x455882 * 16, _0x455882 * 14.3671875, _0x455882 * 17, _0x455882 * 20.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 22, _0x455882 * 33.3671875, _0x455882 * 20, _0x455882 * 27.3671875, _0x455882 * 24, _0x455882 * 34.3671875);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.save();
  _0x3b2852.translate(_0x455882 * 70.5, _0x455882 * 34.8671875);
  _0x3b2852.rotate(0);
  round_rect(_0x3b2852, _0x455882 * -49.5, _0x455882 * -21.5, _0x455882 * 99, _0x455882 * 43, _0x455882 * 15);
  _0x3b2852.restore();
  fill_path(_0x3b2852, _0x4c2e0b[0], _0x4c2e0b[1], _0x455882 * 4);
  _0x3b2852.save();
  _0x3b2852.translate(_0x455882 * 71, _0x455882 * 40.8671875);
  _0x3b2852.rotate(0);
  round_rect(_0x3b2852, _0x455882 * -49, _0x455882 * -12.5, _0x455882 * 98, _0x455882 * 25, _0x455882 * 15);
  _0x3b2852.restore();
  fill_path(_0x3b2852, _0x4c2e0b[2], _0x4c2e0b[1], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 19.800003051757812, _0x455882 * 75.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 19.300003051757812, _0x455882 * 82.95625305175781, _0x455882 * 19.300003051757812, _0x455882 * 82.95625305175781, _0x455882 * 18.800003051757812, _0x455882 * 89.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 38.80000305175781, _0x455882 * 115.95625305175781, _0x455882 * 37.80000305175781, _0x455882 * 104.95625305175781, _0x455882 * 31.800003051757812, _0x455882 * 91.95625305175781);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[2], _0x4c2e0b[1], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 119.80000305175781, _0x455882 * 75.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 120.80000305175781, _0x455882 * 82.95625305175781, _0x455882 * 120.80000305175781, _0x455882 * 82.95625305175781, _0x455882 * 121.80000305175781, _0x455882 * 89.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 101.80000305175781, _0x455882 * 111.95625305175781, _0x455882 * 99.80000305175781, _0x455882 * 111.95625305175781, _0x455882 * 112.80000305175781, _0x455882 * 81.95625305175781);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[2], _0x4c2e0b[1], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 17.800003051757812, _0x455882 * 49.15625);
  _0x3b2852.bezierCurveTo(_0x455882 * 17.800003051757812, _0x455882 * 64.15625, _0x455882 * 17.800003051757812, _0x455882 * 64.15625, _0x455882 * 17.800003051757812, _0x455882 * 79.15625);
  _0x3b2852.bezierCurveTo(_0x455882 * 23.300003051757812, _0x455882 * 85.15625, _0x455882 * 23.300003051757812, _0x455882 * 85.15625, _0x455882 * 28.800003051757812, _0x455882 * 91.15625);
  _0x3b2852.bezierCurveTo(_0x455882 * 36.80000305175781, _0x455882 * 96.15625, _0x455882 * 32.80000305175781, _0x455882 * 91.15625, _0x455882 * 28.800003051757812, _0x455882 * 77.15625);
  _0x3b2852.bezierCurveTo(_0x455882 * 33.80000305175781, _0x455882 * 65.15625, _0x455882 * 33.80000305175781, _0x455882 * 65.15625, _0x455882 * 38.80000305175781, _0x455882 * 53.15625);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 123.80000305175781, _0x455882 * 53.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 121.80000305175781, _0x455882 * 77.95625305175781, _0x455882 * 121.80000305175781, _0x455882 * 74.95625305175781, _0x455882 * 121.80000305175781, _0x455882 * 78.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 115.80000305175781, _0x455882 * 84.95625305175781, _0x455882 * 115.80000305175781, _0x455882 * 84.95625305175781, _0x455882 * 109.80000305175781, _0x455882 * 90.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 102.80000305175781, _0x455882 * 93.95625305175781, _0x455882 * 105.80000305175781, _0x455882 * 86.95625305175781, _0x455882 * 110.80000305175781, _0x455882 * 76.95625305175781);
  _0x3b2852.bezierCurveTo(_0x455882 * 107.30000305175781, _0x455882 * 65.45625305175781, _0x455882 * 103.80000305175781, _0x455882 * 53.95625305175781, _0x455882 * 103.80000305175781, _0x455882 * 53.95625305175781);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.beginPath();
  _0x3b2852.lineCap = "round";
  _0x3b2852.lineJoin = "round";
  _0x3b2852.moveTo(_0x455882 * 18, _0x455882 * 56.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 70, _0x455882 * 56.8671875, _0x455882 * 70, _0x455882 * 56.8671875, _0x455882 * 122, _0x455882 * 57.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 137, _0x455882 * 20.3671875, _0x455882 * 137, _0x455882 * 16.3671875, _0x455882 * 126, _0x455882 * 22.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 115.5, _0x455882 * 34.3671875, _0x455882 * 115.5, _0x455882 * 34.3671875, _0x455882 * 105, _0x455882 * 46.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 70.5, _0x455882 * 46.3671875, _0x455882 * 70.5, _0x455882 * 46.3671875, _0x455882 * 36, _0x455882 * 46.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 4, _0x455882 * 14.3671875, _0x455882 * 7, _0x455882 * 18.3671875, _0x455882 * 8, _0x455882 * 27.3671875);
  _0x3b2852.bezierCurveTo(_0x455882 * 12.5, _0x455882 * 41.8671875, _0x455882 * 12.5, _0x455882 * 41.8671875, _0x455882 * 17, _0x455882 * 56.3671875);
  _0x3b2852.closePath();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.save();
  _0x3b2852.translate(_0x455882 * 68.30000305175781, _0x455882 * 41.45625305175781);
  _0x3b2852.rotate(0.76);
  round_rect(_0x3b2852, _0x455882 * -20.5, _0x455882 * -20.5, _0x455882 * 41, _0x455882 * 41, _0x455882 * 10);
  _0x3b2852.restore();
  fill_path(_0x3b2852, undefined, _0x4c2e0b[5], _0x455882 * 4);
  _0x3b2852.save();
  _0x3b2852.translate(_0x455882 * 68.80000305175781, _0x455882 * 44.45625305175781);
  _0x3b2852.rotate(0.76);
  round_rect(_0x3b2852, _0x455882 * -21, _0x455882 * -20.5, _0x455882 * 42, _0x455882 * 41, _0x455882 * 10);
  _0x3b2852.restore();
  fill_path(_0x3b2852, _0x4c2e0b[3], _0x4c2e0b[4], _0x455882 * 4);
  _0x3b2852.save();
  _0x3b2852.translate(_0x455882 * 69.80000305175781, _0x455882 * 44.556243896484375);
  _0x3b2852.rotate(0.76);
  round_rect(_0x3b2852, _0x455882 * -10, _0x455882 * -10, _0x455882 * 20, _0x455882 * 20, _0x455882 * 5);
  _0x3b2852.restore();
  fill_path(_0x3b2852, _0x4c2e0b[6], _0x4c2e0b[7], _0x455882 * 4);
  return _0x4195ff;
}
function create_amethyst_helmet(_0xb96766, _0x381bb1, _0x47b7e4) {
  var _0x5ee91b = document.createElement("canvas");
  var _0x57f94b = _0x5ee91b.getContext("2d");
  _0x5ee91b.width = _0xb96766 * 145;
  _0x5ee91b.height = _0xb96766 * 120;
  _0x57f94b.beginPath();
  _0x57f94b.scale(0.6, 0.6);
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.translate(_0xb96766 * 18, _0xb96766 * -8);
  _0x57f94b.moveTo(_0xb96766 * 101, _0xb96766 * 72);
  _0x57f94b.bezierCurveTo(_0xb96766 * 144, _0xb96766 * 69, _0xb96766 * 149, _0xb96766 * 58, _0xb96766 * 162, _0xb96766 * 49);
  _0x57f94b.bezierCurveTo(_0xb96766 * 174, _0xb96766 * 31, _0xb96766 * 173, _0xb96766 * 38, _0xb96766 * 172, _0xb96766 * 45);
  _0x57f94b.bezierCurveTo(_0xb96766 * 168, _0xb96766 * 73, _0xb96766 * 158, _0xb96766 * 75, _0xb96766 * 152, _0xb96766 * 78);
  _0x57f94b.bezierCurveTo(_0xb96766 * 106, _0xb96766 * 89, _0xb96766 * 107, _0xb96766 * 91, _0xb96766 * 107, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 107, _0xb96766 * 100, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 99, _0xb96766 * 112, _0xb96766 * 98, _0xb96766 * 110, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 94, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 92, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 92, _0xb96766 * 89, _0xb96766 * 90, _0xb96766 * 90, _0xb96766 * 73, _0xb96766 * 86);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 81, _0xb96766 * 40, _0xb96766 * 77, _0xb96766 * 35, _0xb96766 * 68);
  _0x57f94b.bezierCurveTo(_0xb96766 * 23, _0xb96766 * 36, _0xb96766 * 28, _0xb96766 * 34, _0xb96766 * 36, _0xb96766 * 46);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 58, _0xb96766 * 83, _0xb96766 * 72, _0xb96766 * 98, _0xb96766 * 72);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[4], _0x47b7e4[5], _0xb96766 * 4);
  _0x57f94b.beginPath();
  _0x57f94b.scale(1.1, 1.1);
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.translate(_0xb96766 * -9, _0xb96766 * 4);
  _0x57f94b.moveTo(_0xb96766 * 101, _0xb96766 * 72);
  _0x57f94b.bezierCurveTo(_0xb96766 * 144, _0xb96766 * 69, _0xb96766 * 149, _0xb96766 * 58, _0xb96766 * 162, _0xb96766 * 49);
  _0x57f94b.bezierCurveTo(_0xb96766 * 174, _0xb96766 * 31, _0xb96766 * 173, _0xb96766 * 38, _0xb96766 * 172, _0xb96766 * 45);
  _0x57f94b.bezierCurveTo(_0xb96766 * 168, _0xb96766 * 73, _0xb96766 * 158, _0xb96766 * 75, _0xb96766 * 152, _0xb96766 * 78);
  _0x57f94b.bezierCurveTo(_0xb96766 * 106, _0xb96766 * 89, _0xb96766 * 107, _0xb96766 * 91, _0xb96766 * 107, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 107, _0xb96766 * 100, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 99, _0xb96766 * 112, _0xb96766 * 98, _0xb96766 * 110, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 94, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 92, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 92, _0xb96766 * 89, _0xb96766 * 90, _0xb96766 * 90, _0xb96766 * 73, _0xb96766 * 86);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 81, _0xb96766 * 40, _0xb96766 * 77, _0xb96766 * 35, _0xb96766 * 68);
  _0x57f94b.bezierCurveTo(_0xb96766 * 23, _0xb96766 * 36, _0xb96766 * 28, _0xb96766 * 34, _0xb96766 * 36, _0xb96766 * 46);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 58, _0xb96766 * 83, _0xb96766 * 72, _0xb96766 * 98, _0xb96766 * 72);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[4], _0x47b7e4[5], _0xb96766 * 4);
  _0x57f94b.scale(1.1, 1.1);
  _0x57f94b.translate(_0xb96766 * -9, _0xb96766 * 4);
  _0x57f94b.save();
  _0x57f94b.translate(_0xb96766 * 100, _0xb96766 * 73.06874084472656);
  _0x57f94b.rotate(0);
  round_rect(_0x57f94b, _0xb96766 * -61, _0xb96766 * -38.5, _0xb96766 * 122, _0xb96766 * 40, _0xb96766 * 20);
  _0x57f94b.restore();
  fill_path(_0x57f94b, _0x47b7e4[1], _0x47b7e4[2], _0xb96766 * 4);
  _0x57f94b.save();
  _0x57f94b.translate(_0xb96766 * 100, _0xb96766 * 71.36874389648438);
  _0x57f94b.rotate(0);
  round_rect(_0x57f94b, _0xb96766 * -60.5, _0xb96766 * -18, _0xb96766 * 121, _0xb96766 * 30, _0xb96766 * 20);
  _0x57f94b.restore();
  fill_path(_0x57f94b, _0x47b7e4[3], _0x47b7e4[2], _0xb96766 * 4);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 144, _0xb96766 * 80);
  _0x57f94b.bezierCurveTo(_0xb96766 * 152, _0xb96766 * 100, _0xb96766 * 152, _0xb96766 * 101, _0xb96766 * 153, _0xb96766 * 102);
  _0x57f94b.bezierCurveTo(_0xb96766 * 159, _0xb96766 * 100, _0xb96766 * 159, _0xb96766 * 100, _0xb96766 * 160, _0xb96766 * 100);
  _0x57f94b.bezierCurveTo(_0xb96766 * 161, _0xb96766 * 84, _0xb96766 * 161, _0xb96766 * 84, _0xb96766 * 162, _0xb96766 * 68);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[2]);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 57, _0xb96766 * 75);
  _0x57f94b.bezierCurveTo(_0xb96766 * 48, _0xb96766 * 101, _0xb96766 * 53, _0xb96766 * 89, _0xb96766 * 48, _0xb96766 * 102);
  _0x57f94b.bezierCurveTo(_0xb96766 * 44, _0xb96766 * 100, _0xb96766 * 44, _0xb96766 * 100, _0xb96766 * 39, _0xb96766 * 97);
  _0x57f94b.bezierCurveTo(_0xb96766 * 39, _0xb96766 * 83, _0xb96766 * 39, _0xb96766 * 83, _0xb96766 * 39, _0xb96766 * 69);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[2]);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 101, _0xb96766 * 72);
  _0x57f94b.bezierCurveTo(_0xb96766 * 144, _0xb96766 * 69, _0xb96766 * 149, _0xb96766 * 58, _0xb96766 * 162, _0xb96766 * 49);
  _0x57f94b.bezierCurveTo(_0xb96766 * 174, _0xb96766 * 31, _0xb96766 * 173, _0xb96766 * 38, _0xb96766 * 172, _0xb96766 * 45);
  _0x57f94b.bezierCurveTo(_0xb96766 * 168, _0xb96766 * 73, _0xb96766 * 158, _0xb96766 * 75, _0xb96766 * 152, _0xb96766 * 78);
  _0x57f94b.bezierCurveTo(_0xb96766 * 106, _0xb96766 * 89, _0xb96766 * 107, _0xb96766 * 91, _0xb96766 * 107, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 107, _0xb96766 * 100, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 99, _0xb96766 * 112, _0xb96766 * 98, _0xb96766 * 110, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 94, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107, _0xb96766 * 93, _0xb96766 * 107);
  _0x57f94b.bezierCurveTo(_0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 93, _0xb96766 * 100, _0xb96766 * 92, _0xb96766 * 94);
  _0x57f94b.bezierCurveTo(_0xb96766 * 92, _0xb96766 * 89, _0xb96766 * 90, _0xb96766 * 90, _0xb96766 * 73, _0xb96766 * 86);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 81, _0xb96766 * 40, _0xb96766 * 77, _0xb96766 * 35, _0xb96766 * 68);
  _0x57f94b.bezierCurveTo(_0xb96766 * 23, _0xb96766 * 36, _0xb96766 * 28, _0xb96766 * 34, _0xb96766 * 36, _0xb96766 * 46);
  _0x57f94b.bezierCurveTo(_0xb96766 * 45, _0xb96766 * 58, _0xb96766 * 83, _0xb96766 * 72, _0xb96766 * 98, _0xb96766 * 72);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[4], _0x47b7e4[5], _0xb96766 * 4);
  _0x57f94b.translate(0, 0);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 115.5, _0xb96766 * 116.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 159.5, _0xb96766 * 99.07290649414062, _0xb96766 * 159.5, _0xb96766 * 98.07290649414062, _0xb96766 * 159.5, _0xb96766 * 98.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 155.5, _0xb96766 * 116.07290649414062, _0xb96766 * 159.5, _0xb96766 * 116.07290649414062, _0xb96766 * 159.5, _0xb96766 * 118.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 147.5, _0xb96766 * 130.07290649414062, _0xb96766 * 136.5, _0xb96766 * 132.07290649414062, _0xb96766 * 115.5, _0xb96766 * 138.07290649414062);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[3], _0x47b7e4[2], _0xb96766 * 4);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 39.5, _0xb96766 * 96.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 85.5, _0xb96766 * 114.07290649414062, _0xb96766 * 62.5, _0xb96766 * 105.57290649414062, _0xb96766 * 85.5, _0xb96766 * 115.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 85.5, _0xb96766 * 125.57290649414062, _0xb96766 * 85.5, _0xb96766 * 125.57290649414062, _0xb96766 * 85.5, _0xb96766 * 136.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 51.5, _0xb96766 * 129.07290649414062, _0xb96766 * 51.5, _0xb96766 * 125.07290649414062, _0xb96766 * 41.5, _0xb96766 * 118.07290649414062);
  _0x57f94b.bezierCurveTo(_0xb96766 * 44.5, _0xb96766 * 106.07290649414062, _0xb96766 * 42.5, _0xb96766 * 103.07290649414062, _0xb96766 * 40.5, _0xb96766 * 96.07290649414062);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[3], _0x47b7e4[2], _0xb96766 * 4);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 86, _0xb96766 * 80);
  _0x57f94b.bezierCurveTo(_0xb96766 * 97, _0xb96766 * 88, _0xb96766 * 106, _0xb96766 * 84, _0xb96766 * 112, _0xb96766 * 80);
  _0x57f94b.bezierCurveTo(_0xb96766 * 112, _0xb96766 * 62, _0xb96766 * 106, _0xb96766 * 59, _0xb96766 * 99, _0xb96766 * 54);
  _0x57f94b.bezierCurveTo(_0xb96766 * 86, _0xb96766 * 62, _0xb96766 * 86, _0xb96766 * 73, _0xb96766 * 86, _0xb96766 * 80);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[3], _0x47b7e4[2], _0xb96766 * 4);
  _0x57f94b.scale(0.5, 0.5);
  _0x57f94b.translate(_0xb96766 * 100, _0xb96766 * 71);
  _0x57f94b.beginPath();
  _0x57f94b.lineCap = "round";
  _0x57f94b.lineJoin = "round";
  _0x57f94b.moveTo(_0xb96766 * 86, _0xb96766 * 80);
  _0x57f94b.bezierCurveTo(_0xb96766 * 97, _0xb96766 * 88, _0xb96766 * 106, _0xb96766 * 84, _0xb96766 * 112, _0xb96766 * 80);
  _0x57f94b.bezierCurveTo(_0xb96766 * 112, _0xb96766 * 62, _0xb96766 * 106, _0xb96766 * 59, _0xb96766 * 99, _0xb96766 * 54);
  _0x57f94b.bezierCurveTo(_0xb96766 * 86, _0xb96766 * 62, _0xb96766 * 86, _0xb96766 * 73, _0xb96766 * 86, _0xb96766 * 80);
  _0x57f94b.closePath();
  fill_path(_0x57f94b, _0x47b7e4[6], _0x47b7e4[2], _0xb96766 * 4);
  return _0x5ee91b;
}
function create_book(_0x4e56fa, _0x1efc0b, _0x153682) {
  var _0x4a16fd = document.createElement("canvas");
  var _0x1b58bb = _0x4a16fd.getContext("2d");
  _0x4a16fd.width = _0x4e56fa * 400;
  _0x4a16fd.height = _0x4e56fa * 400;
  _0x1b58bb.save();
  _0x1b58bb.translate(_0x4e56fa * 204, _0x4e56fa * 195.0833282470703);
  _0x1b58bb.rotate(10.16);
  round_rect(_0x1b58bb, _0x4e56fa * -97.5, _0x4e56fa * -134.5, _0x4e56fa * 195, _0x4e56fa * 269, _0x4e56fa * 10);
  _0x1b58bb.restore();
  fill_path(_0x1b58bb, _0x153682[0], _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.beginPath();
  _0x1b58bb.lineCap = "round";
  _0x1b58bb.lineJoin = "round";
  _0x1b58bb.moveTo(_0x4e56fa * 58.5, _0x4e56fa * 226.5833282470703);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 120.5, _0x4e56fa * 281.5833282470703, _0x4e56fa * 120.5, _0x4e56fa * 281.5833282470703, _0x4e56fa * 182.5, _0x4e56fa * 336.5833282470703);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 263, _0x4e56fa * 248.5833282470703, _0x4e56fa * 263, _0x4e56fa * 248.5833282470703, _0x4e56fa * 343.5, _0x4e56fa * 160.5833282470703);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 280.5, _0x4e56fa * 104.58332824707031, _0x4e56fa * 280.5, _0x4e56fa * 104.58332824707031, _0x4e56fa * 217.5, _0x4e56fa * 48.58332824707031);
  _0x1b58bb.closePath();
  fill_path(_0x1b58bb, _0x153682[2], _0x153682[3], _0x4e56fa * 4);
  _0x1b58bb.save();
  _0x1b58bb.translate(_0x4e56fa * 197, _0x4e56fa * 169.0833282470703);
  _0x1b58bb.rotate(10.16);
  round_rect(_0x1b58bb, _0x4e56fa * -93.5, _0x4e56fa * -126.5, _0x4e56fa * 187, _0x4e56fa * 253, _0x4e56fa * 10);
  _0x1b58bb.restore();
  fill_path(_0x1b58bb, _0x153682[4], _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.beginPath();
  _0x1b58bb.lineCap = "round";
  _0x1b58bb.lineJoin = "round";
  _0x1b58bb.moveTo(_0x4e56fa * 226.5, _0x4e56fa * 24.583328247070312);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 58.5, _0x4e56fa * 207.5833282470703, _0x4e56fa * 143, _0x4e56fa * 116.58332824707031, _0x4e56fa * 59.5, _0x4e56fa * 208.5833282470703);
  _0x1b58bb.closePath();
  fill_path(_0x1b58bb, undefined, _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.beginPath();
  _0x1b58bb.lineCap = "round";
  _0x1b58bb.lineJoin = "round";
  _0x1b58bb.moveTo(_0x4e56fa * 46.133331298828125, _0x4e56fa * 202.64999389648438);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 46.133331298828125, _0x4e56fa * 215.64999389648438, _0x4e56fa * 46.133331298828125, _0x4e56fa * 215.64999389648438, _0x4e56fa * 46.133331298828125, _0x4e56fa * 228.64999389648438);
  _0x1b58bb.closePath();
  fill_path(_0x1b58bb, _0x153682[4], _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.beginPath();
  _0x1b58bb.lineCap = "round";
  _0x1b58bb.lineJoin = "round";
  _0x1b58bb.moveTo(_0x4e56fa * 55.133331298828125, _0x4e56fa * 211.64999389648438);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 55.133331298828125, _0x4e56fa * 225.14999389648438, _0x4e56fa * 55.133331298828125, _0x4e56fa * 225.14999389648438, _0x4e56fa * 55.133331298828125, _0x4e56fa * 238.64999389648438);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 50.133331298828125, _0x4e56fa * 235.64999389648438, _0x4e56fa * 50.133331298828125, _0x4e56fa * 235.64999389648438, _0x4e56fa * 45.133331298828125, _0x4e56fa * 232.64999389648438);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 45.133331298828125, _0x4e56fa * 216.64999389648438, _0x4e56fa * 45.133331298828125, _0x4e56fa * 216.64999389648438, _0x4e56fa * 45.133331298828125, _0x4e56fa * 200.64999389648438);
  _0x1b58bb.closePath();
  fill_path(_0x1b58bb, _0x153682[4], _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.beginPath();
  _0x1b58bb.lineCap = "round";
  _0x1b58bb.lineJoin = "round";
  _0x1b58bb.moveTo(_0x4e56fa * 46.133331298828125, _0x4e56fa * 198.39999389648438);
  _0x1b58bb.bezierCurveTo(_0x4e56fa * 46.133331298828125, _0x4e56fa * 199.89999389648438, _0x4e56fa * 46.133331298828125, _0x4e56fa * 199.89999389648438, _0x4e56fa * 46.133331298828125, _0x4e56fa * 201.39999389648438);
  _0x1b58bb.closePath();
  fill_path(_0x1b58bb, _0x153682[4], _0x153682[1], _0x4e56fa * 8);
  _0x1b58bb.save();
  _0x1b58bb.translate(_0x4e56fa * 249.63333129882812, _0x4e56fa * 120.89999389648438);
  _0x1b58bb.rotate(7.04);
  round_rect(_0x1b58bb, _0x4e56fa * -58.5, _0x4e56fa * -32, _0x4e56fa * 117, _0x4e56fa * 64, _0x4e56fa * 10);
  _0x1b58bb.restore();
  fill_path(_0x1b58bb, _0x153682[5]);
  return _0x4a16fd;
}
function create_paper(_0x26fe8b, _0x255a3d, _0x386e65) {
  var _0x4bf873 = document.createElement("canvas");
  var _0x7b8411 = _0x4bf873.getContext("2d");
  _0x4bf873.width = _0x26fe8b * 170;
  _0x4bf873.height = _0x26fe8b * 170;
  _0x7b8411.globalAlpha = _0x255a3d ? 0.5 : 1;
  _0x7b8411.translate(_0x26fe8b * -10, _0x26fe8b * 10);
  _0x7b8411.beginPath();
  _0x7b8411.lineCap = "round";
  _0x7b8411.lineJoin = "round";
  _0x7b8411.moveTo(_0x26fe8b * 72.5, _0x26fe8b * 4.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 117, _0x26fe8b * 9.609375, _0x26fe8b * 117, _0x26fe8b * 9.609375, _0x26fe8b * 161.5, _0x26fe8b * 15.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 134.5, _0x26fe8b * 106.109375, _0x26fe8b * 110.5, _0x26fe8b * 130.109375, _0x26fe8b * 63.5, _0x26fe8b * 145.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 33.5, _0x26fe8b * 120.609375, _0x26fe8b * 33.5, _0x26fe8b * 120.609375, _0x26fe8b * 3.5, _0x26fe8b * 96.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 82.5, _0x26fe8b * 75.109375, _0x26fe8b * 69.5, _0x26fe8b * 29.109375, _0x26fe8b * 71.5, _0x26fe8b * 6.109375);
  _0x7b8411.closePath();
  fill_path(_0x7b8411, _0x386e65[0]);
  _0x7b8411.globalAlpha = 1;
  _0x7b8411.translate(_0x26fe8b * 10, _0x26fe8b * -10);
  _0x7b8411.beginPath();
  _0x7b8411.lineCap = "round";
  _0x7b8411.lineJoin = "round";
  _0x7b8411.moveTo(_0x26fe8b * 72.5, _0x26fe8b * 4.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 117, _0x26fe8b * 9.609375, _0x26fe8b * 117, _0x26fe8b * 9.609375, _0x26fe8b * 161.5, _0x26fe8b * 15.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 134.5, _0x26fe8b * 106.109375, _0x26fe8b * 110.5, _0x26fe8b * 130.109375, _0x26fe8b * 63.5, _0x26fe8b * 145.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 33.5, _0x26fe8b * 120.609375, _0x26fe8b * 33.5, _0x26fe8b * 120.609375, _0x26fe8b * 3.5, _0x26fe8b * 96.109375);
  _0x7b8411.bezierCurveTo(_0x26fe8b * 82.5, _0x26fe8b * 75.109375, _0x26fe8b * 69.5, _0x26fe8b * 29.109375, _0x26fe8b * 71.5, _0x26fe8b * 6.109375);
  _0x7b8411.closePath();
  fill_path(_0x7b8411, _0x386e65[1], _0x386e65[2], _0x26fe8b * 10);
  return _0x4bf873;
}
function create_lock(_0x148ff3, _0x5cb3c2, _0x21921d) {
  var _0x3c1d14 = document.createElement("canvas");
  var _0x41c4c6 = _0x3c1d14.getContext("2d");
  _0x3c1d14.width = _0x148ff3 * 47;
  _0x3c1d14.height = _0x148ff3 * 60;
  var _0x3c1d14 = document.createElement("canvas");
  var _0x41c4c6 = _0x3c1d14.getContext("2d");
  _0x3c1d14.width = _0x148ff3 * 47;
  _0x3c1d14.height = _0x148ff3 * 60;
  circle(_0x41c4c6, _0x148ff3 * 23.5, _0x148ff3 * 20.734375, _0x148ff3 * 15.132745950421556);
  fill_path(_0x41c4c6, undefined, _0x21921d[2], _0x148ff3 * 4);
  circle(_0x41c4c6, _0x148ff3 * 23.5, _0x148ff3 * 20.734375, _0x148ff3 * 18.601075237738275);
  fill_path(_0x41c4c6, undefined, _0x21921d[1], _0x148ff3 * 4);
  circle(_0x41c4c6, _0x148ff3 * 23.5, _0x148ff3 * 20.734375, _0x148ff3 * 11.40175425099138);
  fill_path(_0x41c4c6, undefined, _0x21921d[1], _0x148ff3 * 4);
  _0x41c4c6.save();
  _0x41c4c6.translate(_0x148ff3 * 23, _0x148ff3 * 38.734375);
  _0x41c4c6.rotate(0);
  round_rect(_0x41c4c6, _0x148ff3 * -21.5, _0x148ff3 * -19, _0x148ff3 * 43, _0x148ff3 * 38, _0x148ff3 * 10);
  _0x41c4c6.restore();
  fill_path(_0x41c4c6, _0x21921d[2], _0x21921d[1], _0x148ff3 * 4);
  _0x41c4c6.save();
  _0x41c4c6.translate(_0x148ff3 * 23.5, _0x148ff3 * 43.734375);
  _0x41c4c6.rotate(0.5235987755982988);
  round_regular_polygon(_0x41c4c6, 3, _0x148ff3 * 8.06225774829855, _0x148ff3 * 0);
  _0x41c4c6.restore();
  fill_path(_0x41c4c6, _0x21921d[3]);
  circle(_0x41c4c6, _0x148ff3 * 23.5, _0x148ff3 * 35.734375, _0x148ff3 * 7.0710678118654755);
  fill_path(_0x41c4c6, _0x21921d[3]);
  return _0x3c1d14;
}
function create_tronctotem(_0x300138, _0x1ce2d7, _0x68ede9) {
  var _0x421640 = document.createElement("canvas");
  var _0x2348ea = _0x421640.getContext("2d");
  _0x421640.width = _0x300138 * 201;
  _0x421640.height = _0x300138 * 164;
  _0x2348ea.translate(0, _0x300138 * 5);
  _0x2348ea.globalAlpha = _0x1ce2d7 ? 0.5 : 1;
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 74.92746655359852);
  fill_path(_0x2348ea, _0x68ede9[0], _0x68ede9[0], _0x300138 * 4);
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 65.9417374971317);
  fill_path(_0x2348ea, _0x68ede9[0], _0x68ede9[0], _0x300138 * 4);
  _0x2348ea.translate(0, -5);
  _0x2348ea.globalAlpha = 1;
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 74.92746655359852);
  fill_path(_0x2348ea, _0x68ede9[1], _0x68ede9[3], _0x300138 * 4);
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 65.9417374971317);
  fill_path(_0x2348ea, _0x68ede9[1], _0x68ede9[2], _0x300138 * 4);
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 35.9417374971317);
  fill_path(_0x2348ea, _0x68ede9[1], _0x68ede9[2], _0x300138 * 20);
  circle(_0x2348ea, _0x300138 * 100.5, _0x300138 * 82, _0x300138 * 15.9417374971317);
  fill_path(_0x2348ea, _0x68ede9[1], _0x68ede9[2], _0x300138 * 6);
  return _0x421640;
}
function create_headtotem(_0x4cac09, _0xac933f, _0x208c34, _0x124cfd) {
  var _0x248ba7 = document.createElement("canvas");
  var _0x2f04be = _0x248ba7.getContext("2d");
  _0x248ba7.width = _0x4cac09 * 501;
  _0x248ba7.height = _0x4cac09 * 564;
  _0x2f04be.scale(0.5, 0.5);
  _0x2f04be.translate(_0x4cac09 * 240, _0x4cac09 * 255);
  _0x2f04be.rotate(_0x124cfd);
  _0x2f04be.globalAlpha = _0xac933f ? 0.5 : 0.2;
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.984375, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.984375, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.484375, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[0]);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.984375, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.984375, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.484375, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[0]);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 30, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 30, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 30, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[0]);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 130, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 130, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  circle(_0x2f04be, _0x4cac09 * 100, _0x4cac09 * 130, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[0]);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 102, _0x4cac09 * 81.984375);
  _0x2f04be.rotate(0);
  round_rect(_0x2f04be, _0x4cac09 * -74, _0x4cac09 * -57, _0x4cac09 * 148, _0x4cac09 * 114, _0x4cac09 * 23);
  _0x2f04be.restore();
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 101, _0x4cac09 * 64.984375);
  _0x2f04be.rotate(0);
  round_rect(_0x2f04be, _0x4cac09 * -33, _0x4cac09 * -10, _0x4cac09 * 66, _0x4cac09 * 20, _0x4cac09 * 15);
  _0x2f04be.restore();
  fill_path(_0x2f04be, _0x208c34[0], _0x208c34[0], _0x4cac09 * 4);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 102, _0x4cac09 * 63.484375);
  _0x2f04be.rotate(0);
  round_rect(_0x2f04be, _0x4cac09 * -9, _0x4cac09 * -27.5, _0x4cac09 * 18, _0x4cac09 * 55, _0x4cac09 * 15);
  _0x2f04be.restore();
  _0x2f04be.translate(5, -5);
  _0x2f04be.globalAlpha = 1;
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.984375, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.984375, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 174, _0x4cac09 * 87.484375, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[2]);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.984375, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.984375, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 30, _0x4cac09 * 87.484375, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[2]);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 30, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 30, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 30, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[1]);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 130, _0x4cac09 * 20.8806130178211);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 130, _0x4cac09 * 12.165525060596439);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 102, _0x4cac09 * 130, _0x4cac09 * 6);
  fill_path(_0x2f04be, _0x208c34[1]);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 102, _0x4cac09 * 81.984375);
  round_rect(_0x2f04be, _0x4cac09 * -74, _0x4cac09 * -57, _0x4cac09 * 148, _0x4cac09 * 114, _0x4cac09 * 23);
  _0x2f04be.restore();
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 101, _0x4cac09 * 64.984375);
  round_rect(_0x2f04be, _0x4cac09 * -33, _0x4cac09 * -10, _0x4cac09 * 66, _0x4cac09 * 20, _0x4cac09 * 15);
  _0x2f04be.restore();
  fill_path(_0x2f04be, _0x208c34[2], _0x208c34[1], _0x4cac09 * 8);
  _0x2f04be.save();
  _0x2f04be.translate(_0x4cac09 * 102, _0x4cac09 * 63.484375);
  round_rect(_0x2f04be, _0x4cac09 * -9, _0x4cac09 * -27.5, _0x4cac09 * 18, _0x4cac09 * 55, _0x4cac09 * 15);
  _0x2f04be.restore();
  fill_path(_0x2f04be, _0x208c34[2], _0x208c34[1], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 135, _0x4cac09 * 107.36605834960938, _0x4cac09 * 21.095023109728988);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 135, _0x4cac09 * 107.36605834960938, _0x4cac09 * 13);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 135, _0x4cac09 * 107.36605834960938, _0x4cac09 * 6.082762530298219);
  fill_path(_0x2f04be, _0x208c34[2]);
  circle(_0x2f04be, _0x4cac09 * 70, _0x4cac09 * 107.36605834960938, _0x4cac09 * 21.095023109728988);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 70, _0x4cac09 * 107.36605834960938, _0x4cac09 * 13);
  fill_path(_0x2f04be, _0x208c34[1], _0x208c34[3], _0x4cac09 * 8);
  circle(_0x2f04be, _0x4cac09 * 70, _0x4cac09 * 107.36605834960938, _0x4cac09 * 6.082762530298219);
  fill_path(_0x2f04be, _0x208c34[2]);
  return _0x248ba7;
}
function create_icon_team(_0x6f96be, _0x183502, _0x1f7815) {
  var _0x3580b8 = document.createElement("canvas");
  var _0x405f6f = _0x3580b8.getContext("2d");
  _0x3580b8.width = _0x6f96be * 95;
  _0x3580b8.height = _0x6f96be * 85;
  if (_0x1f7815 == 0) {
    _0x405f6f.translate(_0x6f96be * 7, _0x6f96be * 15);
    _0x405f6f.scale(0.9, 0.9);
    _0x405f6f.save();
    round_rect(_0x405f6f, _0x6f96be * 0, _0x6f96be * 5, _0x6f96be * 90, _0x6f96be * 60, 10);
    fill_path(_0x405f6f, _0x183502[0]);
    _0x405f6f.globalCompositeOperation = "destination-out";
    circle(_0x405f6f, _0x6f96be * 25, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    circle(_0x405f6f, _0x6f96be * 65, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    _0x405f6f.restore();
    _0x405f6f.save();
    round_rect(_0x405f6f, 0, 0, _0x6f96be * 90, _0x6f96be * 60, _0x6f96be * 10);
    fill_path(_0x405f6f, _0x183502[1]);
    _0x405f6f.globalCompositeOperation = "destination-out";
    circle(_0x405f6f, _0x6f96be * 25, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    circle(_0x405f6f, _0x6f96be * 65, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    _0x405f6f.restore();
  } else if (_0x1f7815 == 1) {
    _0x405f6f.scale(0.8, 0.8);
    _0x405f6f.translate(_0x6f96be * 15, _0x6f96be * 33);
    _0x405f6f.save();
    _0x405f6f.scale(0.56, 0.56);
    _0x405f6f.translate(_0x6f96be * -39, _0x6f96be * -60);
    _0x405f6f.beginPath();
    _0x405f6f.lineCap = "round";
    _0x405f6f.lineJoin = "round";
    _0x405f6f.moveTo(_0x6f96be * 32.5, _0x6f96be * 50.642852783203125);
    _0x405f6f.bezierCurveTo(_0x6f96be * 83, _0x6f96be * 69.64285278320312, _0x6f96be * 83, _0x6f96be * 69.64285278320312, _0x6f96be * 133.5, _0x6f96be * 88.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 93, _0x6f96be * 92.64285278320312, _0x6f96be * 93, _0x6f96be * 92.64285278320312, _0x6f96be * 52.5, _0x6f96be * 96.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 30.5, _0x6f96be * 100.64285278320312, _0x6f96be * 36.5, _0x6f96be * 94.64285278320312, _0x6f96be * 32.5, _0x6f96be * 84.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 21.5, _0x6f96be * 45.642852783203125, _0x6f96be * 24.5, _0x6f96be * 48.642852783203125, _0x6f96be * 31.5, _0x6f96be * 50.642852783203125);
    _0x405f6f.closePath();
    fill_path(_0x405f6f, _0x183502[1]);
    _0x405f6f.beginPath();
    _0x405f6f.lineCap = "round";
    _0x405f6f.lineJoin = "round";
    _0x405f6f.moveTo(_0x6f96be * 116.5, _0x6f96be * 85.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 160.5, _0x6f96be * 67.14285278320312, _0x6f96be * 160.5, _0x6f96be * 67.14285278320312, _0x6f96be * 204.5, _0x6f96be * 48.642852783203125);
    _0x405f6f.bezierCurveTo(_0x6f96be * 220.5, _0x6f96be * 42.642852783203125, _0x6f96be * 208.5, _0x6f96be * 68.64285278320312, _0x6f96be * 205.5, _0x6f96be * 85.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 202.5, _0x6f96be * 98.64285278320312, _0x6f96be * 199.5, _0x6f96be * 98.64285278320312, _0x6f96be * 188.5, _0x6f96be * 100.64285278320312);
    _0x405f6f.closePath();
    fill_path(_0x405f6f, _0x183502[1]);
    _0x405f6f.beginPath();
    _0x405f6f.lineCap = "round";
    _0x405f6f.lineJoin = "round";
    _0x405f6f.moveTo(_0x6f96be * 166.5, _0x6f96be * 68.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 147.5, _0x6f96be * 72.64285278320312, _0x6f96be * 145.5, _0x6f96be * 73.64285278320312, _0x6f96be * 142.5, _0x6f96be * 62.642852783203125);
    _0x405f6f.bezierCurveTo(_0x6f96be * 121.5, _0x6f96be * 12.642852783203125, _0x6f96be * 122.5, _0x6f96be * 5.642852783203125, _0x6f96be * 117.5, _0x6f96be * 15.642852783203125);
    _0x405f6f.bezierCurveTo(_0x6f96be * 105.5, _0x6f96be * 40.642852783203125, _0x6f96be * 105.5, _0x6f96be * 40.642852783203125, _0x6f96be * 93.5, _0x6f96be * 65.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 89.5, _0x6f96be * 74.64285278320312, _0x6f96be * 84.5, _0x6f96be * 72.64285278320312, _0x6f96be * 73.5, _0x6f96be * 74.64285278320312);
    _0x405f6f.bezierCurveTo(_0x6f96be * 98, _0x6f96be * 87.64285278320312, _0x6f96be * 98, _0x6f96be * 87.64285278320312, _0x6f96be * 122.5, _0x6f96be * 100.64285278320312);
    _0x405f6f.closePath();
    fill_path(_0x405f6f, _0x183502[1]);
    _0x405f6f.restore();
    _0x405f6f.save();
    round_rect(_0x405f6f, 0, _0x6f96be * 15, _0x6f96be * 90, _0x6f96be * 50, _0x6f96be * 10);
    fill_path(_0x405f6f, _0x183502[0]);
    round_rect(_0x405f6f, 0, _0x6f96be * 10, _0x6f96be * 90, _0x6f96be * 50, _0x6f96be * 10);
    fill_path(_0x405f6f, _0x183502[1]);
    _0x405f6f.globalCompositeOperation = "destination-out";
    circle(_0x405f6f, _0x6f96be * 25, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    circle(_0x405f6f, _0x6f96be * 65, _0x6f96be * 40, _0x6f96be * 10);
    _0x405f6f.fill();
    _0x405f6f.restore();
  }
  return _0x3580b8;
}
function create_team_button(_0x1af658, _0x8ef29b, _0x35cc3e) {
  var _0x522b00 = document.createElement("canvas");
  var _0x3fe66a = _0x522b00.getContext("2d");
  _0x522b00.width = _0x1af658 * 120;
  _0x522b00.height = _0x1af658 * 100;
  round_rect(_0x3fe66a, _0x1af658 * 10, _0x1af658 * 10, _0x1af658 * 95, _0x1af658 * 80, _0x1af658 * 10);
  fill_path(_0x3fe66a, _0x8ef29b[2]);
  round_rect(_0x3fe66a, _0x1af658 * 10, _0x1af658 * 5, _0x1af658 * 95, _0x1af658 * 80, _0x1af658 * 10);
  fill_path(_0x3fe66a, _0x8ef29b[3], _0x8ef29b[4], _0x1af658 * 4);
  if (_0x35cc3e == 0) {
    var _0x513753 = create_icon_team(_0x1af658 * 0.75, _0x8ef29b, 0);
    _0x3fe66a.drawImage(_0x513753, _0x1af658 * 22, _0x1af658 * 18);
  } else if (_0x35cc3e == 1) {
    var _0x513753 = create_icon_team(_0x1af658 * 0.75, _0x8ef29b, 1);
    _0x3fe66a.drawImage(_0x513753, _0x1af658 * 22, _0x1af658 * 18);
  }
  return _0x522b00;
}
function create_totem(_0x1c67de, _0x482c39, _0x26a749) {
  var _0x41e6e6 = document.createElement("canvas");
  var _0x501553 = _0x41e6e6.getContext("2d");
  _0x41e6e6.width = _0x1c67de * 185;
  _0x41e6e6.height = _0x1c67de * 164;
  _0x501553.translate(0, 0);
  var _0x13c92a = create_tronctotem(_0x1c67de, _0x482c39, _0x26a749);
  _0x501553.drawImage(_0x13c92a, _0x1c67de * -10, _0x1c67de * 0);
  var _0x13c92a = create_headtotem(_0x1c67de, _0x482c39, _0x26a749, 0);
  _0x501553.drawImage(_0x13c92a, _0x1c67de * -83, _0x1c67de * -40);
  var _0x13c92a = create_headtotem(_0x1c67de, _0x482c39, _0x26a749, Math.PI / 1.4);
  _0x501553.drawImage(_0x13c92a, _0x1c67de * -15, _0x1c67de * -88);
  var _0x13c92a = create_headtotem(_0x1c67de, _0x482c39, _0x26a749, Math.PI / -1.4);
  _0x501553.drawImage(_0x13c92a, _0x1c67de * 15, _0x1c67de * -8);
  return _0x41e6e6;
}
function create_lockpick(_0x8751c3, _0x4788c9, _0x239775) {
  var _0x2ffd0b = document.createElement("canvas");
  var _0x149453 = _0x2ffd0b.getContext("2d");
  _0x2ffd0b.width = _0x8751c3 * 450;
  _0x2ffd0b.height = _0x8751c3 * 790;
  _0x149453.translate(_0x8751c3 * 5, _0x8751c3 * 5);
  _0x149453.globalAlpha = _0x4788c9 ? 0 : 0;
  circle(_0x149453, _0x8751c3 * 178.5, _0x8751c3 * 172.828125, _0x8751c3 * 150);
  fill_path(_0x149453, undefined, _0x239775[0], _0x8751c3 * 65);
  circle(_0x149453, _0x8751c3 * 178.5, _0x8751c3 * 172.828125, _0x8751c3 * 150);
  fill_path(_0x149453, undefined, _0x239775[0], _0x8751c3 * 55);
  _0x149453.closePath();
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 177, _0x8751c3 * 512.328125);
  round_rect(_0x149453, _0x8751c3 * -25, _0x8751c3 * -202.5, _0x8751c3 * 65, _0x8751c3 * 405, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 136, _0x8751c3 * 581.828125);
  round_rect(_0x149453, _0x8751c3 * -39, _0x8751c3 * -23, _0x8751c3 * 78, _0x8751c3 * 46, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 135.5, _0x8751c3 * 663.828125);
  round_rect(_0x149453, _0x8751c3 * -39.5, _0x8751c3 * -22, _0x8751c3 * 79, _0x8751c3 * 44, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 114, _0x8751c3 * 594.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 175, _0x8751c3 * 596.828125, _0x8751c3 * 163, _0x8751c3 * 596.828125, _0x8751c3 * 172, _0x8751c3 * 594.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 171.5, _0x8751c3 * 633.828125, _0x8751c3 * 171.5, _0x8751c3 * 633.828125, _0x8751c3 * 171, _0x8751c3 * 672.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 110, _0x8751c3 * 673.828125, _0x8751c3 * 140.5, _0x8751c3 * 673.328125, _0x8751c3 * 110, _0x8751c3 * 673.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 110.5, _0x8751c3 * 661.828125, _0x8751c3 * 110.5, _0x8751c3 * 661.828125, _0x8751c3 * 111, _0x8751c3 * 649.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 157, _0x8751c3 * 633.828125, _0x8751c3 * 134, _0x8751c3 * 607.828125, _0x8751c3 * 114, _0x8751c3 * 594.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.translate(0, _0x8751c3 * 5);
  _0x149453.moveTo(_0x8751c3 * 140, _0x8751c3 * 294.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 212, _0x8751c3 * 295.828125, _0x8751c3 * 176.5, _0x8751c3 * 295.328125, _0x8751c3 * 213, _0x8751c3 * 295.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 201.5, _0x8751c3 * 325.328125, _0x8751c3 * 201.5, _0x8751c3 * 325.328125, _0x8751c3 * 190, _0x8751c3 * 354.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 175.5, _0x8751c3 * 355.828125, _0x8751c3 * 175.5, _0x8751c3 * 355.828125, _0x8751c3 * 161, _0x8751c3 * 356.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 154.5, _0x8751c3 * 328.828125, _0x8751c3 * 154.5, _0x8751c3 * 328.828125, _0x8751c3 * 148, _0x8751c3 * 300.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.translate(3, _0x8751c3 * -5);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 159, _0x8751c3 * 679.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 180, _0x8751c3 * 665.828125, _0x8751c3 * 155, _0x8751c3 * 675.828125, _0x8751c3 * 151, _0x8751c3 * 671.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 154.5, _0x8751c3 * 685.328125, _0x8751c3 * 154.5, _0x8751c3 * 685.328125, _0x8751c3 * 158, _0x8751c3 * 698.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 171, _0x8751c3 * 699.828125, _0x8751c3 * 171, _0x8751c3 * 699.828125, _0x8751c3 * 184, _0x8751c3 * 700.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[0]);
  _0x149453.save();
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 157, _0x8751c3 * 548.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 157, _0x8751c3 * 561.828125, _0x8751c3 * 157, _0x8751c3 * 561.828125, _0x8751c3 * 157, _0x8751c3 * 574.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 132.5, _0x8751c3 * 580.828125, _0x8751c3 * 132.5, _0x8751c3 * 580.828125, _0x8751c3 * 108, _0x8751c3 * 586.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 112, _0x8751c3 * 599.828125, _0x8751c3 * 111, _0x8751c3 * 593.828125, _0x8751c3 * 112, _0x8751c3 * 599.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 159, _0x8751c3 * 603.828125, _0x8751c3 * 126.5, _0x8751c3 * 601.328125, _0x8751c3 * 141, _0x8751c3 * 602.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 145, _0x8751c3 * 641.828125, _0x8751c3 * 143.5, _0x8751c3 * 623.828125, _0x8751c3 * 146, _0x8751c3 * 644.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 129.5, _0x8751c3 * 645.328125, _0x8751c3 * 129.5, _0x8751c3 * 645.328125, _0x8751c3 * 113, _0x8751c3 * 645.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 107.5, _0x8751c3 * 652.828125, _0x8751c3 * 107.5, _0x8751c3 * 652.828125, _0x8751c3 * 102, _0x8751c3 * 659.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 104, _0x8751c3 * 669.328125, _0x8751c3 * 104, _0x8751c3 * 669.328125, _0x8751c3 * 106, _0x8751c3 * 678.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 145, _0x8751c3 * 679.328125, _0x8751c3 * 145, _0x8751c3 * 679.328125, _0x8751c3 * 184, _0x8751c3 * 679.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 185, _0x8751c3 * 615.828125, _0x8751c3 * 185, _0x8751c3 * 615.828125, _0x8751c3 * 186, _0x8751c3 * 551.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 172.5, _0x8751c3 * 551.328125, _0x8751c3 * 172.5, _0x8751c3 * 551.328125, _0x8751c3 * 159, _0x8751c3 * 550.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[0], _0x239775[0], _0x8751c3 * 7);
  _0x149453.restore();
  _0x149453.globalAlpha = 1;
  _0x149453.translate(_0x8751c3 * 15, _0x8751c3 * 35);
  circle(_0x149453, _0x8751c3 * 178.5, _0x8751c3 * 172.828125, _0x8751c3 * 150);
  fill_path(_0x149453, undefined, _0x239775[2], _0x8751c3 * 95);
  circle(_0x149453, _0x8751c3 * 178.5, _0x8751c3 * 172.828125, _0x8751c3 * 150);
  fill_path(_0x149453, undefined, _0x239775[1], _0x8751c3 * 55);
  _0x149453.closePath();
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 177, _0x8751c3 * 512.328125);
  round_rect(_0x149453, _0x8751c3 * -25, _0x8751c3 * -202.5, _0x8751c3 * 65, _0x8751c3 * 405, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[1], _0x239775[2], _0x8751c3 * 20);
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 136, _0x8751c3 * 581.828125);
  round_rect(_0x149453, _0x8751c3 * -39, _0x8751c3 * -23, _0x8751c3 * 78, _0x8751c3 * 46, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[1], _0x239775[2], _0x8751c3 * 20);
  _0x149453.save();
  _0x149453.translate(_0x8751c3 * 135.5, _0x8751c3 * 663.828125);
  round_rect(_0x149453, _0x8751c3 * -39.5, _0x8751c3 * -22, _0x8751c3 * 79, _0x8751c3 * 44, _0x8751c3 * 25);
  _0x149453.restore();
  fill_path(_0x149453, _0x239775[1], _0x239775[2], _0x8751c3 * 20);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 114, _0x8751c3 * 594.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 175, _0x8751c3 * 596.828125, _0x8751c3 * 163, _0x8751c3 * 596.828125, _0x8751c3 * 172, _0x8751c3 * 594.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 171.5, _0x8751c3 * 633.828125, _0x8751c3 * 171.5, _0x8751c3 * 633.828125, _0x8751c3 * 171, _0x8751c3 * 672.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 110, _0x8751c3 * 673.828125, _0x8751c3 * 140.5, _0x8751c3 * 673.328125, _0x8751c3 * 110, _0x8751c3 * 673.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 110.5, _0x8751c3 * 661.828125, _0x8751c3 * 110.5, _0x8751c3 * 661.828125, _0x8751c3 * 111, _0x8751c3 * 649.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 157, _0x8751c3 * 633.828125, _0x8751c3 * 134, _0x8751c3 * 607.828125, _0x8751c3 * 114, _0x8751c3 * 594.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[1]);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.translate(0, _0x8751c3 * 5);
  _0x149453.moveTo(_0x8751c3 * 123, _0x8751c3 * 294.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 212, _0x8751c3 * 295.828125, _0x8751c3 * 190.5, _0x8751c3 * 295.328125, _0x8751c3 * 250, _0x8751c3 * 295.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 231.5, _0x8751c3 * 325.328125, _0x8751c3 * 231.5, _0x8751c3 * 325.328125, _0x8751c3 * 220, _0x8751c3 * 354.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 175.5, _0x8751c3 * 355.828125, _0x8751c3 * 175.5, _0x8751c3 * 355.828125, _0x8751c3 * 140, _0x8751c3 * 356.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 123.5, _0x8751c3 * 328.828125, _0x8751c3 * 123.5, _0x8751c3 * 328.828125, _0x8751c3 * 123, _0x8751c3 * 294.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[1]);
  _0x149453.translate(0, _0x8751c3 * -5);
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 159, _0x8751c3 * 679.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 180, _0x8751c3 * 665.828125, _0x8751c3 * 155, _0x8751c3 * 675.828125, _0x8751c3 * 151, _0x8751c3 * 671.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 154.5, _0x8751c3 * 685.328125, _0x8751c3 * 154.5, _0x8751c3 * 685.328125, _0x8751c3 * 158, _0x8751c3 * 698.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 171, _0x8751c3 * 699.828125, _0x8751c3 * 171, _0x8751c3 * 699.828125, _0x8751c3 * 184, _0x8751c3 * 700.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[1]);
  _0x149453.save();
  _0x149453.beginPath();
  _0x149453.lineCap = "round";
  _0x149453.lineJoin = "round";
  _0x149453.moveTo(_0x8751c3 * 157, _0x8751c3 * 548.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 157, _0x8751c3 * 561.828125, _0x8751c3 * 157, _0x8751c3 * 561.828125, _0x8751c3 * 157, _0x8751c3 * 574.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 132.5, _0x8751c3 * 580.828125, _0x8751c3 * 132.5, _0x8751c3 * 580.828125, _0x8751c3 * 108, _0x8751c3 * 586.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 112, _0x8751c3 * 599.828125, _0x8751c3 * 111, _0x8751c3 * 593.828125, _0x8751c3 * 112, _0x8751c3 * 599.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 159, _0x8751c3 * 603.828125, _0x8751c3 * 126.5, _0x8751c3 * 601.328125, _0x8751c3 * 141, _0x8751c3 * 602.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 145, _0x8751c3 * 641.828125, _0x8751c3 * 143.5, _0x8751c3 * 623.828125, _0x8751c3 * 146, _0x8751c3 * 644.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 129.5, _0x8751c3 * 645.328125, _0x8751c3 * 129.5, _0x8751c3 * 645.328125, _0x8751c3 * 113, _0x8751c3 * 645.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 107.5, _0x8751c3 * 652.828125, _0x8751c3 * 107.5, _0x8751c3 * 652.828125, _0x8751c3 * 102, _0x8751c3 * 659.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 104, _0x8751c3 * 669.328125, _0x8751c3 * 104, _0x8751c3 * 669.328125, _0x8751c3 * 106, _0x8751c3 * 678.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 145, _0x8751c3 * 679.328125, _0x8751c3 * 145, _0x8751c3 * 679.328125, _0x8751c3 * 184, _0x8751c3 * 679.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 185, _0x8751c3 * 615.828125, _0x8751c3 * 185, _0x8751c3 * 615.828125, _0x8751c3 * 186, _0x8751c3 * 551.828125);
  _0x149453.bezierCurveTo(_0x8751c3 * 172.5, _0x8751c3 * 551.328125, _0x8751c3 * 172.5, _0x8751c3 * 551.328125, _0x8751c3 * 159, _0x8751c3 * 550.828125);
  _0x149453.closePath();
  fill_path(_0x149453, _0x239775[1], _0x239775[1], _0x8751c3 * 7);
  _0x149453.restore();
  return _0x2ffd0b;
}
function create_resurrection_ground(_0x2f073e, _0x148b2e, _0x5d0590) {
  var _0xf2fd0a = document.createElement("canvas");
  var _0x39708e = _0xf2fd0a.getContext("2d");
  _0xf2fd0a.width = _0x2f073e * 202;
  _0xf2fd0a.height = _0x2f073e * 202;
  _0x39708e.translate(_0x2f073e * 2, _0x2f073e * 1);
  _0x39708e.globalAlpha = 0.3;
  circle(_0x39708e, _0x2f073e * 98, _0x2f073e * 99, _0x2f073e * 100);
  fill_path(_0x39708e, _0x5d0590[0]);
  _0x39708e.globalAlpha = 0.5;
  circle(_0x39708e, _0x2f073e * 98, _0x2f073e * 99, _0x2f073e * 90);
  fill_path(_0x39708e, _0x5d0590[1]);
  return _0xf2fd0a;
}
function create_resurrection_hole(_0x2429e4, _0x319389, _0x115bf9) {
  var _0x26d8e2 = document.createElement("canvas");
  var _0xdbf9ae = _0x26d8e2.getContext("2d");
  _0x26d8e2.width = _0x2429e4 * 89;
  _0x26d8e2.height = _0x2429e4 * 89;
  _0xdbf9ae.save();
  _0xdbf9ae.translate(_0x2429e4 * 44.5, _0x2429e4 * 44.5);
  round_regular_polygon(_0xdbf9ae, 6, _0x2429e4 * 40, _0x2429e4 * 10);
  _0xdbf9ae.restore();
  fill_path(_0xdbf9ae, _0x115bf9[0], _0x115bf9[1], _0x2429e4 * 5);
  _0xdbf9ae.save();
  _0xdbf9ae.translate(_0x2429e4 * 44.5, _0x2429e4 * 44.5);
  round_regular_polygon(_0xdbf9ae, 6, _0x2429e4 * 25.11521001172521, _0x2429e4 * 10);
  _0xdbf9ae.restore();
  fill_path(_0xdbf9ae, _0x115bf9[2], _0x115bf9[3], _0x2429e4 * 5);
  return _0x26d8e2;
}
function create_resurrection_rotate(_0x43ee0e, _0x2776e0, _0x47b958) {
  var _0x53bd93 = document.createElement("canvas");
  var _0xfa12b2 = _0x53bd93.getContext("2d");
  _0x53bd93.width = _0x43ee0e * 88;
  _0x53bd93.height = _0x43ee0e * 88;
  _0xfa12b2.save();
  _0xfa12b2.translate(_0x43ee0e * 44, _0x43ee0e * 44);
  _0xfa12b2.rotate(0.52);
  round_regular_polygon(_0xfa12b2, 6, _0x43ee0e * 43, _0x43ee0e * 10);
  _0xfa12b2.restore();
  fill_path(_0xfa12b2, _0x47b958[0], _0x47b958[1], _0x43ee0e * 3);
  return _0x53bd93;
}
function create_resurrection(_0x3327fe, _0x9380e4, _0x1615c2) {
  var _0x5edcd4 = document.createElement("canvas");
  var _0x204923 = _0x5edcd4.getContext("2d");
  _0x5edcd4.width = _0x3327fe * 202;
  _0x5edcd4.height = _0x3327fe * 202;
  _0x204923.translate(_0x3327fe * 2, _0x3327fe * 1);
  _0x204923.globalAlpha = _0x9380e4 ? 0.5 : 1;
  _0x204923.translate(0, _0x3327fe * 10);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 41.15177917480469);
  _0x204923.rotate(0.8);
  round_rect(_0x204923, _0x3327fe * -16, _0x3327fe * -16.5, _0x3327fe * 32, _0x3327fe * 33, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 98, _0x3327fe * 22.5089111328125);
  _0x204923.bezierCurveTo(_0x3327fe * 97.5, _0x3327fe * 41.5089111328125, _0x3327fe * 97.5, _0x3327fe * 41.5089111328125, _0x3327fe * 97, _0x3327fe * 60.5089111328125);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 147.5, _0x3327fe * 69.5089111328125);
  _0x204923.rotate(0.2);
  round_rect(_0x204923, _0x3327fe * -15.5, _0x3327fe * -16, _0x3327fe * 31, _0x3327fe * 32, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 163, _0x3327fe * 59.50892639160156);
  _0x204923.bezierCurveTo(_0x3327fe * 147, _0x3327fe * 69.50892639160156, _0x3327fe * 127, _0x3327fe * 82.50892639160156, _0x3327fe * 131, _0x3327fe * 79.50892639160156);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 143.5, _0x3327fe * 128.2946319580078);
  _0x204923.rotate(1.24);
  round_rect(_0x204923, _0x3327fe * -16.5, _0x3327fe * -17.5, _0x3327fe * 33, _0x3327fe * 35, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 162, _0x3327fe * 135.93748474121094);
  _0x204923.bezierCurveTo(_0x3327fe * 143.5, _0x3327fe * 128.43748474121094, _0x3327fe * 129, _0x3327fe * 120.93748474121094, _0x3327fe * 125, _0x3327fe * 120.93748474121094);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 99, _0x3327fe * 156.08035278320312);
  _0x204923.rotate(0.84);
  round_rect(_0x204923, _0x3327fe * -18, _0x3327fe * -18, _0x3327fe * 36, _0x3327fe * 36, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 98, _0x3327fe * 136.08035278320312);
  _0x204923.bezierCurveTo(_0x3327fe * 98, _0x3327fe * 156.08035278320312, _0x3327fe * 98, _0x3327fe * 156.08035278320312, _0x3327fe * 98, _0x3327fe * 176.08035278320312);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 54, _0x3327fe * 72.22320556640625);
  _0x204923.rotate(1.32);
  round_rect(_0x204923, _0x3327fe * -18, _0x3327fe * -19, _0x3327fe * 36, _0x3327fe * 38, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 34, _0x3327fe * 60.79463195800781);
  _0x204923.bezierCurveTo(_0x3327fe * 53.5, _0x3327fe * 72.29463195800781, _0x3327fe * 69, _0x3327fe * 79.79463195800781, _0x3327fe * 73, _0x3327fe * 83.79463195800781);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 49, _0x3327fe * 127.29463195800781);
  _0x204923.rotate(1.76);
  round_rect(_0x204923, _0x3327fe * -20, _0x3327fe * -17.5, _0x3327fe * 40, _0x3327fe * 35, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 30, _0x3327fe * 141.7946319580078);
  _0x204923.bezierCurveTo(_0x3327fe * 47, _0x3327fe * 130.2946319580078, _0x3327fe * 64, _0x3327fe * 119.79463195800781, _0x3327fe * 64, _0x3327fe * 118.79463195800781);
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.globalAlpha = 1;
  _0x204923.translate(0, _0x3327fe * -10);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 41.15177917480469);
  _0x204923.rotate(0.8);
  round_rect(_0x204923, _0x3327fe * -16, _0x3327fe * -16.5, _0x3327fe * 32, _0x3327fe * 33, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 98, _0x3327fe * 22.5089111328125);
  _0x204923.bezierCurveTo(_0x3327fe * 97.5, _0x3327fe * 41.5089111328125, _0x3327fe * 97.5, _0x3327fe * 41.5089111328125, _0x3327fe * 97, _0x3327fe * 60.5089111328125);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 147.5, _0x3327fe * 69.5089111328125);
  _0x204923.rotate(0.2);
  round_rect(_0x204923, _0x3327fe * -15.5, _0x3327fe * -16, _0x3327fe * 31, _0x3327fe * 32, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 163, _0x3327fe * 59.50892639160156);
  _0x204923.bezierCurveTo(_0x3327fe * 147, _0x3327fe * 69.50892639160156, _0x3327fe * 127, _0x3327fe * 82.50892639160156, _0x3327fe * 131, _0x3327fe * 79.50892639160156);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 143.5, _0x3327fe * 128.2946319580078);
  _0x204923.rotate(1.24);
  round_rect(_0x204923, _0x3327fe * -16.5, _0x3327fe * -17.5, _0x3327fe * 33, _0x3327fe * 35, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 162, _0x3327fe * 135.93748474121094);
  _0x204923.bezierCurveTo(_0x3327fe * 143.5, _0x3327fe * 128.43748474121094, _0x3327fe * 129, _0x3327fe * 120.93748474121094, _0x3327fe * 125, _0x3327fe * 120.93748474121094);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 99, _0x3327fe * 156.08035278320312);
  _0x204923.rotate(0.84);
  round_rect(_0x204923, _0x3327fe * -18, _0x3327fe * -18, _0x3327fe * 36, _0x3327fe * 36, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 98, _0x3327fe * 136.08035278320312);
  _0x204923.bezierCurveTo(_0x3327fe * 98, _0x3327fe * 156.08035278320312, _0x3327fe * 98, _0x3327fe * 156.08035278320312, _0x3327fe * 98, _0x3327fe * 176.08035278320312);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 54, _0x3327fe * 72.22320556640625);
  _0x204923.rotate(1.32);
  round_rect(_0x204923, _0x3327fe * -18, _0x3327fe * -19, _0x3327fe * 36, _0x3327fe * 38, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 34, _0x3327fe * 60.79463195800781);
  _0x204923.bezierCurveTo(_0x3327fe * 53.5, _0x3327fe * 72.29463195800781, _0x3327fe * 69, _0x3327fe * 79.79463195800781, _0x3327fe * 73, _0x3327fe * 83.79463195800781);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 49, _0x3327fe * 127.29463195800781);
  _0x204923.rotate(1.76);
  round_rect(_0x204923, _0x3327fe * -20, _0x3327fe * -17.5, _0x3327fe * 40, _0x3327fe * 35, _0x3327fe * 7);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[3], _0x1615c2[4], _0x3327fe * 5);
  _0x204923.beginPath();
  _0x204923.lineCap = "round";
  _0x204923.lineJoin = "round";
  _0x204923.moveTo(_0x3327fe * 30, _0x3327fe * 141.7946319580078);
  _0x204923.bezierCurveTo(_0x3327fe * 47, _0x3327fe * 130.2946319580078, _0x3327fe * 64, _0x3327fe * 119.79463195800781, _0x3327fe * 64, _0x3327fe * 118.79463195800781);
  fill_path(_0x204923, undefined, _0x1615c2[4], _0x3327fe * 5);
  _0x204923.globalAlpha = _0x9380e4 ? 0.5 : 1;
  _0x204923.translate(0, _0x3327fe * 10);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 99);
  round_regular_polygon(_0x204923, 6, _0x3327fe * 70.28669492273468, _0x3327fe * 10);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 99);
  round_regular_polygon(_0x204923, 6, _0x3327fe * 56.455940020351264, _0x3327fe * 10);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[2]);
  _0x204923.globalAlpha = 1;
  _0x204923.translate(0, _0x3327fe * -10);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 99);
  round_regular_polygon(_0x204923, 6, _0x3327fe * 70.28669492273468, _0x3327fe * 10);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[5], _0x1615c2[6], _0x3327fe * 5);
  _0x204923.save();
  _0x204923.translate(_0x3327fe * 98, _0x3327fe * 99);
  round_regular_polygon(_0x204923, 6, _0x3327fe * 56.455940020351264, _0x3327fe * 10);
  _0x204923.restore();
  fill_path(_0x204923, _0x1615c2[7], _0x1615c2[8], _0x3327fe * 7);
  return _0x5edcd4;
}
function create_dragon_heart(_0x57ec33, _0x35763c, _0xe5dba5) {
  var _0x382b67 = document.createElement("canvas");
  var _0x3fc27b = _0x382b67.getContext("2d");
  _0x382b67.width = _0x57ec33 * 161;
  _0x382b67.height = _0x57ec33 * 184;
  _0x3fc27b.translate(0, _0x57ec33 * 10);
  _0x3fc27b.globalAlpha = 1;
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 105.5, _0x57ec33 * 34.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 48.5, _0x57ec33 * 7.609375, _0x57ec33 * 11.5, _0x57ec33 * 58.609375, _0x57ec33 * 20.5, _0x57ec33 * 97.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 44.5, _0x57ec33 * 161.609375, _0x57ec33 * 70.5, _0x57ec33 * 171.609375, _0x57ec33 * 88.5, _0x57ec33 * 156.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 120.5, _0x57ec33 * 129.609375, _0x57ec33 * 123.5, _0x57ec33 * 105.609375, _0x57ec33 * 128.5, _0x57ec33 * 83.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 137.5, _0x57ec33 * 79.609375, _0x57ec33 * 141.5, _0x57ec33 * 79.609375, _0x57ec33 * 146.5, _0x57ec33 * 81.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 153.5, _0x57ec33 * 70.609375, _0x57ec33 * 151.5, _0x57ec33 * 65.609375, _0x57ec33 * 148.5, _0x57ec33 * 61.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 134.5, _0x57ec33 * 60.609375, _0x57ec33 * 131.5, _0x57ec33 * 63.609375, _0x57ec33 * 127.5, _0x57ec33 * 66.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 127.5, _0x57ec33 * 55.609375, _0x57ec33 * 125.5, _0x57ec33 * 54.609375, _0x57ec33 * 120.5, _0x57ec33 * 51.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 128.5, _0x57ec33 * 42.609375, _0x57ec33 * 136.5, _0x57ec33 * 38.609375, _0x57ec33 * 147.5, _0x57ec33 * 39.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 152.5, _0x57ec33 * 23.609375, _0x57ec33 * 147.5, _0x57ec33 * 21.609375, _0x57ec33 * 140.5, _0x57ec33 * 17.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 120.5, _0x57ec33 * 17.609375, _0x57ec33 * 114.5, _0x57ec33 * 27.609375, _0x57ec33 * 106.5, _0x57ec33 * 35.609375);
  _0x3fc27b.closePath();
  fill_path(_0x3fc27b, _0xe5dba5[0]);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 45.5, _0x57ec33 * 144.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 35.5, _0x57ec33 * 155.609375, _0x57ec33 * 37, _0x57ec33 * 152.109375, _0x57ec33 * 28.5, _0x57ec33 * 159.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 16.5, _0x57ec33 * 154.609375, _0x57ec33 * 16.5, _0x57ec33 * 151.609375, _0x57ec33 * 17.5, _0x57ec33 * 141.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 25.5, _0x57ec33 * 134.109375, _0x57ec33 * 25.5, _0x57ec33 * 134.109375, _0x57ec33 * 33.5, _0x57ec33 * 126.609375);
  fill_path(_0x3fc27b, _0xe5dba5[0]);
  _0x3fc27b.translate(0, _0x57ec33 * -10);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 45.5, _0x57ec33 * 144.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 35.5, _0x57ec33 * 155.609375, _0x57ec33 * 37, _0x57ec33 * 152.109375, _0x57ec33 * 28.5, _0x57ec33 * 159.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 16.5, _0x57ec33 * 154.609375, _0x57ec33 * 16.5, _0x57ec33 * 151.609375, _0x57ec33 * 17.5, _0x57ec33 * 141.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 25.5, _0x57ec33 * 134.109375, _0x57ec33 * 25.5, _0x57ec33 * 134.109375, _0x57ec33 * 33.5, _0x57ec33 * 126.609375);
  fill_path(_0x3fc27b, _0xe5dba5[1], _0xe5dba5[2], _0x57ec33 * 8);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 105.5, _0x57ec33 * 34.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 48.5, _0x57ec33 * 7.609375, _0x57ec33 * 11.5, _0x57ec33 * 58.609375, _0x57ec33 * 20.5, _0x57ec33 * 97.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 44.5, _0x57ec33 * 161.609375, _0x57ec33 * 70.5, _0x57ec33 * 171.609375, _0x57ec33 * 88.5, _0x57ec33 * 156.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 120.5, _0x57ec33 * 129.609375, _0x57ec33 * 123.5, _0x57ec33 * 105.609375, _0x57ec33 * 128.5, _0x57ec33 * 83.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 137.5, _0x57ec33 * 79.609375, _0x57ec33 * 141.5, _0x57ec33 * 79.609375, _0x57ec33 * 146.5, _0x57ec33 * 81.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 153.5, _0x57ec33 * 70.609375, _0x57ec33 * 151.5, _0x57ec33 * 65.609375, _0x57ec33 * 148.5, _0x57ec33 * 61.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 134.5, _0x57ec33 * 60.609375, _0x57ec33 * 131.5, _0x57ec33 * 63.609375, _0x57ec33 * 127.5, _0x57ec33 * 66.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 127.5, _0x57ec33 * 55.609375, _0x57ec33 * 125.5, _0x57ec33 * 54.609375, _0x57ec33 * 120.5, _0x57ec33 * 51.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 128.5, _0x57ec33 * 42.609375, _0x57ec33 * 136.5, _0x57ec33 * 38.609375, _0x57ec33 * 147.5, _0x57ec33 * 39.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 152.5, _0x57ec33 * 23.609375, _0x57ec33 * 147.5, _0x57ec33 * 21.609375, _0x57ec33 * 140.5, _0x57ec33 * 17.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 120.5, _0x57ec33 * 17.609375, _0x57ec33 * 114.5, _0x57ec33 * 27.609375, _0x57ec33 * 106.5, _0x57ec33 * 35.609375);
  _0x3fc27b.closePath();
  fill_path(_0x3fc27b, _0xe5dba5[1], _0xe5dba5[2], _0x57ec33 * 8);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 104.5, _0x57ec33 * 35.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 71.5, _0x57ec33 * 36.609375, _0x57ec33 * 57.5, _0x57ec33 * 52.609375, _0x57ec33 * 58.5, _0x57ec33 * 81.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 59.5, _0x57ec33 * 103.609375, _0x57ec33 * 66.5, _0x57ec33 * 107.609375, _0x57ec33 * 66.5, _0x57ec33 * 116.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 67.5, _0x57ec33 * 128.609375, _0x57ec33 * 65.5, _0x57ec33 * 131.609375, _0x57ec33 * 63.5, _0x57ec33 * 137.609375);
  fill_path(_0x3fc27b, undefined, _0xe5dba5[2], _0x57ec33 * 8);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 59.5, _0x57ec33 * 72.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 38.5, _0x57ec33 * 80.609375, _0x57ec33 * 43.5, _0x57ec33 * 81.609375, _0x57ec33 * 37.5, _0x57ec33 * 89.609375);
  fill_path(_0x3fc27b, undefined, _0xe5dba5[2], _0x57ec33 * 4);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 60.5, _0x57ec33 * 85.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 75.5, _0x57ec33 * 91.609375, _0x57ec33 * 76.5, _0x57ec33 * 96.609375, _0x57ec33 * 81.5, _0x57ec33 * 104.609375);
  fill_path(_0x3fc27b, undefined, _0xe5dba5[2], _0x57ec33 * 4);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 68.5, _0x57ec33 * 122.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 79.5, _0x57ec33 * 130.609375, _0x57ec33 * 74.5, _0x57ec33 * 128.609375, _0x57ec33 * 80.5, _0x57ec33 * 134.609375);
  fill_path(_0x3fc27b, _0xe5dba5[1], _0xe5dba5[2], _0x57ec33 * 4);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 142.5, _0x57ec33 * 18.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 151.5, _0x57ec33 * 28.609375, _0x57ec33 * 151.5, _0x57ec33 * 32.609375, _0x57ec33 * 146.5, _0x57ec33 * 40.609375);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 137.5, _0x57ec33 * 26.609375, _0x57ec33 * 138.5, _0x57ec33 * 24.609375, _0x57ec33 * 142.5, _0x57ec33 * 19.609375);
  _0x3fc27b.closePath();
  fill_path(_0x3fc27b, _0xe5dba5[3]);
  _0x3fc27b.beginPath();
  _0x3fc27b.lineCap = "round";
  _0x3fc27b.lineJoin = "round";
  _0x3fc27b.moveTo(_0x57ec33 * 146.5, _0x57ec33 * 61.50892639160156);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 157.5, _0x57ec33 * 69.50892639160156, _0x57ec33 * 150.5, _0x57ec33 * 79.50892639160156, _0x57ec33 * 145.5, _0x57ec33 * 81.50892639160156);
  _0x3fc27b.bezierCurveTo(_0x57ec33 * 140.5, _0x57ec33 * 65.50892639160156, _0x57ec33 * 144.5, _0x57ec33 * 64.50892639160156, _0x57ec33 * 146.5, _0x57ec33 * 62.50892639160156);
  _0x3fc27b.closePath();
  fill_path(_0x3fc27b, _0xe5dba5[3]);
  return _0x382b67;
}
function create_ghost(_0x129e07, _0x410e12, _0x34f51e) {
  var _0x589603 = document.createElement("canvas");
  var _0x25b8fe = _0x589603.getContext("2d");
  _0x589603.width = _0x129e07 * 254;
  _0x589603.height = _0x129e07 * 288;
  _0x25b8fe.translate(0, 5);
  _0x25b8fe.globalAlpha = 0.5;
  _0x25b8fe.beginPath();
  _0x25b8fe.lineCap = "round";
  _0x25b8fe.lineJoin = "round";
  _0x25b8fe.moveTo(_0x129e07 * 218, _0x129e07 * 84.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 150, _0x129e07 * 13.640625, _0x129e07 * 186, _0x129e07 * 92.640625, _0x129e07 * 168, _0x129e07 * 103.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 151, _0x129e07 * 107.640625, _0x129e07 * 150, _0x129e07 * 61.640625, _0x129e07 * 144, _0x129e07 * 39.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 135, _0x129e07 * 1.640625, _0x129e07 * 113, _0x129e07 * 2.640625, _0x129e07 * 110, _0x129e07 * 40.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 106, _0x129e07 * 97.640625, _0x129e07 * 98, _0x129e07 * 102.640625, _0x129e07 * 83, _0x129e07 * 100.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 68, _0x129e07 * 98.640625, _0x129e07 * 67, _0x129e07 * 77.640625, _0x129e07 * 70, _0x129e07 * 55.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 75, _0x129e07 * 16.640625, _0x129e07 * 47, _0x129e07 * 52.640625, _0x129e07 * 38, _0x129e07 * 67.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 10, _0x129e07 * 113.640625, _0x129e07 * 10, _0x129e07 * 181.640625, _0x129e07 * 23, _0x129e07 * 213.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 45, _0x129e07 * 266.640625, _0x129e07 * 97, _0x129e07 * 277.640625, _0x129e07 * 147, _0x129e07 * 269.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 217, _0x129e07 * 259.640625, _0x129e07 * 236, _0x129e07 * 221.640625, _0x129e07 * 239, _0x129e07 * 166.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 239, _0x129e07 * 113.640625, _0x129e07 * 223, _0x129e07 * 90.640625, _0x129e07 * 219, _0x129e07 * 86.640625);
  _0x25b8fe.closePath();
  fill_path(_0x25b8fe, _0x34f51e[0], _0x34f51e[0], _0x129e07 * 4);
  circle(_0x25b8fe, _0x129e07 * 175, _0x129e07 * 220.640625, _0x129e07 * 29.546573405388315);
  fill_path(_0x25b8fe, _0x34f51e[0]);
  circle(_0x25b8fe, _0x129e07 * 79, _0x129e07 * 222.640625, _0x129e07 * 28.178005607210743);
  fill_path(_0x25b8fe, _0x34f51e[0]);
  circle(_0x25b8fe, _0x129e07 * 175, _0x129e07 * 214.640625, _0x129e07 * 27.892651361962706);
  fill_path(_0x25b8fe, _0x34f51e[0], _0x34f51e[0], _0x129e07 * 4);
  circle(_0x25b8fe, _0x129e07 * 79, _0x129e07 * 215.640625, _0x129e07 * 26.570660511172846);
  fill_path(_0x25b8fe, _0x34f51e[0], _0x34f51e[0], _0x129e07 * 4);
  _0x25b8fe.translate(0, -5);
  _0x25b8fe.globalAlpha = 1;
  _0x25b8fe.beginPath();
  _0x25b8fe.lineCap = "round";
  _0x25b8fe.lineJoin = "round";
  _0x25b8fe.moveTo(_0x129e07 * 218, _0x129e07 * 84.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 150, _0x129e07 * 13.640625, _0x129e07 * 186, _0x129e07 * 92.640625, _0x129e07 * 168, _0x129e07 * 103.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 151, _0x129e07 * 107.640625, _0x129e07 * 150, _0x129e07 * 61.640625, _0x129e07 * 144, _0x129e07 * 39.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 135, _0x129e07 * 1.640625, _0x129e07 * 113, _0x129e07 * 2.640625, _0x129e07 * 110, _0x129e07 * 40.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 106, _0x129e07 * 97.640625, _0x129e07 * 98, _0x129e07 * 102.640625, _0x129e07 * 83, _0x129e07 * 100.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 68, _0x129e07 * 98.640625, _0x129e07 * 67, _0x129e07 * 77.640625, _0x129e07 * 70, _0x129e07 * 55.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 75, _0x129e07 * 16.640625, _0x129e07 * 47, _0x129e07 * 52.640625, _0x129e07 * 38, _0x129e07 * 67.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 10, _0x129e07 * 113.640625, _0x129e07 * 10, _0x129e07 * 181.640625, _0x129e07 * 23, _0x129e07 * 213.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 45, _0x129e07 * 266.640625, _0x129e07 * 97, _0x129e07 * 277.640625, _0x129e07 * 147, _0x129e07 * 269.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 217, _0x129e07 * 259.640625, _0x129e07 * 236, _0x129e07 * 221.640625, _0x129e07 * 239, _0x129e07 * 166.640625);
  _0x25b8fe.bezierCurveTo(_0x129e07 * 239, _0x129e07 * 113.640625, _0x129e07 * 223, _0x129e07 * 90.640625, _0x129e07 * 219, _0x129e07 * 86.640625);
  _0x25b8fe.closePath();
  fill_path(_0x25b8fe, _0x34f51e[1], _0x34f51e[2], _0x129e07 * 4);
  circle(_0x25b8fe, _0x129e07 * 175, _0x129e07 * 222.640625, _0x129e07 * 26.546573405388315);
  fill_path(_0x25b8fe, _0x34f51e[3]);
  circle(_0x25b8fe, _0x129e07 * 79, _0x129e07 * 222.640625, _0x129e07 * 26.178005607210743);
  fill_path(_0x25b8fe, _0x34f51e[3]);
  circle(_0x25b8fe, _0x129e07 * 175, _0x129e07 * 210.640625, _0x129e07 * 26.892651361962706);
  fill_path(_0x25b8fe, _0x34f51e[4], _0x34f51e[5], _0x129e07 * 8);
  circle(_0x25b8fe, _0x129e07 * 79, _0x129e07 * 210.640625, _0x129e07 * 26.570660511172846);
  fill_path(_0x25b8fe, _0x34f51e[4], _0x34f51e[5], _0x129e07 * 8);
  return _0x589603;
}
function create_gemme_green(_0x16cfb7, _0x26ac29, _0x171038) {
  var _0x2d73c9 = document.createElement("canvas");
  var _0x28a75f = _0x2d73c9.getContext("2d");
  _0x2d73c9.width = _0x16cfb7 * 104;
  _0x2d73c9.height = _0x16cfb7 * 117;
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 4, _0x16cfb7 * 90);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 20, _0x16cfb7 * 99.5, _0x16cfb7 * 20, _0x16cfb7 * 99.5, _0x16cfb7 * 36, _0x16cfb7 * 109);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 67, _0x16cfb7 * 92, _0x16cfb7 * 67, _0x16cfb7 * 92, _0x16cfb7 * 98, _0x16cfb7 * 75);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 91, _0x16cfb7 * 27, _0x16cfb7 * 91, _0x16cfb7 * 27, _0x16cfb7 * 91, _0x16cfb7 * 28);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 72.5, _0x16cfb7 * 16, _0x16cfb7 * 72.5, _0x16cfb7 * 16, _0x16cfb7 * 54, _0x16cfb7 * 4);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 33.5, _0x16cfb7 * 10, _0x16cfb7 * 33.5, _0x16cfb7 * 10, _0x16cfb7 * 13, _0x16cfb7 * 16);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, _0x171038[0]);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 6, _0x16cfb7 * 76);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 13.5, _0x16cfb7 * 51.5, _0x16cfb7 * 13.5, _0x16cfb7 * 51.5, _0x16cfb7 * 21, _0x16cfb7 * 27);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 37.5, _0x16cfb7 * 17, _0x16cfb7 * 37.5, _0x16cfb7 * 17, _0x16cfb7 * 54, _0x16cfb7 * 7);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 33.5, _0x16cfb7 * 12.5, _0x16cfb7 * 33.5, _0x16cfb7 * 12.5, _0x16cfb7 * 13, _0x16cfb7 * 18);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, _0x171038[1]);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 24, _0x16cfb7 * 62);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 28.5, _0x16cfb7 * 53, _0x16cfb7 * 28.5, _0x16cfb7 * 53, _0x16cfb7 * 33, _0x16cfb7 * 44);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 41.5, _0x16cfb7 * 41, _0x16cfb7 * 41.5, _0x16cfb7 * 41, _0x16cfb7 * 50, _0x16cfb7 * 38);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 52.5, _0x16cfb7 * 35, _0x16cfb7 * 52.5, _0x16cfb7 * 35, _0x16cfb7 * 55, _0x16cfb7 * 32);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 52, _0x16cfb7 * 30, _0x16cfb7 * 52, _0x16cfb7 * 30, _0x16cfb7 * 49, _0x16cfb7 * 28);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 38, _0x16cfb7 * 31.5, _0x16cfb7 * 38, _0x16cfb7 * 31.5, _0x16cfb7 * 27, _0x16cfb7 * 35);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, _0x171038[1]);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 36, _0x16cfb7 * 107);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 66, _0x16cfb7 * 90.5, _0x16cfb7 * 66, _0x16cfb7 * 90.5, _0x16cfb7 * 96, _0x16cfb7 * 74);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 93, _0x16cfb7 * 52.5, _0x16cfb7 * 93, _0x16cfb7 * 52.5, _0x16cfb7 * 90, _0x16cfb7 * 31);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 87, _0x16cfb7 * 48, _0x16cfb7 * 87, _0x16cfb7 * 48, _0x16cfb7 * 84, _0x16cfb7 * 65);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, _0x171038[2]);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 1, _0x16cfb7 * 89);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 18, _0x16cfb7 * 100, _0x16cfb7 * 34, _0x16cfb7 * 110, _0x16cfb7 * 35, _0x16cfb7 * 111);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 67, _0x16cfb7 * 93, _0x16cfb7 * 67, _0x16cfb7 * 93, _0x16cfb7 * 99, _0x16cfb7 * 75);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 100, _0x16cfb7 * 78.5, _0x16cfb7 * 100, _0x16cfb7 * 78.5, _0x16cfb7 * 101, _0x16cfb7 * 82);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 68, _0x16cfb7 * 99, _0x16cfb7 * 68, _0x16cfb7 * 99, _0x16cfb7 * 35, _0x16cfb7 * 116);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 18, _0x16cfb7 * 106.5, _0x16cfb7 * 18, _0x16cfb7 * 106.5, _0x16cfb7 * 1, _0x16cfb7 * 97);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, _0x171038[3]);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 36, _0x16cfb7 * 107);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 66.5, _0x16cfb7 * 91.5, _0x16cfb7 * 66.5, _0x16cfb7 * 91.5, _0x16cfb7 * 97, _0x16cfb7 * 76);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 94.5, _0x16cfb7 * 52, _0x16cfb7 * 94.5, _0x16cfb7 * 52, _0x16cfb7 * 92, _0x16cfb7 * 28);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 73, _0x16cfb7 * 15.5, _0x16cfb7 * 73, _0x16cfb7 * 15.5, _0x16cfb7 * 54, _0x16cfb7 * 3);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 33, _0x16cfb7 * 9.5, _0x16cfb7 * 33, _0x16cfb7 * 9.5, _0x16cfb7 * 12, _0x16cfb7 * 16);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 8, _0x16cfb7 * 53, _0x16cfb7 * 8, _0x16cfb7 * 53, _0x16cfb7 * 4, _0x16cfb7 * 90);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 18.5, _0x16cfb7 * 99, _0x16cfb7 * 18.5, _0x16cfb7 * 99, _0x16cfb7 * 33, _0x16cfb7 * 108);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 22, _0x16cfb7 * 71);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 30, _0x16cfb7 * 76.5, _0x16cfb7 * 30, _0x16cfb7 * 76.5, _0x16cfb7 * 38, _0x16cfb7 * 82);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 53, _0x16cfb7 * 72, _0x16cfb7 * 53, _0x16cfb7 * 72, _0x16cfb7 * 68, _0x16cfb7 * 62);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 68, _0x16cfb7 * 52, _0x16cfb7 * 68, _0x16cfb7 * 52, _0x16cfb7 * 68, _0x16cfb7 * 42);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 59.5, _0x16cfb7 * 35.5, _0x16cfb7 * 59.5, _0x16cfb7 * 35.5, _0x16cfb7 * 51, _0x16cfb7 * 29);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 39.5, _0x16cfb7 * 32, _0x16cfb7 * 39.5, _0x16cfb7 * 32, _0x16cfb7 * 28, _0x16cfb7 * 35);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 25, _0x16cfb7 * 52, _0x16cfb7 * 25, _0x16cfb7 * 52, _0x16cfb7 * 22, _0x16cfb7 * 69);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 5, _0x16cfb7 * 89);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 20, _0x16cfb7 * 73, _0x16cfb7 * 12.5, _0x16cfb7 * 80.5, _0x16cfb7 * 20, _0x16cfb7 * 72);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 35, _0x16cfb7 * 102);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 36, _0x16cfb7 * 92.5, _0x16cfb7 * 36, _0x16cfb7 * 92.5, _0x16cfb7 * 37, _0x16cfb7 * 83);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 68, _0x16cfb7 * 62);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 81, _0x16cfb7 * 67.5, _0x16cfb7 * 81, _0x16cfb7 * 67.5, _0x16cfb7 * 94, _0x16cfb7 * 73);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 70, _0x16cfb7 * 41);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 80, _0x16cfb7 * 35.5, _0x16cfb7 * 80, _0x16cfb7 * 35.5, _0x16cfb7 * 90, _0x16cfb7 * 30);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 28, _0x16cfb7 * 33);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 21.5, _0x16cfb7 * 26.5, _0x16cfb7 * 21.5, _0x16cfb7 * 26.5, _0x16cfb7 * 15, _0x16cfb7 * 20);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  _0x28a75f.beginPath();
  _0x28a75f.lineCap = "round";
  _0x28a75f.lineJoin = "round";
  _0x28a75f.moveTo(_0x16cfb7 * 51, _0x16cfb7 * 28);
  _0x28a75f.bezierCurveTo(_0x16cfb7 * 53, _0x16cfb7 * 17, _0x16cfb7 * 53, _0x16cfb7 * 17, _0x16cfb7 * 55, _0x16cfb7 * 6);
  _0x28a75f.closePath();
  fill_path(_0x28a75f, undefined, _0x171038[4], _0x16cfb7 * 6);
  return _0x2d73c9;
}
function create_superhammer(_0x43e761, _0x5eab75, _0x11d1f9) {
  var _0x533459 = document.createElement("canvas");
  var _0x23dbc3 = _0x533459.getContext("2d");
  _0x533459.width = _0x43e761 * 105;
  _0x533459.height = _0x43e761 * 144;
  _0x23dbc3.globalAlpha = _0x5eab75 ? 0.5 : 1;
  _0x23dbc3.translate(_0x43e761 * -5, _0x43e761 * 0);
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 52.5, _0x43e761 * 91.5);
  round_rect(_0x23dbc3, _0x43e761 * -4.5, _0x43e761 * -39, _0x43e761 * 9, _0x43e761 * 78, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[0], _0x11d1f9[0], _0x43e761 * 3);
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 53, _0x43e761 * 36);
  round_rect(_0x23dbc3, _0x43e761 * -29, _0x43e761 * -17.5, _0x43e761 * 58, _0x43e761 * 35, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[0], _0x11d1f9[0], _0x43e761 * 4);
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 53.5, _0x43e761 * 35.5);
  round_rect(_0x23dbc3, _0x43e761 * -26.5, _0x43e761 * -15, _0x43e761 * 53, _0x43e761 * 30, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[0], _0x11d1f9[0], _0x43e761 * 4);
  _0x23dbc3.translate(_0x43e761 * 5, _0x43e761 * 0);
  _0x23dbc3.globalAlpha = 1;
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 52.5, _0x43e761 * 91.5);
  round_rect(_0x23dbc3, _0x43e761 * -4.5, _0x43e761 * -39, _0x43e761 * 9, _0x43e761 * 78, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[1], _0x11d1f9[2], _0x43e761 * 3);
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 53, _0x43e761 * 36);
  round_rect(_0x23dbc3, _0x43e761 * -29, _0x43e761 * -17.5, _0x43e761 * 58, _0x43e761 * 35, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[3], _0x11d1f9[4], _0x43e761 * 4);
  _0x23dbc3.save();
  _0x23dbc3.translate(_0x43e761 * 53.5, _0x43e761 * 35.5);
  round_rect(_0x23dbc3, _0x43e761 * -26.5, _0x43e761 * -15, _0x43e761 * 53, _0x43e761 * 30, _0x43e761 * 5);
  _0x23dbc3.restore();
  fill_path(_0x23dbc3, _0x11d1f9[5], _0x11d1f9[6], _0x43e761 * 4);
  _0x23dbc3.beginPath();
  _0x23dbc3.lineCap = "round";
  _0x23dbc3.lineJoin = "round";
  _0x23dbc3.moveTo(_0x43e761 * 49, _0x43e761 * 60.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 44, _0x43e761 * 56.5, _0x43e761 * 44, _0x43e761 * 56.5, _0x43e761 * 39, _0x43e761 * 52.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 39, _0x43e761 * 46.5, _0x43e761 * 39, _0x43e761 * 46.5, _0x43e761 * 39, _0x43e761 * 40.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 44, _0x43e761 * 44, _0x43e761 * 44, _0x43e761 * 44, _0x43e761 * 49, _0x43e761 * 47.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 49, _0x43e761 * 54, _0x43e761 * 49, _0x43e761 * 54, _0x43e761 * 49, _0x43e761 * 60.5);
  _0x23dbc3.closePath();
  fill_path(_0x23dbc3, _0x11d1f9[7], _0x11d1f9[6], _0x43e761 * 3);
  _0x23dbc3.beginPath();
  _0x23dbc3.lineCap = "round";
  _0x23dbc3.lineJoin = "round";
  _0x23dbc3.moveTo(_0x43e761 * 66, _0x43e761 * 40.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 66, _0x43e761 * 46.5, _0x43e761 * 66, _0x43e761 * 46.5, _0x43e761 * 66, _0x43e761 * 52.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 60.5, _0x43e761 * 56.5, _0x43e761 * 60.5, _0x43e761 * 56.5, _0x43e761 * 55, _0x43e761 * 60.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 56, _0x43e761 * 53, _0x43e761 * 56, _0x43e761 * 53, _0x43e761 * 57, _0x43e761 * 45.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 61.5, _0x43e761 * 43, _0x43e761 * 61.5, _0x43e761 * 43, _0x43e761 * 66, _0x43e761 * 40.5);
  _0x23dbc3.closePath();
  fill_path(_0x23dbc3, _0x11d1f9[7], _0x11d1f9[6], _0x43e761 * 3);
  _0x23dbc3.beginPath();
  _0x23dbc3.lineCap = "round";
  _0x23dbc3.lineJoin = "round";
  _0x23dbc3.moveTo(_0x43e761 * 52, _0x43e761 * 33.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 55.5, _0x43e761 * 41, _0x43e761 * 55.5, _0x43e761 * 41, _0x43e761 * 59, _0x43e761 * 48.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 56, _0x43e761 * 58, _0x43e761 * 56, _0x43e761 * 58, _0x43e761 * 53, _0x43e761 * 67.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 49, _0x43e761 * 58, _0x43e761 * 49, _0x43e761 * 58, _0x43e761 * 45, _0x43e761 * 48.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 48.5, _0x43e761 * 41, _0x43e761 * 48.5, _0x43e761 * 41, _0x43e761 * 52, _0x43e761 * 33.5);
  _0x23dbc3.closePath();
  fill_path(_0x23dbc3, _0x11d1f9[9], _0x11d1f9[8], _0x43e761 * 3);
  _0x23dbc3.beginPath();
  _0x23dbc3.lineCap = "round";
  _0x23dbc3.lineJoin = "round";
  _0x23dbc3.moveTo(_0x43e761 * 52, _0x43e761 * 47.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 54.5, _0x43e761 * 50.5, _0x43e761 * 54.5, _0x43e761 * 50.5, _0x43e761 * 57, _0x43e761 * 53.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 55, _0x43e761 * 60, _0x43e761 * 55, _0x43e761 * 60, _0x43e761 * 53, _0x43e761 * 66.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 50.5, _0x43e761 * 61, _0x43e761 * 50.5, _0x43e761 * 61, _0x43e761 * 48, _0x43e761 * 55.5);
  _0x23dbc3.bezierCurveTo(_0x43e761 * 50, _0x43e761 * 52, _0x43e761 * 50, _0x43e761 * 52, _0x43e761 * 52, _0x43e761 * 48.5);
  _0x23dbc3.closePath();
  fill_path(_0x23dbc3, _0x11d1f9[11], _0x11d1f9[10], _0x43e761 * 3);
  return _0x533459;
}
function create_dragon_sword(_0x10337b, _0x1b91cf, _0x2c661f) {
  var _0xea6754 = document.createElement("canvas");
  var _0x121726 = _0xea6754.getContext("2d");
  _0xea6754.width = _0x10337b * 46;
  _0xea6754.height = _0x10337b * 140;
  _0x121726.scale(_0x10337b * -1, _0x10337b * 1);
  _0x121726.translate(_0x10337b * -50, _0x10337b * 40);
  _0x121726.translate(_0x10337b * -20, 0);
  _0x121726.globalAlpha = _0x1b91cf ? 0.5 : 1;
  _0x121726.translate(_0x10337b * 10, 0);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.moveTo(_0x10337b * 22.599990844726562, _0x10337b * 85.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 17.599990844726562, _0x10337b * 83.94999694824219, _0x10337b * 17.599990844726562, _0x10337b * 83.94999694824219, _0x10337b * 12.599990844726562, _0x10337b * 81.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 19.599990844726562, _0x10337b * 73.94999694824219, _0x10337b * 2.5999908447265625, _0x10337b * 22.949996948242188, _0x10337b * 33.59999084472656, _0x10337b * 7.9499969482421875);
  _0x121726.bezierCurveTo(_0x10337b * 27.599990844726562, _0x10337b * 28.949996948242188, _0x10337b * 33.59999084472656, _0x10337b * 26.949996948242188, _0x10337b * 35.59999084472656, _0x10337b * 32.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 25.599990844726562, _0x10337b * 59.94999694824219, _0x10337b * 26.599990844726562, _0x10337b * 69.94999694824219, _0x10337b * 29.599990844726562, _0x10337b * 82.94999694824219);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[0]);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.translate(_0x10337b * -1, 0);
  _0x121726.moveTo(_0x10337b * 17.599990844726562, _0x10337b * 89.75);
  _0x121726.bezierCurveTo(_0x10337b * 24.599990844726562, _0x10337b * 99.75, _0x10337b * 24.599990844726562, _0x10337b * 101.75, _0x10337b * 20.599990844726562, _0x10337b * 111.75);
  _0x121726.bezierCurveTo(_0x10337b * 28.599990844726562, _0x10337b * 110.75, _0x10337b * 26.599990844726562, _0x10337b * 112.75, _0x10337b * 28.599990844726562, _0x10337b * 111.75);
  _0x121726.bezierCurveTo(_0x10337b * 30.599990844726562, _0x10337b * 96.75, _0x10337b * 32.59999084472656, _0x10337b * 96.75, _0x10337b * 30.599990844726562, _0x10337b * 87.75);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[0]);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.translate(_0x10337b * 1, 0);
  _0x121726.moveTo(_0x10337b * 7.5999908447265625, _0x10337b * 86.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 12.599990844726562, _0x10337b * 85.34999084472656, _0x10337b * 14.599990844726562, _0x10337b * 84.34999084472656, _0x10337b * 13.599990844726562, _0x10337b * 84.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 21.599990844726562, _0x10337b * 83.34999084472656, _0x10337b * 21.599990844726562, _0x10337b * 83.34999084472656, _0x10337b * 29.599990844726562, _0x10337b * 82.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 33.59999084472656, _0x10337b * 85.84999084472656, _0x10337b * 33.59999084472656, _0x10337b * 85.84999084472656, _0x10337b * 37.59999084472656, _0x10337b * 89.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 34.09999084472656, _0x10337b * 91.84999084472656, _0x10337b * 34.09999084472656, _0x10337b * 91.84999084472656, _0x10337b * 30.599990844726562, _0x10337b * 94.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 21.099990844726562, _0x10337b * 93.34999084472656, _0x10337b * 21.099990844726562, _0x10337b * 93.34999084472656, _0x10337b * 11.599990844726562, _0x10337b * 92.34999084472656);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[0]);
  _0x121726.save();
  _0x121726.translate(_0x10337b * 23.599990844726562, _0x10337b * 110.94999694824219);
  _0x121726.rotate(0);
  round_rect(_0x121726, _0x10337b * -7, _0x10337b * -4, _0x10337b * 14, _0x10337b * 8, _0x10337b * 10);
  _0x121726.restore();
  fill_path(_0x121726, _0x2c661f[0]);
  _0x121726.translate(_0x10337b * 0, 0);
  _0x121726.globalAlpha = 1;
  _0x121726.translate(_0x10337b * 10, 0);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.moveTo(_0x10337b * 22.599990844726562, _0x10337b * 85.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 17.599990844726562, _0x10337b * 83.94999694824219, _0x10337b * 17.599990844726562, _0x10337b * 83.94999694824219, _0x10337b * 12.599990844726562, _0x10337b * 81.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 19.599990844726562, _0x10337b * 73.94999694824219, _0x10337b * 2.5999908447265625, _0x10337b * 22.949996948242188, _0x10337b * 33.59999084472656, _0x10337b * 7.9499969482421875);
  _0x121726.bezierCurveTo(_0x10337b * 27.599990844726562, _0x10337b * 28.949996948242188, _0x10337b * 33.59999084472656, _0x10337b * 26.949996948242188, _0x10337b * 35.59999084472656, _0x10337b * 32.94999694824219);
  _0x121726.bezierCurveTo(_0x10337b * 25.599990844726562, _0x10337b * 59.94999694824219, _0x10337b * 26.599990844726562, _0x10337b * 69.94999694824219, _0x10337b * 29.599990844726562, _0x10337b * 82.94999694824219);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[3], _0x2c661f[4], _0x10337b * 3);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.translate(_0x10337b * -1, 0);
  _0x121726.moveTo(_0x10337b * 17.599990844726562, _0x10337b * 89.75);
  _0x121726.bezierCurveTo(_0x10337b * 24.599990844726562, _0x10337b * 99.75, _0x10337b * 24.599990844726562, _0x10337b * 101.75, _0x10337b * 20.599990844726562, _0x10337b * 111.75);
  _0x121726.bezierCurveTo(_0x10337b * 28.599990844726562, _0x10337b * 110.75, _0x10337b * 26.599990844726562, _0x10337b * 112.75, _0x10337b * 28.599990844726562, _0x10337b * 111.75);
  _0x121726.bezierCurveTo(_0x10337b * 30.599990844726562, _0x10337b * 96.75, _0x10337b * 32.59999084472656, _0x10337b * 96.75, _0x10337b * 30.599990844726562, _0x10337b * 87.75);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[1], _0x2c661f[2], _0x10337b * 3);
  _0x121726.beginPath();
  _0x121726.lineCap = "round";
  _0x121726.lineJoin = "round";
  _0x121726.translate(_0x10337b * 1, 0);
  _0x121726.moveTo(_0x10337b * 7.5999908447265625, _0x10337b * 86.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 12.599990844726562, _0x10337b * 85.34999084472656, _0x10337b * 14.599990844726562, _0x10337b * 84.34999084472656, _0x10337b * 13.599990844726562, _0x10337b * 84.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 21.599990844726562, _0x10337b * 83.34999084472656, _0x10337b * 21.599990844726562, _0x10337b * 83.34999084472656, _0x10337b * 29.599990844726562, _0x10337b * 82.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 33.59999084472656, _0x10337b * 85.84999084472656, _0x10337b * 33.59999084472656, _0x10337b * 85.84999084472656, _0x10337b * 37.59999084472656, _0x10337b * 89.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 34.09999084472656, _0x10337b * 91.84999084472656, _0x10337b * 34.09999084472656, _0x10337b * 91.84999084472656, _0x10337b * 30.599990844726562, _0x10337b * 94.34999084472656);
  _0x121726.bezierCurveTo(_0x10337b * 21.099990844726562, _0x10337b * 93.34999084472656, _0x10337b * 21.099990844726562, _0x10337b * 93.34999084472656, _0x10337b * 11.599990844726562, _0x10337b * 92.34999084472656);
  _0x121726.closePath();
  fill_path(_0x121726, _0x2c661f[1], _0x2c661f[2], _0x10337b * 3);
  _0x121726.save();
  _0x121726.translate(_0x10337b * 23.599990844726562, _0x10337b * 110.94999694824219);
  _0x121726.rotate(0);
  round_rect(_0x121726, _0x10337b * -7, _0x10337b * -4, _0x10337b * 14, _0x10337b * 8, _0x10337b * 10);
  _0x121726.restore();
  fill_path(_0x121726, _0x2c661f[1], _0x2c661f[2], _0x10337b * 3);
  return _0xea6754;
}
function create_cursed_sword(_0x309141, _0x1f3fa6, _0x59c692) {
  var _0x475f1f = document.createElement("canvas");
  var _0x4dfecf = _0x475f1f.getContext("2d");
  _0x475f1f.width = _0x309141 * 65;
  _0x475f1f.height = _0x309141 * 131;
  _0x4dfecf.globalAlpha = _0x1f3fa6 ? 0.5 : 1;
  _0x4dfecf.translate(3, 0);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 21.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 19.25, _0x309141 * 57.9375, _0x309141 * 19.25, _0x309141 * 57.9375, _0x309141 * 17.25, _0x309141 * 26.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 24.25, _0x309141 * 20.9375, _0x309141 * 24.25, _0x309141 * 20.9375, _0x309141 * 31.25, _0x309141 * 14.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 32.75, _0x309141 * 54.4375, _0x309141 * 32.75, _0x309141 * 54.4375, _0x309141 * 34.25, _0x309141 * 93.9375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[0]);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 30.25, _0x309141 * 5.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 39.25, _0x309141 * 14.9375, _0x309141 * 39.25, _0x309141 * 14.9375, _0x309141 * 48.25, _0x309141 * 23.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 44.75, _0x309141 * 56.4375, _0x309141 * 44.75, _0x309141 * 56.4375, _0x309141 * 41.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 36.25, _0x309141 * 88.9375, _0x309141 * 36.25, _0x309141 * 88.9375, _0x309141 * 31.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 30.75, _0x309141 * 47.9375, _0x309141 * 30.75, _0x309141 * 47.9375, _0x309141 * 30.25, _0x309141 * 6.9375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[0], _0x59c692[0], _0x309141 * 4);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 7.25, _0x309141 * 85.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 31.75, _0x309141 * 85.4375, _0x309141 * 31.75, _0x309141 * 85.4375, _0x309141 * 56.25, _0x309141 * 85.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 51.25, _0x309141 * 91.9375, _0x309141 * 51.25, _0x309141 * 91.9375, _0x309141 * 46.25, _0x309141 * 98.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 30.25, _0x309141 * 98.4375, _0x309141 * 30.25, _0x309141 * 98.4375, _0x309141 * 14.25, _0x309141 * 98.4375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[0], _0x59c692[0], _0x309141 * 4);
  _0x4dfecf.save();
  _0x4dfecf.translate(_0x309141 * 31.25, _0x309141 * 108.9375);
  round_rect(_0x4dfecf, _0x309141 * -6, _0x309141 * -14.5, _0x309141 * 12, _0x309141 * 29, _0x309141 * 10);
  _0x4dfecf.restore();
  _0x4dfecf.globalAlpha = 1;
  _0x4dfecf.translate(-3, 0);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 21.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 19.25, _0x309141 * 57.9375, _0x309141 * 19.25, _0x309141 * 57.9375, _0x309141 * 17.25, _0x309141 * 26.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 24.25, _0x309141 * 20.9375, _0x309141 * 24.25, _0x309141 * 20.9375, _0x309141 * 31.25, _0x309141 * 14.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 32.75, _0x309141 * 54.4375, _0x309141 * 32.75, _0x309141 * 54.4375, _0x309141 * 34.25, _0x309141 * 93.9375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[1]);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 30.25, _0x309141 * 5.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 39.25, _0x309141 * 14.9375, _0x309141 * 39.25, _0x309141 * 14.9375, _0x309141 * 48.25, _0x309141 * 23.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 44.75, _0x309141 * 56.4375, _0x309141 * 44.75, _0x309141 * 56.4375, _0x309141 * 41.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 36.25, _0x309141 * 88.9375, _0x309141 * 36.25, _0x309141 * 88.9375, _0x309141 * 31.25, _0x309141 * 88.9375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 30.75, _0x309141 * 47.9375, _0x309141 * 30.75, _0x309141 * 47.9375, _0x309141 * 30.25, _0x309141 * 6.9375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[2], _0x59c692[1], _0x309141 * 4);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 7.25, _0x309141 * 85.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 31.75, _0x309141 * 85.4375, _0x309141 * 31.75, _0x309141 * 85.4375, _0x309141 * 56.25, _0x309141 * 85.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 51.25, _0x309141 * 91.9375, _0x309141 * 51.25, _0x309141 * 91.9375, _0x309141 * 46.25, _0x309141 * 98.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 30.25, _0x309141 * 98.4375, _0x309141 * 30.25, _0x309141 * 98.4375, _0x309141 * 14.25, _0x309141 * 98.4375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[4], _0x59c692[5], _0x309141 * 4);
  _0x4dfecf.save();
  _0x4dfecf.translate(_0x309141 * 31.25, _0x309141 * 108.9375);
  round_rect(_0x4dfecf, _0x309141 * -6, _0x309141 * -14.5, _0x309141 * 12, _0x309141 * 29, _0x309141 * 10);
  _0x4dfecf.restore();
  fill_path(_0x4dfecf, _0x59c692[4], _0x59c692[5], _0x309141 * 4);
  _0x4dfecf.beginPath();
  _0x4dfecf.lineCap = "round";
  _0x4dfecf.lineJoin = "round";
  _0x4dfecf.moveTo(_0x309141 * 31.25, _0x309141 * 73.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 33.25, _0x309141 * 77.9375, _0x309141 * 33.25, _0x309141 * 77.9375, _0x309141 * 35.25, _0x309141 * 82.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 33.25, _0x309141 * 87.4375, _0x309141 * 33.25, _0x309141 * 87.4375, _0x309141 * 31.25, _0x309141 * 92.4375);
  _0x4dfecf.bezierCurveTo(_0x309141 * 29.25, _0x309141 * 87.9375, _0x309141 * 29.25, _0x309141 * 87.9375, _0x309141 * 27.25, _0x309141 * 83.4375);
  _0x4dfecf.closePath();
  fill_path(_0x4dfecf, _0x59c692[3], _0x59c692[1], _0x309141 * 2);
  return _0x475f1f;
}
function create_shop(_0x16624e, _0x5892c7) {
  var _0x2a2fe7 = document.createElement("canvas");
  var _0x2ed819 = _0x2a2fe7.getContext("2d");
  var _0x5e8422 = _0x16624e * 120;
  var _0xa0c186 = _0x16624e * 140;
  _0x2a2fe7.width = _0x5e8422;
  _0x2a2fe7.height = _0xa0c186;
  _0x2a2fe7.width = _0x16624e * 130;
  _0x2a2fe7.height = _0x16624e * 120;
  round_rect(_0x2ed819, _0x16624e * 10, _0x16624e * 12, _0x16624e * 110, _0x16624e * 90, _0x16624e * 10);
  fill_path(_0x2ed819, _0x5892c7[0]);
  round_rect(_0x2ed819, _0x16624e * 10, _0x16624e * 5, _0x16624e * 110, _0x16624e * 90, _0x16624e * 10);
  fill_path(_0x2ed819, _0x5892c7[1], _0x5892c7[2], _0x16624e * 4);
  var _0x5dc882 = create_rotated_img(-Math.PI / 5, create_pickaxe(_0x16624e * 0.5, true, ["rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  _0x2ed819.drawImage(_0x5dc882, _0x16624e * 12, _0x16624e * 18);
  var _0x5dc882 = create_rotated_img(Math.PI / 4, create_hammer(_0x16624e * 0.55, true, ["rgba(255, 255, 255, 0)", "#FFF", "#FFF", "#FFF", "#FFF"]));
  _0x2ed819.drawImage(_0x5dc882, _0x16624e * 36, _0x16624e * 16);
  return _0x2a2fe7;
}
function create_blue_orb(_0x23b3a3, _0x198a3b, _0x454e8d) {
  var _0x3dd823 = document.createElement("canvas");
  var _0x4d0af9 = _0x3dd823.getContext("2d");
  _0x3dd823.width = _0x23b3a3 * 137;
  _0x3dd823.height = _0x23b3a3 * 129;
  _0x4d0af9.globalAlpha = 0.5;
  circle(_0x4d0af9, _0x23b3a3 * 69, _0x23b3a3 * 64, _0x23b3a3 * 48.16637831516918);
  fill_path(_0x4d0af9, _0x454e8d[1]);
  _0x4d0af9.globalAlpha = 0.7;
  circle(_0x4d0af9, _0x23b3a3 * 69, _0x23b3a3 * 64, _0x23b3a3 * 38.23105625617661);
  fill_path(_0x4d0af9, _0x454e8d[2]);
  _0x4d0af9.globalAlpha = 0.7;
  circle(_0x4d0af9, _0x23b3a3 * 69, _0x23b3a3 * 64, _0x23b3a3 * 32.01562118716424);
  fill_path(_0x4d0af9, _0x454e8d[2], _0x454e8d[3], _0x23b3a3 * 4);
  _0x4d0af9.beginPath();
  _0x4d0af9.lineCap = "round";
  _0x4d0af9.lineJoin = "round";
  _0x4d0af9.moveTo(_0x23b3a3 * 72, _0x23b3a3 * 41);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 52, _0x23b3a3 * 41, _0x23b3a3 * 48, _0x23b3a3 * 50, _0x23b3a3 * 45, _0x23b3a3 * 58);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 43, _0x23b3a3 * 67, _0x23b3a3 * 45, _0x23b3a3 * 68, _0x23b3a3 * 46, _0x23b3a3 * 72);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 52, _0x23b3a3 * 53, _0x23b3a3 * 60, _0x23b3a3 * 48, _0x23b3a3 * 72, _0x23b3a3 * 42);
  _0x4d0af9.closePath();
  fill_path(_0x4d0af9, _0x454e8d[3]);
  _0x4d0af9.beginPath();
  _0x4d0af9.lineCap = "round";
  _0x4d0af9.lineJoin = "round";
  _0x4d0af9.moveTo(_0x23b3a3 * 93, _0x23b3a3 * 62);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 95, _0x23b3a3 * 72, _0x23b3a3 * 90, _0x23b3a3 * 81, _0x23b3a3 * 81, _0x23b3a3 * 87);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 74, _0x23b3a3 * 91, _0x23b3a3 * 69, _0x23b3a3 * 89, _0x23b3a3 * 64, _0x23b3a3 * 88);
  _0x4d0af9.bezierCurveTo(_0x23b3a3 * 77, _0x23b3a3 * 83, _0x23b3a3 * 84, _0x23b3a3 * 82, _0x23b3a3 * 92, _0x23b3a3 * 62);
  _0x4d0af9.closePath();
  fill_path(_0x4d0af9, _0x454e8d[3]);
  return _0x3dd823;
}
function create_dragon_cube(_0x2cd48c, _0x2d4610, _0x2a6e5f) {
  var _0x1f7b7a = document.createElement("canvas");
  var _0x3b48af = _0x1f7b7a.getContext("2d");
  _0x1f7b7a.width = _0x2cd48c * 137;
  _0x1f7b7a.height = _0x2cd48c * 129;
  _0x3b48af.globalAlpha = 0.4;
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 42.000030517578125, _0x2cd48c * 41.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 45.000030517578125, _0x2cd48c * 38.17047119140625, _0x2cd48c * 49.000030517578125, _0x2cd48c * 37.17047119140625, _0x2cd48c * 62.000030517578125, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 94.00003051757812, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 100.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 102.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 47.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 80.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 102.00003051757812, _0x2cd48c * 84.17047119140625, _0x2cd48c * 100.00003051757812, _0x2cd48c * 86.17047119140625, _0x2cd48c * 95.00003051757812, _0x2cd48c * 88.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 84.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 89.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 79.00003051757812, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 86.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 53.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 42.17047119140625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, undefined, _0x2a6e5f[2], _0x2cd48c * 40);
  _0x3b48af.globalAlpha = 0.4;
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 42.000030517578125, _0x2cd48c * 41.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 45.000030517578125, _0x2cd48c * 38.17047119140625, _0x2cd48c * 49.000030517578125, _0x2cd48c * 37.17047119140625, _0x2cd48c * 62.000030517578125, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 94.00003051757812, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 100.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 102.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 47.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 80.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 102.00003051757812, _0x2cd48c * 84.17047119140625, _0x2cd48c * 100.00003051757812, _0x2cd48c * 86.17047119140625, _0x2cd48c * 95.00003051757812, _0x2cd48c * 88.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 84.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 89.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 79.00003051757812, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 86.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 53.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 42.17047119140625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, undefined, _0x2a6e5f[1], _0x2cd48c * 20);
  _0x3b48af.globalAlpha = 0.8;
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 42.000030517578125, _0x2cd48c * 41.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 45.000030517578125, _0x2cd48c * 38.17047119140625, _0x2cd48c * 49.000030517578125, _0x2cd48c * 37.17047119140625, _0x2cd48c * 62.000030517578125, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 94.00003051757812, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 100.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 102.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 47.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 80.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 102.00003051757812, _0x2cd48c * 84.17047119140625, _0x2cd48c * 100.00003051757812, _0x2cd48c * 86.17047119140625, _0x2cd48c * 95.00003051757812, _0x2cd48c * 88.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 84.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 89.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 79.00003051757812, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 86.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 53.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 42.17047119140625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[0], _0x2a6e5f[1], _0x2cd48c * 4);
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 51.000030517578125, _0x2cd48c * 37.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 51.000030517578125, _0x2cd48c * 61.9886474609375, _0x2cd48c * 51.000030517578125, _0x2cd48c * 61.9886474609375, _0x2cd48c * 51.000030517578125, _0x2cd48c * 85.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 75.50003051757812, _0x2cd48c * 85.9886474609375, _0x2cd48c * 75.50003051757812, _0x2cd48c * 85.9886474609375, _0x2cd48c * 100.00003051757812, _0x2cd48c * 85.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 100.00003051757812, _0x2cd48c * 61.9886474609375, _0x2cd48c * 100.00003051757812, _0x2cd48c * 61.9886474609375, _0x2cd48c * 100.00003051757812, _0x2cd48c * 37.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 76.00003051757812, _0x2cd48c * 37.9886474609375, _0x2cd48c * 76.00003051757812, _0x2cd48c * 37.9886474609375, _0x2cd48c * 52.000030517578125, _0x2cd48c * 37.9886474609375);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[1], _0x2a6e5f[2], _0x2cd48c * 4);
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 99.00003051757812, _0x2cd48c * 38.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 93.50003051757812, _0x2cd48c * 44.9886474609375, _0x2cd48c * 93.50003051757812, _0x2cd48c * 44.9886474609375, _0x2cd48c * 88.00003051757812, _0x2cd48c * 50.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 88.00003051757812, _0x2cd48c * 72.4886474609375, _0x2cd48c * 88.00003051757812, _0x2cd48c * 72.4886474609375, _0x2cd48c * 88.00003051757812, _0x2cd48c * 93.9886474609375);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 94.00003051757812, _0x2cd48c * 90.4886474609375, _0x2cd48c * 94.00003051757812, _0x2cd48c * 90.4886474609375, _0x2cd48c * 100.00003051757812, _0x2cd48c * 86.9886474609375);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[1], _0x2a6e5f[2], _0x2cd48c * 4);
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 87.00003051757812, _0x2cd48c * 49.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 61.000030517578125, _0x2cd48c * 49.625, _0x2cd48c * 61.000030517578125, _0x2cd48c * 49.625, _0x2cd48c * 35.000030517578125, _0x2cd48c * 49.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 35.000030517578125, _0x2cd48c * 70.625, _0x2cd48c * 35.000030517578125, _0x2cd48c * 70.625, _0x2cd48c * 35.000030517578125, _0x2cd48c * 91.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 60.500030517578125, _0x2cd48c * 91.625, _0x2cd48c * 60.500030517578125, _0x2cd48c * 91.625, _0x2cd48c * 86.00003051757812, _0x2cd48c * 91.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 86.50003051757812, _0x2cd48c * 70.625, _0x2cd48c * 86.50003051757812, _0x2cd48c * 70.625, _0x2cd48c * 87.00003051757812, _0x2cd48c * 49.625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[1], _0x2a6e5f[3], _0x2cd48c * 4);
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 47.000030517578125, _0x2cd48c * 36.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 73.00003051757812, _0x2cd48c * 37.125, _0x2cd48c * 73.00003051757812, _0x2cd48c * 37.125, _0x2cd48c * 99.00003051757812, _0x2cd48c * 37.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 93.50003051757812, _0x2cd48c * 44.125, _0x2cd48c * 93.50003051757812, _0x2cd48c * 44.125, _0x2cd48c * 88.00003051757812, _0x2cd48c * 50.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 60.500030517578125, _0x2cd48c * 50.125, _0x2cd48c * 60.500030517578125, _0x2cd48c * 50.125, _0x2cd48c * 33.000030517578125, _0x2cd48c * 49.625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[1], _0x2a6e5f[3], _0x2cd48c * 4);
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 53.000030517578125, _0x2cd48c * 52.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 40.000030517578125, _0x2cd48c * 54.625, _0x2cd48c * 39.000030517578125, _0x2cd48c * 59.625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 67.625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 45.000030517578125, _0x2cd48c * 59.625, _0x2cd48c * 48.000030517578125, _0x2cd48c * 58.625, _0x2cd48c * 54.000030517578125, _0x2cd48c * 53.625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, _0x2a6e5f[3]);
  _0x3b48af.globalAlpha = 1;
  _0x3b48af.beginPath();
  _0x3b48af.lineCap = "round";
  _0x3b48af.lineJoin = "round";
  _0x3b48af.moveTo(_0x2cd48c * 42.000030517578125, _0x2cd48c * 41.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 45.000030517578125, _0x2cd48c * 38.17047119140625, _0x2cd48c * 49.000030517578125, _0x2cd48c * 37.17047119140625, _0x2cd48c * 62.000030517578125, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 78.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 94.00003051757812, _0x2cd48c * 38.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 100.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 102.00003051757812, _0x2cd48c * 38.17047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 47.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 63.67047119140625, _0x2cd48c * 101.00003051757812, _0x2cd48c * 80.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 102.00003051757812, _0x2cd48c * 84.17047119140625, _0x2cd48c * 100.00003051757812, _0x2cd48c * 86.17047119140625, _0x2cd48c * 95.00003051757812, _0x2cd48c * 88.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 84.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 89.00003051757812, _0x2cd48c * 94.17047119140625, _0x2cd48c * 79.00003051757812, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 59.500030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 94.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 94.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 86.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 69.67047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 53.17047119140625);
  _0x3b48af.bezierCurveTo(_0x2cd48c * 33.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 34.000030517578125, _0x2cd48c * 47.17047119140625, _0x2cd48c * 40.000030517578125, _0x2cd48c * 42.17047119140625);
  _0x3b48af.closePath();
  fill_path(_0x3b48af, undefined, _0x2a6e5f[3], _0x2cd48c * 4);
  return _0x1f7b7a;
}
function create_lake_edge(_0x3b7ab4, _0x526abe, _0x292d45) {
  var _0x43a207 = document.createElement("canvas");
  var _0x4f3875 = _0x43a207.getContext("2d");
  if (_0x292d45 == 0) {
    _0x43a207.width = _0x3b7ab4 * 543;
    _0x43a207.height = _0x3b7ab4 * 393;
    _0x4f3875.beginPath();
    _0x4f3875.lineCap = "round";
    _0x4f3875.lineJoin = "round";
    _0x4f3875.moveTo(_0x3b7ab4 * 164.23297119140625, _0x3b7ab4 * 72.80398559570312);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 289.23297119140625, _0x3b7ab4 * 41.803985595703125, _0x3b7ab4 * 413.23297119140625, _0x3b7ab4 * 86.80398559570312, _0x3b7ab4 * 441.23297119140625, _0x3b7ab4 * 105.80398559570312);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 513.2329711914062, _0x3b7ab4 * 149.80398559570312, _0x3b7ab4 * 475.23297119140625, _0x3b7ab4 * 224.80398559570312, _0x3b7ab4 * 451.23297119140625, _0x3b7ab4 * 258.8039855957031);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 410.23297119140625, _0x3b7ab4 * 315.8039855957031, _0x3b7ab4 * 380.23297119140625, _0x3b7ab4 * 314.8039855957031, _0x3b7ab4 * 289.23297119140625, _0x3b7ab4 * 320.8039855957031);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 160.23297119140625, _0x3b7ab4 * 329.8039855957031, _0x3b7ab4 * 102.23297119140625, _0x3b7ab4 * 312.8039855957031, _0x3b7ab4 * 72.23297119140625, _0x3b7ab4 * 258.8039855957031);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 32.23297119140625, _0x3b7ab4 * 156.80398559570312, _0x3b7ab4 * 93.23297119140625, _0x3b7ab4 * 92.80398559570312, _0x3b7ab4 * 164.23297119140625, _0x3b7ab4 * 72.80398559570312);
    _0x4f3875.closePath();
    fill_path(_0x4f3875, _0x526abe[0]);
  } else if (_0x292d45 == 1) {
    _0x43a207.width = _0x3b7ab4 * 543;
    _0x43a207.height = _0x3b7ab4 * 470;
    _0x4f3875.beginPath();
    _0x4f3875.lineCap = "round";
    _0x4f3875.lineJoin = "round";
    _0x4f3875.moveTo(_0x3b7ab4 * 238.23297119140625, _0x3b7ab4 * 34.622161865234375);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 423.23297119140625, _0x3b7ab4 * 21.622161865234375, _0x3b7ab4 * 474.23297119140625, _0x3b7ab4 * 96.62216186523438, _0x3b7ab4 * 499.23297119140625, _0x3b7ab4 * 167.62216186523438);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 536.2329711914062, _0x3b7ab4 * 288.6221618652344, _0x3b7ab4 * 487.23297119140625, _0x3b7ab4 * 367.6221618652344, _0x3b7ab4 * 403.23297119140625, _0x3b7ab4 * 412.6221618652344);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 287.23297119140625, _0x3b7ab4 * 466.6221618652344, _0x3b7ab4 * 127.23297119140625, _0x3b7ab4 * 424.6221618652344, _0x3b7ab4 * 50.23297119140625, _0x3b7ab4 * 318.6221618652344);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * -0.76702880859375, _0x3b7ab4 * 239.62216186523438, _0x3b7ab4 * 30.23297119140625, _0x3b7ab4 * 110.62216186523438, _0x3b7ab4 * 73.23297119140625, _0x3b7ab4 * 77.62216186523438);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 128.23297119140625, _0x3b7ab4 * 29.622161865234375, _0x3b7ab4 * 202.23297119140625, _0x3b7ab4 * 40.622161865234375, _0x3b7ab4 * 238.23297119140625, _0x3b7ab4 * 34.622161865234375);
    _0x4f3875.closePath();
    fill_path(_0x4f3875, _0x526abe[0]);
  } else {
    _0x43a207.width = _0x3b7ab4 * 543;
    _0x43a207.height = _0x3b7ab4 * 470;
    _0x4f3875.beginPath();
    _0x4f3875.lineCap = "round";
    _0x4f3875.lineJoin = "round";
    _0x4f3875.moveTo(_0x3b7ab4 * 268.23297119140625, _0x3b7ab4 * 23.349441528320312);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 424.23297119140625, _0x3b7ab4 * -0.6505584716796875, _0x3b7ab4 * 524.2329711914062, _0x3b7ab4 * 44.34944152832031, _0x3b7ab4 * 519.2329711914062, _0x3b7ab4 * 186.3494415283203);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 515.2329711914062, _0x3b7ab4 * 341.3494415283203, _0x3b7ab4 * 431.23297119140625, _0x3b7ab4 * 409.3494415283203, _0x3b7ab4 * 357.23297119140625, _0x3b7ab4 * 442.3494415283203);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 278.23297119140625, _0x3b7ab4 * 469.3494415283203, _0x3b7ab4 * 144.23297119140625, _0x3b7ab4 * 460.3494415283203, _0x3b7ab4 * 51.23297119140625, _0x3b7ab4 * 348.3494415283203);
    _0x4f3875.bezierCurveTo(_0x3b7ab4 * 3.23297119140625, _0x3b7ab4 * 274.3494415283203, _0x3b7ab4 * 45.23297119140625, _0x3b7ab4 * 87.34944152832031, _0x3b7ab4 * 268.23297119140625, _0x3b7ab4 * 23.349441528320312);
    _0x4f3875.closePath();
    fill_path(_0x4f3875, _0x526abe[0]);
  }
  return _0x43a207;
}
function create_lake_deep(_0x121fbc, _0x5bbfe2, _0x196ec6) {
  var _0x1b4bdd = document.createElement("canvas");
  var _0x2aabcf = _0x1b4bdd.getContext("2d");
  if (_0x196ec6 == 0) {
    _0x1b4bdd.width = _0x121fbc * 543;
    _0x1b4bdd.height = _0x121fbc * 393;
    _0x2aabcf.beginPath();
    _0x2aabcf.lineCap = "round";
    _0x2aabcf.lineJoin = "round";
    _0x2aabcf.moveTo(_0x121fbc * 109.5, _0x121fbc * 154.046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 143.5, _0x121fbc * 96.046875, _0x121fbc * 208.5, _0x121fbc * 92.046875, _0x121fbc * 288.5, _0x121fbc * 97.046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 357.5, _0x121fbc * 104.046875, _0x121fbc * 414.5, _0x121fbc * 132.046875, _0x121fbc * 422.5, _0x121fbc * 166.046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 431.5, _0x121fbc * 192.046875, _0x121fbc * 400.5, _0x121fbc * 261.046875, _0x121fbc * 332.5, _0x121fbc * 271.046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 272.5, _0x121fbc * 279.046875, _0x121fbc * 159.5, _0x121fbc * 285.046875, _0x121fbc * 126.5, _0x121fbc * 260.046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 99.5, _0x121fbc * 238.046875, _0x121fbc * 95.5, _0x121fbc * 183.046875, _0x121fbc * 109.5, _0x121fbc * 154.046875);
    _0x2aabcf.closePath();
    fill_path(_0x2aabcf, _0x5bbfe2[0]);
  } else if (_0x196ec6 == 1) {
    _0x1b4bdd.width = _0x121fbc * 543;
    _0x1b4bdd.height = _0x121fbc * 470;
    _0x2aabcf.beginPath();
    _0x2aabcf.lineCap = "round";
    _0x2aabcf.lineJoin = "round";
    _0x2aabcf.moveTo(_0x121fbc * 216.23297119140625, _0x121fbc * 100.34944152832031);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 349.23297119140625, _0x121fbc * 110.34944152832031, _0x121fbc * 422.23297119140625, _0x121fbc * 142.3494415283203, _0x121fbc * 434.23297119140625, _0x121fbc * 194.3494415283203);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 451.23297119140625, _0x121fbc * 268.3494415283203, _0x121fbc * 397.23297119140625, _0x121fbc * 367.3494415283203, _0x121fbc * 313.23297119140625, _0x121fbc * 351.3494415283203);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 148.23297119140625, _0x121fbc * 330.3494415283203, _0x121fbc * 106.23297119140625, _0x121fbc * 319.3494415283203, _0x121fbc * 87.23297119140625, _0x121fbc * 248.3494415283203);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 63.23297119140625, _0x121fbc * 164.3494415283203, _0x121fbc * 102.23297119140625, _0x121fbc * 90.34944152832031, _0x121fbc * 216.23297119140625, _0x121fbc * 100.34944152832031);
    _0x2aabcf.closePath();
    fill_path(_0x2aabcf, _0x5bbfe2[0]);
  } else {
    _0x1b4bdd.width = _0x121fbc * 543;
    _0x1b4bdd.height = _0x121fbc * 470;
    _0x2aabcf.beginPath();
    _0x2aabcf.lineCap = "round";
    _0x2aabcf.lineJoin = "round";
    _0x2aabcf.moveTo(_0x121fbc * 155.23297119140625, _0x121fbc * 126.71307373046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 232.23297119140625, _0x121fbc * 76.71307373046875, _0x121fbc * 340.23297119140625, _0x121fbc * 67.71307373046875, _0x121fbc * 411.23297119140625, _0x121fbc * 106.71307373046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 458.23297119140625, _0x121fbc * 131.71307373046875, _0x121fbc * 465.23297119140625, _0x121fbc * 280.71307373046875, _0x121fbc * 353.23297119140625, _0x121fbc * 363.71307373046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 299.23297119140625, _0x121fbc * 404.71307373046875, _0x121fbc * 143.23297119140625, _0x121fbc * 415.71307373046875, _0x121fbc * 88.23297119140625, _0x121fbc * 327.71307373046875);
    _0x2aabcf.bezierCurveTo(_0x121fbc * 48.23297119140625, _0x121fbc * 256.71307373046875, _0x121fbc * 93.23297119140625, _0x121fbc * 171.71307373046875, _0x121fbc * 155.23297119140625, _0x121fbc * 126.71307373046875);
    _0x2aabcf.closePath();
    fill_path(_0x2aabcf, _0x5bbfe2[0]);
  }
  return _0x1b4bdd;
}
function create_lake(_0x45c585, _0x5d042e, _0x36105b) {
  var _0xfe9a3 = document.createElement("canvas");
  var _0x4a364d = _0xfe9a3.getContext("2d");
  if (_0x36105b == 0) {
    _0xfe9a3.width = _0x45c585 * 543;
    _0xfe9a3.height = _0x45c585 * 393;
    _0x4a364d.beginPath();
    _0x4a364d.lineCap = "round";
    _0x4a364d.lineJoin = "round";
    _0x4a364d.moveTo(_0x45c585 * 196.23297119140625, _0x45c585 * 77.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 276.23297119140625, _0x45c585 * 69.8948974609375, _0x45c585 * 360.23297119140625, _0x45c585 * 87.8948974609375, _0x45c585 * 431.23297119140625, _0x45c585 * 121.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 474.23297119140625, _0x45c585 * 146.8948974609375, _0x45c585 * 463.23297119140625, _0x45c585 * 184.8948974609375, _0x45c585 * 437.23297119140625, _0x45c585 * 235.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 413.23297119140625, _0x45c585 * 277.8948974609375, _0x45c585 * 383.23297119140625, _0x45c585 * 289.8948974609375, _0x45c585 * 303.23297119140625, _0x45c585 * 289.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 178.23297119140625, _0x45c585 * 292.8948974609375, _0x45c585 * 127.23297119140625, _0x45c585 * 301.8948974609375, _0x45c585 * 92.23297119140625, _0x45c585 * 268.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 55.23297119140625, _0x45c585 * 234.8948974609375, _0x45c585 * 59.23297119140625, _0x45c585 * 147.8948974609375, _0x45c585 * 100.23297119140625, _0x45c585 * 112.8948974609375);
    _0x4a364d.bezierCurveTo(_0x45c585 * 133.23297119140625, _0x45c585 * 83.8948974609375, _0x45c585 * 167.23297119140625, _0x45c585 * 82.8948974609375, _0x45c585 * 196.23297119140625, _0x45c585 * 77.8948974609375);
    _0x4a364d.closePath();
    fill_path(_0x4a364d, _0x5d042e[0]);
  } else if (_0x36105b == 1) {
    _0xfe9a3.width = _0x45c585 * 543;
    _0xfe9a3.height = _0x45c585 * 470;
    _0x4a364d.beginPath();
    _0x4a364d.lineCap = "round";
    _0x4a364d.lineJoin = "round";
    _0x4a364d.moveTo(_0x45c585 * 285.23297119140625, _0x45c585 * 51.803985595703125);
    _0x4a364d.bezierCurveTo(_0x45c585 * 408.23297119140625, _0x45c585 * 57.803985595703125, _0x45c585 * 463.23297119140625, _0x45c585 * 107.80398559570312, _0x45c585 * 480.23297119140625, _0x45c585 * 183.80398559570312);
    _0x4a364d.bezierCurveTo(_0x45c585 * 500.23297119140625, _0x45c585 * 282.8039855957031, _0x45c585 * 473.23297119140625, _0x45c585 * 351.8039855957031, _0x45c585 * 373.23297119140625, _0x45c585 * 390.8039855957031);
    _0x4a364d.bezierCurveTo(_0x45c585 * 286.23297119140625, _0x45c585 * 420.8039855957031, _0x45c585 * 173.23297119140625, _0x45c585 * 396.8039855957031, _0x45c585 * 86.23297119140625, _0x45c585 * 331.8039855957031);
    _0x4a364d.bezierCurveTo(_0x45c585 * 13.23297119140625, _0x45c585 * 267.8039855957031, _0x45c585 * 19.23297119140625, _0x45c585 * 79.80398559570312, _0x45c585 * 143.23297119140625, _0x45c585 * 50.803985595703125);
    _0x4a364d.bezierCurveTo(_0x45c585 * 175.23297119140625, _0x45c585 * 41.803985595703125, _0x45c585 * 263.23297119140625, _0x45c585 * 51.803985595703125, _0x45c585 * 285.23297119140625, _0x45c585 * 51.803985595703125);
    _0x4a364d.closePath();
    fill_path(_0x4a364d, _0x5d042e[0]);
  } else {
    _0xfe9a3.width = _0x45c585 * 543;
    _0xfe9a3.height = _0x45c585 * 470;
    _0x4a364d.beginPath();
    _0x4a364d.lineCap = "round";
    _0x4a364d.lineJoin = "round";
    _0x4a364d.moveTo(_0x45c585 * 492.23297119140625, _0x45c585 * 170.0767059326172);
    _0x4a364d.bezierCurveTo(_0x45c585 * 493.23297119140625, _0x45c585 * 300.16761779785156, _0x45c585 * 411.23297119140625, _0x45c585 * 382.16761779785156, _0x45c585 * 321.23297119140625, _0x45c585 * 419.16761779785156);
    _0x4a364d.bezierCurveTo(_0x45c585 * 251.23297119140625, _0x45c585 * 444.16761779785156, _0x45c585 * 125.23297119140625, _0x45c585 * 422.16761779785156, _0x45c585 * 63.23297119140625, _0x45c585 * 347.16761779785156);
    _0x4a364d.bezierCurveTo(_0x45c585 * 22.23297119140625, _0x45c585 * 282.16761779785156, _0x45c585 * 53.23297119140625, _0x45c585 * 152.16761779785156, _0x45c585 * 179.23297119140625, _0x45c585 * 79.16761779785156);
    _0x4a364d.bezierCurveTo(_0x45c585 * 237.23297119140625, _0x45c585 * 46.16761779785156, _0x45c585 * 326.23297119140625, _0x45c585 * 27.167617797851562, _0x45c585 * 409.23297119140625, _0x45c585 * 50.16761779785156);
    _0x4a364d.bezierCurveTo(_0x45c585 * 470.23297119140625, _0x45c585 * 66.16761779785156, _0x45c585 * 493.23297119140625, _0x45c585 * 104.16761779785156, _0x45c585 * 492.23297119140625, _0x45c585 * 170.0767059326172);
    _0x4a364d.closePath();
    fill_path(_0x4a364d, _0x5d042e[0]);
  }
  return _0xfe9a3;
}
function create_shingle(_0x2ac751, _0x1ffc13, _0xead7ff) {
  var _0x30124e = document.createElement("canvas");
  var _0x521e24 = _0x30124e.getContext("2d");
  if (_0xead7ff == 0) {
    _0x30124e.width = _0x2ac751 * 543;
    _0x30124e.height = _0x2ac751 * 393;
    _0x521e24.translate(_0x2ac751 * 40, _0x2ac751 * 60);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 176, _0x2ac751 * 10.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 188, _0x2ac751 * 16.25, _0x2ac751 * 187, _0x2ac751 * 25.25, _0x2ac751 * 183, _0x2ac751 * 26.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 177, _0x2ac751 * 26.25, _0x2ac751 * 175, _0x2ac751 * 21.25, _0x2ac751 * 173, _0x2ac751 * 19.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 170, _0x2ac751 * 14.25, _0x2ac751 * 170, _0x2ac751 * 10.25, _0x2ac751 * 176, _0x2ac751 * 10.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 176, _0x2ac751 * 10.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 188, _0x2ac751 * 16.25, _0x2ac751 * 187, _0x2ac751 * 25.25, _0x2ac751 * 183, _0x2ac751 * 26.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 177, _0x2ac751 * 26.25, _0x2ac751 * 175, _0x2ac751 * 21.25, _0x2ac751 * 173, _0x2ac751 * 19.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 170, _0x2ac751 * 14.25, _0x2ac751 * 170, _0x2ac751 * 10.25, _0x2ac751 * 176, _0x2ac751 * 10.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 274, _0x2ac751 * 8);
    _0x521e24.bezierCurveTo(_0x2ac751 * 276, _0x2ac751 * 12, _0x2ac751 * 271, _0x2ac751 * 23, _0x2ac751 * 266, _0x2ac751 * 20);
    _0x521e24.bezierCurveTo(_0x2ac751 * 264, _0x2ac751 * 19, _0x2ac751 * 262, _0x2ac751 * 15, _0x2ac751 * 267, _0x2ac751 * 9);
    _0x521e24.bezierCurveTo(_0x2ac751 * 271, _0x2ac751 * 5, _0x2ac751 * 274, _0x2ac751 * 5, _0x2ac751 * 274, _0x2ac751 * 8);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 274, _0x2ac751 * 8);
    _0x521e24.bezierCurveTo(_0x2ac751 * 276, _0x2ac751 * 12, _0x2ac751 * 271, _0x2ac751 * 23, _0x2ac751 * 266, _0x2ac751 * 20);
    _0x521e24.bezierCurveTo(_0x2ac751 * 264, _0x2ac751 * 19, _0x2ac751 * 262, _0x2ac751 * 15, _0x2ac751 * 267, _0x2ac751 * 9);
    _0x521e24.bezierCurveTo(_0x2ac751 * 271, _0x2ac751 * 5, _0x2ac751 * 274, _0x2ac751 * 5, _0x2ac751 * 274, _0x2ac751 * 8);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 282, _0x2ac751 * 23.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 275, _0x2ac751 * 25.25, _0x2ac751 * 272, _0x2ac751 * 29.25, _0x2ac751 * 274, _0x2ac751 * 36.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 277, _0x2ac751 * 40.25, _0x2ac751 * 280, _0x2ac751 * 37.25, _0x2ac751 * 283, _0x2ac751 * 32.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 286, _0x2ac751 * 26.25, _0x2ac751 * 286, _0x2ac751 * 25.25, _0x2ac751 * 282, _0x2ac751 * 23.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 282, _0x2ac751 * 23.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 275, _0x2ac751 * 25.25, _0x2ac751 * 272, _0x2ac751 * 29.25, _0x2ac751 * 274, _0x2ac751 * 36.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 277, _0x2ac751 * 40.25, _0x2ac751 * 280, _0x2ac751 * 37.25, _0x2ac751 * 283, _0x2ac751 * 32.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 286, _0x2ac751 * 26.25, _0x2ac751 * 286, _0x2ac751 * 25.25, _0x2ac751 * 282, _0x2ac751 * 23.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 343.75, _0x2ac751 * 18.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 346.75, _0x2ac751 * 27.25, _0x2ac751 * 346.75, _0x2ac751 * 32.25, _0x2ac751 * 339.75, _0x2ac751 * 31.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 336.75, _0x2ac751 * 29.25, _0x2ac751 * 335.75, _0x2ac751 * 27.25, _0x2ac751 * 336.75, _0x2ac751 * 22.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 336.75, _0x2ac751 * 16.25, _0x2ac751 * 338.75, _0x2ac751 * 15.25, _0x2ac751 * 343.75, _0x2ac751 * 18.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 343.75, _0x2ac751 * 18.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 346.75, _0x2ac751 * 27.25, _0x2ac751 * 346.75, _0x2ac751 * 32.25, _0x2ac751 * 339.75, _0x2ac751 * 31.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 336.75, _0x2ac751 * 29.25, _0x2ac751 * 335.75, _0x2ac751 * 27.25, _0x2ac751 * 336.75, _0x2ac751 * 22.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 336.75, _0x2ac751 * 16.25, _0x2ac751 * 338.75, _0x2ac751 * 15.25, _0x2ac751 * 343.75, _0x2ac751 * 18.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 364.75, _0x2ac751 * 22.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 368.75, _0x2ac751 * 27.25, _0x2ac751 * 362.75, _0x2ac751 * 36.25, _0x2ac751 * 356.75, _0x2ac751 * 39.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 346.75, _0x2ac751 * 43.25, _0x2ac751 * 346.75, _0x2ac751 * 34.25, _0x2ac751 * 348.75, _0x2ac751 * 31.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 352.75, _0x2ac751 * 23.25, _0x2ac751 * 360.75, _0x2ac751 * 20.25, _0x2ac751 * 363.75, _0x2ac751 * 22.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 364.75, _0x2ac751 * 22.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 368.75, _0x2ac751 * 27.25, _0x2ac751 * 362.75, _0x2ac751 * 36.25, _0x2ac751 * 356.75, _0x2ac751 * 39.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 346.75, _0x2ac751 * 43.25, _0x2ac751 * 346.75, _0x2ac751 * 34.25, _0x2ac751 * 348.75, _0x2ac751 * 31.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 352.75, _0x2ac751 * 23.25, _0x2ac751 * 360.75, _0x2ac751 * 20.25, _0x2ac751 * 363.75, _0x2ac751 * 22.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 350.75, _0x2ac751 * 52.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 352.75, _0x2ac751 * 45.25, _0x2ac751 * 360.75, _0x2ac751 * 43.25, _0x2ac751 * 368.75, _0x2ac751 * 52.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 369.75, _0x2ac751 * 58.25, _0x2ac751 * 366.75, _0x2ac751 * 59.25, _0x2ac751 * 357.75, _0x2ac751 * 57.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 350.75, _0x2ac751 * 56.25, _0x2ac751 * 352.75, _0x2ac751 * 55.25, _0x2ac751 * 350.75, _0x2ac751 * 52.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 350.75, _0x2ac751 * 52.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 352.75, _0x2ac751 * 45.25, _0x2ac751 * 360.75, _0x2ac751 * 43.25, _0x2ac751 * 368.75, _0x2ac751 * 52.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 369.75, _0x2ac751 * 58.25, _0x2ac751 * 366.75, _0x2ac751 * 59.25, _0x2ac751 * 357.75, _0x2ac751 * 57.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 350.75, _0x2ac751 * 56.25, _0x2ac751 * 352.75, _0x2ac751 * 55.25, _0x2ac751 * 350.75, _0x2ac751 * 52.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 421.75, _0x2ac751 * 81.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 432.75, _0x2ac751 * 85.25, _0x2ac751 * 431.75, _0x2ac751 * 89.25, _0x2ac751 * 426.75, _0x2ac751 * 93.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.75, _0x2ac751 * 95.25, _0x2ac751 * 414.75, _0x2ac751 * 93.25, _0x2ac751 * 412.75, _0x2ac751 * 89.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 411.75, _0x2ac751 * 84.25, _0x2ac751 * 413.75, _0x2ac751 * 81.25, _0x2ac751 * 421.75, _0x2ac751 * 81.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 421.75, _0x2ac751 * 81.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 432.75, _0x2ac751 * 85.25, _0x2ac751 * 431.75, _0x2ac751 * 89.25, _0x2ac751 * 426.75, _0x2ac751 * 93.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.75, _0x2ac751 * 95.25, _0x2ac751 * 414.75, _0x2ac751 * 93.25, _0x2ac751 * 412.75, _0x2ac751 * 89.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 411.75, _0x2ac751 * 84.25, _0x2ac751 * 413.75, _0x2ac751 * 81.25, _0x2ac751 * 421.75, _0x2ac751 * 81.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 432.75, _0x2ac751 * 105.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 430.75, _0x2ac751 * 115.25, _0x2ac751 * 411.75, _0x2ac751 * 130.25, _0x2ac751 * 408.75, _0x2ac751 * 117.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 407.75, _0x2ac751 * 106.25, _0x2ac751 * 414.75, _0x2ac751 * 103.25, _0x2ac751 * 421.75, _0x2ac751 * 101.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 430.75, _0x2ac751 * 100.25, _0x2ac751 * 432.75, _0x2ac751 * 101.25, _0x2ac751 * 432.75, _0x2ac751 * 105.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 432.75, _0x2ac751 * 105.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 430.75, _0x2ac751 * 115.25, _0x2ac751 * 411.75, _0x2ac751 * 130.25, _0x2ac751 * 408.75, _0x2ac751 * 117.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 407.75, _0x2ac751 * 106.25, _0x2ac751 * 414.75, _0x2ac751 * 103.25, _0x2ac751 * 421.75, _0x2ac751 * 101.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 430.75, _0x2ac751 * 100.25, _0x2ac751 * 432.75, _0x2ac751 * 101.25, _0x2ac751 * 432.75, _0x2ac751 * 105.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 422.75, _0x2ac751 * 153.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 437.75, _0x2ac751 * 155.25, _0x2ac751 * 442.75, _0x2ac751 * 158.25, _0x2ac751 * 436.75, _0x2ac751 * 165.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 431.75, _0x2ac751 * 170.25, _0x2ac751 * 424.75, _0x2ac751 * 167.25, _0x2ac751 * 419.75, _0x2ac751 * 163.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 413.75, _0x2ac751 * 157.25, _0x2ac751 * 415.75, _0x2ac751 * 153.25, _0x2ac751 * 422.75, _0x2ac751 * 153.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 422.75, _0x2ac751 * 153.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 437.75, _0x2ac751 * 155.25, _0x2ac751 * 442.75, _0x2ac751 * 158.25, _0x2ac751 * 436.75, _0x2ac751 * 165.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 431.75, _0x2ac751 * 170.25, _0x2ac751 * 424.75, _0x2ac751 * 167.25, _0x2ac751 * 419.75, _0x2ac751 * 163.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 413.75, _0x2ac751 * 157.25, _0x2ac751 * 415.75, _0x2ac751 * 153.25, _0x2ac751 * 422.75, _0x2ac751 * 153.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 409.75, _0x2ac751 * 158.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 409.75, _0x2ac751 * 168.25, _0x2ac751 * 401.75, _0x2ac751 * 172.25, _0x2ac751 * 397.75, _0x2ac751 * 167.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 394.75, _0x2ac751 * 159.25, _0x2ac751 * 407.75, _0x2ac751 * 150.25, _0x2ac751 * 408.75, _0x2ac751 * 158.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 409.75, _0x2ac751 * 158.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 409.75, _0x2ac751 * 168.25, _0x2ac751 * 401.75, _0x2ac751 * 172.25, _0x2ac751 * 397.75, _0x2ac751 * 167.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 394.75, _0x2ac751 * 159.25, _0x2ac751 * 407.75, _0x2ac751 * 150.25, _0x2ac751 * 408.75, _0x2ac751 * 158.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 204, _0x2ac751 * 238.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 204, _0x2ac751 * 248.25, _0x2ac751 * 184, _0x2ac751 * 255.25, _0x2ac751 * 180, _0x2ac751 * 247.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 177, _0x2ac751 * 241.25, _0x2ac751 * 187, _0x2ac751 * 236.25, _0x2ac751 * 192, _0x2ac751 * 235.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 201, _0x2ac751 * 233.25, _0x2ac751 * 204, _0x2ac751 * 233.25, _0x2ac751 * 204, _0x2ac751 * 238.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 204, _0x2ac751 * 238.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 204, _0x2ac751 * 248.25, _0x2ac751 * 184, _0x2ac751 * 255.25, _0x2ac751 * 180, _0x2ac751 * 247.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 177, _0x2ac751 * 241.25, _0x2ac751 * 187, _0x2ac751 * 236.25, _0x2ac751 * 192, _0x2ac751 * 235.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 201, _0x2ac751 * 233.25, _0x2ac751 * 204, _0x2ac751 * 233.25, _0x2ac751 * 204, _0x2ac751 * 238.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 208, _0x2ac751 * 246.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 202, _0x2ac751 * 255.25, _0x2ac751 * 204, _0x2ac751 * 258.25, _0x2ac751 * 212, _0x2ac751 * 255.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 217, _0x2ac751 * 250.25, _0x2ac751 * 217, _0x2ac751 * 248.25, _0x2ac751 * 216, _0x2ac751 * 244.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 210, _0x2ac751 * 241.25, _0x2ac751 * 209, _0x2ac751 * 245.25, _0x2ac751 * 208, _0x2ac751 * 246.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 208, _0x2ac751 * 246.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 202, _0x2ac751 * 255.25, _0x2ac751 * 204, _0x2ac751 * 258.25, _0x2ac751 * 212, _0x2ac751 * 255.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 217, _0x2ac751 * 250.25, _0x2ac751 * 217, _0x2ac751 * 248.25, _0x2ac751 * 216, _0x2ac751 * 244.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 210, _0x2ac751 * 241.25, _0x2ac751 * 209, _0x2ac751 * 245.25, _0x2ac751 * 208, _0x2ac751 * 246.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 197, _0x2ac751 * 258.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 194, _0x2ac751 * 265.25, _0x2ac751 * 186, _0x2ac751 * 270.25, _0x2ac751 * 185, _0x2ac751 * 262.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 187, _0x2ac751 * 255.25, _0x2ac751 * 191, _0x2ac751 * 252.25, _0x2ac751 * 195, _0x2ac751 * 253.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 198, _0x2ac751 * 256.25, _0x2ac751 * 197, _0x2ac751 * 257.25, _0x2ac751 * 197, _0x2ac751 * 258.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 197, _0x2ac751 * 258.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 194, _0x2ac751 * 265.25, _0x2ac751 * 186, _0x2ac751 * 270.25, _0x2ac751 * 185, _0x2ac751 * 262.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 187, _0x2ac751 * 255.25, _0x2ac751 * 191, _0x2ac751 * 252.25, _0x2ac751 * 195, _0x2ac751 * 253.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 198, _0x2ac751 * 256.25, _0x2ac751 * 197, _0x2ac751 * 257.25, _0x2ac751 * 197, _0x2ac751 * 258.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 24, _0x2ac751 * 111.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 32, _0x2ac751 * 115.25, _0x2ac751 * 29, _0x2ac751 * 123.25, _0x2ac751 * 22, _0x2ac751 * 133.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 15, _0x2ac751 * 140.25, _0x2ac751 * 7, _0x2ac751 * 137.25, _0x2ac751 * 9, _0x2ac751 * 125.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 12, _0x2ac751 * 114.25, _0x2ac751 * 20, _0x2ac751 * 110.25, _0x2ac751 * 24, _0x2ac751 * 111.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 24, _0x2ac751 * 111.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 32, _0x2ac751 * 115.25, _0x2ac751 * 29, _0x2ac751 * 123.25, _0x2ac751 * 22, _0x2ac751 * 133.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 15, _0x2ac751 * 140.25, _0x2ac751 * 7, _0x2ac751 * 137.25, _0x2ac751 * 9, _0x2ac751 * 125.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 12, _0x2ac751 * 114.25, _0x2ac751 * 20, _0x2ac751 * 110.25, _0x2ac751 * 24, _0x2ac751 * 111.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 33, _0x2ac751 * 137.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 41, _0x2ac751 * 142.25, _0x2ac751 * 40, _0x2ac751 * 145.25, _0x2ac751 * 35, _0x2ac751 * 147.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 22, _0x2ac751 * 147.25, _0x2ac751 * 18, _0x2ac751 * 144.25, _0x2ac751 * 22, _0x2ac751 * 138.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 26, _0x2ac751 * 133.25, _0x2ac751 * 31, _0x2ac751 * 136.25, _0x2ac751 * 33, _0x2ac751 * 137.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 33, _0x2ac751 * 137.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 41, _0x2ac751 * 142.25, _0x2ac751 * 40, _0x2ac751 * 145.25, _0x2ac751 * 35, _0x2ac751 * 147.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 22, _0x2ac751 * 147.25, _0x2ac751 * 18, _0x2ac751 * 144.25, _0x2ac751 * 22, _0x2ac751 * 138.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 26, _0x2ac751 * 133.25, _0x2ac751 * 31, _0x2ac751 * 136.25, _0x2ac751 * 33, _0x2ac751 * 137.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 36, _0x2ac751 * 187.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25, _0x2ac751 * 198.25, _0x2ac751 * 19, _0x2ac751 * 193.25, _0x2ac751 * 23, _0x2ac751 * 187.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 26, _0x2ac751 * 178.25, _0x2ac751 * 32, _0x2ac751 * 173.25, _0x2ac751 * 38, _0x2ac751 * 175.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 44, _0x2ac751 * 180.25, _0x2ac751 * 39, _0x2ac751 * 186.25, _0x2ac751 * 36, _0x2ac751 * 187.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 36, _0x2ac751 * 187.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25, _0x2ac751 * 198.25, _0x2ac751 * 19, _0x2ac751 * 193.25, _0x2ac751 * 23, _0x2ac751 * 187.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 26, _0x2ac751 * 178.25, _0x2ac751 * 32, _0x2ac751 * 173.25, _0x2ac751 * 38, _0x2ac751 * 175.25);
    _0x521e24.bezierCurveTo(_0x2ac751 * 44, _0x2ac751 * 180.25, _0x2ac751 * 39, _0x2ac751 * 186.25, _0x2ac751 * 36, _0x2ac751 * 187.25);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
  } else if (_0xead7ff == 1) {
    _0x30124e.width = _0x2ac751 * 543;
    _0x30124e.height = _0x2ac751 * 470;
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 377.1428527832031, _0x2ac751 * 56.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 384.1428527832031, _0x2ac751 * 44.87498474121094, _0x2ac751 * 403.1428527832031, _0x2ac751 * 39.87498474121094, _0x2ac751 * 403.1428527832031, _0x2ac751 * 51.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 402.1428527832031, _0x2ac751 * 59.87498474121094, _0x2ac751 * 396.1428527832031, _0x2ac751 * 61.87498474121094, _0x2ac751 * 389.1428527832031, _0x2ac751 * 64.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 376.1428527832031, _0x2ac751 * 67.87498474121094, _0x2ac751 * 375.1428527832031, _0x2ac751 * 62.87498474121094, _0x2ac751 * 377.1428527832031, _0x2ac751 * 56.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 377.1428527832031, _0x2ac751 * 56.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 384.1428527832031, _0x2ac751 * 44.87498474121094, _0x2ac751 * 403.1428527832031, _0x2ac751 * 39.87498474121094, _0x2ac751 * 403.1428527832031, _0x2ac751 * 51.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 402.1428527832031, _0x2ac751 * 59.87498474121094, _0x2ac751 * 396.1428527832031, _0x2ac751 * 61.87498474121094, _0x2ac751 * 389.1428527832031, _0x2ac751 * 64.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 376.1428527832031, _0x2ac751 * 67.87498474121094, _0x2ac751 * 375.1428527832031, _0x2ac751 * 62.87498474121094, _0x2ac751 * 377.1428527832031, _0x2ac751 * 56.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 349.1428527832031, _0x2ac751 * 44.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 358.1428527832031, _0x2ac751 * 37.303558349609375, _0x2ac751 * 370.1428527832031, _0x2ac751 * 47.303558349609375, _0x2ac751 * 364.1428527832031, _0x2ac751 * 51.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 356.1428527832031, _0x2ac751 * 55.303558349609375, _0x2ac751 * 345.1428527832031, _0x2ac751 * 48.303558349609375, _0x2ac751 * 349.1428527832031, _0x2ac751 * 45.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 349.1428527832031, _0x2ac751 * 44.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 358.1428527832031, _0x2ac751 * 37.303558349609375, _0x2ac751 * 370.1428527832031, _0x2ac751 * 47.303558349609375, _0x2ac751 * 364.1428527832031, _0x2ac751 * 51.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 356.1428527832031, _0x2ac751 * 55.303558349609375, _0x2ac751 * 345.1428527832031, _0x2ac751 * 48.303558349609375, _0x2ac751 * 349.1428527832031, _0x2ac751 * 45.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 480.1428527832031, _0x2ac751 * 152.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 477.1428527832031, _0x2ac751 * 145.30355834960938, _0x2ac751 * 480.1428527832031, _0x2ac751 * 140.30355834960938, _0x2ac751 * 489.1428527832031, _0x2ac751 * 135.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 497.1428527832031, _0x2ac751 * 133.30355834960938, _0x2ac751 * 498.1428527832031, _0x2ac751 * 140.30355834960938, _0x2ac751 * 491.1428527832031, _0x2ac751 * 147.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 485.1428527832031, _0x2ac751 * 155.30355834960938, _0x2ac751 * 482.1428527832031, _0x2ac751 * 156.30355834960938, _0x2ac751 * 480.1428527832031, _0x2ac751 * 152.30355834960938);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 480.1428527832031, _0x2ac751 * 152.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 477.1428527832031, _0x2ac751 * 145.30355834960938, _0x2ac751 * 480.1428527832031, _0x2ac751 * 140.30355834960938, _0x2ac751 * 489.1428527832031, _0x2ac751 * 135.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 497.1428527832031, _0x2ac751 * 133.30355834960938, _0x2ac751 * 498.1428527832031, _0x2ac751 * 140.30355834960938, _0x2ac751 * 491.1428527832031, _0x2ac751 * 147.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 485.1428527832031, _0x2ac751 * 155.30355834960938, _0x2ac751 * 482.1428527832031, _0x2ac751 * 156.30355834960938, _0x2ac751 * 480.1428527832031, _0x2ac751 * 152.30355834960938);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 211.14285278320312, _0x2ac751 * 27.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 223.14285278320312, _0x2ac751 * 21.303558349609375, _0x2ac751 * 234.14285278320312, _0x2ac751 * 34.303558349609375, _0x2ac751 * 232.14285278320312, _0x2ac751 * 42.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 228.14285278320312, _0x2ac751 * 49.303558349609375, _0x2ac751 * 223.14285278320312, _0x2ac751 * 45.303558349609375, _0x2ac751 * 213.14285278320312, _0x2ac751 * 38.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 205.14285278320312, _0x2ac751 * 31.303558349609375, _0x2ac751 * 208.14285278320312, _0x2ac751 * 29.303558349609375, _0x2ac751 * 211.14285278320312, _0x2ac751 * 27.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 211.14285278320312, _0x2ac751 * 27.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 223.14285278320312, _0x2ac751 * 21.303558349609375, _0x2ac751 * 234.14285278320312, _0x2ac751 * 34.303558349609375, _0x2ac751 * 232.14285278320312, _0x2ac751 * 42.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 228.14285278320312, _0x2ac751 * 49.303558349609375, _0x2ac751 * 223.14285278320312, _0x2ac751 * 45.303558349609375, _0x2ac751 * 213.14285278320312, _0x2ac751 * 38.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 205.14285278320312, _0x2ac751 * 31.303558349609375, _0x2ac751 * 208.14285278320312, _0x2ac751 * 29.303558349609375, _0x2ac751 * 211.14285278320312, _0x2ac751 * 27.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 364.1428527832031, _0x2ac751 * 73.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 354.1428527832031, _0x2ac751 * 72.30355834960938, _0x2ac751 * 356.1428527832031, _0x2ac751 * 64.30355834960938, _0x2ac751 * 359.1428527832031, _0x2ac751 * 59.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 365.1428527832031, _0x2ac751 * 55.303558349609375, _0x2ac751 * 366.1428527832031, _0x2ac751 * 61.303558349609375, _0x2ac751 * 366.1428527832031, _0x2ac751 * 69.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 365.1428527832031, _0x2ac751 * 73.30355834960938, _0x2ac751 * 365.1428527832031, _0x2ac751 * 73.30355834960938, _0x2ac751 * 364.1428527832031, _0x2ac751 * 73.30355834960938);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 364.1428527832031, _0x2ac751 * 73.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 354.1428527832031, _0x2ac751 * 72.30355834960938, _0x2ac751 * 356.1428527832031, _0x2ac751 * 64.30355834960938, _0x2ac751 * 359.1428527832031, _0x2ac751 * 59.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 365.1428527832031, _0x2ac751 * 55.303558349609375, _0x2ac751 * 366.1428527832031, _0x2ac751 * 61.303558349609375, _0x2ac751 * 366.1428527832031, _0x2ac751 * 69.30355834960938);
    _0x521e24.bezierCurveTo(_0x2ac751 * 365.1428527832031, _0x2ac751 * 73.30355834960938, _0x2ac751 * 365.1428527832031, _0x2ac751 * 73.30355834960938, _0x2ac751 * 364.1428527832031, _0x2ac751 * 73.30355834960938);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 182.14285278320312, _0x2ac751 * 57.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 173.14285278320312, _0x2ac751 * 52.303558349609375, _0x2ac751 * 177.14285278320312, _0x2ac751 * 39.303558349609375, _0x2ac751 * 198.14285278320312, _0x2ac751 * 36.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 209.14285278320312, _0x2ac751 * 37.303558349609375, _0x2ac751 * 206.14285278320312, _0x2ac751 * 49.303558349609375, _0x2ac751 * 193.14285278320312, _0x2ac751 * 53.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 187.14285278320312, _0x2ac751 * 56.303558349609375, _0x2ac751 * 185.14285278320312, _0x2ac751 * 57.303558349609375, _0x2ac751 * 182.14285278320312, _0x2ac751 * 57.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 182.14285278320312, _0x2ac751 * 57.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 173.14285278320312, _0x2ac751 * 52.303558349609375, _0x2ac751 * 177.14285278320312, _0x2ac751 * 39.303558349609375, _0x2ac751 * 198.14285278320312, _0x2ac751 * 36.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 209.14285278320312, _0x2ac751 * 37.303558349609375, _0x2ac751 * 206.14285278320312, _0x2ac751 * 49.303558349609375, _0x2ac751 * 193.14285278320312, _0x2ac751 * 53.303558349609375);
    _0x521e24.bezierCurveTo(_0x2ac751 * 187.14285278320312, _0x2ac751 * 56.303558349609375, _0x2ac751 * 185.14285278320312, _0x2ac751 * 57.303558349609375, _0x2ac751 * 182.14285278320312, _0x2ac751 * 57.303558349609375);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 489.1428527832031, _0x2ac751 * 267.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 500.1428527832031, _0x2ac751 * 257.0178527832031, _0x2ac751 * 511.1428527832031, _0x2ac751 * 269.0178527832031, _0x2ac751 * 514.1428527832031, _0x2ac751 * 275.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 519.1428527832031, _0x2ac751 * 285.0178527832031, _0x2ac751 * 509.1428527832031, _0x2ac751 * 288.0178527832031, _0x2ac751 * 501.1428527832031, _0x2ac751 * 282.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 488.1428527832031, _0x2ac751 * 277.0178527832031, _0x2ac751 * 485.1428527832031, _0x2ac751 * 271.0178527832031, _0x2ac751 * 489.1428527832031, _0x2ac751 * 267.0178527832031);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 489.1428527832031, _0x2ac751 * 267.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 500.1428527832031, _0x2ac751 * 257.0178527832031, _0x2ac751 * 511.1428527832031, _0x2ac751 * 269.0178527832031, _0x2ac751 * 514.1428527832031, _0x2ac751 * 275.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 519.1428527832031, _0x2ac751 * 285.0178527832031, _0x2ac751 * 509.1428527832031, _0x2ac751 * 288.0178527832031, _0x2ac751 * 501.1428527832031, _0x2ac751 * 282.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 488.1428527832031, _0x2ac751 * 277.0178527832031, _0x2ac751 * 485.1428527832031, _0x2ac751 * 271.0178527832031, _0x2ac751 * 489.1428527832031, _0x2ac751 * 267.0178527832031);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 480.1428527832031, _0x2ac751 * 122.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 469.1428527832031, _0x2ac751 * 119.73213958740234, _0x2ac751 * 473.1428527832031, _0x2ac751 * 108.73213958740234, _0x2ac751 * 476.1428527832031, _0x2ac751 * 107.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 483.1428527832031, _0x2ac751 * 102.73213958740234, _0x2ac751 * 485.1428527832031, _0x2ac751 * 118.73213958740234, _0x2ac751 * 480.1428527832031, _0x2ac751 * 122.73213958740234);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 480.1428527832031, _0x2ac751 * 122.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 469.1428527832031, _0x2ac751 * 119.73213958740234, _0x2ac751 * 473.1428527832031, _0x2ac751 * 108.73213958740234, _0x2ac751 * 476.1428527832031, _0x2ac751 * 107.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 483.1428527832031, _0x2ac751 * 102.73213958740234, _0x2ac751 * 485.1428527832031, _0x2ac751 * 118.73213958740234, _0x2ac751 * 480.1428527832031, _0x2ac751 * 122.73213958740234);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 470.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.bezierCurveTo(_0x2ac751 * 472.1428527832031, _0x2ac751 * 277.3035697937012, _0x2ac751 * 480.1428527832031, _0x2ac751 * 277.3035697937012, _0x2ac751 * 489.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.bezierCurveTo(_0x2ac751 * 490.1428527832031, _0x2ac751 * 292.3035697937012, _0x2ac751 * 482.1428527832031, _0x2ac751 * 294.3035697937012, _0x2ac751 * 470.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 470.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.bezierCurveTo(_0x2ac751 * 472.1428527832031, _0x2ac751 * 277.3035697937012, _0x2ac751 * 480.1428527832031, _0x2ac751 * 277.3035697937012, _0x2ac751 * 489.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.bezierCurveTo(_0x2ac751 * 490.1428527832031, _0x2ac751 * 292.3035697937012, _0x2ac751 * 482.1428527832031, _0x2ac751 * 294.3035697937012, _0x2ac751 * 470.1428527832031, _0x2ac751 * 286.3035697937012);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 518.1428527832031, _0x2ac751 * 265.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 524.1428527832031, _0x2ac751 * 262.0178565979004, _0x2ac751 * 521.1428527832031, _0x2ac751 * 247.0178565979004, _0x2ac751 * 514.1428527832031, _0x2ac751 * 250.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 510.1428527832031, _0x2ac751 * 252.0178565979004, _0x2ac751 * 509.1428527832031, _0x2ac751 * 266.0178565979004, _0x2ac751 * 518.1428527832031, _0x2ac751 * 266.0178565979004);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 518.1428527832031, _0x2ac751 * 265.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 524.1428527832031, _0x2ac751 * 262.0178565979004, _0x2ac751 * 521.1428527832031, _0x2ac751 * 247.0178565979004, _0x2ac751 * 514.1428527832031, _0x2ac751 * 250.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 510.1428527832031, _0x2ac751 * 252.0178565979004, _0x2ac751 * 509.1428527832031, _0x2ac751 * 266.0178565979004, _0x2ac751 * 518.1428527832031, _0x2ac751 * 266.0178565979004);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 179.14285278320312, _0x2ac751 * 399.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 174.14285278320312, _0x2ac751 * 385.5892858505249, _0x2ac751 * 186.14285278320312, _0x2ac751 * 379.5892858505249, _0x2ac751 * 198.14285278320312, _0x2ac751 * 379.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 208.14285278320312, _0x2ac751 * 379.5892858505249, _0x2ac751 * 206.14285278320312, _0x2ac751 * 391.5892858505249, _0x2ac751 * 194.14285278320312, _0x2ac751 * 396.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 184.14285278320312, _0x2ac751 * 401.5892858505249, _0x2ac751 * 182.14285278320312, _0x2ac751 * 402.5892858505249, _0x2ac751 * 179.14285278320312, _0x2ac751 * 399.5892858505249);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 179.14285278320312, _0x2ac751 * 399.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 174.14285278320312, _0x2ac751 * 385.5892858505249, _0x2ac751 * 186.14285278320312, _0x2ac751 * 379.5892858505249, _0x2ac751 * 198.14285278320312, _0x2ac751 * 379.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 208.14285278320312, _0x2ac751 * 379.5892858505249, _0x2ac751 * 206.14285278320312, _0x2ac751 * 391.5892858505249, _0x2ac751 * 194.14285278320312, _0x2ac751 * 396.5892858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 184.14285278320312, _0x2ac751 * 401.5892858505249, _0x2ac751 * 182.14285278320312, _0x2ac751 * 402.5892858505249, _0x2ac751 * 179.14285278320312, _0x2ac751 * 399.5892858505249);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 163.14285278320312, _0x2ac751 * 407.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 152.14285278320312, _0x2ac751 * 405.875, _0x2ac751 * 156.14285278320312, _0x2ac751 * 391.875, _0x2ac751 * 163.14285278320312, _0x2ac751 * 385.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 170.14285278320312, _0x2ac751 * 381.875, _0x2ac751 * 173.14285278320312, _0x2ac751 * 385.875, _0x2ac751 * 170.14285278320312, _0x2ac751 * 398.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 169.14285278320312, _0x2ac751 * 403.875, _0x2ac751 * 165.14285278320312, _0x2ac751 * 408.875, _0x2ac751 * 164.14285278320312, _0x2ac751 * 407.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 163.14285278320312, _0x2ac751 * 407.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 152.14285278320312, _0x2ac751 * 405.875, _0x2ac751 * 156.14285278320312, _0x2ac751 * 391.875, _0x2ac751 * 163.14285278320312, _0x2ac751 * 385.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 170.14285278320312, _0x2ac751 * 381.875, _0x2ac751 * 173.14285278320312, _0x2ac751 * 385.875, _0x2ac751 * 170.14285278320312, _0x2ac751 * 398.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 169.14285278320312, _0x2ac751 * 403.875, _0x2ac751 * 165.14285278320312, _0x2ac751 * 408.875, _0x2ac751 * 164.14285278320312, _0x2ac751 * 407.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 78.14285278320312, _0x2ac751 * 71.73211669921875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 82.14285278320312, _0x2ac751 * 62.73211669921875, _0x2ac751 * 88.14285278320312, _0x2ac751 * 69.73211669921875, _0x2ac751 * 91.14285278320312, _0x2ac751 * 79.73211669921875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 90.14285278320312, _0x2ac751 * 86.73211669921875, _0x2ac751 * 79.14285278320312, _0x2ac751 * 83.73211669921875, _0x2ac751 * 78.14285278320312, _0x2ac751 * 71.73211669921875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 78.14285278320312, _0x2ac751 * 71.73211669921875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 82.14285278320312, _0x2ac751 * 62.73211669921875, _0x2ac751 * 88.14285278320312, _0x2ac751 * 69.73211669921875, _0x2ac751 * 91.14285278320312, _0x2ac751 * 79.73211669921875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 90.14285278320312, _0x2ac751 * 86.73211669921875, _0x2ac751 * 79.14285278320312, _0x2ac751 * 83.73211669921875, _0x2ac751 * 78.14285278320312, _0x2ac751 * 71.73211669921875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 385.1428527832031, _0x2ac751 * 405.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 392.1428527832031, _0x2ac751 * 397.017858505249, _0x2ac751 * 406.1428527832031, _0x2ac751 * 401.017858505249, _0x2ac751 * 409.1428527832031, _0x2ac751 * 418.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 410.1428527832031, _0x2ac751 * 426.017858505249, _0x2ac751 * 401.1428527832031, _0x2ac751 * 425.017858505249, _0x2ac751 * 388.1428527832031, _0x2ac751 * 418.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 381.1428527832031, _0x2ac751 * 411.017858505249, _0x2ac751 * 383.1428527832031, _0x2ac751 * 407.017858505249, _0x2ac751 * 385.1428527832031, _0x2ac751 * 405.017858505249);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 385.1428527832031, _0x2ac751 * 405.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 392.1428527832031, _0x2ac751 * 397.017858505249, _0x2ac751 * 406.1428527832031, _0x2ac751 * 401.017858505249, _0x2ac751 * 409.1428527832031, _0x2ac751 * 418.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 410.1428527832031, _0x2ac751 * 426.017858505249, _0x2ac751 * 401.1428527832031, _0x2ac751 * 425.017858505249, _0x2ac751 * 388.1428527832031, _0x2ac751 * 418.017858505249);
    _0x521e24.bezierCurveTo(_0x2ac751 * 381.1428527832031, _0x2ac751 * 411.017858505249, _0x2ac751 * 383.1428527832031, _0x2ac751 * 407.017858505249, _0x2ac751 * 385.1428527832031, _0x2ac751 * 405.017858505249);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 414.1428527832031, _0x2ac751 * 361.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.1428527832031, _0x2ac751 * 352.4464282989502, _0x2ac751 * 426.1428527832031, _0x2ac751 * 353.4464282989502, _0x2ac751 * 437.1428527832031, _0x2ac751 * 362.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 441.1428527832031, _0x2ac751 * 366.4464282989502, _0x2ac751 * 439.1428527832031, _0x2ac751 * 373.4464282989502, _0x2ac751 * 428.1428527832031, _0x2ac751 * 372.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 416.1428527832031, _0x2ac751 * 370.4464282989502, _0x2ac751 * 412.1428527832031, _0x2ac751 * 367.4464282989502, _0x2ac751 * 415.1428527832031, _0x2ac751 * 361.4464282989502);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 414.1428527832031, _0x2ac751 * 361.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.1428527832031, _0x2ac751 * 352.4464282989502, _0x2ac751 * 426.1428527832031, _0x2ac751 * 353.4464282989502, _0x2ac751 * 437.1428527832031, _0x2ac751 * 362.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 441.1428527832031, _0x2ac751 * 366.4464282989502, _0x2ac751 * 439.1428527832031, _0x2ac751 * 373.4464282989502, _0x2ac751 * 428.1428527832031, _0x2ac751 * 372.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 416.1428527832031, _0x2ac751 * 370.4464282989502, _0x2ac751 * 412.1428527832031, _0x2ac751 * 367.4464282989502, _0x2ac751 * 415.1428527832031, _0x2ac751 * 361.4464282989502);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 453.1428527832031, _0x2ac751 * 356.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 458.1428527832031, _0x2ac751 * 363.875, _0x2ac751 * 447.1428527832031, _0x2ac751 * 373.875, _0x2ac751 * 444.1428527832031, _0x2ac751 * 369.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 441.1428527832031, _0x2ac751 * 361.875, _0x2ac751 * 448.1428527832031, _0x2ac751 * 352.875, _0x2ac751 * 453.1428527832031, _0x2ac751 * 356.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 453.1428527832031, _0x2ac751 * 356.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 458.1428527832031, _0x2ac751 * 363.875, _0x2ac751 * 447.1428527832031, _0x2ac751 * 373.875, _0x2ac751 * 444.1428527832031, _0x2ac751 * 369.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 441.1428527832031, _0x2ac751 * 361.875, _0x2ac751 * 448.1428527832031, _0x2ac751 * 352.875, _0x2ac751 * 453.1428527832031, _0x2ac751 * 356.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 40.142852783203125, _0x2ac751 * 225.1607151031494);
    _0x521e24.bezierCurveTo(_0x2ac751 * 52.142852783203125, _0x2ac751 * 224.1607151031494, _0x2ac751 * 44.142852783203125, _0x2ac751 * 251.1607151031494, _0x2ac751 * 36.142852783203125, _0x2ac751 * 248.1607151031494);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25.142852783203125, _0x2ac751 * 245.1607151031494, _0x2ac751 * 34.142852783203125, _0x2ac751 * 225.1607151031494, _0x2ac751 * 41.142852783203125, _0x2ac751 * 225.1607151031494);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 40.142852783203125, _0x2ac751 * 225.1607151031494);
    _0x521e24.bezierCurveTo(_0x2ac751 * 52.142852783203125, _0x2ac751 * 224.1607151031494, _0x2ac751 * 44.142852783203125, _0x2ac751 * 251.1607151031494, _0x2ac751 * 36.142852783203125, _0x2ac751 * 248.1607151031494);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25.142852783203125, _0x2ac751 * 245.1607151031494, _0x2ac751 * 34.142852783203125, _0x2ac751 * 225.1607151031494, _0x2ac751 * 41.142852783203125, _0x2ac751 * 225.1607151031494);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 114.14285278320312, _0x2ac751 * 52.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 123.14285278320312, _0x2ac751 * 57.4464111328125, _0x2ac751 * 111.14285278320312, _0x2ac751 * 71.4464111328125, _0x2ac751 * 106.14285278320312, _0x2ac751 * 65.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 101.14285278320312, _0x2ac751 * 58.4464111328125, _0x2ac751 * 111.14285278320312, _0x2ac751 * 51.4464111328125, _0x2ac751 * 114.14285278320312, _0x2ac751 * 52.4464111328125);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 114.14285278320312, _0x2ac751 * 52.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 123.14285278320312, _0x2ac751 * 57.4464111328125, _0x2ac751 * 111.14285278320312, _0x2ac751 * 71.4464111328125, _0x2ac751 * 106.14285278320312, _0x2ac751 * 65.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 101.14285278320312, _0x2ac751 * 58.4464111328125, _0x2ac751 * 111.14285278320312, _0x2ac751 * 51.4464111328125, _0x2ac751 * 114.14285278320312, _0x2ac751 * 52.4464111328125);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 35.142852783203125, _0x2ac751 * 256.3035707473755);
    _0x521e24.bezierCurveTo(_0x2ac751 * 41.142852783203125, _0x2ac751 * 263.3035707473755, _0x2ac751 * 32.142852783203125, _0x2ac751 * 270.3035707473755, _0x2ac751 * 27.142852783203125, _0x2ac751 * 270.3035707473755);
    _0x521e24.bezierCurveTo(_0x2ac751 * 20.142852783203125, _0x2ac751 * 267.3035707473755, _0x2ac751 * 29.142852783203125, _0x2ac751 * 252.3035707473755, _0x2ac751 * 35.142852783203125, _0x2ac751 * 255.3035707473755);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 35.142852783203125, _0x2ac751 * 256.3035707473755);
    _0x521e24.bezierCurveTo(_0x2ac751 * 41.142852783203125, _0x2ac751 * 263.3035707473755, _0x2ac751 * 32.142852783203125, _0x2ac751 * 270.3035707473755, _0x2ac751 * 27.142852783203125, _0x2ac751 * 270.3035707473755);
    _0x521e24.bezierCurveTo(_0x2ac751 * 20.142852783203125, _0x2ac751 * 267.3035707473755, _0x2ac751 * 29.142852783203125, _0x2ac751 * 252.3035707473755, _0x2ac751 * 35.142852783203125, _0x2ac751 * 255.3035707473755);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 48.142852783203125, _0x2ac751 * 266.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 59.142852783203125, _0x2ac751 * 273.4464282989502, _0x2ac751 * 41.142852783203125, _0x2ac751 * 290.4464282989502, _0x2ac751 * 33.142852783203125, _0x2ac751 * 285.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25.142852783203125, _0x2ac751 * 277.4464282989502, _0x2ac751 * 44.142852783203125, _0x2ac751 * 261.4464282989502, _0x2ac751 * 48.142852783203125, _0x2ac751 * 266.4464282989502);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 48.142852783203125, _0x2ac751 * 266.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 59.142852783203125, _0x2ac751 * 273.4464282989502, _0x2ac751 * 41.142852783203125, _0x2ac751 * 290.4464282989502, _0x2ac751 * 33.142852783203125, _0x2ac751 * 285.4464282989502);
    _0x521e24.bezierCurveTo(_0x2ac751 * 25.142852783203125, _0x2ac751 * 277.4464282989502, _0x2ac751 * 44.142852783203125, _0x2ac751 * 261.4464282989502, _0x2ac751 * 48.142852783203125, _0x2ac751 * 266.4464282989502);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 138.14285278320312, _0x2ac751 * 385.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 150.14285278320312, _0x2ac751 * 387.5892868041992, _0x2ac751 * 140.14285278320312, _0x2ac751 * 405.5892868041992, _0x2ac751 * 131.14285278320312, _0x2ac751 * 402.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 125.14285278320312, _0x2ac751 * 397.5892868041992, _0x2ac751 * 134.14285278320312, _0x2ac751 * 385.5892868041992, _0x2ac751 * 138.14285278320312, _0x2ac751 * 385.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 138.14285278320312, _0x2ac751 * 385.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 150.14285278320312, _0x2ac751 * 387.5892868041992, _0x2ac751 * 140.14285278320312, _0x2ac751 * 405.5892868041992, _0x2ac751 * 131.14285278320312, _0x2ac751 * 402.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 125.14285278320312, _0x2ac751 * 397.5892868041992, _0x2ac751 * 134.14285278320312, _0x2ac751 * 385.5892868041992, _0x2ac751 * 138.14285278320312, _0x2ac751 * 385.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 218.14285278320312, _0x2ac751 * 394.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 224.14285278320312, _0x2ac751 * 398.16071701049805, _0x2ac751 * 222.14285278320312, _0x2ac751 * 403.16071701049805, _0x2ac751 * 214.14285278320312, _0x2ac751 * 407.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 204.14285278320312, _0x2ac751 * 407.16071701049805, _0x2ac751 * 213.14285278320312, _0x2ac751 * 392.16071701049805, _0x2ac751 * 218.14285278320312, _0x2ac751 * 394.16071701049805);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 218.14285278320312, _0x2ac751 * 394.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 224.14285278320312, _0x2ac751 * 398.16071701049805, _0x2ac751 * 222.14285278320312, _0x2ac751 * 403.16071701049805, _0x2ac751 * 214.14285278320312, _0x2ac751 * 407.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 204.14285278320312, _0x2ac751 * 407.16071701049805, _0x2ac751 * 213.14285278320312, _0x2ac751 * 392.16071701049805, _0x2ac751 * 218.14285278320312, _0x2ac751 * 394.16071701049805);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.translate(_0x2ac751 * 50, _0x2ac751 * 100);
  } else {
    _0x30124e.width = _0x2ac751 * 543;
    _0x30124e.height = _0x2ac751 * 470;
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 97.14285278320312, _0x2ac751 * 113.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 104.14285278320312, _0x2ac751 * 106.875, _0x2ac751 * 113.14285278320312, _0x2ac751 * 109.875, _0x2ac751 * 118.14285278320312, _0x2ac751 * 118.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 119.14285278320312, _0x2ac751 * 121.875, _0x2ac751 * 118.14285278320312, _0x2ac751 * 129.875, _0x2ac751 * 103.14285278320312, _0x2ac751 * 124.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 94.14285278320312, _0x2ac751 * 120.875, _0x2ac751 * 95.14285278320312, _0x2ac751 * 117.875, _0x2ac751 * 97.14285278320312, _0x2ac751 * 113.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 97.14285278320312, _0x2ac751 * 113.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 104.14285278320312, _0x2ac751 * 106.875, _0x2ac751 * 113.14285278320312, _0x2ac751 * 109.875, _0x2ac751 * 118.14285278320312, _0x2ac751 * 118.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 119.14285278320312, _0x2ac751 * 121.875, _0x2ac751 * 118.14285278320312, _0x2ac751 * 129.875, _0x2ac751 * 103.14285278320312, _0x2ac751 * 124.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 94.14285278320312, _0x2ac751 * 120.875, _0x2ac751 * 95.14285278320312, _0x2ac751 * 117.875, _0x2ac751 * 97.14285278320312, _0x2ac751 * 113.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 88.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 90.14285278320312, _0x2ac751 * 128.87498474121094, _0x2ac751 * 104.14285278320312, _0x2ac751 * 130.87498474121094, _0x2ac751 * 107.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 109.14285278320312, _0x2ac751 * 147.87498474121094, _0x2ac751 * 89.14285278320312, _0x2ac751 * 145.87498474121094, _0x2ac751 * 88.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 88.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 90.14285278320312, _0x2ac751 * 128.87498474121094, _0x2ac751 * 104.14285278320312, _0x2ac751 * 130.87498474121094, _0x2ac751 * 107.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 109.14285278320312, _0x2ac751 * 147.87498474121094, _0x2ac751 * 89.14285278320312, _0x2ac751 * 145.87498474121094, _0x2ac751 * 88.14285278320312, _0x2ac751 * 138.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 194.14285278320312, _0x2ac751 * 44.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 202.14285278320312, _0x2ac751 * 49.87498474121094, _0x2ac751 * 195.14285278320312, _0x2ac751 * 62.87498474121094, _0x2ac751 * 187.14285278320312, _0x2ac751 * 60.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 180.14285278320312, _0x2ac751 * 57.87498474121094, _0x2ac751 * 190.14285278320312, _0x2ac751 * 40.87498474121094, _0x2ac751 * 194.14285278320312, _0x2ac751 * 44.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 194.14285278320312, _0x2ac751 * 44.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 202.14285278320312, _0x2ac751 * 49.87498474121094, _0x2ac751 * 195.14285278320312, _0x2ac751 * 62.87498474121094, _0x2ac751 * 187.14285278320312, _0x2ac751 * 60.87498474121094);
    _0x521e24.bezierCurveTo(_0x2ac751 * 180.14285278320312, _0x2ac751 * 57.87498474121094, _0x2ac751 * 190.14285278320312, _0x2ac751 * 40.87498474121094, _0x2ac751 * 194.14285278320312, _0x2ac751 * 44.87498474121094);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 22.142852783203125, _0x2ac751 * 218.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 31.142852783203125, _0x2ac751 * 205.44642639160156, _0x2ac751 * 49.142852783203125, _0x2ac751 * 221.44642639160156, _0x2ac751 * 49.142852783203125, _0x2ac751 * 230.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 44.142852783203125, _0x2ac751 * 243.44642639160156, _0x2ac751 * 14.142852783203125, _0x2ac751 * 228.44642639160156, _0x2ac751 * 22.142852783203125, _0x2ac751 * 218.44642639160156);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 22.142852783203125, _0x2ac751 * 218.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 31.142852783203125, _0x2ac751 * 205.44642639160156, _0x2ac751 * 49.142852783203125, _0x2ac751 * 221.44642639160156, _0x2ac751 * 49.142852783203125, _0x2ac751 * 230.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 44.142852783203125, _0x2ac751 * 243.44642639160156, _0x2ac751 * 14.142852783203125, _0x2ac751 * 228.44642639160156, _0x2ac751 * 22.142852783203125, _0x2ac751 * 218.44642639160156);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 41.142852783203125, _0x2ac751 * 249.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 33.142852783203125, _0x2ac751 * 255.875, _0x2ac751 * 30.142852783203125, _0x2ac751 * 265.875, _0x2ac751 * 40.142852783203125, _0x2ac751 * 266.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 49.142852783203125, _0x2ac751 * 261.875, _0x2ac751 * 53.142852783203125, _0x2ac751 * 244.875, _0x2ac751 * 41.142852783203125, _0x2ac751 * 249.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 41.142852783203125, _0x2ac751 * 249.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 33.142852783203125, _0x2ac751 * 255.875, _0x2ac751 * 30.142852783203125, _0x2ac751 * 265.875, _0x2ac751 * 40.142852783203125, _0x2ac751 * 266.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 49.142852783203125, _0x2ac751 * 261.875, _0x2ac751 * 53.142852783203125, _0x2ac751 * 244.875, _0x2ac751 * 41.142852783203125, _0x2ac751 * 249.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 105.14285278320312, _0x2ac751 * 369.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 92.14285278320312, _0x2ac751 * 361.875, _0x2ac751 * 77.14285278320312, _0x2ac751 * 375.875, _0x2ac751 * 79.14285278320312, _0x2ac751 * 384.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 84.14285278320312, _0x2ac751 * 399.875, _0x2ac751 * 114.14285278320312, _0x2ac751 * 375.875, _0x2ac751 * 104.14285278320312, _0x2ac751 * 369.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 105.14285278320312, _0x2ac751 * 369.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 92.14285278320312, _0x2ac751 * 361.875, _0x2ac751 * 77.14285278320312, _0x2ac751 * 375.875, _0x2ac751 * 79.14285278320312, _0x2ac751 * 384.875);
    _0x521e24.bezierCurveTo(_0x2ac751 * 84.14285278320312, _0x2ac751 * 399.875, _0x2ac751 * 114.14285278320312, _0x2ac751 * 375.875, _0x2ac751 * 104.14285278320312, _0x2ac751 * 369.875);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 233.14285278320312, _0x2ac751 * 43.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 238.14285278320312, _0x2ac751 * 47.4464111328125, _0x2ac751 * 222.14285278320312, _0x2ac751 * 73.4464111328125, _0x2ac751 * 214.14285278320312, _0x2ac751 * 58.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 211.14285278320312, _0x2ac751 * 48.4464111328125, _0x2ac751 * 230.14285278320312, _0x2ac751 * 35.4464111328125, _0x2ac751 * 233.14285278320312, _0x2ac751 * 42.4464111328125);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 233.14285278320312, _0x2ac751 * 43.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 238.14285278320312, _0x2ac751 * 47.4464111328125, _0x2ac751 * 222.14285278320312, _0x2ac751 * 73.4464111328125, _0x2ac751 * 214.14285278320312, _0x2ac751 * 58.4464111328125);
    _0x521e24.bezierCurveTo(_0x2ac751 * 211.14285278320312, _0x2ac751 * 48.4464111328125, _0x2ac751 * 230.14285278320312, _0x2ac751 * 35.4464111328125, _0x2ac751 * 233.14285278320312, _0x2ac751 * 42.4464111328125);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 371.1428527832031, _0x2ac751 * 34.73213195800781);
    _0x521e24.bezierCurveTo(_0x2ac751 * 378.1428527832031, _0x2ac751 * 20.732131958007812, _0x2ac751 * 395.1428527832031, _0x2ac751 * 32.73213195800781, _0x2ac751 * 396.1428527832031, _0x2ac751 * 42.73213195800781);
    _0x521e24.bezierCurveTo(_0x2ac751 * 399.1428527832031, _0x2ac751 * 59.73213195800781, _0x2ac751 * 369.1428527832031, _0x2ac751 * 43.73213195800781, _0x2ac751 * 372.1428527832031, _0x2ac751 * 34.73213195800781);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 371.1428527832031, _0x2ac751 * 34.73213195800781);
    _0x521e24.bezierCurveTo(_0x2ac751 * 378.1428527832031, _0x2ac751 * 20.732131958007812, _0x2ac751 * 395.1428527832031, _0x2ac751 * 32.73213195800781, _0x2ac751 * 396.1428527832031, _0x2ac751 * 42.73213195800781);
    _0x521e24.bezierCurveTo(_0x2ac751 * 399.1428527832031, _0x2ac751 * 59.73213195800781, _0x2ac751 * 369.1428527832031, _0x2ac751 * 43.73213195800781, _0x2ac751 * 372.1428527832031, _0x2ac751 * 34.73213195800781);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 117.14285278320312, _0x2ac751 * 392.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 115.14285278320312, _0x2ac751 * 384.5892868041992, _0x2ac751 * 109.14285278320312, _0x2ac751 * 383.5892868041992, _0x2ac751 * 103.14285278320312, _0x2ac751 * 384.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 95.14285278320312, _0x2ac751 * 389.5892868041992, _0x2ac751 * 97.14285278320312, _0x2ac751 * 393.5892868041992, _0x2ac751 * 107.14285278320312, _0x2ac751 * 396.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 114.14285278320312, _0x2ac751 * 396.5892868041992, _0x2ac751 * 118.14285278320312, _0x2ac751 * 393.5892868041992, _0x2ac751 * 116.14285278320312, _0x2ac751 * 391.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 117.14285278320312, _0x2ac751 * 392.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 115.14285278320312, _0x2ac751 * 384.5892868041992, _0x2ac751 * 109.14285278320312, _0x2ac751 * 383.5892868041992, _0x2ac751 * 103.14285278320312, _0x2ac751 * 384.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 95.14285278320312, _0x2ac751 * 389.5892868041992, _0x2ac751 * 97.14285278320312, _0x2ac751 * 393.5892868041992, _0x2ac751 * 107.14285278320312, _0x2ac751 * 396.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 114.14285278320312, _0x2ac751 * 396.5892868041992, _0x2ac751 * 118.14285278320312, _0x2ac751 * 393.5892868041992, _0x2ac751 * 116.14285278320312, _0x2ac751 * 391.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 122.14285278320312, _0x2ac751 * 403.7321472167969);
    _0x521e24.bezierCurveTo(_0x2ac751 * 132.14285278320312, _0x2ac751 * 399.7321472167969, _0x2ac751 * 133.14285278320312, _0x2ac751 * 418.7321472167969, _0x2ac751 * 129.14285278320312, _0x2ac751 * 419.7321472167969);
    _0x521e24.bezierCurveTo(_0x2ac751 * 119.14285278320312, _0x2ac751 * 420.7321472167969, _0x2ac751 * 118.14285278320312, _0x2ac751 * 402.7321472167969, _0x2ac751 * 123.14285278320312, _0x2ac751 * 403.7321472167969);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 122.14285278320312, _0x2ac751 * 403.7321472167969);
    _0x521e24.bezierCurveTo(_0x2ac751 * 132.14285278320312, _0x2ac751 * 399.7321472167969, _0x2ac751 * 133.14285278320312, _0x2ac751 * 418.7321472167969, _0x2ac751 * 129.14285278320312, _0x2ac751 * 419.7321472167969);
    _0x521e24.bezierCurveTo(_0x2ac751 * 119.14285278320312, _0x2ac751 * 420.7321472167969, _0x2ac751 * 118.14285278320312, _0x2ac751 * 402.7321472167969, _0x2ac751 * 123.14285278320312, _0x2ac751 * 403.7321472167969);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 317.1428527832031, _0x2ac751 * 417.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 333.1428527832031, _0x2ac751 * 421.5892868041992, _0x2ac751 * 299.1428527832031, _0x2ac751 * 455.5892868041992, _0x2ac751 * 294.1428527832031, _0x2ac751 * 438.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 289.1428527832031, _0x2ac751 * 423.5892868041992, _0x2ac751 * 307.1428527832031, _0x2ac751 * 414.5892868041992, _0x2ac751 * 317.1428527832031, _0x2ac751 * 417.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 317.1428527832031, _0x2ac751 * 417.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 333.1428527832031, _0x2ac751 * 421.5892868041992, _0x2ac751 * 299.1428527832031, _0x2ac751 * 455.5892868041992, _0x2ac751 * 294.1428527832031, _0x2ac751 * 438.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 289.1428527832031, _0x2ac751 * 423.5892868041992, _0x2ac751 * 307.1428527832031, _0x2ac751 * 414.5892868041992, _0x2ac751 * 317.1428527832031, _0x2ac751 * 417.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 322.1428527832031, _0x2ac751 * 437.30357360839844);
    _0x521e24.bezierCurveTo(_0x2ac751 * 330.1428527832031, _0x2ac751 * 431.30357360839844, _0x2ac751 * 336.1428527832031, _0x2ac751 * 440.30357360839844, _0x2ac751 * 336.1428527832031, _0x2ac751 * 448.30357360839844);
    _0x521e24.bezierCurveTo(_0x2ac751 * 334.1428527832031, _0x2ac751 * 454.30357360839844, _0x2ac751 * 316.1428527832031, _0x2ac751 * 447.30357360839844, _0x2ac751 * 323.1428527832031, _0x2ac751 * 437.30357360839844);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 322.1428527832031, _0x2ac751 * 437.30357360839844);
    _0x521e24.bezierCurveTo(_0x2ac751 * 330.1428527832031, _0x2ac751 * 431.30357360839844, _0x2ac751 * 336.1428527832031, _0x2ac751 * 440.30357360839844, _0x2ac751 * 336.1428527832031, _0x2ac751 * 448.30357360839844);
    _0x521e24.bezierCurveTo(_0x2ac751 * 334.1428527832031, _0x2ac751 * 454.30357360839844, _0x2ac751 * 316.1428527832031, _0x2ac751 * 447.30357360839844, _0x2ac751 * 323.1428527832031, _0x2ac751 * 437.30357360839844);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 438.1428527832031, _0x2ac751 * 358.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 455.1428527832031, _0x2ac751 * 351.5892868041992, _0x2ac751 * 467.1428527832031, _0x2ac751 * 371.5892868041992, _0x2ac751 * 455.1428527832031, _0x2ac751 * 374.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 442.1428527832031, _0x2ac751 * 377.5892868041992, _0x2ac751 * 429.1428527832031, _0x2ac751 * 361.5892868041992, _0x2ac751 * 438.1428527832031, _0x2ac751 * 358.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 438.1428527832031, _0x2ac751 * 358.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 455.1428527832031, _0x2ac751 * 351.5892868041992, _0x2ac751 * 467.1428527832031, _0x2ac751 * 371.5892868041992, _0x2ac751 * 455.1428527832031, _0x2ac751 * 374.5892868041992);
    _0x521e24.bezierCurveTo(_0x2ac751 * 442.1428527832031, _0x2ac751 * 377.5892868041992, _0x2ac751 * 429.1428527832031, _0x2ac751 * 361.5892868041992, _0x2ac751 * 438.1428527832031, _0x2ac751 * 358.5892868041992);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 423.1428527832031, _0x2ac751 * 363.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 433.1428527832031, _0x2ac751 * 362.16071701049805, _0x2ac751 * 433.1428527832031, _0x2ac751 * 374.16071701049805, _0x2ac751 * 421.1428527832031, _0x2ac751 * 382.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 413.1428527832031, _0x2ac751 * 383.16071701049805, _0x2ac751 * 413.1428527832031, _0x2ac751 * 368.16071701049805, _0x2ac751 * 423.1428527832031, _0x2ac751 * 363.16071701049805);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 423.1428527832031, _0x2ac751 * 363.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 433.1428527832031, _0x2ac751 * 362.16071701049805, _0x2ac751 * 433.1428527832031, _0x2ac751 * 374.16071701049805, _0x2ac751 * 421.1428527832031, _0x2ac751 * 382.16071701049805);
    _0x521e24.bezierCurveTo(_0x2ac751 * 413.1428527832031, _0x2ac751 * 383.16071701049805, _0x2ac751 * 413.1428527832031, _0x2ac751 * 368.16071701049805, _0x2ac751 * 423.1428527832031, _0x2ac751 * 363.16071701049805);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 431.1428527832031, _0x2ac751 * 333.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 447.1428527832031, _0x2ac751 * 330.0178565979004, _0x2ac751 * 448.1428527832031, _0x2ac751 * 340.0178565979004, _0x2ac751 * 447.1428527832031, _0x2ac751 * 343.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 445.1428527832031, _0x2ac751 * 351.0178565979004, _0x2ac751 * 415.1428527832031, _0x2ac751 * 343.0178565979004, _0x2ac751 * 431.1428527832031, _0x2ac751 * 333.0178565979004);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 431.1428527832031, _0x2ac751 * 333.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 447.1428527832031, _0x2ac751 * 330.0178565979004, _0x2ac751 * 448.1428527832031, _0x2ac751 * 340.0178565979004, _0x2ac751 * 447.1428527832031, _0x2ac751 * 343.0178565979004);
    _0x521e24.bezierCurveTo(_0x2ac751 * 445.1428527832031, _0x2ac751 * 351.0178565979004, _0x2ac751 * 415.1428527832031, _0x2ac751 * 343.0178565979004, _0x2ac751 * 431.1428527832031, _0x2ac751 * 333.0178565979004);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 486.1428527832031, _0x2ac751 * 272.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 493.1428527832031, _0x2ac751 * 260.44642639160156, _0x2ac751 * 519.1428527832031, _0x2ac751 * 277.44642639160156, _0x2ac751 * 511.1428527832031, _0x2ac751 * 289.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 503.1428527832031, _0x2ac751 * 297.44642639160156, _0x2ac751 * 483.1428527832031, _0x2ac751 * 277.44642639160156, _0x2ac751 * 486.1428527832031, _0x2ac751 * 273.44642639160156);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 486.1428527832031, _0x2ac751 * 272.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 493.1428527832031, _0x2ac751 * 260.44642639160156, _0x2ac751 * 519.1428527832031, _0x2ac751 * 277.44642639160156, _0x2ac751 * 511.1428527832031, _0x2ac751 * 289.44642639160156);
    _0x521e24.bezierCurveTo(_0x2ac751 * 503.1428527832031, _0x2ac751 * 297.44642639160156, _0x2ac751 * 483.1428527832031, _0x2ac751 * 277.44642639160156, _0x2ac751 * 486.1428527832031, _0x2ac751 * 273.44642639160156);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 503.1428527832031, _0x2ac751 * 245.01785278320312);
    _0x521e24.bezierCurveTo(_0x2ac751 * 516.1428527832031, _0x2ac751 * 247.01785278320312, _0x2ac751 * 513.1428527832031, _0x2ac751 * 264.0178527832031, _0x2ac751 * 509.1428527832031, _0x2ac751 * 265.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 499.1428527832031, _0x2ac751 * 268.0178527832031, _0x2ac751 * 494.1428527832031, _0x2ac751 * 244.01785278320312, _0x2ac751 * 504.1428527832031, _0x2ac751 * 245.01785278320312);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 503.1428527832031, _0x2ac751 * 245.01785278320312);
    _0x521e24.bezierCurveTo(_0x2ac751 * 516.1428527832031, _0x2ac751 * 247.01785278320312, _0x2ac751 * 513.1428527832031, _0x2ac751 * 264.0178527832031, _0x2ac751 * 509.1428527832031, _0x2ac751 * 265.0178527832031);
    _0x521e24.bezierCurveTo(_0x2ac751 * 499.1428527832031, _0x2ac751 * 268.0178527832031, _0x2ac751 * 494.1428527832031, _0x2ac751 * 244.01785278320312, _0x2ac751 * 504.1428527832031, _0x2ac751 * 245.01785278320312);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 518.1428527832031, _0x2ac751 * 179.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 529.1428527832031, _0x2ac751 * 181.73213958740234, _0x2ac751 * 514.1428527832031, _0x2ac751 * 212.73213958740234, _0x2ac751 * 505.1428527832031, _0x2ac751 * 200.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 499.1428527832031, _0x2ac751 * 186.73213958740234, _0x2ac751 * 515.1428527832031, _0x2ac751 * 177.73213958740234, _0x2ac751 * 518.1428527832031, _0x2ac751 * 179.73213958740234);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 518.1428527832031, _0x2ac751 * 179.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 529.1428527832031, _0x2ac751 * 181.73213958740234, _0x2ac751 * 514.1428527832031, _0x2ac751 * 212.73213958740234, _0x2ac751 * 505.1428527832031, _0x2ac751 * 200.73213958740234);
    _0x521e24.bezierCurveTo(_0x2ac751 * 499.1428527832031, _0x2ac751 * 186.73213958740234, _0x2ac751 * 515.1428527832031, _0x2ac751 * 177.73213958740234, _0x2ac751 * 518.1428527832031, _0x2ac751 * 179.73213958740234);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 438.1428527832031, _0x2ac751 * 22.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 446.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 422.1428527832031, _0x2ac751 * 54.16070556640625, _0x2ac751 * 414.1428527832031, _0x2ac751 * 40.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 409.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 430.1428527832031, _0x2ac751 * 15.16070556640625, _0x2ac751 * 438.1428527832031, _0x2ac751 * 22.16070556640625);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 438.1428527832031, _0x2ac751 * 22.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 446.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 422.1428527832031, _0x2ac751 * 54.16070556640625, _0x2ac751 * 414.1428527832031, _0x2ac751 * 40.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 409.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 430.1428527832031, _0x2ac751 * 15.16070556640625, _0x2ac751 * 438.1428527832031, _0x2ac751 * 22.16070556640625);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.globalAlpha = 0.5;
    _0x521e24.translate(_0x2ac751 * 3, _0x2ac751 * 3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 406.1428527832031, _0x2ac751 * 11.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.1428527832031, _0x2ac751 * 14.16070556640625, _0x2ac751 * 411.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 403.1428527832031, _0x2ac751 * 30.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 395.1428527832031, _0x2ac751 * 31.16070556640625, _0x2ac751 * 391.1428527832031, _0x2ac751 * 16.16070556640625, _0x2ac751 * 406.1428527832031, _0x2ac751 * 10.16070556640625);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[0]);
    _0x521e24.globalAlpha = 1;
    _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
    _0x521e24.beginPath();
    _0x521e24.lineCap = "round";
    _0x521e24.lineJoin = "round";
    _0x521e24.moveTo(_0x2ac751 * 406.1428527832031, _0x2ac751 * 11.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 418.1428527832031, _0x2ac751 * 14.16070556640625, _0x2ac751 * 411.1428527832031, _0x2ac751 * 27.16070556640625, _0x2ac751 * 403.1428527832031, _0x2ac751 * 30.16070556640625);
    _0x521e24.bezierCurveTo(_0x2ac751 * 395.1428527832031, _0x2ac751 * 31.16070556640625, _0x2ac751 * 391.1428527832031, _0x2ac751 * 16.16070556640625, _0x2ac751 * 406.1428527832031, _0x2ac751 * 10.16070556640625);
    _0x521e24.closePath();
    fill_path(_0x521e24, _0x1ffc13[1]);
    _0x521e24.translate(_0x2ac751 * 100, _0x2ac751 * 100);
  }
  _0x521e24.globalAlpha = 1;
  _0x521e24.translate(_0x2ac751 * -3, _0x2ac751 * -3);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 271, _0x2ac751 * 111);
  _0x521e24.bezierCurveTo(_0x2ac751 * 259, _0x2ac751 * 110, _0x2ac751 * 258, _0x2ac751 * 99, _0x2ac751 * 265, _0x2ac751 * 95);
  _0x521e24.bezierCurveTo(_0x2ac751 * 276, _0x2ac751 * 91, _0x2ac751 * 279, _0x2ac751 * 100, _0x2ac751 * 275, _0x2ac751 * 107);
  _0x521e24.bezierCurveTo(_0x2ac751 * 274, _0x2ac751 * 109, _0x2ac751 * 273, _0x2ac751 * 110, _0x2ac751 * 271, _0x2ac751 * 111);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[2], _0x1ffc13[3], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 169, _0x2ac751 * 121);
  _0x521e24.bezierCurveTo(_0x2ac751 * 159, _0x2ac751 * 129, _0x2ac751 * 149, _0x2ac751 * 126, _0x2ac751 * 144, _0x2ac751 * 114);
  _0x521e24.bezierCurveTo(_0x2ac751 * 142, _0x2ac751 * 102, _0x2ac751 * 149, _0x2ac751 * 98, _0x2ac751 * 163, _0x2ac751 * 96);
  _0x521e24.bezierCurveTo(_0x2ac751 * 175, _0x2ac751 * 98, _0x2ac751 * 176, _0x2ac751 * 115, _0x2ac751 * 169, _0x2ac751 * 121);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[2], _0x1ffc13[3], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 213, _0x2ac751 * 150);
  _0x521e24.bezierCurveTo(_0x2ac751 * 206, _0x2ac751 * 134, _0x2ac751 * 216, _0x2ac751 * 120, _0x2ac751 * 235, _0x2ac751 * 129);
  _0x521e24.bezierCurveTo(_0x2ac751 * 247, _0x2ac751 * 139, _0x2ac751 * 242, _0x2ac751 * 146, _0x2ac751 * 237, _0x2ac751 * 154);
  _0x521e24.bezierCurveTo(_0x2ac751 * 226, _0x2ac751 * 162, _0x2ac751 * 218, _0x2ac751 * 159, _0x2ac751 * 213, _0x2ac751 * 150);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[2], _0x1ffc13[3], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 236, _0x2ac751 * 169);
  _0x521e24.bezierCurveTo(_0x2ac751 * 247, _0x2ac751 * 166, _0x2ac751 * 250, _0x2ac751 * 172, _0x2ac751 * 247, _0x2ac751 * 181);
  _0x521e24.bezierCurveTo(_0x2ac751 * 242, _0x2ac751 * 186, _0x2ac751 * 241, _0x2ac751 * 181, _0x2ac751 * 242, _0x2ac751 * 182);
  _0x521e24.bezierCurveTo(_0x2ac751 * 241, _0x2ac751 * 178, _0x2ac751 * 240, _0x2ac751 * 179, _0x2ac751 * 239, _0x2ac751 * 181);
  _0x521e24.bezierCurveTo(_0x2ac751 * 240, _0x2ac751 * 184, _0x2ac751 * 237, _0x2ac751 * 186, _0x2ac751 * 233, _0x2ac751 * 181);
  _0x521e24.bezierCurveTo(_0x2ac751 * 230, _0x2ac751 * 173, _0x2ac751 * 233, _0x2ac751 * 169, _0x2ac751 * 236, _0x2ac751 * 169);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[2], _0x1ffc13[3], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 163, _0x2ac751 * 170);
  _0x521e24.bezierCurveTo(_0x2ac751 * 176, _0x2ac751 * 165, _0x2ac751 * 180, _0x2ac751 * 172, _0x2ac751 * 181, _0x2ac751 * 181);
  _0x521e24.bezierCurveTo(_0x2ac751 * 182, _0x2ac751 * 189, _0x2ac751 * 178, _0x2ac751 * 192, _0x2ac751 * 174, _0x2ac751 * 188);
  _0x521e24.bezierCurveTo(_0x2ac751 * 172, _0x2ac751 * 183, _0x2ac751 * 170, _0x2ac751 * 184, _0x2ac751 * 170, _0x2ac751 * 188);
  _0x521e24.bezierCurveTo(_0x2ac751 * 176, _0x2ac751 * 194, _0x2ac751 * 165, _0x2ac751 * 196, _0x2ac751 * 162, _0x2ac751 * 190);
  _0x521e24.bezierCurveTo(_0x2ac751 * 152, _0x2ac751 * 181, _0x2ac751 * 157, _0x2ac751 * 173, _0x2ac751 * 163, _0x2ac751 * 170);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[2], _0x1ffc13[3], _0x2ac751 * 2);
  _0x521e24.scale(0.05, 0.05);
  _0x521e24.translate(_0x2ac751 * 5000, _0x2ac751 * 1900);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 46.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 353, _0x2ac751 * 131.546875, _0x2ac751 * 303, _0x2ac751 * 213.546875, _0x2ac751 * 272, _0x2ac751 * 236.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 203, _0x2ac751 * 179.546875, _0x2ac751 * 236, _0x2ac751 * 84.546875, _0x2ac751 * 273, _0x2ac751 * 47.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 467, _0x2ac751 * 257.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 369, _0x2ac751 * 194.546875, _0x2ac751 * 325, _0x2ac751 * 236.546875, _0x2ac751 * 291, _0x2ac751 * 271.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 371, _0x2ac751 * 335.546875, _0x2ac751 * 427, _0x2ac751 * 313.546875, _0x2ac751 * 467, _0x2ac751 * 258.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 269, _0x2ac751 * 275.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 343, _0x2ac751 * 356.546875, _0x2ac751 * 355, _0x2ac751 * 407.546875, _0x2ac751 * 323, _0x2ac751 * 472.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 224, _0x2ac751 * 451.546875, _0x2ac751 * 238, _0x2ac751 * 326.546875, _0x2ac751 * 270, _0x2ac751 * 275.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 134, _0x2ac751 * 221.546875, _0x2ac751 * 89, _0x2ac751 * 256.546875, _0x2ac751 * 60, _0x2ac751 * 295.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 116, _0x2ac751 * 357.546875, _0x2ac751 * 242, _0x2ac751 * 344.546875, _0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 124, _0x2ac751 * 123.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 255, _0x2ac751 * 140.546875, _0x2ac751 * 265, _0x2ac751 * 234.546875, _0x2ac751 * 267, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 159, _0x2ac751 * 283.546875, _0x2ac751 * 127, _0x2ac751 * 192.546875, _0x2ac751 * 124, _0x2ac751 * 124.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 267, _0x2ac751 * 268.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 265, _0x2ac751 * 170.546875, _0x2ac751 * 364, _0x2ac751 * 127.546875, _0x2ac751 * 407, _0x2ac751 * 132.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 427, _0x2ac751 * 204.546875, _0x2ac751 * 341, _0x2ac751 * 277.546875, _0x2ac751 * 268, _0x2ac751 * 271.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 270, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 370, _0x2ac751 * 251.546875, _0x2ac751 * 410, _0x2ac751 * 328.546875, _0x2ac751 * 420, _0x2ac751 * 399.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 292, _0x2ac751 * 412.546875, _0x2ac751 * 275, _0x2ac751 * 313.546875, _0x2ac751 * 269, _0x2ac751 * 272.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 266.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 291, _0x2ac751 * 370.546875, _0x2ac751 * 235, _0x2ac751 * 428.546875, _0x2ac751 * 173, _0x2ac751 * 451.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 124, _0x2ac751 * 365.546875, _0x2ac751 * 217, _0x2ac751 * 274.546875, _0x2ac751 * 272, _0x2ac751 * 265.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 266, _0x2ac751 * 251.546875, _0x2ac751 * 19.1049731745428);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 292, _0x2ac751 * 274.546875, _0x2ac751 * 15.556349186104045);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 258, _0x2ac751 * 291.546875, _0x2ac751 * 17.029386365926403);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  _0x521e24.scale(1.4, 1.4);
  _0x521e24.translate(_0x2ac751 * -700, _0x2ac751 * 280);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 46.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 353, _0x2ac751 * 131.546875, _0x2ac751 * 303, _0x2ac751 * 213.546875, _0x2ac751 * 272, _0x2ac751 * 236.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 203, _0x2ac751 * 179.546875, _0x2ac751 * 236, _0x2ac751 * 84.546875, _0x2ac751 * 273, _0x2ac751 * 47.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 467, _0x2ac751 * 257.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 369, _0x2ac751 * 194.546875, _0x2ac751 * 325, _0x2ac751 * 236.546875, _0x2ac751 * 291, _0x2ac751 * 271.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 371, _0x2ac751 * 335.546875, _0x2ac751 * 427, _0x2ac751 * 313.546875, _0x2ac751 * 467, _0x2ac751 * 258.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 269, _0x2ac751 * 275.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 343, _0x2ac751 * 356.546875, _0x2ac751 * 355, _0x2ac751 * 407.546875, _0x2ac751 * 323, _0x2ac751 * 472.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 224, _0x2ac751 * 451.546875, _0x2ac751 * 238, _0x2ac751 * 326.546875, _0x2ac751 * 270, _0x2ac751 * 275.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 134, _0x2ac751 * 221.546875, _0x2ac751 * 89, _0x2ac751 * 256.546875, _0x2ac751 * 60, _0x2ac751 * 295.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 116, _0x2ac751 * 357.546875, _0x2ac751 * 242, _0x2ac751 * 344.546875, _0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 124, _0x2ac751 * 123.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 255, _0x2ac751 * 140.546875, _0x2ac751 * 265, _0x2ac751 * 234.546875, _0x2ac751 * 267, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 159, _0x2ac751 * 283.546875, _0x2ac751 * 127, _0x2ac751 * 192.546875, _0x2ac751 * 124, _0x2ac751 * 124.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 267, _0x2ac751 * 268.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 265, _0x2ac751 * 170.546875, _0x2ac751 * 364, _0x2ac751 * 127.546875, _0x2ac751 * 407, _0x2ac751 * 132.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 427, _0x2ac751 * 204.546875, _0x2ac751 * 341, _0x2ac751 * 277.546875, _0x2ac751 * 268, _0x2ac751 * 271.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 270, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 370, _0x2ac751 * 251.546875, _0x2ac751 * 410, _0x2ac751 * 328.546875, _0x2ac751 * 420, _0x2ac751 * 399.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 292, _0x2ac751 * 412.546875, _0x2ac751 * 275, _0x2ac751 * 313.546875, _0x2ac751 * 269, _0x2ac751 * 272.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 266.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 291, _0x2ac751 * 370.546875, _0x2ac751 * 235, _0x2ac751 * 428.546875, _0x2ac751 * 173, _0x2ac751 * 451.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 124, _0x2ac751 * 365.546875, _0x2ac751 * 217, _0x2ac751 * 274.546875, _0x2ac751 * 272, _0x2ac751 * 265.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 266, _0x2ac751 * 251.546875, _0x2ac751 * 19.1049731745428);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 292, _0x2ac751 * 274.546875, _0x2ac751 * 15.556349186104045);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 258, _0x2ac751 * 291.546875, _0x2ac751 * 17.029386365926403);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  _0x521e24.translate(_0x2ac751 * -900, _0x2ac751 * -200);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 46.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 353, _0x2ac751 * 131.546875, _0x2ac751 * 303, _0x2ac751 * 213.546875, _0x2ac751 * 272, _0x2ac751 * 236.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 203, _0x2ac751 * 179.546875, _0x2ac751 * 236, _0x2ac751 * 84.546875, _0x2ac751 * 273, _0x2ac751 * 47.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 467, _0x2ac751 * 257.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 369, _0x2ac751 * 194.546875, _0x2ac751 * 325, _0x2ac751 * 236.546875, _0x2ac751 * 291, _0x2ac751 * 271.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 371, _0x2ac751 * 335.546875, _0x2ac751 * 427, _0x2ac751 * 313.546875, _0x2ac751 * 467, _0x2ac751 * 258.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 269, _0x2ac751 * 275.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 343, _0x2ac751 * 356.546875, _0x2ac751 * 355, _0x2ac751 * 407.546875, _0x2ac751 * 323, _0x2ac751 * 472.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 224, _0x2ac751 * 451.546875, _0x2ac751 * 238, _0x2ac751 * 326.546875, _0x2ac751 * 270, _0x2ac751 * 275.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 134, _0x2ac751 * 221.546875, _0x2ac751 * 89, _0x2ac751 * 256.546875, _0x2ac751 * 60, _0x2ac751 * 295.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 116, _0x2ac751 * 357.546875, _0x2ac751 * 242, _0x2ac751 * 344.546875, _0x2ac751 * 260, _0x2ac751 * 267.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[4], _0x1ffc13[5], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 124, _0x2ac751 * 123.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 255, _0x2ac751 * 140.546875, _0x2ac751 * 265, _0x2ac751 * 234.546875, _0x2ac751 * 267, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 159, _0x2ac751 * 283.546875, _0x2ac751 * 127, _0x2ac751 * 192.546875, _0x2ac751 * 124, _0x2ac751 * 124.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 267, _0x2ac751 * 268.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 265, _0x2ac751 * 170.546875, _0x2ac751 * 364, _0x2ac751 * 127.546875, _0x2ac751 * 407, _0x2ac751 * 132.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 427, _0x2ac751 * 204.546875, _0x2ac751 * 341, _0x2ac751 * 277.546875, _0x2ac751 * 268, _0x2ac751 * 271.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 270, _0x2ac751 * 269.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 370, _0x2ac751 * 251.546875, _0x2ac751 * 410, _0x2ac751 * 328.546875, _0x2ac751 * 420, _0x2ac751 * 399.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 292, _0x2ac751 * 412.546875, _0x2ac751 * 275, _0x2ac751 * 313.546875, _0x2ac751 * 269, _0x2ac751 * 272.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  _0x521e24.beginPath();
  _0x521e24.lineCap = "round";
  _0x521e24.lineJoin = "round";
  _0x521e24.moveTo(_0x2ac751 * 273, _0x2ac751 * 266.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 291, _0x2ac751 * 370.546875, _0x2ac751 * 235, _0x2ac751 * 428.546875, _0x2ac751 * 173, _0x2ac751 * 451.546875);
  _0x521e24.bezierCurveTo(_0x2ac751 * 124, _0x2ac751 * 365.546875, _0x2ac751 * 217, _0x2ac751 * 274.546875, _0x2ac751 * 272, _0x2ac751 * 265.546875);
  _0x521e24.closePath();
  fill_path(_0x521e24, _0x1ffc13[6], _0x1ffc13[7], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 266, _0x2ac751 * 251.546875, _0x2ac751 * 19.1049731745428);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 292, _0x2ac751 * 274.546875, _0x2ac751 * 15.556349186104045);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  circle(_0x521e24, _0x2ac751 * 258, _0x2ac751 * 291.546875, _0x2ac751 * 17.029386365926403);
  fill_path(_0x521e24, _0x1ffc13[8], _0x1ffc13[9], _0x2ac751 * 2);
  return _0x30124e;
}
function create_kraken(_0x3b11c4, _0x885330) {
  var _0xcb5f1b = document.createElement("canvas");
  var _0x45f163 = _0xcb5f1b.getContext("2d");
  _0xcb5f1b.width = _0x3b11c4 * 376;
  _0xcb5f1b.height = _0x3b11c4 * 371;
  _0x45f163.globalAlpha = 0.5;
  _0x45f163.translate(_0x3b11c4 * 5, _0x3b11c4 * 5);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 191.633544921875, _0x3b11c4 * 123.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 215.633544921875, _0x3b11c4 * 85.98580932617188, _0x3b11c4 * 187.633544921875, _0x3b11c4 * 71.98580932617188, _0x3b11c4 * 202.633544921875, _0x3b11c4 * 19.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 231.633544921875, _0x3b11c4 * 68.98580932617188, _0x3b11c4 * 253.633544921875, _0x3b11c4 * 71.98580932617188, _0x3b11c4 * 256.633544921875, _0x3b11c4 * 93.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 306.633544921875, _0x3b11c4 * 64.98580932617188, _0x3b11c4 * 319.633544921875, _0x3b11c4 * 61.985809326171875, _0x3b11c4 * 350.633544921875, _0x3b11c4 * 58.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 280.633544921875, _0x3b11c4 * 86.98580932617188, _0x3b11c4 * 281.633544921875, _0x3b11c4 * 106.98580932617188, _0x3b11c4 * 268.633544921875, _0x3b11c4 * 130.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 295.633544921875, _0x3b11c4 * 158.98580932617188, _0x3b11c4 * 328.633544921875, _0x3b11c4 * 155.98580932617188, _0x3b11c4 * 353.633544921875, _0x3b11c4 * 90.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 371.633544921875, _0x3b11c4 * 158.98580932617188, _0x3b11c4 * 337.633544921875, _0x3b11c4 * 210.98580932617188, _0x3b11c4 * 286.633544921875, _0x3b11c4 * 209.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 323.633544921875, _0x3b11c4 * 230.98580932617188, _0x3b11c4 * 317.633544921875, _0x3b11c4 * 274.9858093261719, _0x3b11c4 * 356.633544921875, _0x3b11c4 * 305.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 288.633544921875, _0x3b11c4 * 297.9858093261719, _0x3b11c4 * 288.633544921875, _0x3b11c4 * 265.9858093261719, _0x3b11c4 * 275.633544921875, _0x3b11c4 * 266.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 280.633544921875, _0x3b11c4 * 294.9858093261719, _0x3b11c4 * 315.633544921875, _0x3b11c4 * 306.9858093261719, _0x3b11c4 * 336.633544921875, _0x3b11c4 * 316.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 295.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 264.633544921875, _0x3b11c4 * 302.9858093261719, _0x3b11c4 * 254.633544921875, _0x3b11c4 * 289.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 252.633544921875, _0x3b11c4 * 301.9858093261719, _0x3b11c4 * 224.633544921875, _0x3b11c4 * 315.9858093261719, _0x3b11c4 * 201.633544921875, _0x3b11c4 * 356.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 313.9858093261719, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 196.633544921875, _0x3b11c4 * 307.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 197.633544921875, _0x3b11c4 * 289.9858093261719, _0x3b11c4 * 207.633544921875, _0x3b11c4 * 283.9858093261719, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 258.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 182.633544921875, _0x3b11c4 * 282.9858093261719, _0x3b11c4 * 190.633544921875, _0x3b11c4 * 287.9858093261719, _0x3b11c4 * 193.633544921875, _0x3b11c4 * 297.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 306.9858093261719, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 334.9858093261719, _0x3b11c4 * 187.633544921875, _0x3b11c4 * 354.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 165.633544921875, _0x3b11c4 * 320.9858093261719, _0x3b11c4 * 138.633544921875, _0x3b11c4 * 307.9858093261719, _0x3b11c4 * 135.633544921875, _0x3b11c4 * 288.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 110.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 68.633544921875, _0x3b11c4 * 323.9858093261719, _0x3b11c4 * 49.633544921875, _0x3b11c4 * 320.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 88.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 108.633544921875, _0x3b11c4 * 284.9858093261719, _0x3b11c4 * 118.633544921875, _0x3b11c4 * 258.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 86.633544921875, _0x3b11c4 * 264.9858093261719, _0x3b11c4 * 75.633544921875, _0x3b11c4 * 310.9858093261719, _0x3b11c4 * 19.633544921875, _0x3b11c4 * 304.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 54.633544921875, _0x3b11c4 * 276.9858093261719, _0x3b11c4 * 59.633544921875, _0x3b11c4 * 214.98580932617188, _0x3b11c4 * 105.633544921875, _0x3b11c4 * 205.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 14.633544921875, _0x3b11c4 * 201.98580932617188, _0x3b11c4 * 24.633544921875, _0x3b11c4 * 141.98580932617188, _0x3b11c4 * 25.633544921875, _0x3b11c4 * 82.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 49.633544921875, _0x3b11c4 * 168.98580932617188, _0x3b11c4 * 87.633544921875, _0x3b11c4 * 141.98580932617188, _0x3b11c4 * 112.633544921875, _0x3b11c4 * 123.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 95.633544921875, _0x3b11c4 * 75.98580932617188, _0x3b11c4 * 70.633544921875, _0x3b11c4 * 68.98580932617188, _0x3b11c4 * 35.633544921875, _0x3b11c4 * 50.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 70.633544921875, _0x3b11c4 * 53.985809326171875, _0x3b11c4 * 102.633544921875, _0x3b11c4 * 65.98580932617188, _0x3b11c4 * 125.633544921875, _0x3b11c4 * 84.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 133.633544921875, _0x3b11c4 * 69.98580932617188, _0x3b11c4 * 166.633544921875, _0x3b11c4 * 42.985809326171875, _0x3b11c4 * 176.633544921875, _0x3b11c4 * 21.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 185.633544921875, _0x3b11c4 * 49.985809326171875, _0x3b11c4 * 168.633544921875, _0x3b11c4 * 95.98580932617188, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 121.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[0]);
  _0x45f163.globalAlpha = 1;
  _0x45f163.translate(_0x3b11c4 * -4, _0x3b11c4 * -5);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 191.633544921875, _0x3b11c4 * 123.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 215.633544921875, _0x3b11c4 * 85.98580932617188, _0x3b11c4 * 187.633544921875, _0x3b11c4 * 71.98580932617188, _0x3b11c4 * 202.633544921875, _0x3b11c4 * 19.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 231.633544921875, _0x3b11c4 * 68.98580932617188, _0x3b11c4 * 253.633544921875, _0x3b11c4 * 71.98580932617188, _0x3b11c4 * 256.633544921875, _0x3b11c4 * 93.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 306.633544921875, _0x3b11c4 * 64.98580932617188, _0x3b11c4 * 319.633544921875, _0x3b11c4 * 61.985809326171875, _0x3b11c4 * 350.633544921875, _0x3b11c4 * 58.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 280.633544921875, _0x3b11c4 * 86.98580932617188, _0x3b11c4 * 281.633544921875, _0x3b11c4 * 106.98580932617188, _0x3b11c4 * 268.633544921875, _0x3b11c4 * 130.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 295.633544921875, _0x3b11c4 * 158.98580932617188, _0x3b11c4 * 328.633544921875, _0x3b11c4 * 155.98580932617188, _0x3b11c4 * 353.633544921875, _0x3b11c4 * 90.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 371.633544921875, _0x3b11c4 * 158.98580932617188, _0x3b11c4 * 337.633544921875, _0x3b11c4 * 210.98580932617188, _0x3b11c4 * 286.633544921875, _0x3b11c4 * 209.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 323.633544921875, _0x3b11c4 * 230.98580932617188, _0x3b11c4 * 317.633544921875, _0x3b11c4 * 274.9858093261719, _0x3b11c4 * 356.633544921875, _0x3b11c4 * 305.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 288.633544921875, _0x3b11c4 * 297.9858093261719, _0x3b11c4 * 288.633544921875, _0x3b11c4 * 265.9858093261719, _0x3b11c4 * 275.633544921875, _0x3b11c4 * 266.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 280.633544921875, _0x3b11c4 * 294.9858093261719, _0x3b11c4 * 315.633544921875, _0x3b11c4 * 306.9858093261719, _0x3b11c4 * 336.633544921875, _0x3b11c4 * 316.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 295.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 264.633544921875, _0x3b11c4 * 302.9858093261719, _0x3b11c4 * 254.633544921875, _0x3b11c4 * 289.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 252.633544921875, _0x3b11c4 * 301.9858093261719, _0x3b11c4 * 224.633544921875, _0x3b11c4 * 315.9858093261719, _0x3b11c4 * 201.633544921875, _0x3b11c4 * 356.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 313.9858093261719, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 196.633544921875, _0x3b11c4 * 307.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 197.633544921875, _0x3b11c4 * 289.9858093261719, _0x3b11c4 * 207.633544921875, _0x3b11c4 * 283.9858093261719, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 258.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 182.633544921875, _0x3b11c4 * 282.9858093261719, _0x3b11c4 * 190.633544921875, _0x3b11c4 * 287.9858093261719, _0x3b11c4 * 193.633544921875, _0x3b11c4 * 297.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 306.9858093261719, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 334.9858093261719, _0x3b11c4 * 187.633544921875, _0x3b11c4 * 354.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 165.633544921875, _0x3b11c4 * 320.9858093261719, _0x3b11c4 * 138.633544921875, _0x3b11c4 * 307.9858093261719, _0x3b11c4 * 135.633544921875, _0x3b11c4 * 288.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 110.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 68.633544921875, _0x3b11c4 * 323.9858093261719, _0x3b11c4 * 49.633544921875, _0x3b11c4 * 320.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 88.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 108.633544921875, _0x3b11c4 * 284.9858093261719, _0x3b11c4 * 118.633544921875, _0x3b11c4 * 258.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 86.633544921875, _0x3b11c4 * 264.9858093261719, _0x3b11c4 * 75.633544921875, _0x3b11c4 * 310.9858093261719, _0x3b11c4 * 19.633544921875, _0x3b11c4 * 304.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 54.633544921875, _0x3b11c4 * 276.9858093261719, _0x3b11c4 * 59.633544921875, _0x3b11c4 * 214.98580932617188, _0x3b11c4 * 105.633544921875, _0x3b11c4 * 205.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 14.633544921875, _0x3b11c4 * 201.98580932617188, _0x3b11c4 * 24.633544921875, _0x3b11c4 * 141.98580932617188, _0x3b11c4 * 25.633544921875, _0x3b11c4 * 82.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 49.633544921875, _0x3b11c4 * 168.98580932617188, _0x3b11c4 * 87.633544921875, _0x3b11c4 * 141.98580932617188, _0x3b11c4 * 112.633544921875, _0x3b11c4 * 123.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 95.633544921875, _0x3b11c4 * 75.98580932617188, _0x3b11c4 * 70.633544921875, _0x3b11c4 * 68.98580932617188, _0x3b11c4 * 35.633544921875, _0x3b11c4 * 50.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 70.633544921875, _0x3b11c4 * 53.985809326171875, _0x3b11c4 * 102.633544921875, _0x3b11c4 * 65.98580932617188, _0x3b11c4 * 125.633544921875, _0x3b11c4 * 84.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 133.633544921875, _0x3b11c4 * 69.98580932617188, _0x3b11c4 * 166.633544921875, _0x3b11c4 * 42.985809326171875, _0x3b11c4 * 176.633544921875, _0x3b11c4 * 21.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 185.633544921875, _0x3b11c4 * 49.985809326171875, _0x3b11c4 * 168.633544921875, _0x3b11c4 * 95.98580932617188, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 121.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, undefined, _0x885330[1], _0x3b11c4 * 12);
  _0x45f163.translate(_0x3b11c4 * -1, _0x3b11c4 * 0);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 270.633544921875, _0x3b11c4 * 88.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 296.633544921875, _0x3b11c4 * 65.98580932617188, _0x3b11c4 * 318.633544921875, _0x3b11c4 * 62.985809326171875, _0x3b11c4 * 348.633544921875, _0x3b11c4 * 57.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 309.633544921875, _0x3b11c4 * 76.98580932617188, _0x3b11c4 * 291.633544921875, _0x3b11c4 * 88.98580932617188, _0x3b11c4 * 280.633544921875, _0x3b11c4 * 99.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[4], _0x885330[5], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 275.633544921875, _0x3b11c4 * 281.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 303.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 321.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 335.633544921875, _0x3b11c4 * 315.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 305.633544921875, _0x3b11c4 * 320.9858093261719, _0x3b11c4 * 278.633544921875, _0x3b11c4 * 307.9858093261719, _0x3b11c4 * 264.633544921875, _0x3b11c4 * 293.9858093261719);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[4], _0x885330[5], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 124.633544921875, _0x3b11c4 * 291.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 106.633544921875, _0x3b11c4 * 316.9858093261719, _0x3b11c4 * 72.633544921875, _0x3b11c4 * 325.9858093261719, _0x3b11c4 * 53.633544921875, _0x3b11c4 * 319.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 83.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 97.633544921875, _0x3b11c4 * 298.9858093261719, _0x3b11c4 * 112.633544921875, _0x3b11c4 * 284.9858093261719);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[4], _0x885330[5], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 113.633544921875, _0x3b11c4 * 80.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 91.633544921875, _0x3b11c4 * 54.985809326171875, _0x3b11c4 * 72.633544921875, _0x3b11c4 * 56.985809326171875, _0x3b11c4 * 36.633544921875, _0x3b11c4 * 49.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 87.633544921875, _0x3b11c4 * 72.98580932617188, _0x3b11c4 * 95.633544921875, _0x3b11c4 * 82.98580932617188, _0x3b11c4 * 106.633544921875, _0x3b11c4 * 96.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[4], _0x885330[5], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 202.633544921875, _0x3b11c4 * 20.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 219.633544921875, _0x3b11c4 * 49.985809326171875, _0x3b11c4 * 259.633544921875, _0x3b11c4 * 80.98580932617188, _0x3b11c4 * 255.633544921875, _0x3b11c4 * 92.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 268.633544921875, _0x3b11c4 * 86.98580932617188, _0x3b11c4 * 265.633544921875, _0x3b11c4 * 87.98580932617188, _0x3b11c4 * 275.633544921875, _0x3b11c4 * 82.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 283.633544921875, _0x3b11c4 * 87.98580932617188, _0x3b11c4 * 283.633544921875, _0x3b11c4 * 87.98580932617188, _0x3b11c4 * 291.633544921875, _0x3b11c4 * 92.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 269.633544921875, _0x3b11c4 * 116.98580932617188, _0x3b11c4 * 270.633544921875, _0x3b11c4 * 124.98580932617188, _0x3b11c4 * 267.633544921875, _0x3b11c4 * 130.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 307.633544921875, _0x3b11c4 * 168.98580932617188, _0x3b11c4 * 339.633544921875, _0x3b11c4 * 132.98580932617188, _0x3b11c4 * 352.633544921875, _0x3b11c4 * 93.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 366.633544921875, _0x3b11c4 * 145.98580932617188, _0x3b11c4 * 345.633544921875, _0x3b11c4 * 207.98580932617188, _0x3b11c4 * 286.633544921875, _0x3b11c4 * 208.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 315.633544921875, _0x3b11c4 * 223.98580932617188, _0x3b11c4 * 327.633544921875, _0x3b11c4 * 287.9858093261719, _0x3b11c4 * 355.633544921875, _0x3b11c4 * 305.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 293.633544921875, _0x3b11c4 * 298.9858093261719, _0x3b11c4 * 293.633544921875, _0x3b11c4 * 275.9858093261719, _0x3b11c4 * 276.633544921875, _0x3b11c4 * 266.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 274.633544921875, _0x3b11c4 * 282.9858093261719, _0x3b11c4 * 287.633544921875, _0x3b11c4 * 288.9858093261719, _0x3b11c4 * 295.633544921875, _0x3b11c4 * 296.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 287.133544921875, _0x3b11c4 * 302.4858093261719, _0x3b11c4 * 287.133544921875, _0x3b11c4 * 302.4858093261719, _0x3b11c4 * 278.633544921875, _0x3b11c4 * 307.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 261.633544921875, _0x3b11c4 * 297.9858093261719, _0x3b11c4 * 258.633544921875, _0x3b11c4 * 293.9858093261719, _0x3b11c4 * 255.633544921875, _0x3b11c4 * 290.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 249.633544921875, _0x3b11c4 * 301.9858093261719, _0x3b11c4 * 225.633544921875, _0x3b11c4 * 320.9858093261719, _0x3b11c4 * 202.633544921875, _0x3b11c4 * 354.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 196.633544921875, _0x3b11c4 * 306.9858093261719, _0x3b11c4 * 198.633544921875, _0x3b11c4 * 300.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.633544921875, _0x3b11c4 * 268.9858093261719, _0x3b11c4 * 199.633544921875, _0x3b11c4 * 266.9858093261719, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 256.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 183.633544921875, _0x3b11c4 * 274.9858093261719, _0x3b11c4 * 182.633544921875, _0x3b11c4 * 281.9858093261719, _0x3b11c4 * 192.633544921875, _0x3b11c4 * 305.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 194.633544921875, _0x3b11c4 * 317.9858093261719, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 336.9858093261719, _0x3b11c4 * 186.633544921875, _0x3b11c4 * 351.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 166.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 141.633544921875, _0x3b11c4 * 303.9858093261719, _0x3b11c4 * 136.633544921875, _0x3b11c4 * 286.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 122.633544921875, _0x3b11c4 * 303.9858093261719, _0x3b11c4 * 115.633544921875, _0x3b11c4 * 305.9858093261719, _0x3b11c4 * 109.633544921875, _0x3b11c4 * 306.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 101.133544921875, _0x3b11c4 * 301.9858093261719, _0x3b11c4 * 94.633544921875, _0x3b11c4 * 297.9858093261719, _0x3b11c4 * 92.633544921875, _0x3b11c4 * 296.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 116.633544921875, _0x3b11c4 * 277.9858093261719, _0x3b11c4 * 116.633544921875, _0x3b11c4 * 266.9858093261719, _0x3b11c4 * 119.633544921875, _0x3b11c4 * 257.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 107.633544921875, _0x3b11c4 * 257.9858093261719, _0x3b11c4 * 65.633544921875, _0x3b11c4 * 308.9858093261719, _0x3b11c4 * 24.633544921875, _0x3b11c4 * 303.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 51.633544921875, _0x3b11c4 * 275.9858093261719, _0x3b11c4 * 64.633544921875, _0x3b11c4 * 220.98580932617188, _0x3b11c4 * 108.633544921875, _0x3b11c4 * 205.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 14.633544921875, _0x3b11c4 * 198.98580932617188, _0x3b11c4 * 26.633544921875, _0x3b11c4 * 142.98580932617188, _0x3b11c4 * 25.633544921875, _0x3b11c4 * 86.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 41.633544921875, _0x3b11c4 * 155.98580932617188, _0x3b11c4 * 81.633544921875, _0x3b11c4 * 148.98580932617188, _0x3b11c4 * 113.633544921875, _0x3b11c4 * 124.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 102.633544921875, _0x3b11c4 * 93.98580932617188, _0x3b11c4 * 95.633544921875, _0x3b11c4 * 88.98580932617188, _0x3b11c4 * 89.633544921875, _0x3b11c4 * 81.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 97.633544921875, _0x3b11c4 * 76.48580932617188, _0x3b11c4 * 97.633544921875, _0x3b11c4 * 76.48580932617188, _0x3b11c4 * 105.633544921875, _0x3b11c4 * 70.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 120.633544921875, _0x3b11c4 * 78.98580932617188, _0x3b11c4 * 121.633544921875, _0x3b11c4 * 81.98580932617188, _0x3b11c4 * 124.633544921875, _0x3b11c4 * 86.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 132.633544921875, _0x3b11c4 * 71.98580932617188, _0x3b11c4 * 160.633544921875, _0x3b11c4 * 56.985809326171875, _0x3b11c4 * 175.633544921875, _0x3b11c4 * 23.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 182.633544921875, _0x3b11c4 * 53.985809326171875, _0x3b11c4 * 170.633544921875, _0x3b11c4 * 102.98580932617188, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 125.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 214.633544921875, _0x3b11c4 * 89.98580932617188, _0x3b11c4 * 192.633544921875, _0x3b11c4 * 58.985809326171875, _0x3b11c4 * 202.633544921875, _0x3b11c4 * 20.985809326171875);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[2], _0x885330[3], _0x3b11c4 * 5);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 203.633544921875, _0x3b11c4 * 21.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 223.633544921875, _0x3b11c4 * 63.985809326171875, _0x3b11c4 * 227.633544921875, _0x3b11c4 * 72.98580932617188, _0x3b11c4 * 235.633544921875, _0x3b11c4 * 98.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 241.633544921875, _0x3b11c4 * 123.98580932617188, _0x3b11c4 * 225.633544921875, _0x3b11c4 * 138.98580932617188, _0x3b11c4 * 196.633544921875, _0x3b11c4 * 122.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 213.633544921875, _0x3b11c4 * 93.98580932617188, _0x3b11c4 * 199.633544921875, _0x3b11c4 * 49.985809326171875, _0x3b11c4 * 203.633544921875, _0x3b11c4 * 26.985809326171875);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 175.633544921875, _0x3b11c4 * 25.985809326171875);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 176.633544921875, _0x3b11c4 * 51.985809326171875, _0x3b11c4 * 171.633544921875, _0x3b11c4 * 88.98580932617188, _0x3b11c4 * 186.633544921875, _0x3b11c4 * 121.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 156.633544921875, _0x3b11c4 * 144.98580932617188, _0x3b11c4 * 139.633544921875, _0x3b11c4 * 120.98580932617188, _0x3b11c4 * 147.633544921875, _0x3b11c4 * 97.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 152.633544921875, _0x3b11c4 * 77.98580932617188, _0x3b11c4 * 162.633544921875, _0x3b11c4 * 60.985809326171875, _0x3b11c4 * 176.633544921875, _0x3b11c4 * 25.985809326171875);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 26.633544921875, _0x3b11c4 * 96.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 38.633544921875, _0x3b11c4 * 151.98580932617188, _0x3b11c4 * 61.633544921875, _0x3b11c4 * 161.98580932617188, _0x3b11c4 * 88.633544921875, _0x3b11c4 * 168.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 117.633544921875, _0x3b11c4 * 177.98580932617188, _0x3b11c4 * 113.633544921875, _0x3b11c4 * 185.98580932617188, _0x3b11c4 * 106.633544921875, _0x3b11c4 * 204.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 32.633544921875, _0x3b11c4 * 204.98580932617188, _0x3b11c4 * 25.633544921875, _0x3b11c4 * 149.98580932617188, _0x3b11c4 * 25.633544921875, _0x3b11c4 * 97.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 351.633544921875, _0x3b11c4 * 99.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 365.633544921875, _0x3b11c4 * 161.98580932617188, _0x3b11c4 * 333.633544921875, _0x3b11c4 * 203.98580932617188, _0x3b11c4 * 287.633544921875, _0x3b11c4 * 207.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 255.633544921875, _0x3b11c4 * 208.98580932617188, _0x3b11c4 * 266.633544921875, _0x3b11c4 * 174.98580932617188, _0x3b11c4 * 285.633544921875, _0x3b11c4 * 176.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 313.633544921875, _0x3b11c4 * 178.98580932617188, _0x3b11c4 * 348.633544921875, _0x3b11c4 * 135.98580932617188, _0x3b11c4 * 353.633544921875, _0x3b11c4 * 99.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 350.633544921875, _0x3b11c4 * 302.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 310.633544921875, _0x3b11c4 * 280.9858093261719, _0x3b11c4 * 314.633544921875, _0x3b11c4 * 244.98580932617188, _0x3b11c4 * 292.633544921875, _0x3b11c4 * 230.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 272.633544921875, _0x3b11c4 * 215.98580932617188, _0x3b11c4 * 263.633544921875, _0x3b11c4 * 222.98580932617188, _0x3b11c4 * 256.633544921875, _0x3b11c4 * 236.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 251.633544921875, _0x3b11c4 * 249.98580932617188, _0x3b11c4 * 264.633544921875, _0x3b11c4 * 255.98580932617188, _0x3b11c4 * 279.633544921875, _0x3b11c4 * 268.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 306.633544921875, _0x3b11c4 * 295.9858093261719, _0x3b11c4 * 325.633544921875, _0x3b11c4 * 299.9858093261719, _0x3b11c4 * 349.633544921875, _0x3b11c4 * 302.9858093261719);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 95.633544921875, _0x3b11c4 * 224.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 64.633544921875, _0x3b11c4 * 245.98580932617188, _0x3b11c4 * 62.633544921875, _0x3b11c4 * 280.9858093261719, _0x3b11c4 * 32.633544921875, _0x3b11c4 * 303.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 59.633544921875, _0x3b11c4 * 301.9858093261719, _0x3b11c4 * 102.633544921875, _0x3b11c4 * 260.9858093261719, _0x3b11c4 * 116.633544921875, _0x3b11c4 * 255.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 139.633544921875, _0x3b11c4 * 229.98580932617188, _0x3b11c4 * 108.633544921875, _0x3b11c4 * 209.98580932617188, _0x3b11c4 * 97.633544921875, _0x3b11c4 * 224.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 253.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.633544921875, _0x3b11c4 * 282.9858093261719, _0x3b11c4 * 205.633544921875, _0x3b11c4 * 278.9858093261719, _0x3b11c4 * 199.633544921875, _0x3b11c4 * 307.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 198.633544921875, _0x3b11c4 * 332.9858093261719, _0x3b11c4 * 201.633544921875, _0x3b11c4 * 340.9858093261719, _0x3b11c4 * 202.633544921875, _0x3b11c4 * 348.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 215.633544921875, _0x3b11c4 * 313.9858093261719, _0x3b11c4 * 226.633544921875, _0x3b11c4 * 291.9858093261719, _0x3b11c4 * 235.633544921875, _0x3b11c4 * 270.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 243.633544921875, _0x3b11c4 * 247.98580932617188, _0x3b11c4 * 219.633544921875, _0x3b11c4 * 235.98580932617188, _0x3b11c4 * 196.633544921875, _0x3b11c4 * 252.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 195.633544921875, _0x3b11c4 * 251.98580932617188);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 176.633544921875, _0x3b11c4 * 275.9858093261719, _0x3b11c4 * 182.633544921875, _0x3b11c4 * 285.9858093261719, _0x3b11c4 * 191.633544921875, _0x3b11c4 * 308.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 194.633544921875, _0x3b11c4 * 318.9858093261719, _0x3b11c4 * 190.633544921875, _0x3b11c4 * 334.9858093261719, _0x3b11c4 * 186.633544921875, _0x3b11c4 * 348.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 175.633544921875, _0x3b11c4 * 307.9858093261719, _0x3b11c4 * 157.633544921875, _0x3b11c4 * 291.9858093261719, _0x3b11c4 * 155.633544921875, _0x3b11c4 * 272.9858093261719);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 150.633544921875, _0x3b11c4 * 243.98580932617188, _0x3b11c4 * 170.633544921875, _0x3b11c4 * 236.98580932617188, _0x3b11c4 * 195.633544921875, _0x3b11c4 * 251.98580932617188);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[3]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 316, _0x3b11c4 * 186.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 315, _0x3b11c4 * 173.8020782470703, _0x3b11c4 * 298, _0x3b11c4 * 177.8020782470703, _0x3b11c4 * 293, _0x3b11c4 * 183.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 285, _0x3b11c4 * 195.8020782470703, _0x3b11c4 * 314, _0x3b11c4 * 197.8020782470703, _0x3b11c4 * 315, _0x3b11c4 * 187.8020782470703);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 340, _0x3b11c4 * 157.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 327, _0x3b11c4 * 153.8020782470703, _0x3b11c4 * 321, _0x3b11c4 * 168.8020782470703, _0x3b11c4 * 330, _0x3b11c4 * 174.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 341, _0x3b11c4 * 178.8020782470703, _0x3b11c4 * 347, _0x3b11c4 * 161.8020782470703, _0x3b11c4 * 341, _0x3b11c4 * 157.8020782470703);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 349, _0x3b11c4 * 136.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 343, _0x3b11c4 * 135.8020782470703, _0x3b11c4 * 342, _0x3b11c4 * 139.8020782470703, _0x3b11c4 * 341, _0x3b11c4 * 147.8020782470703);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 343, _0x3b11c4 * 155.8020782470703, _0x3b11c4 * 353, _0x3b11c4 * 143.8020782470703, _0x3b11c4 * 349, _0x3b11c4 * 137.8020782470703);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 278.75, _0x3b11c4 * 246.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 288.75, _0x3b11c4 * 242.4375, _0x3b11c4 * 301.75, _0x3b11c4 * 248.4375, _0x3b11c4 * 298.75, _0x3b11c4 * 262.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 293.75, _0x3b11c4 * 271.4375, _0x3b11c4 * 287.75, _0x3b11c4 * 271.4375, _0x3b11c4 * 278.75, _0x3b11c4 * 262.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 271.75, _0x3b11c4 * 255.4375, _0x3b11c4 * 274.75, _0x3b11c4 * 250.4375, _0x3b11c4 * 277.75, _0x3b11c4 * 247.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 310.75, _0x3b11c4 * 277.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 319.75, _0x3b11c4 * 280.4375, _0x3b11c4 * 322.75, _0x3b11c4 * 283.4375, _0x3b11c4 * 321.75, _0x3b11c4 * 289.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 319.75, _0x3b11c4 * 295.4375, _0x3b11c4 * 313.75, _0x3b11c4 * 291.4375, _0x3b11c4 * 308.75, _0x3b11c4 * 288.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 301.75, _0x3b11c4 * 281.4375, _0x3b11c4 * 306.75, _0x3b11c4 * 277.4375, _0x3b11c4 * 309.75, _0x3b11c4 * 277.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 217.75, _0x3b11c4 * 257.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 227.75, _0x3b11c4 * 269.4375, _0x3b11c4 * 220.75, _0x3b11c4 * 281.4375, _0x3b11c4 * 212.75, _0x3b11c4 * 280.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.75, _0x3b11c4 * 279.4375, _0x3b11c4 * 206.75, _0x3b11c4 * 269.4375, _0x3b11c4 * 204.75, _0x3b11c4 * 260.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 204.75, _0x3b11c4 * 254.4375, _0x3b11c4 * 211.75, _0x3b11c4 * 253.4375, _0x3b11c4 * 216.75, _0x3b11c4 * 256.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 211.75, _0x3b11c4 * 289.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 219.75, _0x3b11c4 * 292.4375, _0x3b11c4 * 213.75, _0x3b11c4 * 306.4375, _0x3b11c4 * 206.75, _0x3b11c4 * 307.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 199.75, _0x3b11c4 * 303.4375, _0x3b11c4 * 209.75, _0x3b11c4 * 287.4375, _0x3b11c4 * 210.75, _0x3b11c4 * 289.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 171.75, _0x3b11c4 * 256.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 162.75, _0x3b11c4 * 273.4375, _0x3b11c4 * 166.75, _0x3b11c4 * 278.4375, _0x3b11c4 * 175.75, _0x3b11c4 * 280.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 183.75, _0x3b11c4 * 278.4375, _0x3b11c4 * 185.75, _0x3b11c4 * 257.4375, _0x3b11c4 * 182.75, _0x3b11c4 * 255.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 176.75, _0x3b11c4 * 251.4375, _0x3b11c4 * 172.75, _0x3b11c4 * 253.4375, _0x3b11c4 * 172.75, _0x3b11c4 * 256.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 175.75, _0x3b11c4 * 289.9375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 183.75, _0x3b11c4 * 287.9375, _0x3b11c4 * 186.75, _0x3b11c4 * 301.9375, _0x3b11c4 * 182.75, _0x3b11c4 * 305.9375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 176.75, _0x3b11c4 * 307.9375, _0x3b11c4 * 171.75, _0x3b11c4 * 292.9375, _0x3b11c4 * 174.75, _0x3b11c4 * 290.9375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 205.75, _0x3b11c4 * 314.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.75, _0x3b11c4 * 316.4375, _0x3b11c4 * 210.75, _0x3b11c4 * 320.4375, _0x3b11c4 * 206.75, _0x3b11c4 * 323.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 201.75, _0x3b11c4 * 324.4375, _0x3b11c4 * 201.75, _0x3b11c4 * 314.4375, _0x3b11c4 * 204.75, _0x3b11c4 * 314.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 186.75, _0x3b11c4 * 313.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 181.75, _0x3b11c4 * 315.4375, _0x3b11c4 * 180.75, _0x3b11c4 * 321.4375, _0x3b11c4 * 185.75, _0x3b11c4 * 326.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 190.75, _0x3b11c4 * 327.4375, _0x3b11c4 * 190.75, _0x3b11c4 * 313.4375, _0x3b11c4 * 187.75, _0x3b11c4 * 314.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 103.75, _0x3b11c4 * 244.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 96.75, _0x3b11c4 * 239.4375, _0x3b11c4 * 83.75, _0x3b11c4 * 240.4375, _0x3b11c4 * 81.75, _0x3b11c4 * 255.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 80.75, _0x3b11c4 * 264.4375, _0x3b11c4 * 89.75, _0x3b11c4 * 269.4375, _0x3b11c4 * 99.75, _0x3b11c4 * 260.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 106.75, _0x3b11c4 * 254.4375, _0x3b11c4 * 106.75, _0x3b11c4 * 250.4375, _0x3b11c4 * 104.75, _0x3b11c4 * 245.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 86.75, _0x3b11c4 * 182.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 82.75, _0x3b11c4 * 170.4375, _0x3b11c4 * 66.75, _0x3b11c4 * 169.4375, _0x3b11c4 * 61.75, _0x3b11c4 * 181.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 58.75, _0x3b11c4 * 187.4375, _0x3b11c4 * 68.75, _0x3b11c4 * 194.4375, _0x3b11c4 * 75.75, _0x3b11c4 * 192.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 83.75, _0x3b11c4 * 192.4375, _0x3b11c4 * 86.75, _0x3b11c4 * 187.4375, _0x3b11c4 * 86.75, _0x3b11c4 * 183.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 44.75, _0x3b11c4 * 152.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 55.75, _0x3b11c4 * 159.4375, _0x3b11c4 * 54.75, _0x3b11c4 * 170.4375, _0x3b11c4 * 46.75, _0x3b11c4 * 171.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 39.75, _0x3b11c4 * 170.4375, _0x3b11c4 * 34.75, _0x3b11c4 * 151.4375, _0x3b11c4 * 43.75, _0x3b11c4 * 152.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 31.75, _0x3b11c4 * 130.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 35.75, _0x3b11c4 * 132.4375, _0x3b11c4 * 35.75, _0x3b11c4 * 131.4375, _0x3b11c4 * 37.75, _0x3b11c4 * 137.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 36.75, _0x3b11c4 * 144.4375, _0x3b11c4 * 36.75, _0x3b11c4 * 145.4375, _0x3b11c4 * 33.75, _0x3b11c4 * 144.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 26.75, _0x3b11c4 * 137.4375, _0x3b11c4 * 29.75, _0x3b11c4 * 131.4375, _0x3b11c4 * 31.75, _0x3b11c4 * 130.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 69.75, _0x3b11c4 * 274.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 62.75, _0x3b11c4 * 272.4375, _0x3b11c4 * 59.75, _0x3b11c4 * 277.4375, _0x3b11c4 * 57.75, _0x3b11c4 * 284.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 56.75, _0x3b11c4 * 290.4375, _0x3b11c4 * 63.75, _0x3b11c4 * 289.4375, _0x3b11c4 * 71.75, _0x3b11c4 * 282.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 75.75, _0x3b11c4 * 277.4375, _0x3b11c4 * 72.75, _0x3b11c4 * 275.4375, _0x3b11c4 * 69.75, _0x3b11c4 * 274.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 165.75, _0x3b11c4 * 95.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 177.75, _0x3b11c4 * 97.4375, _0x3b11c4 * 182.75, _0x3b11c4 * 115.4375, _0x3b11c4 * 173.75, _0x3b11c4 * 121.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 164.75, _0x3b11c4 * 126.4375, _0x3b11c4 * 149.75, _0x3b11c4 * 102.4375, _0x3b11c4 * 164.75, _0x3b11c4 * 96.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 216.75, _0x3b11c4 * 94.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 227.75, _0x3b11c4 * 99.4375, _0x3b11c4 * 223.75, _0x3b11c4 * 122.4375, _0x3b11c4 * 210.75, _0x3b11c4 * 119.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 203.75, _0x3b11c4 * 115.4375, _0x3b11c4 * 207.75, _0x3b11c4 * 93.4375, _0x3b11c4 * 216.75, _0x3b11c4 * 94.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 211.75, _0x3b11c4 * 68.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 218.75, _0x3b11c4 * 69.4375, _0x3b11c4 * 220.75, _0x3b11c4 * 77.4375, _0x3b11c4 * 216.75, _0x3b11c4 * 83.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 208.75, _0x3b11c4 * 89.4375, _0x3b11c4 * 205.75, _0x3b11c4 * 68.4375, _0x3b11c4 * 210.75, _0x3b11c4 * 68.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 169.75, _0x3b11c4 * 71.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 162.75, _0x3b11c4 * 72.4375, _0x3b11c4 * 159.75, _0x3b11c4 * 83.4375, _0x3b11c4 * 167.75, _0x3b11c4 * 88.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 174.75, _0x3b11c4 * 90.4375, _0x3b11c4 * 174.75, _0x3b11c4 * 72.4375, _0x3b11c4 * 170.75, _0x3b11c4 * 71.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[6], _0x885330[7], _0x3b11c4 * 4);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 193.75, _0x3b11c4 * 160.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 215.75, _0x3b11c4 * 168.4375, _0x3b11c4 * 224.75, _0x3b11c4 * 180.4375, _0x3b11c4 * 229.75, _0x3b11c4 * 193.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 223.75, _0x3b11c4 * 211.4375, _0x3b11c4 * 205.75, _0x3b11c4 * 225.4375, _0x3b11c4 * 193.75, _0x3b11c4 * 229.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 167.75, _0x3b11c4 * 217.4375, _0x3b11c4 * 161.75, _0x3b11c4 * 205.4375, _0x3b11c4 * 156.75, _0x3b11c4 * 192.4375);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 164.75, _0x3b11c4 * 175.4375, _0x3b11c4 * 176.75, _0x3b11c4 * 166.4375, _0x3b11c4 * 192.75, _0x3b11c4 * 160.4375);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[8], _0x885330[9], _0x3b11c4 * 3);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 189.1999969482422, _0x3b11c4 * 182.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 190.1999969482422, _0x3b11c4 * 184.11249923706055, _0x3b11c4 * 190.1999969482422, _0x3b11c4 * 184.11249923706055, _0x3b11c4 * 191.1999969482422, _0x3b11c4 * 185.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 192.1999969482422, _0x3b11c4 * 180.61249923706055, _0x3b11c4 * 192.1999969482422, _0x3b11c4 * 180.61249923706055, _0x3b11c4 * 193.1999969482422, _0x3b11c4 * 175.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 195.6999969482422, _0x3b11c4 * 177.11249923706055, _0x3b11c4 * 195.6999969482422, _0x3b11c4 * 177.11249923706055, _0x3b11c4 * 198.1999969482422, _0x3b11c4 * 178.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 198.1999969482422, _0x3b11c4 * 181.11249923706055, _0x3b11c4 * 198.1999969482422, _0x3b11c4 * 181.11249923706055, _0x3b11c4 * 198.1999969482422, _0x3b11c4 * 183.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 201.6999969482422, _0x3b11c4 * 181.11249923706055, _0x3b11c4 * 201.6999969482422, _0x3b11c4 * 181.11249923706055, _0x3b11c4 * 205.1999969482422, _0x3b11c4 * 178.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.6999969482422, _0x3b11c4 * 180.61249923706055, _0x3b11c4 * 206.6999969482422, _0x3b11c4 * 180.61249923706055, _0x3b11c4 * 208.1999969482422, _0x3b11c4 * 182.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.1999969482422, _0x3b11c4 * 185.61249923706055, _0x3b11c4 * 206.1999969482422, _0x3b11c4 * 185.61249923706055, _0x3b11c4 * 204.1999969482422, _0x3b11c4 * 188.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 208.6999969482422, _0x3b11c4 * 188.61249923706055, _0x3b11c4 * 208.6999969482422, _0x3b11c4 * 188.61249923706055, _0x3b11c4 * 213.1999969482422, _0x3b11c4 * 188.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 213.1999969482422, _0x3b11c4 * 191.11249923706055, _0x3b11c4 * 213.1999969482422, _0x3b11c4 * 191.11249923706055, _0x3b11c4 * 213.1999969482422, _0x3b11c4 * 193.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.6999969482422, _0x3b11c4 * 194.61249923706055, _0x3b11c4 * 209.6999969482422, _0x3b11c4 * 194.61249923706055, _0x3b11c4 * 206.1999969482422, _0x3b11c4 * 195.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 210.1999969482422, _0x3b11c4 * 198.61249923706055, _0x3b11c4 * 210.1999969482422, _0x3b11c4 * 198.61249923706055, _0x3b11c4 * 214.1999969482422, _0x3b11c4 * 201.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 212.1999969482422, _0x3b11c4 * 203.61249923706055, _0x3b11c4 * 212.1999969482422, _0x3b11c4 * 203.61249923706055, _0x3b11c4 * 210.1999969482422, _0x3b11c4 * 205.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 207.1999969482422, _0x3b11c4 * 204.11249923706055, _0x3b11c4 * 207.1999969482422, _0x3b11c4 * 204.11249923706055, _0x3b11c4 * 204.1999969482422, _0x3b11c4 * 202.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 205.6999969482422, _0x3b11c4 * 207.61249923706055, _0x3b11c4 * 205.6999969482422, _0x3b11c4 * 207.61249923706055, _0x3b11c4 * 207.1999969482422, _0x3b11c4 * 212.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 204.6999969482422, _0x3b11c4 * 213.61249923706055, _0x3b11c4 * 204.6999969482422, _0x3b11c4 * 213.61249923706055, _0x3b11c4 * 202.1999969482422, _0x3b11c4 * 214.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 200.1999969482422, _0x3b11c4 * 210.61249923706055, _0x3b11c4 * 200.1999969482422, _0x3b11c4 * 210.61249923706055, _0x3b11c4 * 198.1999969482422, _0x3b11c4 * 206.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 196.6999969482422, _0x3b11c4 * 211.61249923706055, _0x3b11c4 * 196.6999969482422, _0x3b11c4 * 211.61249923706055, _0x3b11c4 * 195.1999969482422, _0x3b11c4 * 216.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 192.6999969482422, _0x3b11c4 * 216.11249923706055, _0x3b11c4 * 192.6999969482422, _0x3b11c4 * 216.11249923706055, _0x3b11c4 * 190.1999969482422, _0x3b11c4 * 215.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 190.1999969482422, _0x3b11c4 * 211.61249923706055, _0x3b11c4 * 190.1999969482422, _0x3b11c4 * 211.61249923706055, _0x3b11c4 * 190.1999969482422, _0x3b11c4 * 207.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 186.1999969482422, _0x3b11c4 * 210.61249923706055, _0x3b11c4 * 186.1999969482422, _0x3b11c4 * 210.61249923706055, _0x3b11c4 * 182.1999969482422, _0x3b11c4 * 213.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 181.1999969482422, _0x3b11c4 * 211.11249923706055, _0x3b11c4 * 181.1999969482422, _0x3b11c4 * 211.11249923706055, _0x3b11c4 * 180.1999969482422, _0x3b11c4 * 208.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 183.1999969482422, _0x3b11c4 * 205.61249923706055, _0x3b11c4 * 183.1999969482422, _0x3b11c4 * 205.61249923706055, _0x3b11c4 * 186.1999969482422, _0x3b11c4 * 202.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 180.6999969482422, _0x3b11c4 * 203.11249923706055, _0x3b11c4 * 180.6999969482422, _0x3b11c4 * 203.11249923706055, _0x3b11c4 * 175.1999969482422, _0x3b11c4 * 203.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 174.6999969482422, _0x3b11c4 * 200.11249923706055, _0x3b11c4 * 174.6999969482422, _0x3b11c4 * 200.11249923706055, _0x3b11c4 * 174.1999969482422, _0x3b11c4 * 196.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 177.1999969482422, _0x3b11c4 * 195.61249923706055, _0x3b11c4 * 177.1999969482422, _0x3b11c4 * 195.61249923706055, _0x3b11c4 * 180.1999969482422, _0x3b11c4 * 194.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 177.1999969482422, _0x3b11c4 * 191.61249923706055, _0x3b11c4 * 177.1999969482422, _0x3b11c4 * 191.61249923706055, _0x3b11c4 * 174.1999969482422, _0x3b11c4 * 188.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 175.6999969482422, _0x3b11c4 * 187.11249923706055, _0x3b11c4 * 175.6999969482422, _0x3b11c4 * 187.11249923706055, _0x3b11c4 * 177.1999969482422, _0x3b11c4 * 185.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 180.6999969482422, _0x3b11c4 * 187.11249923706055, _0x3b11c4 * 180.6999969482422, _0x3b11c4 * 187.11249923706055, _0x3b11c4 * 184.1999969482422, _0x3b11c4 * 188.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 182.6999969482422, _0x3b11c4 * 183.61249923706055, _0x3b11c4 * 182.6999969482422, _0x3b11c4 * 183.61249923706055, _0x3b11c4 * 181.1999969482422, _0x3b11c4 * 178.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 183.1999969482422, _0x3b11c4 * 177.11249923706055, _0x3b11c4 * 183.1999969482422, _0x3b11c4 * 177.11249923706055, _0x3b11c4 * 185.1999969482422, _0x3b11c4 * 175.61249923706055);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[10]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 185.1999969482422, _0x3b11c4 * 173.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 187.1999969482422, _0x3b11c4 * 179.3125, _0x3b11c4 * 187.1999969482422, _0x3b11c4 * 179.3125, _0x3b11c4 * 189.1999969482422, _0x3b11c4 * 184.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 184.1999969482422, _0x3b11c4 * 181.8125, _0x3b11c4 * 184.1999969482422, _0x3b11c4 * 181.8125, _0x3b11c4 * 179.1999969482422, _0x3b11c4 * 178.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 181.1999969482422, _0x3b11c4 * 175.8125, _0x3b11c4 * 182.1999969482422, _0x3b11c4 * 174.8125, _0x3b11c4 * 185.1999969482422, _0x3b11c4 * 173.8125);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 192.1999969482422, _0x3b11c4 * 173.61249542236328);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 194.1999969482422, _0x3b11c4 * 172.61249542236328, _0x3b11c4 * 196.1999969482422, _0x3b11c4 * 171.61249542236328, _0x3b11c4 * 199.1999969482422, _0x3b11c4 * 173.61249542236328);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 197.6999969482422, _0x3b11c4 * 179.61249542236328, _0x3b11c4 * 197.6999969482422, _0x3b11c4 * 179.61249542236328, _0x3b11c4 * 196.1999969482422, _0x3b11c4 * 185.61249542236328);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 194.1999969482422, _0x3b11c4 * 179.61249542236328, _0x3b11c4 * 194.1999969482422, _0x3b11c4 * 179.61249542236328, _0x3b11c4 * 192.1999969482422, _0x3b11c4 * 173.61249542236328);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 205.1999969482422, _0x3b11c4 * 176.2125015258789);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 210.1999969482422, _0x3b11c4 * 178.2125015258789, _0x3b11c4 * 211.1999969482422, _0x3b11c4 * 179.2125015258789, _0x3b11c4 * 211.1999969482422, _0x3b11c4 * 181.2125015258789);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.6999969482422, _0x3b11c4 * 184.7125015258789, _0x3b11c4 * 206.6999969482422, _0x3b11c4 * 184.7125015258789, _0x3b11c4 * 202.1999969482422, _0x3b11c4 * 188.2125015258789);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 203.6999969482422, _0x3b11c4 * 182.2125015258789, _0x3b11c4 * 203.6999969482422, _0x3b11c4 * 182.2125015258789, _0x3b11c4 * 205.1999969482422, _0x3b11c4 * 176.2125015258789);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 214.1999969482422, _0x3b11c4 * 187.21249985694885);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 216.1999969482422, _0x3b11c4 * 191.21249985694885, _0x3b11c4 * 216.1999969482422, _0x3b11c4 * 192.21249985694885, _0x3b11c4 * 215.1999969482422, _0x3b11c4 * 195.21249985694885);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.1999969482422, _0x3b11c4 * 194.21249985694885, _0x3b11c4 * 205.1999969482422, _0x3b11c4 * 194.21249985694885, _0x3b11c4 * 205.1999969482422, _0x3b11c4 * 194.21249985694885);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.6999969482422, _0x3b11c4 * 190.71249985694885, _0x3b11c4 * 209.6999969482422, _0x3b11c4 * 190.71249985694885, _0x3b11c4 * 214.1999969482422, _0x3b11c4 * 187.21249985694885);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 204.1999969482422, _0x3b11c4 * 201.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 209.1999969482422, _0x3b11c4 * 201.3125, _0x3b11c4 * 209.1999969482422, _0x3b11c4 * 201.3125, _0x3b11c4 * 214.1999969482422, _0x3b11c4 * 200.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 215.1999969482422, _0x3b11c4 * 204.8125, _0x3b11c4 * 214.1999969482422, _0x3b11c4 * 205.8125, _0x3b11c4 * 213.1999969482422, _0x3b11c4 * 208.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 208.6999969482422, _0x3b11c4 * 205.3125, _0x3b11c4 * 208.6999969482422, _0x3b11c4 * 205.3125, _0x3b11c4 * 204.1999969482422, _0x3b11c4 * 201.8125);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 199.1999969482422, _0x3b11c4 * 205.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 207.1999969482422, _0x3b11c4 * 212.61249923706055, _0x3b11c4 * 203.6999969482422, _0x3b11c4 * 209.11249923706055, _0x3b11c4 * 208.1999969482422, _0x3b11c4 * 212.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 206.1999969482422, _0x3b11c4 * 215.61249923706055, _0x3b11c4 * 204.1999969482422, _0x3b11c4 * 217.61249923706055, _0x3b11c4 * 203.1999969482422, _0x3b11c4 * 216.61249923706055);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 201.1999969482422, _0x3b11c4 * 211.11249923706055, _0x3b11c4 * 201.1999969482422, _0x3b11c4 * 211.11249923706055, _0x3b11c4 * 199.1999969482422, _0x3b11c4 * 205.61249923706055);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 191.1999969482422, _0x3b11c4 * 207.01250076293945);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 194.1999969482422, _0x3b11c4 * 213.01250076293945, _0x3b11c4 * 194.1999969482422, _0x3b11c4 * 216.01250076293945, _0x3b11c4 * 196.1999969482422, _0x3b11c4 * 218.01250076293945);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 193.1999969482422, _0x3b11c4 * 220.01250076293945, _0x3b11c4 * 190.1999969482422, _0x3b11c4 * 220.01250076293945, _0x3b11c4 * 188.1999969482422, _0x3b11c4 * 218.01250076293945);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 189.6999969482422, _0x3b11c4 * 213.01250076293945, _0x3b11c4 * 189.6999969482422, _0x3b11c4 * 213.01250076293945, _0x3b11c4 * 191.1999969482422, _0x3b11c4 * 208.01250076293945);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 186.1999969482422, _0x3b11c4 * 203.21249961853027);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 184.1999969482422, _0x3b11c4 * 209.21249961853027, _0x3b11c4 * 184.1999969482422, _0x3b11c4 * 209.21249961853027, _0x3b11c4 * 182.1999969482422, _0x3b11c4 * 215.21249961853027);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 177.1999969482422, _0x3b11c4 * 212.21249961853027, _0x3b11c4 * 176.1999969482422, _0x3b11c4 * 211.21249961853027, _0x3b11c4 * 177.1999969482422, _0x3b11c4 * 210.21249961853027);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 181.6999969482422, _0x3b11c4 * 206.71249961853027, _0x3b11c4 * 181.6999969482422, _0x3b11c4 * 206.71249961853027, _0x3b11c4 * 186.1999969482422, _0x3b11c4 * 203.21249961853027);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 183.1999969482422, _0x3b11c4 * 196.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 177.1999969482422, _0x3b11c4 * 196.3125, _0x3b11c4 * 177.1999969482422, _0x3b11c4 * 196.3125, _0x3b11c4 * 171.1999969482422, _0x3b11c4 * 195.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 171.1999969482422, _0x3b11c4 * 199.8125, _0x3b11c4 * 171.1999969482422, _0x3b11c4 * 202.8125, _0x3b11c4 * 174.1999969482422, _0x3b11c4 * 204.8125);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 178.6999969482422, _0x3b11c4 * 200.8125, _0x3b11c4 * 178.6999969482422, _0x3b11c4 * 200.8125, _0x3b11c4 * 183.1999969482422, _0x3b11c4 * 196.8125);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  _0x45f163.beginPath();
  _0x45f163.lineCap = "round";
  _0x45f163.lineJoin = "round";
  _0x45f163.moveTo(_0x3b11c4 * 185.1999969482422, _0x3b11c4 * 190.21249771118164);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 179.6999969482422, _0x3b11c4 * 186.71249771118164, _0x3b11c4 * 179.6999969482422, _0x3b11c4 * 186.71249771118164, _0x3b11c4 * 174.1999969482422, _0x3b11c4 * 183.21249771118164);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 172.1999969482422, _0x3b11c4 * 186.21249771118164, _0x3b11c4 * 172.1999969482422, _0x3b11c4 * 187.21249771118164, _0x3b11c4 * 172.1999969482422, _0x3b11c4 * 190.21249771118164);
  _0x45f163.bezierCurveTo(_0x3b11c4 * 178.1999969482422, _0x3b11c4 * 190.21249771118164, _0x3b11c4 * 178.1999969482422, _0x3b11c4 * 190.21249771118164, _0x3b11c4 * 184.1999969482422, _0x3b11c4 * 190.21249771118164);
  _0x45f163.closePath();
  fill_path(_0x45f163, _0x885330[11]);
  circle(_0x45f163, _0x3b11c4 * 126.19999694824219, _0x3b11c4 * 169.8125, _0x3b11c4 * 8.94427190999916);
  fill_path(_0x45f163, _0x885330[12]);
  circle(_0x45f163, _0x3b11c4 * 123.19999694824219, _0x3b11c4 * 164.8125, _0x3b11c4 * 2.8284271247461903);
  fill_path(_0x45f163, _0x885330[13]);
  circle(_0x45f163, _0x3b11c4 * 253.1999969482422, _0x3b11c4 * 169.8125, _0x3b11c4 * 8.94427190999916);
  fill_path(_0x45f163, _0x885330[12]);
  circle(_0x45f163, _0x3b11c4 * 255.1999969482422, _0x3b11c4 * 164.8125, _0x3b11c4 * 2.23606797749979);
  fill_path(_0x45f163, _0x885330[13]);
  return _0xcb5f1b;
}
function create_bread(_0x2ed465, _0x2e191f, _0x37b7ea) {
  var _0x464932 = document.createElement("canvas");
  var _0x16beb9 = _0x464932.getContext("2d");
  _0x464932.width = _0x2ed465 * 400;
  _0x464932.height = _0x2ed465 * 400;
  _0x16beb9.globalAlpha = 1;
  _0x16beb9.translate(_0x2ed465 * 20, _0x2ed465 * 20);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 36.5, _0x2ed465 * 278.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 67.5, _0x2ed465 * 316.0625, _0x2ed465 * 134.5, _0x2ed465 * 334.0625, _0x2ed465 * 199.5, _0x2ed465 * 319.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 254.5, _0x2ed465 * 304.0625, _0x2ed465 * 346.5, _0x2ed465 * 270.0625, _0x2ed465 * 348.5, _0x2ed465 * 237.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 359.5, _0x2ed465 * 206.0625, _0x2ed465 * 318.5, _0x2ed465 * 129.0625, _0x2ed465 * 262.5, _0x2ed465 * 122.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 213.5, _0x2ed465 * 115.0625, _0x2ed465 * 166.5, _0x2ed465 * 133.0625, _0x2ed465 * 104.5, _0x2ed465 * 166.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 54.5, _0x2ed465 * 194.0625, _0x2ed465 * 23.5, _0x2ed465 * 241.0625, _0x2ed465 * 36.5, _0x2ed465 * 277.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, _0x37b7ea[0]);
  _0x16beb9.translate(_0x2ed465 * -20, _0x2ed465 * -20);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 36.5, _0x2ed465 * 278.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 67.5, _0x2ed465 * 316.0625, _0x2ed465 * 134.5, _0x2ed465 * 334.0625, _0x2ed465 * 199.5, _0x2ed465 * 319.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 254.5, _0x2ed465 * 304.0625, _0x2ed465 * 346.5, _0x2ed465 * 270.0625, _0x2ed465 * 348.5, _0x2ed465 * 237.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 359.5, _0x2ed465 * 206.0625, _0x2ed465 * 318.5, _0x2ed465 * 129.0625, _0x2ed465 * 262.5, _0x2ed465 * 122.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 213.5, _0x2ed465 * 115.0625, _0x2ed465 * 166.5, _0x2ed465 * 133.0625, _0x2ed465 * 104.5, _0x2ed465 * 166.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 54.5, _0x2ed465 * 194.0625, _0x2ed465 * 23.5, _0x2ed465 * 241.0625, _0x2ed465 * 36.5, _0x2ed465 * 277.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, _0x37b7ea[1], _0x37b7ea[2], _0x2ed465 * 19);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 214.5, _0x2ed465 * 124.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 242.5, _0x2ed465 * 125.0625, _0x2ed465 * 272.5, _0x2ed465 * 159.0625, _0x2ed465 * 283.5, _0x2ed465 * 184.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 277.5, _0x2ed465 * 161.0625, _0x2ed465 * 233.5, _0x2ed465 * 128.0625, _0x2ed465 * 219.5, _0x2ed465 * 122.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, undefined, _0x37b7ea[2], _0x2ed465 * 19);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 157.5, _0x2ed465 * 145.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 176.5, _0x2ed465 * 148.0625, _0x2ed465 * 205.5, _0x2ed465 * 176.0625, _0x2ed465 * 212.5, _0x2ed465 * 197.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 205.5, _0x2ed465 * 178.0625, _0x2ed465 * 177.5, _0x2ed465 * 152.0625, _0x2ed465 * 156.5, _0x2ed465 * 142.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, undefined, _0x37b7ea[2], _0x2ed465 * 19);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 103.5, _0x2ed465 * 169.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 160.5, _0x2ed465 * 166.0625, _0x2ed465 * 228.5, _0x2ed465 * 312.0625, _0x2ed465 * 162.5, _0x2ed465 * 323.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 128.5, _0x2ed465 * 330.0625, _0x2ed465 * 45.5, _0x2ed465 * 312.0625, _0x2ed465 * 34.5, _0x2ed465 * 268.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 30.5, _0x2ed465 * 238.0625, _0x2ed465 * 44.5, _0x2ed465 * 222.0625, _0x2ed465 * 52.5, _0x2ed465 * 211.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 82.5, _0x2ed465 * 174.0625, _0x2ed465 * 104.5, _0x2ed465 * 166.0625, _0x2ed465 * 119.5, _0x2ed465 * 172.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, _0x37b7ea[3], _0x37b7ea[2], _0x2ed465 * 19);
  circle(_0x16beb9, _0x2ed465 * 92.5, _0x2ed465 * 216.0625, _0x2ed465 * 13.892443989449804);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 68.5, _0x2ed465 * 227.0625, _0x2ed465 * 8.06225774829855);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 85.5, _0x2ed465 * 240.0625, _0x2ed465 * 6.708203932499369);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 147.5, _0x2ed465 * 294.0625, _0x2ed465 * 17.46424919657298);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 166.5, _0x2ed465 * 273.0625, _0x2ed465 * 6.708203932499369);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 114.5, _0x2ed465 * 294.0625, _0x2ed465 * 12.36931687685298);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 123.5, _0x2ed465 * 220.0625, _0x2ed465 * 5.830951894845301);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 114.5, _0x2ed465 * 259.0625, _0x2ed465 * 4.123105625617661);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 63.5, _0x2ed465 * 265.0625, _0x2ed465 * 5.385164807134504);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  circle(_0x16beb9, _0x2ed465 * 148.5, _0x2ed465 * 235.0625, _0x2ed465 * 4.47213595499958);
  fill_path(_0x16beb9, _0x37b7ea[4]);
  _0x16beb9.beginPath();
  _0x16beb9.lineCap = "round";
  _0x16beb9.lineJoin = "round";
  _0x16beb9.moveTo(_0x2ed465 * 194.5, _0x2ed465 * 313.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 222.5, _0x2ed465 * 306.0625, _0x2ed465 * 319.5, _0x2ed465 * 271.0625, _0x2ed465 * 337.5, _0x2ed465 * 241.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 274.5, _0x2ed465 * 270.0625, _0x2ed465 * 216.5, _0x2ed465 * 288.0625, _0x2ed465 * 199.5, _0x2ed465 * 287.0625);
  _0x16beb9.bezierCurveTo(_0x2ed465 * 198.5, _0x2ed465 * 302.0625, _0x2ed465 * 195.5, _0x2ed465 * 311.0625, _0x2ed465 * 193.5, _0x2ed465 * 312.0625);
  _0x16beb9.closePath();
  fill_path(_0x16beb9, _0x37b7ea[5]);
  return _0x464932;
}
function create_hurt_kraken(_0x3e292c, _0x3cbc53) {
  var _0x28605b = document.createElement("canvas");
  var _0x43ce09 = _0x28605b.getContext("2d");
  _0x28605b.width = _0x3e292c * 376;
  _0x28605b.height = _0x3e292c * 371;
  _0x43ce09.globalAlpha = 1;
  _0x43ce09.beginPath();
  _0x43ce09.lineCap = "round";
  _0x43ce09.lineJoin = "round";
  _0x43ce09.moveTo(_0x3e292c * 191.633544921875, _0x3e292c * 123.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 215.633544921875, _0x3e292c * 85.98580932617188, _0x3e292c * 187.633544921875, _0x3e292c * 71.98580932617188, _0x3e292c * 202.633544921875, _0x3e292c * 19.985809326171875);
  _0x43ce09.bezierCurveTo(_0x3e292c * 231.633544921875, _0x3e292c * 68.98580932617188, _0x3e292c * 253.633544921875, _0x3e292c * 71.98580932617188, _0x3e292c * 256.633544921875, _0x3e292c * 93.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 306.633544921875, _0x3e292c * 64.98580932617188, _0x3e292c * 319.633544921875, _0x3e292c * 61.985809326171875, _0x3e292c * 350.633544921875, _0x3e292c * 58.985809326171875);
  _0x43ce09.bezierCurveTo(_0x3e292c * 280.633544921875, _0x3e292c * 86.98580932617188, _0x3e292c * 281.633544921875, _0x3e292c * 106.98580932617188, _0x3e292c * 268.633544921875, _0x3e292c * 130.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 295.633544921875, _0x3e292c * 158.98580932617188, _0x3e292c * 328.633544921875, _0x3e292c * 155.98580932617188, _0x3e292c * 353.633544921875, _0x3e292c * 90.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 371.633544921875, _0x3e292c * 158.98580932617188, _0x3e292c * 337.633544921875, _0x3e292c * 210.98580932617188, _0x3e292c * 286.633544921875, _0x3e292c * 209.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 323.633544921875, _0x3e292c * 230.98580932617188, _0x3e292c * 317.633544921875, _0x3e292c * 274.9858093261719, _0x3e292c * 356.633544921875, _0x3e292c * 305.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 288.633544921875, _0x3e292c * 297.9858093261719, _0x3e292c * 288.633544921875, _0x3e292c * 265.9858093261719, _0x3e292c * 275.633544921875, _0x3e292c * 266.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 280.633544921875, _0x3e292c * 294.9858093261719, _0x3e292c * 315.633544921875, _0x3e292c * 306.9858093261719, _0x3e292c * 336.633544921875, _0x3e292c * 316.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 295.633544921875, _0x3e292c * 318.9858093261719, _0x3e292c * 264.633544921875, _0x3e292c * 302.9858093261719, _0x3e292c * 254.633544921875, _0x3e292c * 289.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 252.633544921875, _0x3e292c * 301.9858093261719, _0x3e292c * 224.633544921875, _0x3e292c * 315.9858093261719, _0x3e292c * 201.633544921875, _0x3e292c * 356.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 195.633544921875, _0x3e292c * 313.9858093261719, _0x3e292c * 195.633544921875, _0x3e292c * 308.9858093261719, _0x3e292c * 196.633544921875, _0x3e292c * 307.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 197.633544921875, _0x3e292c * 289.9858093261719, _0x3e292c * 207.633544921875, _0x3e292c * 283.9858093261719, _0x3e292c * 195.633544921875, _0x3e292c * 258.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 182.633544921875, _0x3e292c * 282.9858093261719, _0x3e292c * 190.633544921875, _0x3e292c * 287.9858093261719, _0x3e292c * 193.633544921875, _0x3e292c * 297.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 195.633544921875, _0x3e292c * 306.9858093261719, _0x3e292c * 191.633544921875, _0x3e292c * 334.9858093261719, _0x3e292c * 187.633544921875, _0x3e292c * 354.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 165.633544921875, _0x3e292c * 320.9858093261719, _0x3e292c * 138.633544921875, _0x3e292c * 307.9858093261719, _0x3e292c * 135.633544921875, _0x3e292c * 288.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 110.633544921875, _0x3e292c * 318.9858093261719, _0x3e292c * 68.633544921875, _0x3e292c * 323.9858093261719, _0x3e292c * 49.633544921875, _0x3e292c * 320.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 88.633544921875, _0x3e292c * 308.9858093261719, _0x3e292c * 108.633544921875, _0x3e292c * 284.9858093261719, _0x3e292c * 118.633544921875, _0x3e292c * 258.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 86.633544921875, _0x3e292c * 264.9858093261719, _0x3e292c * 75.633544921875, _0x3e292c * 310.9858093261719, _0x3e292c * 19.633544921875, _0x3e292c * 304.9858093261719);
  _0x43ce09.bezierCurveTo(_0x3e292c * 54.633544921875, _0x3e292c * 276.9858093261719, _0x3e292c * 59.633544921875, _0x3e292c * 214.98580932617188, _0x3e292c * 105.633544921875, _0x3e292c * 205.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 14.633544921875, _0x3e292c * 201.98580932617188, _0x3e292c * 24.633544921875, _0x3e292c * 141.98580932617188, _0x3e292c * 25.633544921875, _0x3e292c * 82.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 49.633544921875, _0x3e292c * 168.98580932617188, _0x3e292c * 87.633544921875, _0x3e292c * 141.98580932617188, _0x3e292c * 112.633544921875, _0x3e292c * 123.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 95.633544921875, _0x3e292c * 75.98580932617188, _0x3e292c * 70.633544921875, _0x3e292c * 68.98580932617188, _0x3e292c * 35.633544921875, _0x3e292c * 50.985809326171875);
  _0x43ce09.bezierCurveTo(_0x3e292c * 70.633544921875, _0x3e292c * 53.985809326171875, _0x3e292c * 102.633544921875, _0x3e292c * 65.98580932617188, _0x3e292c * 125.633544921875, _0x3e292c * 84.98580932617188);
  _0x43ce09.bezierCurveTo(_0x3e292c * 133.633544921875, _0x3e292c * 69.98580932617188, _0x3e292c * 166.633544921875, _0x3e292c * 42.985809326171875, _0x3e292c * 176.633544921875, _0x3e292c * 21.985809326171875);
  _0x43ce09.bezierCurveTo(_0x3e292c * 185.633544921875, _0x3e292c * 49.985809326171875, _0x3e292c * 168.633544921875, _0x3e292c * 95.98580932617188, _0x3e292c * 191.633544921875, _0x3e292c * 121.98580932617188);
  _0x43ce09.closePath();
  fill_path(_0x43ce09, _0x3cbc53[0], _0x3cbc53[0], _0x3e292c * 12);
  return _0x28605b;
}
function create_bread_oven_off(_0x1cb926, _0x3f1347, _0xf157fe) {
  var _0x2d6540 = document.createElement("canvas");
  var _0x22d523 = _0x2d6540.getContext("2d");
  _0x2d6540.width = _0x1cb926 * 440;
  _0x2d6540.height = _0x1cb926 * 388;
  _0x22d523.globalAlpha = _0x3f1347 ? 0.5 : 1;
  _0x22d523.translate(_0x1cb926 * 5, _0x1cb926 * 5);
  circle(_0x22d523, _0x1cb926 * 220, _0x1cb926 * 201, _0x1cb926 * 170.41713528867922);
  fill_path(_0x22d523, _0xf157fe[0], _0xf157fe[0], _0x1cb926 * 6);
  _0x22d523.globalAlpha = 1;
  _0x22d523.translate(_0x1cb926 * -5, _0x1cb926 * -5);
  circle(_0x22d523, _0x1cb926 * 220, _0x1cb926 * 201, _0x1cb926 * 170.41713528867922);
  fill_path(_0x22d523, _0xf157fe[1], _0xf157fe[2], _0x1cb926 * 6);
  circle(_0x22d523, _0x1cb926 * 220, _0x1cb926 * 201, _0x1cb926 * 130);
  fill_path(_0x22d523, _0xf157fe[11], _0xf157fe[2], _0x1cb926 * 6);
  circle(_0x22d523, _0x1cb926 * 222, _0x1cb926 * 199, _0x1cb926 * 120.74767078498864);
  fill_path(_0x22d523, undefined, _0xf157fe[3], _0x1cb926 * 40);
  circle(_0x22d523, _0x1cb926 * 220, _0x1cb926 * 200, _0x1cb926 * 95.44108130150245);
  fill_path(_0x22d523, undefined, _0xf157fe[2], _0x1cb926 * 15);
  _0x22d523.globalAlpha = _0x3f1347 ? 0.5 : 1;
  _0x22d523.translate(_0x1cb926 * 5, _0x1cb926 * 5);
  circle(_0x22d523, _0x1cb926 * 63, _0x1cb926 * 136, _0x1cb926 * 49.193495504995376);
  fill_path(_0x22d523, _0xf157fe[0], _0xf157fe[0], _0x1cb926 * 4);
  _0x22d523.globalAlpha = 1;
  _0x22d523.translate(_0x1cb926 * -5, _0x1cb926 * -5);
  circle(_0x22d523, _0x1cb926 * 63, _0x1cb926 * 136, _0x1cb926 * 49.193495504995376);
  fill_path(_0x22d523, _0xf157fe[8], _0xf157fe[2], _0x1cb926 * 4);
  circle(_0x22d523, _0x1cb926 * 63, _0x1cb926 * 137, _0x1cb926 * 25.632011235952593);
  fill_path(_0x22d523, _0xf157fe[7], _0xf157fe[2], _0x1cb926 * 4);
  return _0x2d6540;
}
function create_bread_oven(_0x1eb62c, _0x15c71e, _0x1b8bc1) {
  var _0xa1764c = document.createElement("canvas");
  var _0x9c90c5 = _0xa1764c.getContext("2d");
  _0xa1764c.width = _0x1eb62c * 440;
  _0xa1764c.height = _0x1eb62c * 388;
  _0x9c90c5.globalAlpha = _0x15c71e ? 0.5 : 1;
  _0x9c90c5.translate(_0x1eb62c * 5, _0x1eb62c * 5);
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 201, _0x1eb62c * 170.41713528867922);
  fill_path(_0x9c90c5, _0x1b8bc1[0], _0x1b8bc1[0], _0x1eb62c * 6);
  _0x9c90c5.globalAlpha = 1;
  _0x9c90c5.translate(_0x1eb62c * -5, _0x1eb62c * -5);
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 201, _0x1eb62c * 170.41713528867922);
  fill_path(_0x9c90c5, _0x1b8bc1[1], _0x1b8bc1[2], _0x1eb62c * 6);
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 201, _0x1eb62c * 130);
  fill_path(_0x9c90c5, _0x1b8bc1[11], _0x1b8bc1[2], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 218, _0x1eb62c * 97);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 219, _0x1eb62c * 163, _0x1eb62c * 201, _0x1eb62c * 176, _0x1eb62c * 191, _0x1eb62c * 175);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 176, _0x1eb62c * 177, _0x1eb62c * 168, _0x1eb62c * 167, _0x1eb62c * 160, _0x1eb62c * 115);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 224, _0x1eb62c * 181);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 225, _0x1eb62c * 138, _0x1eb62c * 246, _0x1eb62c * 115, _0x1eb62c * 263, _0x1eb62c * 137);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 282, _0x1eb62c * 174, _0x1eb62c * 279, _0x1eb62c * 217, _0x1eb62c * 265, _0x1eb62c * 243);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 253, _0x1eb62c * 264, _0x1eb62c * 240, _0x1eb62c * 256, _0x1eb62c * 233, _0x1eb62c * 238);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 221, _0x1eb62c * 212, _0x1eb62c * 225, _0x1eb62c * 198, _0x1eb62c * 224, _0x1eb62c * 184);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 169, _0x1eb62c * 289);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 161, _0x1eb62c * 234, _0x1eb62c * 168, _0x1eb62c * 197, _0x1eb62c * 187, _0x1eb62c * 195);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 219, _0x1eb62c * 189, _0x1eb62c * 222, _0x1eb62c * 256, _0x1eb62c * 216, _0x1eb62c * 307);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 143, _0x1eb62c * 146);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 161, _0x1eb62c * 199, _0x1eb62c * 151, _0x1eb62c * 245, _0x1eb62c * 138, _0x1eb62c * 266);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 120.5, _0x1eb62c * 239.5, _0x1eb62c * 120.5, _0x1eb62c * 239.5, _0x1eb62c * 103, _0x1eb62c * 213);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 283, _0x1eb62c * 135);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 277, _0x1eb62c * 176, _0x1eb62c * 298, _0x1eb62c * 194, _0x1eb62c * 315, _0x1eb62c * 205);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 323.5, _0x1eb62c * 175, _0x1eb62c * 323.5, _0x1eb62c * 175, _0x1eb62c * 332, _0x1eb62c * 145);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 318, _0x1eb62c * 223);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 290, _0x1eb62c * 195, _0x1eb62c * 271, _0x1eb62c * 256, _0x1eb62c * 283, _0x1eb62c * 281);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 303.5, _0x1eb62c * 267, _0x1eb62c * 303.5, _0x1eb62c * 267, _0x1eb62c * 324, _0x1eb62c * 253);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[5], _0x1b8bc1[6], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 142, _0x1eb62c * 223);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 128, _0x1eb62c * 213, _0x1eb62c * 123, _0x1eb62c * 214, _0x1eb62c * 111, _0x1eb62c * 223);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[10], _0x1b8bc1[10], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 251, _0x1eb62c * 133);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 269, _0x1eb62c * 188, _0x1eb62c * 262, _0x1eb62c * 229, _0x1eb62c * 251, _0x1eb62c * 253);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 288, _0x1eb62c * 224, _0x1eb62c * 273, _0x1eb62c * 139, _0x1eb62c * 252, _0x1eb62c * 133);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[10], _0x1b8bc1[10], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 203, _0x1eb62c * 102);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 204, _0x1eb62c * 136, _0x1eb62c * 200, _0x1eb62c * 159, _0x1eb62c * 189, _0x1eb62c * 174);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 223, _0x1eb62c * 164, _0x1eb62c * 219, _0x1eb62c * 87, _0x1eb62c * 205, _0x1eb62c * 83);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[10], _0x1b8bc1[10], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 196, _0x1eb62c * 324);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 209, _0x1eb62c * 239, _0x1eb62c * 200, _0x1eb62c * 219, _0x1eb62c * 192, _0x1eb62c * 196);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 229, _0x1eb62c * 216, _0x1eb62c * 219, _0x1eb62c * 316, _0x1eb62c * 198, _0x1eb62c * 325);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, _0x1b8bc1[10], _0x1b8bc1[10], _0x1eb62c * 4);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 266, _0x1eb62c * 166);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 249, _0x1eb62c * 154, _0x1eb62c * 243, _0x1eb62c * 161, _0x1eb62c * 233, _0x1eb62c * 167);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 269, _0x1eb62c * 192);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 256, _0x1eb62c * 183, _0x1eb62c * 241, _0x1eb62c * 186, _0x1eb62c * 233, _0x1eb62c * 192);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 263, _0x1eb62c * 217);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 251, _0x1eb62c * 211, _0x1eb62c * 242, _0x1eb62c * 213, _0x1eb62c * 236, _0x1eb62c * 218);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 204, _0x1eb62c * 141);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 191, _0x1eb62c * 131, _0x1eb62c * 187, _0x1eb62c * 133, _0x1eb62c * 176, _0x1eb62c * 141);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 207, _0x1eb62c * 230);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 193, _0x1eb62c * 222, _0x1eb62c * 185, _0x1eb62c * 224, _0x1eb62c * 177, _0x1eb62c * 231);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 210, _0x1eb62c * 258);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 196, _0x1eb62c * 247, _0x1eb62c * 191, _0x1eb62c * 250, _0x1eb62c * 177, _0x1eb62c * 259);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 145, _0x1eb62c * 196);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 130, _0x1eb62c * 186, _0x1eb62c * 124, _0x1eb62c * 187, _0x1eb62c * 114, _0x1eb62c * 195);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 218, _0x1eb62c * 97);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 219, _0x1eb62c * 163, _0x1eb62c * 201, _0x1eb62c * 176, _0x1eb62c * 191, _0x1eb62c * 175);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 176, _0x1eb62c * 177, _0x1eb62c * 168, _0x1eb62c * 167, _0x1eb62c * 160, _0x1eb62c * 115);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 224, _0x1eb62c * 181);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 225, _0x1eb62c * 138, _0x1eb62c * 246, _0x1eb62c * 115, _0x1eb62c * 263, _0x1eb62c * 137);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 282, _0x1eb62c * 174, _0x1eb62c * 279, _0x1eb62c * 217, _0x1eb62c * 265, _0x1eb62c * 243);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 253, _0x1eb62c * 264, _0x1eb62c * 240, _0x1eb62c * 256, _0x1eb62c * 233, _0x1eb62c * 238);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 221, _0x1eb62c * 212, _0x1eb62c * 225, _0x1eb62c * 198, _0x1eb62c * 224, _0x1eb62c * 184);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 169, _0x1eb62c * 289);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 161, _0x1eb62c * 234, _0x1eb62c * 168, _0x1eb62c * 197, _0x1eb62c * 187, _0x1eb62c * 195);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 219, _0x1eb62c * 189, _0x1eb62c * 222, _0x1eb62c * 256, _0x1eb62c * 216, _0x1eb62c * 307);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 143, _0x1eb62c * 146);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 161, _0x1eb62c * 199, _0x1eb62c * 151, _0x1eb62c * 245, _0x1eb62c * 138, _0x1eb62c * 266);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 120.5, _0x1eb62c * 239.5, _0x1eb62c * 120.5, _0x1eb62c * 239.5, _0x1eb62c * 103, _0x1eb62c * 213);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 283, _0x1eb62c * 135);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 277, _0x1eb62c * 176, _0x1eb62c * 298, _0x1eb62c * 194, _0x1eb62c * 315, _0x1eb62c * 205);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 323.5, _0x1eb62c * 175, _0x1eb62c * 323.5, _0x1eb62c * 175, _0x1eb62c * 332, _0x1eb62c * 145);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  _0x9c90c5.beginPath();
  _0x9c90c5.lineCap = "round";
  _0x9c90c5.lineJoin = "round";
  _0x9c90c5.moveTo(_0x1eb62c * 318, _0x1eb62c * 223);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 290, _0x1eb62c * 195, _0x1eb62c * 271, _0x1eb62c * 256, _0x1eb62c * 283, _0x1eb62c * 281);
  _0x9c90c5.bezierCurveTo(_0x1eb62c * 303.5, _0x1eb62c * 267, _0x1eb62c * 303.5, _0x1eb62c * 267, _0x1eb62c * 324, _0x1eb62c * 253);
  _0x9c90c5.closePath();
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[6], _0x1eb62c * 6);
  circle(_0x9c90c5, _0x1eb62c * 222, _0x1eb62c * 199, _0x1eb62c * 120.74767078498864);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[3], _0x1eb62c * 40);
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 200, _0x1eb62c * 95.44108130150245);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[2], _0x1eb62c * 15);
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 201, _0x1eb62c * 85);
  fill_path(_0x9c90c5, undefined, _0x1b8bc1[4], _0x1eb62c * 10);
  _0x9c90c5.globalAlpha = 0.5;
  circle(_0x9c90c5, _0x1eb62c * 220, _0x1eb62c * 201, _0x1eb62c * 82);
  fill_path(_0x9c90c5, _0x1b8bc1[9]);
  _0x9c90c5.globalAlpha = _0x15c71e ? 0.5 : 1;
  _0x9c90c5.translate(_0x1eb62c * 5, _0x1eb62c * 5);
  circle(_0x9c90c5, _0x1eb62c * 63, _0x1eb62c * 136, _0x1eb62c * 49.193495504995376);
  fill_path(_0x9c90c5, _0x1b8bc1[0], _0x1b8bc1[0], _0x1eb62c * 4);
  _0x9c90c5.globalAlpha = 1;
  _0x9c90c5.translate(_0x1eb62c * -5, _0x1eb62c * -5);
  circle(_0x9c90c5, _0x1eb62c * 63, _0x1eb62c * 136, _0x1eb62c * 49.193495504995376);
  fill_path(_0x9c90c5, _0x1b8bc1[8], _0x1b8bc1[2], _0x1eb62c * 4);
  circle(_0x9c90c5, _0x1eb62c * 63, _0x1eb62c * 137, _0x1eb62c * 25.632011235952593);
  fill_path(_0x9c90c5, _0x1b8bc1[7], _0x1b8bc1[2], _0x1eb62c * 4);
  return _0xa1764c;
}
function create_bread_light_down(_0x3d13c7, _0x223677) {
  var _0x7c7f72 = document.createElement("canvas");
  var _0x2e6d0d = _0x7c7f72.getContext("2d");
  _0x7c7f72.width = _0x3d13c7 * 110;
  _0x7c7f72.height = _0x3d13c7 * 110;
  _0x2e6d0d.globalAlpha = 0.2;
  circle(_0x2e6d0d, _0x3d13c7 * 55, _0x3d13c7 * 55, _0x3d13c7 * 55);
  fill_path(_0x2e6d0d, _0x223677[0]);
  return _0x7c7f72;
}
function create_bread_light_up(_0x4461e0, _0x2b5f35) {
  var _0x39bd48 = document.createElement("canvas");
  var _0x1498c7 = _0x39bd48.getContext("2d");
  _0x39bd48.width = _0x4461e0 * 110;
  _0x39bd48.height = _0x4461e0 * 110;
  _0x1498c7.globalAlpha = 0.2;
  circle(_0x1498c7, _0x4461e0 * 55, _0x4461e0 * 55, _0x4461e0 * 55);
  fill_path(_0x1498c7, _0x2b5f35[0]);
  return _0x39bd48;
}
function create_bridge(_0x5b92e0, _0x3748cc, _0x14eab3) {
  var _0x149f44 = document.createElement("canvas");
  var _0x296774 = _0x149f44.getContext("2d");
  _0x149f44.width = _0x5b92e0 * 102;
  _0x149f44.height = _0x5b92e0 * 102;
  _0x296774.globalAlpha = _0x3748cc ? 0.5 : 1;
  _0x296774.translate(3, 3);
  round_rect(_0x296774, _0x5b92e0 * 24, _0x5b92e0 * 26, _0x5b92e0 * 70, _0x5b92e0 * 9, _0x5b92e0 * 10);
  fill_path(_0x296774, _0x14eab3[0]);
  round_rect(_0x296774, _0x5b92e0 * 26, _0x5b92e0 * 70, _0x5b92e0 * 70, _0x5b92e0 * 9, _0x5b92e0 * 10);
  fill_path(_0x296774, _0x14eab3[0]);
  round_rect(_0x296774, _0x5b92e0 * 5, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[0]);
  round_rect(_0x296774, _0x5b92e0 * 40, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[0]);
  round_rect(_0x296774, _0x5b92e0 * 75, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[0]);
  _0x296774.globalAlpha = 1;
  _0x296774.translate(-3, -3);
  round_rect(_0x296774, _0x5b92e0 * 24, _0x5b92e0 * 26, _0x5b92e0 * 70, _0x5b92e0 * 9, _0x5b92e0 * 10);
  fill_path(_0x296774, _0x14eab3[1]);
  round_rect(_0x296774, _0x5b92e0 * 26, _0x5b92e0 * 70, _0x5b92e0 * 70, _0x5b92e0 * 9, _0x5b92e0 * 10);
  fill_path(_0x296774, _0x14eab3[1]);
  round_rect(_0x296774, _0x5b92e0 * 5, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[2], _0x14eab3[3], _0x5b92e0 * 4);
  round_rect(_0x296774, _0x5b92e0 * 40, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[2], _0x14eab3[3], _0x5b92e0 * 4);
  round_rect(_0x296774, _0x5b92e0 * 75, _0x5b92e0 * 3, _0x5b92e0 * 22, _0x5b92e0 * 94, _0x5b92e0 * 5);
  fill_path(_0x296774, _0x14eab3[2], _0x14eab3[3], _0x5b92e0 * 4);
  return _0x149f44;
}
function create_well_border(_0x5337c1, _0x2ea64c) {
  var _0x55df49 = document.createElement("canvas");
  var _0x57979a = _0x55df49.getContext("2d");
  _0x55df49.width = _0x5337c1 * 496;
  _0x55df49.height = _0x5337c1 * 520;
  _0x57979a.globalAlpha = 1;
  _0x57979a.translate(0, _0x5337c1 * -10);
  circle(_0x57979a, _0x5337c1 * 247.01138305664062, _0x5337c1 * 250.13068389892578, _0x5337c1 * 232.81967270830015);
  fill_path(_0x57979a, _0x2ea64c[1], _0x2ea64c[2], _0x5337c1 * 14);
  _0x57979a.globalCompositeOperation = "destination-out";
  circle(_0x57979a, _0x5337c1 * 247.01138305664062, _0x5337c1 * 249.3125, _0x5337c1 * 161.4465855941215);
  fill_path(_0x57979a, _0x2ea64c[0], _0x2ea64c[0], _0x5337c1 * 14);
  _0x57979a.globalCompositeOperation = "source-over";
  return _0x55df49;
}
function create_well(_0x113b2f, _0x5e0318, _0x2a6777) {
  var _0x55b811 = document.createElement("canvas");
  var _0x5ae601 = _0x55b811.getContext("2d");
  _0x55b811.width = _0x113b2f * 496;
  _0x55b811.height = _0x113b2f * 520;
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 10);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 19.000030517578125, _0x113b2f * 256.67613983154297);
  _0x5ae601.bezierCurveTo(_0x113b2f * 1.000030517578125, _0x113b2f * 332.67613983154297, _0x113b2f * 23.000030517578125, _0x113b2f * 404.67613983154297, _0x113b2f * 95.00003051757812, _0x113b2f * 463.67613983154297);
  _0x5ae601.bezierCurveTo(_0x113b2f * 128.00003051757812, _0x113b2f * 491.67613983154297, _0x113b2f * 165.00003051757812, _0x113b2f * 507.67613983154297, _0x113b2f * 194.00003051757812, _0x113b2f * 512.676139831543);
  _0x5ae601.bezierCurveTo(_0x113b2f * 280.0000305175781, _0x113b2f * 517.676139831543, _0x113b2f * 291.0000305175781, _0x113b2f * 516.676139831543, _0x113b2f * 342.0000305175781, _0x113b2f * 497.67613983154297);
  _0x5ae601.bezierCurveTo(_0x113b2f * 425.0000305175781, _0x113b2f * 454.67613983154297, _0x113b2f * 469.0000305175781, _0x113b2f * 392.67613983154297, _0x113b2f * 468.0000305175781, _0x113b2f * 300.67613983154297);
  _0x5ae601.bezierCurveTo(_0x113b2f * 408.5000305175781, _0x113b2f * 365.17613983154297, _0x113b2f * 408.5000305175781, _0x113b2f * 365.17613983154297, _0x113b2f * 349.0000305175781, _0x113b2f * 429.67613983154297);
  _0x5ae601.bezierCurveTo(_0x113b2f * 256.0000305175781, _0x113b2f * 473.67613983154297, _0x113b2f * 167.00003051757812, _0x113b2f * 459.67613983154297, _0x113b2f * 78.00003051757812, _0x113b2f * 384.67613983154297);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0]);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -10);
  circle(_0x5ae601, _0x113b2f * 247.01138305664062, _0x113b2f * 249.3125, _0x113b2f * 161.4465855941215);
  fill_path(_0x5ae601, _0x2a6777[5], undefined, _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 10);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 65.00003051757812, _0x113b2f * 263.4034118652344);
  _0x5ae601.bezierCurveTo(_0x113b2f * 109.00003051757812, _0x113b2f * 160.40341186523438, _0x113b2f * 185.00003051757812, _0x113b2f * 128.40341186523438, _0x113b2f * 222.00003051757812, _0x113b2f * 124.40341186523438);
  _0x5ae601.bezierCurveTo(_0x113b2f * 277.0000305175781, _0x113b2f * 116.40341186523438, _0x113b2f * 339.0000305175781, _0x113b2f * 134.40341186523438, _0x113b2f * 379.0000305175781, _0x113b2f * 195.40341186523438);
  _0x5ae601.bezierCurveTo(_0x113b2f * 409.0000305175781, _0x113b2f * 242.40341186523438, _0x113b2f * 416.0000305175781, _0x113b2f * 256.4034118652344, _0x113b2f * 428.0000305175781, _0x113b2f * 304.4034118652344);
  _0x5ae601.bezierCurveTo(_0x113b2f * 457.0000305175781, _0x113b2f * 203.40341186523438, _0x113b2f * 449.0000305175781, _0x113b2f * 183.40341186523438, _0x113b2f * 438.0000305175781, _0x113b2f * 162.40341186523438);
  _0x5ae601.bezierCurveTo(_0x113b2f * 381.0000305175781, _0x113b2f * 73.40341186523438, _0x113b2f * 360.0000305175781, _0x113b2f * 66.40341186523438, _0x113b2f * 257.0000305175781, _0x113b2f * 46.403411865234375);
  _0x5ae601.bezierCurveTo(_0x113b2f * 191.00003051757812, _0x113b2f * 45.403411865234375, _0x113b2f * 142.00003051757812, _0x113b2f * 65.40341186523438, _0x113b2f * 101.00003051757812, _0x113b2f * 115.40341186523438);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0]);
  _0x5ae601.globalAlpha = 1;
  var _0x353e31 = create_well_border(_0x113b2f, _0x2a6777);
  _0x5ae601.drawImage(_0x353e31, 0, 0);
  _0x5ae601.translate(0, _0x113b2f * -10);
  circle(_0x5ae601, _0x113b2f * 247.01138305664062, _0x113b2f * 249.3125, _0x113b2f * 161.4465855941215);
  fill_path(_0x5ae601, undefined, _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 325.0113830566406, _0x113b2f * 13.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 349.5113830566406, _0x113b2f * 25.767059326171875, _0x113b2f * 349.5113830566406, _0x113b2f * 25.767059326171875, _0x113b2f * 374.0113830566406, _0x113b2f * 37.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 384.0113830566406, _0x113b2f * 44.767059326171875, _0x113b2f * 383.0113830566406, _0x113b2f * 50.767059326171875, _0x113b2f * 368.0113830566406, _0x113b2f * 68.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 352.5113830566406, _0x113b2f * 91.26705932617188, _0x113b2f * 352.5113830566406, _0x113b2f * 91.26705932617188, _0x113b2f * 337.0113830566406, _0x113b2f * 113.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 328.0113830566406, _0x113b2f * 119.76705932617188, _0x113b2f * 328.0113830566406, _0x113b2f * 121.76705932617188, _0x113b2f * 312.0113830566406, _0x113b2f * 112.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 303.0113830566406, _0x113b2f * 108.26705932617188, _0x113b2f * 303.0113830566406, _0x113b2f * 108.26705932617188, _0x113b2f * 294.0113830566406, _0x113b2f * 103.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 287.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 293.0113830566406, _0x113b2f * 84.76705932617188, _0x113b2f * 297.0113830566406, _0x113b2f * 67.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 302.0113830566406, _0x113b2f * 47.767059326171875, _0x113b2f * 302.0113830566406, _0x113b2f * 47.767059326171875, _0x113b2f * 307.0113830566406, _0x113b2f * 27.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 310.0113830566406, _0x113b2f * 15.767059326171875, _0x113b2f * 317.0113830566406, _0x113b2f * 12.767059326171875, _0x113b2f * 323.0113830566406, _0x113b2f * 13.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 325.0113830566406, _0x113b2f * 13.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 349.5113830566406, _0x113b2f * 25.767059326171875, _0x113b2f * 349.5113830566406, _0x113b2f * 25.767059326171875, _0x113b2f * 374.0113830566406, _0x113b2f * 37.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 384.0113830566406, _0x113b2f * 44.767059326171875, _0x113b2f * 383.0113830566406, _0x113b2f * 50.767059326171875, _0x113b2f * 368.0113830566406, _0x113b2f * 68.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 352.5113830566406, _0x113b2f * 91.26705932617188, _0x113b2f * 352.5113830566406, _0x113b2f * 91.26705932617188, _0x113b2f * 337.0113830566406, _0x113b2f * 113.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 328.0113830566406, _0x113b2f * 119.76705932617188, _0x113b2f * 328.0113830566406, _0x113b2f * 121.76705932617188, _0x113b2f * 312.0113830566406, _0x113b2f * 112.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 303.0113830566406, _0x113b2f * 108.26705932617188, _0x113b2f * 303.0113830566406, _0x113b2f * 108.26705932617188, _0x113b2f * 294.0113830566406, _0x113b2f * 103.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 287.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 293.0113830566406, _0x113b2f * 84.76705932617188, _0x113b2f * 297.0113830566406, _0x113b2f * 67.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 302.0113830566406, _0x113b2f * 47.767059326171875, _0x113b2f * 302.0113830566406, _0x113b2f * 47.767059326171875, _0x113b2f * 307.0113830566406, _0x113b2f * 27.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 310.0113830566406, _0x113b2f * 15.767059326171875, _0x113b2f * 317.0113830566406, _0x113b2f * 12.767059326171875, _0x113b2f * 323.0113830566406, _0x113b2f * 13.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[3], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 403.0113830566406, _0x113b2f * 89.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 413.0113830566406, _0x113b2f * 76.76705932617188, _0x113b2f * 418.0113830566406, _0x113b2f * 79.76705932617188, _0x113b2f * 428.0113830566406, _0x113b2f * 92.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 435.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 435.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 442.0113830566406, _0x113b2f * 106.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 450.0113830566406, _0x113b2f * 116.76705932617188, _0x113b2f * 445.0113830566406, _0x113b2f * 119.76705932617188, _0x113b2f * 433.0113830566406, _0x113b2f * 128.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 408.0113830566406, _0x113b2f * 146.26705932617188, _0x113b2f * 408.0113830566406, _0x113b2f * 146.26705932617188, _0x113b2f * 383.0113830566406, _0x113b2f * 163.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 376.0113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 377.0113830566406, _0x113b2f * 165.76705932617188, _0x113b2f * 368.0113830566406, _0x113b2f * 156.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 359.0113830566406, _0x113b2f * 144.76705932617188, _0x113b2f * 359.0113830566406, _0x113b2f * 142.76705932617188, _0x113b2f * 367.0113830566406, _0x113b2f * 133.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 403.0113830566406, _0x113b2f * 89.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 413.0113830566406, _0x113b2f * 76.76705932617188, _0x113b2f * 418.0113830566406, _0x113b2f * 79.76705932617188, _0x113b2f * 428.0113830566406, _0x113b2f * 92.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 435.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 435.0113830566406, _0x113b2f * 99.76705932617188, _0x113b2f * 442.0113830566406, _0x113b2f * 106.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 450.0113830566406, _0x113b2f * 116.76705932617188, _0x113b2f * 445.0113830566406, _0x113b2f * 119.76705932617188, _0x113b2f * 433.0113830566406, _0x113b2f * 128.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 408.0113830566406, _0x113b2f * 146.26705932617188, _0x113b2f * 408.0113830566406, _0x113b2f * 146.26705932617188, _0x113b2f * 383.0113830566406, _0x113b2f * 163.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 376.0113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 377.0113830566406, _0x113b2f * 165.76705932617188, _0x113b2f * 368.0113830566406, _0x113b2f * 156.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 359.0113830566406, _0x113b2f * 144.76705932617188, _0x113b2f * 359.0113830566406, _0x113b2f * 142.76705932617188, _0x113b2f * 367.0113830566406, _0x113b2f * 133.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 228.01138305664062, _0x113b2f * 1.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 246.51138305664062, _0x113b2f * 3.267059326171875, _0x113b2f * 246.51138305664062, _0x113b2f * 3.267059326171875, _0x113b2f * 265.0113830566406, _0x113b2f * 4.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 273.0113830566406, _0x113b2f * 5.767059326171875, _0x113b2f * 275.0113830566406, _0x113b2f * 11.767059326171875, _0x113b2f * 270.0113830566406, _0x113b2f * 27.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 264.0113830566406, _0x113b2f * 54.267059326171875, _0x113b2f * 264.0113830566406, _0x113b2f * 54.267059326171875, _0x113b2f * 258.0113830566406, _0x113b2f * 80.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 256.0113830566406, _0x113b2f * 92.76705932617188, _0x113b2f * 256.0113830566406, _0x113b2f * 94.76705932617188, _0x113b2f * 242.01138305664062, _0x113b2f * 93.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 226.01138305664062, _0x113b2f * 95.76705932617188, _0x113b2f * 225.01138305664062, _0x113b2f * 91.76705932617188, _0x113b2f * 225.01138305664062, _0x113b2f * 80.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 223.51138305664062, _0x113b2f * 50.267059326171875, _0x113b2f * 223.51138305664062, _0x113b2f * 50.267059326171875, _0x113b2f * 222.01138305664062, _0x113b2f * 19.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 219.01138305664062, _0x113b2f * 8.767059326171875, _0x113b2f * 224.01138305664062, _0x113b2f * 4.767059326171875, _0x113b2f * 227.01138305664062, _0x113b2f * 2.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 228.01138305664062, _0x113b2f * 1.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 246.51138305664062, _0x113b2f * 3.267059326171875, _0x113b2f * 246.51138305664062, _0x113b2f * 3.267059326171875, _0x113b2f * 265.0113830566406, _0x113b2f * 4.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 273.0113830566406, _0x113b2f * 5.767059326171875, _0x113b2f * 275.0113830566406, _0x113b2f * 11.767059326171875, _0x113b2f * 270.0113830566406, _0x113b2f * 27.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 264.0113830566406, _0x113b2f * 54.267059326171875, _0x113b2f * 264.0113830566406, _0x113b2f * 54.267059326171875, _0x113b2f * 258.0113830566406, _0x113b2f * 80.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 256.0113830566406, _0x113b2f * 92.76705932617188, _0x113b2f * 256.0113830566406, _0x113b2f * 94.76705932617188, _0x113b2f * 242.01138305664062, _0x113b2f * 93.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 226.01138305664062, _0x113b2f * 95.76705932617188, _0x113b2f * 225.01138305664062, _0x113b2f * 91.76705932617188, _0x113b2f * 225.01138305664062, _0x113b2f * 80.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 223.51138305664062, _0x113b2f * 50.267059326171875, _0x113b2f * 223.51138305664062, _0x113b2f * 50.267059326171875, _0x113b2f * 222.01138305664062, _0x113b2f * 19.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 219.01138305664062, _0x113b2f * 8.767059326171875, _0x113b2f * 224.01138305664062, _0x113b2f * 4.767059326171875, _0x113b2f * 227.01138305664062, _0x113b2f * 2.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 142.01138305664062, _0x113b2f * 25.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 158.51138305664062, _0x113b2f * 19.767059326171875, _0x113b2f * 158.51138305664062, _0x113b2f * 19.767059326171875, _0x113b2f * 175.01138305664062, _0x113b2f * 13.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 188.01138305664062, _0x113b2f * 11.767059326171875, _0x113b2f * 188.01138305664062, _0x113b2f * 16.767059326171875, _0x113b2f * 191.01138305664062, _0x113b2f * 29.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 197.01138305664062, _0x113b2f * 60.267059326171875, _0x113b2f * 197.01138305664062, _0x113b2f * 60.267059326171875, _0x113b2f * 203.01138305664062, _0x113b2f * 90.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 206.01138305664062, _0x113b2f * 102.76705932617188, _0x113b2f * 196.01138305664062, _0x113b2f * 99.76705932617188, _0x113b2f * 181.01138305664062, _0x113b2f * 105.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 175.01138305664062, _0x113b2f * 108.76705932617188, _0x113b2f * 172.01138305664062, _0x113b2f * 104.76705932617188, _0x113b2f * 164.01138305664062, _0x113b2f * 84.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 152.51138305664062, _0x113b2f * 63.267059326171875, _0x113b2f * 152.51138305664062, _0x113b2f * 63.267059326171875, _0x113b2f * 141.01138305664062, _0x113b2f * 41.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 138.01138305664062, _0x113b2f * 35.767059326171875, _0x113b2f * 138.01138305664062, _0x113b2f * 29.767059326171875, _0x113b2f * 141.01138305664062, _0x113b2f * 27.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 142.01138305664062, _0x113b2f * 25.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 158.51138305664062, _0x113b2f * 19.767059326171875, _0x113b2f * 158.51138305664062, _0x113b2f * 19.767059326171875, _0x113b2f * 175.01138305664062, _0x113b2f * 13.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 188.01138305664062, _0x113b2f * 11.767059326171875, _0x113b2f * 188.01138305664062, _0x113b2f * 16.767059326171875, _0x113b2f * 191.01138305664062, _0x113b2f * 29.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 197.01138305664062, _0x113b2f * 60.267059326171875, _0x113b2f * 197.01138305664062, _0x113b2f * 60.267059326171875, _0x113b2f * 203.01138305664062, _0x113b2f * 90.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 206.01138305664062, _0x113b2f * 102.76705932617188, _0x113b2f * 196.01138305664062, _0x113b2f * 99.76705932617188, _0x113b2f * 181.01138305664062, _0x113b2f * 105.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 175.01138305664062, _0x113b2f * 108.76705932617188, _0x113b2f * 172.01138305664062, _0x113b2f * 104.76705932617188, _0x113b2f * 164.01138305664062, _0x113b2f * 84.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 152.51138305664062, _0x113b2f * 63.267059326171875, _0x113b2f * 152.51138305664062, _0x113b2f * 63.267059326171875, _0x113b2f * 141.01138305664062, _0x113b2f * 41.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 138.01138305664062, _0x113b2f * 35.767059326171875, _0x113b2f * 138.01138305664062, _0x113b2f * 29.767059326171875, _0x113b2f * 141.01138305664062, _0x113b2f * 27.767059326171875);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 70.01138305664062, _0x113b2f * 76.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 83.01138305664062, _0x113b2f * 64.26705932617188, _0x113b2f * 83.01138305664062, _0x113b2f * 64.26705932617188, _0x113b2f * 96.01138305664062, _0x113b2f * 51.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 104.01138305664062, _0x113b2f * 44.767059326171875, _0x113b2f * 110.01138305664062, _0x113b2f * 51.767059326171875, _0x113b2f * 119.01138305664062, _0x113b2f * 66.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 135.01138305664062, _0x113b2f * 88.26705932617188, _0x113b2f * 135.01138305664062, _0x113b2f * 88.26705932617188, _0x113b2f * 151.01138305664062, _0x113b2f * 109.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 157.01138305664062, _0x113b2f * 119.76705932617188, _0x113b2f * 153.01138305664062, _0x113b2f * 122.76705932617188, _0x113b2f * 147.01138305664062, _0x113b2f * 129.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 138.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 136.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 122.01138305664062, _0x113b2f * 127.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 99.51138305664062, _0x113b2f * 110.26705932617188, _0x113b2f * 99.51138305664062, _0x113b2f * 110.26705932617188, _0x113b2f * 77.01138305664062, _0x113b2f * 92.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 66.01138305664062, _0x113b2f * 83.76705932617188, _0x113b2f * 66.01138305664062, _0x113b2f * 82.76705932617188, _0x113b2f * 69.01138305664062, _0x113b2f * 78.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 70.01138305664062, _0x113b2f * 76.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 83.01138305664062, _0x113b2f * 64.26705932617188, _0x113b2f * 83.01138305664062, _0x113b2f * 64.26705932617188, _0x113b2f * 96.01138305664062, _0x113b2f * 51.767059326171875);
  _0x5ae601.bezierCurveTo(_0x113b2f * 104.01138305664062, _0x113b2f * 44.767059326171875, _0x113b2f * 110.01138305664062, _0x113b2f * 51.767059326171875, _0x113b2f * 119.01138305664062, _0x113b2f * 66.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 135.01138305664062, _0x113b2f * 88.26705932617188, _0x113b2f * 135.01138305664062, _0x113b2f * 88.26705932617188, _0x113b2f * 151.01138305664062, _0x113b2f * 109.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 157.01138305664062, _0x113b2f * 119.76705932617188, _0x113b2f * 153.01138305664062, _0x113b2f * 122.76705932617188, _0x113b2f * 147.01138305664062, _0x113b2f * 129.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 138.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 136.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 122.01138305664062, _0x113b2f * 127.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 99.51138305664062, _0x113b2f * 110.26705932617188, _0x113b2f * 99.51138305664062, _0x113b2f * 110.26705932617188, _0x113b2f * 77.01138305664062, _0x113b2f * 92.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 66.01138305664062, _0x113b2f * 83.76705932617188, _0x113b2f * 66.01138305664062, _0x113b2f * 82.76705932617188, _0x113b2f * 69.01138305664062, _0x113b2f * 78.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 33.011383056640625, _0x113b2f * 126.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 22.011383056640625, _0x113b2f * 149.76705932617188, _0x113b2f * 22.011383056640625, _0x113b2f * 149.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 172.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 7.011383056640625, _0x113b2f * 184.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 189.76705932617188, _0x113b2f * 36.011383056640625, _0x113b2f * 195.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 61.011383056640625, _0x113b2f * 202.26705932617188, _0x113b2f * 61.011383056640625, _0x113b2f * 202.26705932617188, _0x113b2f * 86.01138305664062, _0x113b2f * 208.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 100.01138305664062, _0x113b2f * 214.76705932617188, _0x113b2f * 102.01138305664062, _0x113b2f * 203.76705932617188, _0x113b2f * 109.01138305664062, _0x113b2f * 189.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 117.01138305664062, _0x113b2f * 171.76705932617188, _0x113b2f * 116.01138305664062, _0x113b2f * 166.76705932617188, _0x113b2f * 97.01138305664062, _0x113b2f * 156.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 74.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 74.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 51.011383056640625, _0x113b2f * 124.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 42.011383056640625, _0x113b2f * 118.76705932617188, _0x113b2f * 37.011383056640625, _0x113b2f * 119.76705932617188, _0x113b2f * 33.011383056640625, _0x113b2f * 126.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 33.011383056640625, _0x113b2f * 126.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 22.011383056640625, _0x113b2f * 149.76705932617188, _0x113b2f * 22.011383056640625, _0x113b2f * 149.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 172.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 7.011383056640625, _0x113b2f * 184.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 189.76705932617188, _0x113b2f * 36.011383056640625, _0x113b2f * 195.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 61.011383056640625, _0x113b2f * 202.26705932617188, _0x113b2f * 61.011383056640625, _0x113b2f * 202.26705932617188, _0x113b2f * 86.01138305664062, _0x113b2f * 208.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 100.01138305664062, _0x113b2f * 214.76705932617188, _0x113b2f * 102.01138305664062, _0x113b2f * 203.76705932617188, _0x113b2f * 109.01138305664062, _0x113b2f * 189.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 117.01138305664062, _0x113b2f * 171.76705932617188, _0x113b2f * 116.01138305664062, _0x113b2f * 166.76705932617188, _0x113b2f * 97.01138305664062, _0x113b2f * 156.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 74.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 74.01138305664062, _0x113b2f * 140.76705932617188, _0x113b2f * 51.011383056640625, _0x113b2f * 124.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 42.011383056640625, _0x113b2f * 118.76705932617188, _0x113b2f * 37.011383056640625, _0x113b2f * 119.76705932617188, _0x113b2f * 33.011383056640625, _0x113b2f * 126.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[3], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 13.011383056640625, _0x113b2f * 229.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 45.511383056640625, _0x113b2f * 233.76705932617188, _0x113b2f * 45.511383056640625, _0x113b2f * 233.76705932617188, _0x113b2f * 78.01138305664062, _0x113b2f * 237.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 92.01138305664062, _0x113b2f * 239.76705932617188, _0x113b2f * 92.01138305664062, _0x113b2f * 246.76705932617188, _0x113b2f * 91.01138305664062, _0x113b2f * 257.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 92.01138305664062, _0x113b2f * 275.7670593261719, _0x113b2f * 91.01138305664062, _0x113b2f * 274.7670593261719, _0x113b2f * 68.01138305664062, _0x113b2f * 276.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 42.511383056640625, _0x113b2f * 279.7670593261719, _0x113b2f * 42.511383056640625, _0x113b2f * 279.7670593261719, _0x113b2f * 17.011383056640625, _0x113b2f * 282.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 2.011383056640625, _0x113b2f * 282.7670593261719, _0x113b2f * 3.011383056640625, _0x113b2f * 276.7670593261719, _0x113b2f * 2.011383056640625, _0x113b2f * 260.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 2.011383056640625, _0x113b2f * 231.76705932617188, _0x113b2f * 4.011383056640625, _0x113b2f * 232.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 230.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 13.011383056640625, _0x113b2f * 229.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 45.511383056640625, _0x113b2f * 233.76705932617188, _0x113b2f * 45.511383056640625, _0x113b2f * 233.76705932617188, _0x113b2f * 78.01138305664062, _0x113b2f * 237.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 92.01138305664062, _0x113b2f * 239.76705932617188, _0x113b2f * 92.01138305664062, _0x113b2f * 246.76705932617188, _0x113b2f * 91.01138305664062, _0x113b2f * 257.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 92.01138305664062, _0x113b2f * 275.7670593261719, _0x113b2f * 91.01138305664062, _0x113b2f * 274.7670593261719, _0x113b2f * 68.01138305664062, _0x113b2f * 276.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 42.511383056640625, _0x113b2f * 279.7670593261719, _0x113b2f * 42.511383056640625, _0x113b2f * 279.7670593261719, _0x113b2f * 17.011383056640625, _0x113b2f * 282.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 2.011383056640625, _0x113b2f * 282.7670593261719, _0x113b2f * 3.011383056640625, _0x113b2f * 276.7670593261719, _0x113b2f * 2.011383056640625, _0x113b2f * 260.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 2.011383056640625, _0x113b2f * 231.76705932617188, _0x113b2f * 4.011383056640625, _0x113b2f * 232.76705932617188, _0x113b2f * 11.011383056640625, _0x113b2f * 230.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 97.01138305664062, _0x113b2f * 329.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 68.51138305664062, _0x113b2f * 343.7670593261719, _0x113b2f * 68.51138305664062, _0x113b2f * 343.7670593261719, _0x113b2f * 40.011383056640625, _0x113b2f * 357.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 29.011383056640625, _0x113b2f * 360.7670593261719, _0x113b2f * 27.011383056640625, _0x113b2f * 361.7670593261719, _0x113b2f * 20.011383056640625, _0x113b2f * 346.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 16.511383056640625, _0x113b2f * 336.2670593261719, _0x113b2f * 16.511383056640625, _0x113b2f * 336.2670593261719, _0x113b2f * 13.011383056640625, _0x113b2f * 325.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 10.011383056640625, _0x113b2f * 307.7670593261719, _0x113b2f * 18.011383056640625, _0x113b2f * 312.7670593261719, _0x113b2f * 34.011383056640625, _0x113b2f * 306.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 59.511383056640625, _0x113b2f * 302.2670593261719, _0x113b2f * 59.511383056640625, _0x113b2f * 302.2670593261719, _0x113b2f * 85.01138305664062, _0x113b2f * 297.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 97.01138305664062, _0x113b2f * 294.7670593261719, _0x113b2f * 100.01138305664062, _0x113b2f * 297.7670593261719, _0x113b2f * 100.01138305664062, _0x113b2f * 307.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 105.01138305664062, _0x113b2f * 326.7670593261719, _0x113b2f * 103.01138305664062, _0x113b2f * 325.7670593261719, _0x113b2f * 97.01138305664062, _0x113b2f * 329.7670593261719);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 97.01138305664062, _0x113b2f * 329.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 68.51138305664062, _0x113b2f * 343.7670593261719, _0x113b2f * 68.51138305664062, _0x113b2f * 343.7670593261719, _0x113b2f * 40.011383056640625, _0x113b2f * 357.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 29.011383056640625, _0x113b2f * 360.7670593261719, _0x113b2f * 27.011383056640625, _0x113b2f * 361.7670593261719, _0x113b2f * 20.011383056640625, _0x113b2f * 346.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 16.511383056640625, _0x113b2f * 336.2670593261719, _0x113b2f * 16.511383056640625, _0x113b2f * 336.2670593261719, _0x113b2f * 13.011383056640625, _0x113b2f * 325.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 10.011383056640625, _0x113b2f * 307.7670593261719, _0x113b2f * 18.011383056640625, _0x113b2f * 312.7670593261719, _0x113b2f * 34.011383056640625, _0x113b2f * 306.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 59.511383056640625, _0x113b2f * 302.2670593261719, _0x113b2f * 59.511383056640625, _0x113b2f * 302.2670593261719, _0x113b2f * 85.01138305664062, _0x113b2f * 297.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 97.01138305664062, _0x113b2f * 294.7670593261719, _0x113b2f * 100.01138305664062, _0x113b2f * 297.7670593261719, _0x113b2f * 100.01138305664062, _0x113b2f * 307.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 105.01138305664062, _0x113b2f * 326.7670593261719, _0x113b2f * 103.01138305664062, _0x113b2f * 325.7670593261719, _0x113b2f * 97.01138305664062, _0x113b2f * 329.7670593261719);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 394.0113830566406, _0x113b2f * 181.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 426.5113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 426.5113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 459.0113830566406, _0x113b2f * 151.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 469.0113830566406, _0x113b2f * 152.76705932617188, _0x113b2f * 469.0113830566406, _0x113b2f * 155.76705932617188, _0x113b2f * 472.0113830566406, _0x113b2f * 165.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 476.0113830566406, _0x113b2f * 177.26705932617188, _0x113b2f * 476.0113830566406, _0x113b2f * 177.26705932617188, _0x113b2f * 480.0113830566406, _0x113b2f * 188.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 483.0113830566406, _0x113b2f * 199.76705932617188, _0x113b2f * 480.0113830566406, _0x113b2f * 200.76705932617188, _0x113b2f * 460.0113830566406, _0x113b2f * 205.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 433.5113830566406, _0x113b2f * 210.26705932617188, _0x113b2f * 433.5113830566406, _0x113b2f * 210.26705932617188, _0x113b2f * 407.0113830566406, _0x113b2f * 214.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 395.0113830566406, _0x113b2f * 218.76705932617188, _0x113b2f * 397.0113830566406, _0x113b2f * 211.76705932617188, _0x113b2f * 393.0113830566406, _0x113b2f * 202.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 387.0113830566406, _0x113b2f * 188.76705932617188, _0x113b2f * 387.0113830566406, _0x113b2f * 187.76705932617188, _0x113b2f * 394.0113830566406, _0x113b2f * 181.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 394.0113830566406, _0x113b2f * 181.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 426.5113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 426.5113830566406, _0x113b2f * 166.76705932617188, _0x113b2f * 459.0113830566406, _0x113b2f * 151.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 469.0113830566406, _0x113b2f * 152.76705932617188, _0x113b2f * 469.0113830566406, _0x113b2f * 155.76705932617188, _0x113b2f * 472.0113830566406, _0x113b2f * 165.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 476.0113830566406, _0x113b2f * 177.26705932617188, _0x113b2f * 476.0113830566406, _0x113b2f * 177.26705932617188, _0x113b2f * 480.0113830566406, _0x113b2f * 188.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 483.0113830566406, _0x113b2f * 199.76705932617188, _0x113b2f * 480.0113830566406, _0x113b2f * 200.76705932617188, _0x113b2f * 460.0113830566406, _0x113b2f * 205.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 433.5113830566406, _0x113b2f * 210.26705932617188, _0x113b2f * 433.5113830566406, _0x113b2f * 210.26705932617188, _0x113b2f * 407.0113830566406, _0x113b2f * 214.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 395.0113830566406, _0x113b2f * 218.76705932617188, _0x113b2f * 397.0113830566406, _0x113b2f * 211.76705932617188, _0x113b2f * 393.0113830566406, _0x113b2f * 202.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 387.0113830566406, _0x113b2f * 188.76705932617188, _0x113b2f * 387.0113830566406, _0x113b2f * 187.76705932617188, _0x113b2f * 394.0113830566406, _0x113b2f * 181.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 411.0113830566406, _0x113b2f * 234.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 446.0113830566406, _0x113b2f * 233.26705932617188, _0x113b2f * 446.0113830566406, _0x113b2f * 233.26705932617188, _0x113b2f * 481.0113830566406, _0x113b2f * 231.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 491.0113830566406, _0x113b2f * 232.76705932617188, _0x113b2f * 493.0113830566406, _0x113b2f * 239.76705932617188, _0x113b2f * 491.0113830566406, _0x113b2f * 251.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 490.0113830566406, _0x113b2f * 263.7670593261719, _0x113b2f * 490.0113830566406, _0x113b2f * 263.7670593261719, _0x113b2f * 489.0113830566406, _0x113b2f * 275.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 487.0113830566406, _0x113b2f * 283.7670593261719, _0x113b2f * 483.0113830566406, _0x113b2f * 284.7670593261719, _0x113b2f * 464.0113830566406, _0x113b2f * 280.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 437.0113830566406, _0x113b2f * 273.7670593261719, _0x113b2f * 437.0113830566406, _0x113b2f * 273.7670593261719, _0x113b2f * 410.0113830566406, _0x113b2f * 266.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 400.0113830566406, _0x113b2f * 261.7670593261719, _0x113b2f * 401.0113830566406, _0x113b2f * 259.7670593261719, _0x113b2f * 402.0113830566406, _0x113b2f * 249.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 401.0113830566406, _0x113b2f * 237.76705932617188, _0x113b2f * 403.0113830566406, _0x113b2f * 235.76705932617188, _0x113b2f * 408.0113830566406, _0x113b2f * 234.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 411.0113830566406, _0x113b2f * 234.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 446.0113830566406, _0x113b2f * 233.26705932617188, _0x113b2f * 446.0113830566406, _0x113b2f * 233.26705932617188, _0x113b2f * 481.0113830566406, _0x113b2f * 231.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 491.0113830566406, _0x113b2f * 232.76705932617188, _0x113b2f * 493.0113830566406, _0x113b2f * 239.76705932617188, _0x113b2f * 491.0113830566406, _0x113b2f * 251.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 490.0113830566406, _0x113b2f * 263.7670593261719, _0x113b2f * 490.0113830566406, _0x113b2f * 263.7670593261719, _0x113b2f * 489.0113830566406, _0x113b2f * 275.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 487.0113830566406, _0x113b2f * 283.7670593261719, _0x113b2f * 483.0113830566406, _0x113b2f * 284.7670593261719, _0x113b2f * 464.0113830566406, _0x113b2f * 280.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 437.0113830566406, _0x113b2f * 273.7670593261719, _0x113b2f * 437.0113830566406, _0x113b2f * 273.7670593261719, _0x113b2f * 410.0113830566406, _0x113b2f * 266.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 400.0113830566406, _0x113b2f * 261.7670593261719, _0x113b2f * 401.0113830566406, _0x113b2f * 259.7670593261719, _0x113b2f * 402.0113830566406, _0x113b2f * 249.76705932617188);
  _0x5ae601.bezierCurveTo(_0x113b2f * 401.0113830566406, _0x113b2f * 237.76705932617188, _0x113b2f * 403.0113830566406, _0x113b2f * 235.76705932617188, _0x113b2f * 408.0113830566406, _0x113b2f * 234.76705932617188);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 400.0113830566406, _0x113b2f * 290.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 437.0113830566406, _0x113b2f * 301.2670593261719, _0x113b2f * 437.0113830566406, _0x113b2f * 301.2670593261719, _0x113b2f * 474.0113830566406, _0x113b2f * 311.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 484.0113830566406, _0x113b2f * 319.7670593261719, _0x113b2f * 481.0113830566406, _0x113b2f * 322.7670593261719, _0x113b2f * 474.0113830566406, _0x113b2f * 335.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 465.5113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 465.5113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 457.0113830566406, _0x113b2f * 373.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 449.0113830566406, _0x113b2f * 386.7670593261719, _0x113b2f * 444.0113830566406, _0x113b2f * 384.7670593261719, _0x113b2f * 427.0113830566406, _0x113b2f * 370.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 403.0113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 403.0113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 379.0113830566406, _0x113b2f * 338.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 371.0113830566406, _0x113b2f * 327.7670593261719, _0x113b2f * 373.0113830566406, _0x113b2f * 323.7670593261719, _0x113b2f * 377.0113830566406, _0x113b2f * 313.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 386.0113830566406, _0x113b2f * 292.7670593261719, _0x113b2f * 393.0113830566406, _0x113b2f * 288.7670593261719, _0x113b2f * 398.0113830566406, _0x113b2f * 291.7670593261719);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 400.0113830566406, _0x113b2f * 290.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 437.0113830566406, _0x113b2f * 301.2670593261719, _0x113b2f * 437.0113830566406, _0x113b2f * 301.2670593261719, _0x113b2f * 474.0113830566406, _0x113b2f * 311.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 484.0113830566406, _0x113b2f * 319.7670593261719, _0x113b2f * 481.0113830566406, _0x113b2f * 322.7670593261719, _0x113b2f * 474.0113830566406, _0x113b2f * 335.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 465.5113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 465.5113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 457.0113830566406, _0x113b2f * 373.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 449.0113830566406, _0x113b2f * 386.7670593261719, _0x113b2f * 444.0113830566406, _0x113b2f * 384.7670593261719, _0x113b2f * 427.0113830566406, _0x113b2f * 370.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 403.0113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 403.0113830566406, _0x113b2f * 354.7670593261719, _0x113b2f * 379.0113830566406, _0x113b2f * 338.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 371.0113830566406, _0x113b2f * 327.7670593261719, _0x113b2f * 373.0113830566406, _0x113b2f * 323.7670593261719, _0x113b2f * 377.0113830566406, _0x113b2f * 313.7670593261719);
  _0x5ae601.bezierCurveTo(_0x113b2f * 386.0113830566406, _0x113b2f * 292.7670593261719, _0x113b2f * 393.0113830566406, _0x113b2f * 288.7670593261719, _0x113b2f * 398.0113830566406, _0x113b2f * 291.7670593261719);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[3], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 366.0113830566406, _0x113b2f * 361.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 393.0113830566406, _0x113b2f * 383.2216033935547, _0x113b2f * 393.0113830566406, _0x113b2f * 383.2216033935547, _0x113b2f * 420.0113830566406, _0x113b2f * 405.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 427.0113830566406, _0x113b2f * 414.2216033935547, _0x113b2f * 425.0113830566406, _0x113b2f * 417.2216033935547, _0x113b2f * 413.0113830566406, _0x113b2f * 428.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 405.5113830566406, _0x113b2f * 435.2216033935547, _0x113b2f * 405.5113830566406, _0x113b2f * 435.2216033935547, _0x113b2f * 398.0113830566406, _0x113b2f * 442.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 388.0113830566406, _0x113b2f * 451.2216033935547, _0x113b2f * 385.0113830566406, _0x113b2f * 445.2216033935547, _0x113b2f * 373.0113830566406, _0x113b2f * 428.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 358.5113830566406, _0x113b2f * 408.2216033935547, _0x113b2f * 358.5113830566406, _0x113b2f * 408.2216033935547, _0x113b2f * 344.0113830566406, _0x113b2f * 388.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 337.0113830566406, _0x113b2f * 378.2216033935547, _0x113b2f * 342.0113830566406, _0x113b2f * 377.2216033935547, _0x113b2f * 347.0113830566406, _0x113b2f * 371.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 359.0113830566406, _0x113b2f * 359.2216033935547, _0x113b2f * 361.0113830566406, _0x113b2f * 358.2216033935547, _0x113b2f * 364.0113830566406, _0x113b2f * 361.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 366.0113830566406, _0x113b2f * 361.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 393.0113830566406, _0x113b2f * 383.2216033935547, _0x113b2f * 393.0113830566406, _0x113b2f * 383.2216033935547, _0x113b2f * 420.0113830566406, _0x113b2f * 405.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 427.0113830566406, _0x113b2f * 414.2216033935547, _0x113b2f * 425.0113830566406, _0x113b2f * 417.2216033935547, _0x113b2f * 413.0113830566406, _0x113b2f * 428.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 405.5113830566406, _0x113b2f * 435.2216033935547, _0x113b2f * 405.5113830566406, _0x113b2f * 435.2216033935547, _0x113b2f * 398.0113830566406, _0x113b2f * 442.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 388.0113830566406, _0x113b2f * 451.2216033935547, _0x113b2f * 385.0113830566406, _0x113b2f * 445.2216033935547, _0x113b2f * 373.0113830566406, _0x113b2f * 428.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 358.5113830566406, _0x113b2f * 408.2216033935547, _0x113b2f * 358.5113830566406, _0x113b2f * 408.2216033935547, _0x113b2f * 344.0113830566406, _0x113b2f * 388.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 337.0113830566406, _0x113b2f * 378.2216033935547, _0x113b2f * 342.0113830566406, _0x113b2f * 377.2216033935547, _0x113b2f * 347.0113830566406, _0x113b2f * 371.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 359.0113830566406, _0x113b2f * 359.2216033935547, _0x113b2f * 361.0113830566406, _0x113b2f * 358.2216033935547, _0x113b2f * 364.0113830566406, _0x113b2f * 361.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 323.0113830566406, _0x113b2f * 393.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 338.0113830566406, _0x113b2f * 424.7216033935547, _0x113b2f * 338.0113830566406, _0x113b2f * 424.7216033935547, _0x113b2f * 353.0113830566406, _0x113b2f * 456.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 355.0113830566406, _0x113b2f * 467.2216033935547, _0x113b2f * 354.0113830566406, _0x113b2f * 469.2216033935547, _0x113b2f * 336.0113830566406, _0x113b2f * 475.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 326.0113830566406, _0x113b2f * 478.2216033935547, _0x113b2f * 326.0113830566406, _0x113b2f * 478.2216033935547, _0x113b2f * 316.0113830566406, _0x113b2f * 481.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 304.0113830566406, _0x113b2f * 484.2216033935547, _0x113b2f * 304.0113830566406, _0x113b2f * 477.2216033935547, _0x113b2f * 301.0113830566406, _0x113b2f * 454.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 295.5113830566406, _0x113b2f * 429.2216033935547, _0x113b2f * 295.5113830566406, _0x113b2f * 429.2216033935547, _0x113b2f * 290.0113830566406, _0x113b2f * 404.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 287.0113830566406, _0x113b2f * 396.2216033935547, _0x113b2f * 297.0113830566406, _0x113b2f * 394.2216033935547, _0x113b2f * 303.0113830566406, _0x113b2f * 392.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 316.0113830566406, _0x113b2f * 387.2216033935547, _0x113b2f * 318.0113830566406, _0x113b2f * 387.2216033935547, _0x113b2f * 323.0113830566406, _0x113b2f * 394.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 323.0113830566406, _0x113b2f * 393.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 338.0113830566406, _0x113b2f * 424.7216033935547, _0x113b2f * 338.0113830566406, _0x113b2f * 424.7216033935547, _0x113b2f * 353.0113830566406, _0x113b2f * 456.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 355.0113830566406, _0x113b2f * 467.2216033935547, _0x113b2f * 354.0113830566406, _0x113b2f * 469.2216033935547, _0x113b2f * 336.0113830566406, _0x113b2f * 475.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 326.0113830566406, _0x113b2f * 478.2216033935547, _0x113b2f * 326.0113830566406, _0x113b2f * 478.2216033935547, _0x113b2f * 316.0113830566406, _0x113b2f * 481.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 304.0113830566406, _0x113b2f * 484.2216033935547, _0x113b2f * 304.0113830566406, _0x113b2f * 477.2216033935547, _0x113b2f * 301.0113830566406, _0x113b2f * 454.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 295.5113830566406, _0x113b2f * 429.2216033935547, _0x113b2f * 295.5113830566406, _0x113b2f * 429.2216033935547, _0x113b2f * 290.0113830566406, _0x113b2f * 404.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 287.0113830566406, _0x113b2f * 396.2216033935547, _0x113b2f * 297.0113830566406, _0x113b2f * 394.2216033935547, _0x113b2f * 303.0113830566406, _0x113b2f * 392.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 316.0113830566406, _0x113b2f * 387.2216033935547, _0x113b2f * 318.0113830566406, _0x113b2f * 387.2216033935547, _0x113b2f * 323.0113830566406, _0x113b2f * 394.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 270.0113830566406, _0x113b2f * 413.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 271.0113830566406, _0x113b2f * 445.7216033935547, _0x113b2f * 271.0113830566406, _0x113b2f * 445.7216033935547, _0x113b2f * 272.0113830566406, _0x113b2f * 478.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 273.0113830566406, _0x113b2f * 490.2216033935547, _0x113b2f * 267.0113830566406, _0x113b2f * 493.2216033935547, _0x113b2f * 249.01138305664062, _0x113b2f * 490.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 222.01138305664062, _0x113b2f * 492.2216033935547, _0x113b2f * 220.01138305664062, _0x113b2f * 485.2216033935547, _0x113b2f * 225.01138305664062, _0x113b2f * 467.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 230.51138305664062, _0x113b2f * 440.2216033935547, _0x113b2f * 230.51138305664062, _0x113b2f * 440.2216033935547, _0x113b2f * 236.01138305664062, _0x113b2f * 413.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 237.01138305664062, _0x113b2f * 405.2216033935547, _0x113b2f * 238.01138305664062, _0x113b2f * 404.2216033935547, _0x113b2f * 253.01138305664062, _0x113b2f * 403.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 269.0113830566406, _0x113b2f * 405.2216033935547, _0x113b2f * 270.0113830566406, _0x113b2f * 407.2216033935547, _0x113b2f * 269.0113830566406, _0x113b2f * 412.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 270.0113830566406, _0x113b2f * 413.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 271.0113830566406, _0x113b2f * 445.7216033935547, _0x113b2f * 271.0113830566406, _0x113b2f * 445.7216033935547, _0x113b2f * 272.0113830566406, _0x113b2f * 478.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 273.0113830566406, _0x113b2f * 490.2216033935547, _0x113b2f * 267.0113830566406, _0x113b2f * 493.2216033935547, _0x113b2f * 249.01138305664062, _0x113b2f * 490.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 222.01138305664062, _0x113b2f * 492.2216033935547, _0x113b2f * 220.01138305664062, _0x113b2f * 485.2216033935547, _0x113b2f * 225.01138305664062, _0x113b2f * 467.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 230.51138305664062, _0x113b2f * 440.2216033935547, _0x113b2f * 230.51138305664062, _0x113b2f * 440.2216033935547, _0x113b2f * 236.01138305664062, _0x113b2f * 413.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 237.01138305664062, _0x113b2f * 405.2216033935547, _0x113b2f * 238.01138305664062, _0x113b2f * 404.2216033935547, _0x113b2f * 253.01138305664062, _0x113b2f * 403.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 269.0113830566406, _0x113b2f * 405.2216033935547, _0x113b2f * 270.0113830566406, _0x113b2f * 407.2216033935547, _0x113b2f * 269.0113830566406, _0x113b2f * 412.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 207.01138305664062, _0x113b2f * 406.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 197.51138305664062, _0x113b2f * 440.7216033935547, _0x113b2f * 197.51138305664062, _0x113b2f * 440.7216033935547, _0x113b2f * 188.01138305664062, _0x113b2f * 475.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 184.01138305664062, _0x113b2f * 485.2216033935547, _0x113b2f * 179.01138305664062, _0x113b2f * 491.2216033935547, _0x113b2f * 152.01138305664062, _0x113b2f * 477.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 136.51138305664062, _0x113b2f * 469.7216033935547, _0x113b2f * 136.51138305664062, _0x113b2f * 469.7216033935547, _0x113b2f * 121.01138305664062, _0x113b2f * 462.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 109.01138305664062, _0x113b2f * 453.2216033935547, _0x113b2f * 117.01138305664062, _0x113b2f * 447.2216033935547, _0x113b2f * 133.01138305664062, _0x113b2f * 427.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 146.51138305664062, _0x113b2f * 406.7216033935547, _0x113b2f * 146.51138305664062, _0x113b2f * 406.7216033935547, _0x113b2f * 160.01138305664062, _0x113b2f * 386.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 163.01138305664062, _0x113b2f * 377.2216033935547, _0x113b2f * 168.01138305664062, _0x113b2f * 378.2216033935547, _0x113b2f * 187.01138305664062, _0x113b2f * 387.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 206.01138305664062, _0x113b2f * 395.2216033935547, _0x113b2f * 208.01138305664062, _0x113b2f * 398.2216033935547, _0x113b2f * 207.01138305664062, _0x113b2f * 405.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 207.01138305664062, _0x113b2f * 406.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 197.51138305664062, _0x113b2f * 440.7216033935547, _0x113b2f * 197.51138305664062, _0x113b2f * 440.7216033935547, _0x113b2f * 188.01138305664062, _0x113b2f * 475.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 184.01138305664062, _0x113b2f * 485.2216033935547, _0x113b2f * 179.01138305664062, _0x113b2f * 491.2216033935547, _0x113b2f * 152.01138305664062, _0x113b2f * 477.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 136.51138305664062, _0x113b2f * 469.7216033935547, _0x113b2f * 136.51138305664062, _0x113b2f * 469.7216033935547, _0x113b2f * 121.01138305664062, _0x113b2f * 462.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 109.01138305664062, _0x113b2f * 453.2216033935547, _0x113b2f * 117.01138305664062, _0x113b2f * 447.2216033935547, _0x113b2f * 133.01138305664062, _0x113b2f * 427.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 146.51138305664062, _0x113b2f * 406.7216033935547, _0x113b2f * 146.51138305664062, _0x113b2f * 406.7216033935547, _0x113b2f * 160.01138305664062, _0x113b2f * 386.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 163.01138305664062, _0x113b2f * 377.2216033935547, _0x113b2f * 168.01138305664062, _0x113b2f * 378.2216033935547, _0x113b2f * 187.01138305664062, _0x113b2f * 387.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 206.01138305664062, _0x113b2f * 395.2216033935547, _0x113b2f * 208.01138305664062, _0x113b2f * 398.2216033935547, _0x113b2f * 207.01138305664062, _0x113b2f * 405.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[3], _0x2a6777[2], _0x113b2f * 12);
  _0x5ae601.globalAlpha = _0x5e0318 ? 0.5 : 1;
  _0x5ae601.translate(0, _0x113b2f * 5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 130.01138305664062, _0x113b2f * 375.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 109.51138305664062, _0x113b2f * 400.7216033935547, _0x113b2f * 109.51138305664062, _0x113b2f * 400.7216033935547, _0x113b2f * 89.01138305664062, _0x113b2f * 426.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 82.01138305664062, _0x113b2f * 435.2216033935547, _0x113b2f * 77.01138305664062, _0x113b2f * 435.2216033935547, _0x113b2f * 62.011383056640625, _0x113b2f * 417.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 43.011383056640625, _0x113b2f * 397.2216033935547, _0x113b2f * 47.011383056640625, _0x113b2f * 395.2216033935547, _0x113b2f * 62.011383056640625, _0x113b2f * 382.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 84.01138305664062, _0x113b2f * 366.7216033935547, _0x113b2f * 84.01138305664062, _0x113b2f * 366.7216033935547, _0x113b2f * 106.01138305664062, _0x113b2f * 351.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 116.01138305664062, _0x113b2f * 344.2216033935547, _0x113b2f * 120.01138305664062, _0x113b2f * 347.2216033935547, _0x113b2f * 127.01138305664062, _0x113b2f * 356.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 137.01138305664062, _0x113b2f * 366.2216033935547, _0x113b2f * 137.01138305664062, _0x113b2f * 366.2216033935547, _0x113b2f * 131.01138305664062, _0x113b2f * 376.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[0], _0x2a6777[0], _0x113b2f * 12);
  _0x5ae601.globalAlpha = 1;
  _0x5ae601.translate(0, _0x113b2f * -5);
  _0x5ae601.beginPath();
  _0x5ae601.lineCap = "round";
  _0x5ae601.lineJoin = "round";
  _0x5ae601.moveTo(_0x113b2f * 130.01138305664062, _0x113b2f * 375.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 109.51138305664062, _0x113b2f * 400.7216033935547, _0x113b2f * 109.51138305664062, _0x113b2f * 400.7216033935547, _0x113b2f * 89.01138305664062, _0x113b2f * 426.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 82.01138305664062, _0x113b2f * 435.2216033935547, _0x113b2f * 77.01138305664062, _0x113b2f * 435.2216033935547, _0x113b2f * 62.011383056640625, _0x113b2f * 417.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 43.011383056640625, _0x113b2f * 397.2216033935547, _0x113b2f * 47.011383056640625, _0x113b2f * 395.2216033935547, _0x113b2f * 62.011383056640625, _0x113b2f * 382.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 84.01138305664062, _0x113b2f * 366.7216033935547, _0x113b2f * 84.01138305664062, _0x113b2f * 366.7216033935547, _0x113b2f * 106.01138305664062, _0x113b2f * 351.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 116.01138305664062, _0x113b2f * 344.2216033935547, _0x113b2f * 120.01138305664062, _0x113b2f * 347.2216033935547, _0x113b2f * 127.01138305664062, _0x113b2f * 356.2216033935547);
  _0x5ae601.bezierCurveTo(_0x113b2f * 137.01138305664062, _0x113b2f * 366.2216033935547, _0x113b2f * 137.01138305664062, _0x113b2f * 366.2216033935547, _0x113b2f * 131.01138305664062, _0x113b2f * 376.2216033935547);
  _0x5ae601.closePath();
  fill_path(_0x5ae601, _0x2a6777[4], _0x2a6777[2], _0x113b2f * 12);
  return _0x55b811;
}
function create_sand(_0x3a6872, _0x2ae74e, _0x28b290) {
  var _0x4bfc40 = document.createElement("canvas");
  var _0x518590 = _0x4bfc40.getContext("2d");
  _0x4bfc40.width = _0x3a6872 * 218;
  _0x4bfc40.height = _0x3a6872 * 185;
  _0x518590.beginPath();
  _0x518590.lineCap = "round";
  _0x518590.lineJoin = "round";
  _0x518590.moveTo(_0x3a6872 * 64, _0x3a6872 * 53.135406494140625);
  _0x518590.bezierCurveTo(_0x3a6872 * 92, _0x3a6872 * 17.135406494140625, _0x3a6872 * 116, _0x3a6872 * 11.135406494140625, _0x3a6872 * 158, _0x3a6872 * 53.135406494140625);
  _0x518590.bezierCurveTo(_0x3a6872 * 178, _0x3a6872 * 74.13540649414062, _0x3a6872 * 181, _0x3a6872 * 81.13540649414062, _0x3a6872 * 196, _0x3a6872 * 101.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 214, _0x3a6872 * 127.13540649414062, _0x3a6872 * 192, _0x3a6872 * 138.13540649414062, _0x3a6872 * 173, _0x3a6872 * 149.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 137, _0x3a6872 * 166.13540649414062, _0x3a6872 * 74, _0x3a6872 * 170.13540649414062, _0x3a6872 * 36, _0x3a6872 * 141.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 13, _0x3a6872 * 127.13540649414062, _0x3a6872 * 20, _0x3a6872 * 119.13540649414062, _0x3a6872 * 30, _0x3a6872 * 103.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 48, _0x3a6872 * 71.13540649414062, _0x3a6872 * 54, _0x3a6872 * 67.13540649414062, _0x3a6872 * 63, _0x3a6872 * 54.135406494140625);
  _0x518590.closePath();
  fill_path(_0x518590, _0x28b290[0], _0x28b290[1], _0x3a6872 * 10);
  _0x518590.beginPath();
  _0x518590.lineCap = "round";
  _0x518590.lineJoin = "round";
  _0x518590.moveTo(_0x3a6872 * 107, _0x3a6872 * 25.135406494140625);
  _0x518590.bezierCurveTo(_0x3a6872 * 62, _0x3a6872 * 90.13540649414062, _0x3a6872 * 54, _0x3a6872 * 129.13540649414062, _0x3a6872 * 53, _0x3a6872 * 151.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 39.5, _0x3a6872 * 142.13540649414062, _0x3a6872 * 39.5, _0x3a6872 * 142.13540649414062, _0x3a6872 * 26, _0x3a6872 * 133.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 23.5, _0x3a6872 * 128.63540649414062, _0x3a6872 * 23.5, _0x3a6872 * 128.63540649414062, _0x3a6872 * 21, _0x3a6872 * 124.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 22, _0x3a6872 * 113.13540649414062, _0x3a6872 * 31, _0x3a6872 * 99.13540649414062, _0x3a6872 * 40, _0x3a6872 * 88.13540649414062);
  _0x518590.bezierCurveTo(_0x3a6872 * 54.5, _0x3a6872 * 67.13540649414062, _0x3a6872 * 54.5, _0x3a6872 * 67.13540649414062, _0x3a6872 * 69, _0x3a6872 * 46.135406494140625);
  _0x518590.bezierCurveTo(_0x3a6872 * 80.5, _0x3a6872 * 36.635406494140625, _0x3a6872 * 80.5, _0x3a6872 * 36.635406494140625, _0x3a6872 * 92, _0x3a6872 * 27.135406494140625);
  _0x518590.closePath();
  fill_path(_0x518590, _0x28b290[1]);
  return _0x4bfc40;
}
function create_ice(_0x2fd47e, _0x2c107b, _0x1990cb) {
  var _0x4ea7ce = document.createElement("canvas");
  var _0x35264e = _0x4ea7ce.getContext("2d");
  _0x4ea7ce.width = _0x2fd47e * 167;
  _0x4ea7ce.height = _0x2fd47e * 136;
  _0x35264e.globalAlpha = 0.5;
  _0x35264e.save();
  _0x35264e.translate(_0x2fd47e * 76.71426391601562, _0x2fd47e * 67.85713195800781);
  round_rect(_0x35264e, _0x2fd47e * -57.5, _0x2fd47e * -54.5, _0x2fd47e * 115, _0x2fd47e * 109, _0x2fd47e * 15);
  _0x35264e.restore();
  fill_path(_0x35264e, _0x1990cb[0]);
  _0x35264e.globalAlpha = 0.8;
  _0x35264e.save();
  _0x35264e.translate(_0x2fd47e * 76.71426391601562, _0x2fd47e * 67.85713195800781);
  round_rect(_0x35264e, _0x2fd47e * -57.5, _0x2fd47e * -54.5, _0x2fd47e * 115, _0x2fd47e * 109, _0x2fd47e * 15);
  _0x35264e.restore();
  fill_path(_0x35264e, undefined, _0x1990cb[1], _0x2fd47e * 7);
  _0x35264e.globalAlpha = 0.5;
  _0x35264e.save();
  _0x35264e.translate(_0x2fd47e * 91.21426391601562, _0x2fd47e * 67.35713195800781);
  round_rect(_0x35264e, _0x2fd47e * -56, _0x2fd47e * -55, _0x2fd47e * 115, _0x2fd47e * 109, _0x2fd47e * 15);
  _0x35264e.restore();
  fill_path(_0x35264e, _0x1990cb[0]);
  _0x35264e.globalAlpha = 1;
  _0x35264e.save();
  _0x35264e.translate(_0x2fd47e * 91.21426391601562, _0x2fd47e * 67.35713195800781);
  round_rect(_0x35264e, _0x2fd47e * -56, _0x2fd47e * -55, _0x2fd47e * 115, _0x2fd47e * 109, _0x2fd47e * 15);
  _0x35264e.restore();
  fill_path(_0x35264e, undefined, _0x1990cb[1], _0x2fd47e * 7);
  _0x35264e.beginPath();
  _0x35264e.lineCap = "round";
  _0x35264e.lineJoin = "round";
  _0x35264e.moveTo(_0x2fd47e * 131.21426391601562, _0x2fd47e * 70.35713195800781);
  _0x35264e.bezierCurveTo(_0x2fd47e * 133.21426391601562, _0x2fd47e * 95.35713195800781, _0x2fd47e * 128.21426391601562, _0x2fd47e * 109.35713195800781, _0x2fd47e * 108.21426391601562, _0x2fd47e * 108.35713195800781);
  fill_path(_0x35264e, undefined, _0x1990cb[1], _0x2fd47e * 10);
  return _0x4ea7ce;
}
function create_plot(_0x21e060, _0x36ab9c, _0x3fe5d9) {
  var _0x1743b3 = document.createElement("canvas");
  var _0x44dbbf = _0x1743b3.getContext("2d");
  _0x1743b3.width = _0x21e060 * 163;
  _0x1743b3.height = _0x21e060 * 163;
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 82.5, _0x21e060 * 81.1015625);
  _0x44dbbf.rotate(0);
  round_rect(_0x44dbbf, _0x21e060 * -65.5, _0x21e060 * -66, _0x21e060 * 131, _0x21e060 * 131, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[1]);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 80, _0x21e060 * 17.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -64, _0x21e060 * -4.5, _0x21e060 * 129, _0x21e060 * 9, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 80, _0x21e060 * 17.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -64, _0x21e060 * -4.5, _0x21e060 * 129, _0x21e060 * 9, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 83.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -4.5, _0x21e060 * -61, _0x21e060 * 9, _0x21e060 * 129, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 83.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -4.5, _0x21e060 * -61, _0x21e060 * 9, _0x21e060 * 129, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17.5, _0x21e060 * 82.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -4.5, _0x21e060 * -65, _0x21e060 * 9, _0x21e060 * 129, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17.5, _0x21e060 * 82.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -4.5, _0x21e060 * -65, _0x21e060 * 9, _0x21e060 * 129, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 80.5, _0x21e060 * 145.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -65.5, _0x21e060 * -4, _0x21e060 * 129, _0x21e060 * 9, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 80.5, _0x21e060 * 145.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -65.5, _0x21e060 * -4, _0x21e060 * 129, _0x21e060 * 9, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17, _0x21e060 * 18.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -11, _0x21e060 * -11.5, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17, _0x21e060 * 18.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -11, _0x21e060 * -11.5, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 16.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -10.5, _0x21e060 * -11.5, _0x21e060 * 21, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 16.6015625);
  round_rect(_0x44dbbf, _0x21e060 * -10.5, _0x21e060 * -11.5, _0x21e060 * 21, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 144.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -10.5, _0x21e060 * -11, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 145.5, _0x21e060 * 144.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -10.5, _0x21e060 * -11, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  _0x44dbbf.globalAlpha = _0x36ab9c ? 0.5 : 1;
  _0x44dbbf.translate(_0x21e060 * 5, _0x21e060 * 5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17.5, _0x21e060 * 145.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -11.5, _0x21e060 * -12, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[0]);
  _0x44dbbf.globalAlpha = 1;
  _0x44dbbf.translate(_0x21e060 * -5, _0x21e060 * -5);
  _0x44dbbf.save();
  _0x44dbbf.translate(_0x21e060 * 17.5, _0x21e060 * 145.1015625);
  round_rect(_0x44dbbf, _0x21e060 * -11.5, _0x21e060 * -12, _0x21e060 * 22, _0x21e060 * 22, _0x21e060 * 5);
  _0x44dbbf.restore();
  fill_path(_0x44dbbf, _0x3fe5d9[2], _0x3fe5d9[3], _0x21e060 * 3);
  return _0x1743b3;
}
function create_watering_can(_0x2006c4, _0x4df1c9, _0x421a71) {
  var _0xfa2e99 = document.createElement("canvas");
  var _0x136ba9 = _0xfa2e99.getContext("2d");
  _0xfa2e99.width = _0x2006c4 * 168;
  _0xfa2e99.height = _0x2006c4 * 100;
  _0x136ba9.globalAlpha = _0x4df1c9 ? 0.5 : 1;
  _0x136ba9.translate(_0x2006c4 * 10, _0x2006c4 * 5);
  _0x136ba9.save();
  _0x136ba9.translate(_0x2006c4 * 24.5, _0x2006c4 * 44.30000305175781);
  round_rect(_0x136ba9, _0x2006c4 * -19.5, _0x2006c4 * -8.5, _0x2006c4 * 39, _0x2006c4 * 17, _0x2006c4 * 10);
  _0x136ba9.restore();
  fill_path(_0x136ba9, _0x421a71[0]);
  _0x136ba9.beginPath();
  _0x136ba9.lineCap = "round";
  _0x136ba9.lineJoin = "round";
  _0x136ba9.moveTo(_0x2006c4 * 115, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 142, _0x2006c4 * 37.80000305175781, _0x2006c4 * 140, _0x2006c4 * 37.80000305175781, _0x2006c4 * 141, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 147, _0x2006c4 * 28.800003051757812, _0x2006c4 * 149, _0x2006c4 * 26.800003051757812, _0x2006c4 * 153, _0x2006c4 * 32.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 160, _0x2006c4 * 42.80000305175781, _0x2006c4 * 157, _0x2006c4 * 50.80000305175781, _0x2006c4 * 153, _0x2006c4 * 58.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 148, _0x2006c4 * 62.80000305175781, _0x2006c4 * 147, _0x2006c4 * 59.80000305175781, _0x2006c4 * 143, _0x2006c4 * 52.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 115, _0x2006c4 * 52.80000305175781);
  _0x136ba9.closePath();
  fill_path(_0x136ba9, _0x421a71[0]);
  circle(_0x136ba9, _0x2006c4 * 78, _0x2006c4 * 44.80000305175781, _0x2006c4 * 39.44616584663204);
  fill_path(_0x136ba9, _0x421a71[0]);
  _0x136ba9.globalAlpha = 1;
  _0x136ba9.translate(_0x2006c4 * -10, _0x2006c4 * -5);
  _0x136ba9.save();
  _0x136ba9.translate(_0x2006c4 * 24.5, _0x2006c4 * 44.30000305175781);
  round_rect(_0x136ba9, _0x2006c4 * -19.5, _0x2006c4 * -8.5, _0x2006c4 * 39, _0x2006c4 * 17, _0x2006c4 * 10);
  _0x136ba9.restore();
  fill_path(_0x136ba9, undefined, _0x421a71[3], _0x2006c4 * 6);
  _0x136ba9.beginPath();
  _0x136ba9.lineCap = "round";
  _0x136ba9.lineJoin = "round";
  _0x136ba9.moveTo(_0x2006c4 * 115, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 142, _0x2006c4 * 37.80000305175781, _0x2006c4 * 140, _0x2006c4 * 37.80000305175781, _0x2006c4 * 141, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 147, _0x2006c4 * 28.800003051757812, _0x2006c4 * 149, _0x2006c4 * 26.800003051757812, _0x2006c4 * 153, _0x2006c4 * 32.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 160, _0x2006c4 * 42.80000305175781, _0x2006c4 * 157, _0x2006c4 * 50.80000305175781, _0x2006c4 * 153, _0x2006c4 * 58.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 148, _0x2006c4 * 62.80000305175781, _0x2006c4 * 147, _0x2006c4 * 59.80000305175781, _0x2006c4 * 143, _0x2006c4 * 52.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 115, _0x2006c4 * 52.80000305175781);
  _0x136ba9.closePath();
  fill_path(_0x136ba9, undefined, _0x421a71[3], _0x2006c4 * 6);
  circle(_0x136ba9, _0x2006c4 * 78, _0x2006c4 * 44.80000305175781, _0x2006c4 * 42.44616584663204);
  fill_path(_0x136ba9, undefined, _0x421a71[3], _0x2006c4 * 6);
  _0x136ba9.save();
  _0x136ba9.translate(_0x2006c4 * 24.5, _0x2006c4 * 44.30000305175781);
  round_rect(_0x136ba9, _0x2006c4 * -19.5, _0x2006c4 * -8.5, _0x2006c4 * 39, _0x2006c4 * 17, _0x2006c4 * 10);
  _0x136ba9.restore();
  fill_path(_0x136ba9, _0x421a71[1]);
  _0x136ba9.beginPath();
  _0x136ba9.lineCap = "round";
  _0x136ba9.lineJoin = "round";
  _0x136ba9.moveTo(_0x2006c4 * 115, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 142, _0x2006c4 * 37.80000305175781, _0x2006c4 * 140, _0x2006c4 * 37.80000305175781, _0x2006c4 * 141, _0x2006c4 * 37.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 147, _0x2006c4 * 28.800003051757812, _0x2006c4 * 149, _0x2006c4 * 26.800003051757812, _0x2006c4 * 153, _0x2006c4 * 32.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 160, _0x2006c4 * 42.80000305175781, _0x2006c4 * 157, _0x2006c4 * 50.80000305175781, _0x2006c4 * 153, _0x2006c4 * 58.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 148, _0x2006c4 * 62.80000305175781, _0x2006c4 * 147, _0x2006c4 * 59.80000305175781, _0x2006c4 * 143, _0x2006c4 * 52.80000305175781);
  _0x136ba9.bezierCurveTo(_0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 129, _0x2006c4 * 52.80000305175781, _0x2006c4 * 115, _0x2006c4 * 52.80000305175781);
  _0x136ba9.closePath();
  fill_path(_0x136ba9, _0x421a71[1]);
  circle(_0x136ba9, _0x2006c4 * 78, _0x2006c4 * 44.80000305175781, _0x2006c4 * 39.44616584663204);
  fill_path(_0x136ba9, _0x421a71[2], _0x421a71[1], _0x2006c4 * 4);
  circle(_0x136ba9, _0x2006c4 * 78, _0x2006c4 * 44.80000305175781, _0x2006c4 * 29.68164415931166);
  fill_path(_0x136ba9, _0x421a71[3], _0x421a71[1], _0x2006c4 * 4);
  circle(_0x136ba9, _0x2006c4 * 78, _0x2006c4 * 44, _0x2006c4 * 20);
  fill_path(_0x136ba9, _0x421a71[4]);
  return _0xfa2e99;
}
function create_pirahna(_0x224968, _0x4e1758, _0x238776) {
  var _0x40b8d4 = document.createElement("canvas");
  var _0x397a59 = _0x40b8d4.getContext("2d");
  _0x40b8d4.width = _0x224968 * 158;
  _0x40b8d4.height = _0x224968 * 201;
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 96.5, _0x224968 * 76.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 100.5, _0x224968 * 64.421875, _0x224968 * 103.5, _0x224968 * 62.421875, _0x224968 * 110.5, _0x224968 * 65.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 116.5, _0x224968 * 66.421875, _0x224968 * 117.5, _0x224968 * 67.421875, _0x224968 * 112.5, _0x224968 * 73.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 107, _0x224968 * 79.921875, _0x224968 * 107, _0x224968 * 79.921875, _0x224968 * 101.5, _0x224968 * 86.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 61.5, _0x224968 * 78.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 57.5, _0x224968 * 73.421875, _0x224968 * 51.5, _0x224968 * 66.421875, _0x224968 * 45.5, _0x224968 * 68.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 32.5, _0x224968 * 73.421875, _0x224968 * 38.5, _0x224968 * 75.421875, _0x224968 * 46.5, _0x224968 * 81.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 51.5, _0x224968 * 84.921875, _0x224968 * 51.5, _0x224968 * 84.921875, _0x224968 * 56.5, _0x224968 * 88.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 116.5, _0x224968 * 127.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 124.5, _0x224968 * 108.421875, _0x224968 * 129.5, _0x224968 * 104.421875, _0x224968 * 141.5, _0x224968 * 107.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 156.5, _0x224968 * 112.421875, _0x224968 * 153.5, _0x224968 * 113.421875, _0x224968 * 132.5, _0x224968 * 134.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 123.5, _0x224968 * 141.921875, _0x224968 * 123.5, _0x224968 * 141.921875, _0x224968 * 114.5, _0x224968 * 149.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 41.5, _0x224968 * 134.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 30.5, _0x224968 * 119.421875, _0x224968 * 25.5, _0x224968 * 111.421875, _0x224968 * 12.5, _0x224968 * 115.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 4.5, _0x224968 * 120.421875, _0x224968 * 4.5, _0x224968 * 121.421875, _0x224968 * 26.5, _0x224968 * 142.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 35, _0x224968 * 149.921875, _0x224968 * 35, _0x224968 * 149.921875, _0x224968 * 43.5, _0x224968 * 157.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 78.5, _0x224968 * 51.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 99.5, _0x224968 * 75.921875, _0x224968 * 110.5, _0x224968 * 96.921875, _0x224968 * 118.5, _0x224968 * 120.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 121.5, _0x224968 * 140.921875, _0x224968 * 107.5, _0x224968 * 179.921875, _0x224968 * 75.5, _0x224968 * 183.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 30.5, _0x224968 * 169.921875, _0x224968 * 37.5, _0x224968 * 131.921875, _0x224968 * 34.5, _0x224968 * 120.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 41.5, _0x224968 * 89.921875, _0x224968 * 61.5, _0x224968 * 67.921875, _0x224968 * 78.5, _0x224968 * 51.921875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 72.5, _0x224968 * 72.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 76.5, _0x224968 * 79.421875, _0x224968 * 79.5, _0x224968 * 80.421875, _0x224968 * 83.5, _0x224968 * 73.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 80.5, _0x224968 * 96.921875, _0x224968 * 79.5, _0x224968 * 114.421875, _0x224968 * 77.5, _0x224968 * 120.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 42.5, _0x224968 * 163.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 62.5, _0x224968 * 185.421875, _0x224968 * 86.5, _0x224968 * 186.421875, _0x224968 * 111.5, _0x224968 * 165.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 107.5, _0x224968 * 176.421875, _0x224968 * 95.5, _0x224968 * 187.421875, _0x224968 * 75.5, _0x224968 * 188.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 53.5, _0x224968 * 188.421875, _0x224968 * 43.5, _0x224968 * 171.421875, _0x224968 * 42.5, _0x224968 * 164.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 8);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 79.5, _0x224968 * 61.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 88.5, _0x224968 * 31.421875, _0x224968 * 81.5, _0x224968 * 16.421875, _0x224968 * 75.5, _0x224968 * 7.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 77.5, _0x224968 * 28.421875, _0x224968 * 77.5, _0x224968 * 37.421875, _0x224968 * 68.5, _0x224968 * 42.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 79.5, _0x224968 * 57.421875, _0x224968 * 79.5, _0x224968 * 58.421875, _0x224968 * 80.5, _0x224968 * 61.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 72.5, _0x224968 * 72.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 76.5, _0x224968 * 79.421875, _0x224968 * 79.5, _0x224968 * 80.421875, _0x224968 * 83.5, _0x224968 * 73.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 80.5, _0x224968 * 96.921875, _0x224968 * 79.5, _0x224968 * 114.421875, _0x224968 * 77.5, _0x224968 * 120.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[8], _0x238776[8], _0x224968 * 10);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 96.5, _0x224968 * 76.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 100.5, _0x224968 * 64.421875, _0x224968 * 103.5, _0x224968 * 62.421875, _0x224968 * 110.5, _0x224968 * 65.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 116.5, _0x224968 * 66.421875, _0x224968 * 117.5, _0x224968 * 67.421875, _0x224968 * 112.5, _0x224968 * 73.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 107, _0x224968 * 79.921875, _0x224968 * 107, _0x224968 * 79.921875, _0x224968 * 101.5, _0x224968 * 86.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[1], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 61.5, _0x224968 * 78.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 57.5, _0x224968 * 73.421875, _0x224968 * 51.5, _0x224968 * 66.421875, _0x224968 * 45.5, _0x224968 * 68.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 32.5, _0x224968 * 73.421875, _0x224968 * 38.5, _0x224968 * 75.421875, _0x224968 * 46.5, _0x224968 * 81.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 51.5, _0x224968 * 84.921875, _0x224968 * 51.5, _0x224968 * 84.921875, _0x224968 * 56.5, _0x224968 * 88.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[1], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 116.5, _0x224968 * 127.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 124.5, _0x224968 * 108.421875, _0x224968 * 129.5, _0x224968 * 104.421875, _0x224968 * 141.5, _0x224968 * 107.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 156.5, _0x224968 * 112.421875, _0x224968 * 153.5, _0x224968 * 113.421875, _0x224968 * 132.5, _0x224968 * 134.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 123.5, _0x224968 * 141.921875, _0x224968 * 123.5, _0x224968 * 141.921875, _0x224968 * 114.5, _0x224968 * 149.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[1], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 41.5, _0x224968 * 134.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 30.5, _0x224968 * 119.421875, _0x224968 * 25.5, _0x224968 * 111.421875, _0x224968 * 12.5, _0x224968 * 115.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 4.5, _0x224968 * 120.421875, _0x224968 * 4.5, _0x224968 * 121.421875, _0x224968 * 26.5, _0x224968 * 142.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 35, _0x224968 * 149.921875, _0x224968 * 35, _0x224968 * 149.921875, _0x224968 * 43.5, _0x224968 * 157.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[1], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 78.5, _0x224968 * 51.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 99.5, _0x224968 * 75.921875, _0x224968 * 110.5, _0x224968 * 96.921875, _0x224968 * 118.5, _0x224968 * 120.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 121.5, _0x224968 * 140.921875, _0x224968 * 107.5, _0x224968 * 179.921875, _0x224968 * 75.5, _0x224968 * 183.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 30.5, _0x224968 * 169.921875, _0x224968 * 37.5, _0x224968 * 131.921875, _0x224968 * 34.5, _0x224968 * 120.921875);
  _0x397a59.bezierCurveTo(_0x224968 * 41.5, _0x224968 * 89.921875, _0x224968 * 61.5, _0x224968 * 67.921875, _0x224968 * 78.5, _0x224968 * 51.921875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  circle(_0x397a59, _0x224968 * 108.5, _0x224968 * 148.421875, _0x224968 * 9);
  fill_path(_0x397a59, _0x238776[5]);
  circle(_0x397a59, _0x224968 * 106.5, _0x224968 * 144.421875, _0x224968 * 3);
  fill_path(_0x397a59, _0x238776[6]);
  circle(_0x397a59, _0x224968 * 46.5, _0x224968 * 148.421875, _0x224968 * 9);
  fill_path(_0x397a59, _0x238776[5]);
  circle(_0x397a59, _0x224968 * 44.5, _0x224968 * 144.421875, _0x224968 * 3);
  fill_path(_0x397a59, _0x238776[6]);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 116.5, _0x224968 * 114.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 121.5, _0x224968 * 137.421875, _0x224968 * 118.5, _0x224968 * 133.421875, _0x224968 * 108.5, _0x224968 * 139.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 94.5, _0x224968 * 146.421875, _0x224968 * 96.5, _0x224968 * 148.421875, _0x224968 * 95.5, _0x224968 * 152.421875);
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.translate(0, _0x224968 * -2);
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 35.5, _0x224968 * 131.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 36.5, _0x224968 * 140.421875, _0x224968 * 39.5, _0x224968 * 140.421875, _0x224968 * 49.5, _0x224968 * 143.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 59.5, _0x224968 * 149.421875, _0x224968 * 57.5, _0x224968 * 151.421875, _0x224968 * 59.5, _0x224968 * 155.421875);
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 84.5, _0x224968 * 57.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 101.5, _0x224968 * 120.421875, _0x224968 * 92.5, _0x224968 * 127.421875, _0x224968 * 78.5, _0x224968 * 134.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 51.5, _0x224968 * 131.421875, _0x224968 * 63.5, _0x224968 * 102.421875, _0x224968 * 70.5, _0x224968 * 59.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 75, _0x224968 * 55.421875, _0x224968 * 78.5, _0x224968 * 52.421875, _0x224968 * 79.5, _0x224968 * 51.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[4]);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 79.5, _0x224968 * 61.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 88.5, _0x224968 * 31.421875, _0x224968 * 81.5, _0x224968 * 16.421875, _0x224968 * 75.5, _0x224968 * 7.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 77.5, _0x224968 * 28.421875, _0x224968 * 77.5, _0x224968 * 37.421875, _0x224968 * 68.5, _0x224968 * 42.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 79.5, _0x224968 * 57.421875, _0x224968 * 79.5, _0x224968 * 58.421875, _0x224968 * 80.5, _0x224968 * 61.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 72.5, _0x224968 * 72.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 76.5, _0x224968 * 79.421875, _0x224968 * 79.5, _0x224968 * 80.421875, _0x224968 * 83.5, _0x224968 * 73.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 80.5, _0x224968 * 96.921875, _0x224968 * 79.5, _0x224968 * 114.421875, _0x224968 * 77.5, _0x224968 * 120.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 87.5, _0x224968 * 154.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 93.5, _0x224968 * 163.921875, _0x224968 * 93.5, _0x224968 * 163.921875, _0x224968 * 99.5, _0x224968 * 173.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 95, _0x224968 * 177.421875, _0x224968 * 95, _0x224968 * 177.421875, _0x224968 * 90.5, _0x224968 * 181.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 89, _0x224968 * 167.921875, _0x224968 * 89, _0x224968 * 167.921875, _0x224968 * 87.5, _0x224968 * 154.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[6], _0x238776[7], _0x224968 * 2);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 81.5, _0x224968 * 164.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 84, _0x224968 * 172.921875, _0x224968 * 84, _0x224968 * 172.921875, _0x224968 * 86.5, _0x224968 * 181.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 82.5, _0x224968 * 182.421875, _0x224968 * 82.5, _0x224968 * 182.421875, _0x224968 * 78.5, _0x224968 * 183.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[6], _0x238776[7], _0x224968 * 2);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 72.5, _0x224968 * 164.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 73.5, _0x224968 * 173.921875, _0x224968 * 73.5, _0x224968 * 173.921875, _0x224968 * 74.5, _0x224968 * 183.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 70.5, _0x224968 * 182.921875, _0x224968 * 70.5, _0x224968 * 182.921875, _0x224968 * 66.5, _0x224968 * 182.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[6], _0x238776[7], _0x224968 * 2);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 65.5, _0x224968 * 156.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 65, _0x224968 * 168.421875, _0x224968 * 65, _0x224968 * 168.421875, _0x224968 * 64.5, _0x224968 * 180.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 58.5, _0x224968 * 177.421875, _0x224968 * 58.5, _0x224968 * 177.421875, _0x224968 * 52.5, _0x224968 * 174.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[6], _0x238776[7], _0x224968 * 2);
  _0x397a59.beginPath();
  _0x397a59.lineCap = "round";
  _0x397a59.lineJoin = "round";
  _0x397a59.moveTo(_0x224968 * 42.5, _0x224968 * 163.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 62.5, _0x224968 * 185.421875, _0x224968 * 86.5, _0x224968 * 186.421875, _0x224968 * 111.5, _0x224968 * 165.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 107.5, _0x224968 * 176.421875, _0x224968 * 95.5, _0x224968 * 187.421875, _0x224968 * 75.5, _0x224968 * 188.421875);
  _0x397a59.bezierCurveTo(_0x224968 * 53.5, _0x224968 * 188.421875, _0x224968 * 43.5, _0x224968 * 171.421875, _0x224968 * 42.5, _0x224968 * 164.421875);
  _0x397a59.closePath();
  fill_path(_0x397a59, _0x238776[3], _0x238776[2], _0x224968 * 4);
  return _0x40b8d4;
}
function create_hurt_pirahna(_0x3f0498, _0x47f857) {
  var _0x55e7c4 = document.createElement("canvas");
  var _0x187ad4 = _0x55e7c4.getContext("2d");
  _0x55e7c4.width = _0x3f0498 * 158;
  _0x55e7c4.height = _0x3f0498 * 201;
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 96.5, _0x3f0498 * 76.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 100.5, _0x3f0498 * 64.421875, _0x3f0498 * 103.5, _0x3f0498 * 62.421875, _0x3f0498 * 110.5, _0x3f0498 * 65.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 116.5, _0x3f0498 * 66.421875, _0x3f0498 * 117.5, _0x3f0498 * 67.421875, _0x3f0498 * 112.5, _0x3f0498 * 73.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 107, _0x3f0498 * 79.921875, _0x3f0498 * 107, _0x3f0498 * 79.921875, _0x3f0498 * 101.5, _0x3f0498 * 86.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 61.5, _0x3f0498 * 78.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 57.5, _0x3f0498 * 73.421875, _0x3f0498 * 51.5, _0x3f0498 * 66.421875, _0x3f0498 * 45.5, _0x3f0498 * 68.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 32.5, _0x3f0498 * 73.421875, _0x3f0498 * 38.5, _0x3f0498 * 75.421875, _0x3f0498 * 46.5, _0x3f0498 * 81.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 51.5, _0x3f0498 * 84.921875, _0x3f0498 * 51.5, _0x3f0498 * 84.921875, _0x3f0498 * 56.5, _0x3f0498 * 88.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 116.5, _0x3f0498 * 127.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 124.5, _0x3f0498 * 108.421875, _0x3f0498 * 129.5, _0x3f0498 * 104.421875, _0x3f0498 * 141.5, _0x3f0498 * 107.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 156.5, _0x3f0498 * 112.421875, _0x3f0498 * 153.5, _0x3f0498 * 113.421875, _0x3f0498 * 132.5, _0x3f0498 * 134.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 123.5, _0x3f0498 * 141.921875, _0x3f0498 * 123.5, _0x3f0498 * 141.921875, _0x3f0498 * 114.5, _0x3f0498 * 149.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 41.5, _0x3f0498 * 134.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 30.5, _0x3f0498 * 119.421875, _0x3f0498 * 25.5, _0x3f0498 * 111.421875, _0x3f0498 * 12.5, _0x3f0498 * 115.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 4.5, _0x3f0498 * 120.421875, _0x3f0498 * 4.5, _0x3f0498 * 121.421875, _0x3f0498 * 26.5, _0x3f0498 * 142.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 35, _0x3f0498 * 149.921875, _0x3f0498 * 35, _0x3f0498 * 149.921875, _0x3f0498 * 43.5, _0x3f0498 * 157.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 78.5, _0x3f0498 * 51.921875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 99.5, _0x3f0498 * 75.921875, _0x3f0498 * 110.5, _0x3f0498 * 96.921875, _0x3f0498 * 118.5, _0x3f0498 * 120.921875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 121.5, _0x3f0498 * 140.921875, _0x3f0498 * 107.5, _0x3f0498 * 179.921875, _0x3f0498 * 75.5, _0x3f0498 * 183.921875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 30.5, _0x3f0498 * 169.921875, _0x3f0498 * 37.5, _0x3f0498 * 131.921875, _0x3f0498 * 34.5, _0x3f0498 * 120.921875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 41.5, _0x3f0498 * 89.921875, _0x3f0498 * 61.5, _0x3f0498 * 67.921875, _0x3f0498 * 78.5, _0x3f0498 * 51.921875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 72.5, _0x3f0498 * 72.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 76.5, _0x3f0498 * 79.421875, _0x3f0498 * 79.5, _0x3f0498 * 80.421875, _0x3f0498 * 83.5, _0x3f0498 * 73.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 80.5, _0x3f0498 * 96.921875, _0x3f0498 * 79.5, _0x3f0498 * 114.421875, _0x3f0498 * 77.5, _0x3f0498 * 120.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 42.5, _0x3f0498 * 163.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 62.5, _0x3f0498 * 185.421875, _0x3f0498 * 86.5, _0x3f0498 * 186.421875, _0x3f0498 * 111.5, _0x3f0498 * 165.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 107.5, _0x3f0498 * 176.421875, _0x3f0498 * 95.5, _0x3f0498 * 187.421875, _0x3f0498 * 75.5, _0x3f0498 * 188.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 53.5, _0x3f0498 * 188.421875, _0x3f0498 * 43.5, _0x3f0498 * 171.421875, _0x3f0498 * 42.5, _0x3f0498 * 164.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 79.5, _0x3f0498 * 61.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 88.5, _0x3f0498 * 31.421875, _0x3f0498 * 81.5, _0x3f0498 * 16.421875, _0x3f0498 * 75.5, _0x3f0498 * 7.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 77.5, _0x3f0498 * 28.421875, _0x3f0498 * 77.5, _0x3f0498 * 37.421875, _0x3f0498 * 68.5, _0x3f0498 * 42.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 79.5, _0x3f0498 * 57.421875, _0x3f0498 * 79.5, _0x3f0498 * 58.421875, _0x3f0498 * 80.5, _0x3f0498 * 61.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  _0x187ad4.beginPath();
  _0x187ad4.lineCap = "round";
  _0x187ad4.lineJoin = "round";
  _0x187ad4.moveTo(_0x3f0498 * 72.5, _0x3f0498 * 72.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 76.5, _0x3f0498 * 79.421875, _0x3f0498 * 79.5, _0x3f0498 * 80.421875, _0x3f0498 * 83.5, _0x3f0498 * 73.421875);
  _0x187ad4.bezierCurveTo(_0x3f0498 * 80.5, _0x3f0498 * 96.921875, _0x3f0498 * 79.5, _0x3f0498 * 114.421875, _0x3f0498 * 77.5, _0x3f0498 * 120.421875);
  _0x187ad4.closePath();
  fill_path(_0x187ad4, _0x47f857[0], _0x47f857[0], _0x3f0498 * 10);
  return _0x55e7c4;
}
function create_flour(_0x4ff9a4, _0x1e48a6, _0x3df5d0) {
  var _0x124dd0 = document.createElement("canvas");
  var _0x60f425 = _0x124dd0.getContext("2d");
  _0x124dd0.width = _0x4ff9a4 * 400;
  _0x124dd0.height = _0x4ff9a4 * 170;
  _0x60f425.translate(0, _0x4ff9a4 * -170);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 159.5, _0x4ff9a4 * 322.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 240.5, _0x4ff9a4 * 293.0625, _0x4ff9a4 * 240.5, _0x4ff9a4 * 293.0625, _0x4ff9a4 * 321.5, _0x4ff9a4 * 264.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 276.5, _0x4ff9a4 * 230.0625, _0x4ff9a4 * 276.5, _0x4ff9a4 * 230.0625, _0x4ff9a4 * 231.5, _0x4ff9a4 * 196.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 158.5, _0x4ff9a4 * 221.5625, _0x4ff9a4 * 158.5, _0x4ff9a4 * 221.5625, _0x4ff9a4 * 85.5, _0x4ff9a4 * 247.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, _0x3df5d0[0], _0x3df5d0[1], _0x4ff9a4 * 12);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 212.5, _0x4ff9a4 * 270.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 235, _0x4ff9a4 * 261.5625, _0x4ff9a4 * 235, _0x4ff9a4 * 261.5625, _0x4ff9a4 * 257.5, _0x4ff9a4 * 253.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, undefined, _0x3df5d0[0], _0x4ff9a4 * 12);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 193.5, _0x4ff9a4 * 226.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 204.5, _0x4ff9a4 * 242.0625, _0x4ff9a4 * 242.5, _0x4ff9a4 * 237.0625, _0x4ff9a4 * 251.5, _0x4ff9a4 * 225.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 246.5, _0x4ff9a4 * 195.0625, _0x4ff9a4 * 205.5, _0x4ff9a4 * 190.0625, _0x4ff9a4 * 193.5, _0x4ff9a4 * 227.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, _0x3df5d0[2], _0x3df5d0[3], _0x4ff9a4 * 12);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 164.5, _0x4ff9a4 * 245.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 182.5, _0x4ff9a4 * 264.0625, _0x4ff9a4 * 252.5, _0x4ff9a4 * 258.0625, _0x4ff9a4 * 276.5, _0x4ff9a4 * 244.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 265.5, _0x4ff9a4 * 226.0625, _0x4ff9a4 * 244.5, _0x4ff9a4 * 231.0625, _0x4ff9a4 * 229.5, _0x4ff9a4 * 230.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 205.5, _0x4ff9a4 * 227.0625, _0x4ff9a4 * 175.5, _0x4ff9a4 * 202.0625, _0x4ff9a4 * 162.5, _0x4ff9a4 * 244.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, _0x3df5d0[2], _0x3df5d0[3], _0x4ff9a4 * 12);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 115.5, _0x4ff9a4 * 260.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 134.5, _0x4ff9a4 * 279.0625, _0x4ff9a4 * 170.5, _0x4ff9a4 * 275.0625, _0x4ff9a4 * 191.5, _0x4ff9a4 * 257.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 174.5, _0x4ff9a4 * 208.0625, _0x4ff9a4 * 142.5, _0x4ff9a4 * 197.0625, _0x4ff9a4 * 116.5, _0x4ff9a4 * 259.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, _0x3df5d0[2], _0x3df5d0[3], _0x4ff9a4 * 12);
  _0x60f425.beginPath();
  _0x60f425.lineCap = "round";
  _0x60f425.lineJoin = "round";
  _0x60f425.moveTo(_0x4ff9a4 * 152.5, _0x4ff9a4 * 278.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 165.5, _0x4ff9a4 * 294.0625, _0x4ff9a4 * 200.5, _0x4ff9a4 * 287.0625, _0x4ff9a4 * 216.5, _0x4ff9a4 * 278.0625);
  _0x60f425.bezierCurveTo(_0x4ff9a4 * 206.5, _0x4ff9a4 * 247.0625, _0x4ff9a4 * 173.5, _0x4ff9a4 * 233.0625, _0x4ff9a4 * 153.5, _0x4ff9a4 * 276.0625);
  _0x60f425.closePath();
  fill_path(_0x60f425, _0x3df5d0[2], _0x3df5d0[3], _0x4ff9a4 * 12);
  return _0x124dd0;
}
function create_leaderboard_mobile(_0xf40f10) {
  var _0x5e3acb = document.createElement("canvas");
  var _0x31a90c = _0x5e3acb.getContext("2d");
  var _0x1f9974 = _0xf40f10 * 200;
  var _0x4283eb = _0xf40f10 * 180;
  var _0x1f7ffb = _0xf40f10 * 8;
  _0x5e3acb.width = _0x1f9974;
  _0x5e3acb.height = _0x4283eb;
  _0x31a90c.beginPath();
  round_rect(_0x31a90c, 0, 0, _0x1f9974, _0x4283eb - _0x1f7ffb, _0x1f7ffb);
  _0x31a90c.globalAlpha = 0.8;
  fill_path(_0x31a90c, "#1D6055");
  _0x31a90c.globalAlpha = 1;
  var _0xc36593 = create_text(_0xf40f10, "Leaderboard", 25, "#FFF");
  _0x31a90c.drawImage(_0xc36593, (_0x1f9974 - _0xc36593.width) / 2, _0xf40f10 * 5);
  return _0x5e3acb;
}
function create_leaderboard(_0xe7a1c8) {
  var _0x4b8738 = document.createElement("canvas");
  var _0x3b02bd = _0x4b8738.getContext("2d");
  var _0x1c1403 = _0xe7a1c8 * 200;
  var _0x467264 = _0xe7a1c8 * 270;
  var _0xf7bcdd = _0xe7a1c8 * 8;
  _0x4b8738.width = _0x1c1403;
  _0x4b8738.height = _0x467264 + 20;
  _0x3b02bd.beginPath();
  round_rect(_0x3b02bd, 0, 0, _0x1c1403, _0x467264 - _0xf7bcdd, _0xf7bcdd);
  _0x3b02bd.globalAlpha = 0.5;
  fill_path(_0x3b02bd, "#1D6055");
  _0x3b02bd.globalAlpha = 1;
  var _0x4e6e54 = create_text(_0xe7a1c8, "Leaderboard", 25, "#FFF");
  _0x3b02bd.drawImage(_0x4e6e54, (_0x1c1403 - _0x4e6e54.width) / 2, _0xe7a1c8 * 5);
  return _0x4b8738;
}
function create_pumpkin(_0x2cf181, _0x2f3a8b, _0x4e6696) {
  var _0x134954 = document.createElement("canvas");
  var _0x537a60 = _0x134954.getContext("2d");
  _0x134954.width = _0x2cf181 * 272;
  _0x134954.height = _0x2cf181 * 264;
  _0x537a60.translate(0, _0x2cf181 * 20);
  _0x537a60.globalAlpha = _0x2f3a8b ? 0.5 : 1;
  _0x537a60.beginPath();
  _0x537a60.lineCap = "round";
  _0x537a60.lineJoin = "round";
  _0x537a60.moveTo(_0x2cf181 * 56.999969482421875, _0x2cf181 * 84.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 61.999969482421875, _0x2cf181 * 58.517333984375, _0x2cf181 * 79.99996948242188, _0x2cf181 * 50.517333984375, _0x2cf181 * 102.99996948242188, _0x2cf181 * 50.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 119.99996948242188, _0x2cf181 * 26.517333984375, _0x2cf181 * 137.99996948242188, _0x2cf181 * 32.517333984375, _0x2cf181 * 156.99996948242188, _0x2cf181 * 44.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 187.99996948242188, _0x2cf181 * 42.517333984375, _0x2cf181 * 195.99996948242188, _0x2cf181 * 50.517333984375, _0x2cf181 * 202.99996948242188, _0x2cf181 * 77.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 229.99996948242188, _0x2cf181 * 80.517333984375, _0x2cf181 * 231.99996948242188, _0x2cf181 * 96.517333984375, _0x2cf181 * 229.99996948242188, _0x2cf181 * 118.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 241.99996948242188, _0x2cf181 * 147.517333984375, _0x2cf181 * 236.99996948242188, _0x2cf181 * 148.517333984375, _0x2cf181 * 220.99996948242188, _0x2cf181 * 165.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 222.99996948242188, _0x2cf181 * 192.517333984375, _0x2cf181 * 209.99996948242188, _0x2cf181 * 212.517333984375, _0x2cf181 * 177.99996948242188, _0x2cf181 * 213.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 159.99996948242188, _0x2cf181 * 234.517333984375, _0x2cf181 * 141.99996948242188, _0x2cf181 * 234.517333984375, _0x2cf181 * 116.99996948242188, _0x2cf181 * 222.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 72.99996948242188, _0x2cf181 * 226.517333984375, _0x2cf181 * 66.99996948242188, _0x2cf181 * 207.517333984375, _0x2cf181 * 65.99996948242188, _0x2cf181 * 190.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 35.999969482421875, _0x2cf181 * 180.517333984375, _0x2cf181 * 30.999969482421875, _0x2cf181 * 162.517333984375, _0x2cf181 * 39.999969482421875, _0x2cf181 * 135.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 23.999969482421875, _0x2cf181 * 110.517333984375, _0x2cf181 * 43.999969482421875, _0x2cf181 * 90.517333984375, _0x2cf181 * 55.999969482421875, _0x2cf181 * 85.517333984375);
  _0x537a60.closePath();
  fill_path(_0x537a60, _0x4e6696[0]);
  _0x537a60.translate(0, _0x2cf181 * -20);
  _0x537a60.globalAlpha = 1;
  _0x537a60.beginPath();
  _0x537a60.lineCap = "round";
  _0x537a60.lineJoin = "round";
  _0x537a60.moveTo(_0x2cf181 * 56.999969482421875, _0x2cf181 * 84.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 61.999969482421875, _0x2cf181 * 58.517333984375, _0x2cf181 * 79.99996948242188, _0x2cf181 * 50.517333984375, _0x2cf181 * 102.99996948242188, _0x2cf181 * 50.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 119.99996948242188, _0x2cf181 * 26.517333984375, _0x2cf181 * 137.99996948242188, _0x2cf181 * 32.517333984375, _0x2cf181 * 156.99996948242188, _0x2cf181 * 44.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 187.99996948242188, _0x2cf181 * 42.517333984375, _0x2cf181 * 195.99996948242188, _0x2cf181 * 50.517333984375, _0x2cf181 * 202.99996948242188, _0x2cf181 * 77.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 229.99996948242188, _0x2cf181 * 80.517333984375, _0x2cf181 * 231.99996948242188, _0x2cf181 * 96.517333984375, _0x2cf181 * 229.99996948242188, _0x2cf181 * 118.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 241.99996948242188, _0x2cf181 * 147.517333984375, _0x2cf181 * 236.99996948242188, _0x2cf181 * 148.517333984375, _0x2cf181 * 220.99996948242188, _0x2cf181 * 165.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 222.99996948242188, _0x2cf181 * 192.517333984375, _0x2cf181 * 209.99996948242188, _0x2cf181 * 212.517333984375, _0x2cf181 * 177.99996948242188, _0x2cf181 * 213.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 159.99996948242188, _0x2cf181 * 234.517333984375, _0x2cf181 * 141.99996948242188, _0x2cf181 * 234.517333984375, _0x2cf181 * 116.99996948242188, _0x2cf181 * 222.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 72.99996948242188, _0x2cf181 * 226.517333984375, _0x2cf181 * 66.99996948242188, _0x2cf181 * 207.517333984375, _0x2cf181 * 65.99996948242188, _0x2cf181 * 190.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 35.999969482421875, _0x2cf181 * 180.517333984375, _0x2cf181 * 30.999969482421875, _0x2cf181 * 162.517333984375, _0x2cf181 * 39.999969482421875, _0x2cf181 * 135.517333984375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 23.999969482421875, _0x2cf181 * 110.517333984375, _0x2cf181 * 43.999969482421875, _0x2cf181 * 90.517333984375, _0x2cf181 * 55.999969482421875, _0x2cf181 * 85.517333984375);
  _0x537a60.closePath();
  fill_path(_0x537a60, _0x4e6696[1], _0x4e6696[2], _0x2cf181 * 8);
  _0x537a60.beginPath();
  _0x537a60.lineCap = "round";
  _0x537a60.lineJoin = "round";
  _0x537a60.moveTo(_0x2cf181 * 123.99996948242188, _0x2cf181 * 116.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 115.99996948242188, _0x2cf181 * 99.18402099609375, _0x2cf181 * 109.99996948242188, _0x2cf181 * 74.18402099609375, _0x2cf181 * 109.99996948242188, _0x2cf181 * 63.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 115.99996948242188, _0x2cf181 * 69.18402099609375, _0x2cf181 * 125.99996948242188, _0x2cf181 * 87.18402099609375, _0x2cf181 * 137.99996948242188, _0x2cf181 * 112.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 142.99996948242188, _0x2cf181 * 84.18402099609375, _0x2cf181 * 143.99996948242188, _0x2cf181 * 76.18402099609375, _0x2cf181 * 153.99996948242188, _0x2cf181 * 62.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 155.99996948242188, _0x2cf181 * 79.18402099609375, _0x2cf181 * 149.99996948242188, _0x2cf181 * 110.18402099609375, _0x2cf181 * 151.99996948242188, _0x2cf181 * 117.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 162.99996948242188, _0x2cf181 * 104.18402099609375, _0x2cf181 * 180.99996948242188, _0x2cf181 * 91.18402099609375, _0x2cf181 * 191.99996948242188, _0x2cf181 * 91.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 185.99996948242188, _0x2cf181 * 102.18402099609375, _0x2cf181 * 180.99996948242188, _0x2cf181 * 106.18402099609375, _0x2cf181 * 160.99996948242188, _0x2cf181 * 124.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 190.99996948242188, _0x2cf181 * 121.18402099609375, _0x2cf181 * 199.99996948242188, _0x2cf181 * 120.18402099609375, _0x2cf181 * 207.99996948242188, _0x2cf181 * 123.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 199.99996948242188, _0x2cf181 * 129.18402099609375, _0x2cf181 * 181.99996948242188, _0x2cf181 * 132.18402099609375, _0x2cf181 * 160.99996948242188, _0x2cf181 * 135.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 179.99996948242188, _0x2cf181 * 142.18402099609375, _0x2cf181 * 193.99996948242188, _0x2cf181 * 151.18402099609375, _0x2cf181 * 196.99996948242188, _0x2cf181 * 156.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 185.99996948242188, _0x2cf181 * 156.18402099609375, _0x2cf181 * 163.99996948242188, _0x2cf181 * 149.18402099609375, _0x2cf181 * 152.99996948242188, _0x2cf181 * 147.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 157.99996948242188, _0x2cf181 * 155.18402099609375, _0x2cf181 * 165.99996948242188, _0x2cf181 * 176.18402099609375, _0x2cf181 * 169.99996948242188, _0x2cf181 * 195.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 162.99996948242188, _0x2cf181 * 190.18402099609375, _0x2cf181 * 147.99996948242188, _0x2cf181 * 167.18402099609375, _0x2cf181 * 139.99996948242188, _0x2cf181 * 153.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 137.99996948242188, _0x2cf181 * 167.18402099609375, _0x2cf181 * 126.99996948242188, _0x2cf181 * 194.18402099609375, _0x2cf181 * 119.99996948242188, _0x2cf181 * 204.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 117.99996948242188, _0x2cf181 * 186.18402099609375, _0x2cf181 * 123.99996948242188, _0x2cf181 * 165.18402099609375, _0x2cf181 * 126.99996948242188, _0x2cf181 * 149.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 110.99996948242188, _0x2cf181 * 163.18402099609375, _0x2cf181 * 103.99996948242188, _0x2cf181 * 170.18402099609375, _0x2cf181 * 82.99996948242188, _0x2cf181 * 177.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 90.99996948242188, _0x2cf181 * 162.18402099609375, _0x2cf181 * 99.99996948242188, _0x2cf181 * 153.18402099609375, _0x2cf181 * 117.99996948242188, _0x2cf181 * 140.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 97.99996948242188, _0x2cf181 * 140.18402099609375, _0x2cf181 * 83.99996948242188, _0x2cf181 * 139.18402099609375, _0x2cf181 * 65.99996948242188, _0x2cf181 * 132.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 77.99996948242188, _0x2cf181 * 127.18402099609375, _0x2cf181 * 95.99996948242188, _0x2cf181 * 127.18402099609375, _0x2cf181 * 115.99996948242188, _0x2cf181 * 127.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 91.99996948242188, _0x2cf181 * 113.18402099609375, _0x2cf181 * 84.99996948242188, _0x2cf181 * 107.18402099609375, _0x2cf181 * 76.99996948242188, _0x2cf181 * 96.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 94.99996948242188, _0x2cf181 * 99.18402099609375, _0x2cf181 * 109.99996948242188, _0x2cf181 * 109.18402099609375, _0x2cf181 * 123.99996948242188, _0x2cf181 * 116.18402099609375);
  _0x537a60.closePath();
  fill_path(_0x537a60, _0x4e6696[3]);
  _0x537a60.beginPath();
  _0x537a60.lineCap = "round";
  _0x537a60.lineJoin = "round";
  _0x537a60.moveTo(_0x2cf181 * 131.99996948242188, _0x2cf181 * 119.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 141.99996948242188, _0x2cf181 * 119.18402099609375, _0x2cf181 * 145.99996948242188, _0x2cf181 * 116.18402099609375, _0x2cf181 * 147.99996948242188, _0x2cf181 * 109.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 151.99996948242188, _0x2cf181 * 107.18402099609375, _0x2cf181 * 159.99996948242188, _0x2cf181 * 107.18402099609375, _0x2cf181 * 156.99996948242188, _0x2cf181 * 123.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 155.99996948242188, _0x2cf181 * 140.18402099609375, _0x2cf181 * 142.99996948242188, _0x2cf181 * 149.18402099609375, _0x2cf181 * 132.99996948242188, _0x2cf181 * 147.18402099609375);
  _0x537a60.bezierCurveTo(_0x2cf181 * 119.99996948242188, _0x2cf181 * 144.18402099609375, _0x2cf181 * 113.99996948242188, _0x2cf181 * 122.18402099609375, _0x2cf181 * 131.99996948242188, _0x2cf181 * 119.18402099609375);
  _0x537a60.closePath();
  fill_path(_0x537a60, _0x4e6696[4], _0x4e6696[5], _0x2cf181 * 6);
  return _0x134954;
}
function create_brambles(_0x42ac74, _0x419712, _0x367e18) {
  var _0x51c952 = document.createElement("canvas");
  var _0x4cf1a5 = _0x51c952.getContext("2d");
  _0x51c952.width = _0x42ac74 * 247;
  _0x51c952.height = _0x42ac74 * 247;
  _0x4cf1a5.translate(0, _0x42ac74 * 10);
  _0x4cf1a5.globalAlpha = _0x419712 ? 0.5 : 1;
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 150, _0x42ac74 * 62);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 151.5, _0x42ac74 * 71.5, _0x42ac74 * 149, _0x42ac74 * 70, _0x42ac74 * 153, _0x42ac74 * 81);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 158, _0x42ac74 * 73.5, _0x42ac74 * 158, _0x42ac74 * 73.5, _0x42ac74 * 163, _0x42ac74 * 66);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[0]);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 164, _0x42ac74 * 171);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 149, _0x42ac74 * 159, _0x42ac74 * 156.5, _0x42ac74 * 165, _0x42ac74 * 149, _0x42ac74 * 159);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 149, _0x42ac74 * 167, _0x42ac74 * 149, _0x42ac74 * 170, _0x42ac74 * 152, _0x42ac74 * 178);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[0]);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 132, _0x42ac74 * 95);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 154, _0x42ac74 * 102, _0x42ac74 * 154, _0x42ac74 * 126, _0x42ac74 * 137, _0x42ac74 * 139);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 113, _0x42ac74 * 152, _0x42ac74 * 89, _0x42ac74 * 136, _0x42ac74 * 80, _0x42ac74 * 121);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 57, _0x42ac74 * 89, _0x42ac74 * 69, _0x42ac74 * 63, _0x42ac74 * 79, _0x42ac74 * 52);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 110, _0x42ac74 * 20, _0x42ac74 * 139, _0x42ac74 * 21, _0x42ac74 * 150, _0x42ac74 * 25);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 197, _0x42ac74 * 36, _0x42ac74 * 221, _0x42ac74 * 67, _0x42ac74 * 226, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 234, _0x42ac74 * 134, _0x42ac74 * 214, _0x42ac74 * 177, _0x42ac74 * 195, _0x42ac74 * 197);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 144, _0x42ac74 * 242, _0x42ac74 * 79, _0x42ac74 * 216, _0x42ac74 * 58, _0x42ac74 * 206);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 13, _0x42ac74 * 174, _0x42ac74 * 20, _0x42ac74 * 134, _0x42ac74 * 23, _0x42ac74 * 107);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 26, _0x42ac74 * 78, _0x42ac74 * 33, _0x42ac74 * 60, _0x42ac74 * 38, _0x42ac74 * 43);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 42, _0x42ac74 * 32, _0x42ac74 * 47, _0x42ac74 * 32, _0x42ac74 * 50, _0x42ac74 * 36);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 54, _0x42ac74 * 37, _0x42ac74 * 50, _0x42ac74 * 52, _0x42ac74 * 44, _0x42ac74 * 87);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 40, _0x42ac74 * 115, _0x42ac74 * 46, _0x42ac74 * 142, _0x42ac74 * 57, _0x42ac74 * 158);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 76, _0x42ac74 * 189, _0x42ac74 * 129, _0x42ac74 * 182, _0x42ac74 * 152, _0x42ac74 * 173);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 186, _0x42ac74 * 156, _0x42ac74 * 191, _0x42ac74 * 106, _0x42ac74 * 176, _0x42ac74 * 85);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 159, _0x42ac74 * 61, _0x42ac74 * 132, _0x42ac74 * 62, _0x42ac74 * 122, _0x42ac74 * 66);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 108, _0x42ac74 * 74, _0x42ac74 * 108, _0x42ac74 * 89, _0x42ac74 * 116, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 123, _0x42ac74 * 92, _0x42ac74 * 130, _0x42ac74 * 93, _0x42ac74 * 131, _0x42ac74 * 94);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[0]);
  _0x4cf1a5.translate(0, _0x42ac74 * -10);
  _0x4cf1a5.globalAlpha = 1;
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 150, _0x42ac74 * 62);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 151.5, _0x42ac74 * 71.5, _0x42ac74 * 149, _0x42ac74 * 70, _0x42ac74 * 153, _0x42ac74 * 81);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 158, _0x42ac74 * 73.5, _0x42ac74 * 158, _0x42ac74 * 73.5, _0x42ac74 * 163, _0x42ac74 * 66);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[5]);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 164, _0x42ac74 * 171);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 149, _0x42ac74 * 159, _0x42ac74 * 156.5, _0x42ac74 * 165, _0x42ac74 * 149, _0x42ac74 * 159);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 149, _0x42ac74 * 167, _0x42ac74 * 149, _0x42ac74 * 170, _0x42ac74 * 152, _0x42ac74 * 178);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[5]);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 132, _0x42ac74 * 95);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 154, _0x42ac74 * 102, _0x42ac74 * 154, _0x42ac74 * 126, _0x42ac74 * 137, _0x42ac74 * 139);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 113, _0x42ac74 * 152, _0x42ac74 * 89, _0x42ac74 * 136, _0x42ac74 * 80, _0x42ac74 * 121);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 57, _0x42ac74 * 89, _0x42ac74 * 69, _0x42ac74 * 63, _0x42ac74 * 79, _0x42ac74 * 52);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 110, _0x42ac74 * 20, _0x42ac74 * 139, _0x42ac74 * 21, _0x42ac74 * 150, _0x42ac74 * 25);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 197, _0x42ac74 * 36, _0x42ac74 * 221, _0x42ac74 * 67, _0x42ac74 * 226, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 234, _0x42ac74 * 134, _0x42ac74 * 214, _0x42ac74 * 177, _0x42ac74 * 195, _0x42ac74 * 197);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 144, _0x42ac74 * 242, _0x42ac74 * 79, _0x42ac74 * 216, _0x42ac74 * 58, _0x42ac74 * 206);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 13, _0x42ac74 * 174, _0x42ac74 * 20, _0x42ac74 * 134, _0x42ac74 * 23, _0x42ac74 * 107);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 26, _0x42ac74 * 78, _0x42ac74 * 33, _0x42ac74 * 60, _0x42ac74 * 38, _0x42ac74 * 43);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 42, _0x42ac74 * 32, _0x42ac74 * 47, _0x42ac74 * 32, _0x42ac74 * 50, _0x42ac74 * 36);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 54, _0x42ac74 * 37, _0x42ac74 * 50, _0x42ac74 * 52, _0x42ac74 * 44, _0x42ac74 * 87);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 40, _0x42ac74 * 115, _0x42ac74 * 46, _0x42ac74 * 142, _0x42ac74 * 57, _0x42ac74 * 158);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 76, _0x42ac74 * 189, _0x42ac74 * 129, _0x42ac74 * 182, _0x42ac74 * 152, _0x42ac74 * 173);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 186, _0x42ac74 * 156, _0x42ac74 * 191, _0x42ac74 * 106, _0x42ac74 * 176, _0x42ac74 * 85);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 159, _0x42ac74 * 61, _0x42ac74 * 132, _0x42ac74 * 62, _0x42ac74 * 122, _0x42ac74 * 66);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 108, _0x42ac74 * 74, _0x42ac74 * 108, _0x42ac74 * 89, _0x42ac74 * 116, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 123, _0x42ac74 * 92, _0x42ac74 * 130, _0x42ac74 * 93, _0x42ac74 * 131, _0x42ac74 * 94);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[1], _0x367e18[2], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 137, _0x42ac74 * 137);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 145, _0x42ac74 * 125, _0x42ac74 * 138, _0x42ac74 * 108, _0x42ac74 * 123, _0x42ac74 * 104);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 81, _0x42ac74 * 101, _0x42ac74 * 88, _0x42ac74 * 77, _0x42ac74 * 98, _0x42ac74 * 65);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 117, _0x42ac74 * 38, _0x42ac74 * 138, _0x42ac74 * 39, _0x42ac74 * 165, _0x42ac74 * 52);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 197, _0x42ac74 * 72, _0x42ac74 * 207, _0x42ac74 * 111, _0x42ac74 * 197, _0x42ac74 * 140);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 182, _0x42ac74 * 180, _0x42ac74 * 161, _0x42ac74 * 197, _0x42ac74 * 112, _0x42ac74 * 194);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 58, _0x42ac74 * 194, _0x42ac74 * 37, _0x42ac74 * 170, _0x42ac74 * 34, _0x42ac74 * 142);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 29, _0x42ac74 * 102, _0x42ac74 * 40, _0x42ac74 * 63, _0x42ac74 * 51, _0x42ac74 * 45);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 43, _0x42ac74 * 78, _0x42ac74 * 41, _0x42ac74 * 103, _0x42ac74 * 43, _0x42ac74 * 122);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 51, _0x42ac74 * 158, _0x42ac74 * 63, _0x42ac74 * 174, _0x42ac74 * 95, _0x42ac74 * 179);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 129, _0x42ac74 * 186, _0x42ac74 * 169, _0x42ac74 * 172, _0x42ac74 * 177, _0x42ac74 * 144);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 197, _0x42ac74 * 105, _0x42ac74 * 172, _0x42ac74 * 76, _0x42ac74 * 160, _0x42ac74 * 71);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 125, _0x42ac74 * 52, _0x42ac74 * 111, _0x42ac74 * 73, _0x42ac74 * 111, _0x42ac74 * 81);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 106, _0x42ac74 * 93, _0x42ac74 * 140, _0x42ac74 * 92, _0x42ac74 * 147, _0x42ac74 * 107);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 153, _0x42ac74 * 128, _0x42ac74 * 140, _0x42ac74 * 135, _0x42ac74 * 137, _0x42ac74 * 139);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[3]);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 132, _0x42ac74 * 95);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 154, _0x42ac74 * 102, _0x42ac74 * 154, _0x42ac74 * 126, _0x42ac74 * 137, _0x42ac74 * 139);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 113, _0x42ac74 * 152, _0x42ac74 * 89, _0x42ac74 * 136, _0x42ac74 * 80, _0x42ac74 * 121);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 57, _0x42ac74 * 89, _0x42ac74 * 69, _0x42ac74 * 63, _0x42ac74 * 79, _0x42ac74 * 52);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 110, _0x42ac74 * 20, _0x42ac74 * 139, _0x42ac74 * 21, _0x42ac74 * 150, _0x42ac74 * 25);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 197, _0x42ac74 * 36, _0x42ac74 * 221, _0x42ac74 * 67, _0x42ac74 * 226, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 234, _0x42ac74 * 134, _0x42ac74 * 214, _0x42ac74 * 177, _0x42ac74 * 195, _0x42ac74 * 197);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 144, _0x42ac74 * 242, _0x42ac74 * 79, _0x42ac74 * 216, _0x42ac74 * 58, _0x42ac74 * 206);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 13, _0x42ac74 * 174, _0x42ac74 * 20, _0x42ac74 * 134, _0x42ac74 * 23, _0x42ac74 * 107);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 26, _0x42ac74 * 78, _0x42ac74 * 33, _0x42ac74 * 60, _0x42ac74 * 38, _0x42ac74 * 43);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 42, _0x42ac74 * 32, _0x42ac74 * 47, _0x42ac74 * 32, _0x42ac74 * 50, _0x42ac74 * 36);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 54, _0x42ac74 * 37, _0x42ac74 * 50, _0x42ac74 * 52, _0x42ac74 * 44, _0x42ac74 * 87);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 40, _0x42ac74 * 115, _0x42ac74 * 46, _0x42ac74 * 142, _0x42ac74 * 57, _0x42ac74 * 158);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 76, _0x42ac74 * 189, _0x42ac74 * 129, _0x42ac74 * 182, _0x42ac74 * 152, _0x42ac74 * 173);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 186, _0x42ac74 * 156, _0x42ac74 * 191, _0x42ac74 * 106, _0x42ac74 * 176, _0x42ac74 * 85);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 159, _0x42ac74 * 61, _0x42ac74 * 132, _0x42ac74 * 62, _0x42ac74 * 122, _0x42ac74 * 66);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 108, _0x42ac74 * 74, _0x42ac74 * 108, _0x42ac74 * 89, _0x42ac74 * 116, _0x42ac74 * 90);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 123, _0x42ac74 * 92, _0x42ac74 * 130, _0x42ac74 * 93, _0x42ac74 * 131, _0x42ac74 * 94);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, undefined, _0x367e18[2], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 82, _0x42ac74 * 63);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 91, _0x42ac74 * 64, _0x42ac74 * 96, _0x42ac74 * 62, _0x42ac74 * 98, _0x42ac74 * 53);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 91, _0x42ac74 * 45, _0x42ac74 * 85, _0x42ac74 * 42, _0x42ac74 * 78, _0x42ac74 * 41);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 81, _0x42ac74 * 51, _0x42ac74 * 82, _0x42ac74 * 57, _0x42ac74 * 82, _0x42ac74 * 63);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 148, _0x42ac74 * 40);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 140, _0x42ac74 * 52, _0x42ac74 * 131, _0x42ac74 * 51, _0x42ac74 * 123, _0x42ac74 * 43);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 123, _0x42ac74 * 25, _0x42ac74 * 129, _0x42ac74 * 17, _0x42ac74 * 134, _0x42ac74 * 12);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 138, _0x42ac74 * 35, _0x42ac74 * 142, _0x42ac74 * 31, _0x42ac74 * 148, _0x42ac74 * 40);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 189, _0x42ac74 * 43);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 191, _0x42ac74 * 54, _0x42ac74 * 196, _0x42ac74 * 58, _0x42ac74 * 205, _0x42ac74 * 59);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 211, _0x42ac74 * 42, _0x42ac74 * 214, _0x42ac74 * 37, _0x42ac74 * 216, _0x42ac74 * 31);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 202, _0x42ac74 * 34, _0x42ac74 * 195, _0x42ac74 * 39, _0x42ac74 * 190, _0x42ac74 * 43);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 216, _0x42ac74 * 98);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 219, _0x42ac74 * 105, _0x42ac74 * 225, _0x42ac74 * 107, _0x42ac74 * 230, _0x42ac74 * 109);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 227, _0x42ac74 * 113, _0x42ac74 * 221, _0x42ac74 * 115, _0x42ac74 * 215, _0x42ac74 * 115);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 208, _0x42ac74 * 109, _0x42ac74 * 211, _0x42ac74 * 101, _0x42ac74 * 216, _0x42ac74 * 98);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 180, _0x42ac74 * 85);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 193, _0x42ac74 * 86, _0x42ac74 * 196, _0x42ac74 * 98, _0x42ac74 * 191, _0x42ac74 * 108);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 179, _0x42ac74 * 112, _0x42ac74 * 167, _0x42ac74 * 113, _0x42ac74 * 155, _0x42ac74 * 111);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 169, _0x42ac74 * 100, _0x42ac74 * 176, _0x42ac74 * 96, _0x42ac74 * 180, _0x42ac74 * 85);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 96, _0x42ac74 * 114);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 102, _0x42ac74 * 109, _0x42ac74 * 112, _0x42ac74 * 110, _0x42ac74 * 114, _0x42ac74 * 118);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 111, _0x42ac74 * 134, _0x42ac74 * 102, _0x42ac74 * 143, _0x42ac74 * 95, _0x42ac74 * 147);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 98, _0x42ac74 * 123, _0x42ac74 * 97, _0x42ac74 * 119, _0x42ac74 * 96, _0x42ac74 * 115);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 79, _0x42ac74 * 92);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 86, _0x42ac74 * 95, _0x42ac74 * 89, _0x42ac74 * 102, _0x42ac74 * 83, _0x42ac74 * 111);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 70, _0x42ac74 * 110, _0x42ac74 * 61, _0x42ac74 * 107, _0x42ac74 * 54, _0x42ac74 * 100);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 70, _0x42ac74 * 97, _0x42ac74 * 70, _0x42ac74 * 95, _0x42ac74 * 78, _0x42ac74 * 92);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 39, _0x42ac74 * 130);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 37, _0x42ac74 * 141, _0x42ac74 * 41, _0x42ac74 * 143, _0x42ac74 * 48, _0x42ac74 * 144);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 54, _0x42ac74 * 134, _0x42ac74 * 55, _0x42ac74 * 131, _0x42ac74 * 56, _0x42ac74 * 123);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 47, _0x42ac74 * 129, _0x42ac74 * 43, _0x42ac74 * 129, _0x42ac74 * 39, _0x42ac74 * 129);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 113, _0x42ac74 * 189);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 119, _0x42ac74 * 201, _0x42ac74 * 127, _0x42ac74 * 198, _0x42ac74 * 134, _0x42ac74 * 192);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 128, _0x42ac74 * 175, _0x42ac74 * 128, _0x42ac74 * 173, _0x42ac74 * 128, _0x42ac74 * 165);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 117, _0x42ac74 * 176, _0x42ac74 * 116, _0x42ac74 * 182, _0x42ac74 * 113, _0x42ac74 * 187);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 74, _0x42ac74 * 154);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 76, _0x42ac74 * 163, _0x42ac74 * 76, _0x42ac74 * 170, _0x42ac74 * 75, _0x42ac74 * 177);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 68, _0x42ac74 * 179, _0x42ac74 * 66, _0x42ac74 * 176, _0x42ac74 * 63, _0x42ac74 * 171);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 69, _0x42ac74 * 164, _0x42ac74 * 72, _0x42ac74 * 159, _0x42ac74 * 74, _0x42ac74 * 154);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 206, _0x42ac74 * 152);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 198, _0x42ac74 * 158, _0x42ac74 * 198, _0x42ac74 * 166, _0x42ac74 * 201, _0x42ac74 * 171);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 209, _0x42ac74 * 170, _0x42ac74 * 221, _0x42ac74 * 170, _0x42ac74 * 226, _0x42ac74 * 172);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 219, _0x42ac74 * 159, _0x42ac74 * 210, _0x42ac74 * 155, _0x42ac74 * 207, _0x42ac74 * 153);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 181, _0x42ac74 * 184);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 170, _0x42ac74 * 184, _0x42ac74 * 167, _0x42ac74 * 187, _0x42ac74 * 163, _0x42ac74 * 195);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 171, _0x42ac74 * 207, _0x42ac74 * 183, _0x42ac74 * 214, _0x42ac74 * 191, _0x42ac74 * 217);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 183, _0x42ac74 * 204, _0x42ac74 * 184, _0x42ac74 * 196, _0x42ac74 * 181, _0x42ac74 * 184);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 66, _0x42ac74 * 199);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 73, _0x42ac74 * 197, _0x42ac74 * 78, _0x42ac74 * 199, _0x42ac74 * 79, _0x42ac74 * 206);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 71, _0x42ac74 * 216, _0x42ac74 * 67, _0x42ac74 * 221, _0x42ac74 * 57, _0x42ac74 * 223);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 182, _0x42ac74 * 143);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 183, _0x42ac74 * 146, _0x42ac74 * 183, _0x42ac74 * 149, _0x42ac74 * 179, _0x42ac74 * 152);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 174, _0x42ac74 * 146, _0x42ac74 * 174, _0x42ac74 * 146, _0x42ac74 * 169, _0x42ac74 * 140);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 32, _0x42ac74 * 159);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 45, _0x42ac74 * 160, _0x42ac74 * 48, _0x42ac74 * 164, _0x42ac74 * 45, _0x42ac74 * 175);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 28, _0x42ac74 * 183, _0x42ac74 * 25, _0x42ac74 * 184, _0x42ac74 * 19, _0x42ac74 * 184);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 30, _0x42ac74 * 170, _0x42ac74 * 29, _0x42ac74 * 164, _0x42ac74 * 31, _0x42ac74 * 160);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 110, _0x42ac74 * 214);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 106, _0x42ac74 * 212, _0x42ac74 * 104, _0x42ac74 * 213, _0x42ac74 * 102, _0x42ac74 * 218);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 104, _0x42ac74 * 220, _0x42ac74 * 107, _0x42ac74 * 222, _0x42ac74 * 110, _0x42ac74 * 224);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 110.5, _0x42ac74 * 219, _0x42ac74 * 110.5, _0x42ac74 * 219, _0x42ac74 * 111, _0x42ac74 * 214);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 40, _0x42ac74 * 52);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 41, _0x42ac74 * 57, _0x42ac74 * 40, _0x42ac74 * 61, _0x42ac74 * 34, _0x42ac74 * 60);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 31.5, _0x42ac74 * 55, _0x42ac74 * 31.5, _0x42ac74 * 55, _0x42ac74 * 29, _0x42ac74 * 50);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 34, _0x42ac74 * 50.5, _0x42ac74 * 34, _0x42ac74 * 50.5, _0x42ac74 * 39, _0x42ac74 * 51);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  _0x4cf1a5.beginPath();
  _0x4cf1a5.lineCap = "round";
  _0x4cf1a5.lineJoin = "round";
  _0x4cf1a5.moveTo(_0x42ac74 * 31, _0x42ac74 * 81);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 37, _0x42ac74 * 84, _0x42ac74 * 38, _0x42ac74 * 90, _0x42ac74 * 34, _0x42ac74 * 99);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 23, _0x42ac74 * 97, _0x42ac74 * 19, _0x42ac74 * 96, _0x42ac74 * 16, _0x42ac74 * 93);
  _0x4cf1a5.bezierCurveTo(_0x42ac74 * 24, _0x42ac74 * 88, _0x42ac74 * 28, _0x42ac74 * 85, _0x42ac74 * 30, _0x42ac74 * 81);
  _0x4cf1a5.closePath();
  fill_path(_0x4cf1a5, _0x367e18[4], _0x367e18[5], _0x42ac74 * 5);
  return _0x51c952;
}
function create_hood(_0x124443, _0x413be8, _0x14c9fb) {
  var _0x3dc4a5 = document.createElement("canvas");
  var _0x26d110 = _0x3dc4a5.getContext("2d");
  _0x3dc4a5.width = _0x124443 * 465;
  _0x3dc4a5.height = _0x124443 * 310;
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 126, _0x124443 * 192);
  _0x26d110.bezierCurveTo(_0x124443 * 198, _0x124443 * 202, _0x124443 * 245, _0x124443 * 203, _0x124443 * 335, _0x124443 * 194);
  _0x26d110.bezierCurveTo(_0x124443 * 336, _0x124443 * 232, _0x124443 * 326, _0x124443 * 235, _0x124443 * 232, _0x124443 * 237);
  _0x26d110.bezierCurveTo(_0x124443 * 161, _0x124443 * 235, _0x124443 * 122, _0x124443 * 235, _0x124443 * 126, _0x124443 * 193);
  _0x26d110.closePath();
  fill_path(_0x26d110, _0x14c9fb[0], _0x14c9fb[1], _0x124443 * 4);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 146, _0x124443 * 239);
  _0x26d110.bezierCurveTo(_0x124443 * 174, _0x124443 * 74, _0x124443 * 287, _0x124443 * 88, _0x124443 * 320, _0x124443 * 240);
  _0x26d110.bezierCurveTo(_0x124443 * 329, _0x124443 * 231, _0x124443 * 340, _0x124443 * 219, _0x124443 * 332, _0x124443 * 115);
  _0x26d110.bezierCurveTo(_0x124443 * 330, _0x124443 * 40, _0x124443 * 144, _0x124443 * 30, _0x124443 * 129, _0x124443 * 116);
  _0x26d110.bezierCurveTo(_0x124443 * 124, _0x124443 * 217, _0x124443 * 124, _0x124443 * 228, _0x124443 * 143, _0x124443 * 237);
  _0x26d110.closePath();
  fill_path(_0x26d110, _0x14c9fb[0], _0x14c9fb[1], _0x124443 * 4);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 126, _0x124443 * 193);
  _0x26d110.bezierCurveTo(_0x124443 * 173, _0x124443 * 94, _0x124443 * 209, _0x124443 * 100, _0x124443 * 228, _0x124443 * 57);
  _0x26d110.bezierCurveTo(_0x124443 * 190, _0x124443 * 112, _0x124443 * 165, _0x124443 * 115, _0x124443 * 127, _0x124443 * 184);
  _0x26d110.closePath();
  fill_path(_0x26d110, undefined, _0x14c9fb[1], _0x124443 * 4);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 230, _0x124443 * 57);
  _0x26d110.bezierCurveTo(_0x124443 * 266, _0x124443 * 117, _0x124443 * 310, _0x124443 * 130, _0x124443 * 332, _0x124443 * 183);
  _0x26d110.bezierCurveTo(_0x124443 * 290, _0x124443 * 112, _0x124443 * 262, _0x124443 * 109, _0x124443 * 230, _0x124443 * 56);
  _0x26d110.closePath();
  fill_path(_0x26d110, undefined, _0x14c9fb[1], _0x124443 * 4);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 154, _0x124443 * 212);
  _0x26d110.bezierCurveTo(_0x124443 * 208, _0x124443 * 224, _0x124443 * 252, _0x124443 * 219, _0x124443 * 305, _0x124443 * 212);
  _0x26d110.bezierCurveTo(_0x124443 * 267, _0x124443 * 219, _0x124443 * 204, _0x124443 * 222, _0x124443 * 155, _0x124443 * 212);
  _0x26d110.closePath();
  fill_path(_0x26d110, undefined, _0x14c9fb[1], _0x124443 * 4);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 239, _0x124443 * 59);
  _0x26d110.bezierCurveTo(_0x124443 * 302, _0x124443 * 72, _0x124443 * 325, _0x124443 * 84, _0x124443 * 326, _0x124443 * 115);
  _0x26d110.bezierCurveTo(_0x124443 * 289, _0x124443 * 80, _0x124443 * 270, _0x124443 * 88, _0x124443 * 253, _0x124443 * 78);
  _0x26d110.closePath();
  fill_path(_0x26d110, _0x14c9fb[2]);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 216, _0x124443 * 61);
  _0x26d110.bezierCurveTo(_0x124443 * 209, _0x124443 * 70, _0x124443 * 209, _0x124443 * 70, _0x124443 * 202, _0x124443 * 79);
  _0x26d110.bezierCurveTo(_0x124443 * 173, _0x124443 * 87, _0x124443 * 162, _0x124443 * 91, _0x124443 * 137, _0x124443 * 107);
  _0x26d110.bezierCurveTo(_0x124443 * 153, _0x124443 * 78, _0x124443 * 174, _0x124443 * 67, _0x124443 * 212, _0x124443 * 62);
  _0x26d110.closePath();
  fill_path(_0x26d110, _0x14c9fb[2]);
  _0x26d110.beginPath();
  _0x26d110.lineCap = "round";
  _0x26d110.lineJoin = "round";
  _0x26d110.moveTo(_0x124443 * 175, _0x124443 * 125);
  _0x26d110.bezierCurveTo(_0x124443 * 218, _0x124443 * 94, _0x124443 * 238, _0x124443 * 90, _0x124443 * 281, _0x124443 * 125);
  _0x26d110.bezierCurveTo(_0x124443 * 245, _0x124443 * 89, _0x124443 * 240, _0x124443 * 80, _0x124443 * 228, _0x124443 * 67);
  _0x26d110.bezierCurveTo(_0x124443 * 207, _0x124443 * 100, _0x124443 * 192, _0x124443 * 104, _0x124443 * 177, _0x124443 * 123);
  _0x26d110.closePath();
  fill_path(_0x26d110, _0x14c9fb[2]);
  return _0x3dc4a5;
}
function create_winter_hood(_0x88a5e5, _0x14b6c3, _0x6710f0) {
  var _0x13f480 = document.createElement("canvas");
  var _0x50f704 = _0x13f480.getContext("2d");
  _0x13f480.width = _0x88a5e5 * 465;
  _0x13f480.height = _0x88a5e5 * 405;
  _0x50f704.globalAlpha = 1;
  _0x50f704.translate(_0x88a5e5 * 6, _0x88a5e5 * 0);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 39.000030517578125, _0x88a5e5 * 162.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 125.00003051757812, _0x88a5e5 * 84.03977966308594, _0x88a5e5 * 108.50003051757812, _0x88a5e5 * 115.03977966308594, _0x88a5e5 * 178.00003051757812, _0x88a5e5 * 68.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 299.0000305175781, _0x88a5e5 * 146.53977966308594, _0x88a5e5 * 299.0000305175781, _0x88a5e5 * 146.53977966308594, _0x88a5e5 * 420.0000305175781, _0x88a5e5 * 225.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 400.0000305175781, _0x88a5e5 * 288.53977966308594, _0x88a5e5 * 400.0000305175781, _0x88a5e5 * 288.53977966308594, _0x88a5e5 * 380.0000305175781, _0x88a5e5 * 352.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 216.50003051757812, _0x88a5e5 * 345.53977966308594, _0x88a5e5 * 216.50003051757812, _0x88a5e5 * 345.53977966308594, _0x88a5e5 * 53.000030517578125, _0x88a5e5 * 339.03977966308594);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[3]);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 23.000030517578125, _0x88a5e5 * 306.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 5.000030517578125, _0x88a5e5 * 275.94886779785156, _0x88a5e5 * 6.000030517578125, _0x88a5e5 * 201.94886779785156, _0x88a5e5 * 14.000030517578125, _0x88a5e5 * 150.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 40.000030517578125, _0x88a5e5 * 34.94886779785156, _0x88a5e5 * 157.00003051757812, _0x88a5e5 * 14.948867797851562, _0x88a5e5 * 199.00003051757812, _0x88a5e5 * 11.948867797851562);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 331.0000305175781, _0x88a5e5 * 0.9488677978515625, _0x88a5e5 * 409.0000305175781, _0x88a5e5 * 61.94886779785156, _0x88a5e5 * 428.0000305175781, _0x88a5e5 * 133.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 445.0000305175781, _0x88a5e5 * 207.94886779785156, _0x88a5e5 * 439.0000305175781, _0x88a5e5 * 274.94886779785156, _0x88a5e5 * 426.0000305175781, _0x88a5e5 * 342.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 355.0000305175781, _0x88a5e5 * 207.94886779785156, _0x88a5e5 * 345.0000305175781, _0x88a5e5 * 208.94886779785156, _0x88a5e5 * 333.0000305175781, _0x88a5e5 * 202.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 262.0000305175781, _0x88a5e5 * 143.94886779785156, _0x88a5e5 * 236.00003051757812, _0x88a5e5 * 148.94886779785156, _0x88a5e5 * 189.00003051757812, _0x88a5e5 * 162.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 82.00003051757812, _0x88a5e5 * 190.94886779785156, _0x88a5e5 * 78.00003051757812, _0x88a5e5 * 235.94886779785156, _0x88a5e5 * 62.000030517578125, _0x88a5e5 * 279.94886779785156);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[0], _0x6710f0[1], _0x88a5e5 * 20);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 17.000030517578125, _0x88a5e5 * 149.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 76.00003051757812, _0x88a5e5 * 67.94886779785156, _0x88a5e5 * 177.00003051757812, _0x88a5e5 * 40.94886779785156, _0x88a5e5 * 232.00003051757812, _0x88a5e5 * 45.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 316.0000305175781, _0x88a5e5 * 46.94886779785156, _0x88a5e5 * 359.0000305175781, _0x88a5e5 * 74.94886779785156, _0x88a5e5 * 428.0000305175781, _0x88a5e5 * 145.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 414.0000305175781, _0x88a5e5 * 73.94886779785156, _0x88a5e5 * 386.0000305175781, _0x88a5e5 * 68.94886779785156, _0x88a5e5 * 359.0000305175781, _0x88a5e5 * 43.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 295.0000305175781, _0x88a5e5 * 5.9488677978515625, _0x88a5e5 * 239.00003051757812, _0x88a5e5 * 10.948867797851562, _0x88a5e5 * 207.00003051757812, _0x88a5e5 * 10.948867797851562);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 121.00003051757812, _0x88a5e5 * 20.948867797851562, _0x88a5e5 * 104.00003051757812, _0x88a5e5 * 34.94886779785156, _0x88a5e5 * 45.000030517578125, _0x88a5e5 * 84.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 14.000030517578125, _0x88a5e5 * 128.94886779785156, _0x88a5e5 * 18.000030517578125, _0x88a5e5 * 142.94886779785156, _0x88a5e5 * 16.000030517578125, _0x88a5e5 * 151.94886779785156);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[2]);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 23.000030517578125, _0x88a5e5 * 306.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 5.000030517578125, _0x88a5e5 * 275.94886779785156, _0x88a5e5 * 6.000030517578125, _0x88a5e5 * 201.94886779785156, _0x88a5e5 * 14.000030517578125, _0x88a5e5 * 150.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 40.000030517578125, _0x88a5e5 * 34.94886779785156, _0x88a5e5 * 157.00003051757812, _0x88a5e5 * 14.948867797851562, _0x88a5e5 * 199.00003051757812, _0x88a5e5 * 11.948867797851562);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 331.0000305175781, _0x88a5e5 * 0.9488677978515625, _0x88a5e5 * 409.0000305175781, _0x88a5e5 * 61.94886779785156, _0x88a5e5 * 428.0000305175781, _0x88a5e5 * 133.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 445.0000305175781, _0x88a5e5 * 207.94886779785156, _0x88a5e5 * 439.0000305175781, _0x88a5e5 * 274.94886779785156, _0x88a5e5 * 426.0000305175781, _0x88a5e5 * 342.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 355.0000305175781, _0x88a5e5 * 207.94886779785156, _0x88a5e5 * 345.0000305175781, _0x88a5e5 * 208.94886779785156, _0x88a5e5 * 333.0000305175781, _0x88a5e5 * 202.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 262.0000305175781, _0x88a5e5 * 143.94886779785156, _0x88a5e5 * 236.00003051757812, _0x88a5e5 * 148.94886779785156, _0x88a5e5 * 189.00003051757812, _0x88a5e5 * 162.94886779785156);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 82.00003051757812, _0x88a5e5 * 190.94886779785156, _0x88a5e5 * 78.00003051757812, _0x88a5e5 * 235.94886779785156, _0x88a5e5 * 62.000030517578125, _0x88a5e5 * 279.94886779785156);
  _0x50f704.closePath();
  fill_path(_0x50f704, undefined, _0x6710f0[1], _0x88a5e5 * 16);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 60.000030517578125, _0x88a5e5 * 288.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 183.00003051757812, _0x88a5e5 * 320.03977966308594, _0x88a5e5 * 342.0000305175781, _0x88a5e5 * 306.03977966308594, _0x88a5e5 * 399.0000305175781, _0x88a5e5 * 286.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 420.0000305175781, _0x88a5e5 * 345.03977966308594, _0x88a5e5 * 410.0000305175781, _0x88a5e5 * 335.03977966308594, _0x88a5e5 * 415.0000305175781, _0x88a5e5 * 362.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 351.0000305175781, _0x88a5e5 * 384.03977966308594, _0x88a5e5 * 299.0000305175781, _0x88a5e5 * 389.03977966308594, _0x88a5e5 * 215.00003051757812, _0x88a5e5 * 391.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 128.00003051757812, _0x88a5e5 * 388.03977966308594, _0x88a5e5 * 69.00003051757812, _0x88a5e5 * 373.03977966308594, _0x88a5e5 * 39.000030517578125, _0x88a5e5 * 359.03977966308594);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[0], _0x6710f0[1], _0x88a5e5 * 13);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 47.000030517578125, _0x88a5e5 * 327.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 203.00003051757812, _0x88a5e5 * 377.03977966308594, _0x88a5e5 * 331.0000305175781, _0x88a5e5 * 349.03977966308594, _0x88a5e5 * 410.0000305175781, _0x88a5e5 * 330.03977966308594);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[0], _0x6710f0[1], _0x88a5e5 * 20);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 9.000030517578125, _0x88a5e5 * 339.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 2.000030517578125, _0x88a5e5 * 280.1306915283203, _0x88a5e5 * 30.000030517578125, _0x88a5e5 * 219.1306915283203, _0x88a5e5 * 85.00003051757812, _0x88a5e5 * 167.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 174.00003051757812, _0x88a5e5 * 82.13069152832031, _0x88a5e5 * 241.00003051757812, _0x88a5e5 * 101.13069152832031, _0x88a5e5 * 284.0000305175781, _0x88a5e5 * 115.13069152832031);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 333.0000305175781, _0x88a5e5 * 134.1306915283203, _0x88a5e5 * 376.0000305175781, _0x88a5e5 * 177.1306915283203, _0x88a5e5 * 410.0000305175781, _0x88a5e5 * 247.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 439.0000305175781, _0x88a5e5 * 300.1306915283203, _0x88a5e5 * 442.0000305175781, _0x88a5e5 * 346.1306915283203, _0x88a5e5 * 430.0000305175781, _0x88a5e5 * 363.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 418.0000305175781, _0x88a5e5 * 366.1306915283203, _0x88a5e5 * 395.0000305175781, _0x88a5e5 * 295.1306915283203, _0x88a5e5 * 355.0000305175781, _0x88a5e5 * 223.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 299.0000305175781, _0x88a5e5 * 156.1306915283203, _0x88a5e5 * 262.0000305175781, _0x88a5e5 * 155.1306915283203, _0x88a5e5 * 215.00003051757812, _0x88a5e5 * 159.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 133.00003051757812, _0x88a5e5 * 171.1306915283203, _0x88a5e5 * 120.00003051757812, _0x88a5e5 * 193.1306915283203, _0x88a5e5 * 96.00003051757812, _0x88a5e5 * 221.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 49.000030517578125, _0x88a5e5 * 262.1306915283203, _0x88a5e5 * 47.000030517578125, _0x88a5e5 * 306.1306915283203, _0x88a5e5 * 38.000030517578125, _0x88a5e5 * 336.1306915283203);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 30.000030517578125, _0x88a5e5 * 349.1306915283203, _0x88a5e5 * 30.000030517578125, _0x88a5e5 * 349.1306915283203, _0x88a5e5 * 22.000030517578125, _0x88a5e5 * 362.1306915283203);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[2], _0x6710f0[1], _0x88a5e5 * 20);
  _0x50f704.beginPath();
  _0x50f704.lineCap = "round";
  _0x50f704.lineJoin = "round";
  _0x50f704.moveTo(_0x88a5e5 * 228.00003051757812, _0x88a5e5 * 128.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 315.0000305175781, _0x88a5e5 * 131.03977966308594, _0x88a5e5 * 349.0000305175781, _0x88a5e5 * 178.03977966308594, _0x88a5e5 * 386.0000305175781, _0x88a5e5 * 234.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 444.0000305175781, _0x88a5e5 * 329.03977966308594, _0x88a5e5 * 446.0000305175781, _0x88a5e5 * 354.03977966308594, _0x88a5e5 * 427.0000305175781, _0x88a5e5 * 373.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 389.0000305175781, _0x88a5e5 * 389.03977966308594, _0x88a5e5 * 399.0000305175781, _0x88a5e5 * 329.03977966308594, _0x88a5e5 * 361.0000305175781, _0x88a5e5 * 277.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 306.0000305175781, _0x88a5e5 * 191.03977966308594, _0x88a5e5 * 266.0000305175781, _0x88a5e5 * 183.03977966308594, _0x88a5e5 * 220.00003051757812, _0x88a5e5 * 181.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 138.00003051757812, _0x88a5e5 * 184.03977966308594, _0x88a5e5 * 123.00003051757812, _0x88a5e5 * 212.03977966308594, _0x88a5e5 * 89.00003051757812, _0x88a5e5 * 271.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 52.000030517578125, _0x88a5e5 * 349.03977966308594, _0x88a5e5 * 68.00003051757812, _0x88a5e5 * 364.03977966308594, _0x88a5e5 * 33.000030517578125, _0x88a5e5 * 369.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 6.000030517578125, _0x88a5e5 * 366.03977966308594, _0x88a5e5 * 5.000030517578125, _0x88a5e5 * 341.03977966308594, _0x88a5e5 * 26.000030517578125, _0x88a5e5 * 288.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 60.000030517578125, _0x88a5e5 * 207.03977966308594, _0x88a5e5 * 100.00003051757812, _0x88a5e5 * 180.03977966308594, _0x88a5e5 * 113.00003051757812, _0x88a5e5 * 170.03977966308594);
  _0x50f704.bezierCurveTo(_0x88a5e5 * 159.00003051757812, _0x88a5e5 * 132.03977966308594, _0x88a5e5 * 196.00003051757812, _0x88a5e5 * 133.03977966308594, _0x88a5e5 * 226.00003051757812, _0x88a5e5 * 129.03977966308594);
  _0x50f704.closePath();
  fill_path(_0x50f704, _0x6710f0[0], _0x6710f0[1], _0x88a5e5 * 20);
  return _0x13f480;
}
function create_peasant(_0x35f023, _0x8f3a6e, _0x56f7a6, _0x26cc8e) {
  var _0x3c28f3 = document.createElement("canvas");
  var _0x1416b5 = _0x3c28f3.getContext("2d");
  _0x3c28f3.width = _0x35f023 * 198;
  _0x3c28f3.height = _0x35f023 * 147;
  _0x1416b5.globalAlpha = _0x8f3a6e ? 0.5 : 1;
  _0x1416b5.translate(0, _0x35f023 * 6);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 44, _0x35f023 * 76);
  _0x1416b5.bezierCurveTo(_0x35f023 * 50, _0x35f023 * 82, _0x35f023 * 50, _0x35f023 * 82, _0x35f023 * 56, _0x35f023 * 88);
  _0x1416b5.bezierCurveTo(_0x35f023 * 59, _0x35f023 * 82, _0x35f023 * 59, _0x35f023 * 82, _0x35f023 * 62, _0x35f023 * 76);
  _0x1416b5.bezierCurveTo(_0x35f023 * 59, _0x35f023 * 71, _0x35f023 * 59, _0x35f023 * 71, _0x35f023 * 56, _0x35f023 * 66);
  _0x1416b5.bezierCurveTo(_0x35f023 * 59, _0x35f023 * 69, _0x35f023 * 59, _0x35f023 * 69, _0x35f023 * 62, _0x35f023 * 72);
  _0x1416b5.bezierCurveTo(_0x35f023 * 80, _0x35f023 * 48, _0x35f023 * 102, _0x35f023 * 50, _0x35f023 * 120, _0x35f023 * 62);
  _0x1416b5.bezierCurveTo(_0x35f023 * 127, _0x35f023 * 58, _0x35f023 * 127, _0x35f023 * 58, _0x35f023 * 134, _0x35f023 * 54);
  _0x1416b5.bezierCurveTo(_0x35f023 * 129, _0x35f023 * 60, _0x35f023 * 129, _0x35f023 * 60, _0x35f023 * 124, _0x35f023 * 66);
  _0x1416b5.bezierCurveTo(_0x35f023 * 129, _0x35f023 * 73, _0x35f023 * 129, _0x35f023 * 73, _0x35f023 * 134, _0x35f023 * 80);
  _0x1416b5.bezierCurveTo(_0x35f023 * 140, _0x35f023 * 74, _0x35f023 * 140, _0x35f023 * 74, _0x35f023 * 146, _0x35f023 * 68);
  _0x1416b5.bezierCurveTo(_0x35f023 * 142, _0x35f023 * 76, _0x35f023 * 142, _0x35f023 * 76, _0x35f023 * 138, _0x35f023 * 84);
  _0x1416b5.bezierCurveTo(_0x35f023 * 144, _0x35f023 * 90, _0x35f023 * 142, _0x35f023 * 90, _0x35f023 * 144, _0x35f023 * 90);
  _0x1416b5.bezierCurveTo(_0x35f023 * 136, _0x35f023 * 97, _0x35f023 * 136, _0x35f023 * 97, _0x35f023 * 128, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 154, _0x35f023 * 110, _0x35f023 * 164, _0x35f023 * 90, _0x35f023 * 160, _0x35f023 * 80);
  _0x1416b5.bezierCurveTo(_0x35f023 * 138, _0x35f023 * 22, _0x35f023 * 148, _0x35f023 * 51, _0x35f023 * 136, _0x35f023 * 22);
  _0x1416b5.bezierCurveTo(_0x35f023 * 97, _0x35f023 * 24, _0x35f023 * 97, _0x35f023 * 24, _0x35f023 * 58, _0x35f023 * 26);
  _0x1416b5.bezierCurveTo(_0x35f023 * 47, _0x35f023 * 54, _0x35f023 * 36, _0x35f023 * 80, _0x35f023 * 36, _0x35f023 * 82);
  _0x1416b5.bezierCurveTo(_0x35f023 * 40, _0x35f023 * 108, _0x35f023 * 54, _0x35f023 * 104, _0x35f023 * 62, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 46, _0x35f023 * 92, _0x35f023 * 54, _0x35f023 * 97, _0x35f023 * 46, _0x35f023 * 90);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[0]);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 36, _0x35f023 * 80);
  _0x1416b5.bezierCurveTo(_0x35f023 * 30, _0x35f023 * 84, _0x35f023 * 28, _0x35f023 * 92, _0x35f023 * 34, _0x35f023 * 100);
  _0x1416b5.bezierCurveTo(_0x35f023 * 41.5, _0x35f023 * 102, _0x35f023 * 41.5, _0x35f023 * 102, _0x35f023 * 49, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 43, _0x35f023 * 105.5, _0x35f023 * 43, _0x35f023 * 105.5, _0x35f023 * 37, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 46, _0x35f023 * 111, _0x35f023 * 60, _0x35f023 * 114, _0x35f023 * 76, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 78, _0x35f023 * 110.5, _0x35f023 * 78, _0x35f023 * 110.5, _0x35f023 * 80, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 81, _0x35f023 * 110.5, _0x35f023 * 81, _0x35f023 * 110.5, _0x35f023 * 82, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 94.5, _0x35f023 * 113.5, _0x35f023 * 94.5, _0x35f023 * 113.5, _0x35f023 * 107, _0x35f023 * 113);
  _0x1416b5.bezierCurveTo(_0x35f023 * 108.5, _0x35f023 * 110, _0x35f023 * 108.5, _0x35f023 * 110, _0x35f023 * 110, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 111.5, _0x35f023 * 110.5, _0x35f023 * 111.5, _0x35f023 * 110.5, _0x35f023 * 113, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 131, _0x35f023 * 112.5, _0x35f023 * 131, _0x35f023 * 112.5, _0x35f023 * 149, _0x35f023 * 111);
  _0x1416b5.bezierCurveTo(_0x35f023 * 148.5, _0x35f023 * 107.5, _0x35f023 * 148.5, _0x35f023 * 107.5, _0x35f023 * 148, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 150.5, _0x35f023 * 107, _0x35f023 * 150.5, _0x35f023 * 107, _0x35f023 * 153, _0x35f023 * 110);
  _0x1416b5.bezierCurveTo(_0x35f023 * 155.5, _0x35f023 * 108.5, _0x35f023 * 155.5, _0x35f023 * 108.5, _0x35f023 * 158, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 156.5, _0x35f023 * 104, _0x35f023 * 156.5, _0x35f023 * 104, _0x35f023 * 155, _0x35f023 * 101);
  _0x1416b5.bezierCurveTo(_0x35f023 * 158.5, _0x35f023 * 102.5, _0x35f023 * 158.5, _0x35f023 * 102.5, _0x35f023 * 162, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 168, _0x35f023 * 100, _0x35f023 * 170, _0x35f023 * 92, _0x35f023 * 169, _0x35f023 * 85);
  _0x1416b5.bezierCurveTo(_0x35f023 * 166, _0x35f023 * 86, _0x35f023 * 166, _0x35f023 * 86, _0x35f023 * 163, _0x35f023 * 87);
  _0x1416b5.bezierCurveTo(_0x35f023 * 165.5, _0x35f023 * 83, _0x35f023 * 165.5, _0x35f023 * 83, _0x35f023 * 168, _0x35f023 * 79);
  _0x1416b5.bezierCurveTo(_0x35f023 * 165.5, _0x35f023 * 76.5, _0x35f023 * 165.5, _0x35f023 * 76.5, _0x35f023 * 163, _0x35f023 * 74);
  _0x1416b5.bezierCurveTo(_0x35f023 * 155, _0x35f023 * 82.5, _0x35f023 * 155, _0x35f023 * 82.5, _0x35f023 * 147, _0x35f023 * 91);
  _0x1416b5.bezierCurveTo(_0x35f023 * 139, _0x35f023 * 95.5, _0x35f023 * 139, _0x35f023 * 95.5, _0x35f023 * 131, _0x35f023 * 100);
  _0x1416b5.bezierCurveTo(_0x35f023 * 97.5, _0x35f023 * 100.5, _0x35f023 * 97.5, _0x35f023 * 100.5, _0x35f023 * 64, _0x35f023 * 101);
  _0x1416b5.bezierCurveTo(_0x35f023 * 49, _0x35f023 * 102, _0x35f023 * 43, _0x35f023 * 90, _0x35f023 * 36, _0x35f023 * 80);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[0]);
  _0x1416b5.globalAlpha = 1;
  _0x1416b5.translate(0, _0x35f023 * -6);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 36, _0x35f023 * 80);
  _0x1416b5.bezierCurveTo(_0x35f023 * 30, _0x35f023 * 84, _0x35f023 * 28, _0x35f023 * 92, _0x35f023 * 34, _0x35f023 * 100);
  _0x1416b5.bezierCurveTo(_0x35f023 * 41.5, _0x35f023 * 102, _0x35f023 * 41.5, _0x35f023 * 102, _0x35f023 * 49, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 43, _0x35f023 * 105.5, _0x35f023 * 43, _0x35f023 * 105.5, _0x35f023 * 37, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 46, _0x35f023 * 111, _0x35f023 * 60, _0x35f023 * 114, _0x35f023 * 76, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 78, _0x35f023 * 110.5, _0x35f023 * 78, _0x35f023 * 110.5, _0x35f023 * 80, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 81, _0x35f023 * 110.5, _0x35f023 * 81, _0x35f023 * 110.5, _0x35f023 * 82, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 94.5, _0x35f023 * 113.5, _0x35f023 * 94.5, _0x35f023 * 113.5, _0x35f023 * 107, _0x35f023 * 113);
  _0x1416b5.bezierCurveTo(_0x35f023 * 108.5, _0x35f023 * 110, _0x35f023 * 108.5, _0x35f023 * 110, _0x35f023 * 110, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 111.5, _0x35f023 * 110.5, _0x35f023 * 111.5, _0x35f023 * 110.5, _0x35f023 * 113, _0x35f023 * 114);
  _0x1416b5.bezierCurveTo(_0x35f023 * 131, _0x35f023 * 112.5, _0x35f023 * 131, _0x35f023 * 112.5, _0x35f023 * 149, _0x35f023 * 111);
  _0x1416b5.bezierCurveTo(_0x35f023 * 148.5, _0x35f023 * 107.5, _0x35f023 * 148.5, _0x35f023 * 107.5, _0x35f023 * 148, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 150.5, _0x35f023 * 107, _0x35f023 * 150.5, _0x35f023 * 107, _0x35f023 * 153, _0x35f023 * 110);
  _0x1416b5.bezierCurveTo(_0x35f023 * 155.5, _0x35f023 * 108.5, _0x35f023 * 155.5, _0x35f023 * 108.5, _0x35f023 * 158, _0x35f023 * 107);
  _0x1416b5.bezierCurveTo(_0x35f023 * 156.5, _0x35f023 * 104, _0x35f023 * 156.5, _0x35f023 * 104, _0x35f023 * 155, _0x35f023 * 101);
  _0x1416b5.bezierCurveTo(_0x35f023 * 158.5, _0x35f023 * 102.5, _0x35f023 * 158.5, _0x35f023 * 102.5, _0x35f023 * 162, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 168, _0x35f023 * 100, _0x35f023 * 170, _0x35f023 * 92, _0x35f023 * 169, _0x35f023 * 85);
  _0x1416b5.bezierCurveTo(_0x35f023 * 166, _0x35f023 * 86, _0x35f023 * 166, _0x35f023 * 86, _0x35f023 * 163, _0x35f023 * 87);
  _0x1416b5.bezierCurveTo(_0x35f023 * 165.5, _0x35f023 * 83, _0x35f023 * 165.5, _0x35f023 * 83, _0x35f023 * 168, _0x35f023 * 79);
  _0x1416b5.bezierCurveTo(_0x35f023 * 165.5, _0x35f023 * 76.5, _0x35f023 * 165.5, _0x35f023 * 76.5, _0x35f023 * 163, _0x35f023 * 74);
  _0x1416b5.bezierCurveTo(_0x35f023 * 155, _0x35f023 * 82.5, _0x35f023 * 155, _0x35f023 * 82.5, _0x35f023 * 147, _0x35f023 * 91);
  _0x1416b5.bezierCurveTo(_0x35f023 * 139, _0x35f023 * 95.5, _0x35f023 * 139, _0x35f023 * 95.5, _0x35f023 * 131, _0x35f023 * 100);
  _0x1416b5.bezierCurveTo(_0x35f023 * 97.5, _0x35f023 * 100.5, _0x35f023 * 97.5, _0x35f023 * 100.5, _0x35f023 * 64, _0x35f023 * 101);
  _0x1416b5.bezierCurveTo(_0x35f023 * 49, _0x35f023 * 102, _0x35f023 * 43, _0x35f023 * 90, _0x35f023 * 36, _0x35f023 * 80);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[1], _0x56f7a6[2], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 49, _0x35f023 * 98);
  _0x1416b5.bezierCurveTo(_0x35f023 * 96.5, _0x35f023 * 98, _0x35f023 * 96.5, _0x35f023 * 98, _0x35f023 * 144, _0x35f023 * 98);
  _0x1416b5.bezierCurveTo(_0x35f023 * 136.5, _0x35f023 * 102, _0x35f023 * 136.5, _0x35f023 * 102, _0x35f023 * 129, _0x35f023 * 106);
  _0x1416b5.bezierCurveTo(_0x35f023 * 103, _0x35f023 * 105.5, _0x35f023 * 103, _0x35f023 * 105.5, _0x35f023 * 77, _0x35f023 * 105);
  _0x1416b5.bezierCurveTo(_0x35f023 * 65, _0x35f023 * 105, _0x35f023 * 65, _0x35f023 * 105, _0x35f023 * 53, _0x35f023 * 105);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[1]);
  _0x1416b5.globalAlpha = 0.5;
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 54, _0x35f023 * 98);
  _0x1416b5.bezierCurveTo(_0x35f023 * 97, _0x35f023 * 98, _0x35f023 * 97, _0x35f023 * 98, _0x35f023 * 140, _0x35f023 * 98);
  _0x1416b5.bezierCurveTo(_0x35f023 * 134, _0x35f023 * 101, _0x35f023 * 134, _0x35f023 * 101, _0x35f023 * 128, _0x35f023 * 104);
  _0x1416b5.bezierCurveTo(_0x35f023 * 92, _0x35f023 * 104, _0x35f023 * 92, _0x35f023 * 104, _0x35f023 * 56, _0x35f023 * 104);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[0]);
  _0x1416b5.globalAlpha = 1;
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 118, _0x35f023 * 47);
  _0x1416b5.bezierCurveTo(_0x35f023 * 124.5, _0x35f023 * 43.5, _0x35f023 * 124.5, _0x35f023 * 43.5, _0x35f023 * 131, _0x35f023 * 40);
  _0x1416b5.bezierCurveTo(_0x35f023 * 128, _0x35f023 * 46, _0x35f023 * 128, _0x35f023 * 46, _0x35f023 * 125, _0x35f023 * 52);
  _0x1416b5.bezierCurveTo(_0x35f023 * 131, _0x35f023 * 57, _0x35f023 * 135, _0x35f023 * 64, _0x35f023 * 139, _0x35f023 * 73);
  _0x1416b5.bezierCurveTo(_0x35f023 * 142.5, _0x35f023 * 69.5, _0x35f023 * 142.5, _0x35f023 * 69.5, _0x35f023 * 146, _0x35f023 * 66);
  _0x1416b5.bezierCurveTo(_0x35f023 * 143.5, _0x35f023 * 72.5, _0x35f023 * 143.5, _0x35f023 * 72.5, _0x35f023 * 141, _0x35f023 * 79);
  _0x1416b5.bezierCurveTo(_0x35f023 * 142, _0x35f023 * 91, _0x35f023 * 141, _0x35f023 * 94, _0x35f023 * 132, _0x35f023 * 98);
  _0x1416b5.bezierCurveTo(_0x35f023 * 117, _0x35f023 * 102, _0x35f023 * 126, _0x35f023 * 108, _0x35f023 * 142, _0x35f023 * 102);
  _0x1416b5.bezierCurveTo(_0x35f023 * 159, _0x35f023 * 98, _0x35f023 * 164, _0x35f023 * 80, _0x35f023 * 162, _0x35f023 * 47);
  _0x1416b5.bezierCurveTo(_0x35f023 * 160, _0x35f023 * 19, _0x35f023 * 150, _0x35f023 * 6, _0x35f023 * 117, _0x35f023 * 4);
  _0x1416b5.bezierCurveTo(_0x35f023 * 44, _0x35f023 * 0, _0x35f023 * 35, _0x35f023 * 20, _0x35f023 * 33, _0x35f023 * 37);
  _0x1416b5.bezierCurveTo(_0x35f023 * 29, _0x35f023 * 69, _0x35f023 * 33, _0x35f023 * 88, _0x35f023 * 44, _0x35f023 * 96);
  _0x1416b5.bezierCurveTo(_0x35f023 * 64, _0x35f023 * 107, _0x35f023 * 70, _0x35f023 * 102, _0x35f023 * 54, _0x35f023 * 93);
  _0x1416b5.bezierCurveTo(_0x35f023 * 49, _0x35f023 * 88, _0x35f023 * 50, _0x35f023 * 82, _0x35f023 * 53, _0x35f023 * 77);
  _0x1416b5.bezierCurveTo(_0x35f023 * 51.5, _0x35f023 * 71, _0x35f023 * 51.5, _0x35f023 * 71, _0x35f023 * 50, _0x35f023 * 65);
  _0x1416b5.bezierCurveTo(_0x35f023 * 53, _0x35f023 * 68.5, _0x35f023 * 53, _0x35f023 * 68.5, _0x35f023 * 56, _0x35f023 * 72);
  _0x1416b5.bezierCurveTo(_0x35f023 * 59, _0x35f023 * 67.5, _0x35f023 * 59, _0x35f023 * 67.5, _0x35f023 * 62, _0x35f023 * 63);
  _0x1416b5.bezierCurveTo(_0x35f023 * 60.5, _0x35f023 * 59.5, _0x35f023 * 60.5, _0x35f023 * 59.5, _0x35f023 * 59, _0x35f023 * 56);
  _0x1416b5.bezierCurveTo(_0x35f023 * 62, _0x35f023 * 57, _0x35f023 * 62, _0x35f023 * 57, _0x35f023 * 65, _0x35f023 * 58);
  _0x1416b5.bezierCurveTo(_0x35f023 * 78, _0x35f023 * 35, _0x35f023 * 103, _0x35f023 * 36, _0x35f023 * 117, _0x35f023 * 47);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[1], _0x56f7a6[2], _0x35f023 * 6);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 62, _0x35f023 * 21);
  _0x1416b5.bezierCurveTo(_0x35f023 * 63, _0x35f023 * 34, _0x35f023 * 64, _0x35f023 * 37, _0x35f023 * 66, _0x35f023 * 40);
  _0x1416b5.bezierCurveTo(_0x35f023 * 54, _0x35f023 * 49, _0x35f023 * 53, _0x35f023 * 51, _0x35f023 * 48, _0x35f023 * 58);
  _0x1416b5.bezierCurveTo(_0x35f023 * 44, _0x35f023 * 51, _0x35f023 * 42, _0x35f023 * 43, _0x35f023 * 40, _0x35f023 * 36);
  _0x1416b5.bezierCurveTo(_0x35f023 * 47, _0x35f023 * 28, _0x35f023 * 52, _0x35f023 * 25, _0x35f023 * 61, _0x35f023 * 21);
  _0x1416b5.closePath();
  fill_path(_0x1416b5, _0x56f7a6[4]);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 60, _0x35f023 * 29);
  _0x1416b5.bezierCurveTo(_0x35f023 * 62, _0x35f023 * 25, _0x35f023 * 65, _0x35f023 * 24, _0x35f023 * 70, _0x35f023 * 23);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 61, _0x35f023 * 37);
  _0x1416b5.bezierCurveTo(_0x35f023 * 63, _0x35f023 * 32, _0x35f023 * 66, _0x35f023 * 32, _0x35f023 * 71, _0x35f023 * 32);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 52, _0x35f023 * 31);
  _0x1416b5.bezierCurveTo(_0x35f023 * 50, _0x35f023 * 26, _0x35f023 * 50, _0x35f023 * 25, _0x35f023 * 51, _0x35f023 * 23);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 46, _0x35f023 * 35);
  _0x1416b5.bezierCurveTo(_0x35f023 * 44, _0x35f023 * 31, _0x35f023 * 43, _0x35f023 * 29, _0x35f023 * 45, _0x35f023 * 26);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 58, _0x35f023 * 44);
  _0x1416b5.bezierCurveTo(_0x35f023 * 57, _0x35f023 * 48, _0x35f023 * 57, _0x35f023 * 50, _0x35f023 * 60, _0x35f023 * 52);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 53, _0x35f023 * 48);
  _0x1416b5.bezierCurveTo(_0x35f023 * 52, _0x35f023 * 52, _0x35f023 * 52, _0x35f023 * 54, _0x35f023 * 55, _0x35f023 * 57);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 46, _0x35f023 * 41);
  _0x1416b5.bezierCurveTo(_0x35f023 * 41, _0x35f023 * 42, _0x35f023 * 39, _0x35f023 * 45, _0x35f023 * 38, _0x35f023 * 48);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  _0x1416b5.beginPath();
  _0x1416b5.lineCap = "round";
  _0x1416b5.lineJoin = "round";
  _0x1416b5.moveTo(_0x35f023 * 48, _0x35f023 * 48);
  _0x1416b5.bezierCurveTo(_0x35f023 * 42, _0x35f023 * 51, _0x35f023 * 42, _0x35f023 * 53, _0x35f023 * 40, _0x35f023 * 55);
  fill_path(_0x1416b5, undefined, _0x56f7a6[3], _0x35f023 * 4);
  if (_0x26cc8e == 0) {
    _0x1416b5.beginPath();
    _0x1416b5.lineCap = "round";
    _0x1416b5.lineJoin = "round";
    _0x1416b5.moveTo(_0x35f023 * 99, _0x35f023 * 101);
    _0x1416b5.bezierCurveTo(_0x35f023 * 118.6666259765625, _0x35f023 * 104.33331298828125, _0x35f023 * 124.6666259765625, _0x35f023 * 116.33331298828125, _0x35f023 * 112.6666259765625, _0x35f023 * 114.33331298828125);
    _0x1416b5.bezierCurveTo(_0x35f023 * 104.6666259765625, _0x35f023 * 112.33331298828125, _0x35f023 * 100.6666259765625, _0x35f023 * 105.33331298828125, _0x35f023 * 99.6666259765625, _0x35f023 * 101.33331298828125);
    fill_path(_0x1416b5, undefined, _0x56f7a6[5], _0x35f023 * 6);
    _0x1416b5.beginPath();
    _0x1416b5.lineCap = "round";
    _0x1416b5.lineJoin = "round";
    _0x1416b5.moveTo(_0x35f023 * 97.6666259765625, _0x35f023 * 101.33331298828125);
    _0x1416b5.bezierCurveTo(_0x35f023 * 81.6666259765625, _0x35f023 * 106.33331298828125, _0x35f023 * 79.6666259765625, _0x35f023 * 114.33331298828125, _0x35f023 * 89.6666259765625, _0x35f023 * 114.33331298828125);
    _0x1416b5.bezierCurveTo(_0x35f023 * 95.6666259765625, _0x35f023 * 111.33331298828125, _0x35f023 * 95.6666259765625, _0x35f023 * 109.33331298828125, _0x35f023 * 98.6666259765625, _0x35f023 * 102.33331298828125);
    fill_path(_0x1416b5, undefined, _0x56f7a6[5], _0x35f023 * 6);
  } else {
    _0x1416b5.beginPath();
    _0x1416b5.lineCap = "round";
    _0x1416b5.lineJoin = "round";
    _0x1416b5.moveTo(_0x35f023 * 103, _0x35f023 * 100.39999389648438);
    _0x1416b5.bezierCurveTo(_0x35f023 * 120, _0x35f023 * 106.39999389648438, _0x35f023 * 118, _0x35f023 * 107.39999389648438, _0x35f023 * 120, _0x35f023 * 111.39999389648438);
    fill_path(_0x1416b5, undefined, _0x56f7a6[5], _0x35f023 * 6);
    _0x1416b5.beginPath();
    _0x1416b5.lineCap = "round";
    _0x1416b5.lineJoin = "round";
    _0x1416b5.moveTo(_0x35f023 * 103, _0x35f023 * 100.39999389648438);
    _0x1416b5.bezierCurveTo(_0x35f023 * 90, _0x35f023 * 103.39999389648438, _0x35f023 * 89, _0x35f023 * 106.39999389648438, _0x35f023 * 87, _0x35f023 * 112.39999389648438);
    fill_path(_0x1416b5, undefined, _0x56f7a6[5], _0x35f023 * 6);
    circle(_0x1416b5, _0x35f023 * 86, _0x35f023 * 114.39999389648438, _0x35f023 * 4.5);
    fill_path(_0x1416b5, _0x56f7a6[1], _0x56f7a6[5], _0x35f023 * 6);
    circle(_0x1416b5, _0x35f023 * 121, _0x35f023 * 114.39999389648438, _0x35f023 * 4.5);
    fill_path(_0x1416b5, _0x56f7a6[1], _0x56f7a6[5], _0x35f023 * 6);
  }
  return _0x3c28f3;
}
function create_treasure_chest(_0x5541ad, _0x240864) {
  var _0x4a9cd2 = document.createElement("canvas");
  var _0x6a1670 = _0x4a9cd2.getContext("2d");
  _0x4a9cd2.width = _0x5541ad * 253;
  _0x4a9cd2.height = _0x5541ad * 192;
  _0x6a1670.globalAlpha = 0.5;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 42, _0x5541ad * 99);
  _0x6a1670.globalAlpha = 0.5;
  round_rect(_0x6a1670, _0x5541ad * -7, _0x5541ad * -20, _0x5541ad * 14, _0x5541ad * 39, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[0]);
  _0x6a1670.globalAlpha = 1;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 37, _0x5541ad * 94);
  round_rect(_0x6a1670, _0x5541ad * -7, _0x5541ad * -20, _0x5541ad * 14, _0x5541ad * 37, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[2]);
  _0x6a1670.globalAlpha = 0.5;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 136, _0x5541ad * 99);
  _0x6a1670.globalAlpha = 0.5;
  round_rect(_0x6a1670, _0x5541ad * -84, _0x5541ad * -67, _0x5541ad * 168, _0x5541ad * 134, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[0], _0x240864[0], _0x5541ad * 13);
  _0x6a1670.globalAlpha = 1;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 131, _0x5541ad * 94);
  round_rect(_0x6a1670, _0x5541ad * -84, _0x5541ad * -67, _0x5541ad * 168, _0x5541ad * 134, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[2], _0x240864[2], _0x5541ad * 13);
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 131, _0x5541ad * 94);
  round_rect(_0x6a1670, _0x5541ad * -76, _0x5541ad * -61, _0x5541ad * 152, _0x5541ad * 122, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[3], _0x240864[1], _0x5541ad * 8);
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 168.5, _0x5541ad * 93.5);
  round_rect(_0x6a1670, _0x5541ad * -30.5, _0x5541ad * -58.5, _0x5541ad * 61, _0x5541ad * 117, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[3], _0x240864[4], _0x5541ad * 6);
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 93.5, _0x5541ad * 95.5);
  round_rect(_0x6a1670, _0x5541ad * -32, _0x5541ad * -59.5, _0x5541ad * 59, _0x5541ad * 119, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[3], _0x240864[4], _0x5541ad * 6);
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 130.5, _0x5541ad * 94);
  round_rect(_0x6a1670, _0x5541ad * -36, _0x5541ad * -67, _0x5541ad * 73, _0x5541ad * 134, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[3], _0x240864[2], _0x5541ad * 8);
  _0x6a1670.globalAlpha = 0.5;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 133, _0x5541ad * 97);
  round_rect(_0x6a1670, _0x5541ad * -83, _0x5541ad * -12, _0x5541ad * 160, _0x5541ad * 24, _0x5541ad * 0);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[0]);
  _0x6a1670.globalAlpha = 1;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 133, _0x5541ad * 92);
  round_rect(_0x6a1670, _0x5541ad * -83, _0x5541ad * -12, _0x5541ad * 160, _0x5541ad * 24, _0x5541ad * 0);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[2]);
  _0x6a1670.globalAlpha = 0.5;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 228, _0x5541ad * 99.5);
  _0x6a1670.globalAlpha = 0.5;
  round_rect(_0x6a1670, _0x5541ad * -5, _0x5541ad * -18.5, _0x5541ad * 10, _0x5541ad * 37, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[0]);
  _0x6a1670.globalAlpha = 1;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 223, _0x5541ad * 94.5);
  round_rect(_0x6a1670, _0x5541ad * -5, _0x5541ad * -18.5, _0x5541ad * 10, _0x5541ad * 37, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[2]);
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 133.5, _0x5541ad * 175.5);
  _0x6a1670.globalAlpha = 0.5;
  round_rect(_0x6a1670, _0x5541ad * -22.5, _0x5541ad * -6.5, _0x5541ad * 45, _0x5541ad * 13, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[0]);
  _0x6a1670.globalAlpha = 1;
  _0x6a1670.save();
  _0x6a1670.translate(_0x5541ad * 128.5, _0x5541ad * 170.5);
  round_rect(_0x6a1670, _0x5541ad * -22.5, _0x5541ad * -6.5, _0x5541ad * 45, _0x5541ad * 13, _0x5541ad * 20);
  _0x6a1670.restore();
  fill_path(_0x6a1670, _0x240864[2]);
  return _0x4a9cd2;
}
function create_hurt_treasure_chest(_0x27f588, _0x5082f9) {
  var _0x54d244 = document.createElement("canvas");
  var _0x1fe603 = _0x54d244.getContext("2d");
  _0x54d244.width = _0x27f588 * 253;
  _0x54d244.height = _0x27f588 * 192;
  _0x1fe603.save();
  _0x1fe603.translate(_0x27f588 * 37, _0x27f588 * 94);
  round_rect(_0x1fe603, _0x27f588 * -7, _0x27f588 * -20, _0x27f588 * 14, _0x27f588 * 37, _0x27f588 * 20);
  _0x1fe603.restore();
  fill_path(_0x1fe603, _0x5082f9[0]);
  _0x1fe603.save();
  _0x1fe603.translate(_0x27f588 * 131, _0x27f588 * 94);
  round_rect(_0x1fe603, _0x27f588 * -84, _0x27f588 * -67, _0x27f588 * 168, _0x27f588 * 134, _0x27f588 * 20);
  _0x1fe603.restore();
  fill_path(_0x1fe603, _0x5082f9[0], _0x5082f9[0], _0x27f588 * 13);
  _0x1fe603.save();
  _0x1fe603.translate(_0x27f588 * 223, _0x27f588 * 94.5);
  round_rect(_0x1fe603, _0x27f588 * -5, _0x27f588 * -18.5, _0x27f588 * 10, _0x27f588 * 37, _0x27f588 * 20);
  _0x1fe603.restore();
  fill_path(_0x1fe603, _0x5082f9[0]);
  _0x1fe603.save();
  _0x1fe603.translate(_0x27f588 * 128.5, _0x27f588 * 170.5);
  round_rect(_0x1fe603, _0x27f588 * -22.5, _0x27f588 * -6.5, _0x27f588 * 45, _0x27f588 * 13, _0x27f588 * 20);
  _0x1fe603.restore();
  fill_path(_0x1fe603, _0x5082f9[0]);
  return _0x54d244;
}
function create_bottle(_0x4a6616, _0x4e0dbf, _0x2cdb44) {
  var _0x5597f5 = document.createElement("canvas");
  var _0x298279 = _0x5597f5.getContext("2d");
  _0x5597f5.width = _0x4a6616 * 316;
  _0x5597f5.height = _0x4a6616 * 365;
  _0x298279.save();
  _0x298279.translate(_0x4a6616 * 156.07142639160156, _0x4a6616 * 51.81248474121094);
  _0x298279.rotate(0);
  round_rect(_0x298279, _0x4a6616 * -21.5, _0x4a6616 * -34, _0x4a6616 * 43, _0x4a6616 * 68, _0x4a6616 * 8);
  _0x298279.restore();
  fill_path(_0x298279, _0x2cdb44[1], _0x2cdb44[2], _0x4a6616 * 15);
  _0x298279.beginPath();
  _0x298279.lineCap = "round";
  _0x298279.lineJoin = "round";
  _0x298279.moveTo(_0x4a6616 * 110.57142639160156, _0x4a6616 * 197.09820556640625);
  _0x298279.bezierCurveTo(_0x4a6616 * 158.07142639160156, _0x4a6616 * 179.09820556640625, _0x4a6616 * 158.07142639160156, _0x4a6616 * 179.09820556640625, _0x4a6616 * 205.57142639160156, _0x4a6616 * 161.09820556640625);
  _0x298279.bezierCurveTo(_0x4a6616 * 205.57142639160156, _0x4a6616 * 235.45535278320312, _0x4a6616 * 205.57142639160156, _0x4a6616 * 235.45535278320312, _0x4a6616 * 205.57142639160156, _0x4a6616 * 309.8125);
  _0x298279.bezierCurveTo(_0x4a6616 * 205.57142639160156, _0x4a6616 * 323.8125, _0x4a6616 * 200.57142639160156, _0x4a6616 * 325.8125, _0x4a6616 * 187.57142639160156, _0x4a6616 * 326.8125);
  _0x298279.bezierCurveTo(_0x4a6616 * 155.57142639160156, _0x4a6616 * 326.3125, _0x4a6616 * 155.57142639160156, _0x4a6616 * 326.3125, _0x4a6616 * 123.57142639160156, _0x4a6616 * 325.8125);
  _0x298279.bezierCurveTo(_0x4a6616 * 111.57142639160156, _0x4a6616 * 326.8125, _0x4a6616 * 109.57142639160156, _0x4a6616 * 321.8125, _0x4a6616 * 110.57142639160156, _0x4a6616 * 312.8125);
  _0x298279.closePath();
  fill_path(_0x298279, _0x2cdb44[3], _0x2cdb44[4], _0x4a6616 * 15);
  _0x298279.beginPath();
  _0x298279.lineCap = "round";
  _0x298279.lineJoin = "round";
  _0x298279.moveTo(_0x4a6616 * 126.57142639160156, _0x4a6616 * 67.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 126.57142639160156, _0x4a6616 * 57.38392639160156, _0x4a6616 * 132.57142639160156, _0x4a6616 * 54.38392639160156, _0x4a6616 * 140.57142639160156, _0x4a6616 * 54.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 177.57142639160156, _0x4a6616 * 55.38392639160156, _0x4a6616 * 158.07142639160156, _0x4a6616 * 54.38392639160156, _0x4a6616 * 175.57142639160156, _0x4a6616 * 54.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 185.57142639160156, _0x4a6616 * 56.38392639160156, _0x4a6616 * 185.57142639160156, _0x4a6616 * 57.38392639160156, _0x4a6616 * 184.57142639160156, _0x4a6616 * 66.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 184.57142639160156, _0x4a6616 * 78.38392639160156, _0x4a6616 * 184.57142639160156, _0x4a6616 * 89.38392639160156, _0x4a6616 * 184.57142639160156, _0x4a6616 * 90.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 177.57142639160156, _0x4a6616 * 107.38392639160156, _0x4a6616 * 180.57142639160156, _0x4a6616 * 112.38392639160156, _0x4a6616 * 189.57142639160156, _0x4a6616 * 116.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 212.57142639160156, _0x4a6616 * 127.38392639160156, _0x4a6616 * 212.57142639160156, _0x4a6616 * 132.38392639160156, _0x4a6616 * 211.57142639160156, _0x4a6616 * 150.38392639160156);
  _0x298279.bezierCurveTo(_0x4a6616 * 211.57142639160156, _0x4a6616 * 227.59821128845215, _0x4a6616 * 211.57142639160156, _0x4a6616 * 227.59821128845215, _0x4a6616 * 211.57142639160156, _0x4a6616 * 304.81249618530273);
  _0x298279.bezierCurveTo(_0x4a6616 * 212.57142639160156, _0x4a6616 * 328.81249618530273, _0x4a6616 * 209.57142639160156, _0x4a6616 * 330.81249618530273, _0x4a6616 * 188.57142639160156, _0x4a6616 * 333.81249618530273);
  _0x298279.bezierCurveTo(_0x4a6616 * 155.07142639160156, _0x4a6616 * 333.31249618530273, _0x4a6616 * 155.07142639160156, _0x4a6616 * 333.31249618530273, _0x4a6616 * 121.57142639160156, _0x4a6616 * 332.81249618530273);
  _0x298279.bezierCurveTo(_0x4a6616 * 104.57142639160156, _0x4a6616 * 327.81249618530273, _0x4a6616 * 105.57142639160156, _0x4a6616 * 328.81249618530273, _0x4a6616 * 104.57142639160156, _0x4a6616 * 312.81249618530273);
  _0x298279.bezierCurveTo(_0x4a6616 * 104.57142639160156, _0x4a6616 * 228.16963958740234, _0x4a6616 * 104.57142639160156, _0x4a6616 * 228.16963958740234, _0x4a6616 * 104.57142639160156, _0x4a6616 * 143.52678298950195);
  _0x298279.bezierCurveTo(_0x4a6616 * 106.57142639160156, _0x4a6616 * 124.52678298950195, _0x4a6616 * 110.57142639160156, _0x4a6616 * 123.52678298950195, _0x4a6616 * 123.57142639160156, _0x4a6616 * 116.52678298950195);
  _0x298279.bezierCurveTo(_0x4a6616 * 136.57142639160156, _0x4a6616 * 110.52678298950195, _0x4a6616 * 130.57142639160156, _0x4a6616 * 106.52678298950195, _0x4a6616 * 126.57142639160156, _0x4a6616 * 98.52678298950195);
  _0x298279.closePath();
  fill_path(_0x298279, undefined, _0x2cdb44[5], _0x4a6616 * 15);
  _0x298279.beginPath();
  _0x298279.lineCap = "round";
  _0x298279.lineJoin = "round";
  _0x298279.moveTo(_0x4a6616 * 125.57142639160156, _0x4a6616 * 156.66963958740234);
  _0x298279.bezierCurveTo(_0x4a6616 * 125.57142639160156, _0x4a6616 * 182.66963958740234, _0x4a6616 * 125.57142639160156, _0x4a6616 * 182.66963958740234, _0x4a6616 * 125.57142639160156, _0x4a6616 * 208.66963958740234);
  _0x298279.closePath();
  fill_path(_0x298279, undefined, _0x2cdb44[6], _0x4a6616 * 15);
  return _0x5597f5;
}
function create_bottle_full(_0x330732, _0x519bea, _0x3efa91) {
  var _0x57b818 = document.createElement("canvas");
  var _0x5c254b = _0x57b818.getContext("2d");
  _0x57b818.width = _0x330732 * 316;
  _0x57b818.height = _0x330732 * 365;
  _0x5c254b.save();
  _0x5c254b.translate(_0x330732 * 156.07142639160156, _0x330732 * 51.81248474121094);
  _0x5c254b.rotate(0);
  round_rect(_0x5c254b, _0x330732 * -21.5, _0x330732 * -34, _0x330732 * 43, _0x330732 * 68, _0x330732 * 8);
  _0x5c254b.restore();
  fill_path(_0x5c254b, _0x3efa91[1], _0x3efa91[2], _0x330732 * 15);
  _0x5c254b.beginPath();
  _0x5c254b.lineCap = "round";
  _0x5c254b.lineJoin = "round";
  _0x5c254b.moveTo(_0x330732 * 126.57142639160156, _0x330732 * 67.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 126.57142639160156, _0x330732 * 57.38392639160156, _0x330732 * 132.57142639160156, _0x330732 * 54.38392639160156, _0x330732 * 140.57142639160156, _0x330732 * 54.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 177.57142639160156, _0x330732 * 55.38392639160156, _0x330732 * 158.07142639160156, _0x330732 * 54.38392639160156, _0x330732 * 175.57142639160156, _0x330732 * 54.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 185.57142639160156, _0x330732 * 56.38392639160156, _0x330732 * 185.57142639160156, _0x330732 * 57.38392639160156, _0x330732 * 184.57142639160156, _0x330732 * 66.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 184.57142639160156, _0x330732 * 78.38392639160156, _0x330732 * 184.57142639160156, _0x330732 * 89.38392639160156, _0x330732 * 184.57142639160156, _0x330732 * 90.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 177.57142639160156, _0x330732 * 107.38392639160156, _0x330732 * 180.57142639160156, _0x330732 * 112.38392639160156, _0x330732 * 189.57142639160156, _0x330732 * 116.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 212.57142639160156, _0x330732 * 127.38392639160156, _0x330732 * 212.57142639160156, _0x330732 * 132.38392639160156, _0x330732 * 211.57142639160156, _0x330732 * 150.38392639160156);
  _0x5c254b.bezierCurveTo(_0x330732 * 211.57142639160156, _0x330732 * 227.59821128845215, _0x330732 * 211.57142639160156, _0x330732 * 227.59821128845215, _0x330732 * 211.57142639160156, _0x330732 * 304.81249618530273);
  _0x5c254b.bezierCurveTo(_0x330732 * 212.57142639160156, _0x330732 * 328.81249618530273, _0x330732 * 209.57142639160156, _0x330732 * 330.81249618530273, _0x330732 * 188.57142639160156, _0x330732 * 333.81249618530273);
  _0x5c254b.bezierCurveTo(_0x330732 * 155.07142639160156, _0x330732 * 333.31249618530273, _0x330732 * 155.07142639160156, _0x330732 * 333.31249618530273, _0x330732 * 121.57142639160156, _0x330732 * 332.81249618530273);
  _0x5c254b.bezierCurveTo(_0x330732 * 104.57142639160156, _0x330732 * 327.81249618530273, _0x330732 * 105.57142639160156, _0x330732 * 328.81249618530273, _0x330732 * 104.57142639160156, _0x330732 * 312.81249618530273);
  _0x5c254b.bezierCurveTo(_0x330732 * 104.57142639160156, _0x330732 * 228.16963958740234, _0x330732 * 104.57142639160156, _0x330732 * 228.16963958740234, _0x330732 * 104.57142639160156, _0x330732 * 143.52678298950195);
  _0x5c254b.bezierCurveTo(_0x330732 * 106.57142639160156, _0x330732 * 124.52678298950195, _0x330732 * 110.57142639160156, _0x330732 * 123.52678298950195, _0x330732 * 123.57142639160156, _0x330732 * 116.52678298950195);
  _0x5c254b.bezierCurveTo(_0x330732 * 136.57142639160156, _0x330732 * 110.52678298950195, _0x330732 * 130.57142639160156, _0x330732 * 106.52678298950195, _0x330732 * 126.57142639160156, _0x330732 * 98.52678298950195);
  _0x5c254b.closePath();
  fill_path(_0x5c254b, undefined, _0x3efa91[5], _0x330732 * 15);
  _0x5c254b.beginPath();
  _0x5c254b.lineCap = "round";
  _0x5c254b.lineJoin = "round";
  _0x5c254b.moveTo(_0x330732 * 125.57142639160156, _0x330732 * 156.66963958740234);
  _0x5c254b.bezierCurveTo(_0x330732 * 125.57142639160156, _0x330732 * 182.66963958740234, _0x330732 * 125.57142639160156, _0x330732 * 182.66963958740234, _0x330732 * 125.57142639160156, _0x330732 * 208.66963958740234);
  _0x5c254b.closePath();
  fill_path(_0x5c254b, undefined, _0x3efa91[6], _0x330732 * 15);
  return _0x57b818;
}
function create_drink_delay(_0x2dbf7a, _0x304129) {
  var _0x531fde = document.createElement("canvas");
  var _0x3264f2 = _0x531fde.getContext("2d");
  _0x531fde.width = _0x2dbf7a * 316;
  _0x531fde.height = _0x2dbf7a * 365;
  _0x3264f2.save();
  _0x3264f2.translate(_0x2dbf7a * 156.07142639160156, _0x2dbf7a * 51.81248474121094);
  _0x3264f2.rotate(0);
  round_rect(_0x3264f2, _0x2dbf7a * -21.5, _0x2dbf7a * -34, _0x2dbf7a * 43, _0x2dbf7a * 68, _0x2dbf7a * 8);
  _0x3264f2.restore();
  fill_path(_0x3264f2, _0x304129[0], _0x304129[0], _0x2dbf7a * 15);
  _0x3264f2.beginPath();
  _0x3264f2.lineCap = "round";
  _0x3264f2.lineJoin = "round";
  _0x3264f2.moveTo(_0x2dbf7a * 126.57142639160156, _0x2dbf7a * 67.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 126.57142639160156, _0x2dbf7a * 57.38392639160156, _0x2dbf7a * 132.57142639160156, _0x2dbf7a * 54.38392639160156, _0x2dbf7a * 140.57142639160156, _0x2dbf7a * 54.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 177.57142639160156, _0x2dbf7a * 55.38392639160156, _0x2dbf7a * 158.07142639160156, _0x2dbf7a * 54.38392639160156, _0x2dbf7a * 175.57142639160156, _0x2dbf7a * 54.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 185.57142639160156, _0x2dbf7a * 56.38392639160156, _0x2dbf7a * 185.57142639160156, _0x2dbf7a * 57.38392639160156, _0x2dbf7a * 184.57142639160156, _0x2dbf7a * 66.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 184.57142639160156, _0x2dbf7a * 78.38392639160156, _0x2dbf7a * 184.57142639160156, _0x2dbf7a * 89.38392639160156, _0x2dbf7a * 184.57142639160156, _0x2dbf7a * 90.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 177.57142639160156, _0x2dbf7a * 107.38392639160156, _0x2dbf7a * 180.57142639160156, _0x2dbf7a * 112.38392639160156, _0x2dbf7a * 189.57142639160156, _0x2dbf7a * 116.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 212.57142639160156, _0x2dbf7a * 127.38392639160156, _0x2dbf7a * 212.57142639160156, _0x2dbf7a * 132.38392639160156, _0x2dbf7a * 211.57142639160156, _0x2dbf7a * 150.38392639160156);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 211.57142639160156, _0x2dbf7a * 227.59821128845215, _0x2dbf7a * 211.57142639160156, _0x2dbf7a * 227.59821128845215, _0x2dbf7a * 211.57142639160156, _0x2dbf7a * 304.81249618530273);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 212.57142639160156, _0x2dbf7a * 328.81249618530273, _0x2dbf7a * 209.57142639160156, _0x2dbf7a * 330.81249618530273, _0x2dbf7a * 188.57142639160156, _0x2dbf7a * 333.81249618530273);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 155.07142639160156, _0x2dbf7a * 333.31249618530273, _0x2dbf7a * 155.07142639160156, _0x2dbf7a * 333.31249618530273, _0x2dbf7a * 121.57142639160156, _0x2dbf7a * 332.81249618530273);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 104.57142639160156, _0x2dbf7a * 327.81249618530273, _0x2dbf7a * 105.57142639160156, _0x2dbf7a * 328.81249618530273, _0x2dbf7a * 104.57142639160156, _0x2dbf7a * 312.81249618530273);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 104.57142639160156, _0x2dbf7a * 228.16963958740234, _0x2dbf7a * 104.57142639160156, _0x2dbf7a * 228.16963958740234, _0x2dbf7a * 104.57142639160156, _0x2dbf7a * 143.52678298950195);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 106.57142639160156, _0x2dbf7a * 124.52678298950195, _0x2dbf7a * 110.57142639160156, _0x2dbf7a * 123.52678298950195, _0x2dbf7a * 123.57142639160156, _0x2dbf7a * 116.52678298950195);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 136.57142639160156, _0x2dbf7a * 110.52678298950195, _0x2dbf7a * 130.57142639160156, _0x2dbf7a * 106.52678298950195, _0x2dbf7a * 126.57142639160156, _0x2dbf7a * 98.52678298950195);
  _0x3264f2.closePath();
  fill_path(_0x3264f2, _0x304129[0], _0x304129[0], _0x2dbf7a * 15);
  _0x3264f2.beginPath();
  _0x3264f2.lineCap = "round";
  _0x3264f2.lineJoin = "round";
  _0x3264f2.moveTo(_0x2dbf7a * 125.57142639160156, _0x2dbf7a * 156.66963958740234);
  _0x3264f2.bezierCurveTo(_0x2dbf7a * 125.57142639160156, _0x2dbf7a * 182.66963958740234, _0x2dbf7a * 125.57142639160156, _0x2dbf7a * 182.66963958740234, _0x2dbf7a * 125.57142639160156, _0x2dbf7a * 208.66963958740234);
  _0x3264f2.closePath();
  fill_path(_0x3264f2, _0x304129[0], _0x304129[0], _0x2dbf7a * 15);
  return _0x531fde;
}
function create_bucket_empty(_0xc44ccf, _0x282ddc, _0x4d6af0) {
  var _0x3c0a65 = document.createElement("canvas");
  var _0x2bfab6 = _0x3c0a65.getContext("2d");
  _0x3c0a65.width = _0xc44ccf * 400;
  _0x3c0a65.height = _0xc44ccf * 400;
  _0x2bfab6.translate(0, _0xc44ccf * 15);
  _0x2bfab6.globalAlpha = _0x282ddc ? 0.5 : 1;
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 102, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 108, _0xc44ccf * 216.5, _0xc44ccf * 108, _0xc44ccf * 216.5, _0xc44ccf * 114, _0xc44ccf * 279);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 124, _0xc44ccf * 300, _0xc44ccf * 237, _0xc44ccf * 299, _0xc44ccf * 251, _0xc44ccf * 279);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 257, _0xc44ccf * 217, _0xc44ccf * 257, _0xc44ccf * 217, _0xc44ccf * 263, _0xc44ccf * 155);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 248, _0xc44ccf * 194, _0xc44ccf * 91, _0xc44ccf * 180, _0xc44ccf * 103, _0xc44ccf * 156);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[0]);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 102, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 106, _0xc44ccf * 53, _0xc44ccf * 255, _0xc44ccf * 53, _0xc44ccf * 263, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 248, _0xc44ccf * 38, _0xc44ccf * 99, _0xc44ccf * 69, _0xc44ccf * 103, _0xc44ccf * 154);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, undefined, _0x4d6af0[0], _0xc44ccf * 11);
  _0x2bfab6.translate(0, _0xc44ccf * -5);
  _0x2bfab6.globalAlpha = 1;
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 103, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 98, _0xc44ccf * 119, _0xc44ccf * 264, _0xc44ccf * 119, _0xc44ccf * 264, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 271, _0xc44ccf * 189, _0xc44ccf * 94, _0xc44ccf * 188, _0xc44ccf * 103, _0xc44ccf * 154);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[3], _0x4d6af0[2], _0xc44ccf * 12);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 102, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 108, _0xc44ccf * 216.5, _0xc44ccf * 108, _0xc44ccf * 216.5, _0xc44ccf * 114, _0xc44ccf * 279);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 124, _0xc44ccf * 300, _0xc44ccf * 237, _0xc44ccf * 299, _0xc44ccf * 251, _0xc44ccf * 279);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 257, _0xc44ccf * 217, _0xc44ccf * 257, _0xc44ccf * 217, _0xc44ccf * 263, _0xc44ccf * 155);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 248, _0xc44ccf * 194, _0xc44ccf * 91, _0xc44ccf * 180, _0xc44ccf * 103, _0xc44ccf * 156);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[1], _0x4d6af0[2], _0xc44ccf * 12);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 182, _0xc44ccf * 185);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 182.5, _0xc44ccf * 237.5, _0xc44ccf * 182.5, _0xc44ccf * 237.5, _0xc44ccf * 183, _0xc44ccf * 290);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, undefined, _0x4d6af0[2], _0xc44ccf * 12);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 222, _0xc44ccf * 287);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 226, _0xc44ccf * 233.5, _0xc44ccf * 226, _0xc44ccf * 233.5, _0xc44ccf * 230, _0xc44ccf * 180);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, undefined, _0x4d6af0[2], _0xc44ccf * 12);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 145, _0xc44ccf * 290);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 140.5, _0xc44ccf * 237, _0xc44ccf * 140.5, _0xc44ccf * 237, _0xc44ccf * 136, _0xc44ccf * 184);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[1], _0x4d6af0[2], _0xc44ccf * 11);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 105, _0xc44ccf * 184);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 148, _0xc44ccf * 205, _0xc44ccf * 231, _0xc44ccf * 202, _0xc44ccf * 260, _0xc44ccf * 182);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 259, _0xc44ccf * 195.5, _0xc44ccf * 259, _0xc44ccf * 195.5, _0xc44ccf * 258, _0xc44ccf * 209);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 217, _0xc44ccf * 218, _0xc44ccf * 163, _0xc44ccf * 225, _0xc44ccf * 108, _0xc44ccf * 207);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[4], _0x4d6af0[2], _0xc44ccf * 11);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 251, _0xc44ccf * 276);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 251.5, _0xc44ccf * 267.5, _0xc44ccf * 251.5, _0xc44ccf * 267.5, _0xc44ccf * 252, _0xc44ccf * 259);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 212, _0xc44ccf * 272, _0xc44ccf * 156, _0xc44ccf * 275, _0xc44ccf * 112, _0xc44ccf * 260);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 112.5, _0xc44ccf * 269, _0xc44ccf * 112.5, _0xc44ccf * 269, _0xc44ccf * 113, _0xc44ccf * 278);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 155, _0xc44ccf * 306, _0xc44ccf * 253, _0xc44ccf * 286, _0xc44ccf * 250, _0xc44ccf * 276);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, _0x4d6af0[4], _0x4d6af0[2], _0xc44ccf * 11);
  _0x2bfab6.beginPath();
  _0x2bfab6.lineCap = "round";
  _0x2bfab6.lineJoin = "round";
  _0x2bfab6.moveTo(_0xc44ccf * 102, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 106, _0xc44ccf * 53, _0xc44ccf * 255, _0xc44ccf * 53, _0xc44ccf * 263, _0xc44ccf * 154);
  _0x2bfab6.bezierCurveTo(_0xc44ccf * 248, _0xc44ccf * 38, _0xc44ccf * 99, _0xc44ccf * 69, _0xc44ccf * 103, _0xc44ccf * 154);
  _0x2bfab6.closePath();
  fill_path(_0x2bfab6, undefined, _0x4d6af0[2], _0xc44ccf * 11);
  return _0x3c0a65;
}
function create_bucket_full(_0x1ed34e, _0x529891, _0x499749) {
  var _0x5658d9 = document.createElement("canvas");
  var _0x27885e = _0x5658d9.getContext("2d");
  _0x5658d9.width = _0x1ed34e * 400;
  _0x5658d9.height = _0x1ed34e * 400;
  _0x27885e.translate(0, _0x1ed34e * 15);
  _0x27885e.globalAlpha = _0x529891 ? 0.5 : 1;
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 102, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 108, _0x1ed34e * 216.5, _0x1ed34e * 108, _0x1ed34e * 216.5, _0x1ed34e * 114, _0x1ed34e * 279);
  _0x27885e.bezierCurveTo(_0x1ed34e * 124, _0x1ed34e * 300, _0x1ed34e * 237, _0x1ed34e * 299, _0x1ed34e * 251, _0x1ed34e * 279);
  _0x27885e.bezierCurveTo(_0x1ed34e * 257, _0x1ed34e * 217, _0x1ed34e * 257, _0x1ed34e * 217, _0x1ed34e * 263, _0x1ed34e * 155);
  _0x27885e.bezierCurveTo(_0x1ed34e * 248, _0x1ed34e * 194, _0x1ed34e * 91, _0x1ed34e * 180, _0x1ed34e * 103, _0x1ed34e * 156);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[0]);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 102, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 106, _0x1ed34e * 53, _0x1ed34e * 255, _0x1ed34e * 53, _0x1ed34e * 263, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 248, _0x1ed34e * 38, _0x1ed34e * 99, _0x1ed34e * 69, _0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.closePath();
  fill_path(_0x27885e, undefined, _0x499749[0], _0x1ed34e * 11);
  _0x27885e.translate(0, _0x1ed34e * -5);
  _0x27885e.globalAlpha = 1;
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 98, _0x1ed34e * 119, _0x1ed34e * 264, _0x1ed34e * 119, _0x1ed34e * 264, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 271, _0x1ed34e * 189, _0x1ed34e * 94, _0x1ed34e * 188, _0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[3], _0x499749[2], _0x1ed34e * 12);
  _0x27885e.translate(0, _0x1ed34e * 25);
  _0x27885e.globalAlpha = 1;
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 98, _0x1ed34e * 119, _0x1ed34e * 264, _0x1ed34e * 119, _0x1ed34e * 264, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 271, _0x1ed34e * 189, _0x1ed34e * 94, _0x1ed34e * 188, _0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[5]);
  _0x27885e.translate(0, _0x1ed34e * -25);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 102, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 108, _0x1ed34e * 216.5, _0x1ed34e * 108, _0x1ed34e * 216.5, _0x1ed34e * 114, _0x1ed34e * 279);
  _0x27885e.bezierCurveTo(_0x1ed34e * 124, _0x1ed34e * 300, _0x1ed34e * 237, _0x1ed34e * 299, _0x1ed34e * 251, _0x1ed34e * 279);
  _0x27885e.bezierCurveTo(_0x1ed34e * 257, _0x1ed34e * 217, _0x1ed34e * 257, _0x1ed34e * 217, _0x1ed34e * 263, _0x1ed34e * 155);
  _0x27885e.bezierCurveTo(_0x1ed34e * 248, _0x1ed34e * 194, _0x1ed34e * 91, _0x1ed34e * 180, _0x1ed34e * 103, _0x1ed34e * 156);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[1], _0x499749[2], _0x1ed34e * 12);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 182, _0x1ed34e * 185);
  _0x27885e.bezierCurveTo(_0x1ed34e * 182.5, _0x1ed34e * 237.5, _0x1ed34e * 182.5, _0x1ed34e * 237.5, _0x1ed34e * 183, _0x1ed34e * 290);
  _0x27885e.closePath();
  fill_path(_0x27885e, undefined, _0x499749[2], _0x1ed34e * 12);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 222, _0x1ed34e * 287);
  _0x27885e.bezierCurveTo(_0x1ed34e * 226, _0x1ed34e * 233.5, _0x1ed34e * 226, _0x1ed34e * 233.5, _0x1ed34e * 230, _0x1ed34e * 180);
  _0x27885e.closePath();
  fill_path(_0x27885e, undefined, _0x499749[2], _0x1ed34e * 12);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 145, _0x1ed34e * 290);
  _0x27885e.bezierCurveTo(_0x1ed34e * 140.5, _0x1ed34e * 237, _0x1ed34e * 140.5, _0x1ed34e * 237, _0x1ed34e * 136, _0x1ed34e * 184);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[1], _0x499749[2], _0x1ed34e * 11);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 105, _0x1ed34e * 184);
  _0x27885e.bezierCurveTo(_0x1ed34e * 148, _0x1ed34e * 205, _0x1ed34e * 231, _0x1ed34e * 202, _0x1ed34e * 260, _0x1ed34e * 182);
  _0x27885e.bezierCurveTo(_0x1ed34e * 259, _0x1ed34e * 195.5, _0x1ed34e * 259, _0x1ed34e * 195.5, _0x1ed34e * 258, _0x1ed34e * 209);
  _0x27885e.bezierCurveTo(_0x1ed34e * 217, _0x1ed34e * 218, _0x1ed34e * 163, _0x1ed34e * 225, _0x1ed34e * 108, _0x1ed34e * 207);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[4], _0x499749[2], _0x1ed34e * 11);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 251, _0x1ed34e * 276);
  _0x27885e.bezierCurveTo(_0x1ed34e * 251.5, _0x1ed34e * 267.5, _0x1ed34e * 251.5, _0x1ed34e * 267.5, _0x1ed34e * 252, _0x1ed34e * 259);
  _0x27885e.bezierCurveTo(_0x1ed34e * 212, _0x1ed34e * 272, _0x1ed34e * 156, _0x1ed34e * 275, _0x1ed34e * 112, _0x1ed34e * 260);
  _0x27885e.bezierCurveTo(_0x1ed34e * 112.5, _0x1ed34e * 269, _0x1ed34e * 112.5, _0x1ed34e * 269, _0x1ed34e * 113, _0x1ed34e * 278);
  _0x27885e.bezierCurveTo(_0x1ed34e * 155, _0x1ed34e * 306, _0x1ed34e * 253, _0x1ed34e * 286, _0x1ed34e * 250, _0x1ed34e * 276);
  _0x27885e.closePath();
  fill_path(_0x27885e, _0x499749[4], _0x499749[2], _0x1ed34e * 11);
  _0x27885e.beginPath();
  _0x27885e.lineCap = "round";
  _0x27885e.lineJoin = "round";
  _0x27885e.moveTo(_0x1ed34e * 102, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 106, _0x1ed34e * 53, _0x1ed34e * 255, _0x1ed34e * 53, _0x1ed34e * 263, _0x1ed34e * 154);
  _0x27885e.bezierCurveTo(_0x1ed34e * 248, _0x1ed34e * 38, _0x1ed34e * 99, _0x1ed34e * 69, _0x1ed34e * 103, _0x1ed34e * 154);
  _0x27885e.closePath();
  fill_path(_0x27885e, undefined, _0x499749[2], _0x1ed34e * 11);
  return _0x5658d9;
}
function create_shovel(_0x153e17, _0x4d15bf, _0x3a6349) {
  var _0x1377c9 = document.createElement("canvas");
  var _0x279d07 = _0x1377c9.getContext("2d");
  _0x1377c9.width = _0x153e17 * 80;
  _0x1377c9.height = _0x153e17 * 160;
  _0x279d07.globalAlpha = _0x4d15bf ? 0.5 : 1;
  _0x279d07.translate(_0x153e17 * 5, _0x153e17 * 5);
  _0x279d07.save();
  round_rect(_0x279d07, _0x153e17 * 33, _0x153e17 * 53, _0x153e17 * 10, _0x153e17 * 98, _0x153e17 * 10);
  fill_path(_0x279d07, _0x3a6349[0]);
  _0x279d07.beginPath();
  _0x279d07.lineCap = "round";
  _0x279d07.lineJoin = "round";
  _0x279d07.translate(_0x153e17 * -150, _0x153e17 * -100);
  _0x279d07.moveTo(_0x153e17 * 167.5, _0x153e17 * 171.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 188, _0x153e17 * 171.0625, _0x153e17 * 188, _0x153e17 * 171.0625, _0x153e17 * 208.5, _0x153e17 * 171.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 208.5, _0x153e17 * 156.0625, _0x153e17 * 208.5, _0x153e17 * 156.0625, _0x153e17 * 208.5, _0x153e17 * 141.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 203.5, _0x153e17 * 113.0625, _0x153e17 * 179.5, _0x153e17 * 96.0625, _0x153e17 * 167.5, _0x153e17 * 141.0625);
  _0x279d07.closePath();
  fill_path(_0x279d07, _0x3a6349[0]);
  _0x279d07.restore();
  _0x279d07.globalAlpha = 1;
  _0x279d07.translate(_0x153e17 * -5, _0x153e17 * -5);
  _0x279d07.save();
  round_rect(_0x279d07, _0x153e17 * 33, _0x153e17 * 53, _0x153e17 * 10, _0x153e17 * 98, _0x153e17 * 10);
  fill_path(_0x279d07, _0x3a6349[1], _0x3a6349[2], _0x153e17 * 4);
  _0x279d07.beginPath();
  _0x279d07.lineCap = "round";
  _0x279d07.lineJoin = "round";
  _0x279d07.translate(_0x153e17 * -150, _0x153e17 * -100);
  _0x279d07.moveTo(_0x153e17 * 167.5, _0x153e17 * 171.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 188, _0x153e17 * 171.0625, _0x153e17 * 188, _0x153e17 * 171.0625, _0x153e17 * 208.5, _0x153e17 * 171.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 208.5, _0x153e17 * 156.0625, _0x153e17 * 208.5, _0x153e17 * 156.0625, _0x153e17 * 208.5, _0x153e17 * 141.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 203.5, _0x153e17 * 113.0625, _0x153e17 * 179.5, _0x153e17 * 96.0625, _0x153e17 * 167.5, _0x153e17 * 141.0625);
  _0x279d07.closePath();
  fill_path(_0x279d07, _0x3a6349[3], _0x3a6349[4], _0x153e17 * 4);
  _0x279d07.beginPath();
  _0x279d07.lineCap = "round";
  _0x279d07.lineJoin = "round";
  _0x279d07.translate(_0x153e17 * 0, _0x153e17 * 1);
  _0x279d07.moveTo(_0x153e17 * 180.5, _0x153e17 * 169.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 180.5, _0x153e17 * 157.5625, _0x153e17 * 180.5, _0x153e17 * 157.5625, _0x153e17 * 180.5, _0x153e17 * 146.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 181.5, _0x153e17 * 134.0625, _0x153e17 * 193.5, _0x153e17 * 129.0625, _0x153e17 * 196.5, _0x153e17 * 146.0625);
  _0x279d07.bezierCurveTo(_0x153e17 * 196.5, _0x153e17 * 157.5625, _0x153e17 * 196.5, _0x153e17 * 157.5625, _0x153e17 * 196.5, _0x153e17 * 169.0625);
  _0x279d07.closePath();
  fill_path(_0x279d07, _0x3a6349[5]);
  _0x279d07.restore();
  return _0x1377c9;
}
function create_symbol_hud(_0x40e08f, _0x378197, _0x2f89a1) {
  var _0x283127 = document.createElement("canvas");
  var _0x574acc = _0x283127.getContext("2d");
  _0x283127.width = _0x40e08f * 109;
  _0x283127.height = _0x40e08f * 110;
  circle(_0x574acc, _0x40e08f * 54.5, _0x40e08f * 55, _0x40e08f * 48.038209575038294);
  fill_path(_0x574acc, _0x378197[0], _0x378197[1], _0x40e08f * 8);
  if (_0x2f89a1 == 0) {
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 54.928558349609375, _0x40e08f * 43.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 66.92855834960938, _0x40e08f * 31.72320556640625, _0x40e08f * 69.92855834960938, _0x40e08f * 29.72320556640625, _0x40e08f * 74.92855834960938, _0x40e08f * 29.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 86.92855834960938, _0x40e08f * 28.72320556640625, _0x40e08f * 91.92855834960938, _0x40e08f * 42.72320556640625, _0x40e08f * 89.92855834960938, _0x40e08f * 52.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 88.92855834960938, _0x40e08f * 63.72320556640625, _0x40e08f * 73.92855834960938, _0x40e08f * 75.72320556640625, _0x40e08f * 55.928558349609375, _0x40e08f * 87.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 37.928558349609375, _0x40e08f * 78.72320556640625, _0x40e08f * 26.928558349609375, _0x40e08f * 65.72320556640625, _0x40e08f * 19.928558349609375, _0x40e08f * 54.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 13.928558349609375, _0x40e08f * 42.72320556640625, _0x40e08f * 21.928558349609375, _0x40e08f * 28.72320556640625, _0x40e08f * 35.928558349609375, _0x40e08f * 29.72320556640625);
    _0x574acc.bezierCurveTo(_0x40e08f * 45.928558349609375, _0x40e08f * 31.72320556640625, _0x40e08f * 51.928558349609375, _0x40e08f * 40.72320556640625, _0x40e08f * 53.928558349609375, _0x40e08f * 44.72320556640625);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[2]);
  } else if (_0x2f89a1 == 1) {
    _0x574acc.save();
    _0x574acc.translate(_0x40e08f * 55, _0x40e08f * 39.48748779296875);
    round_rect(_0x574acc, _0x40e08f * -11.5, _0x40e08f * -36, _0x40e08f * 23, _0x40e08f * 72, _0x40e08f * 10);
    _0x574acc.restore();
    fill_path(_0x574acc, _0x378197[2], _0x378197[3], _0x40e08f * 4);
    circle(_0x574acc, _0x40e08f * 54.5, _0x40e08f * 78.48748779296875, _0x40e08f * 22.02271554554524);
    fill_path(_0x574acc, _0x378197[4], _0x378197[3], _0x40e08f * 4);
    _0x574acc.save();
    _0x574acc.translate(_0x40e08f * 55.5, _0x40e08f * 57.287506103515625);
    round_rect(_0x574acc, _0x40e08f * -9, _0x40e08f * -16, _0x40e08f * 18, _0x40e08f * 32, _0x40e08f * 10);
    _0x574acc.restore();
    fill_path(_0x574acc, _0x378197[4]);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 66.5, _0x40e08f * 25.287506103515625);
    _0x574acc.bezierCurveTo(_0x40e08f * 60.5, _0x40e08f * 25.287506103515625, _0x40e08f * 63.5, _0x40e08f * 25.287506103515625, _0x40e08f * 54.5, _0x40e08f * 25.287506103515625);
    _0x574acc.closePath();
    fill_path(_0x574acc, undefined, _0x378197[5], _0x40e08f * 4);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 66.5, _0x40e08f * 37.287506103515625);
    _0x574acc.bezierCurveTo(_0x40e08f * 60.5, _0x40e08f * 37.287506103515625, _0x40e08f * 60.5, _0x40e08f * 37.287506103515625, _0x40e08f * 54.5, _0x40e08f * 37.287506103515625);
    _0x574acc.closePath();
    fill_path(_0x574acc, undefined, _0x378197[5], _0x40e08f * 4);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 66.5, _0x40e08f * 50.287506103515625);
    _0x574acc.bezierCurveTo(_0x40e08f * 61, _0x40e08f * 50.287506103515625, _0x40e08f * 61, _0x40e08f * 50.287506103515625, _0x40e08f * 55.5, _0x40e08f * 50.287506103515625);
    _0x574acc.closePath();
    fill_path(_0x574acc, undefined, _0x378197[5], _0x40e08f * 4);
  } else if (_0x2f89a1 == 2) {
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 45.928558349609375, _0x40e08f * 55.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 38.928558349609375, _0x40e08f * 67.29463195800781, _0x40e08f * 38.928558349609375, _0x40e08f * 67.29463195800781, _0x40e08f * 31.928558349609375, _0x40e08f * 79.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 15.928558349609375, _0x40e08f * 85.29463195800781, _0x40e08f * 17.928558349609375, _0x40e08f * 86.29463195800781, _0x40e08f * 17.928558349609375, _0x40e08f * 90.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 19.928558349609375, _0x40e08f * 94.29463195800781, _0x40e08f * 21.928558349609375, _0x40e08f * 94.29463195800781, _0x40e08f * 27.928558349609375, _0x40e08f * 92.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 29.928558349609375, _0x40e08f * 98.29463195800781, _0x40e08f * 30.928558349609375, _0x40e08f * 99.29463195800781, _0x40e08f * 33.928558349609375, _0x40e08f * 99.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 38.928558349609375, _0x40e08f * 97.29463195800781, _0x40e08f * 38.928558349609375, _0x40e08f * 93.29463195800781, _0x40e08f * 37.928558349609375, _0x40e08f * 86.29463195800781);
    _0x574acc.bezierCurveTo(_0x40e08f * 45.428558349609375, _0x40e08f * 73.29463195800781, _0x40e08f * 51.928558349609375, _0x40e08f * 64.29463195800781, _0x40e08f * 52.928558349609375, _0x40e08f * 60.29463195800781);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[2]);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 55.928558349609375, _0x40e08f * 8.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 35.928558349609375, _0x40e08f * 35.866058349609375, _0x40e08f * 37.928558349609375, _0x40e08f * 48.866058349609375, _0x40e08f * 46.928558349609375, _0x40e08f * 62.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 65.92855834960938, _0x40e08f * 72.86605834960938, _0x40e08f * 80.92855834960938, _0x40e08f * 55.866058349609375, _0x40e08f * 93.92855834960938, _0x40e08f * 36.866058349609375);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[3], _0x378197[4], _0x40e08f * 6);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 93.92855834960938, _0x40e08f * 36.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 82.92855834960938, _0x40e08f * 37.866058349609375, _0x40e08f * 77.92855834960938, _0x40e08f * 36.866058349609375, _0x40e08f * 67.92855834960938, _0x40e08f * 28.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 53.928558349609375, _0x40e08f * 16.866058349609375, _0x40e08f * 53.928558349609375, _0x40e08f * 14.866058349609375, _0x40e08f * 55.928558349609375, _0x40e08f * 7.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 65.92855834960938, _0x40e08f * 4.866058349609375, _0x40e08f * 71.92855834960938, _0x40e08f * 7.866058349609375, _0x40e08f * 83.92855834960938, _0x40e08f * 13.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 96.92855834960938, _0x40e08f * 21.866058349609375, _0x40e08f * 95.92855834960938, _0x40e08f * 31.866058349609375, _0x40e08f * 92.92855834960938, _0x40e08f * 36.866058349609375);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[3], _0x378197[4], _0x40e08f * 6);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 68.92855834960938, _0x40e08f * 16.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 71.92855834960938, _0x40e08f * 13.866058349609375, _0x40e08f * 76.92855834960938, _0x40e08f * 16.866058349609375, _0x40e08f * 79.92855834960938, _0x40e08f * 21.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 82.92855834960938, _0x40e08f * 24.866058349609375, _0x40e08f * 81.92855834960938, _0x40e08f * 27.866058349609375, _0x40e08f * 73.92855834960938, _0x40e08f * 24.866058349609375);
    _0x574acc.bezierCurveTo(_0x40e08f * 67.92855834960938, _0x40e08f * 20.866058349609375, _0x40e08f * 66.92855834960938, _0x40e08f * 19.866058349609375, _0x40e08f * 67.92855834960938, _0x40e08f * 17.866058349609375);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[2]);
  } else if (_0x2f89a1 == 3) {
    _0x574acc.scale(0.9, 0.9);
    _0x574acc.translate(_0x40e08f * 6, 0);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 54, _0x40e08f * 0.421875);
    _0x574acc.bezierCurveTo(_0x40e08f * 84, _0x40e08f * 45.421875, _0x40e08f * 89, _0x40e08f * 51.421875, _0x40e08f * 83, _0x40e08f * 74.421875);
    _0x574acc.bezierCurveTo(_0x40e08f * 74, _0x40e08f * 95.421875, _0x40e08f * 46, _0x40e08f * 98.421875, _0x40e08f * 30, _0x40e08f * 78.421875);
    _0x574acc.bezierCurveTo(_0x40e08f * 22, _0x40e08f * 59.421875, _0x40e08f * 27, _0x40e08f * 49.421875, _0x40e08f * 34, _0x40e08f * 36.421875);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[2], _0x378197[3], _0x40e08f * 6);
    _0x574acc.beginPath();
    _0x574acc.lineCap = "round";
    _0x574acc.lineJoin = "round";
    _0x574acc.moveTo(_0x40e08f * 74, _0x40e08f * 52.421875);
    _0x574acc.bezierCurveTo(_0x40e08f * 77, _0x40e08f * 73.421875, _0x40e08f * 69, _0x40e08f * 81.421875, _0x40e08f * 58, _0x40e08f * 81.421875);
    _0x574acc.bezierCurveTo(_0x40e08f * 66, _0x40e08f * 71.421875, _0x40e08f * 70, _0x40e08f * 66.421875, _0x40e08f * 74, _0x40e08f * 52.421875);
    _0x574acc.closePath();
    fill_path(_0x574acc, _0x378197[3]);
  }
  return _0x283127;
}
function create_button_background(_0x1d34a5, _0x34e1db) {
  var _0x55fb58 = document.createElement("canvas");
  var _0x55f0fe = _0x55fb58.getContext("2d");
  var _0x436a3e = _0x1d34a5.w + _0x1d34a5.lw;
  var _0xa27dcd = _0x1d34a5.h + _0x1d34a5.lw;
  var _0x4cb76e = _0xa27dcd * 0.1;
  _0x55fb58.width = _0x436a3e;
  _0x55fb58.height = _0xa27dcd + _0x4cb76e;
  _0x55f0fe.beginPath();
  _0x55f0fe.translate(_0x436a3e / 2, _0xa27dcd / 2 + _0x4cb76e);
  _0x55f0fe.globalAlpha = 0.5;
  round_rect(_0x55f0fe, -_0x1d34a5.w / 2, -_0x1d34a5.h / 2, _0x1d34a5.w, _0x1d34a5.h, _0x1d34a5.r);
  fill_path(_0x55f0fe, "#000", "#000", _0x1d34a5.lw);
  _0x55f0fe.globalAlpha = 1;
  _0x55f0fe.beginPath();
  if (!_0x34e1db) {
    _0x55f0fe.translate(0, -_0x4cb76e);
  }
  round_rect(_0x55f0fe, -_0x1d34a5.w / 2, -_0x1d34a5.h / 2, _0x1d34a5.w, _0x1d34a5.h, _0x1d34a5.r);
  fill_path(_0x55f0fe, _0x1d34a5.bg, _0x1d34a5.fg, _0x1d34a5.lw);
  _0x55f0fe.beginPath();
  _0x55f0fe.fillStyle = _0x1d34a5.color;
  _0x55f0fe.textBaseline = "middle";
  _0x55f0fe.textAlign = "center";
  _0x55f0fe.font = _0x1d34a5.size + "px " + _0x1d34a5.font;
  _0x55f0fe.fillText(_0x1d34a5.text, 0, 0);
  return _0x55fb58;
}
function create_button(_0x4fa4d5) {
  var _0x2e926b = [];
  for (var _0x1091cb = 0; _0x1091cb < _0x4fa4d5.length; _0x1091cb++) {
    _0x2e926b.push(create_button_background(_0x4fa4d5[_0x1091cb], _0x1091cb == 2 ? true : false));
  }
  return _0x2e926b;
}
function create_gauges_mobile(_0x28539f) {
  var _0x23eee4 = document.createElement("canvas");
  var _0x40fa22 = _0x23eee4.getContext("2d");
  var _0x1749bd = _0x28539f * 335;
  var _0x1de574 = _0x28539f * 250;
  var _0x49555a = _0x28539f * 120;
  var _0x59f0d2 = _0x28539f * 20;
  var _0x4c5549 = _0x28539f * 35;
  var _0x117bc6 = _0x28539f * 65;
  var _0x3d929a = _0x28539f * 2;
  var _0x545fea = _0x28539f * 4;
  _0x23eee4.width = _0x1749bd;
  _0x23eee4.height = _0x49555a;
  _0x40fa22.beginPath();
  _0x40fa22.translate(0, _0x28539f * 15);
  round_rect(_0x40fa22, _0x117bc6, 0, _0x1de574, _0x59f0d2, _0x3d929a);
  fill_path(_0x40fa22, null, "#69A148", _0x545fea);
  _0x40fa22.translate(0, _0x4c5549);
  round_rect(_0x40fa22, _0x117bc6, 0, _0x1de574, _0x59f0d2, _0x3d929a);
  fill_path(_0x40fa22, null, "#AF352A", _0x545fea);
  _0x40fa22.translate(0, _0x4c5549);
  round_rect(_0x40fa22, _0x117bc6, 0, _0x1de574, _0x59f0d2, _0x3d929a);
  fill_path(_0x40fa22, null, "#669BB1", _0x545fea);
  return _0x23eee4;
}
function create_oxygen_gauges(_0x51317e) {
  var _0x41796e = document.createElement("canvas");
  var _0x44f561 = _0x41796e.getContext("2d");
  var _0x1c3072 = _0x51317e * 600;
  var _0xf99b8c = _0x51317e * 22;
  var _0x5eae91 = _0x51317e * 4;
  var _0x3f679e = _0x51317e * 4;
  _0x41796e.width = _0x1c3072;
  _0x41796e.height = _0xf99b8c;
  round_rect(_0x44f561, _0x51317e * 5, _0x51317e * 5, _0x1c3072 - _0x51317e * 10, _0xf99b8c - _0x51317e * 10, _0x5eae91);
  fill_path(_0x44f561, null, "#BBE8EF", _0x3f679e);
  return _0x41796e;
}
function create_recipe_button(_0x389ab5, _0x2e3075, _0x338785) {
  var _0x53fe6b = document.createElement("canvas");
  var _0x3b0432 = _0x53fe6b.getContext("2d");
  _0x53fe6b.width = _0x389ab5 * 573;
  _0x53fe6b.height = _0x389ab5 * 350;
  if (_0x338785 == 1) {
    _0x3b0432.beginPath();
    _0x3b0432.lineCap = "round";
    _0x3b0432.lineJoin = "round";
    _0x3b0432.moveTo(_0x389ab5 * 336, _0x389ab5 * 72);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 366, _0x389ab5 * 15, _0x389ab5 * 426, _0x389ab5 * 36, _0x389ab5 * 497, _0x389ab5 * 83);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 522, _0x389ab5 * 85, _0x389ab5 * 522, _0x389ab5 * 85, _0x389ab5 * 547, _0x389ab5 * 87);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 476.5, _0x389ab5 * 205, _0x389ab5 * 476.5, _0x389ab5 * 205, _0x389ab5 * 406, _0x389ab5 * 323);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 297.5, _0x389ab5 * 319, _0x389ab5 * 297.5, _0x389ab5 * 319, _0x389ab5 * 189, _0x389ab5 * 315);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 105.5, _0x389ab5 * 279, _0x389ab5 * 105.5, _0x389ab5 * 279, _0x389ab5 * 22, _0x389ab5 * 243);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 92, _0x389ab5 * 140, _0x389ab5 * 92, _0x389ab5 * 140, _0x389ab5 * 162, _0x389ab5 * 37);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 173, _0x389ab5 * 39, _0x389ab5 * 173, _0x389ab5 * 39, _0x389ab5 * 184, _0x389ab5 * 41);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 185, _0x389ab5 * 38.5, _0x389ab5 * 185, _0x389ab5 * 38.5, _0x389ab5 * 186, _0x389ab5 * 36);
    _0x3b0432.bezierCurveTo(_0x389ab5 * 323, _0x389ab5 * 13, _0x389ab5 * 322, _0x389ab5 * 25, _0x389ab5 * 337, _0x389ab5 * 74);
    _0x3b0432.closePath();
    fill_path(_0x3b0432, _0x2e3075[4], _0x2e3075[4], _0x389ab5 * 35);
  }
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 168, _0x389ab5 * 42);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 255, _0x389ab5 * 60, _0x389ab5 * 255, _0x389ab5 * 60, _0x389ab5 * 342, _0x389ab5 * 78);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 443, _0x389ab5 * 81.5, _0x389ab5 * 443, _0x389ab5 * 81.5, _0x389ab5 * 544, _0x389ab5 * 85);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 475, _0x389ab5 * 204.5, _0x389ab5 * 475, _0x389ab5 * 204.5, _0x389ab5 * 406, _0x389ab5 * 324);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 297.5, _0x389ab5 * 320, _0x389ab5 * 297.5, _0x389ab5 * 320, _0x389ab5 * 189, _0x389ab5 * 316);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 105.5, _0x389ab5 * 279, _0x389ab5 * 105.5, _0x389ab5 * 279, _0x389ab5 * 22, _0x389ab5 * 242);
  _0x3b0432.closePath();
  fill_path(_0x3b0432, _0x2e3075[0], _0x2e3075[1], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 188, _0x389ab5 * 41);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 308, _0x389ab5 * 15, _0x389ab5 * 325, _0x389ab5 * 18, _0x389ab5 * 337, _0x389ab5 * 66);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 191, _0x389ab5 * 305, _0x389ab5 * 196, _0x389ab5 * 286, _0x389ab5 * 184, _0x389ab5 * 307);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 175, _0x389ab5 * 250, _0x389ab5 * 90, _0x389ab5 * 254, _0x389ab5 * 52, _0x389ab5 * 241);
  _0x3b0432.closePath();
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 336, _0x389ab5 * 71);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 375, _0x389ab5 * 8, _0x389ab5 * 429, _0x389ab5 * 50, _0x389ab5 * 518, _0x389ab5 * 92);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 455, _0x389ab5 * 199.5, _0x389ab5 * 455, _0x389ab5 * 199.5, _0x389ab5 * 392, _0x389ab5 * 307);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 227, _0x389ab5 * 301, _0x389ab5 * 261, _0x389ab5 * 255, _0x389ab5 * 188, _0x389ab5 * 308);
  _0x3b0432.closePath();
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 357, _0x389ab5 * 76);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 390, _0x389ab5 * 67, _0x389ab5 * 414, _0x389ab5 * 86, _0x389ab5 * 435, _0x389ab5 * 104);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 417, _0x389ab5 * 135, _0x389ab5 * 417, _0x389ab5 * 135, _0x389ab5 * 399, _0x389ab5 * 166);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 352, _0x389ab5 * 140, _0x389ab5 * 345, _0x389ab5 * 139, _0x389ab5 * 319, _0x389ab5 * 142);
  _0x3b0432.closePath();
  fill_path(_0x3b0432, _0x2e3075[3], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 309, _0x389ab5 * 168);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 345, _0x389ab5 * 163, _0x389ab5 * 372, _0x389ab5 * 180, _0x389ab5 * 412, _0x389ab5 * 203);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 263, _0x389ab5 * 54);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 305, _0x389ab5 * 44, _0x389ab5 * 307, _0x389ab5 * 51, _0x389ab5 * 311, _0x389ab5 * 64);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 270.5, _0x389ab5 * 129.5, _0x389ab5 * 270.5, _0x389ab5 * 129.5, _0x389ab5 * 230, _0x389ab5 * 195);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 221, _0x389ab5 * 175, _0x389ab5 * 203, _0x389ab5 * 171, _0x389ab5 * 186, _0x389ab5 * 172);
  _0x3b0432.closePath();
  fill_path(_0x3b0432, _0x2e3075[3], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 292, _0x389ab5 * 198);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 328, _0x389ab5 * 191, _0x389ab5 * 364, _0x389ab5 * 211, _0x389ab5 * 401, _0x389ab5 * 237);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 245, _0x389ab5 * 68);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 210, _0x389ab5 * 72, _0x389ab5 * 210, _0x389ab5 * 72, _0x389ab5 * 189, _0x389ab5 * 69);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 222, _0x389ab5 * 96);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 196, _0x389ab5 * 97, _0x389ab5 * 193, _0x389ab5 * 97, _0x389ab5 * 177, _0x389ab5 * 92);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 207, _0x389ab5 * 124);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 179, _0x389ab5 * 123, _0x389ab5 * 177, _0x389ab5 * 124, _0x389ab5 * 161, _0x389ab5 * 119);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 115, _0x389ab5 * 183);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 184, _0x389ab5 * 185, _0x389ab5 * 203, _0x389ab5 * 198, _0x389ab5 * 219, _0x389ab5 * 221);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 98, _0x389ab5 * 213);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 161, _0x389ab5 * 214, _0x389ab5 * 193, _0x389ab5 * 227, _0x389ab5 * 201, _0x389ab5 * 249);
  fill_path(_0x3b0432, _0x2e3075[2], _0x2e3075[3], _0x389ab5 * 12);
  _0x3b0432.beginPath();
  _0x3b0432.lineCap = "round";
  _0x3b0432.lineJoin = "round";
  _0x3b0432.moveTo(_0x389ab5 * 399, _0x389ab5 * 257);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 287, _0x389ab5 * 215, _0x389ab5 * 280, _0x389ab5 * 215, _0x389ab5 * 263, _0x389ab5 * 222);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 253, _0x389ab5 * 238, _0x389ab5 * 247, _0x389ab5 * 245, _0x389ab5 * 243, _0x389ab5 * 254);
  _0x3b0432.bezierCurveTo(_0x389ab5 * 267, _0x389ab5 * 236, _0x389ab5 * 292, _0x389ab5 * 263, _0x389ab5 * 377, _0x389ab5 * 284);
  fill_path(_0x3b0432, _0x2e3075[3], _0x2e3075[3], _0x389ab5 * 12);
  return _0x53fe6b;
}
function create_quest_button(_0x16b360, _0x394af7, _0x3d8329, _0x2d2c6e) {
  var _0x1025f4 = document.createElement("canvas");
  var _0x3a357d = _0x1025f4.getContext("2d");
  _0x1025f4.width = _0x16b360 * 170;
  _0x1025f4.height = _0x16b360 * 200;
  _0x3a357d.translate(_0x16b360 * 5, _0x16b360 * 15);
  if (_0x2d2c6e == 1) {
    _0x3a357d.translate(0, _0x16b360 * -5);
    circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 104.49432373046875, _0x16b360 * 71.84010022264724);
    fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[5], _0x16b360 * 20);
    circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 104.22160339355469, _0x16b360 * 61.554853586049575);
    fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[5], _0x16b360 * 20);
    _0x3a357d.save();
    _0x3a357d.translate(_0x16b360 * 77.00003051757812, _0x16b360 * 31.267044067382812);
    round_rect(_0x3a357d, _0x16b360 * -6, _0x16b360 * -12.5, _0x16b360 * 12, _0x16b360 * 25, _0x16b360 * 10);
    _0x3a357d.restore();
    fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[5], _0x16b360 * 20);
    _0x3a357d.save();
    _0x3a357d.translate(_0x16b360 * 77.00003051757812, _0x16b360 * 13.267044067382812);
    round_rect(_0x3a357d, _0x16b360 * -15, _0x16b360 * -10.5, _0x16b360 * 30, _0x16b360 * 21, _0x16b360 * 10);
    _0x3a357d.restore();
    fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[5], _0x16b360 * 20);
  }
  circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 104.49432373046875, _0x16b360 * 71.84010022264724);
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 7);
  circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 104.22160339355469, _0x16b360 * 61.554853586049575);
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 7);
  _0x3a357d.beginPath();
  _0x3a357d.lineCap = "round";
  _0x3a357d.lineJoin = "round";
  _0x3a357d.moveTo(_0x16b360 * 18.000030517578125, _0x16b360 * 105.85795593261719);
  _0x3a357d.bezierCurveTo(_0x16b360 * 134.00003051757812, _0x16b360 * 104.85795593261719, _0x16b360 * 77.00003051757812, _0x16b360 * 104.85795593261719, _0x16b360 * 136.00003051757812, _0x16b360 * 103.85795593261719);
  _0x3a357d.closePath();
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 8);
  circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 104.6761474609375, _0x16b360 * 32.55764119219941);
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 8);
  _0x3a357d.beginPath();
  _0x3a357d.lineCap = "round";
  _0x3a357d.lineJoin = "round";
  _0x3a357d.moveTo(_0x16b360 * 78.00003051757812, _0x16b360 * 112.03977966308594);
  _0x3a357d.bezierCurveTo(_0x16b360 * 78.00003051757812, _0x16b360 * 87.03977966308594, _0x16b360 * 78.00003051757812, _0x16b360 * 87.03977966308594, _0x16b360 * 78.00003051757812, _0x16b360 * 62.03977966308594);
  _0x3a357d.closePath();
  fill_path(_0x3a357d, _0x3d8329[3], _0x3d8329[2], _0x16b360 * 8);
  _0x3a357d.beginPath();
  _0x3a357d.lineCap = "round";
  _0x3a357d.lineJoin = "round";
  _0x3a357d.moveTo(_0x16b360 * 78.00003051757812, _0x16b360 * 48.03977966308594);
  _0x3a357d.bezierCurveTo(_0x16b360 * 82.00003051757812, _0x16b360 * 55.53977966308594, _0x16b360 * 82.00003051757812, _0x16b360 * 55.53977966308594, _0x16b360 * 86.00003051757812, _0x16b360 * 63.03977966308594);
  _0x3a357d.bezierCurveTo(_0x16b360 * 78.00003051757812, _0x16b360 * 63.03977966308594, _0x16b360 * 78.00003051757812, _0x16b360 * 63.03977966308594, _0x16b360 * 70.00003051757812, _0x16b360 * 63.03977966308594);
  _0x3a357d.closePath();
  fill_path(_0x3a357d, _0x3d8329[3], _0x3d8329[2], _0x16b360 * 4);
  _0x3a357d.beginPath();
  _0x3a357d.lineCap = "round";
  _0x3a357d.lineJoin = "round";
  _0x3a357d.moveTo(_0x16b360 * 80.00003051757812, _0x16b360 * 111.6761474609375);
  _0x3a357d.bezierCurveTo(_0x16b360 * 95.00003051757812, _0x16b360 * 97.1761474609375, _0x16b360 * 95.00003051757812, _0x16b360 * 97.1761474609375, _0x16b360 * 110.00003051757812, _0x16b360 * 82.6761474609375);
  _0x3a357d.closePath();
  fill_path(_0x3a357d, _0x3d8329[3], _0x3d8329[2], _0x16b360 * 8);
  _0x3a357d.beginPath();
  _0x3a357d.lineCap = "round";
  _0x3a357d.lineJoin = "round";
  _0x3a357d.moveTo(_0x16b360 * 107.00003051757812, _0x16b360 * 76.6761474609375);
  _0x3a357d.bezierCurveTo(_0x16b360 * 111.50003051757812, _0x16b360 * 82.6761474609375, _0x16b360 * 111.50003051757812, _0x16b360 * 82.6761474609375, _0x16b360 * 116.00003051757812, _0x16b360 * 88.6761474609375);
  _0x3a357d.bezierCurveTo(_0x16b360 * 118.50003051757812, _0x16b360 * 81.6761474609375, _0x16b360 * 118.50003051757812, _0x16b360 * 81.6761474609375, _0x16b360 * 121.00003051757812, _0x16b360 * 74.6761474609375);
  _0x3a357d.closePath();
  fill_path(_0x3a357d, _0x3d8329[3], _0x3d8329[2], _0x16b360 * 4);
  circle(_0x3a357d, _0x16b360 * 77.00003051757812, _0x16b360 * 105.03977966308594, _0x16b360 * 15.556349186104045);
  fill_path(_0x3a357d, _0x3d8329[3], _0x3d8329[2], _0x16b360 * 4);
  _0x3a357d.save();
  _0x3a357d.translate(_0x16b360 * 77.00003051757812, _0x16b360 * 31.267044067382812);
  _0x3a357d.rotate(0);
  round_rect(_0x3a357d, _0x16b360 * -6, _0x16b360 * -12.5, _0x16b360 * 12, _0x16b360 * 25, _0x16b360 * 10);
  _0x3a357d.restore();
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 7);
  _0x3a357d.save();
  _0x3a357d.translate(_0x16b360 * 77.00003051757812, _0x16b360 * 13.267044067382812);
  _0x3a357d.rotate(0);
  round_rect(_0x3a357d, _0x16b360 * -15, _0x16b360 * -10.5, _0x16b360 * 30, _0x16b360 * 21, _0x16b360 * 10);
  _0x3a357d.restore();
  fill_path(_0x3a357d, _0x3d8329[1], _0x3d8329[2], _0x16b360 * 7);
  return _0x1025f4;
}
function create_market_button(_0x3449de, _0x584941, _0x3d5fcc) {
  var _0x225449 = document.createElement("canvas");
  var _0x9fa523 = _0x225449.getContext("2d");
  _0x225449.width = _0x3449de * 81;
  _0x225449.height = _0x3449de * 77;
  _0x9fa523.translate(0, _0x3449de * 10);
  _0x9fa523.scale(0.2, 0.2);
  _0x9fa523.translate(0, _0x3449de * -30);
  if (_0x3d5fcc == 1) {
    _0x9fa523.beginPath();
    _0x9fa523.lineCap = "round";
    _0x9fa523.lineJoin = "round";
    _0x9fa523.moveTo(_0x3449de * 36.5, _0x3449de * 278.0625);
    _0x9fa523.bezierCurveTo(_0x3449de * 67.5, _0x3449de * 316.0625, _0x3449de * 134.5, _0x3449de * 334.0625, _0x3449de * 199.5, _0x3449de * 319.0625);
    _0x9fa523.bezierCurveTo(_0x3449de * 254.5, _0x3449de * 304.0625, _0x3449de * 346.5, _0x3449de * 270.0625, _0x3449de * 348.5, _0x3449de * 237.0625);
    _0x9fa523.bezierCurveTo(_0x3449de * 359.5, _0x3449de * 206.0625, _0x3449de * 318.5, _0x3449de * 129.0625, _0x3449de * 262.5, _0x3449de * 122.0625);
    _0x9fa523.bezierCurveTo(_0x3449de * 213.5, _0x3449de * 115.0625, _0x3449de * 166.5, _0x3449de * 133.0625, _0x3449de * 104.5, _0x3449de * 166.0625);
    _0x9fa523.bezierCurveTo(_0x3449de * 54.5, _0x3449de * 194.0625, _0x3449de * 23.5, _0x3449de * 241.0625, _0x3449de * 36.5, _0x3449de * 277.0625);
    _0x9fa523.closePath();
    fill_path(_0x9fa523, _0x584941[0], _0x584941[3], _0x3449de * 50);
  }
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 36.5, _0x3449de * 278.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 67.5, _0x3449de * 316.0625, _0x3449de * 134.5, _0x3449de * 334.0625, _0x3449de * 199.5, _0x3449de * 319.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 254.5, _0x3449de * 304.0625, _0x3449de * 346.5, _0x3449de * 270.0625, _0x3449de * 348.5, _0x3449de * 237.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 359.5, _0x3449de * 206.0625, _0x3449de * 318.5, _0x3449de * 129.0625, _0x3449de * 262.5, _0x3449de * 122.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 213.5, _0x3449de * 115.0625, _0x3449de * 166.5, _0x3449de * 133.0625, _0x3449de * 104.5, _0x3449de * 166.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 54.5, _0x3449de * 194.0625, _0x3449de * 23.5, _0x3449de * 241.0625, _0x3449de * 36.5, _0x3449de * 277.0625);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[0], _0x584941[1], _0x3449de * 19);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 214.5, _0x3449de * 124.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 242.5, _0x3449de * 125.0625, _0x3449de * 272.5, _0x3449de * 159.0625, _0x3449de * 283.5, _0x3449de * 184.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 277.5, _0x3449de * 161.0625, _0x3449de * 233.5, _0x3449de * 128.0625, _0x3449de * 219.5, _0x3449de * 122.0625);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[0], _0x584941[1], _0x3449de * 19);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 157.5, _0x3449de * 145.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 176.5, _0x3449de * 148.0625, _0x3449de * 205.5, _0x3449de * 176.0625, _0x3449de * 212.5, _0x3449de * 197.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 205.5, _0x3449de * 178.0625, _0x3449de * 177.5, _0x3449de * 152.0625, _0x3449de * 156.5, _0x3449de * 142.0625);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[0], _0x584941[1], _0x3449de * 19);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 103.5, _0x3449de * 169.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 160.5, _0x3449de * 166.0625, _0x3449de * 228.5, _0x3449de * 312.0625, _0x3449de * 162.5, _0x3449de * 323.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 128.5, _0x3449de * 330.0625, _0x3449de * 45.5, _0x3449de * 312.0625, _0x3449de * 34.5, _0x3449de * 268.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 30.5, _0x3449de * 238.0625, _0x3449de * 44.5, _0x3449de * 222.0625, _0x3449de * 52.5, _0x3449de * 211.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 82.5, _0x3449de * 174.0625, _0x3449de * 104.5, _0x3449de * 166.0625, _0x3449de * 119.5, _0x3449de * 172.0625);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[2], _0x584941[1], _0x3449de * 19);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 194.5, _0x3449de * 313.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 222.5, _0x3449de * 306.0625, _0x3449de * 319.5, _0x3449de * 271.0625, _0x3449de * 337.5, _0x3449de * 241.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 274.5, _0x3449de * 270.0625, _0x3449de * 216.5, _0x3449de * 288.0625, _0x3449de * 199.5, _0x3449de * 287.0625);
  _0x9fa523.bezierCurveTo(_0x3449de * 198.5, _0x3449de * 302.0625, _0x3449de * 195.5, _0x3449de * 311.0625, _0x3449de * 193.5, _0x3449de * 312.0625);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[1]);
  _0x9fa523.scale(3, 3);
  _0x9fa523.translate(15, _0x3449de * 10);
  if (_0x3d5fcc == 1) {
    _0x9fa523.beginPath();
    _0x9fa523.lineCap = "round";
    _0x9fa523.lineJoin = "round";
    _0x9fa523.moveTo(_0x3449de * 4, _0x3449de * 32);
    _0x9fa523.bezierCurveTo(_0x3449de * 19, _0x3449de * 25, _0x3449de * 19, _0x3449de * 25, _0x3449de * 34, _0x3449de * 18);
    _0x9fa523.bezierCurveTo(_0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 49, _0x3449de * 29);
    _0x9fa523.bezierCurveTo(_0x3449de * 59.5, _0x3449de * 20, _0x3449de * 59.5, _0x3449de * 20, _0x3449de * 70, _0x3449de * 11);
    fill_path(_0x9fa523, undefined, _0x584941[3], _0x3449de * 28);
    _0x9fa523.beginPath();
    _0x9fa523.lineCap = "round";
    _0x9fa523.lineJoin = "round";
    _0x9fa523.moveTo(_0x3449de * 56, _0x3449de * 6);
    _0x9fa523.bezierCurveTo(_0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 71, _0x3449de * 21);
    _0x9fa523.bezierCurveTo(_0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 78, _0x3449de * 2);
    _0x9fa523.closePath();
    fill_path(_0x9fa523, _0x584941[3], _0x584941[3], _0x3449de * 28);
  }
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 4, _0x3449de * 32);
  _0x9fa523.bezierCurveTo(_0x3449de * 19, _0x3449de * 25, _0x3449de * 19, _0x3449de * 25, _0x3449de * 34, _0x3449de * 18);
  _0x9fa523.bezierCurveTo(_0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 49, _0x3449de * 29);
  _0x9fa523.bezierCurveTo(_0x3449de * 59.5, _0x3449de * 20, _0x3449de * 59.5, _0x3449de * 20, _0x3449de * 70, _0x3449de * 11);
  fill_path(_0x9fa523, undefined, _0x584941[1], _0x3449de * 17);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 56, _0x3449de * 6);
  _0x9fa523.bezierCurveTo(_0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 71, _0x3449de * 21);
  _0x9fa523.bezierCurveTo(_0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 78, _0x3449de * 2);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[1], _0x584941[1], _0x3449de * 17);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 4, _0x3449de * 32);
  _0x9fa523.bezierCurveTo(_0x3449de * 19, _0x3449de * 25, _0x3449de * 19, _0x3449de * 25, _0x3449de * 34, _0x3449de * 18);
  _0x9fa523.bezierCurveTo(_0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 41.5, _0x3449de * 23.5, _0x3449de * 49, _0x3449de * 29);
  _0x9fa523.bezierCurveTo(_0x3449de * 59.5, _0x3449de * 20, _0x3449de * 59.5, _0x3449de * 20, _0x3449de * 70, _0x3449de * 11);
  fill_path(_0x9fa523, undefined, _0x584941[2], _0x3449de * 10);
  _0x9fa523.beginPath();
  _0x9fa523.lineCap = "round";
  _0x9fa523.lineJoin = "round";
  _0x9fa523.moveTo(_0x3449de * 56, _0x3449de * 6);
  _0x9fa523.bezierCurveTo(_0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 63.5, _0x3449de * 13.5, _0x3449de * 71, _0x3449de * 21);
  _0x9fa523.bezierCurveTo(_0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 74.5, _0x3449de * 11.5, _0x3449de * 78, _0x3449de * 2);
  _0x9fa523.closePath();
  fill_path(_0x9fa523, _0x584941[2], _0x584941[2], _0x3449de * 10);
  return _0x225449;
}
function create_spanner(_0x1ae3f3, _0x1dcb4b, _0x5616fb) {
  var _0x457526 = document.createElement("canvas");
  var _0xbd8c08 = _0x457526.getContext("2d");
  _0x457526.width = _0x1ae3f3 * 144;
  _0x457526.height = _0x1ae3f3 * 280;
  _0xbd8c08.globalAlpha = _0x1dcb4b ? 0.5 : 1;
  _0xbd8c08.translate(_0x1ae3f3 * 5, _0x1ae3f3 * 5);
  _0xbd8c08.beginPath();
  _0xbd8c08.lineCap = "round";
  _0xbd8c08.lineJoin = "round";
  _0xbd8c08.moveTo(_0x1ae3f3 * 62, _0x1ae3f3 * 103.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 62.5, _0x1ae3f3 * 148.79999542236328, _0x1ae3f3 * 62.5, _0x1ae3f3 * 148.79999542236328, _0x1ae3f3 * 63, _0x1ae3f3 * 193.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 63, _0x1ae3f3 * 219.79999542236328, _0x1ae3f3 * 47, _0x1ae3f3 * 217.79999542236328, _0x1ae3f3 * 51, _0x1ae3f3 * 230.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 62, _0x1ae3f3 * 255.79999542236328, _0x1ae3f3 * 74, _0x1ae3f3 * 260.7999954223633, _0x1ae3f3 * 72, _0x1ae3f3 * 248.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 65, _0x1ae3f3 * 226.79999542236328, _0x1ae3f3 * 71, _0x1ae3f3 * 229.79999542236328, _0x1ae3f3 * 76, _0x1ae3f3 * 225.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 90, _0x1ae3f3 * 224.79999542236328, _0x1ae3f3 * 89, _0x1ae3f3 * 232.79999542236328, _0x1ae3f3 * 90, _0x1ae3f3 * 243.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 95, _0x1ae3f3 * 253.79999542236328, _0x1ae3f3 * 99, _0x1ae3f3 * 249.79999542236328, _0x1ae3f3 * 100, _0x1ae3f3 * 229.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 102, _0x1ae3f3 * 213.79999542236328, _0x1ae3f3 * 98, _0x1ae3f3 * 214.79999542236328, _0x1ae3f3 * 90, _0x1ae3f3 * 205.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 82, _0x1ae3f3 * 201.79999542236328, _0x1ae3f3 * 82, _0x1ae3f3 * 185.79999542236328, _0x1ae3f3 * 82, _0x1ae3f3 * 114.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 80, _0x1ae3f3 * 73, _0x1ae3f3 * 82, _0x1ae3f3 * 68, _0x1ae3f3 * 93, _0x1ae3f3 * 53);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 98, _0x1ae3f3 * 37, _0x1ae3f3 * 65, _0x1ae3f3 * 14, _0x1ae3f3 * 74, _0x1ae3f3 * 33);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 82, _0x1ae3f3 * 56, _0x1ae3f3 * 77, _0x1ae3f3 * 52, _0x1ae3f3 * 69, _0x1ae3f3 * 54);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 55, _0x1ae3f3 * 57, _0x1ae3f3 * 57, _0x1ae3f3 * 53, _0x1ae3f3 * 54, _0x1ae3f3 * 39);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 46, _0x1ae3f3 * 20, _0x1ae3f3 * 37, _0x1ae3f3 * 61, _0x1ae3f3 * 50, _0x1ae3f3 * 68);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 65, _0x1ae3f3 * 81, _0x1ae3f3 * 60, _0x1ae3f3 * 89, _0x1ae3f3 * 62, _0x1ae3f3 * 102);
  _0xbd8c08.closePath();
  fill_path(_0xbd8c08, _0x5616fb[0]);
  _0xbd8c08.globalAlpha = 1;
  _0xbd8c08.translate(_0x1ae3f3 * -5, _0x1ae3f3 * -5);
  _0xbd8c08.beginPath();
  _0xbd8c08.lineCap = "round";
  _0xbd8c08.lineJoin = "round";
  _0xbd8c08.moveTo(_0x1ae3f3 * 62, _0x1ae3f3 * 103.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 62.5, _0x1ae3f3 * 148.79999542236328, _0x1ae3f3 * 62.5, _0x1ae3f3 * 148.79999542236328, _0x1ae3f3 * 63, _0x1ae3f3 * 193.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 63, _0x1ae3f3 * 219.79999542236328, _0x1ae3f3 * 47, _0x1ae3f3 * 217.79999542236328, _0x1ae3f3 * 51, _0x1ae3f3 * 230.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 62, _0x1ae3f3 * 255.79999542236328, _0x1ae3f3 * 74, _0x1ae3f3 * 260.7999954223633, _0x1ae3f3 * 72, _0x1ae3f3 * 248.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 65, _0x1ae3f3 * 226.79999542236328, _0x1ae3f3 * 71, _0x1ae3f3 * 229.79999542236328, _0x1ae3f3 * 76, _0x1ae3f3 * 225.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 90, _0x1ae3f3 * 224.79999542236328, _0x1ae3f3 * 89, _0x1ae3f3 * 232.79999542236328, _0x1ae3f3 * 90, _0x1ae3f3 * 243.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 95, _0x1ae3f3 * 253.79999542236328, _0x1ae3f3 * 99, _0x1ae3f3 * 249.79999542236328, _0x1ae3f3 * 100, _0x1ae3f3 * 229.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 102, _0x1ae3f3 * 213.79999542236328, _0x1ae3f3 * 98, _0x1ae3f3 * 214.79999542236328, _0x1ae3f3 * 90, _0x1ae3f3 * 205.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 82, _0x1ae3f3 * 201.79999542236328, _0x1ae3f3 * 82, _0x1ae3f3 * 185.79999542236328, _0x1ae3f3 * 82, _0x1ae3f3 * 114.79999542236328);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 80, _0x1ae3f3 * 73, _0x1ae3f3 * 82, _0x1ae3f3 * 68, _0x1ae3f3 * 93, _0x1ae3f3 * 53);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 98, _0x1ae3f3 * 37, _0x1ae3f3 * 65, _0x1ae3f3 * 14, _0x1ae3f3 * 74, _0x1ae3f3 * 33);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 82, _0x1ae3f3 * 56, _0x1ae3f3 * 77, _0x1ae3f3 * 52, _0x1ae3f3 * 69, _0x1ae3f3 * 54);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 55, _0x1ae3f3 * 57, _0x1ae3f3 * 57, _0x1ae3f3 * 53, _0x1ae3f3 * 54, _0x1ae3f3 * 39);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 46, _0x1ae3f3 * 20, _0x1ae3f3 * 37, _0x1ae3f3 * 61, _0x1ae3f3 * 50, _0x1ae3f3 * 68);
  _0xbd8c08.bezierCurveTo(_0x1ae3f3 * 65, _0x1ae3f3 * 81, _0x1ae3f3 * 60, _0x1ae3f3 * 89, _0x1ae3f3 * 62, _0x1ae3f3 * 102);
  _0xbd8c08.closePath();
  fill_path(_0xbd8c08, _0x5616fb[1], _0x5616fb[2], _0x1ae3f3 * 6);
  return _0x457526;
}
function create_present(_0x3712cc, _0x2df3b6, _0x6c5373) {
  var _0x11d9cd = document.createElement("canvas");
  var _0xb1b1ad = _0x11d9cd.getContext("2d");
  _0x11d9cd.width = _0x3712cc * 160;
  _0x11d9cd.height = _0x3712cc * 161;
  _0xb1b1ad.globalAlpha = _0x2df3b6 ? 0.5 : 1;
  _0xb1b1ad.translate(0, _0x3712cc * 10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 80.5, _0x3712cc * 78);
  round_rect(_0xb1b1ad, _0x3712cc * -71.5, _0x3712cc * -71, _0x3712cc * 143, _0x3712cc * 143, _0x3712cc * 10);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.globalAlpha = 1;
  _0xb1b1ad.translate(0, _0x3712cc * -10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 80.5, _0x3712cc * 78);
  round_rect(_0xb1b1ad, _0x3712cc * -71.5, _0x3712cc * -71, _0x3712cc * 143, _0x3712cc * 143, _0x3712cc * 10);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[1], _0x6c5373[2], _0x3712cc * 6);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 80, _0x3712cc * 78.5);
  round_rect(_0xb1b1ad, _0x3712cc * -17, _0x3712cc * -72.5, _0x3712cc * 34, _0x3712cc * 145, _0x3712cc * 10);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.globalAlpha = _0x2df3b6 ? 0.5 : 1;
  _0xb1b1ad.translate(0, _0x3712cc * 10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 80, _0x3712cc * 79.5);
  round_rect(_0xb1b1ad, _0x3712cc * -73, _0x3712cc * -16.5, _0x3712cc * 145, _0x3712cc * 34, _0x3712cc * 10);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.globalAlpha = 1;
  _0xb1b1ad.translate(0, _0x3712cc * -10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 80, _0x3712cc * 79.5);
  round_rect(_0xb1b1ad, _0x3712cc * -73, _0x3712cc * -16.5, _0x3712cc * 145, _0x3712cc * 34, _0x3712cc * 10);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.globalAlpha = _0x2df3b6 ? 0.5 : 1;
  _0xb1b1ad.translate(0, _0x3712cc * 10);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 79, _0x3712cc * 71);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 90, _0x3712cc * 42, _0x3712cc * 98, _0x3712cc * 36, _0x3712cc * 109, _0x3712cc * 43);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 119, _0x3712cc * 47, _0x3712cc * 128, _0x3712cc * 62, _0x3712cc * 107, _0x3712cc * 72);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 96, _0x3712cc * 78.5, _0x3712cc * 96, _0x3712cc * 78.5, _0x3712cc * 85, _0x3712cc * 85);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 84, _0x3712cc * 78);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 113, _0x3712cc * 82, _0x3712cc * 123, _0x3712cc * 97, _0x3712cc * 115, _0x3712cc * 108);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 110, _0x3712cc * 119, _0x3712cc * 98, _0x3712cc * 124, _0x3712cc * 87, _0x3712cc * 107);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 81.5, _0x3712cc * 94.5, _0x3712cc * 81.5, _0x3712cc * 94.5, _0x3712cc * 76, _0x3712cc * 82);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 80, _0x3712cc * 73);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 64, _0x3712cc * 37, _0x3712cc * 55, _0x3712cc * 34, _0x3712cc * 45, _0x3712cc * 42);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 30, _0x3712cc * 54, _0x3712cc * 36, _0x3712cc * 65, _0x3712cc * 51, _0x3712cc * 72);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 62.5, _0x3712cc * 77, _0x3712cc * 62.5, _0x3712cc * 77, _0x3712cc * 74, _0x3712cc * 82);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 82, _0x3712cc * 83);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 73, _0x3712cc * 107, _0x3712cc * 60, _0x3712cc * 123, _0x3712cc * 47, _0x3712cc * 113);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 33, _0x3712cc * 105, _0x3712cc * 33, _0x3712cc * 92, _0x3712cc * 52, _0x3712cc * 85);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 74, _0x3712cc * 73, _0x3712cc * 77, _0x3712cc * 76, _0x3712cc * 76, _0x3712cc * 75);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.globalAlpha = 1;
  _0xb1b1ad.translate(0, _0x3712cc * -10);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 79, _0x3712cc * 71);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 90, _0x3712cc * 42, _0x3712cc * 98, _0x3712cc * 36, _0x3712cc * 109, _0x3712cc * 43);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 119, _0x3712cc * 47, _0x3712cc * 128, _0x3712cc * 62, _0x3712cc * 107, _0x3712cc * 72);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 96, _0x3712cc * 78.5, _0x3712cc * 96, _0x3712cc * 78.5, _0x3712cc * 85, _0x3712cc * 85);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 84, _0x3712cc * 78);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 113, _0x3712cc * 82, _0x3712cc * 123, _0x3712cc * 97, _0x3712cc * 115, _0x3712cc * 108);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 110, _0x3712cc * 119, _0x3712cc * 98, _0x3712cc * 124, _0x3712cc * 87, _0x3712cc * 107);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 81.5, _0x3712cc * 94.5, _0x3712cc * 81.5, _0x3712cc * 94.5, _0x3712cc * 76, _0x3712cc * 82);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 80, _0x3712cc * 73);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 64, _0x3712cc * 37, _0x3712cc * 55, _0x3712cc * 34, _0x3712cc * 45, _0x3712cc * 42);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 30, _0x3712cc * 54, _0x3712cc * 36, _0x3712cc * 65, _0x3712cc * 51, _0x3712cc * 72);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 62.5, _0x3712cc * 77, _0x3712cc * 62.5, _0x3712cc * 77, _0x3712cc * 74, _0x3712cc * 82);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.beginPath();
  _0xb1b1ad.lineCap = "round";
  _0xb1b1ad.lineJoin = "round";
  _0xb1b1ad.moveTo(_0x3712cc * 82, _0x3712cc * 83);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 73, _0x3712cc * 107, _0x3712cc * 60, _0x3712cc * 123, _0x3712cc * 47, _0x3712cc * 113);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 33, _0x3712cc * 105, _0x3712cc * 33, _0x3712cc * 92, _0x3712cc * 52, _0x3712cc * 85);
  _0xb1b1ad.bezierCurveTo(_0x3712cc * 74, _0x3712cc * 73, _0x3712cc * 77, _0x3712cc * 76, _0x3712cc * 76, _0x3712cc * 75);
  _0xb1b1ad.closePath();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  _0xb1b1ad.globalAlpha = _0x2df3b6 ? 0.5 : 1;
  _0xb1b1ad.translate(0, _0x3712cc * 10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 78.5, _0x3712cc * 78);
  round_rect(_0xb1b1ad, _0x3712cc * -13.5, _0x3712cc * -14, _0x3712cc * 27, _0x3712cc * 27, _0x3712cc * 6);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[0]);
  _0xb1b1ad.globalAlpha = 1;
  _0xb1b1ad.translate(0, _0x3712cc * -10);
  _0xb1b1ad.save();
  _0xb1b1ad.translate(_0x3712cc * 78.5, _0x3712cc * 78);
  round_rect(_0xb1b1ad, _0x3712cc * -13.5, _0x3712cc * -14, _0x3712cc * 27, _0x3712cc * 27, _0x3712cc * 6);
  _0xb1b1ad.restore();
  fill_path(_0xb1b1ad, _0x6c5373[3], _0x6c5373[4], _0x3712cc * 6);
  return _0x11d9cd;
}
function create_crown_life(_0x39664d, _0x25bc7c, _0x3a6da7) {
  var _0x53f62e = document.createElement("canvas");
  var _0x5851ee = _0x53f62e.getContext("2d");
  _0x53f62e.width = _0x39664d * 372;
  _0x53f62e.height = _0x39664d * 358;
  _0x5851ee.translate(_0x39664d * 0, _0x39664d * 10);
  _0x5851ee.globalAlpha = _0x25bc7c ? 0.2 : 1;
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 247.00003051757812, _0x39664d * 115.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 305.0000305175781, _0x39664d * 124.76704406738281, _0x39664d * 335.0000305175781, _0x39664d * 112.76704406738281, _0x39664d * 359.0000305175781, _0x39664d * 93.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 359.5000305175781, _0x39664d * 113.26704406738281, _0x39664d * 359.5000305175781, _0x39664d * 113.26704406738281, _0x39664d * 360.0000305175781, _0x39664d * 132.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 339.0000305175781, _0x39664d * 177.7670440673828, _0x39664d * 281.0000305175781, _0x39664d * 178.7670440673828, _0x39664d * 243.00003051757812, _0x39664d * 183.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 214.50003051757812, _0x39664d * 214.2670440673828, _0x39664d * 214.50003051757812, _0x39664d * 214.2670440673828, _0x39664d * 186.00003051757812, _0x39664d * 244.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 155.00003051757812, _0x39664d * 214.2670440673828, _0x39664d * 155.00003051757812, _0x39664d * 214.2670440673828, _0x39664d * 124.00003051757812, _0x39664d * 183.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 51.000030517578125, _0x39664d * 180.7670440673828, _0x39664d * 21.000030517578125, _0x39664d * 161.7670440673828, _0x39664d * 9.000030517578125, _0x39664d * 129.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 8.500030517578125, _0x39664d * 110.76704406738281, _0x39664d * 8.500030517578125, _0x39664d * 110.76704406738281, _0x39664d * 8.000030517578125, _0x39664d * 91.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 31.000030517578125, _0x39664d * 112.76704406738281, _0x39664d * 87.00003051757812, _0x39664d * 119.76704406738281, _0x39664d * 116.00003051757812, _0x39664d * 117.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 175.00003051757812, _0x39664d * 18.767044067382812, _0x39664d * 170.00003051757812, _0x39664d * 23.767044067382812, _0x39664d * 181.00003051757812, _0x39664d * 14.767044067382812);
  _0x5851ee.bezierCurveTo(_0x39664d * 199.00003051757812, _0x39664d * 34.76704406738281, _0x39664d * 203.00003051757812, _0x39664d * 54.76704406738281, _0x39664d * 247.00003051757812, _0x39664d * 115.76704406738281);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[0], _0x3a6da7[0], _0x39664d * 10);
  _0x5851ee.translate(_0x39664d * 0, _0x39664d * -10);
  _0x5851ee.globalAlpha = 1;
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 107.00003051757812, _0x39664d * 54.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 106.50003051757812, _0x39664d * 38.63069152832031, _0x39664d * 106.50003051757812, _0x39664d * 38.63069152832031, _0x39664d * 106.00003051757812, _0x39664d * 23.130691528320312);
  _0x5851ee.bezierCurveTo(_0x39664d * 121.50003051757812, _0x39664d * 38.13069152832031, _0x39664d * 121.50003051757812, _0x39664d * 38.13069152832031, _0x39664d * 137.00003051757812, _0x39664d * 53.13069152832031);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 233.00003051757812, _0x39664d * 53.6761474609375);
  _0x5851ee.bezierCurveTo(_0x39664d * 247.00003051757812, _0x39664d * 37.1761474609375, _0x39664d * 247.00003051757812, _0x39664d * 37.1761474609375, _0x39664d * 261.0000305175781, _0x39664d * 20.6761474609375);
  _0x5851ee.bezierCurveTo(_0x39664d * 261.0000305175781, _0x39664d * 36.1761474609375, _0x39664d * 261.0000305175781, _0x39664d * 36.1761474609375, _0x39664d * 261.0000305175781, _0x39664d * 51.6761474609375);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 293.0000305175781, _0x39664d * 54.403411865234375);
  _0x5851ee.bezierCurveTo(_0x39664d * 300.0000305175781, _0x39664d * 49.903411865234375, _0x39664d * 300.0000305175781, _0x39664d * 49.903411865234375, _0x39664d * 307.0000305175781, _0x39664d * 45.403411865234375);
  _0x5851ee.bezierCurveTo(_0x39664d * 307.0000305175781, _0x39664d * 49.903411865234375, _0x39664d * 307.0000305175781, _0x39664d * 49.903411865234375, _0x39664d * 307.0000305175781, _0x39664d * 54.403411865234375);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 77.00003051757812, _0x39664d * 54.403411865234375);
  _0x5851ee.bezierCurveTo(_0x39664d * 70.00003051757812, _0x39664d * 50.403411865234375, _0x39664d * 70.00003051757812, _0x39664d * 50.403411865234375, _0x39664d * 63.000030517578125, _0x39664d * 46.403411865234375);
  _0x5851ee.bezierCurveTo(_0x39664d * 62.500030517578125, _0x39664d * 50.903411865234375, _0x39664d * 62.500030517578125, _0x39664d * 50.903411865234375, _0x39664d * 62.000030517578125, _0x39664d * 55.403411865234375);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 58.000030517578125, _0x39664d * 122.3125);
  _0x5851ee.bezierCurveTo(_0x39664d * 59.500030517578125, _0x39664d * 97.3125, _0x39664d * 59.500030517578125, _0x39664d * 97.3125, _0x39664d * 61.000030517578125, _0x39664d * 72.3125);
  _0x5851ee.bezierCurveTo(_0x39664d * 91.00003051757812, _0x39664d * 89.3125, _0x39664d * 91.00003051757812, _0x39664d * 89.3125, _0x39664d * 121.00003051757812, _0x39664d * 106.3125);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[1], _0x3a6da7[1], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 310.0000305175781, _0x39664d * 127.3125);
  _0x5851ee.bezierCurveTo(_0x39664d * 308.0000305175781, _0x39664d * 98.3125, _0x39664d * 308.0000305175781, _0x39664d * 98.3125, _0x39664d * 306.0000305175781, _0x39664d * 69.3125);
  _0x5851ee.bezierCurveTo(_0x39664d * 274.5000305175781, _0x39664d * 88.8125, _0x39664d * 274.5000305175781, _0x39664d * 88.8125, _0x39664d * 243.00003051757812, _0x39664d * 108.3125);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[1], _0x3a6da7[1], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 226.00003051757812, _0x39664d * 87.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 243.50003051757812, _0x39664d * 66.85795593261719, _0x39664d * 243.50003051757812, _0x39664d * 66.85795593261719, _0x39664d * 261.0000305175781, _0x39664d * 45.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 265.0000305175781, _0x39664d * 83.85795593261719, _0x39664d * 265.0000305175781, _0x39664d * 83.85795593261719, _0x39664d * 269.0000305175781, _0x39664d * 121.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 235.00003051757812, _0x39664d * 122.85795593261719, _0x39664d * 233.00003051757812, _0x39664d * 107.85795593261719, _0x39664d * 228.00003051757812, _0x39664d * 90.85795593261719);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 105.00003051757812, _0x39664d * 128.8579559326172);
  _0x5851ee.bezierCurveTo(_0x39664d * 104.50003051757812, _0x39664d * 87.85795593261719, _0x39664d * 104.50003051757812, _0x39664d * 87.85795593261719, _0x39664d * 104.00003051757812, _0x39664d * 46.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 126.50003051757812, _0x39664d * 69.35795593261719, _0x39664d * 126.50003051757812, _0x39664d * 69.35795593261719, _0x39664d * 149.00003051757812, _0x39664d * 91.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 130.00003051757812, _0x39664d * 123.85795593261719, _0x39664d * 123.00003051757812, _0x39664d * 132.8579559326172, _0x39664d * 107.00003051757812, _0x39664d * 130.8579559326172);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[1], _0x3a6da7[1], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 59.000030517578125, _0x39664d * 121.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 59.500030517578125, _0x39664d * 99.35795593261719, _0x39664d * 59.500030517578125, _0x39664d * 99.35795593261719, _0x39664d * 60.000030517578125, _0x39664d * 76.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 84.00003051757812, _0x39664d * 92.35795593261719, _0x39664d * 84.00003051757812, _0x39664d * 92.35795593261719, _0x39664d * 108.00003051757812, _0x39664d * 107.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 106.00003051757812, _0x39664d * 148.8579559326172, _0x39664d * 86.00003051757812, _0x39664d * 148.8579559326172, _0x39664d * 62.000030517578125, _0x39664d * 123.85795593261719);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 105.00003051757812, _0x39664d * 132.8579559326172);
  _0x5851ee.bezierCurveTo(_0x39664d * 104.50003051757812, _0x39664d * 93.35795593261719, _0x39664d * 104.50003051757812, _0x39664d * 93.35795593261719, _0x39664d * 104.00003051757812, _0x39664d * 53.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 126.50003051757812, _0x39664d * 75.85795593261719, _0x39664d * 126.50003051757812, _0x39664d * 75.85795593261719, _0x39664d * 149.00003051757812, _0x39664d * 97.85795593261719);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 311.0000305175781, _0x39664d * 126.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 309.0000305175781, _0x39664d * 101.35795593261719, _0x39664d * 309.0000305175781, _0x39664d * 101.35795593261719, _0x39664d * 307.0000305175781, _0x39664d * 75.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 271.0000305175781, _0x39664d * 96.85795593261719, _0x39664d * 271.0000305175781, _0x39664d * 96.85795593261719, _0x39664d * 235.00003051757812, _0x39664d * 117.85795593261719);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 228.00003051757812, _0x39664d * 96.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 244.50003051757812, _0x39664d * 74.85795593261719, _0x39664d * 244.50003051757812, _0x39664d * 74.85795593261719, _0x39664d * 261.0000305175781, _0x39664d * 52.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 265.5000305175781, _0x39664d * 89.85795593261719, _0x39664d * 265.5000305175781, _0x39664d * 89.85795593261719, _0x39664d * 270.0000305175781, _0x39664d * 126.85795593261719);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 12.000030517578125, _0x39664d * 86.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 36.000030517578125, _0x39664d * 113.13069152832031, _0x39664d * 84.00003051757812, _0x39664d * 111.13069152832031, _0x39664d * 116.00003051757812, _0x39664d * 113.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 164.00003051757812, _0x39664d * 23.130691528320312, _0x39664d * 172.00003051757812, _0x39664d * 18.130691528320312, _0x39664d * 181.00003051757812, _0x39664d * 9.130691528320312);
  _0x5851ee.bezierCurveTo(_0x39664d * 199.00003051757812, _0x39664d * 29.130691528320312, _0x39664d * 221.00003051757812, _0x39664d * 78.13069152832031, _0x39664d * 247.00003051757812, _0x39664d * 112.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 301.0000305175781, _0x39664d * 122.13069152832031, _0x39664d * 338.0000305175781, _0x39664d * 111.13069152832031, _0x39664d * 359.0000305175781, _0x39664d * 94.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 359.0000305175781, _0x39664d * 113.13069152832031, _0x39664d * 358.5000305175781, _0x39664d * 105.13069152832031, _0x39664d * 358.0000305175781, _0x39664d * 116.13069152832031);
  _0x5851ee.bezierCurveTo(_0x39664d * 270.5000305175781, _0x39664d * 130.1306915283203, _0x39664d * 270.5000305175781, _0x39664d * 130.1306915283203, _0x39664d * 183.00003051757812, _0x39664d * 144.1306915283203);
  _0x5851ee.bezierCurveTo(_0x39664d * 98.00003051757812, _0x39664d * 128.6306915283203, _0x39664d * 98.00003051757812, _0x39664d * 128.6306915283203, _0x39664d * 13.000030517578125, _0x39664d * 113.13069152832031);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[1], _0x3a6da7[1], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 247.00003051757812, _0x39664d * 115.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 305.0000305175781, _0x39664d * 124.76704406738281, _0x39664d * 335.0000305175781, _0x39664d * 112.76704406738281, _0x39664d * 359.0000305175781, _0x39664d * 93.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 359.5000305175781, _0x39664d * 113.26704406738281, _0x39664d * 359.5000305175781, _0x39664d * 113.26704406738281, _0x39664d * 360.0000305175781, _0x39664d * 132.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 339.0000305175781, _0x39664d * 177.7670440673828, _0x39664d * 281.0000305175781, _0x39664d * 178.7670440673828, _0x39664d * 243.00003051757812, _0x39664d * 183.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 214.50003051757812, _0x39664d * 214.2670440673828, _0x39664d * 214.50003051757812, _0x39664d * 214.2670440673828, _0x39664d * 186.00003051757812, _0x39664d * 244.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 155.00003051757812, _0x39664d * 214.2670440673828, _0x39664d * 155.00003051757812, _0x39664d * 214.2670440673828, _0x39664d * 124.00003051757812, _0x39664d * 183.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 51.000030517578125, _0x39664d * 180.7670440673828, _0x39664d * 21.000030517578125, _0x39664d * 161.7670440673828, _0x39664d * 9.000030517578125, _0x39664d * 129.7670440673828);
  _0x5851ee.bezierCurveTo(_0x39664d * 8.500030517578125, _0x39664d * 110.76704406738281, _0x39664d * 8.500030517578125, _0x39664d * 110.76704406738281, _0x39664d * 8.000030517578125, _0x39664d * 91.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 31.000030517578125, _0x39664d * 112.76704406738281, _0x39664d * 87.00003051757812, _0x39664d * 119.76704406738281, _0x39664d * 116.00003051757812, _0x39664d * 117.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 175.00003051757812, _0x39664d * 18.767044067382812, _0x39664d * 170.00003051757812, _0x39664d * 23.767044067382812, _0x39664d * 181.00003051757812, _0x39664d * 14.767044067382812);
  _0x5851ee.bezierCurveTo(_0x39664d * 199.00003051757812, _0x39664d * 34.76704406738281, _0x39664d * 203.00003051757812, _0x39664d * 54.76704406738281, _0x39664d * 247.00003051757812, _0x39664d * 115.76704406738281);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 27.000030517578125, _0x39664d * 94.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 11.000030517578125, _0x39664d * 81.76704406738281, _0x39664d * 31.000030517578125, _0x39664d * 72.76704406738281, _0x39664d * 44.000030517578125, _0x39664d * 59.76704406738281);
  _0x5851ee.bezierCurveTo(_0x39664d * 9.000030517578125, _0x39664d * 65.76704406738281, _0x39664d * 4.000030517578125, _0x39664d * 78.76704406738281, _0x39664d * 9.000030517578125, _0x39664d * 89.76704406738281);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 352.0000305175781, _0x39664d * 100.76705932617188);
  _0x5851ee.bezierCurveTo(_0x39664d * 362.0000305175781, _0x39664d * 92.76705932617188, _0x39664d * 352.0000305175781, _0x39664d * 84.76705932617188, _0x39664d * 340.0000305175781, _0x39664d * 68.76705932617188);
  _0x5851ee.bezierCurveTo(_0x39664d * 360.0000305175781, _0x39664d * 69.76705932617188, _0x39664d * 364.0000305175781, _0x39664d * 79.76705932617188, _0x39664d * 364.0000305175781, _0x39664d * 94.76705932617188);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[1], _0x3a6da7[1], _0x39664d * 1);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 25.000030517578125, _0x39664d * 97.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 2.000030517578125, _0x39664d * 76.94886779785156, _0x39664d * 29.000030517578125, _0x39664d * 62.94886779785156, _0x39664d * 44.000030517578125, _0x39664d * 59.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 8.000030517578125, _0x39664d * 59.94886779785156, _0x39664d * -0.999969482421875, _0x39664d * 81.94886779785156, _0x39664d * 4.000030517578125, _0x39664d * 92.94886779785156);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[3]);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 349.0000305175781, _0x39664d * 100.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 366.0000305175781, _0x39664d * 82.94886779785156, _0x39664d * 353.0000305175781, _0x39664d * 76.94886779785156, _0x39664d * 337.0000305175781, _0x39664d * 67.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 366.0000305175781, _0x39664d * 69.94886779785156, _0x39664d * 366.0000305175781, _0x39664d * 83.94886779785156, _0x39664d * 363.0000305175781, _0x39664d * 101.94886779785156);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[2], _0x3a6da7[3], _0x39664d * 10);
  circle(_0x5851ee, _0x39664d * 46.000030517578125, _0x39664d * 137.5852279663086, _0x39664d * 9.219544457292887);
  fill_path(_0x5851ee, _0x3a6da7[4], _0x3a6da7[5], _0x39664d * 1);
  circle(_0x5851ee, _0x39664d * 308.0000305175781, _0x39664d * 141.5852279663086, _0x39664d * 8.54400374531753);
  fill_path(_0x5851ee, _0x3a6da7[4], _0x3a6da7[5], _0x39664d * 1);
  circle(_0x5851ee, _0x39664d * 92.00003051757812, _0x39664d * 149.58523559570312, _0x39664d * 14.866068747318506);
  fill_path(_0x5851ee, _0x3a6da7[4], _0x3a6da7[5], _0x39664d * 1);
  circle(_0x5851ee, _0x39664d * 262.0000305175781, _0x39664d * 148.8579559326172, _0x39664d * 15.620499351813308);
  fill_path(_0x5851ee, _0x3a6da7[4], _0x3a6da7[5], _0x39664d * 1);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 184.00003051757812, _0x39664d * 68.85795593261719);
  _0x5851ee.bezierCurveTo(_0x39664d * 203.00003051757812, _0x39664d * 108.85795593261719, _0x39664d * 203.00003051757812, _0x39664d * 108.85795593261719, _0x39664d * 222.00003051757812, _0x39664d * 148.8579559326172);
  _0x5851ee.bezierCurveTo(_0x39664d * 202.50003051757812, _0x39664d * 177.8579559326172, _0x39664d * 202.50003051757812, _0x39664d * 177.8579559326172, _0x39664d * 183.00003051757812, _0x39664d * 206.8579559326172);
  _0x5851ee.bezierCurveTo(_0x39664d * 162.00003051757812, _0x39664d * 178.8579559326172, _0x39664d * 162.00003051757812, _0x39664d * 178.8579559326172, _0x39664d * 141.00003051757812, _0x39664d * 150.8579559326172);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[4], _0x3a6da7[5], _0x39664d * 10);
  _0x5851ee.beginPath();
  _0x5851ee.lineCap = "round";
  _0x5851ee.lineJoin = "round";
  _0x5851ee.moveTo(_0x39664d * 183.00003051757812, _0x39664d * 104.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 192.50003051757812, _0x39664d * 125.44886779785156, _0x39664d * 192.50003051757812, _0x39664d * 125.44886779785156, _0x39664d * 202.00003051757812, _0x39664d * 145.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 192.00003051757812, _0x39664d * 163.94886779785156, _0x39664d * 192.00003051757812, _0x39664d * 163.94886779785156, _0x39664d * 182.00003051757812, _0x39664d * 181.94886779785156);
  _0x5851ee.bezierCurveTo(_0x39664d * 172.50003051757812, _0x39664d * 164.44886779785156, _0x39664d * 172.50003051757812, _0x39664d * 164.44886779785156, _0x39664d * 163.00003051757812, _0x39664d * 146.94886779785156);
  _0x5851ee.closePath();
  fill_path(_0x5851ee, _0x3a6da7[6]);
  return _0x53f62e;
}
function create_background_market() {
  var _0x6d6f23 = document.createElement("canvas");
  var _0xd070e6 = _0x6d6f23.getContext("2d");
  _0x6d6f23.width = 460;
  _0x6d6f23.height = 220;
  _0xd070e6.fillStyle = "#3a2a0d";
  _0xd070e6.fillRect(0, 0, _0x6d6f23.width, _0x6d6f23.height);
  _0xd070e6.lineWidth = 4;
  _0xd070e6.beginPath();
  _0xd070e6.strokeStyle = "#513810";
  for (var _0x981c10 = 20; _0x981c10 < 220; _0x981c10 += 20) {
    _0xd070e6.moveTo(0, _0x981c10);
    _0xd070e6.lineTo(460, _0x981c10);
    _0xd070e6.closePath();
    _0xd070e6.stroke();
  }
  return _0x6d6f23;
}
function create_gauges(_0x2c91a5) {
  var _0x4de000 = document.createElement("canvas");
  var _0x59060c = _0x4de000.getContext("2d");
  var _0x36f4d5 = _0x2c91a5 * 950;
  var _0xbf2fa4 = _0x2c91a5 * 180;
  var _0x3ddc19 = _0x2c91a5 * 50;
  var _0x4c302d = _0x2c91a5 * 20;
  var _0x2dd8c4 = _0x2c91a5 * 240;
  var _0x14da0a = _0x2c91a5 * 35;
  var _0x3205e8 = _0x2c91a5 * 1;
  var _0x41fe36 = _0x2c91a5 * 4;
  var _0x520f4d = _0x2c91a5 * 4;
  _0x4de000.width = _0x36f4d5;
  _0x4de000.height = _0x3ddc19;
  _0x59060c.translate(0, _0x2c91a5 * 15);
  round_rect(_0x59060c, _0x14da0a, _0x3205e8, _0xbf2fa4, _0x4c302d, _0x41fe36);
  fill_path(_0x59060c, null, "#69A148", _0x520f4d);
  var _0x36a884 = sprite[SPRITE.HEART_SYMBOL_HUD];
  _0x59060c.drawImage(_0x36a884, 17, -8);
  _0x59060c.translate(_0x2dd8c4, 0);
  round_rect(_0x59060c, _0x14da0a, _0x3205e8, _0xbf2fa4, _0x4c302d, _0x41fe36);
  fill_path(_0x59060c, null, "#AF352A", _0x520f4d);
  var _0x36a884 = sprite[SPRITE.FOOD_SYMBOL_HUD];
  _0x59060c.drawImage(_0x36a884, 17, -9);
  _0x59060c.translate(_0x2dd8c4, 0);
  round_rect(_0x59060c, _0x14da0a, _0x3205e8, _0xbf2fa4, _0x4c302d, _0x41fe36);
  fill_path(_0x59060c, null, "#669BB1", _0x520f4d);
  var _0x36a884 = sprite[SPRITE.COLD_SYMBOL_HUD];
  _0x59060c.drawImage(_0x36a884, 17, -8);
  _0x59060c.translate(_0x2dd8c4, 0);
  round_rect(_0x59060c, _0x14da0a, _0x3205e8, _0xbf2fa4, _0x4c302d, _0x41fe36);
  fill_path(_0x59060c, null, "#074A87", _0x520f4d);
  var _0x36a884 = sprite[SPRITE.WATER_SYMBOL_HUD];
  _0x59060c.drawImage(_0x36a884, 17, -8);
  return _0x4de000;
}
function _load_images() {
  var _0x3ca288 = new Date().getTime();
  render_cosmetics();
  function _0x5b2019(_0x545271) {
    var _0x5a81b1 = 0;
    for (var _0xadd0e0 = 0, _0x1b7481 = 0; _0xadd0e0 < _0x545271.length; _0xadd0e0++) {
      var _0x17972b = _0x545271.charAt(_0xadd0e0);
      if (_0x17972b === "_" || _0xadd0e0 === 5) {
        continue;
      }
      if (_0x17972b === "1") {
        _0x5a81b1 += Math.pow(2, _0x1b7481);
      }
      _0x1b7481++;
    }
    return _0x5a81b1;
  }
  sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN];
  sprite[SPRITE.RIVER_DECO] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_010_000")] = [IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_011_010")] = [IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_011_011")] = [IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO8, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_111_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_111_111")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_010_000")] = [IMAGES.DAY_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_010_010")] = [IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_011_000")] = [IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_000")] = [IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_011_000")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_011_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_011_011")] = [IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_010")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("011_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_110_000")] = [IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_110_010")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_110_110")] = [IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_000")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_110")] = [IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_110")] = [IMAGES.DAY_RIVER_COMPO28, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO14, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_000")] = [IMAGES.DAY_RIVER_COMPO12, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_111")] = [IMAGES.DAY_RIVER_COMPO1, IMAGES.DAY_RIVER_COMPO2, IMAGES.DAY_RIVER_COMPO3, IMAGES.DAY_RIVER_COMPO4, IMAGES.DAY_RIVER_COMPO5, IMAGES.DAY_RIVER_COMPO6, IMAGES.DAY_RIVER_COMPO7, IMAGES.DAY_RIVER_COMPO9, IMAGES.DAY_RIVER_COMPO10, IMAGES.DAY_RIVER_COMPO11, IMAGES.DAY_RIVER_COMPO13, IMAGES.DAY_RIVER_COMPO15, IMAGES.DAY_RIVER_COMPO16, IMAGES.DAY_RIVER_COMPO17, IMAGES.DAY_RIVER_COMPO18, IMAGES.DAY_RIVER_COMPO19, IMAGES.DAY_RIVER_COMPO20, IMAGES.DAY_RIVER_COMPO21, IMAGES.DAY_RIVER_COMPO22, IMAGES.DAY_RIVER_COMPO23, IMAGES.DAY_RIVER_COMPO24, IMAGES.DAY_RIVER_COMPO25, IMAGES.DAY_RIVER_COMPO26, IMAGES.DAY_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.DAY][_0x5b2019("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_010_000")] = [IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_010_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_011_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_010_000")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_011_010")] = [IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_011_011")] = [IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO8, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO27];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_111_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_111_111")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO13];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_010_000")] = [IMAGES.NIGHT_RIVER_COMPO20];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_010_010")] = [IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_011_000")] = [IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_000")] = [IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_011_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_011_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("000_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("010_110_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_011_000")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_011_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_011_011")] = [IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO15];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_000")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_011_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_010")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_110")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_010")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("011_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_110_000")] = [IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_110_010")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_110_110")] = [IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_000")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_110")] = [IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_111")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("110_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_110")] = [IMAGES.NIGHT_RIVER_COMPO28, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO14, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_011")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_110")];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_000")] = [IMAGES.NIGHT_RIVER_COMPO12, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO14];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_111")] = [IMAGES.NIGHT_RIVER_COMPO1, IMAGES.NIGHT_RIVER_COMPO2, IMAGES.NIGHT_RIVER_COMPO3, IMAGES.NIGHT_RIVER_COMPO4, IMAGES.NIGHT_RIVER_COMPO5, IMAGES.NIGHT_RIVER_COMPO6, IMAGES.NIGHT_RIVER_COMPO7, IMAGES.NIGHT_RIVER_COMPO9, IMAGES.NIGHT_RIVER_COMPO10, IMAGES.NIGHT_RIVER_COMPO11, IMAGES.NIGHT_RIVER_COMPO13, IMAGES.NIGHT_RIVER_COMPO15, IMAGES.NIGHT_RIVER_COMPO16, IMAGES.NIGHT_RIVER_COMPO17, IMAGES.NIGHT_RIVER_COMPO18, IMAGES.NIGHT_RIVER_COMPO19, IMAGES.NIGHT_RIVER_COMPO20, IMAGES.NIGHT_RIVER_COMPO21, IMAGES.NIGHT_RIVER_COMPO22, IMAGES.NIGHT_RIVER_COMPO23, IMAGES.NIGHT_RIVER_COMPO24, IMAGES.NIGHT_RIVER_COMPO25, IMAGES.NIGHT_RIVER_COMPO26, IMAGES.NIGHT_RIVER_COMPO28];
  sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_010")] = sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][_0x5b2019("111_111_110")];
  sprite[SPRITE.RIVER] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY] = [];
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_010_000")] = IMAGES.DAY_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_010_010")] = IMAGES.DAY_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_011_000")] = IMAGES.DAY_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_011_010")] = IMAGES.DAY_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_011_011")] = IMAGES.DAY_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_110_000")] = IMAGES.DAY_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_110_010")] = IMAGES.DAY_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_110_110")] = IMAGES.DAY_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_111_000")] = IMAGES.DAY_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_111_010")] = IMAGES.DAY_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_111_011")] = IMAGES.DAY_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_111_110")] = IMAGES.DAY_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("000_111_111")] = IMAGES.DAY_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_010_000")] = IMAGES.DAY_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_010_010")] = IMAGES.DAY_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_011_000")] = IMAGES.DAY_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_011_010")] = IMAGES.DAY_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_011_011")] = IMAGES.DAY_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_110_000")] = IMAGES.DAY_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_110_010")] = IMAGES.DAY_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_110_110")] = IMAGES.DAY_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_111_000")] = IMAGES.DAY_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_111_010")] = IMAGES.DAY_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_111_011")] = IMAGES.DAY_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_111_110")] = IMAGES.DAY_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("010_111_111")] = IMAGES.DAY_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_011_000")] = IMAGES.DAY_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_011_010")] = IMAGES.DAY_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_011_011")] = IMAGES.DAY_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_111_000")] = IMAGES.DAY_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_111_010")] = IMAGES.DAY_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_111_011")] = IMAGES.DAY_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_111_110")] = IMAGES.DAY_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("011_111_111")] = IMAGES.DAY_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_110_000")] = IMAGES.DAY_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_110_010")] = IMAGES.DAY_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_110_110")] = IMAGES.DAY_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_111_000")] = IMAGES.DAY_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_111_010")] = IMAGES.DAY_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_111_011")] = IMAGES.DAY_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_111_110")] = IMAGES.DAY_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("110_111_111")] = IMAGES.DAY_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_110")] = IMAGES.DAY_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_011")] = IMAGES.DAY_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_000")] = IMAGES.DAY_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_111")] = IMAGES.DAY_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.DAY][_0x5b2019("111_111_010")] = IMAGES.DAY_RIVER_111_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT] = [];
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_010_000")] = IMAGES.NIGHT_RIVER_000_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_010_010")] = IMAGES.NIGHT_RIVER_000_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_011_000")] = IMAGES.NIGHT_RIVER_000_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_011_010")] = IMAGES.NIGHT_RIVER_000_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_011_011")] = IMAGES.NIGHT_RIVER_000_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_110_000")] = IMAGES.NIGHT_RIVER_000_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_110_010")] = IMAGES.NIGHT_RIVER_000_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_110_110")] = IMAGES.NIGHT_RIVER_000_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_111_000")] = IMAGES.NIGHT_RIVER_000_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_111_010")] = IMAGES.NIGHT_RIVER_000_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_111_011")] = IMAGES.NIGHT_RIVER_000_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_111_110")] = IMAGES.NIGHT_RIVER_000_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("000_111_111")] = IMAGES.NIGHT_RIVER_000_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_010_000")] = IMAGES.NIGHT_RIVER_010_010_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_010_010")] = IMAGES.NIGHT_RIVER_010_010_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_011_000")] = IMAGES.NIGHT_RIVER_010_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_011_010")] = IMAGES.NIGHT_RIVER_010_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_011_011")] = IMAGES.NIGHT_RIVER_010_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_110_000")] = IMAGES.NIGHT_RIVER_010_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_110_010")] = IMAGES.NIGHT_RIVER_010_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_110_110")] = IMAGES.NIGHT_RIVER_010_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_111_000")] = IMAGES.NIGHT_RIVER_010_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_111_010")] = IMAGES.NIGHT_RIVER_010_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_111_011")] = IMAGES.NIGHT_RIVER_010_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_111_110")] = IMAGES.NIGHT_RIVER_010_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("010_111_111")] = IMAGES.NIGHT_RIVER_010_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_011_000")] = IMAGES.NIGHT_RIVER_011_011_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_011_010")] = IMAGES.NIGHT_RIVER_011_011_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_011_011")] = IMAGES.NIGHT_RIVER_011_011_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_111_000")] = IMAGES.NIGHT_RIVER_011_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_111_010")] = IMAGES.NIGHT_RIVER_011_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_111_011")] = IMAGES.NIGHT_RIVER_011_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_111_110")] = IMAGES.NIGHT_RIVER_011_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("011_111_111")] = IMAGES.NIGHT_RIVER_011_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_110_000")] = IMAGES.NIGHT_RIVER_110_110_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_110_010")] = IMAGES.NIGHT_RIVER_110_110_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_110_110")] = IMAGES.NIGHT_RIVER_110_110_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_111_000")] = IMAGES.NIGHT_RIVER_110_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_111_010")] = IMAGES.NIGHT_RIVER_110_111_010;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_111_011")] = IMAGES.NIGHT_RIVER_110_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_111_110")] = IMAGES.NIGHT_RIVER_110_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("110_111_111")] = IMAGES.NIGHT_RIVER_110_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_110")] = IMAGES.NIGHT_RIVER_111_111_110;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_011")] = IMAGES.NIGHT_RIVER_111_111_011;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_000")] = IMAGES.NIGHT_RIVER_111_111_000;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_111")] = IMAGES.NIGHT_RIVER_111_111_111;
  sprite[SPRITE.RIVER][SPRITE.NIGHT][_0x5b2019("111_111_010")] = IMAGES.NIGHT_RIVER_111_111_010;
  sprite[SPRITE.PICK_REIDITE] = [];
  sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED;
  sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN;
  sprite[SPRITE.CARROT] = [];
  sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD;
  sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN;
  sprite[SPRITE.TOMATO_MINI] = [];
  sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID;
  sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ;
  sprite[SPRITE.TOMATO] = [];
  sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD;
  sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON;
  sprite[SPRITE.DRIED_CARROT] = [];
  sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD;
  sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN;
  sprite[SPRITE.DRIED_TOMATO_MINI] = [];
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
  sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
  sprite[SPRITE.WATERMELON] = [];
  sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND;
  sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN;
  sprite[SPRITE.DRIED_WATERMELON] = [];
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND;
  sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN;
  sprite[SPRITE.ALOE_VERA_GROWN] = [];
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND;
  sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
  sprite[SPRITE.DRIED_ALOE_VERA] = [];
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD;
  sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
  sprite[SPRITE.CACTUS] = [];
  sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD];
  sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN];
  sprite[SPRITE.REIDITE_WALL] = [];
  sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD;
  sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN;
  sprite[SPRITE.REIDITE_SPIKE] = [];
  sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
  sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR] = [];
  sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD;
  sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN;
  sprite[SPRITE.WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED;
  sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
  sprite[SPRITE.STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED;
  sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
  sprite[SPRITE.GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED;
  sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
  sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
  sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.AMETHYST_DOOR_SPIKEN;
  sprite[SPRITE.REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
  sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
  sprite[SPRITE.GOLDEN_HEN] = [];
  sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND;
  sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN;
  sprite[SPRITE.GOLDEN_CHICKEN] = [];
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND;
  sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN;
  sprite[SPRITE.HAMMER_REIDITE] = [];
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED;
  sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN;
  sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
  sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
  sprite[SPRITE.FOG] = [];
  sprite[SPRITE.FOG][SPRITE.DAY] = [];
  sprite[SPRITE.FOG][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D);
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N);
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N);
  sprite[SPRITE.FOD] = [];
  sprite[SPRITE.FOD][SPRITE.DAY] = [];
  sprite[SPRITE.FOD][SPRITE.NIGHT] = [];
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D);
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N);
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N);
  sprite[SPRITE.MARKER] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY] = [];
  sprite[SPRITE.MARKER][SPRITE.NIGHT] = [];
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D);
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N);
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N);
  sprite[SPRITE.LAVA_DRAGON] = [];
  sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND;
  sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN;
  sprite[SPRITE.LAVA_WING_LEFT] = [];
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD;
  sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN;
  sprite[SPRITE.LAVA_WING_RIGHT] = [];
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD;
  sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
  sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
  sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
  sprite[SPRITE.DIAMOND_PROTECTION] = [];
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND;
  sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.AMETHYST_PROTECTION] = [];
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND;
  sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.AMETHYST_PROTECTIONN;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.HAND_DIAMOND_PROTECTIOND;
  sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_DIAMOND_PROTECTIONN;
  sprite[SPRITE.REIDITE_HELMET] = [];
  sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD;
  sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN;
  sprite[SPRITE.REIDITE_SWORD] = [];
  sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD;
  sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN;
  sprite[SPRITE.REIDITE_SPEAR] = [];
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD;
  sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN;
  sprite[SPRITE.LAVA_SPEAR] = [];
  sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD;
  sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN;
  sprite[SPRITE.LAVA_SWORD] = [];
  sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD;
  sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN;
  sprite[SPRITE.LAVA_HELMET] = [];
  sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD;
  sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN;
  sprite[SPRITE.WITCH] = [];
  sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD;
  sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN;
  sprite[SPRITE.NIMBUS] = [];
  sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD;
  sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN;
  sprite[SPRITE.WOOD_SHIELD] = [];
  sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD;
  sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN;
  sprite[SPRITE.STONE_SHIELD] = [];
  sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD;
  sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN;
  sprite[SPRITE.GOLD_SHIELD] = [];
  sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD;
  sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN;
  sprite[SPRITE.DIAMOND_SHIELD] = [];
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD;
  sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN;
  sprite[SPRITE.AMETHYST_SHIELD] = [];
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD;
  sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN;
  sprite[SPRITE.REIDITE_SHIELD] = [];
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD;
  sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN;
  sprite[SPRITE.WOOD_ARROW] = [];
  sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD;
  sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN;
  sprite[SPRITE.WOOD_BOW] = [];
  sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD;
  sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN;
  sprite[SPRITE.STONE_ARROW] = [];
  sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD;
  sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN;
  sprite[SPRITE.STONE_BOW] = [];
  sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD;
  sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN;
  sprite[SPRITE.GOLD_ARROW] = [];
  sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD;
  sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN;
  sprite[SPRITE.GOLD_BOW] = [];
  sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD;
  sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN;
  sprite[SPRITE.DIAMOND_ARROW] = [];
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD;
  sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN;
  sprite[SPRITE.DIAMOND_BOW] = [];
  sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD;
  sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN;
  sprite[SPRITE.AMETHYST_ARROW] = [];
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD;
  sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN;
  sprite[SPRITE.AMETHYST_BOW] = [];
  sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD;
  sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN;
  sprite[SPRITE.REIDITE_ARROW] = [];
  sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD;
  sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN;
  sprite[SPRITE.REIDITE_BOW] = [];
  sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD;
  sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN;
  sprite[SPRITE.DRAGON_ARROW] = [];
  sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD;
  sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN;
  sprite[SPRITE.DRAGON_BOW] = [];
  sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD;
  sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN;
  sprite[SPRITE.TURBAN1] = [];
  sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D;
  sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N;
  sprite[SPRITE.TURBAN2] = [];
  sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D;
  sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N;
  sprite[SPRITE.REIDITE_PROTECTION] = [];
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND;
  sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.HAND_REIDITE_PROTECTIOND;
  sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.HAND_REIDITE_PROTECTIONN;
  sprite[SPRITE.LAVA_SHINGLE] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
  sprite[SPRITE.LAVA_BUBBLE] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N);
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N);
  sprite[SPRITE.PITCHFORK] = [];
  sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD;
  sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN;
  sprite[SPRITE.PITCHFORK2] = [];
  sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D;
  sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N;
  sprite[SPRITE.EMERALD] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY] = [];
  sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [];
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D);
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N);
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N);
  sprite[SPRITE.REIDITE] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY] = [];
  sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [];
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D);
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N);
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N);
  sprite[SPRITE.MAGMA] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY] = [];
  sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [];
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D);
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N);
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N);
  sprite[SPRITE.LAVA_GROUND] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N);
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N);
  sprite[SPRITE.FIRE_MOB] = [];
  sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD;
  sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN;
  sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
  sprite[SPRITE.MACHETE] = [];
  sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED;
  sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN;
  sprite[SPRITE.BOAT] = [];
  sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD;
  sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN;
  sprite[SPRITE.SLED] = [];
  sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD;
  sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN;
  sprite[SPRITE.PLANE] = [];
  sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED;
  sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN;
  sprite[SPRITE.PENGUIN] = [];
  sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND;
  sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN;
  sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
  sprite[SPRITE.SAND_WORM1] = [];
  sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D;
  sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N;
  sprite[SPRITE.SAND_WORM2] = [];
  sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D;
  sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N;
  sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
  sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
  sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
  sprite[SPRITE.SCORPION] = [];
  sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND;
  sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN;
  sprite[SPRITE.SCORPION_HAND_LEFT] = [];
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD;
  sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
  sprite[SPRITE.SCORPION_HAND_RIGHT] = [];
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
  sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_RIGHTN;
  sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION;
  sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
  sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
  sprite[SPRITE.CRAB_BOSS_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_TAMED] = [];
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
  sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
  sprite[SPRITE.CRAB_BOSS] = [];
  sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD;
  sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHTD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHTN;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
  sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
  sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
  sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [];
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
  sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_ATTACKN;
  sprite[SPRITE.BABY_MAMMOTH] = [];
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD;
  sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN;
  sprite[SPRITE.MAMMOTH] = [];
  sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD;
  sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN;
  sprite[SPRITE.BABY_MAMMOTH_TAMED] = [];
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
  sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
  sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
  sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
  sprite[SPRITE.BABY_DRAGON_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
  sprite[SPRITE.BABY_DRAGON] = [];
  sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND;
  sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN;
  sprite[SPRITE.BABY_DRAGON_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFTD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFTN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHTD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHTN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
  sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] = IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
  sprite[SPRITE.BABY_LAVA_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD;
  sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
  sprite[SPRITE.BABY_LAVA] = [];
  sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD;
  sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN;
  sprite[SPRITE.BABY_LAVA_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD;
  sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFTN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHTD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHTN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
  sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
  sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
  sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
  sprite[SPRITE.HAWK_ATTACK] = [];
  sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD;
  sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN;
  sprite[SPRITE.HAWK] = [];
  sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD;
  sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN;
  sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
  sprite[SPRITE.HAWK_GROUND] = [];
  sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD;
  sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN;
  sprite[SPRITE.HAWK_GROUND_ATTACK] = [];
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
  sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
  sprite[SPRITE.HAWK_TAMED] = [];
  sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD;
  sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN;
  sprite[SPRITE.HAWK_WING_LEFT] = [];
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD;
  sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN;
  sprite[SPRITE.HAWK_WING_RIGHT] = [];
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD;
  sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_ATTACKD;
  sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_ATTACKN;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_ATTACKD;
  sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_ATTACKN;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_LEFT_TAMEDD;
  sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFT_TAMEDN;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHT_TAMEDD;
  sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK;
  sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
  sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
  sprite[SPRITE.VULTURE_ATTACK] = [];
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD;
  sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN;
  sprite[SPRITE.VULTURE] = [];
  sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED;
  sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN;
  sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
  sprite[SPRITE.VULTURE_GROUND] = [];
  sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD;
  sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN;
  sprite[SPRITE.VULTURE_GROUND_ATTACK] = [];
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_GROUND_ATTACKD;
  sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_GROUND_ATTACKN;
  sprite[SPRITE.VULTURE_TAMED] = [];
  sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD;
  sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN;
  sprite[SPRITE.VULTURE_WING_LEFT] = [];
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD;
  sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
  sprite[SPRITE.VULTURE_WING_RIGHT] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD;
  sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_ATTACKD;
  sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_ATTACKN;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFT_TAMEDN;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHT_TAMEDD;
  sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHT_TAMEDN;
  sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE;
  sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
  sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
  sprite[SPRITE.BOAR] = [];
  sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD;
  sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN;
  sprite[SPRITE.BOAR_TAMED] = [];
  sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD;
  sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN;
  sprite[SPRITE.BOAR_ATTACK] = [];
  sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD;
  sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN;
  sprite[SPRITE.BOAR_STEP] = [];
  sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP;
  sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP;
  sprite[SPRITE.CRAB_STEP] = [];
  sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP;
  sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP] = [];
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
  sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR;
  sprite[SPRITE.SADDLE] = [];
  sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED;
  sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN;
  sprite[SPRITE.WAND1] = [];
  sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D;
  sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N;
  sprite[SPRITE.SPELL] = [];
  sprite[SPRITE.SPELL][SPRITE.DAY] = [IMAGES.LIGHT_WAND0D, IMAGES.LIGHT_WAND1D, IMAGES.WOOD_ARROWD, IMAGES.STONE_ARROWD, IMAGES.GOLD_ARROWD, IMAGES.DIAMOND_ARROWD, IMAGES.AMETHYST_ARROWD, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWD];
  sprite[SPRITE.SPELL][SPRITE.NIGHT] = [IMAGES.LIGHT_WAND0N, IMAGES.LIGHT_WAND1N, IMAGES.WOOD_ARROWN, IMAGES.STONE_ARROWN, IMAGES.GOLD_ARROWN, IMAGES.DIAMOND_ARROWN, IMAGES.AMETHYST_ARROWN, IMAGES.REIDITE_ARROWD, IMAGES.DRAGON_ARROWN];
  sprite[SPRITE.WAND2] = [];
  sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D;
  sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N;
  sprite[SPRITE.BOAT_WAVE] = [];
  sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED;
  sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN;
  sprite[SPRITE.SLED_WAVE] = [];
  sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED;
  sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN;
  sprite[SPRITE.PIRATE_HAT] = [];
  sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD;
  sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN;
  sprite[SPRITE.FUR_HAT] = [];
  sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD;
  sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN;
  sprite[SPRITE.FLOWER_HAT] = [];
  sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD;
  sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN;
  sprite[SPRITE.PILOT_HELMET] = [];
  sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD;
  sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN;
  sprite[SPRITE.LAKE_EDGE] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE);
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE);
  sprite[SPRITE.LAKE_DEEP] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP);
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP);
  sprite[SPRITE.LAKE] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY] = [];
  sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D);
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N);
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N);
  MINIMAP_UTILS.g = [];
  MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
  MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0];
  MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
  MINIMAP_UTILS.m = [];
  MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
  MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0];
  MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
  MINIMAP_UTILS.la = [];
  MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
  MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0];
  MINIMAP_UTILS.s = [];
  MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
  MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0];
  MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
  MINIMAP_UTILS.p = [];
  MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
  MINIMAP_UTILS.a = [];
  MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
  MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0];
  MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0];
  MINIMAP_UTILS.d = [];
  MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
  MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0];
  MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0];
  MINIMAP_UTILS.re = [];
  MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
  MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0];
  MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0];
  MINIMAP_UTILS.f = [];
  MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
  MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0];
  MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0];
  MINIMAP_UTILS.isl = [];
  MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
  MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0];
  MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0];
  MINIMAP_UTILS.c = [];
  MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
  MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0];
  MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0];
  MINIMAP_UTILS.wtb = [];
  MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
  MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
  MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
  MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
  MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
  MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
  MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
  MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
  MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
  MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
  MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
  MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
  MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
  for (var _0x324d5c in MINIMAP_UTILS) {
    var _0x8d4913 = MINIMAP_UTILS[_0x324d5c];
    for (var _0x180a80 = 0; _0x180a80 < _0x8d4913.length; _0x180a80++) {
      var _0x34773f = _0x8d4913[_0x180a80];
      if (_0x34773f.tryLoad !== undefined) {
        _0x34773f.tryLoad();
      } else if (_0x34773f.length > 0) {
        for (var _0x3fec15 = 0; _0x3fec15 < _0x34773f.length; _0x3fec15++) {
          if (_0x34773f[_0x3fec15].tryLoad !== undefined) {
            _0x34773f[_0x3fec15].tryLoad();
          }
        }
      }
    }
  }
  console.log("Load images", Date.now() - _0x3ca288);
}
;
function create_images() {
  var _0x19a9cc = 1;
  var _0x2c56a1 = new Date().getTime();
  _load_images();
  render_inventory();
  sprite[SPRITE.BUBBLES] = [];
  sprite[SPRITE.BUBBLES][SPRITE.DAY] = [];
  sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < SPRITE.BUBBLES_SIZES; _0x14ca96++) {
    sprite[SPRITE.BUBBLES][SPRITE.DAY].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#59B8CE")));
    sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#90DDD9")));
  }
  sprite[SPRITE.FLAKES] = [];
  sprite[SPRITE.FLAKES][SPRITE.DAY] = [];
  sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < SPRITE.FLAKES_SIZES; _0x14ca96++) {
    sprite[SPRITE.FLAKES][SPRITE.DAY].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#fff")));
    sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#fff")));
  }
  sprite[SPRITE.DESERT] = [];
  sprite[SPRITE.DESERT][SPRITE.DAY] = [];
  sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < SPRITE.FLAKES_SIZES; _0x14ca96++) {
    sprite[SPRITE.DESERT][SPRITE.DAY].push(CTI(create_flake(_0x19a9cc, 6 + _0x14ca96, "#DDCD8A")));
    sprite[SPRITE.DESERT][SPRITE.NIGHT].push(CTI(create_flake(_0x19a9cc, 6 + _0x14ca96, "#155E57")));
  }
  sprite[SPRITE.ASHES] = [];
  sprite[SPRITE.ASHES][SPRITE.DAY] = [];
  sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < SPRITE.ASHES_SIZES; _0x14ca96++) {
    sprite[SPRITE.ASHES][SPRITE.DAY].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#353326")));
    sprite[SPRITE.ASHES][SPRITE.NIGHT].push(CTI(create_flake(_0x19a9cc, 4 + _0x14ca96, "#1D2526")));
  }
  sprite[SPRITE.GARLAND] = [];
  sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#ee71a9"]));
  sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]];
  sprite[SPRITE.GARLANDS][1] = [];
  sprite[SPRITE.GARLANDS][2] = [];
  sprite[SPRITE.GARLANDS][3] = [];
  sprite[SPRITE.GARLANDS][4] = [];
  sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#e2d63b"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#309cbd"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#cd232d"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#42b672"]));
  sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI(create_garland(_0x19a9cc * 1.5, true, ["#42b672"]));
  var _0x18f965 = Utils.gup("cti", window.location.href);
  if (_0x18f965) {
    document.getElementById("version").innerHTML += "[CTI]";
  } else {
    CTI = function (_0x180d3d) {
      _0x180d3d.loaded = 1;
      return _0x180d3d;
    };
  }
  sprite[SPRITE.MARKET_BGD] = CTI(create_background_market());
  sprite[SPRITE.STONES] = [];
  sprite[SPRITE.STONES][SPRITE.DAY] = [];
  sprite[SPRITE.STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(_0x19a9cc * 1.1, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(_0x19a9cc * 0.9, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.DAY].push(CTI(create_stone(_0x19a9cc * 0.6, false, ["#0a2d18", "#c3d1cb", "#e4efe8"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(_0x19a9cc * 1.1, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(_0x19a9cc * 0.9, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(CTI(create_stone(_0x19a9cc * 0.6, false, ["#0a2728", "#3c8e88", "#40a39b"])));
  sprite[SPRITE.GOLD] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.5, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.3, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.1, false, ["#030d14", "#1b4444", "#16605a"])));
  sprite[SPRITE.DIAMOND] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 1.1, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 0.9, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 0.7, false, ["#232828", "#3fc9c9", "#74ede6"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 1.1, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 0.9, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 0.7, false, ["#030d14", "#2b9390", "#57bcb5"])));
  sprite[SPRITE.ALOE_VERA] = [];
  sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD;
  sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN;
  sprite[SPRITE.HAND_SHADOW] = [];
  sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = CTI(create_hand_shadow(_0x19a9cc * 0.6, ["#0d1b1c"]));
  sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI(create_hand_shadow(_0x19a9cc * 0.6, ["#030d14"]));
  sprite[SPRITE.GLOVES_HOOD] = [];
  sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI(create_hand(_0x19a9cc * 0.6, ["#2a2938", "#242330"]));
  sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI(create_hand(_0x19a9cc * 0.6, ["#1b1e30", "#161921"]));
  sprite[SPRITE.ZOMBIE_BODY] = [];
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI(create_zombie_boss(_0x19a9cc * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#7d7252", "#575043"]));
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI(create_zombie_boss(_0x19a9cc * 0.6, true, ["#030d14", "#11635e", "#02373e", "#0b524d", "#07423f"]));
  sprite[SPRITE.ZOMBIE_HEAD] = [];
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI(create_zombie_head(_0x19a9cc * 0.6, true, ["#0d1b1c", "#759e6e", "#55604b", "#f9ccd4", "#891a1e", "#da232e", "#a52026", "#a02d28", "#721819", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI(create_zombie_head(_0x19a9cc * 0.6, true, ["#030d14", "#11635e", "#02373e", "#167771", "#0c5752", "#401d49", "#2e1336", "#261336", "#23163c", "#FFFFFF"]));
  sprite[SPRITE.ZOMBIE_HAND] = [];
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI(create_zombie_hand(_0x19a9cc * 0.4, ["#0d1b1c", "#759e6e", "#55604b"]));
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI(create_zombie_hand(_0x19a9cc * 0.4, ["#030d14", "#11635e", "#02373e"]));
  sprite[SPRITE.ZOMBIE_HURT] = CTI(create_zombie_hurt(_0x19a9cc * 0.6, ["#BB0000"]));
  sprite[SPRITE.ZOMBIE_HUNGER] = CTI(create_zombie_hurt(_0x19a9cc * 0.6, ["#DBE71C"]));
  sprite[SPRITE.ZOMBIE_HEAL] = CTI(create_zombie_hurt(_0x19a9cc * 0.6, ["#00BB00"]));
  sprite[SPRITE.TREE] = [];
  sprite[SPRITE.TREE][SPRITE.DAY] = [];
  sprite[SPRITE.TREE][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 1.1, ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 0.9, ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 0.9, ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 0.7, ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"], false, 0));
  sprite[SPRITE.TREE][SPRITE.DAY].push(create_apricot_tree(_0x19a9cc * 0.7, ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 1.1, ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 0.9, ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 0.9, ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"], true, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 0.7, ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"], false, 0));
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(create_apricot_tree(_0x19a9cc * 0.7, ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"], true, 0));
  sprite[SPRITE.TREE_BRANCH] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], false), sprite[SPRITE.TREE][SPRITE.DAY][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 1.1, ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"], true), sprite[SPRITE.TREE][SPRITE.DAY][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][0])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 1.1, ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][1])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], false), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 0.9, ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"], true), sprite[SPRITE.TREE][SPRITE.DAY][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 0.9, ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"], false), sprite[SPRITE.TREE][SPRITE.NIGHT][2])));
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(CTI(create_apricot_forest(create_tree_branch(_0x19a9cc * 0.9, ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"], true), sprite[SPRITE.TREE][SPRITE.NIGHT][3])));
  sprite[SPRITE.TREE][SPRITE.DAY][5] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][5]);
  sprite[SPRITE.TREE][SPRITE.DAY][4] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][4]);
  sprite[SPRITE.TREE][SPRITE.DAY][3] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][3]);
  sprite[SPRITE.TREE][SPRITE.DAY][2] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][2]);
  sprite[SPRITE.TREE][SPRITE.DAY][1] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][1]);
  sprite[SPRITE.TREE][SPRITE.DAY][0] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][0]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][5]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][4]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][3]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][2]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][1]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI(sprite[SPRITE.TREE][SPRITE.NIGHT][0]);
  sprite[SPRITE.PICK_WOOD] = [];
  sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"])));
  sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.PICK] = [];
  sprite[SPRITE.PICK][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#030d14", "#000000", "#030d14", "#0d2e33", "#0b2326", "#485e66", "#1f343f"])));
  sprite[SPRITE.PICK_GOLD] = [];
  sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#030d14", "#000000", "#030d14", "#263947", "#263947", "#43aa82", "#29997c"])));
  sprite[SPRITE.PICK_DIAMOND] = [];
  sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.PICK_AMETHYST] = [];
  sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(4, create_pickaxe(_0x19a9cc * 0.75, true, ["#030d14", "#000000", "#030d14", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.PIRATE_SWORD] = [];
  sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_pirate_sword(_0x19a9cc * 0.17, true, ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"])));
  sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_pirate_sword(_0x19a9cc * 0.17, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#59737d", "#364f59", "#618395", "#4d768c", "#54859f"])));
  sprite[SPRITE.SUGAR_CAN] = [];
  sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = CTI(create_rotated_img(3, create_sugar_can(_0x19a9cc * 0.32, true, ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"])));
  sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sugar_can(_0x19a9cc * 0.42, true, ["#0d1b1c", "#485e66", "#1f343f", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_WOOD] = [];
  sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = CTI(create_rotated_img(3, create_sword_wood(_0x19a9cc * 0.4, true, ["#0d1b1c", "#73583e", "#493425", "#7d6144", "#5e4530", "#473221", "#745840"])));
  sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_sword_wood(_0x19a9cc * 0.4, true, ["#0d1b1c", "#0b3d3a", "#092b2a", "#144642", "#082927", "#092b29"])));
  sprite[SPRITE.SWORD] = [];
  sprite[SPRITE.SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonesword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"])));
  sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonesword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#485e66", "#1f343f", "#5d757e", "#0d2e33", "#0b2326"])));
  sprite[SPRITE.SWORD_GOLD] = [];
  sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldsword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"])));
  sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldsword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#43aa82", "#29997c", "#54bf96", "#263947", "#182935"])));
  sprite[SPRITE.SWORD_DIAMOND] = [];
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondsword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"])));
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondsword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#73dde5", "#3dc4c0", "#93eaf1", "#111316", "#0a0b0c"])));
  sprite[SPRITE.SWORD_AMETHYST] = [];
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_amesword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"])));
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amesword(_0x19a9cc * 0.4, true, ["#0d1b1c", "#8359d3", "#764eb5", "#966de6", "#111316", "#0a0b0c"])));
  sprite[SPRITE.HERB] = [];
  sprite[SPRITE.HERB][SPRITE.DAY] = [];
  sprite[SPRITE.HERB][SPRITE.NIGHT] = [];
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#0d4f35"], 0)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#0d4f35"], 1)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#0d4f35"], 2)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#053339"], 0)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#053339"], 1)));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_herb(_0x19a9cc * 0.9, false, ["#053339"], 2)));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(_0x19a9cc * 0.8, ["#241301", "#ba6b0e", "#6d3f04"])));
  sprite[SPRITE.HERB][SPRITE.DAY].push(CTI(create_leaf(_0x19a9cc * 0.8, ["#292002", "#ba930e", "#6d5704"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(_0x19a9cc * 0.9, ["#052919", "#0a4738", "#06321f"])));
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(CTI(create_leaf(_0x19a9cc * 0.8, ["#052918", "#08491c", "#063417"])));
  sprite[SPRITE.SIGN] = [];
  sprite[SPRITE.SIGN][SPRITE.DAY] = CTI(create_rotated_img(Math.PI / 2, create_sign(_0x19a9cc * 0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])));
  sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI / 2, create_sign(_0x19a9cc * 0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])));
  sprite[SPRITE.SIGN_BUTTON] = [];
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(_0x19a9cc * 0.25, ["#44301b", "#57442a", "#523e26"], 0)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(_0x19a9cc * 0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)));
  sprite[SPRITE.SIGN_BUTTON].push(CTI(create_sign_button(_0x19a9cc * 0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)));
  sprite[SPRITE.SYMBOLS] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"], 1))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"], 2))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"], 3))));
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"], 4))));
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(CTI(create_rotated_img(Math.PI / 2, create_symbols(_0x19a9cc * 0.25, false, ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"], 4))));
  sprite[SPRITE.PLANT] = [];
  sprite[SPRITE.PLANT][SPRITE.DAY] = [CTI(create_plant(_0x19a9cc * 1.2, true, ["#352b10", "#80500b", "#7c4908"]))];
  sprite[SPRITE.PLANT][SPRITE.NIGHT] = [CTI(create_plant(_0x19a9cc * 1.2, true, ["#030d14", "#0a3429", "#0a2f2b"]))];
  sprite[SPRITE.DRIED_PLANT] = [];
  sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = CTI(create_plant(_0x19a9cc * 0.8, true, ["#0e3022", "#68622D", "#665329"]));
  sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI(create_plant(_0x19a9cc * 0.8, true, ["#030d14", "#0F3A24", "#083326"]));
  sprite[SPRITE.PUMPKIN] = [];
  sprite[SPRITE.PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(_0x19a9cc * 0.5, true, ["#1b170c", "#c67933", "#a6692f", "#bd7533", "#86683e", "#6e502d"]));
  sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(_0x19a9cc * 0.5, true, ["#030d14", "#0a3429", "#0a2f2b", "#082f25", "#082925", "#0a3630"]));
  sprite[SPRITE.GARLIC] = [];
  sprite[SPRITE.GARLIC][SPRITE.DAY] = CTI(create_garlic(_0x19a9cc * 0.5, true, ["#1b170c", "#e8e8e8", "#d2cfcf", "#e0e1e0", "#c4c4c4"]));
  sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI(create_garlic(_0x19a9cc * 0.5, true, ["#030d14", "#2b5254", "#264a46", "#396260", "#244743"]));
  sprite[SPRITE.THORNBUSH] = [];
  sprite[SPRITE.THORNBUSH][SPRITE.DAY] = CTI(create_brambles(_0x19a9cc * 0.5, true, ["#1b170c", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(_0x19a9cc * 0.5, true, ["#030d14", "#0d5551", "#074440", "#0f5c58", "#4e8784", "#3f7572"]));
  sprite[SPRITE.PLANT_MINI] = [];
  sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = CTI(create_plant(_0x19a9cc * 0.8, true, ["#1b170c", "#0b8052", "#077b49"]));
  sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI(create_plant(_0x19a9cc * 0.8, true, ["#030d14", "#084442", "#0a4049"]));
  sprite[SPRITE.DRIED_PUMPKIN] = [];
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = CTI(create_pumpkin(_0x19a9cc * 0.5, true, ["#1b170c", "#68622D", "#665329", "#5e5823", "#86683e", "#6e502d"]));
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI(create_pumpkin(_0x19a9cc * 0.5, true, ["#030d14", "#0F3A24", "#083326", "#0c301e", "#062a1f", "#083b2b"]));
  sprite[SPRITE.DRIED_GARLIC] = [];
  sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = CTI(create_garlic(_0x19a9cc * 0.5, true, ["#1b170c", "#adbe9e", "#7e9178", "#84aa84", "#527556"]));
  sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI(create_garlic(_0x19a9cc * 0.5, true, ["#030d14", "#164a44", "#124244", "#13373b", "#133e3e"]));
  sprite[SPRITE.DRIED_THORNBUSH] = [];
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = CTI(create_brambles(_0x19a9cc * 0.5, true, ["#1b170c", "#7a9160", "#4a5e3c", "#637e5a", "#c5cfc0", "#8a9685"]));
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI(create_brambles(_0x19a9cc * 0.5, true, ["#030d14", "#3e5d5b", "#2f4442", "#354e4c", "#637d7c", "#556b6a"]));
  sprite[SPRITE.GIFT] = [];
  sprite[SPRITE.GIFT][SPRITE.DAY] = CTI(create_present(_0x19a9cc * 0.45, true, ["#0e3022", "#ac222a", "#98171e", "#22a84f", "#1f924a"]));
  sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI(create_present(_0x19a9cc * 0.45, true, ["#0e3022", "#19386e", "#0b2752", "#124252", "#0d3441"]));
  sprite[SPRITE.HURT_GIFT] = CTI(create_present(_0x19a9cc * 0.65, true, ["rgba(14, 48, 34, 0)", "#BB0000", "#BB0000", "#BB0000", "#BB0000"]));
  sprite[SPRITE.FRUIT] = [];
  sprite[SPRITE.FRUIT][SPRITE.DAY] = CTI(create_fruit(_0x19a9cc * 1.4, false, ["#3d2a6e", "#8255b5"]));
  sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI(create_fruit(_0x19a9cc * 1.4, false, ["#26124f", "#524082"]));
  sprite[SPRITE.FIRE] = [];
  sprite[SPRITE.FIRE][SPRITE.DAY] = CTI(create_fire(_0x19a9cc * 0.9, false, ["#efd435", "#ec8d35", "#e96132"]));
  sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI(create_fire(_0x19a9cc * 0.9, false, ["#efdb7b", "#efe854", "#e8ef62"]));
  sprite[SPRITE.BIG_FIRE_WOOD] = [];
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = CTI(create_big_fire_wood(_0x19a9cc * 0.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI(create_big_fire_wood(_0x19a9cc * 0.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.WOOD_FIRE] = [];
  sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = CTI(create_wood_fire(_0x19a9cc * 0.9, false, ["#4d2d14", "#432516"]));
  sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI(create_wood_fire(_0x19a9cc * 0.9, false, ["#282404", "#0a0a01"]));
  sprite[SPRITE.HALO_FIRE] = [];
  sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = CTI(create_halo_fire(_0x19a9cc * 0.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI(create_halo_fire(_0x19a9cc * 0.9, false, ["#fffabb"]));
  sprite[SPRITE.GROUND_FIRE] = [];
  sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = CTI(create_ground_fire(_0x19a9cc * 0.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI(create_ground_fire(_0x19a9cc * 0.9, false, ["#fffabb"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN] = [];
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_halo_fire(_0x19a9cc * 0.9, false, ["#efd435"]));
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_halo_fire(_0x19a9cc * 0.9, false, ["rgba(255, 84, 0, 1)"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [];
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = CTI(create_ground_fire(_0x19a9cc * 0.9, false, ["#efd435"]));
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(create_ground_fire(_0x19a9cc * 0.9, false, ["#ff5704"]));
  sprite[SPRITE.GEAR] = CTI(create_gear(_0x19a9cc, "#ffffff", 1));
  sprite[SPRITE.GEAR2] = CTI(create_gear(_0x19a9cc * 1.5, "#ffffff", 1));
  sprite[SPRITE.YOUR_SCORE] = CTI(create_text(_0x19a9cc, "Your score:", _0x19a9cc * 15, "#FFF"));
  sprite[SPRITE.WINDMILL_CASES] = CTI(create_windmill_chest(_0x19a9cc * 0.9, ["#596560", "#394841", "#543B1C", "#694D28", "#4D3C1A", "#694D28", "#DEE2E0", "#CDCCCC", "#7B5A31", "#7E8A85"]));
  sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;
  sprite[SPRITE.WINDMILL] = [];
  sprite[SPRITE.WINDMILL][SPRITE.DAY] = CTI(create_windmill(_0x19a9cc * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI(create_windmill(_0x19a9cc * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_WINGS] = [];
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = CTI(create_windmill_wing(_0x19a9cc * 2, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI(create_windmill_wing(_0x19a9cc * 2, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WINDMILL_HEAD] = [];
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = CTI(create_windmill_head(_0x19a9cc * 1.5, true, ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]));
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI(create_windmill_head(_0x19a9cc * 1.5, true, ["#030d14", "#163A3A", "#214C4B", "#1a4545", "#225755", "#07393D", "#07454a", "#0c484d", "#163A3A", "#214C4B"]));
  sprite[SPRITE.WILD_WHEAT] = [];
  sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = CTI(create_wheat(_0x19a9cc * 2.2, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(_0x19a9cc * 2.2, true, ["#0B4049", "#08383D"]));
  sprite[SPRITE.DRIED_WHEAT] = [];
  sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = CTI(create_wheat(_0x19a9cc * 2.2, true, ["#68622D", "#665329"]));
  sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI(create_wheat(_0x19a9cc * 2.2, true, ["#0F3A24", "#083326"]));
  sprite[SPRITE.WHEAT_MOB] = [];
  sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#A89F67", "#9E8456"]));
  sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#15514F", "#0F3F3D"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB] = [];
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#c67933", "#b17238"]));
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB] = [];
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#3a8214", "#4a9c1e"]));
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#032d29", "#044640"]));
  sprite[SPRITE.GARLIC_SEED_MOB] = [];
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#e8e8e8", "#bbbbbb"]));
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#1c6161", "#07413f"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB] = [];
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#328a56", "#449573"]));
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.CARROT_SEED_MOB] = [];
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#c98e2f", "#a36b11"]));
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.TOMATO_SEED_MOB] = [];
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#b22419", "#99110e"]));
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#04323c", "#03222b"]));
  sprite[SPRITE.WATERMELON_SEED_MOB] = [];
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#13a56d", "#098a58"]));
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI(create_seed(_0x19a9cc * 0.8, true, ["#043c37", "#032b23"]));
  sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button(1, [{
    f: create_wheat,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#A89F67", "#9E8456"]
  }], 1.2, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button(1, [{
    f: create_wood_fire,
    x: 0,
    y: 0,
    a: 1,
    r: -Math.PI / 5,
    c: ["#4d2d14", "#432516"]
  }], 0.3, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button(1, [{
    f: create_bread,
    x: 0,
    y: -5,
    a: 1,
    r: 0,
    c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
  }], 0.15, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.EMPTY_SLOT] = create_craft_button(0.9, [], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.PLANT_SEED] = [];
  sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#7d613e", "#9e7e5a"]));
  sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#084442", "#125e5a"]));
  sprite[SPRITE.WHEAT_SEED] = [];
  sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#9E8456", "#A89F67"]));
  sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#1b6f6a", "#0d4e4c"]));
  sprite[SPRITE.WHEAT_SEED_DRIED] = [];
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#665329", "#68622D"]));
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#083326", "#0F3A24"]));
  sprite[SPRITE.PLANT_PUMPKIN] = [];
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#c67933", "#ec952d"]));
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_ALOE_VERA] = [];
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#375809", "#4b770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#09542d", "#0d5d2f"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [];
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#585809", "#72770e"]));
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#295209", "#305d0d"]));
  sprite[SPRITE.PLANT_GARLIC] = [];
  sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#b9b094", "#e2d2c0"]));
  sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#126366", "#0d484b"]));
  sprite[SPRITE.PLANT_THORNBUSH] = [];
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#3f8662", "#30915d"]));
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [];
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#c79153", "#dfa868"]));
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED] = [];
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#768b5b", "#819984"]));
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#0c4540", "#0e5153"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [];
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#567465", "#627c6e"]));
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#073927", "#075040"]));
  sprite[SPRITE.PLANT_CARROT] = [];
  sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#996b3a", "#bf956b"]));
  sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#0e6553", "#094437"]));
  sprite[SPRITE.PLANT_CARROT_DRIED] = [];
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#7a634a", "#a68f77"]));
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#1e4d43", "#113c32"]));
  sprite[SPRITE.PLANT_TOMATO] = [];
  sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#99403c", "#bc796c"]));
  sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#1e434d", "#11303c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED] = [];
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#88504e", "#b3857c"]));
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#253b41", "#162930"]));
  sprite[SPRITE.PLANT_WATERMELON] = [];
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#0f8870", "#23af93"]));
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#032829", "#083233"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED] = [];
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#618a20", "#84a74e"]));
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI(create_plant_seed(_0x19a9cc * 0.9, false, ["#1f4632", "#335d47"]));
  sprite[SPRITE.WORKBENCH] = [];
  sprite[SPRITE.WORKBENCH][SPRITE.DAY] = CTI(create_workbench(_0x19a9cc * 1.2, true, ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]));
  sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI(create_workbench(_0x19a9cc * 1.2, true, ["#030d14", "#0d2e33", "#072322", "#3e706b", "#123d3f", "#4e827c"]));
  sprite[SPRITE.WALL] = [];
  sprite[SPRITE.WALL][SPRITE.DAY] = CTI(create_wall(_0x19a9cc * 1, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI(create_wall(_0x19a9cc * 1, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DIAMOND_WALL] = [];
  sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = CTI(create_wall_diamond(_0x19a9cc * 1, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI(create_wall_diamond(_0x19a9cc * 1, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.AMETHYST_WALL] = [];
  sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = CTI(create_wall_stone(_0x19a9cc * 1, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(_0x19a9cc * 1, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.STONE_WALL] = [];
  sprite[SPRITE.STONE_WALL][SPRITE.DAY] = CTI(create_wall_stone(_0x19a9cc * 1, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI(create_wall_stone(_0x19a9cc * 1, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.GOLD_WALL] = [];
  sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = CTI(create_wall_gold(_0x19a9cc * 1, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI(create_wall_gold(_0x19a9cc * 1, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.SPIKE] = [];
  sprite[SPRITE.SPIKE][SPRITE.DAY] = CTI(create_spike(_0x19a9cc * 0.8, true, ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]));
  sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI(create_spike(_0x19a9cc * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.GOLD_SPIKE] = [];
  sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = CTI(create_spike_gold(_0x19a9cc * 0.8, true, ["#0d1b1c", "#69685a", "#9c9683", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]));
  sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI(create_spike_gold(_0x19a9cc * 0.8, true, ["#030d14", "#1a3732", "#1e544c", "#1f4948", "#215e55", "#1f6058", "#2a7773", "#2c7a70"]));
  sprite[SPRITE.DIAMOND_SPIKE] = [];
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = CTI(create_spike_diamond(_0x19a9cc * 0.8, true, ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI(create_spike_diamond(_0x19a9cc * 0.8, true, ["#030d14", "#2c4b55", "#546d77", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.STONE_SPIKE] = [];
  sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(_0x19a9cc * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]));
  sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(_0x19a9cc * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#163a3a", "#214c4b", "#1f4948", "#295957", "#1f5955"]));
  sprite[SPRITE.AMETHYST_SPIKE] = [];
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = CTI(create_spike_stone(_0x19a9cc * 0.8, true, ["#0d1b1c", "#6a7570", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI(create_spike_stone(_0x19a9cc * 0.8, true, ["#030d14", "#1f343f", "#485e66", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE] = [];
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI(create_door_wood(_0x19a9cc * 1.5, true, ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534", "#23a54e", "#1f934a", "#208e48", "#b12c2a", "#9c2625", "#ebd6a4", "#cca73f"]));
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI(create_door_wood(_0x19a9cc * 1.5, true, ["#030d14", "#0d2e33", "#184747", "#123b3f", "#0d2e33", "#174444"]));
  sprite[SPRITE.DOOR_WOOD_OPEN] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI(create_door_wood(_0x19a9cc * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI(create_door_wood(_0x19a9cc * 1, false, ["#042b30", "#042b30", "#0b342b", "#0b342b", "#042b30", "#0b342b"]));
  sprite[SPRITE.DOOR_STONE_CLOSE] = [];
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1.5, true, ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]));
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1.5, true, ["#030d14", "#163a3a", "#214c4b", "#1f4948", "#164542", "#295957"]));
  sprite[SPRITE.DOOR_STONE_OPEN] = [];
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [];
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1.5, true, ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]));
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1.5, true, ["#030d14", "#8359d3", "#764eb5", "#8f65de", "#7f55cc", "#9d77e6"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE] = [];
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI(create_door_gold(_0x19a9cc * 1.5, true, ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]));
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI(create_door_gold(_0x19a9cc * 1.5, true, ["#030d14", "#1f4948", "#215e55", "#1f6058", "#1f605c", "#2c7a70"]));
  sprite[SPRITE.DOOR_GOLD_OPEN] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI(create_door_gold(_0x19a9cc * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI(create_door_gold(_0x19a9cc * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [];
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI(create_door_diamond(_0x19a9cc * 1.5, true, ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]));
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI(create_door_diamond(_0x19a9cc * 1.5, true, ["#030d14", "#2b9390", "#43b5af", "#43b5af", "#4bbcb4", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI(create_door_diamond(_0x19a9cc * 1, false, ["#133a2b", "#133a2b", "#1a4935", "#1a4935", "#133a2b", "#1a4935"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI(create_door_diamond(_0x19a9cc * 1, false, ["#032428", "#032428", "#07393d", "#07393d", "#032428", "#07393d"]));
  sprite[SPRITE.CHEST] = [];
  sprite[SPRITE.CHEST][SPRITE.DAY] = CTI(create_chest(_0x19a9cc * 0.5, true, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]));
  sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI(create_chest(_0x19a9cc * 0.5, true, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453", "#1f5453", "#1f5453", "#2b6664", "#2b6664", "#2b6664"]));
  sprite[SPRITE.TREASURE_CHEST] = [];
  sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI(create_treasure_chest(_0x19a9cc * 0.5, ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627"]));
  sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI(create_treasure_chest(_0x19a9cc * 0.5, ["#032428", "#266161", "#2b6664", "#123335", "#1f5453"]));
  sprite[SPRITE.RABBIT] = [];
  sprite[SPRITE.RABBIT][SPRITE.DAY] = CTI(create_rabbit(_0x19a9cc * 0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"]));
  sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI(create_rabbit(_0x19a9cc * 0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"]));
  sprite[SPRITE.SPIDER] = [];
  sprite[SPRITE.SPIDER][SPRITE.DAY] = CTI(create_rotated_img(Math.PI, create_spider(_0x19a9cc * 0.9, ["#000000", "#b7252c", "#b7252c", "#b7252c", "#FFFFFF", "#000000"])));
  sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI(create_rotated_img(Math.PI, create_spider(_0x19a9cc * 0.9, ["#030d14", "#401d49", "#b7252c", "#401d49", "#FFFFFF", "#000000"])));
  sprite[SPRITE.WEB] = CTI(create_web(_0x19a9cc * 0.6, ["#FFFFFF"]));
  sprite[SPRITE.WOLF] = [];
  sprite[SPRITE.WOLF][SPRITE.DAY] = CTI(create_wolf(_0x19a9cc * 1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"]));
  sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI(create_wolf(_0x19a9cc * 1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"]));
  sprite[SPRITE.EARMUFFS] = [];
  sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI(create_earmuff(_0x19a9cc * 0.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]));
  sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI(create_earmuff(_0x19a9cc * 0.6, true, ["#478e8b", "#327e73", "#073030", "#08403f"]));
  sprite[SPRITE.COAT] = [];
  sprite[SPRITE.COAT][SPRITE.DAY] = CTI(create_coat(_0x19a9cc * 0.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]));
  sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI(create_coat(_0x19a9cc * 0.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"]));
  sprite[SPRITE.CAP_SCARF] = [];
  sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI(create_cap_scarf(_0x19a9cc * 0.63, true, ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]));
  sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI(create_cap_scarf(_0x19a9cc * 0.63, true, ["#073030", "#368981", "#1c635e", "#7bbab4", "#469e95"]));
  sprite[SPRITE.CHRISTMAS_HAT] = [];
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI(create_christmas_hat(_0x19a9cc * 0.6, true, ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]));
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI(create_christmas_hat(_0x19a9cc * 0.6, true, ["#073030", "#392966", "#2a194f", "#433379", "#66aaa3", "#469e95"]));
  sprite[SPRITE.ELF_HAT] = [];
  sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI(create_elf_hat(_0x19a9cc * 0.6, true, ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]));
  sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI(create_elf_hat(_0x19a9cc * 0.6, true, ["#073030", "#124949", "#0e3838", "#15514f", "#66aaa3", "#469e95", "#292f66", "#202559"]));
  sprite[SPRITE.BREAD_OVEN_ON] = [];
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI(create_bread_oven(_0x19a9cc * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#343d39"]));
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI(create_bread_oven(_0x19a9cc * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#192225"]));
  sprite[SPRITE.BREAD_LIGHT_UP] = [];
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI(create_bread_light_up(_0x19a9cc * 0.9, ["#e4c027"]));
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI(create_bread_light_up(_0x19a9cc * 0.9, ["#D8E57F"]));
  sprite[SPRITE.BREAD_OVEN_OFF] = [];
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI(create_bread_oven_off(_0x19a9cc * 0.42, true, ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]));
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI(create_bread_oven_off(_0x19a9cc * 0.42, true, ["#0d1b1c", "#485E66", "#1F343F", "#60757D", "#C1C0C0", "#be8d50", "#7d5234", "#1F343F", "#344B51", "#D8E57F", "#dfa64e", "#1b2529"]));
  sprite[SPRITE.BREAD_OVEN_UI] = CTI(create_bread_oven_ui(_0x19a9cc * 1, ["#596560", "#394841", "#543B1C", "#694D28", "#7E8A85", "#384740", "#525956"]));
  sprite[SPRITE.FURNACE_ON] = [];
  sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI(create_furnace_on(_0x19a9cc * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]));
  sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI(create_furnace_on(_0x19a9cc * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#ffdc73", "#fffce2", "#fef259"]));
  sprite[SPRITE.FURNACE_OFF] = [];
  sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI(create_furnace_off(_0x19a9cc * 0.5, true, ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#4f4f4f", "#6c6c6c", "#454545"]));
  sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI(create_furnace_off(_0x19a9cc * 0.5, true, ["#0d1b1c", "#485e66", "#1f343f", "#60757d", "#152229", "#0c1113", "#0c1113"]));
  sprite[SPRITE.FURNACE_SLOT] = CTI(create_furnace_slot(_0x19a9cc * 0.8, true, ["#5f6061", "#939393"]));
  sprite[SPRITE.FURNACE_BUTTON] = create_craft_button(1, [{
    f: create_wood_fire,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 2.5,
    c: ["#4d2d14", "#432516"]
  }], 0.3, ["#494949", "#5b5858", "#3d3b3b"], 1);
  sprite[SPRITE.BED] = [];
  sprite[SPRITE.BED][SPRITE.DAY] = CTI(create_bed(_0x19a9cc * 1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED][SPRITE.NIGHT] = CTI(create_bed(_0x19a9cc * 1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#0b424f", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.BED_TOP] = [];
  sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI(create_bed_top(_0x19a9cc * 1, true, ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99"]));
  sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI(create_bed_top(_0x19a9cc * 1, true, ["#0d1b1c", "#0b3432", "#092b29", "#052120", "#104d5b", "#083b37", "#0b3432", "#092b29", "#2b0b4a", "#23073e"]));
  sprite[SPRITE.CRAB_SPEAR] = [];
  sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_crab_spear(_0x19a9cc * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_crab_spear(_0x19a9cc * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#34255d", "#281b4e", "#2f2157", "#281b4e", "#104d5b", "#083b37"])));
  sprite[SPRITE.WOOD_SPEAR] = [];
  sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_wood_spear(_0x19a9cc * 0.7, true, ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"])));
  sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_wood_spear(_0x19a9cc * 0.7, true, ["#0d1b1c", "#0b3432", "#092b29", "#0e4d49", "#1a6c67", "#07322f"])));
  sprite[SPRITE.SPEAR] = [];
  sprite[SPRITE.SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_stonespear(_0x19a9cc * 0.65, true, ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"])));
  sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_stonespear(_0x19a9cc * 0.65, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#1a6c67", "#07322f", "#374950", "#101f26", "#2c3c42", "#485e66", "#1f343f", "#546e78"])));
  sprite[SPRITE.GOLD_SPEAR] = [];
  sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_goldspear(_0x19a9cc * 0.67, true, ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"])));
  sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_goldspear(_0x19a9cc * 0.67, true, ["#030d14", "#263947", "#182935", "#33916d", "#197c62", "#3eab81", "#43aa82", "#29997c", "#52be94"])));
  sprite[SPRITE.DIAMOND_SPEAR] = [];
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_diamondspear(_0x19a9cc * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"])));
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_diamondspear(_0x19a9cc * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#4bbbc3", "#23a19d", "#54c5cd", "#4ad2ce", "#3dc4c0", "#73dde5"])));
  sprite[SPRITE.AMETHYST_SPEAR] = [];
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_amespear(_0x19a9cc * 0.67, true, ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"])));
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_amespear(_0x19a9cc * 0.67, true, ["#0d1b1c", "#111316", "#0a0b0c", "#6e43bf", "#673fa4", "#784bcc", "#845bc6", "#764eb5", "#966be7"])));
  sprite[SPRITE.DRAGON_SPEAR] = [];
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_spear(_0x19a9cc * 1, true, ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"])));
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_spear(_0x19a9cc * 1, true, ["#0d1b1c", "#1c2026", "#0a0b0c", "#7dc6d9", "#6cbacf", "#87d2e6", "#49b2cf", "#87d2e6"])));
  sprite[SPRITE.HAMMER] = [];
  sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"])));
  sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#030d14", "#263947", "#182935", "#485e66", "#1f343f"])));
  sprite[SPRITE.SPANNER] = [];
  sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI(create_rotated_img(3, create_spanner(_0x19a9cc * 0.5, true, ["#0d1b1c", "#939393", "#5f6061"])));
  sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_spanner(_0x19a9cc * 0.5, true, ["#030d14", "#485e66", "#1f343f"])));
  sprite[SPRITE.SUPER_HAMMER] = [];
  sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI(create_rotated_img(3, create_superhammer(_0x19a9cc * 1, true, ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb"])));
  sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_superhammer(_0x19a9cc * 1, true, ["#0d1b1c", "#2a4f4a", "#1e423d", "#1e0302", "#096b3f", "#3db76f", "#118254", "#40c696", "#0c7a50", "#59d8a4", "#249376", "#80d8c7"])));
  sprite[SPRITE.HAMMER_GOLD] = [];
  sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"])));
  sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#43aa82", "#29997c"])));
  sprite[SPRITE.HAMMER_DIAMOND] = [];
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"])));
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0"])));
  sprite[SPRITE.HAMMER_AMETHYST] = [];
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"])));
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_hammer(_0x19a9cc * 1, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5"])));
  sprite[SPRITE.LOCK] = [];
  sprite[SPRITE.LOCK][SPRITE.DAY] = CTI(create_lock(_0x19a9cc * 0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]));
  sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI(create_lock(_0x19a9cc * 0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"]));
  sprite[SPRITE.PADLOCK] = [];
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(_0x19a9cc * 0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(_0x19a9cc * 0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"])));
  sprite[SPRITE.PADLOCK].push(CTI(create_lock(_0x19a9cc * 0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"])));
  sprite[SPRITE.LOCKED] = [];
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKPICK] = [];
  sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI(create_lockpick(_0x19a9cc * 0.06, false, ["#141414", "#c4a23a", "#816511"]));
  sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI(create_lockpick(_0x19a9cc * 0.06, false, ["#030d14", "#2b6664", "#133d3c"]));
  sprite[SPRITE.KEY] = [];
  sprite[SPRITE.KEY].push(CTI(create_lockpick(_0x19a9cc * 0.08, false, ["#141414", "#c4a23a", "#816511"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(_0x19a9cc * 0.08, false, ["#141414", "#e2bd4e", "#a38018"])));
  sprite[SPRITE.KEY].push(CTI(create_lockpick(_0x19a9cc * 0.08, false, ["#141414", "#b0902e", "#634d09"])));
  sprite[SPRITE.DRAGON_HEART] = create_craft_button(1.5, [{
    f: create_dragon_heart,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#141414", "#178a99", "#0a6372", "#03282e"]
  }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
  sprite[SPRITE.RESURRECTION_GROUND] = [];
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI(create_resurrection_ground(_0x19a9cc * 0.8, true, ["#347f93", "#54a4ba"]));
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI(create_resurrection_ground(_0x19a9cc * 0.8, true, ["#98ede3", "#94f2e7"]));
  sprite[SPRITE.RESURRECTION_HOLE] = [];
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI(create_resurrection_hole(_0x19a9cc * 0.8, true, ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]));
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI(create_resurrection_hole(_0x19a9cc * 0.8, true, ["#59c9c0", "#83ddd4", "#3fa097", "#90ddd9"]));
  sprite[SPRITE.RESURRECTION_ROTATE] = [];
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI(create_resurrection_rotate(_0x19a9cc * 0.8, true, ["#a9e4ed", "#86d4e0"]));
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI(create_resurrection_rotate(_0x19a9cc * 0.8, true, ["#83ddd4", "#485e66"]));
  sprite[SPRITE.RESURRECTION] = [];
  sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI(create_resurrection(_0x19a9cc * 0.8, true, ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc"]));
  sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI(create_resurrection(_0x19a9cc * 0.8, true, ["#98ede3", "#94f2e7", "#1f343f", "#59c9c0", "#83ddd4", "#485e66", "#2d484f", "#546d6d", "#597b84"]));
  sprite[SPRITE.EMERALD_MACHINE_GROUND] = [];
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_GROUNDD;
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_GROUNDN;
  sprite[SPRITE.EMERALD_MACHINE_HOLE] = [];
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_HOLED;
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_HOLEN;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [];
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] = IMAGES.EMERALD_MACHINE_ROTATED;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINE_ROTATEN;
  sprite[SPRITE.EMERALD_MACHINE] = [];
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED;
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE0_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE0_REIDITEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] = IMAGES.EXTRACTOR_MACHINE_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] = IMAGES.EXTRACTOR_MACHINE_REIDITEN;
  sprite[SPRITE.FIREFLY] = [];
  sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD;
  sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN;
  sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;
  sprite[SPRITE.TOTEM] = [];
  sprite[SPRITE.TOTEM][SPRITE.DAY] = CTI(create_totem(_0x19a9cc * 0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"]));
  sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI(create_totem(_0x19a9cc * 0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"]));
  sprite[SPRITE.ICON_MEMBER] = CTI(create_icon_team(_0x19a9cc * 0.3, ["#092813", "#1f773d"], 0));
  sprite[SPRITE.ICON_LEADER] = CTI(create_icon_team(_0x19a9cc * 0.3, ["#092813", "#1f773d"], 1));
  sprite[SPRITE.VERIFIED] = CTI(create_verified(_0x19a9cc * 0.6, ["#092813", "#1f773d"]));
  sprite[SPRITE.TEAM_BUTTON] = [];
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 0)));
  sprite[SPRITE.TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 0)));
  sprite[SPRITE.FULL_TEAM_BUTTON] = [];
  var _0xecae0 = CTI(create_team_button(_0x19a9cc * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 0));
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0xecae0);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0xecae0);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0xecae0);
  sprite[SPRITE.MANAGE_TEAM_BUTTON] = [];
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"], 1)));
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"], 1)));
  sprite[SPRITE.DELAY_SPIKE] = CTI(create_spiketimer(_0x19a9cc * 0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_WALL] = CTI(create_delay_wall(_0x19a9cc * 0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_TEAM] = CTI(create_icon_team(_0x19a9cc * 0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0));
  sprite[SPRITE.DELAY_DRINK] = CTI(create_rotated_img(Math.PI / 5, create_drink_delay(_0x19a9cc * 0.2, ["#FFFFFF"])));
  sprite[SPRITE.AMETHYST_HELMET] = [];
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI(create_amethyst_helmet(_0x19a9cc * 0.85, true, ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]));
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI(create_amethyst_helmet(_0x19a9cc * 0.85, true, ["#0d1b1c", "#4e4e93", "#393977", "#444187", "#2b9390", "#277a74", "#7da8db"]));
  sprite[SPRITE.SHOW_TEAM_BUTTON] = [];
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"], 1)));
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(CTI(create_team_button(_0x19a9cc * 0.7, ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"], 1)));
  sprite[SPRITE.HOOD] = [];
  sprite[SPRITE.HOOD][SPRITE.DAY] = CTI(create_hood(_0x19a9cc * 0.37, true, ["#2a2938", "#242330", "#313041"]));
  sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI(create_hood(_0x19a9cc * 0.37, true, ["#1b1e30", "#161921", "#252f3e"]));
  sprite[SPRITE.WINTER_HOOD] = [];
  sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI(create_winter_hood(_0x19a9cc * 0.17, true, ["#2a2938", "#242330", "#313041", "#1b1a25", "#d62c0e"]));
  sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI(create_winter_hood(_0x19a9cc * 0.17, true, ["#1b1e30", "#161921", "#252f3e", "#0a0c11", "#d62c0e"]));
  sprite[SPRITE.WINTER_PEASANT] = [];
  sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI(create_peasant(_0x19a9cc * 0.55, true, ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"], 1));
  sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI(create_peasant(_0x19a9cc * 0.55, true, ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"], 1));
  sprite[SPRITE.PEASANT] = [];
  sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI(create_peasant(_0x19a9cc * 0.55, true, ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"], 0));
  sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI(create_peasant(_0x19a9cc * 0.55, true, ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"], 0));
  sprite[SPRITE.CROWN_GREEN] = [];
  sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]));
  sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#3db76f", "#118254", "#40c696"]));
  sprite[SPRITE.CROWN_ORANGE] = [];
  sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]));
  sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#69b681", "#509a75", "#7ec387"]));
  sprite[SPRITE.CROWN_BLUE] = [];
  sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]));
  sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI(create_crown_life(_0x19a9cc * 0.2, true, ["#2b7c57", "#114933", "#1b6656", "#1a7961", "#19899e", "#16688b", "#4ea3c7"]));
  sprite[SPRITE.CROWN_CRAB] = [];
  sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI(create_crab_crown(_0x19a9cc * 0.24, true, ["#000000", "#b03431", "#94312d", "#bd3c33", "#e45936"]));
  sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI(create_crab_crown(_0x19a9cc * 0.24, true, ["#000000", "#1b103e", "#190f3b", "#261a4e", "#34255d"]));
  sprite[SPRITE.DRAGON_HELMET] = [];
  sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI(create_dragon_helmet(_0x19a9cc * 0.32, true, ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]));
  sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI(create_dragon_helmet(_0x19a9cc * 0.32, true, ["#0d1b1c", "#70c1d6", "#49b2cf", "#87cad9", "#367c93", "#113743", "#0c2c36", "#51a2b8", "#3a8ea4"]));
  sprite[SPRITE.DRAGON_SWORD] = [];
  sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(_0x19a9cc * 0.9, true, ["#0d1b1c", "#284c4a", "#193533", "#c8efef", "#7eccbb"])));
  sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(_0x19a9cc * 0.9, true, ["#0d1b1c", "#18332e", "#112320", "#87d2e6", "#49b2cf"])));
  sprite[SPRITE.DRAGON_SWORD_HALO] = [];
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI(create_rotated_img(3, create_dragon_sword(_0x19a9cc * 1, true, [undefined, undefined, undefined, "#c8efef", "#c8efef"])));
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_dragon_sword(_0x19a9cc * 1, true, [undefined, undefined, undefined, "#87d2e6", "#87d2e6"])));
  sprite[SPRITE.QUEST_BUTTON] = [];
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(_0x19a9cc * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(_0x19a9cc * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"], 1)));
  sprite[SPRITE.QUEST_BUTTON].push(CTI(create_quest_button(_0x19a9cc * 0.3, true, ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"], 1)));
  sprite[SPRITE.MARKET_BUTTON] = [];
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(_0x19a9cc * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(_0x19a9cc * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.MARKET_BUTTON].push(CTI(create_market_button(_0x19a9cc * 0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)));
  sprite[SPRITE.SOUND_BUTTON_ON] = [];
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_ON].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 1)));
  sprite[SPRITE.SOUND_BUTTON_OFF] = [];
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 0, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"], 1, 0)));
  sprite[SPRITE.SOUND_BUTTON_OFF].push(CTI(create_music_button(_0x19a9cc * 0.4, ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"], 1, 0)));
  sprite[SPRITE.SHOVEL] = [];
  sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"])));
  sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#0d2e33", "#0b2326", "#485e66", "#1f343f", "#274352"])));
  sprite[SPRITE.SHOVEL_GOLD] = [];
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#ada437"])));
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#263947", "#182935", "#43aa82", "#29997c", "#32916c"])));
  sprite[SPRITE.SHOVEL_DIAMOND] = [];
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"])));
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#73dde5", "#3dc4c0", "#49bdc6"])));
  sprite[SPRITE.SHOVEL_AMETHYST] = [];
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#9641b5"])));
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI(create_rotated_img(3, create_shovel(_0x19a9cc * 0.7, true, ["#0d1b1c", "#111316", "#0a0b0c", "#8359d3", "#764eb5", "#6f45c2"])));
  sprite[SPRITE.SHOP] = [];
  sprite[SPRITE.SHOP].push(CTI(create_shop(_0x19a9cc * 0.7, ["#3b330d", "#b5a118", "#c8ac16"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(_0x19a9cc * 0.7, ["#524712", "#c7b11c", "#d9ba18"], 0)));
  sprite[SPRITE.SHOP].push(CTI(create_shop(_0x19a9cc * 0.7, ["#2a2409", "#9f8e14", "#ad9511"], 0)));
  sprite[SPRITE.HURT_WOLF] = CTI(create_hurt_wolf(_0x19a9cc * 1.1, ["#BB0000"]));
  sprite[SPRITE.HURT_SPIDER] = CTI(create_rotated_img(Math.PI, create_hurt_spider(_0x19a9cc * 0.9, "#BB0000")));
  sprite[SPRITE.EXPLORER_HAT] = [];
  sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI(create_explorer_hat(_0x19a9cc * 0.55, true, ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]));
  sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI(create_explorer_hat(_0x19a9cc * 0.55, true, ["#15514f", "#0f3f3d", "#123335", "#0d2d2b", "#2b6664", "#070d16"]));
  sprite[SPRITE.WOOD_HELMET] = [];
  sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI(create_wooden_helmet(_0x19a9cc * 0.55, true, ["#252525", "#73583e", "#573f29", "#7d6144"]));
  sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI(create_wooden_helmet(_0x19a9cc * 0.55, true, ["#0d3b39", "#144642", "#0b3230", "#154f4b"]));
  sprite[SPRITE.STONE_HELMET] = [];
  sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI(create_viking_hat(_0x19a9cc * 0.6, true, ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]));
  sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI(create_viking_hat(_0x19a9cc * 0.6, true, ["#030d14", "#1c4a4a", "#102d2d", "#255756", "#163d3c", "#194544", "#1f5252", "#184141", "#1c4a4a", "#255756", "#163a3a"]));
  sprite[SPRITE.GOLD_HELMET] = [];
  sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI(create_gold_helmet(_0x19a9cc * 0.58, true, ["#dbce71", "#b29c32", "#c4bc51"]));
  sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI(create_gold_helmet(_0x19a9cc * 0.58, true, ["#2b7c57", "#15543c", "#1a7961"]));
  sprite[SPRITE.DIAMOND_HELMET] = [];
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI(create_diamond_helmet(_0x19a9cc * 0.69, true, ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]));
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI(create_diamond_helmet(_0x19a9cc * 0.69, true, ["#183f3f", "#092121", "#123335", "#2b9390", "#277a74", "#1f665f", "#83ddd4", "#59c9c0"]));
  sprite[SPRITE.FIR] = [];
  sprite[SPRITE.FIR][SPRITE.DAY] = [];
  sprite[SPRITE.FIR][SPRITE.NIGHT] = [];
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_three(_0x19a9cc * 1.3, ["#0a2d18", "#124c34", "#227248", "#ccedd9", "#2d7a55", "#3c9660", "#afddc1", "#bbefd0", "#0a2d18", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_two(_0x19a9cc * 1.5, ["#191919", "#134d35", "#247349", "#afddc1", "#bbefd0", "#e4efe8"])));
  sprite[SPRITE.FIR][SPRITE.DAY].push(CTI(create_fir_one(_0x19a9cc * 1.5, ["#191919", "#134d35", "#247349", "#cde7d6", "#122d1c", "#e3eee7"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_three(_0x19a9cc * 1.3, ["#000000", "#0e3638", "#174a51", "#328587", "#174a51", "#1d5559", "#328587", "#48a8aa", "#0a2728", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_two(_0x19a9cc * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#48a8aa", "#56afac"])));
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(CTI(create_fir_one(_0x19a9cc * 1.5, ["#000000", "#0e3638", "#174a51", "#328587", "#0a2728", "#56afac"])));
  sprite[SPRITE.DRAGON] = [];
  sprite[SPRITE.DRAGON][SPRITE.DAY] = CTI(create_dragon(_0x19a9cc * 1, ["#292b2b", "#57aba6", "#80ccca", "#c42333", "#a4dad9", "#3e8294", "#ffffff", "#57aba6", "#ffffff"]));
  sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI(create_dragon(_0x19a9cc * 1, ["#050505", "#1d3a38", "#0b514a", "#200333", "#327570", "#1d3a38", "#ffffff", "#0b514a", "#63afa9"]));
  sprite[SPRITE.WING_LEFT] = [];
  sprite[SPRITE.WING_LEFT][SPRITE.DAY] = CTI(create_wingleft(_0x19a9cc * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI(create_wingleft(_0x19a9cc * 1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.WING_RIGHT] = [];
  sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = CTI(create_wingright(_0x19a9cc * 1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"]));
  sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI(create_wingright(_0x19a9cc * 1, ["#050505", "#327570", "#021724", "#200333"]));
  sprite[SPRITE.DECORATION] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [IMAGES.DECORATION_0D, IMAGES.DECORATION_1D, IMAGES.DECORATION_2D, IMAGES.DECORATION_3D, IMAGES.DECORATION_4D, IMAGES.DECORATION_5D, IMAGES.DECORATION_6D, IMAGES.DECORATION_7D, IMAGES.DECORATION_8D, IMAGES.DECORATION_9D, IMAGES.DECORATION_10D, IMAGES.DECORATION_11D, IMAGES.DECORATION_12D, IMAGES.DECORATION_13D, IMAGES.DECORATION_14D, IMAGES.DECORATION_15D, IMAGES.DECORATION_16D, IMAGES.DECORATION_17D, IMAGES.DECORATION_18D, IMAGES.DECORATION_19D, IMAGES.DECORATION_20D, IMAGES.DECORATION_21D, IMAGES.DECORATION_22D, IMAGES.DECORATION_23D, IMAGES.DECORATION_24D, IMAGES.DECORATION_25D, IMAGES.DECORATION_26D, IMAGES.DECORATION_27D, IMAGES.DECORATION_28D, IMAGES.DECORATION_29D, IMAGES.DECORATION_30D, IMAGES.DECORATION_31D, IMAGES.DECORATION_32D, IMAGES.DECORATION_33D, IMAGES.DECORATION_34D, IMAGES.DECORATION_35D, IMAGES.DECORATION_36D, IMAGES.DECORATION_37D, IMAGES.DECORATION_38D, IMAGES.DECORATION_39D, IMAGES.DECORATION_40D, IMAGES.DECORATION_41D, IMAGES.DECORATION_42D, IMAGES.DECORATION_43D, IMAGES.DECORATION_44D, IMAGES.DECORATION_45D, IMAGES.DECORATION_46D, IMAGES.DECORATION_47D, IMAGES.DECORATION_48D, IMAGES.DECORATION_49D, IMAGES.DECORATION_50D, IMAGES.DECORATION_51D, IMAGES.DECORATION_52D, IMAGES.DECORATION_53D, IMAGES.DECORATION_54D, IMAGES.DECORATION_55D];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [IMAGES.DECORATION_0N, IMAGES.DECORATION_1N, IMAGES.DECORATION_2N, IMAGES.DECORATION_3N, IMAGES.DECORATION_4N, IMAGES.DECORATION_5N, IMAGES.DECORATION_6N, IMAGES.DECORATION_7N, IMAGES.DECORATION_8N, IMAGES.DECORATION_9N, IMAGES.DECORATION_10N, IMAGES.DECORATION_11N, IMAGES.DECORATION_12N, IMAGES.DECORATION_13N, IMAGES.DECORATION_14N, IMAGES.DECORATION_15N, IMAGES.DECORATION_16N, IMAGES.DECORATION_17N, IMAGES.DECORATION_18N, IMAGES.DECORATION_19N, IMAGES.DECORATION_20N, IMAGES.DECORATION_21N, IMAGES.DECORATION_22N, IMAGES.DECORATION_23N, IMAGES.DECORATION_24N, IMAGES.DECORATION_25N, IMAGES.DECORATION_26N, IMAGES.DECORATION_27N, IMAGES.DECORATION_28N, IMAGES.DECORATION_29N, IMAGES.DECORATION_30N, IMAGES.DECORATION_31N, IMAGES.DECORATION_32N, IMAGES.DECORATION_33N, IMAGES.DECORATION_34N, IMAGES.DECORATION_35N, IMAGES.DECORATION_36N, IMAGES.DECORATION_37N, IMAGES.DECORATION_38N, IMAGES.DECORATION_39N, IMAGES.DECORATION_40N, IMAGES.DECORATION_41N, IMAGES.DECORATION_42N, IMAGES.DECORATION_43N, IMAGES.DECORATION_44N, IMAGES.DECORATION_45N, IMAGES.DECORATION_46N, IMAGES.DECORATION_47N, IMAGES.DECORATION_48N, IMAGES.DECORATION_49N, IMAGES.DECORATION_50N, IMAGES.DECORATION_51N, IMAGES.DECORATION_52N, IMAGES.DECORATION_53N, IMAGES.DECORATION_54N, IMAGES.DECORATION_55N];
  sprite[SPRITE.CAVE_STONES] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 1.1, false, ["#252B28", "#747471", "#83827e"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 0.9, false, ["#252B28", "#747471", "#83827e"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 1, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 0.9, false, ["#252B28", "#747471", "#83827e"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 1.1, false, ["#030d14", "#123335", "#183f3f"], 0)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 0.9, false, ["#030d14", "#123335", "#183f3f"], 1)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 1, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 0.9, false, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 1.1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 1, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(CTI(create_cave_stone(_0x19a9cc * 0.9, true, ["#252B28", "#58645F", "#75827D"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 1.1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 1, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(CTI(create_cave_stone(_0x19a9cc * 0.9, true, ["#030d14", "#123335", "#183f3f"], 2)));
  sprite[SPRITE.GOLD_WINTER] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(CTI(create_gold(_0x19a9cc * 1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.5, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.3, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(CTI(create_gold(_0x19a9cc * 1.1, false, ["#0a2728", "#3e8989", "#50a09c"])));
  sprite[SPRITE.DIAMOND_WINTER] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 1.1, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 0.9, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(CTI(create_diamond(_0x19a9cc * 0.7, false, ["#123d38", "#70e0dd", "#95efea"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 1.1, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 0.9, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(CTI(create_diamond(_0x19a9cc * 0.7, false, ["#123d38", "#47b2ac", "#5cccc4"])));
  sprite[SPRITE.AMETHYST] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY] = [];
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(_0x19a9cc * 1.7, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(_0x19a9cc * 1.5, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(CTI(create_amethyst(_0x19a9cc * 1.3, true, ["#1d051e", "#c27add", "#cd98e5"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(_0x19a9cc * 1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(_0x19a9cc * 1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(CTI(create_amethyst(_0x19a9cc * 1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"])));
  sprite[SPRITE.WATERBLOCK] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(_0x19a9cc, ["#2d53c4"])));
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(_0x19a9cc, ["#2d53c4"])));
  sprite[SPRITE.ISLAND_BLOCK] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(CTI(create_dragon_ground(_0x19a9cc, ["#c4912d"])));
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(CTI(create_dragon_ground(_0x19a9cc, ["#c4912d"])));
  sprite[SPRITE.CAVE_STEP] = [];
  sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI(create_snow_step(_0x19a9cc, ["#414040"]));
  sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI(create_snow_step(_0x19a9cc, ["#153635"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_wood(_0x19a9cc * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_wood(_0x19a9cc * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_stone(_0x19a9cc * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_diamond(_0x19a9cc * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_diamond(_0x19a9cc * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI(create_door_gold(_0x19a9cc * 1, false, ["#EBF2F0", "#EBF2F0", "#b2d4d1", "#b2d4d1", "#EBF2F0", "#b2d4d1"]));
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI(create_door_gold(_0x19a9cc * 1, false, ["#136167", "#136167", "#24878f", "#24878f", "#136167", "#24878f"]));
  sprite[SPRITE.FOX] = [];
  sprite[SPRITE.FOX][SPRITE.DAY] = CTI(create_winter_fox(_0x19a9cc * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#2c2e2d", "#c63450", "#f7e7f0"]));
  sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI(create_winter_fox(_0x19a9cc * 0.9, ["#123d38", "#1a847f", "#200333", "#131919", "#01333a", "#b6f2db"]));
  sprite[SPRITE.BEAR] = [];
  sprite[SPRITE.BEAR][SPRITE.DAY] = CTI(create_polar_bear(_0x19a9cc * 0.9, ["#1d051e", "#ffffff", "#c41c50", "#c63450", "#ffffff", "#f7e7f0", "#2b2d2d"]));
  sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI(create_polar_bear(_0x19a9cc * 0.9, ["#123d38", "#1a847f", "#200333", "#01333a", "#ffffff", "#b6f2db", "#2b2d2d"]));
  sprite[SPRITE.MINIMAP] = [];
  sprite[SPRITE.MINIMAP_CTX] = [];
  sprite[SPRITE.BIGMAP] = [];
  sprite[SPRITE.BIGMAP_CTX] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < 2; _0x14ca96++) {
    sprite[SPRITE.MINIMAP][_0x14ca96] = document.createElement("canvas");
    sprite[SPRITE.MINIMAP][_0x14ca96].width = 193;
    sprite[SPRITE.MINIMAP][_0x14ca96].height = 193;
    sprite[SPRITE.MINIMAP_CTX][_0x14ca96] = sprite[SPRITE.MINIMAP][_0x14ca96].getContext("2d");
    sprite[SPRITE.BIGMAP][_0x14ca96] = document.createElement("canvas");
    sprite[SPRITE.BIGMAP][_0x14ca96].width = 600;
    sprite[SPRITE.BIGMAP][_0x14ca96].height = 600;
    sprite[SPRITE.BIGMAP_CTX][_0x14ca96] = sprite[SPRITE.BIGMAP][_0x14ca96].getContext("2d");
  }
  sprite[SPRITE.SNOW_STEP] = [];
  sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI(create_snow_step(_0x19a9cc, ["#c8e0de"]));
  sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI(create_snow_step(_0x19a9cc, ["#147071"]));
  sprite[SPRITE.LAVA_STEP] = [];
  sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI(create_snow_step(_0x19a9cc, ["#231912"]));
  sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI(create_snow_step(_0x19a9cc, ["#021719"]));
  sprite[SPRITE.HURT_TREASURE_CHEST] = CTI(create_hurt_treasure_chest(_0x19a9cc * 0.5, ["#BB0000"]));
  sprite[SPRITE.HURT_FOX] = CTI(create_hurt_fox_winter(_0x19a9cc * 0.9, "#BB0000"));
  sprite[SPRITE.HURT_BEAR] = CTI(create_hurt_polar_bear(_0x19a9cc * 0.9, "#BB0000"));
  sprite[SPRITE.HURT_DRAGON] = CTI(create_hurt_dragon(_0x19a9cc * 1, ["#BB0000"]));
  sprite[SPRITE.HURT_WING_LEFT] = CTI(create_hurt_wingleft(_0x19a9cc * 0.8, "#BB0000"));
  sprite[SPRITE.HURT_WING_RIGHT] = CTI(create_hurt_wingright(_0x19a9cc * 0.8, "#BB0000"));
  sprite[SPRITE.HURT_RABBIT] = CTI(create_hurt_rabbit(_0x19a9cc * 0.9, "#BB0000"));
  sprite[SPRITE.HURT] = CTI(create_hurt_player(_0x19a9cc * 0.6, "#BB0000"));
  sprite[SPRITE.COLD] = CTI(create_hurt_player(_0x19a9cc * 0.6, "#1CE7E0"));
  sprite[SPRITE.HUNGER] = CTI(create_hurt_player(_0x19a9cc * 0.6, "#DBE71C"));
  sprite[SPRITE.HEAL] = CTI(create_hurt_player(_0x19a9cc * 0.6, "#00BB00"));
  sprite[SPRITE.SAND_STEP] = [];
  sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI(create_snow_step(_0x19a9cc, ["#dac291"]));
  sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(_0x19a9cc, ["#0D423D"]));
  sprite[SPRITE.ISLAND_STEP] = [];
  sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI(create_snow_step(_0x19a9cc, ["#dac291"]));
  sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI(create_snow_step(_0x19a9cc, ["#0D423D"]));
  sprite[SPRITE.WELL_FULL] = [];
  sprite[SPRITE.WELL_FULL][SPRITE.DAY] = CTI(create_well(_0x19a9cc * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#1a6470"]));
  sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI(create_well(_0x19a9cc * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#09373F"]));
  sprite[SPRITE.WELL_EMPTY] = [];
  sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = CTI(create_well(_0x19a9cc * 0.3, true, ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]));
  sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI(create_well(_0x19a9cc * 0.3, true, ["#1e2021", "#1a4545", "#163a3a", "#245d5d", "#1f5454", "#0b2121"]));
  sprite[SPRITE.BOTTLE_FULL] = [CTI(create_bottle(_0x19a9cc, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.BOTTLE_EMPTY] = [CTI(create_bottle(_0x19a9cc, true, ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]))];
  sprite[SPRITE.OCEAN] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY] = [];
  sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_one(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_two(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_three(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_four(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_five(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_six(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_sept(_0x19a9cc * 1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_one(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_two(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_three(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_four(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_five(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_six(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_sept(_0x19a9cc * 1, ["#09373F"])));
  sprite[SPRITE.ISLAND] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.7, ["#FBEFBC"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.9, ["#FBEFBC"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.7, ["#FBEFBC"], 2)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.7, ["#0F4C48"], 0)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.9, ["#0F4C48"], 1)));
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.7, ["#0F4C48"], 2)));
  sprite[SPRITE.WAVE_ONE] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.8, ["#A9D6D3"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 2, ["#A9D6D3"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.8, ["#A9D6D3"], 2)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.8, ["#115E60"], 0)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 2, ["#115E60"], 1)));
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.8, ["#115E60"], 2)));
  sprite[SPRITE.WAVE_TWO] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.9, ["#2A8B9B"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 2.1, ["#2A8B9B"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(CTI(create_island(_0x19a9cc * 1.9, ["#2A8B9B"], 2)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.9, ["#0F464C"], 0)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 2.1, ["#0F464C"], 1)));
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(CTI(create_island(_0x19a9cc * 1.9, ["#0F464C"], 2)));
  sprite[SPRITE.PALM] = [];
  sprite[SPRITE.PALM][SPRITE.DAY] = [];
  sprite[SPRITE.PALM][SPRITE.NIGHT] = [];
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(_0x19a9cc * 0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(_0x19a9cc * 1, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.DAY].push(CTI(create_palm(_0x19a9cc * 1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(_0x19a9cc * 0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(_0x19a9cc * 1, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(CTI(create_palm(_0x19a9cc * 1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"])));
  sprite[SPRITE.KRAKEN] = [];
  sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI(create_kraken(_0x19a9cc * 0.8, ["#1e2021", "#B6222A", "#201851", "#342C7C", "#F4F4F4", "#D3D3D3", "#6765CE", "#593CC6", "#433BAD", "#342C7C", "#052830", "#EAEAEA", "#B6222A", "#FFFFFF"]));
  sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI(create_kraken(_0x19a9cc * 0.8, ["#0c0c0d", "#462966", "#081B2D", "#342C7C", "#9AAAAD", "#72898C", "#133556", "#296D9B", "#25557C", "#133556", "#0D2A42", "#EAEAEA", "#462966", "#72898C"]));
  sprite[SPRITE.HURT_KRAKEN] = CTI(create_hurt_kraken(_0x19a9cc * 0.8, ["#B6222A"]));
  sprite[SPRITE.PIRANHA] = [];
  sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI(create_pirahna(_0x19a9cc * 0.8, true, ["#1e2021", "#961B1B", "#702727", "#C43B3B", "#d15151", "#B71C1C", "#E8E8E8", "#752E2E", "#891818"]));
  sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI(create_pirahna(_0x19a9cc * 0.8, true, ["#0c0c0d", "#21112D", "#281A49", "#462966", "#321C56", "#1C073D", "#FFFFFF", "#1C0833", "#1B1238"]));
  sprite[SPRITE.HURT_PIRANHA] = CTI(create_hurt_pirahna(_0x19a9cc * 0.8, ["#B6222A"]));
  sprite[SPRITE.FISH1] = [];
  sprite[SPRITE.FISH1][SPRITE.DAY] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"], 0));
  sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.FISH2] = [];
  sprite[SPRITE.FISH2][SPRITE.DAY] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"], 1));
  sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1));
  sprite[SPRITE.FISH3] = [];
  sprite[SPRITE.FISH3][SPRITE.DAY] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#1e2021", "#2973a5", "#ffffff", "#ffff00", "#000000", "#03243f", "#f2ec30", "#162f6d"], 0));
  sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI(create_fish1(_0x19a9cc * 0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0));
  sprite[SPRITE.HURT_FISH1] = CTI(create_hurt_fish1(_0x19a9cc * 0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH2] = CTI(create_hurt_fish1(_0x19a9cc * 0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH3] = CTI(create_hurt_fish1(_0x19a9cc * 0.4, ["#B6222A"]));
  sprite[SPRITE.CRAB_LOOT] = CTI(create_crab_loot(_0x19a9cc * 0.35, true, ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"], 1));
  sprite[SPRITE.CRAB_STICK] = CTI(create_crab_stick(_0x19a9cc * 0.35, true, ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"], 1));
  sprite[SPRITE.CRAB_ATTACK] = [];
  sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI(create_crab(_0x19a9cc * 0.35, true, ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI(create_crab(_0x19a9cc * 0.35, true, ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"], 1));
  sprite[SPRITE.CRAB] = [];
  sprite[SPRITE.CRAB][SPRITE.DAY] = CTI(create_crab(_0x19a9cc * 0.35, true, ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI(create_crab(_0x19a9cc * 0.35, true, ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"], 0));
  sprite[SPRITE.CRAB_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI(create_crab_claw_right(_0x19a9cc * 0.42, true, ["#1e2021", "#e45936", "#ffffff"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI(create_crab_claw_right(_0x19a9cc * 0.42, true, ["#0c0c0d", "#34255d", "#563f83"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI(create_crab_claw_right(_0x19a9cc * 0.42, true, ["#1e2021", "#e45936", "#B6222A"]));
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI(create_crab_claw_right(_0x19a9cc * 0.42, true, ["#0c0c0d", "#613577", "#462966"]));
  sprite[SPRITE.HURT_CRAB] = CTI(create_hurt_crab(_0x19a9cc * 0.35, ["#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(_0x19a9cc * 0.35, true, [undefined, "#B6222A"]));
  sprite[SPRITE.HEAL_CRAB] = CTI(create_hurt_crab(_0x19a9cc * 0.35, ["#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI(create_crab_claw_left(_0x19a9cc * 0.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI(create_crab_claw_right(_0x19a9cc * 0.35, true, [undefined, "#22E066"]));
  sprite[SPRITE.DIVING_MASK] = [];
  sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI(create_divingmask(_0x19a9cc * 0.3, true, ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]));
  sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI(create_divingmask(_0x19a9cc * 0.3, true, ["#0c0c0d", "#89C9C7", "#469E95", "#092C38", "#072021", "#0E343D", "#071F2D", "#9FD3D3", "#135367"]));
  sprite[SPRITE.SUPER_DIVING_SUIT] = [];
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI(create_superdivingsuit(_0x19a9cc * 0.45, true, ["#C4BC51", "#B29C32", "#201851", "#652D8E", "#1e2021", "#2E85A0"]));
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI(create_superdivingsuit(_0x19a9cc * 0.45, true, ["#235050", "#357472", "#081B2D", "#342C7C", "#0c0c0d", "#135367"]));
  sprite[SPRITE.PLOT] = [];
  sprite[SPRITE.PLOT][SPRITE.DAY] = CTI(create_plot(_0x19a9cc * 0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"]));
  sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI(create_plot(_0x19a9cc * 0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.BRIDGE] = [];
  sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI(create_bridge(_0x19a9cc, true, ["#1e2021", "#332715", "#4C3B19", "#574122"]));
  sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI(create_bridge(_0x19a9cc, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"]));
  sprite[SPRITE.WOOD_TOWER] = [];
  sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD;
  sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN;
  sprite[SPRITE.ROOF] = [];
  sprite[SPRITE.ROOF][SPRITE.DAY] = CTI(create_roof(_0x19a9cc * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI(create_roof(_0x19a9cc * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]];
  sprite[SPRITE.ROOFS][1] = [];
  sprite[SPRITE.ROOFS][2] = [];
  sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI(create_roof1(_0x19a9cc * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI(create_roof1(_0x19a9cc * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI(create_roof2(_0x19a9cc * 0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"]));
  sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI(create_roof2(_0x19a9cc * 0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"]));
  sprite[SPRITE.WATERING_CAN_FULL] = [];
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(_0x19a9cc * 0.6, true, ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"])));
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI(create_rotated_img(3 - Math.PI / 2, create_watering_can(_0x19a9cc * 0.6, true, ["#0c0c0d", "#07383c", "#0c4e53", "#042b2e", "#0c5975", "#11546c"])));
  sprite[SPRITE.DEAD_BOX] = [];
  sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = CTI(create_dead_box(_0x19a9cc * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"], 0));
  sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI(create_dead_box(_0x19a9cc * 0.3, ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"], 0));
  sprite[SPRITE.DEAD_BOX_UI] = CTI(create_dead_box_ui(_0x19a9cc * 0.3, ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#413624"]));
  sprite[SPRITE.HURT_DEAD_BOX] = CTI(create_hurt_dead_box(_0x19a9cc * 0.3, ["#BB0000"]));
  sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button(1, [{
    f: create_flour,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
  }], 0.25, ["#d2c77b", "#e7dc8f", "#bfb360"], 0.7);
  sprite[SPRITE.LAVA_HEART] = create_craft_button(1.5, [{
    f: create_dragon_heart,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#120202", "#750a0a", "#991616", "#120202"]
  }], 0.45, ["#5bbcc9", "#73d2df", "#4daab6"], 0.9);
  sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud(_0x19a9cc * 0.35, ["#072428", "#67A242", "#67A242"], 0);
  sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud(_0x19a9cc * 0.35, ["#172130", "#649BB2", "#FFFFFF", "#FFFFFF", "#90C2D3", "#649BB2", "#84BDD1", "#2F5866"], 1);
  sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud(_0x19a9cc * 0.35, ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"], 2);
  sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud(_0x19a9cc * 0.35, ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"], 3);
  if (!mobile) {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard(_0x19a9cc));
  } else {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard_mobile(_0x19a9cc));
  }
  if (!mobile) {
    sprite[SPRITE.GAUGES] = CTI(create_gauges(_0x19a9cc));
  } else {
    sprite[SPRITE.GAUGES] = CTI(create_gauges_mobile(0.75));
  }
  if (!mobile) {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(_0x19a9cc));
  } else {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(0.75));
  }
  sprite[SPRITE.DELAY_HELMET] = CTI(create_viking_hat(_0x19a9cc * 0.16, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"]));
  sprite[SPRITE.DELAY_WEAPON] = CTI(create_rotated_img(5.8, create_sword(_0x19a9cc * 0.15, true, ["rgba(0, 0, 0, 0)", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"])));
  sprite[SPRITE.COUNTER] = [];
  sprite[SPRITE.SLOT_NUMBER] = [];
  for (var _0x14ca96 = 0; _0x14ca96 < WORLD.WITH_BAG + 2; _0x14ca96++) {
    sprite[SPRITE.SLOT_NUMBER][_0x14ca96] = create_text(_0x19a9cc, "" + (_0x14ca96 + 1), 12, "#FFF");
  }
  sprite[SPRITE.RECIPE_BUTTON] = [];
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(_0x19a9cc * 0.12, ["#442F19", "#2C2112", "#C09D6F", "#A37943", "#eda80d"])));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(_0x19a9cc * 0.12, ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"], 1)));
  sprite[SPRITE.RECIPE_BUTTON].push(CTI(create_recipe_button(_0x19a9cc * 0.12, ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"], 1)));
  sprite[SPRITE.CLOCK] = [];
  sprite[SPRITE.CLOCK].push(CTI(create_clock_day(_0x19a9cc * 0.22)));
  sprite[SPRITE.CLOCK].push(CTI(create_clock_night(_0x19a9cc * 0.22)));
  sprite[SPRITE.ARROW_CLOCK] = CTI(create_arrow_clock(_0x19a9cc * 0.22));
  sprite[SPRITE.OPTION_BUTTON] = [];
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(_0x19a9cc * 1.5, ["#795026", "#654320", "#eda80d"], 0)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(_0x19a9cc * 1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1)));
  sprite[SPRITE.OPTION_BUTTON].push(CTI(create_gear_option(_0x19a9cc * 1.5, ["#67441f", "#573819", "#9c6e08"], 1)));
  sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED;
  sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
  sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
  sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;
  sprite[SPRITE.SHOW_SPECTATORS] = create_text(_0x19a9cc, "Show spectators", 25, "#FFF", undefined, undefined, "#000", 5, 220);
  sprite[SPRITE.RECONNECT] = create_text(_0x19a9cc, "Reconnecting...", 30, "#FFF");
  console.log("Load canvas", Date.now() - _0x2c56a1);
}
function init_fake_world() {
  document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
  fake_world.items.push(new Item(ITEMS.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
  fake_world.items.push(new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0));
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
}
function draw_fake_world() {
  var _0x3aeeff = 1;
  var _0x1c1996 = fake_world.time;
  if (sprite[SPRITE.HERB]) {
    ctx.drawImage(sprite[SPRITE.HERB][_0x1c1996][1], canw2 + 480, canh2 + 190);
    ctx.drawImage(sprite[SPRITE.HERB][_0x1c1996][2], canw2 + 180, canh2 - 430);
    ctx.drawImage(sprite[SPRITE.HERB][_0x1c1996][1], canw2 - 855, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.HERB][_0x1c1996][0], canw2 - 550, canh2 - 300);
    ctx.drawImage(sprite[SPRITE.HERB][_0x1c1996][0], canw2 - 1020, canh2 - 520);
  }
  if (sprite[SPRITE.STONES]) {
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][1], canw2 - 80, canh2 - 640);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][1], canw2 + 80, canh2 + 490);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][2], canw2 - 180, canh2 - 700);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][0], canw2 + 550, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][1], canw2 + 450, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][1], canw2 + 780, canh2 + 300);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][2], canw2 + 980, canh2 + 200);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][2], canw2 + 680, canh2 + 600);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][2], canw2 - 380, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.STONES][_0x1c1996][2], canw2 + 280, canh2 + 250);
  }
  if (sprite[SPRITE.PLANT]) {
    ctx.drawImage(sprite[SPRITE.PLANT][_0x1c1996][0], canw2 - 590, canh2);
    ctx.drawImage(sprite[SPRITE.PLANT][_0x1c1996][0], canw2 + 120, canh2 - 390);
    ctx.drawImage(sprite[SPRITE.PLANT][_0x1c1996][0], canw2 - 270, canh2 + 340);
  }
  if (sprite[SPRITE.TREE]) {
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][4], canw2 - 700, canh2 - 600);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][2], canw2 - 970, canh2 - 250);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][5], canw2 - 720, canh2 - 200);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][2], canw2 - 1020, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][0], canw2 - 1120, canh2 - 0);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][1], canw2 - 650, canh2 - 330);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][4], canw2 - 495, canh2 - 90);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][3], canw2 - 520, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][_0x1c1996][2], canw2 + 830, canh2 - 520);
  }
  if (sprite[SPRITE.FIR]) {}
  if (user && world) {
    var _0x39c1cb = user.cam.x;
    var _0x5d3a02 = user.cam.y;
    user.cam.x = canw2;
    user.cam.y = canh2;
    var _0x562e42 = world.time;
    world.time = fake_world.time;
    var _0x57815a = fake_world.items;
    _0x57815a[2].x = 400;
    _0x57815a[2].y = 100;
    _0x57815a[2].draw(SPRITE.WORKBENCH);
    var _0x14cd8f = _0x57815a[1];
    _0x14cd8f.x = -500;
    _0x14cd8f.y = 100;
    _0x14cd8f.fruits[0].x = _0x14cd8f.x - 20.5;
    _0x14cd8f.fruits[0].y = _0x14cd8f.y - 22.5;
    _0x14cd8f.fruits[1].x = _0x14cd8f.x - 35.5;
    _0x14cd8f.fruits[1].y = _0x14cd8f.y + 7.5;
    _0x14cd8f.fruits[2].x = _0x14cd8f.x + 7.5;
    _0x14cd8f.fruits[2].y = _0x14cd8f.y - 30;
    _0x14cd8f.fruits[3].x = _0x14cd8f.x + 22.5;
    _0x14cd8f.fruits[3].y = _0x14cd8f.y;
    _0x14cd8f.fruits[4].x = _0x14cd8f.x - 7.5;
    _0x14cd8f.fruits[4].y = _0x14cd8f.y + 14.5;
    for (var _0x5798e1 = 0; _0x5798e1 < _0x14cd8f.info; _0x5798e1++) {
      _0x14cd8f.fruits[_0x5798e1].draw(SPRITE.FRUIT);
    }
    var _0x14cd8f = _0x57815a[3];
    _0x14cd8f.x = 210;
    _0x14cd8f.y = -290;
    _0x14cd8f.fruits[0].x = _0x14cd8f.x - 20.5;
    _0x14cd8f.fruits[0].y = _0x14cd8f.y - 22.5;
    _0x14cd8f.fruits[1].x = _0x14cd8f.x - 35.5;
    _0x14cd8f.fruits[1].y = _0x14cd8f.y + 7.5;
    _0x14cd8f.fruits[2].x = _0x14cd8f.x + 7.5;
    _0x14cd8f.fruits[2].y = _0x14cd8f.y - 30;
    _0x14cd8f.fruits[3].x = _0x14cd8f.x + 22.5;
    _0x14cd8f.fruits[3].y = _0x14cd8f.y;
    _0x14cd8f.fruits[4].x = _0x14cd8f.x - 7.5;
    _0x14cd8f.fruits[4].y = _0x14cd8f.y + 14.5;
    for (var _0x5798e1 = 0; _0x5798e1 < _0x14cd8f.info; _0x5798e1++) {
      _0x14cd8f.fruits[_0x5798e1].draw(SPRITE.FRUIT);
    }
    _0x57815a[0].x = 450;
    _0x57815a[0].y = -100;
    _0x57815a[0].draw_bg(SPRITE.WOOD_FIRE);
    _0x57815a[0].draw_fg();
    user.cam.x = _0x39c1cb;
    user.cam.y = _0x5d3a02;
    world.time = _0x562e42;
  }
}
function render_inventory() {
  sprite[SPRITE.INV_PUMPKIN] = create_craft_button(1, [{
    f: create_pumpkin,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#352b10", "#c06937", "#cd733b", "#b25e34", "#244e2b", "#214224", "#6f4424", "#3c3009"]
  }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN];
  sprite[SPRITE.INV_CARROT] = [];
  sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT;
  sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN;
  sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK;
  sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT];
  sprite[SPRITE.INV_WATERMELON] = [];
  sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT;
  sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN;
  sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK;
  sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON];
  sprite[SPRITE.INV_ALOE_VERA] = [];
  sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT;
  sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN;
  sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK;
  sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA];
  sprite[SPRITE.INV_CACTUS] = [];
  sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT;
  sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN;
  sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK;
  sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS];
  sprite[SPRITE.INV_TOMATO] = [];
  sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT;
  sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN;
  sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK;
  sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO];
  sprite[SPRITE.INV_BOAT] = [];
  sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT;
  sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN;
  sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK;
  sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.INV_MACHETE] = [];
  sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT;
  sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN;
  sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK;
  sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.INV_SLED] = [];
  sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT;
  sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN;
  sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK;
  sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.INV_PIRATE_HAT] = [];
  sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT;
  sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN;
  sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK;
  sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.INV_FUR_MAMMOTH] = [];
  sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT;
  sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN;
  sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK;
  sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH];
  sprite[SPRITE.INV_FUR_HAT] = [];
  sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT;
  sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN;
  sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK;
  sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.INV_WOOD_BOW] = [];
  sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT;
  sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN;
  sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK;
  sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.INV_WOOD_ARROW] = [];
  sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT;
  sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN;
  sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK;
  sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.INV_STONE_BOW] = [];
  sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT;
  sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN;
  sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK;
  sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.INV_STONE_ARROW] = [];
  sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT;
  sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN;
  sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK;
  sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.INV_GOLD_BOW] = [];
  sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT;
  sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN;
  sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK;
  sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.INV_GOLD_ARROW] = [];
  sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT;
  sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN;
  sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK;
  sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.INV_DIAMOND_BOW] = [];
  sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT;
  sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN;
  sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.INV_DIAMOND_ARROW] = [];
  sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT;
  sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN;
  sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.INV_AMETHYST_BOW] = [];
  sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT;
  sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN;
  sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.INV_AMETHYST_ARROW] = [];
  sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT;
  sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN;
  sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.INV_REIDITE_BOW] = [];
  sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT;
  sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN;
  sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.INV_REIDITE_ARROW] = [];
  sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT;
  sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN;
  sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.INV_DRAGON_BOW] = [];
  sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT;
  sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN;
  sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.INV_DRAGON_ARROW] = [];
  sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT;
  sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN;
  sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.INV_WOOD_SHIELD] = [];
  sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT;
  sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN;
  sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.INV_STONE_SHIELD] = [];
  sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT;
  sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN;
  sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.INV_GOLD_SHIELD] = [];
  sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT;
  sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN;
  sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.INV_DIAMOND_SHIELD] = [];
  sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT;
  sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN;
  sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.INV_AMETHYST_SHIELD] = [];
  sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT;
  sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN;
  sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.INV_REIDITE_SHIELD] = [];
  sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT;
  sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN;
  sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.INV_FLOWER_HAT] = [];
  sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT;
  sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN;
  sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK;
  sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.INV_SANDWORM_JUICE] = [];
  sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT;
  sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN;
  sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK;
  sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.INV_GARLIC] = create_craft_button(1, [{
    f: create_garlic,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"]
  }], 0.22, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC];
  sprite[SPRITE.INV_THORNBUSH] = create_craft_button(1, [{
    f: create_brambles,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"]
  }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH];
  sprite[SPRITE.INV_WINDMILL] = create_craft_button(1, [{
    f: create_windmill,
    x: -1,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
  }, {
    f: create_windmill_wing,
    x: -1,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
  }, {
    f: create_windmill_head,
    x: -1,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#596560", "#394841", "#67766F", "#46554D", "#4C3B19", "#674C2A", "#7C5A29", "#596560", "#394841"]
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.INV_WILD_WHEAT] = create_craft_button(1, [{
    f: create_wheat,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#A89F67", "#9E8456"]
  }], 1.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_SIGN] = create_craft_button(1, [{
    f: create_sign,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"]
  }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.INV_WHEAT_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#A89F67", "#9E8456"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.INV_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#493d36", "#332b28"]
  }], 0.7, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.INV_PUMPKIN_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#c67933", "#b17238"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.INV_GARLIC_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#e8e8e8", "#bbbbbb"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.INV_THORNBUSH_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#328a56", "#449573"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.INV_CARROT_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#c98e2f", "#a36b11"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.INV_WATERMELON_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#13a56d", "#098a58"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.INV_ALOE_VERA_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#3a8214", "#4a9c1e"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.INV_TOMATO_SEED] = create_craft_button(1, [{
    f: create_seed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#b22419", "#99110e"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.INV_FIRE] = create_craft_button(1, [{
    f: create_wood_fire,
    x: -2,
    y: -2,
    a: 1,
    r: -Math.PI / 7,
    c: ["#4d2d14", "#432516"]
  }, {
    f: create_fire,
    x: -2,
    y: -2,
    a: 1,
    r: -Math.PI / 7,
    c: ["#efd435", "#ec8d35", "#e96132"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.INV_BIG_FIRE] = create_craft_button(1, [{
    f: create_big_fire_wood,
    x: -2,
    y: -1,
    a: 1,
    r: -Math.PI / 7,
    c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"]
  }, {
    f: create_fire,
    x: -2,
    y: -1,
    a: 1,
    r: -Math.PI / 7,
    c: ["#efd435", "#ec8d35", "#e96132"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.INV_PIRATE_SWORD] = create_craft_button(1, [{
    f: create_pirate_sword,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#4a3a22", "#362818", "#c7c7c7", "#909090", "#eceaea", "#bbbbbb", "#d6d1d1"]
  }], 0.1, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SUGAR_CAN] = create_craft_button(1, [{
    f: create_sugar_can,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#ffffff", "#5f6061", "#eb2933", "#57b74e", "#42a54d", "#ac222a", "#e6636a"]
  }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SWORD_WOOD] = create_craft_button(1, [{
    f: create_sword_wood,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SWORD] = create_craft_button(1, [{
    f: create_stonesword,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SWORD_GOLD] = create_craft_button(1, [{
    f: create_goldsword,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SWORD_DIAMOND] = create_craft_button(1, [{
    f: create_diamondsword,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#6ad9e8", "#29aaa1", "#95e9f5", "#022320", "#011e19", "#FFFFFF"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_SWORD_AMETHYST] = create_craft_button(1, [{
    f: create_amesword,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#b864d6", "#8c29aa", "#cc81e7", "#262114", "#211108", "#FFFFFF"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK_WOOD] = create_craft_button(1, [{
    f: create_pickaxe,
    x: -2,
    y: 5,
    a: 1,
    r: -Math.PI / 5,
    c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#4d2d14", "#432516"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK] = create_craft_button(1, [{
    f: create_pickaxe,
    x: -2,
    y: 5,
    a: 1,
    r: -Math.PI / 5,
    c: ["#0d1b1c", "#000000", "#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK_GOLD] = create_craft_button(1, [{
    f: create_pickaxe,
    x: -2,
    y: 5,
    a: 1,
    r: -Math.PI / 5,
    c: ["#0d1b1c", "#000000", "#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK_DIAMOND] = create_craft_button(1, [{
    f: create_pickaxe,
    x: -2,
    y: 5,
    a: 1,
    r: -Math.PI / 5,
    c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK_AMETHYST] = create_craft_button(1, [{
    f: create_pickaxe,
    x: -2,
    y: 5,
    a: 1,
    r: -Math.PI / 5,
    c: ["#0d1b1c", "#000000", "#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_PICK_REIDITE] = [];
  sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT;
  sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN;
  sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK;
  sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.INV_STONE] = create_craft_button(1, [{
    f: create_stone,
    x: -5,
    y: -5,
    a: 1,
    r: 0,
    c: ["#252B28", "#58645F", "#75827D"]
  }], 0.23, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_GOLD] = create_craft_button(1, [{
    f: create_gold,
    x: -5,
    y: -5,
    a: 1,
    r: 0,
    c: ["#282823", "#877c2d", "#c4bc51"]
  }], 0.43, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_DIAMOND] = create_craft_button(1, [{
    f: create_diamond,
    x: -5,
    y: -5,
    a: 1,
    r: 0,
    c: ["#232828", "#3fc9c9", "#74ede6"]
  }], 0.33, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_WOOD] = create_craft_button(1, [{
    f: create_wood_fire,
    x: 0,
    y: -5,
    a: 1,
    r: Math.PI / 2.5,
    c: ["#4d2d14", "#432516"]
  }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.INV_PLANT] = create_craft_button(1, [{
    f: create_food_plant,
    x: 0,
    y: 0,
    a: 1,
    r: 0
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_WORK] = create_craft_button(1, [{
    f: create_workbench,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"]
  }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.INV_STONE_WALL] = create_craft_button(1, [{
    f: create_wall_stone,
    x: -2,
    y: -2,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.INV_DIAMOND_WALL] = create_craft_button(1, [{
    f: create_wall_diamond,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.INV_AMETHYST_WALL] = create_craft_button(1, [{
    f: create_wall_stone,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.INV_GOLD_WALL] = create_craft_button(1, [{
    f: create_wall_gold,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
  }], 0.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.INV_WALL] = create_craft_button(1, [{
    f: create_wall,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
  }], 0.45, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.INV_SPIKE] = create_craft_button(1, [{
    f: create_spike,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5f6061", "#939393", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.INV_GOLD_SPIKE] = create_craft_button(1, [{
    f: create_spike_gold,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5f6061", "#939393", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.INV_DIAMOND_SPIKE] = create_craft_button(1, [{
    f: create_spike_gold,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#7d8b90", "#9facaa", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.INV_STONE_SPIKE] = create_craft_button(1, [{
    f: create_spike_stone,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5f6061", "#939393", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.INV_AMETHYST_SPIKE] = create_craft_button(1, [{
    f: create_spike_stone,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5f6061", "#939393", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = create_craft_button(1, [{
    f: create_door_wood,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.INV_DOOR_STONE_CLOSE] = create_craft_button(1, [{
    f: create_door_stone,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = create_craft_button(1, [{
    f: create_door_stone,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = create_craft_button(1, [{
    f: create_door_gold,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = create_craft_button(1, [{
    f: create_door_diamond,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#5cc5ce", "#89d1d4", "#86d0d1", "#95d5d8", "#e0f2f6", "#b3e0e3"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.INV_CHEST] = create_craft_button(1, [{
    f: create_chest,
    x: 0,
    y: 2,
    a: 1,
    r: 0,
    c: ["#133a2b", "#9e8838", "#c4a23a", "#4c3b19", "#614627", "#614627", "#614627", "#c4a23a", "#c4a23a", "#c4a23a"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.INV_MEAT] = create_craft_button(1, [{
    f: create_meat,
    x: 0,
    y: -3,
    a: 1,
    r: 0,
    c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"]
  }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_COOKED_MEAT] = create_craft_button(1, [{
    f: create_meat,
    x: 0,
    y: -3,
    a: 1,
    r: 0,
    c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"]
  }], 1.4, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.INV_CORD] = create_craft_button(1, [{
    f: create_cord,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#cec0c4", "#ffffff", "#6d6768"]
  }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_BLUE_CORD] = create_craft_button(1, [{
    f: create_cord,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#d4e9ec", "#37b1d7", "#506c71"]
  }], 0.9, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.INV_FUR] = create_craft_button(1, [{
    f: create_fur,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#ef96be", "#ffffff"]
  }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_FUR_BOAR] = create_craft_button(1, [{
    f: create_fur,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#55423e", "#ffffff"]
  }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_SPECIAL_FUR] = create_craft_button(1, [{
    f: create_special_fur,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"]
  }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_SPECIAL_FUR_2] = create_craft_button(1, [{
    f: create_special_fur,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#14151b", "#000000", "#b35c46", "#a34d37"]
  }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_KRAKEN_SKIN] = create_craft_button(1, [{
    f: create_fur,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#201851", "#b6222a"]
  }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_FUR_WOLF] = create_craft_button(1, [{
    f: create_fur,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#231f20", "#b6222a"]
  }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_FUR_WINTER] = create_craft_button(1, [{
    f: create_fur,
    x: -3,
    y: -3,
    a: 1,
    r: 0,
    c: ["#ffffff", "#b6222a"]
  }], 0.5, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_EARMUFFS] = create_craft_button(1, [{
    f: create_earmuff,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"]
  }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.INV_COAT] = create_craft_button(1, [{
    f: create_coat,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"]
  }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.INV_CAP_SCARF] = create_craft_button(1, [{
    f: create_cap_scarf,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"]
  }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.INV_CHRISTMAS_HAT] = create_craft_button(1, [{
    f: create_christmas_hat,
    x: 0,
    y: 5,
    a: 1,
    r: 0,
    c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"]
  }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT];
  sprite[SPRITE.INV_ELF_HAT] = create_craft_button(1, [{
    f: create_elf_hat,
    x: 0,
    y: 5,
    a: 1,
    r: 0,
    c: ["#171a19", "#0f964c", "#106e3b", "#138344", "#fef4f4", "#e9dad9", "#C5232C", "#A92D2D"]
  }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT];
  sprite[SPRITE.INV_BANDAGE] = create_craft_button(1, [{
    f: create_bandage,
    x: -2,
    y: -2,
    a: 1,
    r: 0,
    c: ["#ffffff", "#cec0c4"]
  }], 0.35, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.INV_BAG] = [];
  sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT;
  sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN;
  sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK;
  sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.INV_PITCHFORK] = [];
  sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT;
  sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN;
  sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.INV_PITCHFORK2] = [];
  sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT;
  sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN;
  sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.INV_PITCHFORK_PART] = [];
  sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART];
  sprite[SPRITE.INV_PILOT_HELMET] = [];
  sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT;
  sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN;
  sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK;
  sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.INV_PILOT_GLASSES] = [];
  sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES];
  sprite[SPRITE.INV_WOOD_TOWER] = [];
  sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT;
  sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN;
  sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK;
  sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] = IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] = sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] = IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] = IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] = sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] = IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] = sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR] = [];
  sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN;
  sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.INV_REIDITE_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.INV_REIDITE_WALL] = [];
  sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT;
  sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN;
  sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.INV_PENGUIN_FEATHER] = [];
  sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.INV_HAWK_FEATHER] = [];
  sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.INV_VULTURE_FEATHER] = [];
  sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.INV_EMERALD] = [];
  sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD;
  sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD];
  sprite[SPRITE.INV_SADDLE] = [];
  sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT;
  sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN;
  sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK;
  sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.INV_WAND1] = [];
  sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT;
  sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN;
  sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK;
  sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.INV_WAND2] = [];
  sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT;
  sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN;
  sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK;
  sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.INV_MOUNT_BOAR] = [];
  sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT;
  sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN;
  sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK;
  sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.INV_CRAB_BOSS] = [];
  sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT;
  sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN;
  sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK;
  sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.INV_HAWK] = [];
  sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT;
  sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN;
  sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK;
  sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.INV_VULTURE] = [];
  sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT;
  sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN;
  sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK;
  sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.INV_TURBAN1] = [];
  sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT;
  sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN;
  sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK;
  sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.INV_TURBAN2] = [];
  sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT;
  sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN;
  sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK;
  sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.INV_PLANE] = [];
  sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT;
  sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN;
  sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK;
  sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.INV_BABY_DRAGON] = [];
  sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT;
  sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN;
  sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK;
  sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.INV_BABY_MAMMOTH] = [];
  sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT;
  sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN;
  sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK;
  sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.INV_BABY_LAVA] = [];
  sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT;
  sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN;
  sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK;
  sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.INV_BREAD_OVEN] = create_craft_button(1, [{
    f: create_bread_oven,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#515C57", "#3A4942", "#68736F", "#C1C0C0", "#be8d50", "#7d5234", "#222825", "#4D5752", "#e48727", "#d4a872", "#232a27"]
  }, {
    f: create_bread_light_up,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#e4c027"]
  }], 0.14, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.INV_FURNACE] = create_craft_button(1, [{
    f: create_furnace_on,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#939393", "#5f6061", "#c0c0c0", "#ffad22", "#fffdd5", "#fee764"]
  }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.INV_BED] = create_craft_button(1, [{
    f: create_bed,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#554139", "#3f332a", "#261912", "#eee6c5", "#d1c599", "#554139", "#3f332a", "#86509b", "#703a99", "#ded4b4", "#d6ceab", "#c796c2", "#bc83b7", "#ffffff", "#87519c", "#703e94", "#3eb67f", "#218f65", "#efe7c5", "#d093c4"]
  }], 0.32, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.INV_CRAB_LOOT] = create_craft_button(1, [{
    f: create_crab_loot,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"]
  }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT];
  sprite[SPRITE.INV_CRAB_SPEAR] = create_craft_button(1, [{
    f: create_crab_spear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#58452b", "#47341d", "#ee593d", "#c04933", "#c04933", "#a33e2b", "#c3be9a", "#7f6d52"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.INV_WOOD_SPEAR] = create_craft_button(1, [{
    f: create_wood_spear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.INV_SPEAR] = create_craft_button(1, [{
    f: create_stonespear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#4d2d14", "#432516", "#c3be9a", "#7f6d52", "#7a7575", "#454749", "#8c8787", "#939393", "#5f6061", "#aaa6a6"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.INV_GOLD_SPEAR] = create_craft_button(1, [{
    f: create_goldspear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#493e26", "#382e19", "#a69e39", "#9c8828", "#bab143", "#c4bc51", "#b29c32", "#d2ca59"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.INV_DIAMOND_SPEAR] = create_craft_button(1, [{
    f: create_diamondspear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#4ba8b4", "#198a82", "#6ccad7", "#63c9d6", "#29aaa1", "#7bd9e6"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.INV_AMETHYST_SPEAR] = create_craft_button(1, [{
    f: create_amespear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#9443b1", "#6f1988", "#a752c6", "#9e35be", "#8c29aa", "#b864d6"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.INV_DRAGON_SPEAR] = create_craft_button(1, [{
    f: create_dragon_spear,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#1e2b34", "#151c24", "#99d7dd", "#7dcbd1", "#c6e8eb", "#aadee8", "#b7e2e5"]
  }], 0.38, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.INV_HAMMER] = create_craft_button(1, [{
    f: create_hammer,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.INV_SPANNER] = create_craft_button(1, [{
    f: create_spanner,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#939393", "#5f6061"]
  }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.INV_SUPER_HAMMER] = create_craft_button(1, [{
    f: create_superhammer,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#9b5927", "#7a3610", "#1e0302", "#0d825b", "#6bd16e", "#17915d", "#89e5aa", "#16935d", "#a0efc4", "#28b26d", "#cdf4cb", "#42cc90"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.INV_HAMMER_GOLD] = create_craft_button(1, [{
    f: create_hammer,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.INV_HAMMER_DIAMOND] = create_craft_button(1, [{
    f: create_hammer,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.INV_HAMMER_AMETHYST] = create_craft_button(1, [{
    f: create_hammer,
    x: 2,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.INV_HAMMER_REIDITE] = [];
  sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT;
  sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN;
  sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK;
  sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.INV_EMERALD_MACHINE] = [];
  sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT;
  sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN;
  sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK;
  sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] = IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] = IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] = IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] = IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] = IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] = sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.INV_LOCK] = create_craft_button(1, [{
    f: create_lock,
    x: -2,
    y: -2,
    a: 1,
    r: 0,
    c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"]
  }], 0.8, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.INV_LOCKPICK] = create_craft_button(1, [{
    f: create_lockpick,
    x: -2,
    y: -2,
    a: 1,
    r: -Math.PI / 5,
    c: ["#141414", "#c4a23a", "#816511"]
  }], 0.08, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.INV_DRAGON_HEART] = create_craft_button(1, [{
    f: create_dragon_heart,
    x: -2,
    y: -2,
    a: 1,
    r: 0,
    c: ["#141414", "#178a99", "#0a6372", "#03282e"]
  }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
  sprite[SPRITE.INV_LAVA_HEART] = create_craft_button(1, [{
    f: create_dragon_heart,
    x: -2,
    y: -2,
    a: 1,
    r: 0,
    c: ["#120202", "#991616", "#750a0a", "#120202"]
  }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.7);
  sprite[SPRITE.INV_RESURRECTION] = create_craft_button(1, [{
    f: create_resurrection_ground,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#347f93", "#54a4ba"]
  }, {
    f: create_resurrection,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#347f93", "#54a4ba", "#1c2528", "#a9e4ed", "#86d4e0", "#959da0", "#697072", "#929da0", "#afb9bc", "#418ba5", "#59b8ce"]
  }, {
    f: create_resurrection_rotate,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#a9e4ed", "#86d4e0"]
  }, {
    f: create_resurrection_hole,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.INV_TOTEM] = create_craft_button(1, [{
    f: create_headtotem,
    x: 45,
    y: 70,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.INV_AMETHYST_HELMET] = create_craft_button(1, [{
    f: create_amethyst_helmet,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#8c55b7", "#652d8e", "#79359e", "#5eccd1", "#4badad", "#9e6ac6"]
  }], 0.52, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.INV_WINTER_HOOD] = create_craft_button(1, [{
    f: create_winter_hood,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#2a2938", "#242330", "#313041", "#1b1a25"]
  }], 0.12, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.INV_HOOD] = create_craft_button(1, [{
    f: create_hood,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#2a2938", "#242330", "#313041"]
  }], 0.25, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.INV_WINTER_PEASANT] = create_craft_button(1, [{
    f: create_peasant,
    x: 0,
    y: 3,
    a: 1,
    r: 0,
    c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"]
  }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.INV_PEASANT] = create_craft_button(1, [{
    f: create_peasant,
    x: 0,
    y: 3,
    a: 1,
    r: 0,
    c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"]
  }], 0.39, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.INV_CROWN_GREEN] = create_craft_button(1, [{
    f: create_crown_life,
    x: 0,
    y: 10,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#49B669", "#19994C", "#71C187"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.INV_CROWN_ORANGE] = create_craft_button(1, [{
    f: create_crown_life,
    x: 0,
    y: 10,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#C45727", "#994617", "#DB9358"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.INV_CROWN_BLUE] = create_craft_button(1, [{
    f: create_crown_life,
    x: 0,
    y: 10,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#A5A244", "#D8DC74", "#C0BF55", "#2792C1", "#196599", "#59C0D8"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.INV_CROWN_CRAB] = create_craft_button(1, [{
    f: create_crab_crown,
    x: -1,
    y: 0,
    a: 1,
    r: 0,
    c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.INV_DRAGON_HELMET] = create_craft_button(1, [{
    f: create_dragon_helmet,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#0d1b1c", "#cae9eb", "#75bcae", "#ffffff", "#51736d", "#2b4d48", "#1b3a3a", "#80ccca", "#59ada7"]
  }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.INV_DRAGON_SWORD] = create_craft_button(1, [{
    f: create_dragon_sword,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"]
  }], 0.75, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.INV_DRAGON_CUBE] = create_craft_button(1, [{
    f: create_dragon_cube,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
  }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_DRAGON_ORB] = create_craft_button(1, [{
    f: create_blue_orb,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"]
  }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_LAVA_CUBE] = create_craft_button(1, [{
    f: create_dragon_cube,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
  }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_LAVA_ORB] = create_craft_button(1, [{
    f: create_blue_orb,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"]
  }], 0.55, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_GEMME_GREEN] = create_craft_button(1, [{
    f: create_gemme_green,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"]
  }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_GEMME_ORANGE] = create_craft_button(1, [{
    f: create_gemme_green,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"]
  }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_GEMME_BLUE] = create_craft_button(1, [{
    f: create_gemme_green,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"]
  }], 0.35, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_SHOVEL] = create_craft_button(1, [{
    f: create_shovel,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.INV_SHOVEL_GOLD] = create_craft_button(1, [{
    f: create_shovel,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.INV_SHOVEL_DIAMOND] = create_craft_button(1, [{
    f: create_shovel,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.INV_SHOVEL_AMETHYST] = create_craft_button(1, [{
    f: create_shovel,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.INV_EXPLORER_HAT] = create_craft_button(1, [{
    f: create_explorer_hat,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"]
  }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.INV_WOOD_HELMET] = create_craft_button(1, [{
    f: create_wooden_helmet,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#252525", "#73583e", "#493425", "#7d6144"]
  }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
  sprite[SPRITE.INV_STONE_HELMET] = create_craft_button(1, [{
    f: create_viking_hat,
    x: 0,
    y: -2,
    a: 1,
    r: 0,
    c: ["#252525", "#808080", "#4a4a4a", "#9e9c8b", "#615c53", "#686969", "#8a8776", "#555555", "#747474", "#969696", "#454545"]
  }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.INV_GOLD_HELMET] = create_craft_button(1, [{
    f: create_gold_helmet,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#dbce71", "#b29c32", "#c4bc51"]
  }], 0.35, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.INV_DIAMOND_HELMET] = create_craft_button(1, [{
    f: create_diamond_helmet,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#717171", "#485252", "#555555", "#65c7cd", "#4aadad", "#358d8b", "#c1e6ea", "#a6dce4"]
  }], 0.45, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.INV_BOOK] = create_craft_button(1, [{
    f: create_book,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"]
  }], 0.15, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.INV_PAPER] = create_craft_button(1, [{
    f: create_paper,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#221e1b", "#ffffff", "#f6f0e7"]
  }], 0.3, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.INV_AMETHYST] = create_craft_button(1, [{
    f: create_amethyst,
    x: -5,
    y: -5,
    a: 1,
    r: 0,
    c: ["#1d051e", "#c27add", "#cd98e5"]
  }], 0.31, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_SAND] = create_craft_button(1, [{
    f: create_sand,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#D7C393", "#a48c6c"]
  }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_ICE] = create_craft_button(1, [{
    f: create_ice,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#93CBCE", "#E9F6F6"]
  }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.INV_GROUND] = create_craft_button(1, [{
    f: create_sand,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#866432", "#6b4f25"]
  }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_BUCKET_FULL] = create_craft_button(1, [{
    f: create_bucket_full,
    x: 3,
    y: 2,
    a: 1,
    r: 0,
    c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
  }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_BUCKET_EMPTY] = create_craft_button(1, [{
    f: create_bucket_empty,
    x: 3,
    y: 2,
    a: 1,
    r: 0,
    c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"]
  }], 0.22, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.INV_WELL] = create_craft_button(1, [{
    f: create_well,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"]
  }], 0.1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.INV_BOTTLE_FULL] = create_craft_button(1, [{
    f: create_bottle,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
  }], 0.18, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_BOTTLE_EMPTY] = create_craft_button(1, [{
    f: create_bottle_full,
    x: 0,
    y: 0,
    a: 1,
    r: Math.PI / 5,
    c: ["#C6AF81", "#C98435", "#B26F31", "#53A4D5", "#388AC7", "#C1C0C0", "#EAEAEA"]
  }], 0.18, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.INV_COOKIE] = create_craft_button(1, [{
    f: create_cookie,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.INV_CANDY] = create_craft_button(1, [{
    f: create_candy,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1a1011", "#e29c2b", "#b76413", "#d6c418", "#e0bf32", "#b78a1a", "#aa1a17", "#cc9f2f", "#cc741d", "#b51524", "#bc1522", "#991922", "#a01ed5", "#d51e81"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_FERRERO] = create_craft_button(1, [{
    f: create_ferrero_rocher,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1a1011", "#693c2a", "#54311f", "#9f7a3d", "#492d1d", "#dbb175", "#54311f", "#9f7a3d", "#604720"]
  }], 0.6, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_BREAD] = create_craft_button(1, [{
    f: create_bread,
    x: 0,
    y: -2,
    a: 1,
    r: 0,
    c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"]
  }], 0.17, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.INV_FOODFISH] = create_craft_button(1, [{
    f: create_fishfood,
    x: -3,
    y: -5,
    a: 1,
    r: 0,
    c: ["#1d051e", "#63767c", "#424f51", "#6c8288", "#536468", "#202020", "#ffffff", "#806f60", "#514942", "#756557"]
  }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.INV_FOODFISH_COOKED] = create_craft_button(1, [{
    f: create_fishfood_cooked,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1d051e", "#42261A", "#281818"]
  }], 0.23, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.INV_DIVING_MASK] = create_craft_button(1, [{
    f: create_divingmask,
    x: -3,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#65A8B7", "#2E85A0", "#14275B", "#081826", "#1A3163", "#0C1944", "#89C4CE", "#2E85A0"]
  }], 0.2, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.INV_SCALES] = create_craft_button(1, [{
    f: create_scales,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"]
  }], 0.15, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_SUPER_DIVING_SUIT] = create_craft_button(1, [{
    f: create_superdivingsuit,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"]
  }], 0.3, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.5);
  sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.INV_PLOT] = create_craft_button(1, [{
    f: create_plot,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.INV_GARLAND] = create_craft_button(1, [{
    f: create_garland_inv,
    x: -5,
    y: -5,
    a: 1,
    r: 0,
    c: ["#e2d63b", "#ee71a9", "#42b672"]
  }], 1, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND];
  sprite[SPRITE.INV_BRIDGE] = create_craft_button(1, [{
    f: create_bridge,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#332715", "#4C3B19", "#574122"]
  }], 0.5, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.INV_ROOF] = create_craft_button(1, [{
    f: create_roof,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"]
  }], 0.3, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.INV_WATERING_CAN_FULL] = create_craft_button(1, [{
    f: create_watering_can,
    x: -1,
    y: 0,
    a: 1,
    r: -Math.PI / 5,
    c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"]
  }], 0.4, ["#35b1b5", "#46c2c9", "#33b4e4"], 0.7);
  sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.INV_WATERING_CAN] = create_craft_button(1, [{
    f: create_watering_can,
    x: -1,
    y: 0,
    a: 1,
    r: -Math.PI / 5,
    c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"]
  }], 0.4, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.INV_FLOUR] = create_craft_button(1, [{
    f: create_flour,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"]
  }], 0.25, ["#2b5c48", "#2b5c48", "#2b5c48"], 0.5);
  sprite[SPRITE.INV_CRAB_STICK] = create_craft_button(1, [{
    f: create_crab_stick,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"]
  }], 0.2, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.INV_CAKE] = create_craft_button(1, [{
    f: create_cake,
    x: 0,
    y: 0,
    a: 1,
    r: 0,
    c: ["#1e2021", "#63391a", "#523124", "#d2c4b9", "#c1aca2", "#d8cbc2", "#c8b5ac", "#ac222a", "#e6636a"]
  }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.INV_SANDWICH] = create_craft_button(1, [{
    f: create_SANDWICH,
    x: -2,
    y: -8,
    a: 1,
    r: 0,
    c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"]
  }], 0.25, ["#3ba578", "#4eb687", "#3da34d"], 0.5);
  sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.INV_LAVA_SWORD] = [];
  sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT;
  sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN;
  sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.INV_LAVA_SPEAR] = [];
  sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT;
  sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN;
  sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SWORD] = [];
  sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT;
  sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN;
  sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SPEAR] = [];
  sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT;
  sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN;
  sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.INV_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][2] = IMAGES.INV_DIAMOND_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.CHEST_DIAMOND_PROTECTION] = sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.INV_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.INV_AMETHYST_PROTECTION][0] = IMAGES.INV_AMETHYST_PROTECTION_OUT;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][2] = IMAGES.INV_AMETHYST_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.CHEST_AMETHYST_PROTECTION] = sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.INV_REIDITE_PROTECTION] = [];
  sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT;
  sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN;
  sprite[SPRITE.INV_REIDITE_PROTECTION][2] = IMAGES.INV_REIDITE_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.CHEST_REIDITE_PROTECTION] = sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.INV_REIDITE_HELMET] = [];
  sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT;
  sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN;
  sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.INV_LAVA_HELMET] = [];
  sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT;
  sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN;
  sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK;
  sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.INV_FIREFLY] = [];
  sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT;
  sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN;
  sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK;
  sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.INV_WITCH] = [];
  sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT;
  sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN;
  sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK;
  sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.INV_NIMBUS] = [];
  sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT;
  sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN;
  sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK;
  sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.INV_REIDITE] = [];
  sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT;
  sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN;
  sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK;
  sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE];
  sprite[SPRITE.INV_FLAME] = [];
  sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT;
  sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN;
  sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK;
  sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME];
  sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT];
  sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB];
  sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE];
  sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB];
  sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
  sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN];
  sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD];
  sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD];
  sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE];
  sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD];
  sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND];
  sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD];
  sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT];
  sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT];
  sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD];
  sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART];
  sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART];
  sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.CHEST_SLOT] = CTI(create_chest_slot(0.8, true, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"]));
  sprite[SPRITE.CHEST_PLUS] = create_craft_button(0.5, [{
    f: create_plus_chest,
    x: 0,
    y: 2,
    a: 1,
    r: 0,
    c: ["#ffffff"]
  }], 0.16, ["#c4a23a", "#d0ad41", "#b89733"], 0.9);
  sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR];
  sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2];
  sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR];
  sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN];
  sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF];
  sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR];
  sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER];
  sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] = sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] = sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST];
  sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND];
  sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE];
  sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND];
  sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR];
  sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY];
  sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO];
  sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH];
  sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES];
  sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN];
  sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE];
  sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE];
  sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
}
INFO_BOX = [];
PLAYER_LEVEL = [];
function ctxDrawImage(_0x459f11, _0x31a825, _0x4bbe8e, _0x148b87, _0x1e29ae, _0xa78593, _0x357d4, _0x413af6, _0x3da924, _0x41a2ac) {
  if (_0x31a825.tryLoad === undefined || _0x31a825.tryLoad() === 1) {
    if (_0x41a2ac !== undefined) {
      _0x459f11.drawImage(_0x31a825, _0x4bbe8e, _0x148b87, Math.max(1, _0x1e29ae), Math.max(1, _0xa78593), _0x357d4, _0x413af6, _0x3da924, _0x41a2ac);
    } else if (_0xa78593 !== undefined) {
      _0x459f11.drawImage(_0x31a825, _0x4bbe8e, _0x148b87, _0x1e29ae, _0xa78593);
    } else {
      _0x459f11.drawImage(_0x31a825, _0x4bbe8e, _0x148b87);
    }
  }
}
function draw_info_box() {
  var _0x1ae3f5 = game.info_box;
  var _0x38566f = _0x1ae3f5.id;
  if (_0x1ae3f5.activated === 1 && _0x1ae3f5.display === 1) {
    if (INFO_BOX[_0x38566f] === undefined) {
      INFO_BOX[_0x38566f] = create_info_box(_0x38566f);
    }
    if (_0x1ae3f5.craft === 1) {
      ctxDrawImage(ctx, INFO_BOX[_0x38566f], _0x1ae3f5.x, _0x1ae3f5.y);
    } else if (_0x1ae3f5.x - 80 + INFO_BOX[_0x38566f].width > canw) {
      ctxDrawImage(ctx, INFO_BOX[_0x38566f], canw - INFO_BOX[_0x38566f].width - 10, _0x1ae3f5.y - INFO_BOX[_0x38566f].height - 10);
    } else {
      ctxDrawImage(ctx, INFO_BOX[_0x38566f], _0x1ae3f5.x - 80, _0x1ae3f5.y - INFO_BOX[_0x38566f].height - 10);
    }
  }
}
function draw_slot_number(_0x20d04e, _0x230cd2, _0x2bc382) {
  var _0x20e1e0 = sprite[SPRITE.SLOT_NUMBER][_0x20d04e];
  var _0x1750e8 = _0x230cd2.info.translate.x + scale * 5;
  var _0x2d3597 = _0x230cd2.info.translate.y + scale * 5;
  if (_0x230cd2.info.state == BUTTON_CLICK || _0x2bc382) {
    _0x2d3597 += scale * 5;
  }
  ctxDrawImage(ctx, _0x20e1e0, _0x1750e8, _0x2d3597);
}
function draw_amount(_0x26bcba, _0x602284) {
  if (!sprite[SPRITE.COUNTER][_0x26bcba]) {
    sprite[SPRITE.COUNTER][_0x26bcba] = create_text(scale, "x" + _0x26bcba, 17, "#FFF");
  }
  var _0xf82aff = sprite[SPRITE.COUNTER][_0x26bcba];
  var _0x1f7aec = _0x602284.info.translate.x + _0x602284.info.img[0].width - _0xf82aff.width - scale * 14;
  var _0x5506ee = _0x602284.info.translate.y + _0x602284.info.img[0].height - _0xf82aff.height - scale * 19;
  if (_0x602284.info.state == BUTTON_CLICK) {
    _0x5506ee += scale * 5;
  }
  ctxDrawImage(ctx, _0xf82aff, _0x1f7aec, _0x5506ee);
}
function draw_well_inventory() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open) {
    return;
  }
  user.well.open = false;
  var _0x1ddfe8 = world.fast_units[user.uid];
  var _0x3c07a5 = WORLD.DIST_WELL;
  if (!_0x1ddfe8) {
    return;
  }
  for (var _0x2e34b3 = 0; _0x2e34b3 < world.units[ITEMS.WELL].length; _0x2e34b3++) {
    var _0x47a614 = world.units[ITEMS.WELL][_0x2e34b3];
    var _0x4efc5d = Utils.dist(_0x47a614, _0x1ddfe8);
    if (_0x4efc5d < _0x3c07a5) {
      _0x3c07a5 = _0x4efc5d;
      user.well.open = true;
      user.well.pid = _0x47a614.pid;
      user.well.iid = _0x47a614.id;
    }
  }
}
function draw_sign_button() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.bread_oven.open || user.extractor.open) {
    return;
  }
  user.sign.open = false;
  var _0x524642 = world.fast_units[user.uid];
  var _0x4206f0 = WORLD.DIST_SIGN;
  if (!_0x524642) {
    return;
  }
  for (var _0x56f143 = 0; _0x56f143 < world.units[ITEMS.SIGN].length; _0x56f143++) {
    var _0x23507c = world.units[ITEMS.SIGN][_0x56f143];
    var _0x12b8be = Utils.dist(_0x23507c, _0x524642);
    if (_0x12b8be < _0x4206f0 && _0x23507c.info === 0 && _0x23507c.pid === user.id) {
      user.sign.open = true;
      _0x4206f0 = _0x12b8be;
      user.sign.iid = _0x23507c.id;
    }
  }
  if (_0x4206f0 < WORLD.DIST_SIGN) {
    var _0x49b202 = game.sign.button;
    _0x49b202.draw(ctx);
  }
}
;
function draw_bread_oven_inventory() {
  if (user.chest.open || user.furnace.open || user.windmill.open || user.extractor.open) {
    return;
  }
  user.bread_oven.open = false;
  var _0x150bfe = world.fast_units[user.uid];
  var _0x58a6c4 = WORLD.DIST_BREAD_OVEN;
  if (!_0x150bfe) {
    return;
  }
  for (var _0x41e947 = 0; _0x41e947 < world.units[ITEMS.BREAD_OVEN].length; _0x41e947++) {
    var _0x453b73 = world.units[ITEMS.BREAD_OVEN][_0x41e947];
    var _0x50c481 = Utils.dist(_0x453b73, _0x150bfe);
    if (_0x50c481 < _0x58a6c4) {
      _0x58a6c4 = _0x50c481;
      user.bread_oven.open = true;
      user.bread_oven.amount_wood = _0x453b73.info & 31;
      user.bread_oven.amount_flour = (_0x453b73.info & 992) >> 5;
      user.bread_oven.amount_bread = (_0x453b73.info & 31744) >> 10;
      user.bread_oven.pid = _0x453b73.pid;
      user.bread_oven.iid = _0x453b73.id;
    }
  }
  if (_0x58a6c4 < WORLD.DIST_BREAD_OVEN) {
    var _0x245648 = sprite[SPRITE.BREAD_OVEN_UI];
    var _0x464a39 = game.bread_oven_wood_button;
    var _0x53f2fc = _0x464a39.info.translate.x - 32;
    ctxDrawImage(ctx, _0x245648, _0x53f2fc, 0);
    if (user.bread_oven.amount_wood > 0) {
      _0x464a39.draw(ctx);
      var _0x5261ec = user.bread_oven.amount_wood;
      if (_0x5261ec > 1) {
        draw_amount(_0x5261ec, _0x464a39);
      }
    }
    var _0x464a39 = game.bread_oven_bread_button;
    if (user.bread_oven.amount_bread > 0) {
      _0x464a39.draw(ctx);
      var _0x5261ec = user.bread_oven.amount_bread;
      if (_0x5261ec > 1) {
        draw_amount(_0x5261ec, _0x464a39);
      }
    }
    var _0x464a39 = game.bread_oven_flour_button;
    if (user.bread_oven.amount_flour > 0) {
      _0x464a39.draw(ctx);
      var _0x5261ec = user.bread_oven.amount_flour;
      if (_0x5261ec > 1) {
        draw_amount(_0x5261ec, _0x464a39);
      }
    }
  }
}
function draw_extractor_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.extractor.open = false;
  var _0x4f33b0 = world.fast_units[user.uid];
  var _0x42d35e = WORLD.DIST_EXTRACTOR_MACHINE;
  if (!_0x4f33b0) {
    return;
  }
  for (var _0x308756 = 0; _0x308756 < EXTRACTORS.length; _0x308756++) {
    var _0x5933b9 = EXTRACTORS[_0x308756][0];
    var _0x288664 = EXTRACTORS[_0x308756][1];
    for (var _0x5a58a9 = 0; _0x5a58a9 < world.units[_0x5933b9].length; _0x5a58a9++) {
      var _0x4648e3 = world.units[_0x5933b9][_0x5a58a9];
      var _0x5898a6 = Utils.dist(_0x4648e3, _0x4f33b0);
      if (_0x5898a6 < _0x42d35e) {
        _0x42d35e = _0x5898a6;
        user.extractor.mineral = _0x288664;
        user.extractor.type = _0x5933b9;
        user.extractor.open = true;
        user.extractor.amount_wood = _0x4648e3.info & 255;
        user.extractor.amount_mineral = (_0x4648e3.info & 65280) >> 8;
        user.extractor.pid = _0x4648e3.pid;
        user.extractor.iid = _0x4648e3.id;
      }
    }
  }
  if (_0x42d35e < WORLD.DIST_EXTRACTOR_MACHINE) {
    var _0x4e1f96 = sprite[SPRITE.EXTRACTOR_CASES];
    var _0x32e5a9 = game.extractor_wood_button;
    var _0x173252 = _0x32e5a9.info.translate.x - 33;
    ctxDrawImage(ctx, _0x4e1f96, _0x173252, 0);
    if (user.extractor.amount_wood > 0) {
      _0x32e5a9.draw(ctx);
      var _0x2b55f3 = user.extractor.amount_wood;
      if (_0x2b55f3 > 1) {
        draw_amount(_0x2b55f3, _0x32e5a9);
      }
    }
    switch (user.extractor.mineral) {
      case INV.STONE:
        var _0x32e5a9 = game.extractor_stone_button;
        break;
      case INV.GOLD:
        var _0x32e5a9 = game.extractor_gold_button;
        break;
      case INV.DIAMOND:
        var _0x32e5a9 = game.extractor_diamond_button;
        break;
      case INV.AMETHYST:
        var _0x32e5a9 = game.extractor_amethyst_button;
        break;
      case INV.REIDITE:
        var _0x32e5a9 = game.extractor_reidite_button;
        break;
    }
    if (user.extractor.amount_mineral > 0) {
      _0x32e5a9.draw(ctx);
      var _0x2b55f3 = user.extractor.amount_mineral;
      if (_0x2b55f3 > 1) {
        draw_amount(_0x2b55f3, _0x32e5a9);
      }
    }
  }
}
function draw_windmill_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.windmill.open = false;
  var _0xfd8bee = world.fast_units[user.uid];
  var _0x53317a = WORLD.DIST_WINDMILL;
  if (!_0xfd8bee) {
    return;
  }
  for (var _0x417d61 = 0; _0x417d61 < world.units[ITEMS.WINDMILL].length; _0x417d61++) {
    var _0x1a7b83 = world.units[ITEMS.WINDMILL][_0x417d61];
    var _0x417a96 = Utils.dist(_0x1a7b83, _0xfd8bee);
    if (_0x417a96 < _0x53317a) {
      _0x53317a = _0x417a96;
      user.windmill.open = true;
      user.windmill.amount_wheat = _0x1a7b83.info & 255;
      user.windmill.amount_flour = (_0x1a7b83.info & 65280) >> 8;
      user.windmill.pid = _0x1a7b83.pid;
      user.windmill.iid = _0x1a7b83.id;
    }
  }
  if (_0x53317a < WORLD.DIST_WINDMILL) {
    var _0x16c3e9 = sprite[SPRITE.WINDMILL_CASES];
    var _0x575c9c = game.windmill_wheat_button;
    var _0x536c43 = _0x575c9c.info.translate.x - 33;
    ctxDrawImage(ctx, _0x16c3e9, _0x536c43, 0);
    if (user.windmill.amount_wheat > 0) {
      _0x575c9c.draw(ctx);
      var _0x552796 = user.windmill.amount_wheat;
      if (_0x552796 > 1) {
        draw_amount(_0x552796, _0x575c9c);
      }
    }
    var _0x575c9c = game.windmill_flour_button;
    if (user.windmill.amount_flour > 0) {
      _0x575c9c.draw(ctx);
      var _0x552796 = user.windmill.amount_flour;
      if (_0x552796 > 1) {
        draw_amount(_0x552796, _0x575c9c);
      }
    }
  }
}
function draw_furnace_inventory() {
  if (user.chest.open) {
    return;
  }
  user.furnace.amount = 0;
  user.furnace.open = false;
  var _0x245dbd = world.fast_units[user.uid];
  var _0x7abb28 = WORLD.DIST_FURNACE;
  if (!_0x245dbd) {
    return;
  }
  for (var _0x4f7917 = 0; _0x4f7917 < world.units[ITEMS.FURNACE].length; _0x4f7917++) {
    var _0x3489ef = world.units[ITEMS.FURNACE][_0x4f7917];
    var _0x3cd9c4 = Utils.dist(_0x3489ef, _0x245dbd);
    if (_0x3cd9c4 < _0x7abb28) {
      _0x7abb28 = _0x3cd9c4;
      user.furnace.open = true;
      user.furnace.amount = _0x3489ef.info;
      user.furnace.pid = _0x3489ef.pid;
      user.furnace.iid = _0x3489ef.id;
    }
  }
  if (_0x7abb28 < WORLD.DIST_FURNACE) {
    var _0x3c8bab = sprite[SPRITE.FURNACE_SLOT];
    var _0xf0ee44 = game.furnace_button;
    var _0x4cd47d = Math.floor(_0xf0ee44.info.translate.x + (_0xf0ee44.info.img[0].width - _0x3c8bab.width) / 2);
    var _0x37e712 = Math.floor(_0xf0ee44.info.translate.y + (_0xf0ee44.info.img[0].height - _0x3c8bab.height) / 2) + 3;
    ctxDrawImage(ctx, _0x3c8bab, _0x4cd47d, _0x37e712);
    if (user.furnace.amount > 0) {
      _0xf0ee44.draw(ctx);
      var _0x10a52e = user.furnace.amount;
      if (_0x10a52e > 1) {
        draw_amount(_0x10a52e, _0xf0ee44);
      }
    }
  }
}
function draw_resurrection_inventory() {
  user.resurrection.open = false;
  var _0x561b30 = world.fast_units[user.uid];
  var _0x3e98de = WORLD.DIST_RESURRECTION;
  if (!_0x561b30) {
    return;
  }
  for (var _0x23da14 = 0; _0x23da14 < world.units[ITEMS.RESURRECTION].length; _0x23da14++) {
    var _0x15f5a6 = world.units[ITEMS.RESURRECTION][_0x23da14];
    var _0x277cb6 = Utils.dist(_0x15f5a6, _0x561b30);
    if (_0x277cb6 < _0x3e98de) {
      _0x3e98de = _0x277cb6;
      user.resurrection.open = true;
      user.resurrection.pid = _0x15f5a6.pid;
      user.resurrection.iid = _0x15f5a6.id;
    }
  }
  if (_0x3e98de < WORLD.DIST_RESURRECTION) {
    game.resurrection.draw(ctx);
  }
}
function draw_team_buttons() {
  user.totem.id = -1;
  user.totem.pid = -1;
  if (user.spectator || user.totem.wait || user.zombie) {
    return;
  }
  var _0x36a8dc = world.fast_units[user.uid];
  var _0x455399 = WORLD.DIST_TOTEM;
  if (_0x36a8dc) {
    for (var _0x2ad789 = 0; _0x2ad789 < world.units[ITEMS.TOTEM].length; _0x2ad789++) {
      var _0x1b5020 = world.units[ITEMS.TOTEM][_0x2ad789];
      var _0x490f06 = Utils.dist(_0x1b5020, _0x36a8dc);
      if (_0x490f06 < _0x455399) {
        _0x455399 = _0x490f06;
        user.totem.id = _0x1b5020.id;
        user.totem.pid = _0x1b5020.pid;
        user.totem.info = _0x1b5020.info;
        user.totem.lock = (_0x1b5020.info & 16) >> 4;
      }
    }
  }
  var _0x14303e = game.team_buttons_id;
  game.team_buttons_id = -1;
  if (user.totem.pid != -1 && (user.team.length == 0 || user.id == user.totem.pid)) {
    if (user.team.length == 0 && user.totem.info >= 8) {
      game.team_buttons_id = CLIENT.TEAM_FULL;
    } else if (user.team.length == 0) {
      game.team_buttons_id = CLIENT.TEAM_JOIN;
    } else {
      game.team_buttons_id = CLIENT.TEAM_MANAGE;
    }
  } else if (user.team.length != 0 && user.team[0] != user.id) {
    game.team_buttons_id = CLIENT.TEAM_LEAVE;
  } else if (user.team.length != 0 && user.team[0] == user.id) {
    game.team_buttons_id = CLIENT.TEAM_SHOW;
  } else if (user.team.length != 0) {
    game.team_buttons_id = CLIENT.TEAM_JOIN;
  }
  if (game.team_buttons_id != -1) {
    game.team_buttons[game.team_buttons_id].button.draw(ctx);
  }
  var _0x5b9191 = document.getElementById("team_box").style;
  if (game.team_buttons_id != -1 && game.team_buttons_id != _0x14303e && _0x5b9191.display == "inline-block") {
    game.team_buttons[game.team_buttons_id].action();
  }
}
function draw_chest_inventory() {
  user.chest.id = -1;
  user.chest.lock = false;
  user.chest.locked = false;
  user.chest.lockpick = false;
  user.chest.padlock = false;
  user.chest.open = false;
  var _0x2e822d = world.fast_units[user.uid];
  var _0x5bbc01 = WORLD.DIST_CHEST;
  if (!_0x2e822d) {
    return;
  }
  for (var _0x5b20e1 = 0; _0x5b20e1 < world.units[ITEMS.CHEST].length; _0x5b20e1++) {
    var _0x54ffec = world.units[ITEMS.CHEST][_0x5b20e1];
    var _0x85b147 = Utils.dist(_0x54ffec, _0x2e822d);
    if (_0x85b147 < _0x5bbc01) {
      _0x5bbc01 = _0x85b147;
      user.chest.open = true;
      user.chest.id = _0x54ffec.action < 2 ? -1 : Math.floor((_0x54ffec.action - 1) / 2);
      user.chest.amount = _0x54ffec.info;
      user.chest.pid = _0x54ffec.pid;
      user.chest.iid = _0x54ffec.id;
      user.chest.locked = _0x54ffec.lock;
      user.chest.lock = _0x54ffec.lock && user.id != _0x54ffec.pid && !user.in_team(_0x54ffec.pid) ? true : false;
      user.chest.padlock = _0x54ffec.pid === user.id && !user.chest.locked && user.inv.find_item(INV.LOCK) != -1 ? true : false;
      if (user.chest.locked && user.inv.find_item(INV.LOCKPICK) != -1) {
        user.chest.lockpick = true;
      }
    }
  }
  if (_0x5bbc01 < WORLD.DIST_CHEST) {
    var _0x11b3e7 = sprite[SPRITE.CHEST_SLOT];
    var _0x78be9 = game.chest_buttons[0];
    var _0x15929b = Math.floor(_0x78be9.info.translate.x + (_0x78be9.info.img[0].width - _0x11b3e7.width) / 2);
    var _0x126b11 = Math.floor(_0x78be9.info.translate.y + (_0x78be9.info.img[0].height - _0x11b3e7.height) / 2) + 3;
    ctxDrawImage(ctx, _0x11b3e7, _0x15929b, _0x126b11);
    if (!user.chest.lock || user.chest.pid === user.id) {
      if (user.chest.id >= 0) {
        var _0x78be9 = game.chest_buttons[user.chest.id];
        _0x78be9.draw(ctx);
        var _0x480fe1 = user.chest.amount;
        if (_0x480fe1 > 1) {
          draw_amount(_0x480fe1, _0x78be9);
        }
      }
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        game.chest_padlock.draw(ctx);
      }
    } else {
      game.chest_locked.draw(ctx);
    }
    if (user.chest.lockpick) {
      game.chest_lockpick.draw(ctx);
    }
  }
}
function draw_bigmap() {
  if (!user.bigmap) {
    return;
  }
  ctx.globalAlpha = 0.5;
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, canw, canh);
  ctx.globalAlpha = 0.8;
  var _0x3195d1 = sprite[SPRITE.BIGMAP][world.time];
  var _0x39572a = canw2 - _0x3195d1.width / 2;
  var _0x15aa22 = canh2 - _0x3195d1.height / 2;
  ctxDrawImage(ctx, _0x3195d1, _0x39572a, _0x15aa22);
  ctx.globalAlpha = 1;
  if (game.minimap.marker.x > -1) {
    ctx.fillStyle = "#660000";
    circle(ctx, _0x39572a + game.minimap.marker.x * 3 * scale, _0x15aa22 + game.minimap.marker.y * 3 * scale, scale * 14);
    ctx.fill();
  }
  var _0x40d46d = game.minimap.players;
  for (var _0x1dc07e = 0; _0x1dc07e < _0x40d46d.length; _0x1dc07e++) {
    var _0x2f9767 = _0x40d46d[_0x1dc07e];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(ctx, _0x39572a + _0x2f9767.x / (world.nw * 100) * 600 * scale, _0x15aa22 + _0x2f9767.y / (world.nh * 100) * 600 * scale, scale * 6);
    ctx.fill();
  }
  var _0x26081d = world.fast_units[user.uid];
  if (_0x26081d) {
    ctx.fillStyle = !world.time ? "#e39716" : "#fff";
    circle(ctx, _0x39572a + _0x26081d.x / (world.nw * 100) * 600 * scale, _0x15aa22 + _0x26081d.y / (world.nh * 100) * 600 * scale, scale * 12);
    ctx.fill();
  }
}
function draw_reconnect() {
  if (user.reconnect.enabled) {
    ctx.globalAlpha = 0.9;
    ctx.fillStyle = "#000";
    round_rect(ctx, canw2 - 150, canh2 - 90, 300, 180, 15);
    ctx.fill();
    ctx.globalAlpha = 1;
    var _0x16e3f5 = sprite[SPRITE.GEAR2];
    ctx.save();
    user.reconnect.rotate = (user.reconnect.rotate + delta * 2) % (Math.PI * 2);
    ctx.translate(canw / 2, canh / 2 - 25);
    ctx.rotate(user.reconnect.rotate);
    ctxDrawImage(ctx, _0x16e3f5, -_0x16e3f5.width / 2, -_0x16e3f5.height / 2);
    ctx.restore();
    var _0x16e3f5 = sprite[SPRITE.RECONNECT];
    ctxDrawImage(ctx, _0x16e3f5, (canw - _0x16e3f5.width) / 2, (canh - _0x16e3f5.height) / 2 + 25);
  }
}
function draw_minimap() {
  if (user.inv.can_select.length > 0) {
    var _0x3a75d8 = {
      x: game.minimap.translate.x,
      y: game.minimap.translate.y - scale * 120
    };
  } else {
    var _0x3a75d8 = {
      x: game.minimap.translate.x,
      y: game.minimap.translate.y - scale * 50
    };
  }
  ctx.globalAlpha = 0.8;
  var _0x76fe73 = sprite[SPRITE.MINIMAP][world.time];
  ctxDrawImage(ctx, _0x76fe73, _0x3a75d8.x, _0x3a75d8.y);
  ctx.globalAlpha = 1;
  if (game.minimap.marker.x > -1) {
    ctx.fillStyle = "#660000";
    circle(ctx, _0x3a75d8.x + game.minimap.marker.x * scale, _0x3a75d8.y + game.minimap.marker.y * scale, scale * 5);
    ctx.fill();
  }
  var _0x230b01 = scale;
  var _0x40a2b6 = game.minimap.players;
  for (var _0x2a179a = 0; _0x2a179a < _0x40a2b6.length; _0x2a179a++) {
    var _0x4597f7 = _0x40a2b6[_0x2a179a];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(ctx, _0x3a75d8.x + _0x4597f7.x / (world.nw * 100) * 193 * scale, _0x3a75d8.y + _0x4597f7.y / (world.nh * 100) * 193 * scale, scale * 2);
    ctx.fill();
  }
  var _0x451244 = world.fast_units[user.uid];
  if (_0x451244) {
    ctx.fillStyle = !world.time ? "#e39716" : "#fff";
    circle(ctx, _0x3a75d8.x + _0x451244.x / (world.nw * 100) * 193 * scale, _0x3a75d8.y + _0x451244.y / (world.nh * 100) * 193 * scale, scale * 4);
    ctx.fill();
  }
  scale = _0x230b01;
}
var __BANDAGE__ = [];
function draw_status() {
  var _0x5b20db = -8;
  if (user.auto_feed.enabled) {
    var _0x31070f = sprite[SPRITE.AUTO_FEED];
    ctxDrawImage(ctx, _0x31070f, user.auto_feed.translate.x, user.auto_feed.translate.y + _0x5b20db);
    _0x5b20db += 70;
  }
  if (user.blizzard === 1) {
    var _0x31070f = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
    ctxDrawImage(ctx, _0x31070f, user.auto_feed.translate.x, user.auto_feed.translate.y + _0x5b20db);
    _0x5b20db += 70;
  } else if (user.gauges.cold.x < 0.25 || user.gauges.hunger.x < 0.25 || user.gauges.thirst.x < 0.25 || user.gauges.oxygen.x < 0.25 || user.gauges.warm.x < 0.25) {
    var _0x31070f = sprite[SPRITE.STOP_REGENERATION];
    ctxDrawImage(ctx, _0x31070f, user.auto_feed.translate.x, user.auto_feed.translate.y + _0x5b20db);
    _0x5b20db += 70;
  }
  if (user.bandage > 0) {
    var _0x31070f = sprite[SPRITE.BANDAGE_ACTIVATED];
    ctxDrawImage(ctx, _0x31070f, user.auto_feed.translate.x, user.auto_feed.translate.y + _0x5b20db);
    var _0x209181 = __BANDAGE__[user.bandage];
    if (_0x209181 === undefined) {
      _0x209181 = create_text(scale, user.bandage + "", 30, "#FDFDFD", null, null, null, null, null, "#C8BBBF", 6);
      __BANDAGE__[user.bandage] = _0x209181;
    }
    if (user.bandage < 9) {
      ctxDrawImage(ctx, _0x209181, user.auto_feed.translate.x - 39, user.auto_feed.translate.y + _0x5b20db + 20);
    } else {
      ctxDrawImage(ctx, _0x209181, user.auto_feed.translate.x - 46, user.auto_feed.translate.y + _0x5b20db + 20);
    }
  }
}
function draw_leaderboard() {
  var _0x3daf95 = user.ldb;
  var _0x1caf3d = game.leaderboard;
  if (_0x3daf95.update) {
    _0x3daf95.update = false;
    var _0x362f17 = _0x3daf95.ids;
    var _0x54d6c3 = _0x1caf3d.can.width;
    var _0x5d7baa = _0x1caf3d.can.height;
    var _0x47d75b = _0x1caf3d.ctx;
    var _0x59c25b = world.players;
    var _0x18d22a = false;
    _0x47d75b.clearRect(0, 0, _0x54d6c3, _0x5d7baa);
    _0x47d75b.drawImage(_0x1caf3d.img, 0, 0);
    for (var _0x1cbc24 = 0; _0x1cbc24 < _0x362f17.length; _0x1cbc24++) {
      var _0x4c9db0 = _0x59c25b[_0x362f17[_0x1cbc24]];
      if (world.mode === WORLD.MODE_HUNGER_GAMES && _0x4c9db0.nickname === "spectator") {
        continue;
      }
      if (world.mode === WORLD.MODE_ZOMBIES && _0x4c9db0.skin === WORLD.ZOMBIE_SKIN) {
        continue;
      }
      if (_0x362f17[_0x1cbc24] == user.id) {
        _0x18d22a = true;
        if (world.mode === WORLD.MODE_VAMPIRES && _0x4c9db0.skin === WORLD.VAMPIRE_SKIN) {
          color = "#FF0000";
        } else {
          color = "#FFF";
        }
      } else if (world.mode === WORLD.MODE_VAMPIRES && _0x4c9db0.skin === WORLD.VAMPIRE_SKIN) {
        color = "#990000";
      } else {
        color = "#A1BDCD";
      }
      _0x47d75b.drawImage(create_text(scale, "" + (_0x1cbc24 + 1), scale * 15, color), scale * 20, (40 + _0x1cbc24 * 22) * scale);
      if (!_0x4c9db0.ldb_label) {
        _0x4c9db0.ldb_label = create_text(scale, _0x4c9db0.nickname, scale * 15, color, undefined, undefined, undefined, undefined, scale * 110);
      }
      _0x47d75b.drawImage(_0x4c9db0.ldb_label, scale * 39, (40 + _0x1cbc24 * 22) * scale);
      _0x47d75b.drawImage(create_text(scale, Utils.simplify_number(_0x4c9db0.score), scale * 15, color), scale * 156, (40 + _0x1cbc24 * 22) * scale);
    }
    if (!_0x18d22a) {
      if (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator || world.mode === WORLD.MODE_ZOMBIES && !user.zombie) {
        _0x47d75b.drawImage(sprite[SPRITE.YOUR_SCORE], scale * 15, (46 + _0x1cbc24 * 22) * scale);
        _0x47d75b.drawImage(create_text(scale, Utils.simplify_number(world.players[user.id].score), scale * 15, "#FFF"), scale * 100, (46 + _0x1cbc24 * 22) * scale);
      }
    }
  }
  ctxDrawImage(ctx, _0x1caf3d.can, _0x1caf3d.translate.x, _0x1caf3d.translate.y);
}
function draw_totem_delay() {
  var _0x4d1c4d = user.totem;
  if (_0x4d1c4d.wait) {
    var _0x1ce32a = _0x4d1c4d.timeout.update();
    ctx.save();
    var _0x4c3fb5 = sprite[SPRITE.DELAY_TEAM];
    var _0x4cf5fe = sprite[SPRITE.DELAY_WEAPON].height + scale * 25;
    ctx.translate(_0x4c3fb5.width, game.gauges.translate.y - scale * 188 - _0x4cf5fe);
    var _0x5ed8be = -_0x4c3fb5.width / 2 - 2;
    var _0x53ed8f = -_0x4c3fb5.height / 2 - 4;
    ctxDrawImage(ctx, _0x4c3fb5, _0x5ed8be + 2, _0x53ed8f);
    ctx.beginPath();
    ctx.lineWidth = scale * 5;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, _0x53ed8f + _0x4c3fb5.height / 2, scale * 25, 0, Math.PI * 2 * _0x4d1c4d.timeout.v);
    ctx.stroke();
    ctx.restore();
    if (_0x1ce32a) {
      _0x4d1c4d.wait = false;
      _0x4d1c4d.timeout.v = 0;
      _0x4d1c4d.timeout.o = false;
    }
  }
}
function draw_clock() {
  var _0x34c636 = world.clock;
  var _0x144151 = sprite[SPRITE.CLOCK][world.time];
  ctxDrawImage(ctx, _0x144151, _0x34c636.translate.x, _0x34c636.translate.y);
  ctx.save();
  ctx.translate(_0x34c636.translate.x + _0x144151.width / 2, _0x34c636.translate.y + _0x144151.height / 2);
  world.clock.now = (new Date().getTime() - _0x34c636.init + _0x34c636.hour) % WORLD.DAY;
  var _0x4ac12c = Math.PI * 2 * world.clock.now / WORLD.DAY - Math.PI / 2;
  ctx.rotate(_0x4ac12c);
  ctxDrawImage(ctx, sprite[SPRITE.ARROW_CLOCK], -_0x144151.width / 2, -_0x144151.height / 2);
  ctx.restore();
}
function draw_build_delay() {
  var _0x316613 = user.build;
  if (_0x316613.wait) {
    var _0x4074d9 = _0x316613.timeout.update();
    ctx.save();
    var _0x1bf5b8 = sprite[SPRITE.DELAY_WALL];
    ctx.translate(_0x1bf5b8.width - scale * 12, game.gauges.translate.y - scale * 190);
    var _0x460f7d = -_0x1bf5b8.width / 2 + 9;
    var _0x11268a = -_0x1bf5b8.height / 2 - 4;
    ctxDrawImage(ctx, _0x1bf5b8, _0x460f7d, _0x11268a);
    ctx.beginPath();
    ctx.lineWidth = scale * 5;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(9, _0x11268a + _0x1bf5b8.height / 2, scale * 25, 0, Math.PI * 2 * _0x316613.timeout.v);
    ctx.stroke();
    ctx.restore();
    if (_0x4074d9) {
      _0x316613.wait = false;
      _0x316613.timeout.v = 0;
      _0x316613.timeout.o = false;
    }
  }
}
function draw_helmet_switch_delay() {
  var _0x49e613 = user.helmet;
  if (_0x49e613.wait) {
    var _0x5eaea1 = _0x49e613.timeout.update();
    ctx.save();
    var _0x2dcb3a = sprite[SPRITE.DELAY_HELMET];
    ctx.translate(_0x2dcb3a.width - scale * 2, game.gauges.translate.y - scale * 125);
    var _0x3a36d9 = -_0x2dcb3a.width / 2 + 10;
    var _0x4b5802 = -_0x2dcb3a.height / 2 - 4;
    ctxDrawImage(ctx, _0x2dcb3a, _0x3a36d9, _0x4b5802);
    ctx.beginPath();
    ctx.lineWidth = scale * 5;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(9, _0x4b5802 + _0x2dcb3a.height / 2, scale * 25, 0, Math.PI * 2 * _0x49e613.timeout.v);
    ctx.stroke();
    ctx.restore();
    if (_0x5eaea1) {
      _0x49e613.wait = false;
      _0x49e613.timeout.v = 0;
      _0x49e613.timeout.o = false;
    }
  }
}
function draw_weapon_switch_delay() {
  var _0x8cf5c = user.weapon;
  if (_0x8cf5c.wait) {
    var _0x39decf = _0x8cf5c.timeout.update();
    ctx.save();
    var _0x27c09f = sprite[SPRITE.DELAY_WEAPON];
    ctx.translate(_0x27c09f.width - scale * 2, game.gauges.translate.y - scale * 60);
    var _0x39a1bd = -_0x27c09f.width / 2 - 2;
    var _0x1998dd = -_0x27c09f.height / 2 - 4;
    ctxDrawImage(ctx, _0x27c09f, _0x39a1bd, _0x1998dd);
    ctx.beginPath();
    ctx.lineWidth = scale * 5;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, _0x1998dd + _0x27c09f.height / 2, scale * 25, 0, Math.PI * 2 * _0x8cf5c.timeout.v);
    ctx.stroke();
    ctx.restore();
    if (_0x39decf) {
      _0x8cf5c.wait = false;
      _0x8cf5c.timeout.v = 0;
      _0x8cf5c.timeout.o = false;
    }
  }
}
function draw_ui_gear() {
  var _0x94a69c = user.craft;
  if (_0x94a69c.crafting) {
    var _0x23abde = world.fast_units[user.uid];
    ctx.save();
    ctx.translate(user.cam.x + _0x23abde.x, user.cam.y + _0x23abde.y);
    var _0x118164 = sprite[SPRITE.GEAR];
    var _0x5e56c8 = -_0x118164.width / 2;
    var _0x3eb829 = -_0x118164.height / 2 - scale * 125;
    ctxDrawImage(ctx, _0x118164, _0x5e56c8, _0x3eb829);
    ctx.beginPath();
    ctx.lineWidth = scale * 5;
    ctx.strokeStyle = SPRITE.CRAFT_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(0, _0x3eb829 + _0x118164.height / 2, scale * 25, 0, Math.PI * 2 * _0x94a69c.timeout.v);
    ctx.stroke();
    ctx.restore();
  }
}
function draw_ui_crafting() {
  var _0x58e9fc = user.craft;
  if (!_0x58e9fc.crafting && _0x58e9fc.preview > 0) {
    var _0x1385ca = world.fast_units[user.uid];
    if (!_0x1385ca) {
      return;
    }
    ctx.save();
    if (INV_INFOS[_0x58e9fc.preview].grid === 0 && _0x58e9fc.mode === 0) {
      ctx.translate(user.cam.x + _0x1385ca.x, user.cam.y + _0x1385ca.y);
      ctx.rotate(_0x1385ca.angle);
      ctx.translate(120, 0);
    } else {
      var _0x18f891 = Math.floor(_0x1385ca.x + Math.cos(_0x1385ca.angle) * 120);
      var _0x40da76 = Math.floor(_0x1385ca.y + Math.sin(_0x1385ca.angle) * 120);
      _0x18f891 = user.cam.x + (_0x18f891 - _0x18f891 % 100 + 50);
      _0x40da76 = user.cam.y + (_0x40da76 - _0x40da76 % 100 + 50);
      ctx.translate(_0x18f891, _0x40da76);
    }
    var _0x16df4b = sprite[_0x58e9fc.preview][world.time];
    ctx.globalAlpha = 0.5;
    ctxDrawImage(ctx, _0x16df4b, -_0x16df4b.width / 2, -_0x16df4b.height / 2);
    ctx.globalAlpha = 1;
    ctx.restore();
    if (INV_INFOS[_0x58e9fc.preview].grid === 0) {
      if (!_0x58e9fc.label[_0x58e9fc.mode]) {
        if (_0x58e9fc.mode === 0) {
          _0x58e9fc.label[0] = create_text(scale, LANG[TEXT.MODE_FREE], 20, "#e2c340");
        } else {
          _0x58e9fc.label[1] = create_text(scale, LANG[TEXT.MODE_GRID], 20, "#e2c340");
        }
      }
      var _0x16df4b = _0x58e9fc.label[_0x58e9fc.mode];
      ctxDrawImage(ctx, _0x16df4b, canw2 + -_0x16df4b.width / 2, game.gauges.y - 26);
    }
  }
  if (_0x58e9fc.crafting) {
    var _0x3fde3d = _0x58e9fc.timeout.update();
    for (var _0x242027 = 0; _0x242027 < _0x58e9fc.can_craft.length; _0x242027++) {
      var _0x5439b3 = _0x58e9fc.can_craft[_0x242027];
      if (_0x58e9fc.id == _0x5439b3.id) {
        var _0xa9a824 = scale * 42;
        var _0x1f9eb6 = scale * 17;
        round_rect(ctx, _0x5439b3.info.translate.x, _0x5439b3.info.translate.y + _0xa9a824 * (1 - _0x58e9fc.timeout.v), _0x5439b3.info.width, _0xa9a824 * _0x58e9fc.timeout.v + _0x1f9eb6, scale * 10);
        ctx.fillStyle = "#55B973";
        ctx.fill();
        ctx.globalAlpha = 0.8;
        _0x5439b3.draw(ctx);
      } else {
        ctx.globalAlpha = 0.5;
        _0x5439b3.draw(ctx);
      }
      ctx.globalAlpha = 1;
    }
    if (_0x3fde3d) {
      _0x58e9fc.crafting = false;
      _0x58e9fc.timeout.v = 0;
      _0x58e9fc.timeout.o = false;
    }
    return true;
  } else {
    for (var _0x242027 = 0; _0x242027 < _0x58e9fc.can_craft.length; _0x242027++) {
      _0x58e9fc.can_craft[_0x242027].draw(ctx);
    }
  }
  return false;
}
function draw_ui_chat() {
  var _0x4464e8 = world.units[ITEMS.PLAYERS];
  if (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_ZOMBIES || world.mode === WORLD.MODE_LEGACY || world.mode === WORLD.MODE_BR || world.mode === WORLD.MODE_VAMPIRES) {
    for (var _0x7e45a1 = 0; _0x7e45a1 < _0x4464e8.length; _0x7e45a1++) {
      _0x4464e8[_0x7e45a1].draw_text();
    }
  } else if (world.mode === WORLD.MODE_HUNGER_GAMES) {
    for (var _0x7e45a1 = 0; _0x7e45a1 < _0x4464e8.length; _0x7e45a1++) {
      if (user.spectator || user.show_spectators.enabled) {
        _0x4464e8[_0x7e45a1].draw_text();
      } else if (_0x4464e8[_0x7e45a1].player.nickname !== "spectator") {
        _0x4464e8[_0x7e45a1].draw_text();
      }
    }
  }
}
function draw_ui_inventory() {
  var _0x2f75bc = user.inv;
  var _0x444ba2 = world.fast_units[user.uid];
  for (var _0x8a9df5 = 0; _0x8a9df5 < _0x2f75bc.can_select.length; _0x8a9df5++) {
    var _0x29ea82 = _0x2f75bc.can_select[_0x8a9df5];
    var _0x11643e = false;
    var _0x444ba2 = world.fast_units[user.uid];
    if (_0x444ba2 && (_0x444ba2.right == _0x29ea82.id || _0x444ba2.clothe == _0x29ea82.id && _0x444ba2.clothe > 0)) {
      _0x11643e = true;
      ctxDrawImage(ctx, _0x29ea82.info.img[2], _0x29ea82.info.translate.x, _0x29ea82.info.translate.y, _0x29ea82.info.width, _0x29ea82.info.height);
    } else {
      _0x29ea82.draw(ctx);
    }
    var _0x3612b8 = user.inv.n[_0x29ea82.id];
    if (_0x3612b8 > 1) {
      draw_amount(_0x3612b8, _0x29ea82);
    }
    if (_0x3612b8 > 0) {
      draw_slot_number(_0x8a9df5, _0x29ea82, _0x11643e);
    }
    var _0x1176c6 = user.chest;
    if (_0x1176c6.open && (_0x1176c6.id < 0 || _0x1176c6.id == _0x29ea82.id) && (!_0x1176c6.lock || _0x1176c6.pid == user.id)) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
    var _0x118519 = user.furnace;
    if (_0x118519.open && INV.WOOD == _0x29ea82.id) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
    var _0x4379ec = user.well;
    if (_0x4379ec.open && INV.BUCKET_FULL == _0x29ea82.id) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
    var _0x863177 = user.windmill;
    if (_0x863177.open && INV.WILD_WHEAT == _0x29ea82.id) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
    var _0x3d534a = user.extractor;
    if (_0x3d534a.open && INV.WOOD == _0x29ea82.id) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
    var _0x57a4c0 = user.bread_oven;
    if (_0x57a4c0.open && (INV.WOOD == _0x29ea82.id || INV.FLOUR == _0x29ea82.id)) {
      game.plus_buttons[_0x29ea82.id].draw(ctx);
    }
  }
  if (_0x29ea82 && _0x8a9df5 < _0x2f75bc.max) {
    var _0x5a19d7 = sprite[SPRITE.EMPTY_SLOT][2];
    x = _0x29ea82.info.translate.x;
    y = _0x29ea82.info.translate.y;
    for (j = 1; _0x8a9df5 < _0x2f75bc.max; _0x8a9df5++, j++) {
      ctxDrawImage(ctx, _0x5a19d7, x + j * (_0x5a19d7.width + 5), y);
    }
  }
}
function draw_gauges() {
  ctx.save();
  var _0x1e06fe = scale;
  if (user.gauges.life.x < 0.25) {
    ctx.globalAlpha = user.gauges.warn_life.v;
  }
  var _0x1b383a = user.inv.can_select.length > 0 ? -70 : 0;
  if (user.chest.open || user.furnace.open && user.inv.find_item(INV.WOOD) != -1 || user.windmill.open && user.inv.find_item(INV.WILD_WHEAT) != -1 || user.extractor.open && user.inv.find_item(INV.WOOD) != -1 || user.well.open && user.inv.find_item(INV.BUCKET_FULL) != -1 || user.bread_oven.open && (user.inv.find_item(INV.WOOD) != -1 || user.inv.find_item(INV.FLOUR) != -1)) {
    _0x1b383a -= scale * 50;
  }
  ctx.translate((canw - scale * 950) / 2, _0x1b383a);
  ctx.fillStyle = "#69A148";
  ctx.fillRect(this.translate.x + scale * 37, this.translate.y + scale * 17, user.gauges.life.x * 178 * scale, scale * 18);
  ctx.globalAlpha = 1;
  if (user.gauges.hunger.x < 0.35) {
    ctx.fillStyle = "#8F050A";
    ctx.globalAlpha = user.gauges.warn_hunger.v;
    ctx.fillRect(this.translate.x + scale * 277, this.translate.y + scale * 17, scale * 178, scale * 18);
    ctx.globalAlpha = 1;
  }
  ctx.fillStyle = "#AF352A";
  ctx.fillRect(this.translate.x + scale * 277, this.translate.y + scale * 17, user.gauges.hunger.x * 178 * scale, scale * 18);
  if (user.gauges.cold.x < 0.35) {
    ctx.fillStyle = "#366B91";
    ctx.globalAlpha = user.gauges.warn_cold.v;
    ctx.fillRect(this.translate.x + scale * 517, this.translate.y + scale * 17, scale * 178, scale * 18);
    ctx.globalAlpha = 1;
  }
  ctx.fillStyle = "#669BB1";
  ctx.fillRect(this.translate.x + scale * 517, this.translate.y + scale * 17, user.gauges.cold.x * 178 * scale, scale * 18);
  if (user.gauges.cold.x > 0.99) {
    if (user.gauges.warm.x < 0.35) {
      ctx.fillStyle = "#6C4036";
      ctx.globalAlpha = user.gauges.warn_warm.v;
      ctx.fillRect(this.translate.x + scale * 517, this.translate.y + scale * 17, scale * 178, scale * 18);
      ctx.globalAlpha = 1;
    }
    ctx.fillStyle = "#9C4036";
    ctx.fillRect(this.translate.x + scale * 517, this.translate.y + scale * 17, (1 - user.gauges.warm.x) * 178 * scale, scale * 18);
  }
  if (user.gauges.thirst.x < 0.35) {
    ctx.fillStyle = "#001A57";
    ctx.globalAlpha = user.gauges.warn_thirst.v;
    ctx.fillRect(this.translate.x + scale * 757, this.translate.y + scale * 17, scale * 178, scale * 18);
    ctx.globalAlpha = 1;
  }
  ctx.fillStyle = "#074A87";
  ctx.fillRect(this.translate.x + scale * 757, this.translate.y + scale * 17, user.gauges.thirst.x * 178 * scale, scale * 18);
  scale = _0x1e06fe;
  ctxDrawImage(ctx, this.img, this.translate.x, this.translate.y);
  this.y = this.translate.y + _0x1b383a;
  ctx.restore();
  if (user.gauges.oxygen.x < 0.99) {
    var _0x102bab = Math.floor(canw2 - sprite[SPRITE.OXYGEN].width / 2);
    _0x1b383a += this.translate.y - sprite[SPRITE.OXYGEN].height - scale * 5;
    ctx.fillStyle = "#BBE8EF";
    ctx.fillRect(_0x102bab + 5, _0x1b383a + scale * 5, scale * 588 * user.gauges.oxygen.x, scale * 10);
    if (user.gauges.oxygen.x < 0.35) {
      ctx.fillStyle = "#9BA8AF";
      ctx.globalAlpha = user.gauges.warn_oxygen.v;
      ctx.fillRect(_0x102bab + 5, _0x1b383a + 5, scale * 588, scale * 10);
      ctx.globalAlpha = 1;
    }
    ctxDrawImage(ctx, sprite[SPRITE.OXYGEN], _0x102bab, _0x1b383a);
    this.y = _0x1b383a;
  }
}
function draw_door(_0x36b2d4) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4cfad7 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x118877 = Math.cos(this.hit.angle - this.angle) * _0x4cfad7;
    var _0x4ba9ea = Math.sin(this.hit.angle - this.angle) * _0x4cfad7;
  } else {
    var _0x118877 = 0;
    var _0x4ba9ea = 0;
  }
  ;
  var _0x266c3f = sprite[_0x36b2d4][world.time];
  w = -_0x266c3f.width;
  h = -_0x266c3f.height;
  ctxDrawImage(ctx, _0x266c3f, -w / 2 + _0x118877, -h / 2 + _0x4ba9ea, w, h);
  ctx.restore();
}
function draw_chest() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x32ed62 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x3dc48b = Math.cos(this.hit.angle - this.angle) * _0x32ed62;
    var _0x264d6d = Math.sin(this.hit.angle - this.angle) * _0x32ed62;
  } else {
    var _0x3dc48b = 0;
    var _0x264d6d = 0;
  }
  ;
  img = sprite[SPRITE.CHEST][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x3dc48b, -h / 2 + _0x264d6d, w, h);
  if (this.lock) {
    img = sprite[SPRITE.LOCK][world.time];
    w = -img.width;
    h = -img.height;
    ctxDrawImage(ctx, img, -w / 2 + _0x3dc48b - scale * 1, -h / 2 + _0x264d6d, w, h);
  }
  ctx.restore();
}
function draw_thornbush_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.THORNBUSH_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_garlic_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.GARLIC_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_pumpkin_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.PUMPKIN_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_aloe_vera_mob() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.ALOE_VERA][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_wheat_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WHEAT_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_life_small(_0x23b246) {
  var _0x23b246 = _0x23b246 / 100;
  if (_0x23b246 > 0.8) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4b7757 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x5c9a36 = Math.cos(this.hit.angle - this.angle) * _0x4b7757;
    var _0x24aec6 = Math.sin(this.hit.angle - this.angle) * _0x4b7757;
  } else {
    var _0x5c9a36 = 0;
    var _0x24aec6 = 0;
  }
  ;
  ctx.globalAlpha = 0.5;
  circle_angle(ctx, _0x5c9a36, _0x24aec6, scale * 18, _0x23b246);
  fill_path(ctx, null, "#000000", scale * 18);
  ctx.globalAlpha = 1;
  circle_angle(ctx, _0x5c9a36, _0x24aec6, scale * 18, _0x23b246);
  fill_path(ctx, null, SPRITE.BROWN_LIFE[world.time], scale * 6);
  ctx.restore();
}
function draw_life(_0x481fc4) {
  var _0x481fc4 = _0x481fc4 / 100;
  if (_0x481fc4 > 0.95) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x407694 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x1d919b = Math.cos(this.hit.angle - this.angle) * _0x407694;
    var _0x55dfdc = Math.sin(this.hit.angle - this.angle) * _0x407694;
  } else {
    var _0x1d919b = 0;
    var _0x55dfdc = 0;
  }
  ;
  ctx.globalAlpha = 0.5;
  circle_angle(ctx, _0x1d919b, _0x55dfdc, scale * 28, _0x481fc4);
  fill_path(ctx, null, "#000000", scale * 18);
  ctx.globalAlpha = 1;
  circle_angle(ctx, _0x1d919b, _0x55dfdc, scale * 28, _0x481fc4);
  fill_path(ctx, null, SPRITE.CRAFT_LOADING[world.time], scale * 6);
  ctx.restore();
}
function draw_roof(_0x10ad20) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x463672 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x64571c = Math.cos(this.hit.angle - this.angle) * _0x463672;
    var _0x327de0 = Math.sin(this.hit.angle - this.angle) * _0x463672;
  } else {
    var _0x64571c = 0;
    var _0x327de0 = 0;
  }
  ;
  var _0x302f42 = sprite[SPRITE.ROOFS].length;
  img = sprite[SPRITE.ROOFS][(this.j + this.i % 2) % _0x302f42][world.time];
  w = -img.width;
  h = -img.height;
  var _0x268459 = world.fast_units[user.uid];
  if (_0x268459 && (user.id === this.pid || user.in_team(this.pid))) {
    if (Utils.dist(this, _0x268459) < 550) {
      this.opacity = Math.max(this.opacity - delta, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + delta, 1);
    }
  } else if (_0x268459 && Utils.dist(this, world.fast_units[user.uid]) < 150) {
    this.opacity = Math.max(this.opacity - delta, 0.3);
  } else {
    this.opacity = Math.min(this.opacity + delta, 1);
  }
  var _0x32c85b = ctx.globalAlpha;
  ctx.globalAlpha *= this.opacity;
  ctxDrawImage(ctx, img, -w / 2 + _0x64571c, -h / 2 + _0x327de0, w, h);
  ctx.globalAlpha = _0x32c85b;
  ctx.restore();
}
function draw_garland(_0xbdf176) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x5b407a = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x34e441 = Math.cos(this.hit.angle - this.angle) * _0x5b407a;
    var _0x12c432 = Math.sin(this.hit.angle - this.angle) * _0x5b407a;
  } else {
    var _0x34e441 = 0;
    var _0x12c432 = 0;
  }
  ;
  if (this.halo.update()) {
    this.color += 0.2 + Math.random() * 0.3;
  }
  img = sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2 + _0x34e441, -h / 2 + _0x12c432, w, h);
  ctx.restore();
}
function draw_bed(_0x1a2f34) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x981147 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x22734d = Math.cos(this.hit.angle - this.angle) * _0x981147;
    var _0xa09e8b = Math.sin(this.hit.angle - this.angle) * _0x981147;
  } else {
    var _0x22734d = 0;
    var _0xa09e8b = 0;
  }
  ;
  if (_0x1a2f34 === SPRITE.BED_TOP && !world.transition) {
    var _0x308942 = 0;
    var _0x272cd3 = world.units[ITEMS.PLAYERS];
    for (var _0x566547 = 0; _0x566547 < _0x272cd3.length; _0x566547++) {
      var _0x3d869a = Utils.dist(_0x272cd3[_0x566547], this);
      if (_0x3d869a < 140 && _0x3d869a > 35) {
        _0x308942 = 0;
        break;
      } else if (_0x3d869a <= 35) {
        _0x308942 = 1;
      }
    }
    if (_0x308942 === 0) {
      this.opacity = Math.max(0.5, this.opacity - delta / 1.5);
    } else {
      this.opacity = Math.min(1, this.opacity + delta / 1.5);
    }
    ctx.globalAlpha = this.opacity;
  }
  img = sprite[_0x1a2f34][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x22734d, -h / 2 + _0xa09e8b, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_item(_0x3badc1) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4ff9cc = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x50dffb = Math.cos(this.hit.angle - this.angle) * _0x4ff9cc;
    var _0x459a47 = Math.sin(this.hit.angle - this.angle) * _0x4ff9cc;
  } else {
    var _0x50dffb = 0;
    var _0x459a47 = 0;
  }
  ;
  img = sprite[_0x3badc1][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x50dffb, -h / 2 + _0x459a47, w, h);
  ctx.restore();
}
var __wave = 0;
function draw_river_tile(_0x15f20f, _0x17697c, _0x41069c, _0x23f373, _0x386930, _0x4d974f, _0x543e0b, _0x41f4dc, _0x30aacd) {
  if (_0x41f4dc === undefined) {
    _0x41f4dc = 0;
  }
  for (var _0x54f110 = _0x15f20f; _0x54f110 <= _0x17697c; _0x54f110++) {
    for (var _0x28f716 = _0x41069c; _0x28f716 <= _0x23f373; _0x28f716++) {
      var _0x2e65ff = MAP.tiles[_0x54f110][_0x28f716];
      if (_0x2e65ff === undefined || _0x2e65ff[_0x4d974f] === undefined) {
        continue;
      }
      var _0x104c74 = _0x2e65ff[_0x4d974f];
      var _0x2e7de2 = sprite[_0x386930][world.time][_0x104c74.river];
      ctxDrawImage(ctx, _0x2e7de2, user.cam.x + _0x104c74.x - _0x2e7de2.width / (_scale_object * 4), user.cam.y + _0x104c74.y - _0x2e7de2.height / (_scale_object * 4), _0x2e7de2.width / (_scale_object * 2), _0x2e7de2.height / (_scale_object * 2));
      if (ui.quality) {
        var _0x3f6fed = 2147483648;
        var _0x3a2536 = 1103515245;
        var _0x35912e = 12345;
        var _0x3f0bb0 = (_0x3a2536 * (_0x54f110 * 1000 + _0x28f716) + _0x35912e) % _0x3f6fed / _0x3f6fed;
        if (_0x3f0bb0 < 0.2) {
          _0x3f0bb0 = Math.floor(sprite[SPRITE.RIVER_DECO][world.time][_0x104c74.river].length * (_0x3f0bb0 * 5));
          var _0x2e7de2 = sprite[SPRITE.RIVER_DECO][world.time][_0x104c74.river][_0x3f0bb0];
          ctxDrawImage(ctx, _0x2e7de2, user.cam.x + _0x104c74.x - _0x2e7de2.width / (_scale_object * 4), user.cam.y + _0x104c74.y - _0x2e7de2.height / (_scale_object * 4), _0x2e7de2.width / (_scale_object * 2), _0x2e7de2.height / (_scale_object * 2));
        } else if (_0x104c74.current !== 0) {
          var _0x2e7de2 = sprite[SPRITE.RIVER_WAVE][world.time];
          var _0x5cef54 = (__wave + _0x54f110 % 2 * 30) % 60;
          ctx.globalAlpha = _0x5cef54 < 30 ? _0x5cef54 / 30 : 1 - (_0x5cef54 - 30) / 30;
          ctxDrawImage(ctx, _0x2e7de2, user.cam.x + _0x104c74.x - _0x2e7de2.width / (_scale_object * 4), user.cam.y + _0x104c74.y - _0x2e7de2.height / (_scale_object * 4) - 30 + _0x5cef54, _0x2e7de2.width / (_scale_object * 2), _0x2e7de2.height / (_scale_object * 2));
          ctx.globalAlpha = 1;
        }
      }
    }
  }
}
;
function draw_sand_worm_ground() {
  if ((this.info & 1) === 1) {
    this.dig = Math.min(this.dig + delta, 2.2);
  } else {
    this.dig = Math.max(this.dig - delta, 0);
    this.groundTimer += delta;
    if (this.groundTimer > 0.1) {
      this.groundTimer = 0;
      var _0x3d21c4 = {
        x: this.x + Math.random() * 60 - 30,
        y: this.y + Math.random() * 60 - 30,
        a: 0,
        r: Math.random() * 30 + 30
      };
      this.ground.push(_0x3d21c4);
    }
  }
  for (var _0x3c82e5 = 0; _0x3c82e5 < this.ground.length; _0x3c82e5++) {
    var _0x3d21c4 = this.ground[_0x3c82e5];
    ctx.save();
    ctx.translate(user.cam.x + _0x3d21c4.x, user.cam.y + _0x3d21c4.y);
    _0x3d21c4.a = Math.min(1, _0x3d21c4.a + delta / 2);
    var _0x22c2a8 = _0x3d21c4.a;
    if (_0x22c2a8 < 0.2) {
      _0x22c2a8 *= 5;
    } else if (_0x22c2a8 > 0.8) {
      _0x22c2a8 = (1 - _0x22c2a8) * 5;
    } else {
      _0x22c2a8 = 1;
    }
    ctx.globalAlpha = _0x22c2a8 * 0.8;
    circle(ctx, 0, 0, _0x3d21c4.r);
    fill_path(ctx, SPRITE.SAND_WORM_GROUND[world.time]);
    ctx.restore();
    if (_0x3d21c4.a === 1) {
      this.ground.splice(_0x3c82e5, 1);
      _0x3c82e5--;
    }
  }
  ;
}
;
function draw_sand_worm() {
  var _0x43828f = undefined;
  var _0xc7e6a2 = undefined;
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  this.rotate.update();
  if (this.dig >= 0.1 && this.dig <= 1.1) {
    var _0x334ecb = Math.max(0, Math.min(1, this.dig - 0.1));
    if (_0x334ecb < 0.2) {
      _0x334ecb *= 5;
    } else if (_0x334ecb > 0.8) {
      _0x334ecb = (1 - _0x334ecb) * 5;
    } else {
      _0x334ecb = 1;
    }
    var _0x43828f = sprite[SPRITE.SAND_WORM1][world.time];
    w = -_0x43828f.width * this.breath.v;
    h = -_0x43828f.height * this.breath.v;
    ctx.globalAlpha = _0x334ecb;
    ctxDrawImage(ctx, _0x43828f, -w / 4, -h / 4, w / 2, h / 2);
    var _0xc7e6a2 = sprite[SPRITE.HURT_SAND_WORM1];
  }
  if (this.dig >= 0.9) {
    var _0x334ecb = Math.max(0, Math.min(1, this.dig - 0.9));
    if (_0x334ecb < 0.2) {
      _0x334ecb *= 5;
    } else {
      _0x334ecb = 1;
    }
    var _0x43828f = sprite[SPRITE.SAND_WORM2][world.time];
    w = -_0x43828f.width * this.breath.v;
    h = -_0x43828f.height * this.breath.v;
    ctx.globalAlpha = _0x334ecb;
    ctxDrawImage(ctx, _0x43828f, -w / 4, -h / 4, w / 2, h / 2);
    var _0xc7e6a2 = sprite[SPRITE.HURT_SAND_WORM2];
  }
  if (this.action & STATE.HURT && _0xc7e6a2 !== undefined) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * _0x334ecb;
    w = -_0xc7e6a2.width * this.breath.v;
    h = -_0xc7e6a2.height * this.breath.v;
    ctxDrawImage(ctx, _0xc7e6a2, -w / 4, -h / 4, w / 2, h / 2);
  }
  ctx.globalAlpha = 1;
  ctx.restore();
}
;
function draw_vulture() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var _0x591246 = Utils.dist(this, this.r);
  if (_0x591246 > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (_0x591246 < 350) {
    this._alpha = Math.max(0, this._alpha - delta * 2.2);
  } else {
    this._alpha = Math.min(1, this._alpha + delta * 2.2);
  }
  _0xf24ee2 = sprite[SPRITE.VULTURE_GROUND_ATTACK][world.time];
  w = -_0xf24ee2.width * this.breath.v * this.scale;
  h = -_0xf24ee2.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this._alpha;
  ctxDrawImage(ctx, _0xf24ee2, -w / 4, -h / 4, w / 2, h / 2);
  _0xf24ee2 = sprite[SPRITE.VULTURE_ATTACK][world.time];
  w = -_0xf24ee2.width * this.breath.v * this.scale;
  h = -_0xf24ee2.height * this.breath.v * this.scale;
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0xf24ee2, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
    var _0xf24ee2 = sprite[SPRITE.HURT_VULTURE_GROUND];
    w = -_0xf24ee2.width * this.breath.v * this.scale;
    h = -_0xf24ee2.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0xf24ee2, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0xf24ee2 = sprite[SPRITE.HURT_VULTURE];
    w = -_0xf24ee2.width * this.breath.v * this.scale;
    h = -_0xf24ee2.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0xf24ee2, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  _0xf24ee2 = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][world.time];
  w = -_0xf24ee2.width * this.breath.v * this.scale;
  h = -_0xf24ee2.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -40, scale * 80);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0xf24ee2, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0xf24ee2 = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
    ctxDrawImage(ctx, _0xf24ee2, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0xf24ee2 = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][world.time];
  ctx.save();
  ctx.translate(scale * 40, scale * 80);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0xf24ee2, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0xf24ee2 = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
    ctxDrawImage(ctx, _0xf24ee2, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_hawk() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var _0x2eb0e2 = Utils.dist(this, this.r);
  if (_0x2eb0e2 > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (_0x2eb0e2 < 350) {
    this._alpha = Math.max(0, this._alpha - delta * 2.2);
  } else {
    this._alpha = Math.min(1, this._alpha + delta * 2.2);
  }
  if ((this.info & 1) === 0) {
    _0x4b7fdd = sprite[SPRITE.HAWK_GROUND][world.time];
  } else {
    _0x4b7fdd = sprite[SPRITE.HAWK_GROUND_ATTACK][world.time];
  }
  w = -_0x4b7fdd.width * this.breath.v * this.scale;
  h = -_0x4b7fdd.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this._alpha;
  ctxDrawImage(ctx, _0x4b7fdd, -w / 4, -h / 4, w / 2, h / 2);
  if ((this.info & 1) === 0) {
    _0x4b7fdd = sprite[SPRITE.HAWK][world.time];
  } else {
    _0x4b7fdd = sprite[SPRITE.HAWK_ATTACK][world.time];
  }
  w = -_0x4b7fdd.width * this.breath.v * this.scale;
  h = -_0x4b7fdd.height * this.breath.v * this.scale;
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0x4b7fdd, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this._alpha);
    var _0x4b7fdd = sprite[SPRITE.HURT_HAWK_GROUND];
    w = -_0x4b7fdd.width * this.breath.v * this.scale;
    h = -_0x4b7fdd.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x4b7fdd, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0x4b7fdd = sprite[SPRITE.HURT_HAWK];
    w = -_0x4b7fdd.width * this.breath.v * this.scale;
    h = -_0x4b7fdd.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x4b7fdd, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if ((this.info & 1) === 0) {
    _0x4b7fdd = sprite[SPRITE.HAWK_WING_LEFT][world.time];
  } else {
    _0x4b7fdd = sprite[SPRITE.HAWK_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x4b7fdd.width * this.breath.v * this.scale;
  h = -_0x4b7fdd.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -20, scale * 0);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0x4b7fdd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0x4b7fdd = sprite[SPRITE.HURT_HAWK_WING_LEFT];
    ctxDrawImage(ctx, _0x4b7fdd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if ((this.info & 1) === 0) {
    _0x4b7fdd = sprite[SPRITE.HAWK_WING_RIGHT][world.time];
  } else {
    _0x4b7fdd = sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(scale * 20, scale * 0);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this._alpha;
  ctxDrawImage(ctx, _0x4b7fdd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this._alpha;
    var _0x4b7fdd = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
    ctxDrawImage(ctx, _0x4b7fdd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_baby_lava() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    _0x4532cd = sprite[SPRITE.BABY_LAVA][world.time];
  } else {
    _0x4532cd = sprite[SPRITE.BABY_LAVA_ATTACK][world.time];
  }
  w = -_0x4532cd.width * this.breath.v * this.scale;
  h = -_0x4532cd.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x4532cd, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x4532cd = sprite[SPRITE.HURT_BABY_LAVA];
    ctxDrawImage(ctx, _0x4532cd, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    _0x4532cd = sprite[SPRITE.BABY_LAVA_WING_LEFT][world.time];
  } else {
    _0x4532cd = sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x4532cd.width * this.breath.v * this.scale;
  h = -_0x4532cd.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -40, scale * 10);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, _0x4532cd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x4532cd = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
    ctxDrawImage(ctx, _0x4532cd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    _0x4532cd = sprite[SPRITE.BABY_LAVA_WING_RIGHT][world.time];
  } else {
    _0x4532cd = sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(scale * 40, scale * 10);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, _0x4532cd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x4532cd = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
    ctxDrawImage(ctx, _0x4532cd, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_baby_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON][world.time];
  } else {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON_ATTACK][world.time];
  }
  w = -_0x3b4187.width * this.breath.v * this.scale;
  h = -_0x3b4187.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x3b4187, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3b4187 = sprite[SPRITE.HURT_BABY_DRAGON];
    ctxDrawImage(ctx, _0x3b4187, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON_WING_LEFT][world.time];
  } else {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x3b4187.width * this.breath.v * this.scale;
  h = -_0x3b4187.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -40, scale * 10);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, _0x3b4187, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3b4187 = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
    ctxDrawImage(ctx, _0x3b4187, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON_WING_RIGHT][world.time];
  } else {
    _0x3b4187 = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(scale * 40, scale * 10);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, _0x3b4187, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3b4187 = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
    ctxDrawImage(ctx, _0x3b4187, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_lava_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  _0x5b7279 = sprite[SPRITE.LAVA_DRAGON][world.time];
  w = -_0x5b7279.width * this.breath.v * this.scale;
  h = -_0x5b7279.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x5b7279, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x5b7279 = sprite[SPRITE.HURT_LAVA_DRAGON];
    ctxDrawImage(ctx, _0x5b7279, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  _0x5b7279 = sprite[SPRITE.LAVA_WING_LEFT][world.time];
  w = -_0x5b7279.width * this.breath.v * this.scale;
  h = -_0x5b7279.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -60, scale * 20);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, _0x5b7279, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x5b7279 = sprite[SPRITE.HURT_LAVA_WING_LEFT];
    ctxDrawImage(ctx, _0x5b7279, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0x5b7279 = sprite[SPRITE.LAVA_WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(scale * 60, scale * 20);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, _0x5b7279, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x5b7279 = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
    ctxDrawImage(ctx, _0x5b7279, -w * scale / 4, -h * scale / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  _0x119534 = sprite[SPRITE.DRAGON][world.time];
  w = -_0x119534.width * this.breath.v * this.scale;
  h = -_0x119534.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x119534, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x119534 = sprite[SPRITE.HURT_DRAGON];
    ctxDrawImage(ctx, _0x119534, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  _0x119534 = sprite[SPRITE.WING_LEFT][world.time];
  w = -_0x119534.width * this.breath.v * this.scale;
  h = -_0x119534.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(scale * -30, scale * 70);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, _0x119534, scale * -10, scale * -40, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x119534 = sprite[SPRITE.HURT_WING_LEFT];
    ctxDrawImage(ctx, _0x119534, scale * -10, scale * -40, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0x119534 = sprite[SPRITE.WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(scale * 30, scale * 70);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, _0x119534, scale * 10 - w, scale * -40, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x119534 = sprite[SPRITE.HURT_WING_RIGHT];
    ctxDrawImage(ctx, _0x119534, scale * 10 - w, scale * -40, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_crate(_0x14d223, _0x437ba5) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (_0x14d223 === SPRITE.GIFT) {
    _0x14d223 = SPRITE.CRATE;
    this.info = 36;
  }
  img = sprite[_0x14d223][this.info][world.time];
  w = -img.width / 2;
  h = -img.height / 2;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3eb217 = get_image_effect(this.info, img, __EFFECT_BOX__);
    ctxDrawImage(ctx, _0x3eb217, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_2(_0x58733e, _0x54156b) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  _0x5d8994 = sprite[_0x58733e][world.time];
  w = -_0x5d8994.width;
  h = -_0x5d8994.height;
  ctxDrawImage(ctx, _0x5d8994, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x5d8994 = sprite[_0x54156b];
    ctxDrawImage(ctx, _0x5d8994, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_baby_mammoth() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x5b1509 = sprite[SPRITE.BABY_MAMMOTH][world.time];
  } else {
    _0x5b1509 = sprite[SPRITE.BABY_MAMMOTH_ATTACK][world.time];
  }
  w = -_0x5b1509.width * this.breath.v;
  h = -_0x5b1509.height * this.breath.v;
  ctxDrawImage(ctx, _0x5b1509, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x5b1509 = sprite[SPRITE.HURT_BABY_MAMMOTH];
    ctxDrawImage(ctx, _0x5b1509, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_boar() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x38e2bd = sprite[SPRITE.BOAR][world.time];
  } else {
    _0x38e2bd = sprite[SPRITE.BOAR_ATTACK][world.time];
  }
  w = -_0x38e2bd.width * this.breath.v;
  h = -_0x38e2bd.height * this.breath.v;
  ctxDrawImage(ctx, _0x38e2bd, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x38e2bd = sprite[SPRITE.HURT_BOAR];
    ctxDrawImage(ctx, _0x38e2bd, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab_boss() {
  var _0x367e09 = Math.PI / 2;
  var _0x2d663b = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS][world.time];
  } else {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS_ATTACK][world.time];
  }
  w = -_0x499bd8.width * this.breath.v;
  h = -_0x499bd8.height * this.breath.v;
  ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x499bd8 = sprite[SPRITE.HURT_CRAB_BOSS];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x499bd8 = sprite[SPRITE.HEAL_CRAB_BOSS];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x2d663b);
  ctx.translate(100, 0);
  ctx.rotate(_0x367e09);
  if (this.info === 0) {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
  } else {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][world.time];
  }
  w = -_0x499bd8.width * this.breathl.v;
  h = -_0x499bd8.height * this.breathl.v;
  ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x499bd8 = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x499bd8 = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x367e09 + _0x2d663b);
  ctx.translate(100, 0);
  ctx.rotate(_0x367e09);
  if (this.info === 0) {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
  } else {
    _0x499bd8 = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -_0x499bd8.width * this.breathr.v;
  h = -_0x499bd8.height * this.breathr.v;
  ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x499bd8 = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x499bd8 = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x499bd8, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab() {
  var _0x195e28 = Math.PI / 2;
  var _0x4e3205 = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x2b61ab = sprite[SPRITE.CRAB][world.time];
  } else {
    _0x2b61ab = sprite[SPRITE.CRAB_ATTACK][world.time];
  }
  w = -_0x2b61ab.width * this.breath.v;
  h = -_0x2b61ab.height * this.breath.v;
  ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2b61ab = sprite[SPRITE.HURT_CRAB];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2b61ab = sprite[SPRITE.HEAL_CRAB];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x4e3205);
  ctx.translate(55, 0);
  ctx.rotate(_0x195e28);
  if (this.info === 0) {
    _0x2b61ab = sprite[SPRITE.CRAB_CLAW_LEFT][world.time];
  } else {
    _0x2b61ab = sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][world.time];
  }
  w = -_0x2b61ab.width * this.breathl.v;
  h = -_0x2b61ab.height * this.breathl.v;
  ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2b61ab = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2b61ab = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x195e28 + _0x4e3205);
  ctx.translate(55, 0);
  ctx.rotate(_0x195e28);
  if (this.info === 0) {
    _0x2b61ab = sprite[SPRITE.CRAB_CLAW_RIGHT][world.time];
  } else {
    _0x2b61ab = sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -_0x2b61ab.width * this.breathr.v;
  h = -_0x2b61ab.height * this.breathr.v;
  ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2b61ab = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2b61ab = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x2b61ab, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_spell() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.born = Math.min(1, this.born + delta * 2);
  ctx.globalAlpha = Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born;
  this.breath.update();
  img = sprite[SPRITE.SPELL][world.time][this.spell];
  if (this.spell < 2) {
    w = -img.width * this.breath.v;
    h = -img.height * this.breath.v;
  } else if (this.fly === 0) {
    w = -img.width;
    h = -img.height;
  } else {
    w = -img.width * 1.35;
    h = -img.height * 1.35;
  }
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_mobs(_0x43bd13, _0x5489a7) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  _0x1e9dc4 = sprite[_0x43bd13][world.time];
  w = -_0x1e9dc4.width * this.breath.v;
  h = -_0x1e9dc4.height * this.breath.v;
  ctxDrawImage(ctx, _0x1e9dc4, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x1e9dc4 = sprite[_0x5489a7];
    ctxDrawImage(ctx, _0x1e9dc4, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_hd(_0x2ca620, _0x11492d) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  _0xe08a28 = sprite[_0x2ca620][world.time];
  w = -_0xe08a28.width * this.breath.v;
  h = -_0xe08a28.height * this.breath.v;
  ctxDrawImage(ctx, _0xe08a28, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0xe08a28 = sprite[_0x11492d];
    ctxDrawImage(ctx, _0xe08a28, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_breath_2(_0x39a5d0, _0x1f99e7, _0x503a47) {
  ctx.save();
  ctx.translate(user.cam.x + _0x1f99e7, user.cam.y + _0x503a47);
  ctx.rotate(this.angle);
  ctx.translate(this.x - _0x1f99e7, this.y - _0x503a47);
  this.breath.update();
  img = sprite[_0x39a5d0][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_breath(_0x2d17fa) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  img = sprite[_0x2d17fa][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_thornbush() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1f14b8 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x4eb131 = Math.cos(this.hit.angle - this.angle) * _0x1f14b8;
    var _0x304b6d = Math.sin(this.hit.angle - this.angle) * _0x1f14b8;
  } else {
    var _0x4eb131 = 0;
    var _0x304b6d = 0;
  }
  ;
  var _0x5df44c = this.info & 15;
  if (this.info === 10 || _0x5df44c === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x3ce6ef = sprite[SPRITE.PLANT_THORNBUSH_DRIED][world.time];
    } else {
      var _0x3ce6ef = sprite[SPRITE.PLANT_THORNBUSH][world.time];
    }
    var _0x3a964f = -_0x3ce6ef.width * this.ground.v;
    var _0x2730c8 = -_0x3ce6ef.height * this.ground.v;
    ctxDrawImage(ctx, _0x3ce6ef, -_0x3a964f / 2 + _0x4eb131, -_0x2730c8 / 2 + _0x304b6d, _0x3a964f, _0x2730c8);
  } else {
    if (this.info & 16) {
      var _0x3ce6ef = sprite[SPRITE.DRIED_THORNBUSH][world.time];
    } else {
      var _0x3ce6ef = sprite[SPRITE.THORNBUSH][world.time];
    }
    ctx.translate(0, _0x3ce6ef.height / 2);
    ctxDrawImage(ctx, _0x3ce6ef, _0x4eb131 - _0x3ce6ef.width / 2, -_0x3ce6ef.height + _0x304b6d);
  }
  ctx.restore();
}
function draw_garlic() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2a27b1 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x5c6d18 = Math.cos(this.hit.angle - this.angle) * _0x2a27b1;
    var _0x1a2c6d = Math.sin(this.hit.angle - this.angle) * _0x2a27b1;
  } else {
    var _0x5c6d18 = 0;
    var _0x1a2c6d = 0;
  }
  ;
  var _0x4b58dd = this.info & 15;
  if (this.info === 10 || _0x4b58dd === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x49ee42 = sprite[SPRITE.PLANT_GARLIC_DRIED][world.time];
    } else {
      var _0x49ee42 = sprite[SPRITE.PLANT_GARLIC][world.time];
    }
    var _0x380e99 = -_0x49ee42.width * this.ground.v;
    var _0x14c619 = -_0x49ee42.height * this.ground.v;
    ctxDrawImage(ctx, _0x49ee42, -_0x380e99 / 2 + _0x5c6d18, -_0x14c619 / 2 + _0x1a2c6d, _0x380e99, _0x14c619);
  } else {
    if (this.info & 16) {
      var _0x49ee42 = sprite[SPRITE.DRIED_GARLIC][world.time];
    } else {
      var _0x49ee42 = sprite[SPRITE.GARLIC][world.time];
    }
    ctx.translate(0, _0x49ee42.height / 2);
    ctxDrawImage(ctx, _0x49ee42, _0x5c6d18 - _0x49ee42.width / 2, -_0x49ee42.height + _0x1a2c6d);
  }
  ctx.restore();
}
function draw_aloe_vera() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1941cf = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x7c0877 = Math.cos(this.hit.angle - this.angle) * _0x1941cf;
    var _0xcdd31f = Math.sin(this.hit.angle - this.angle) * _0x1941cf;
  } else {
    var _0x7c0877 = 0;
    var _0xcdd31f = 0;
  }
  ;
  var _0x51f576 = this.info & 15;
  if (this.info === 10 || _0x51f576 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x1ae1df = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][world.time];
    } else {
      var _0x1ae1df = sprite[SPRITE.PLANT_ALOE_VERA][world.time];
    }
    var _0x550981 = -_0x1ae1df.width * this.ground.v;
    var _0x5722d8 = -_0x1ae1df.height * this.ground.v;
    ctxDrawImage(ctx, _0x1ae1df, -_0x550981 / 2 + _0x7c0877, -_0x5722d8 / 2 + _0xcdd31f, _0x550981, _0x5722d8);
  } else {
    if (this.info & 16) {
      var _0x1ae1df = sprite[SPRITE.DRIED_ALOE_VERA][world.time];
    } else {
      var _0x1ae1df = sprite[SPRITE.ALOE_VERA_GROWN][world.time];
    }
    ctx.translate(0, _0x1ae1df.height / 2);
    ctxDrawImage(ctx, _0x1ae1df, _0x7c0877 - _0x1ae1df.width / 2, -_0x1ae1df.height + _0xcdd31f);
  }
  ctx.restore();
}
function draw_watermelon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4b173e = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x4a2b32 = Math.cos(this.hit.angle - this.angle) * _0x4b173e;
    var _0xd995b4 = Math.sin(this.hit.angle - this.angle) * _0x4b173e;
  } else {
    var _0x4a2b32 = 0;
    var _0xd995b4 = 0;
  }
  ;
  var _0x4f38b7 = this.info & 15;
  if (this.info === 10 || _0x4f38b7 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x270f74 = sprite[SPRITE.PLANT_WATERMELON_DRIED][world.time];
    } else {
      var _0x270f74 = sprite[SPRITE.PLANT_WATERMELON][world.time];
    }
    var _0x565859 = -_0x270f74.width * this.ground.v;
    var _0x4686e9 = -_0x270f74.height * this.ground.v;
    ctxDrawImage(ctx, _0x270f74, -_0x565859 / 2 + _0x4a2b32, -_0x4686e9 / 2 + _0xd995b4, _0x565859, _0x4686e9);
  } else {
    if (this.info & 16) {
      var _0x270f74 = sprite[SPRITE.DRIED_WATERMELON][world.time];
    } else {
      var _0x270f74 = sprite[SPRITE.WATERMELON][world.time];
    }
    ctx.translate(0, _0x270f74.height / 2);
    ctxDrawImage(ctx, _0x270f74, _0x4a2b32 - _0x270f74.width / 2, -_0x270f74.height + _0xd995b4);
  }
  ctx.restore();
}
function draw_carrot() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x251604 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x28afa5 = Math.cos(this.hit.angle - this.angle) * _0x251604;
    var _0xbf6b1c = Math.sin(this.hit.angle - this.angle) * _0x251604;
  } else {
    var _0x28afa5 = 0;
    var _0xbf6b1c = 0;
  }
  ;
  var _0x37248d = this.info & 15;
  if (this.info === 10 || _0x37248d === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x2f47a5 = sprite[SPRITE.PLANT_CARROT_DRIED][world.time];
    } else {
      var _0x2f47a5 = sprite[SPRITE.PLANT_CARROT][world.time];
    }
    var _0x469479 = -_0x2f47a5.width * this.ground.v;
    var _0x334ddc = -_0x2f47a5.height * this.ground.v;
    ctxDrawImage(ctx, _0x2f47a5, -_0x469479 / 2 + _0x28afa5, -_0x334ddc / 2 + _0xbf6b1c, _0x469479, _0x334ddc);
  } else {
    if (this.info & 16) {
      var _0x2f47a5 = sprite[SPRITE.DRIED_CARROT][world.time];
    } else {
      var _0x2f47a5 = sprite[SPRITE.CARROT][world.time];
    }
    ctx.translate(0, _0x2f47a5.height / 2);
    ctxDrawImage(ctx, _0x2f47a5, _0x28afa5 - _0x2f47a5.width / 2, -_0x2f47a5.height + _0xbf6b1c);
  }
  ctx.restore();
}
function draw_pumpkin() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x24c0ad = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x2a64c1 = Math.cos(this.hit.angle - this.angle) * _0x24c0ad;
    var _0x2af405 = Math.sin(this.hit.angle - this.angle) * _0x24c0ad;
  } else {
    var _0x2a64c1 = 0;
    var _0x2af405 = 0;
  }
  ;
  var _0x27939b = this.info & 15;
  if (this.info === 10 || _0x27939b === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x16f317 = sprite[SPRITE.PLANT_PUMPKIN_DRIED][world.time];
    } else {
      var _0x16f317 = sprite[SPRITE.PLANT_PUMPKIN][world.time];
    }
    var _0x277a2c = -_0x16f317.width * this.ground.v;
    var _0x31074a = -_0x16f317.height * this.ground.v;
    ctxDrawImage(ctx, _0x16f317, -_0x277a2c / 2 + _0x2a64c1, -_0x31074a / 2 + _0x2af405, _0x277a2c, _0x31074a);
  } else {
    if (this.info & 16) {
      var _0x16f317 = sprite[SPRITE.DRIED_PUMPKIN][world.time];
    } else {
      var _0x16f317 = sprite[SPRITE.PUMPKIN][world.time];
    }
    ctx.translate(0, _0x16f317.height / 2);
    ctxDrawImage(ctx, _0x16f317, _0x2a64c1 - _0x16f317.width / 2, -_0x16f317.height + _0x2af405);
  }
  ctx.restore();
}
function draw_wheat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2d7aa6 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x3e67b6 = Math.cos(this.hit.angle - this.angle) * _0x2d7aa6;
    var _0x236fe9 = Math.sin(this.hit.angle - this.angle) * _0x2d7aa6;
  } else {
    var _0x3e67b6 = 0;
    var _0x236fe9 = 0;
  }
  ;
  var _0x11f67f = this.info & 15;
  if (this.info === 10 || _0x11f67f === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x5b5c6 = sprite[SPRITE.WHEAT_SEED_DRIED][world.time];
    } else {
      var _0x5b5c6 = sprite[SPRITE.WHEAT_SEED][world.time];
    }
    var _0x2ba2aa = -_0x5b5c6.width * this.ground.v;
    var _0x32a993 = -_0x5b5c6.height * this.ground.v;
    ctxDrawImage(ctx, _0x5b5c6, -_0x2ba2aa / 2 + _0x3e67b6, -_0x32a993 / 2 + _0x236fe9, _0x2ba2aa, _0x32a993);
  } else {
    this.wind.update();
    if (this.info & 16) {
      var _0x5b5c6 = sprite[SPRITE.DRIED_WHEAT][world.time];
    } else {
      var _0x5b5c6 = sprite[SPRITE.WILD_WHEAT][world.time];
    }
    ctx.translate(0, _0x5b5c6.height / 2);
    ctx.rotate(this.wind.v);
    ctxDrawImage(ctx, _0x5b5c6, _0x3e67b6 - _0x5b5c6.width / 2, -_0x5b5c6.height + _0x236fe9);
  }
  ctx.restore();
}
function draw_seed() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2b9dd4 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x50c677 = Math.cos(this.hit.angle - this.angle) * _0x2b9dd4;
    var _0x40e9c8 = Math.sin(this.hit.angle - this.angle) * _0x2b9dd4;
  } else {
    var _0x50c677 = 0;
    var _0x40e9c8 = 0;
  }
  ;
  this.ground.update();
  var _0x362eb3 = sprite[SPRITE.PLANT_SEED][world.time];
  var _0x4cfcce = -_0x362eb3.width * this.ground.v;
  var _0x5bcbdf = -_0x362eb3.height * this.ground.v;
  ctxDrawImage(ctx, _0x362eb3, -_0x4cfcce / 2 + _0x50c677, -_0x5bcbdf / 2 + _0x40e9c8, _0x4cfcce, _0x5bcbdf);
  ctx.restore();
}
function draw_plant() {
  if (this.info === 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x5eaa7b = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x61c3cb = Math.cos(this.hit.angle - this.angle) * _0x5eaa7b;
    var _0x2b4398 = Math.sin(this.hit.angle - this.angle) * _0x5eaa7b;
  } else {
    var _0x61c3cb = 0;
    var _0x2b4398 = 0;
  }
  ;
  if (this.info & 16) {
    var _0x4bebcd = sprite[SPRITE.DRIED_PLANT][world.time];
  } else {
    var _0x4bebcd = sprite[SPRITE.PLANT_MINI][world.time];
  }
  ctxDrawImage(ctx, _0x4bebcd, -_0x4bebcd.width / 2 + _0x61c3cb, -_0x4bebcd.width / 2 + _0x2b4398);
  ctx.restore();
  var _0x553fcb = this.info & 15;
  for (var _0xc4c93b = 0; _0xc4c93b < _0x553fcb; _0xc4c93b++) {
    this.fruits[_0xc4c93b].draw(SPRITE.FRUIT);
  }
}
function draw_tomato() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x34f58d = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x3003a0 = Math.cos(this.hit.angle - this.angle) * _0x34f58d;
    var _0xa76564 = Math.sin(this.hit.angle - this.angle) * _0x34f58d;
  } else {
    var _0x3003a0 = 0;
    var _0xa76564 = 0;
  }
  ;
  this.ground.update();
  var _0x248af3 = sprite[SPRITE.PLANT_TOMATO][world.time];
  var _0x2cd455 = -_0x248af3.width * this.ground.v;
  var _0x95542e = -_0x248af3.height * this.ground.v;
  ctxDrawImage(ctx, _0x248af3, -_0x2cd455 / 2 + _0x3003a0, -_0x95542e / 2 + _0xa76564, _0x2cd455, _0x95542e);
  ctx.restore();
}
function draw_tomato_fruit() {
  if (this.info === 10) {
    return;
  }
  var _0x10cfe6 = this.info & 15;
  for (var _0x4ceb7f = 0; _0x4ceb7f < _0x10cfe6; _0x4ceb7f++) {
    this.fruits[_0x4ceb7f].draw(SPRITE.TOMATO, this.x, this.y);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x33fbd8 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x24ff98 = Math.cos(this.hit.angle - this.angle) * _0x33fbd8;
    var _0x304364 = Math.sin(this.hit.angle - this.angle) * _0x33fbd8;
  } else {
    var _0x24ff98 = 0;
    var _0x304364 = 0;
  }
  ;
  if (this.info & 16) {
    var _0x467805 = sprite[SPRITE.DRIED_TOMATO_MINI][world.time];
  } else {
    var _0x467805 = sprite[SPRITE.TOMATO_MINI][world.time];
  }
  ctxDrawImage(ctx, _0x467805, -_0x467805.width / 2 + _0x24ff98, -_0x467805.width / 2 + _0x304364);
  ctx.restore();
}
function draw_furnace() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4602a4 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x4633df = Math.cos(this.hit.angle - this.angle) * _0x4602a4;
    var _0x43be21 = Math.sin(this.hit.angle - this.angle) * _0x4602a4;
  } else {
    var _0x4633df = 0;
    var _0x43be21 = 0;
  }
  ;
  if (this.action == 2) {
    img = sprite[SPRITE.FURNACE_ON][world.time];
  } else {
    img = sprite[SPRITE.FURNACE_OFF][world.time];
  }
  ctxDrawImage(ctx, img, -img.width / 2 + _0x4633df, -img.height / 2 + _0x43be21);
  ctx.restore();
}
function draw_furnace_ground() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = 0.3;
  var _0x3d92d3 = sprite[SPRITE.GROUND_FIRE][world.time];
  var _0x574939 = -_0x3d92d3.width * this.ground.v;
  var _0x3a614c = -_0x3d92d3.height * this.ground.v;
  ctxDrawImage(ctx, _0x3d92d3, -_0x574939 / 2, -_0x3a614c / 2, _0x574939, _0x3a614c);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_bread_oven_smog() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744 && (this.smog.length == 0 || this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH)) {
    this.smog.push(SPRITE.SMOG);
  }
  for (var _0x1290fa = 0; _0x1290fa < this.smog.length; _0x1290fa++) {
    this.smog[_0x1290fa] = Math.max(0, this.smog[_0x1290fa] - delta * SPRITE.SMOG_SPEED);
    ctx.globalAlpha = this.smog[_0x1290fa] / 1.3;
    var _0x711840 = (1 - this.smog[_0x1290fa]) * 40;
    var _0x280865 = (1 - this.smog[_0x1290fa]) * 35 + 10;
    circle(ctx, scale * -68 + Math.cos(-this.angle - Math.PI / 2) * _0x711840, scale * -20 + Math.sin(-this.angle - Math.PI / 2) * _0x711840, _0x280865);
    fill_path(ctx, "#333333");
  }
  ctx.globalAlpha = 1;
  if (this.smog.length > 0 && this.smog[0] === 0) {
    this.smog.shift();
  }
  ctx.restore();
}
function draw_fire_ground(_0x3e7871) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = 0.3;
  var _0x2a1686 = sprite[SPRITE.GROUND_FIRE][world.time];
  var _0x29cd6f = -_0x2a1686.width * this.ground.v;
  var _0x108c64 = -_0x2a1686.height * this.ground.v;
  ctxDrawImage(ctx, _0x2a1686, -_0x29cd6f / 2, -_0x108c64 / 2, _0x29cd6f, _0x108c64);
  ctx.globalAlpha = 1;
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0xe37484 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x19db5c = Math.cos(this.hit.angle - this.angle) * _0xe37484;
    var _0x5507df = Math.sin(this.hit.angle - this.angle) * _0xe37484;
  } else {
    var _0x19db5c = 0;
    var _0x5507df = 0;
  }
  ;
  _0x2a1686 = sprite[_0x3e7871][world.time];
  ctxDrawImage(ctx, _0x2a1686, -_0x2a1686.width / 2 + _0x19db5c, -_0x2a1686.height / 2 + _0x5507df);
  ctx.restore();
}
function draw_sign() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2f3052 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x49d75b = Math.cos(this.hit.angle - this.angle) * _0x2f3052;
    var _0xdda8b9 = Math.sin(this.hit.angle - this.angle) * _0x2f3052;
  } else {
    var _0x49d75b = 0;
    var _0xdda8b9 = 0;
  }
  ;
  if (this.info === 0) {
    img = sprite[SPRITE.SIGN][world.time];
  } else {
    img = sprite[SPRITE.SYMBOLS][world.time][this.info - 1];
  }
  ctxDrawImage(ctx, img, -img.width / 2 + _0x49d75b, -img.height / 2 + _0xdda8b9);
  ctx.restore();
}
;
function draw_bread_oven() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x364d29 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x37c743 = Math.cos(this.hit.angle - this.angle) * _0x364d29;
    var _0x3f7b4a = Math.sin(this.hit.angle - this.angle) * _0x364d29;
  } else {
    var _0x37c743 = 0;
    var _0x3f7b4a = 0;
  }
  ;
  if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
    _0x2634e2 = sprite[SPRITE.BREAD_OVEN_ON][world.time];
    ctxDrawImage(ctx, _0x2634e2, -_0x2634e2.width / 2 + _0x37c743, -_0x2634e2.height / 2 + _0x3f7b4a);
    this.up.update();
    var _0x2634e2 = sprite[SPRITE.BREAD_LIGHT_UP][world.time];
    var _0x30df8b = -_0x2634e2.width * this.up.v;
    var _0x38bfd7 = -_0x2634e2.height * this.up.v;
    ctxDrawImage(ctx, _0x2634e2, -_0x30df8b / 2 + scale * 1, -_0x38bfd7 / 2 + scale * 3, _0x30df8b, _0x38bfd7);
  } else {
    _0x2634e2 = sprite[SPRITE.BREAD_OVEN_OFF][world.time];
    ctxDrawImage(ctx, _0x2634e2, -_0x2634e2.width / 2 + _0x37c743, -_0x2634e2.height / 2 + _0x3f7b4a);
  }
  ctx.restore();
}
function draw_windmill_wings() {
  if (this.hit.update) {
    var _0x254cf4 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x3c078c = Math.cos(this.hit.angle - this.angle) * _0x254cf4;
    var _0x58cf31 = Math.sin(this.hit.angle - this.angle) * _0x254cf4;
  } else {
    var _0x3c078c = 0;
    var _0x58cf31 = 0;
  }
  ;
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 0.5) % (Math.PI * 2);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x + _0x3c078c, user.cam.y + this.y + _0x58cf31);
  ctx.save();
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.WINDMILL_WINGS][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.angl);
  img = sprite[SPRITE.WINDMILL_HEAD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_extractor_stone() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x578a4d = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x1db8ba = Math.cos(this.hit.angle - this.angle) * _0x578a4d;
    var _0x5b10ec = Math.sin(this.hit.angle - this.angle) * _0x578a4d;
  } else {
    var _0x1db8ba = 0;
    var _0x5b10ec = 0;
  }
  ;
  ctx.save();
  if (this.info & 255 && (this.info & 65280) != 65280) {
    _0x1db8ba += Math.random() * 2 - 1;
    _0x5b10ec += Math.random() * 2 - 1;
  }
  ctx.translate(user.cam.x + this.x + _0x1db8ba, user.cam.y + this.y + _0x5b10ec);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_gold() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x27ab97 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x15c939 = Math.cos(this.hit.angle - this.angle) * _0x27ab97;
    var _0x30588d = Math.sin(this.hit.angle - this.angle) * _0x27ab97;
  } else {
    var _0x15c939 = 0;
    var _0x30588d = 0;
  }
  ;
  ctx.save();
  if (this.info & 255 && (this.info & 65280) != 65280) {
    _0x15c939 += Math.random() * 2 - 1;
    _0x30588d += Math.random() * 2 - 1;
  }
  ctx.translate(user.cam.x + this.x + _0x15c939, user.cam.y + this.y + _0x30588d);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_diamond() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0xdba1af = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0xd88321 = Math.cos(this.hit.angle - this.angle) * _0xdba1af;
    var _0x106d67 = Math.sin(this.hit.angle - this.angle) * _0xdba1af;
  } else {
    var _0xd88321 = 0;
    var _0x106d67 = 0;
  }
  ;
  ctx.save();
  if (this.info & 255 && (this.info & 65280) != 65280) {
    _0xd88321 += Math.random() * 2 - 1;
    _0x106d67 += Math.random() * 2 - 1;
  }
  ctx.translate(user.cam.x + this.x + _0xd88321, user.cam.y + this.y + _0x106d67);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_amethyst() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x35ff06 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0xbc6019 = Math.cos(this.hit.angle - this.angle) * _0x35ff06;
    var _0x2aee31 = Math.sin(this.hit.angle - this.angle) * _0x35ff06;
  } else {
    var _0xbc6019 = 0;
    var _0x2aee31 = 0;
  }
  ;
  ctx.save();
  if (this.info & 255 && (this.info & 65280) != 65280) {
    _0xbc6019 += Math.random() * 2 - 1;
    _0x2aee31 += Math.random() * 2 - 1;
  }
  ctx.translate(user.cam.x + this.x + _0xbc6019, user.cam.y + this.y + _0x2aee31);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_reidite() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0xe5dcd7 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x4d7162 = Math.cos(this.hit.angle - this.angle) * _0xe5dcd7;
    var _0x220964 = Math.sin(this.hit.angle - this.angle) * _0xe5dcd7;
  } else {
    var _0x4d7162 = 0;
    var _0x220964 = 0;
  }
  ;
  ctx.save();
  if (this.info & 255 && (this.info & 65280) != 65280) {
    _0x4d7162 += Math.random() * 2 - 1;
    _0x220964 += Math.random() * 2 - 1;
  }
  ctx.translate(user.cam.x + this.x + _0x4d7162, user.cam.y + this.y + _0x220964);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_windmill_head() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x83631e = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0xa70870 = Math.cos(this.hit.angle - this.angle) * _0x83631e;
    var _0x54027d = Math.sin(this.hit.angle - this.angle) * _0x83631e;
  } else {
    var _0xa70870 = 0;
    var _0x54027d = 0;
  }
  ;
  ctx.save();
  ctx.translate(user.cam.x + this.x + _0xa70870, user.cam.y + this.y + _0x54027d);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WINDMILL][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_emerald_machine() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1d3107 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x4c968a = Math.cos(this.hit.angle - this.angle) * _0x1d3107;
    var _0x23cf78 = Math.sin(this.hit.angle - this.angle) * _0x1d3107;
  } else {
    var _0x4c968a = 0;
    var _0x23cf78 = 0;
  }
  ;
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(user.cam.x + this.x + _0x4c968a, user.cam.y + this.y + _0x23cf78);
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EMERALD_MACHINE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.EMERALD_MACHINE_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_resurrection() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x3354a5 = (1 - this.hit.anim.v) * delta * 600 * scale;
    var _0x56d24c = Math.cos(this.hit.angle - this.angle) * _0x3354a5;
    var _0x4e8efc = Math.sin(this.hit.angle - this.angle) * _0x3354a5;
  } else {
    var _0x56d24c = 0;
    var _0x4e8efc = 0;
  }
  ;
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(user.cam.x + this.x + _0x56d24c, user.cam.y + this.y + _0x4e8efc);
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.RESURRECTION][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.RESURRECTION_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.RESURRECTION_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_emerald_machine_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.EMERALD_MACHINE_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_resurrection_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.RESURRECTION_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_furnace_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_fire_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.fire.update();
  img = sprite[SPRITE.FIRE][world.time];
  w = -img.width * this.fire.v;
  h = -img.height * this.fire.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_player_effect(_0x4885c9) {
  if (_0x4885c9.right >= 0) {
    switch (_0x4885c9.right) {
      case SPRITE.WATERING_CAN_FULL:
        ctx.save();
        var _0x25c93d = _0x4885c9.attack.v * -3 / Math.PI;
        if (_0x4885c9.attack.o) {
          var _0x4b909d = -Math.PI / 3 - (Math.PI / 3 + _0x4885c9.attack.v) / 3;
        } else {
          var _0x4b909d = _0x4885c9.attack.v;
        }
        ctx.rotate(_0x4885c9.angle - Math.PI / 2 + _0x4b909d);
        ctx.globalAlpha = _0x25c93d / 1.2;
        circle(ctx, scale * -40, scale * 90, scale * 5);
        fill_path(ctx, "#0B6A84");
        ctx.globalAlpha = _0x25c93d / 1.2;
        circle(ctx, scale * -52, scale * 100, scale * 8);
        fill_path(ctx, "#0B6A84");
        ctx.globalAlpha = _0x25c93d / 1.2;
        circle(ctx, scale * -30, scale * 95, scale * 4);
        fill_path(ctx, "#0B6A84");
        ctx.globalAlpha = 1;
        ctx.restore();
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        if (_0x4885c9.fly === 1) {
          break;
        }
        if (_0x4885c9.dist_winter > 0) {
          var _0x39baba = SPRITE.ICE_SHOVEL_CO[world.time];
        } else if (_0x4885c9.dist_sand > 0 || _0x4885c9.dist_desert > 0) {
          var _0x39baba = SPRITE.SAND_SHOVEL_CO[world.time];
        } else {
          var _0x39baba = SPRITE.GRD_SHOVEL_CO[world.time];
        }
        var _0x25c93d = _0x4885c9.attack.v * -3 / Math.PI;
        if (_0x4885c9.attack.o) {
          var _0x4b909d = Math.max(0.5 - _0x25c93d / 2 + 0.5, 0);
        } else {
          var _0x4b909d = Math.max(_0x25c93d / 2, 0);
        }
        if (_0x4b909d === 0) {
          _0x4885c9.angle_init = _0x4885c9.angle;
        }
        ctx.save();
        ctx.rotate(_0x4885c9.angle_init - Math.PI / 2);
        ctx.globalAlpha = _0x25c93d;
        var _0x45b030 = scale * 25 + _0x4b909d * 25;
        circle(ctx, _0x45b030, scale * 80, scale * 15);
        fill_path(ctx, _0x39baba);
        circle(ctx, -_0x45b030, scale * 80, scale * 15);
        fill_path(ctx, _0x39baba);
        ctx.globalAlpha = 1;
        ctx.restore();
        break;
    }
  }
}
function draw_player_right_stuff_after(_0x1e57a8, _0x40d365, _0x3ef108) {
  if (_0x1e57a8 >= 0) {
    img = sprite[_0x1e57a8][world.time];
    switch (_0x1e57a8) {
      case SPRITE.WOOD_SHIELD:
      case SPRITE.STONE_SHIELD:
      case SPRITE.GOLD_SHIELD:
        draw_image_transition_hd(_0x1e57a8, img, -img.width / 4 - scale * (0 + _0x40d365), -img.height / 4 + scale * (_0x3ef108 + 35));
        break;
      case SPRITE.DIAMOND_SHIELD:
        draw_image_transition_hd(_0x1e57a8, img, -img.width / 4 - scale * (1 + _0x40d365), -img.height / 4 + scale * (_0x3ef108 + 45));
        break;
      case SPRITE.AMETHYST_SHIELD:
      case SPRITE.REIDITE_SHIELD:
        draw_image_transition_hd(_0x1e57a8, img, -img.width / 4 - scale * (1 + _0x40d365), -img.height / 4 + scale * (_0x3ef108 + 40));
        break;
    }
  }
}
;
function draw_player_right_stuff(_0x3fdebb, _0x2693ef, _0x326b25) {
  if (_0x3fdebb >= 0) {
    img = sprite[_0x3fdebb][world.time];
    switch (_0x3fdebb) {
      case SPRITE.PICK:
      case SPRITE.PICK_GOLD:
      case SPRITE.PICK_DIAMOND:
      case SPRITE.PICK_WOOD:
      case SPRITE.PICK_AMETHYST:
      case SPRITE.PICK_REIDITE:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (45 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 22));
        break;
      case SPRITE.SWORD_WOOD:
      case SPRITE.SWORD:
      case SPRITE.SWORD_GOLD:
      case SPRITE.SWORD_DIAMOND:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 45));
        break;
      case SPRITE.SWORD_AMETHYST:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (52 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 45));
        break;
      case SPRITE.REIDITE_SWORD:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 44));
        break;
      case SPRITE.PIRATE_SWORD:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (47 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 44));
        break;
      case SPRITE.DRAGON_SWORD:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (40 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 65));
        break;
      case SPRITE.WOOD_SPEAR:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (37 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 85));
        break;
      case SPRITE.REIDITE_SPEAR:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (37 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 85));
        break;
      case SPRITE.PITCHFORK2:
      case SPRITE.PITCHFORK:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (26 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 77));
        break;
      case SPRITE.LAVA_SPEAR:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (37 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 85));
        break;
      case SPRITE.LAVA_SWORD:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 44));
        break;
      case SPRITE.WOOD_BOW:
      case SPRITE.STONE_BOW:
      case SPRITE.GOLD_BOW:
      case SPRITE.DIAMOND_BOW:
      case SPRITE.AMETHYST_BOW:
      case SPRITE.REIDITE_BOW:
      case SPRITE.DRAGON_BOW:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (37 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 30));
        break;
      case SPRITE.MACHETE:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 35));
        break;
      case SPRITE.WAND1:
      case SPRITE.WAND2:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 40));
        break;
      case SPRITE.SADDLE:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (47 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 34));
        break;
      case SPRITE.SPEAR:
      case SPRITE.GOLD_SPEAR:
      case SPRITE.DIAMOND_SPEAR:
      case SPRITE.AMETHYST_SPEAR:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (37 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 90));
        break;
      case SPRITE.CRAB_SPEAR:
        draw_image_transition_hd(_0x3fdebb, img, -img.width / 4 - scale * (40 + _0x2693ef), -img.height / 4 + scale * (_0x326b25 + 85));
        break;
      case SPRITE.DRAGON_SPEAR:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (39 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 90));
        break;
      case SPRITE.HAMMER:
      case SPRITE.HAMMER_GOLD:
      case SPRITE.HAMMER_DIAMOND:
      case SPRITE.HAMMER_AMETHYST:
      case SPRITE.HAMMER_REIDITE:
      case SPRITE.SUPER_HAMMER:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (46 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 35));
        break;
      case SPRITE.WATERING_CAN_FULL:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (47 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 54));
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (46 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 35));
        break;
      case SPRITE.SPANNER:
        draw_image_transition(_0x3fdebb, img, -img.width / 2 - scale * (47 + _0x2693ef), -img.height / 2 + scale * (_0x326b25 + 20));
        break;
    }
  }
}
function draw_player_clothe(_0x4c7701) {
  if (_0x4c7701 > 0) {
    var _0x2e4007 = sprite[_0x4c7701][world.time];
    switch (_0x4c7701) {
      case SPRITE.WOOD_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 + scale * 2, -_0x2e4007.height / 2 - scale * 5);
        break;
      case SPRITE.EARMUFFS:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 18);
        break;
      case SPRITE.COAT:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 10);
        break;
      case SPRITE.EXPLORER_HAT:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 19);
        break;
      case SPRITE.PIRATE_HAT:
        draw_image_transition_hd(_0x4c7701, _0x2e4007, -_0x2e4007.width / 4, -_0x2e4007.height / 4 - scale * 20);
        break;
      case SPRITE.STONE_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 - scale * 1, -_0x2e4007.height / 2 - scale * 23);
        break;
      case SPRITE.GOLD_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 5);
        break;
      case SPRITE.DIAMOND_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 2);
        break;
      case SPRITE.AMETHYST_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 + scale * 1.5, -_0x2e4007.height / 2 - scale * 1);
        break;
      case SPRITE.REIDITE_HELMET:
      case SPRITE.DIAMOND_PROTECTION:
      case SPRITE.AMETHYST_PROTECTION:
      case SPRITE.REIDITE_PROTECTION:
      case SPRITE.TURBAN1:
      case SPRITE.TURBAN2:
      case SPRITE.PILOT_HELMET:
      case SPRITE.LAVA_HELMET:
      case SPRITE.WITCH:
      case SPRITE.FUR_HAT:
      case SPRITE.FLOWER_HAT:
        draw_image_transition_hd(_0x4c7701, _0x2e4007, -_0x2e4007.width / 4, -_0x2e4007.height / 4 + scale * 2);
        break;
      case SPRITE.CHRISTMAS_HAT:
      case SPRITE.ELF_HAT:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 - scale * 5, -_0x2e4007.height / 2 - scale * 2);
        break;
      case SPRITE.CAP_SCARF:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 2);
        break;
      case SPRITE.WINTER_HOOD:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 2);
        break;
      case SPRITE.DIVING_MASK:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 2);
        break;
      case SPRITE.SUPER_DIVING_SUIT:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 + scale * 2, -_0x2e4007.height / 2);
        break;
      case SPRITE.DRAGON_HELMET:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 5);
        break;
      case SPRITE.CROWN_GREEN:
      case SPRITE.CROWN_ORANGE:
      case SPRITE.CROWN_BLUE:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2 - scale * 1, -_0x2e4007.height / 2);
        break;
      case SPRITE.HOOD:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 + scale * 2);
        break;
      case SPRITE.PEASANT:
      case SPRITE.WINTER_PEASANT:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 + scale * 8);
        break;
      case SPRITE.CROWN_CRAB:
        draw_image_transition(_0x4c7701, _0x2e4007, -_0x2e4007.width / 2, -_0x2e4007.height / 2 - scale * 4);
        break;
    }
  }
}
function draw_vehicle() {
  if (this.ghost || this.vehicle === 0) {
    return;
  }
  if (this.x != this.r.x || this.y != this.r.y) {
    var _0x352c9b = (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) % (Math.PI * 2);
    this.vehicle_fx2 = Utils.reduceAngle(_0x352c9b, this.vehicle_fx2);
    this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, _0x352c9b, 0.018);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.vehicle_fx2);
  if (this.vehicle === INV.BOAT) {
    if (this.speed > 50 || this.vehicle_fx1 > 0) {
      if (this.speed > 50) {
        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta);
      } else {
        this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
      }
      ctx.globalAlpha = this.vehicle_fx1;
      var _0x3393ab = sprite[SPRITE.BOAT_WAVE][world.time];
      draw_image_transition_hd(SPRITE.BOAT_WAVE, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
      ctx.globalAlpha = 1;
    }
    var _0x3393ab = sprite[SPRITE.BOAT][world.time];
    draw_image_transition_hd(SPRITE.BOAT, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
  } else if (this.vehicle === INV.HAWK) {
    this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
    this.vehicle_fx4.update();
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
    }
    var _0x3393ab = sprite[SPRITE.HAWK_TAMED][world.time];
    draw_image_transition_hd(SPRITE.HAWK_TAMED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
    _0x3393ab = sprite[SPRITE.HAWK_WING_LEFT_TAMED][world.time];
    w = -_0x3393ab.width;
    h = -_0x3393ab.height;
    ctx.save();
    ctx.translate(scale * -20, scale * -20);
    ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
    _0x3393ab = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][world.time];
    ctx.save();
    ctx.translate(scale * 20, scale * -20);
    ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
  } else if (this.vehicle === INV.BABY_LAVA) {
    this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
    this.vehicle_fx4.update();
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
    }
    var _0x3393ab = sprite[SPRITE.BABY_LAVA_TAMED][world.time];
    draw_image_transition_hd(SPRITE.BABY_LAVA_TAMED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
    _0x3393ab = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][world.time];
    w = -_0x3393ab.width;
    h = -_0x3393ab.height;
    ctx.save();
    ctx.translate(scale * -40, scale * -45);
    ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
    _0x3393ab = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][world.time];
    ctx.save();
    ctx.translate(scale * 40, scale * -45);
    ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
  } else if (this.vehicle === INV.BABY_DRAGON) {
    this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
    this.vehicle_fx4.update();
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
    }
    var _0x3393ab = sprite[SPRITE.BABY_DRAGON_TAMED][world.time];
    draw_image_transition_hd(SPRITE.BABY_DRAGON_TAMED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
    _0x3393ab = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][world.time];
    w = -_0x3393ab.width;
    h = -_0x3393ab.height;
    ctx.save();
    ctx.translate(scale * -40, scale * -45);
    ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
    _0x3393ab = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][world.time];
    ctx.save();
    ctx.translate(scale * 40, scale * -45);
    ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
    ctxDrawImage(ctx, _0x3393ab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.restore();
  } else if (this.vehicle === INV.NIMBUS) {
    this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
    var _0x3393ab = sprite[SPRITE.NIMBUS][world.time];
    draw_image_transition_hd(SPRITE.NIMBUS, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
  } else if (this.vehicle === INV.PLANE) {
    this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
    var _0x3393ab = sprite[SPRITE.PLANE][world.time];
    draw_image_transition_hd(SPRITE.PLANE, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
  } else if (this.vehicle === INV.SLED) {
    var _0x3393ab = sprite[SPRITE.SLED][world.time];
    draw_image_transition_hd(SPRITE.SLED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4);
  } else if (this.vehicle === INV.BABY_MAMMOTH) {
    var _0x3393ab = sprite[SPRITE.BABY_MAMMOTH_TAMED][world.time];
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
    }
    this.vehicle_fx3 += delta * 60;
    if (this.vehicle_fx3 > 60) {
      this.vehicle_fx3 -= 60;
    }
    var _0x265d15 = this.vehicle_fx1 * (-6 + (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12);
    draw_image_transition_hd(SPRITE.BABY_MAMMOTH_TAMED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4 + _0x265d15);
  } else if (this.vehicle === INV.MOUNT_BOAR) {
    var _0x3393ab = sprite[SPRITE.BOAR_TAMED][world.time];
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
    }
    this.vehicle_fx3 += delta * 60;
    if (this.vehicle_fx3 > 60) {
      this.vehicle_fx3 -= 60;
    }
    var _0x265d15 = this.vehicle_fx1 * (-6 + (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12);
    draw_image_transition_hd(SPRITE.BOAR_TAMED, _0x3393ab, -_0x3393ab.width / 4, -_0x3393ab.height / 4 + _0x265d15);
  } else if (this.vehicle === INV.CRAB_BOSS) {
    var _0x4de6d8 = Math.PI / 2;
    var _0x4545ce = Math.PI / 4;
    var _0x3393ab = sprite[SPRITE.CRAB_BOSS_TAMED][world.time];
    if (this.speed > 85) {
      this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
    } else {
      this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
    }
    this.vehicle_fx3 += delta * 60;
    if (this.vehicle_fx3 > 60) {
      this.vehicle_fx3 -= 60;
    }
    var _0x265d15 = this.vehicle_fx1 * (-6 + (this.vehicle_fx3 < 30 ? this.vehicle_fx3 / 30 : 1 - (this.vehicle_fx3 - 30) / 30) * 12);
    draw_image_transition_hd(SPRITE.CRAB_BOSS_TAMED, _0x3393ab, -_0x3393ab.width / 4 + _0x265d15, -_0x3393ab.height / 4);
    ctx.restore();
    ctx.save();
    ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
    ctx.rotate(Math.PI + this.vehicle_fx2 + _0x4545ce);
    ctx.translate(120, _0x265d15);
    ctx.rotate(_0x4de6d8);
    _0x3393ab = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
    w = -_0x3393ab.width;
    h = -_0x3393ab.height;
    ctxDrawImage(ctx, _0x3393ab, -w / 2, -h / 2, w, h);
    ctx.restore();
    ctx.save();
    ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
    ctx.rotate(Math.PI + this.vehicle_fx2 + _0x4de6d8 + _0x4545ce);
    ctx.translate(120, _0x265d15);
    ctx.rotate(_0x4de6d8);
    _0x3393ab = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
    w = -_0x3393ab.width;
    h = -_0x3393ab.height;
    ctxDrawImage(ctx, _0x3393ab, -w / 2, -h / 2, w, h);
  }
  ctx.restore();
}
__EFFECT_HURT__ = 0;
__EFFECT_HEAL__ = 1;
__EFFECT_COLD__ = 2;
__EFFECT_HUNGER__ = 3;
__EFFECT_BOX__ = 4;
__IMAGE_EFFECT__ = [[], [], [], [], []];
__IMAGE_EFFECT_COLOR__ = ["#BB0000", "#00BB00", "#1CE7E0", "#DBE71C", "#BB0000"];
function get_image_effect(_0x222340, _0x381bc0, _0x5e33cf) {
  if (_0x381bc0.tryLoad() !== 1) {
    return _0x381bc0;
  }
  var _0x8e1baf = __IMAGE_EFFECT__[_0x5e33cf][_0x222340];
  if (_0x8e1baf === undefined) {
    _0x8e1baf = document.createElement("canvas");
    var _0x2d45e4 = _0x8e1baf.getContext("2d");
    var _0x3413dc = _0x381bc0.width;
    var _0x447a19 = _0x381bc0.height;
    _0x8e1baf.width = _0x3413dc;
    _0x8e1baf.height = _0x447a19;
    _0x2d45e4.drawImage(_0x381bc0, 0, 0);
    _0x2d45e4.globalCompositeOperation = "source-in";
    _0x2d45e4.fillStyle = __IMAGE_EFFECT_COLOR__[_0x5e33cf];
    _0x2d45e4.fillRect(0, 0, _0x3413dc, _0x447a19);
    __IMAGE_EFFECT__[_0x5e33cf][_0x222340] = _0x8e1baf;
  }
  return _0x8e1baf;
}
;
function draw_player() {
  var _0x1464fd = 0;
  switch (this.right) {
    case SPRITE.WOOD_SHIELD:
    case SPRITE.STONE_SHIELD:
    case SPRITE.GOLD_SHIELD:
    case SPRITE.DIAMOND_SHIELD:
    case SPRITE.AMETHYST_SHIELD:
    case SPRITE.REIDITE_SHIELD:
      var _0x1464fd = 1;
      break;
  }
  if (this.ghost) {
    for (var _0x191b2b = 0; _0x191b2b < this.bubbles.length; _0x191b2b++) {
      var _0x2b6f04 = this.bubbles[_0x191b2b];
      if (_0x2b6f04.life > 0.5) {
        var _0x186a46 = 1 - (_0x2b6f04.life - 0.5) * 2;
      } else {
        var _0x186a46 = _0x2b6f04.life * 2;
      }
      ctx.globalAlpha = _0x186a46;
      var _0x5210a8 = sprite[SPRITE.BUBBLES][world.time][_0x2b6f04.id];
      ctxDrawImage(ctx, _0x5210a8, user.cam.x + _0x2b6f04.x - _0x5210a8.width / 2, user.cam.y + _0x2b6f04.y - _0x5210a8.height / 2);
      ctx.globalAlpha = 1;
    }
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  world.dist_from_biomes(this);
  if (this.action & STATE.ATTACK) {
    draw_player_effect(this);
  }
  ctx.save();
  ctx.rotate(this.angle - Math.PI / 2);
  if (!(this.action & STATE.ATTACK)) {
    if (this.action & STATE.IDLE || this.vehicle !== 0) {
      this.idle.update();
    } else if (this.action & STATE.WALK) {
      this.walk.update();
    }
  }
  var _0x3e8c84 = this.idle.v;
  var _0x5a4632 = this.walk.v;
  var _0x55491a;
  if (this.clothe === SPRITE.WINTER_HOOD) {
    _0x5210a8 = sprite[SPRITE.GLOVES_HOOD][world.time];
    _0x55491a = SPRITE.GLOVES_HOOD;
  } else if (this.clothe === SPRITE.DIAMOND_PROTECTION) {
    _0x5210a8 = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][world.time];
    _0x55491a = SPRITE.GLOVES_DIAMOND_PROTECTION;
  } else if (this.clothe === SPRITE.AMETHYST_PROTECTION) {
    _0x5210a8 = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][world.time];
    _0x55491a = SPRITE.GLOVES_AMETHYST_PROTECTION;
  } else if (this.clothe === SPRITE.REIDITE_PROTECTION) {
    _0x5210a8 = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][world.time];
    _0x55491a = SPRITE.GLOVES_REIDITE_PROTECTION;
  } else if (this.superzombie) {
    _0x5210a8 = sprite[SPRITE.ZOMBIE_HAND][world.time];
    _0x55491a = SPRITE.ZOMBIE_HAND;
  } else {
    _0x5210a8 = sprite[SPRITE.HAND][this.skin][world.time];
    _0x55491a = SPRITE.HAND;
  }
  shadow = sprite[SPRITE.HAND_SHADOW][world.time];
  var _0x4ac84a = _0x5210a8;
  var _0x51c90f = _0x55491a;
  if (this.action & STATE.ATTACK) {
    if (this.attack.update() && this.attack.o == false) {
      this.hand = !this.hand;
      this.action -= STATE.ATTACK;
      if (this.uid == user.uid) {
        user.control.mouse = 0;
      }
    }
    if (this.right >= 0) {
      this.hand = true;
    }
    var _0x4e71f9 = this.hand ? this.attack.v : -this.attack.v / 3;
    var _0x2694a8 = this.hand ? this.attack.v / 3 : -this.attack.v;
    if (this.superzombie) {
      ctx.save();
      ctx.rotate(_0x4e71f9);
      draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 - scale * (66 + _0x3e8c84), -_0x5210a8.height / 2 + (5 + _0x5a4632) * scale);
      ctx.restore();
      ctx.save();
      ctx.rotate(_0x2694a8);
      draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 + scale * (66 + _0x3e8c84), -_0x5210a8.height / 2 + (5 + _0x5a4632) * scale);
      ctx.restore();
    } else if (_0x1464fd === 0) {
      if (this.right === SPRITE.WOOD_BOW) {
        _0x4e71f9 = -Utils.ease_out_quad(-_0x4e71f9);
      }
      ctx.save();
      ctx.rotate(_0x4e71f9);
      draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + _0x3e8c84), -shadow.height / 2 + (15 + _0x5a4632) * scale);
      if (this.right === SPRITE.BOOK) {
        var _0x4b7c3a = sprite[this.right][this.book][world.time];
        draw_image_transition_hd_2(this.right, this.book, _0x4b7c3a, -_0x4b7c3a.width / 4 - scale * (62 + _0x3e8c84), -_0x4b7c3a.height / 4 + scale * (_0x5a4632 + 18));
      } else {
        draw_player_right_stuff(this.right, _0x3e8c84, _0x5a4632);
      }
      if (_0x55491a >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
        draw_image_transition_hd(_0x55491a, _0x5210a8, -_0x5210a8.width / 4 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
      } else if (_0x55491a !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(_0x55491a, this.skin, _0x5210a8, -_0x5210a8.width / 4 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
      } else {
        draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 2 + (11 + _0x5a4632) * scale);
      }
      ctx.restore();
      ctx.save();
      ctx.rotate(_0x2694a8);
      draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + _0x3e8c84), -shadow.height / 2 + (15 + _0x5a4632) * scale);
      if (_0x55491a >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
        draw_image_transition_hd(_0x55491a, _0x5210a8, -_0x5210a8.width / 4 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
      } else if (_0x55491a !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(_0x55491a, this.skin, _0x5210a8, -_0x5210a8.width / 4 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
      } else {
        draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 2 + (11 + _0x5a4632) * scale);
      }
      ctx.restore();
    }
  } else if (this.superzombie) {
    draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 - scale * (66 + _0x3e8c84), -_0x5210a8.height / 2 + (5 + _0x5a4632) * scale);
    draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 + scale * (66 + _0x3e8c84), -_0x5210a8.height / 2 + (5 + _0x5a4632) * scale);
  } else if (_0x1464fd === 0) {
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * (49 + _0x3e8c84), -shadow.height / 2 + (15 + _0x5a4632) * scale);
    if (this.right === SPRITE.BOOK) {
      var _0x4b7c3a = sprite[this.right][this.book][world.time];
      draw_image_transition_hd_2(this.right, this.book, _0x4b7c3a, -_0x4b7c3a.width / 4 - scale * (62 + _0x3e8c84), -_0x4b7c3a.height / 4 + scale * (_0x5a4632 + 18));
    } else {
      draw_player_right_stuff(this.right, _0x3e8c84, _0x5a4632);
    }
    if (_0x55491a >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(_0x55491a, _0x5210a8, -_0x5210a8.width / 4 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
    } else if (_0x55491a !== SPRITE.GLOVES_HOOD) {
      draw_image_transition_hd_2(_0x55491a, this.skin, _0x5210a8, -_0x5210a8.width / 4 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
    } else {
      draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 - scale * (49 + _0x3e8c84), -_0x5210a8.height / 2 + (11 + _0x5a4632) * scale);
    }
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * (49 + _0x3e8c84), -shadow.height / 2 + (15 + _0x5a4632) * scale);
    if (_0x55491a >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(_0x55491a, _0x5210a8, -_0x5210a8.width / 4 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
    } else if (_0x55491a !== SPRITE.GLOVES_HOOD) {
      draw_image_transition_hd_2(_0x55491a, this.skin, _0x5210a8, -_0x5210a8.width / 4 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 4 + (11 + _0x5a4632) * scale);
    } else {
      draw_image_transition(_0x55491a, _0x5210a8, -_0x5210a8.width / 2 + scale * (49 + _0x3e8c84), -_0x5210a8.height / 2 + (11 + _0x5a4632) * scale);
    }
  }
  if (this.bag && this.clothe < 1) {
    var _0x5210a8 = sprite[SPRITE.BAG][this.baglook][world.time];
    draw_image_transition_hd_2(SPRITE.BAG, this.baglook, _0x5210a8, -_0x5210a8.width / 4, -_0x5210a8.height / 4 - scale * 39);
  }
  if (this.superzombie) {
    var _0x5210a8 = sprite[SPRITE.ZOMBIE_BODY][world.time];
    draw_image_transition(SPRITE.ZOMBIE_BODY, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    this.move_head.update();
    _0x5210a8 = sprite[SPRITE.ZOMBIE_HEAD][world.time];
    draw_image_transition(SPRITE.ZOMBIE_HEAD, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2 + this.move_head.v);
  } else {
    var _0x5210a8 = sprite[SPRITE.BODY][this.skin][world.time];
    if (this.clothe !== SPRITE.WINTER_HOOD) {
      draw_image_transition_hd_2(SPRITE.BODY, this.skin, _0x5210a8, -_0x5210a8.width / 4, -_0x5210a8.height / 4);
      if (this.accessory > 0) {
        var _0x5210a8 = sprite[SPRITE.ACCESSORY][this.accessory][world.time];
        draw_image_transition_hd_2(SPRITE.ACCESSORY, this.accessory, _0x5210a8, -_0x5210a8.width / 4, -_0x5210a8.height / 4);
      }
    }
  }
  if (this.action & STATE.HEAL) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.HEAL;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    if (this.superzombie) {
      var _0x5210a8 = sprite[SPRITE.ZOMBIE_HEAL];
      ctxDrawImage(ctx, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    } else {
      var _0x5210a8 = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HEAL__);
      ctxDrawImage(ctx, _0x5210a8, _0x5210a8.width / 4, _0x5210a8.height / 4, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.WEB) {
    if (this.web.update() && this.web.o == false) {
      this.action -= STATE.WEB;
    }
    ctx.globalAlpha = 0.6 - this.web.v;
    var _0x5210a8 = sprite[SPRITE.WEB];
    ctxDrawImage(ctx, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    if (this.superzombie) {
      var _0x5210a8 = sprite[SPRITE.ZOMBIE_HURT];
      ctxDrawImage(ctx, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    } else {
      var _0x5210a8 = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HURT__);
      ctxDrawImage(ctx, _0x5210a8, _0x5210a8.width / 4, _0x5210a8.height / 4, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.freeze.update() && this.freeze.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.freeze.v;
    var _0x5210a8 = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_COLD__);
    ctxDrawImage(ctx, _0x5210a8, _0x5210a8.width / 4, _0x5210a8.height / 4, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HUNGER) {
    if (this.starve.update() && this.starve.o == false) {
      this.action -= STATE.HUNGER;
    }
    ctx.globalAlpha = 0.6 - this.starve.v;
    if (this.superzombie) {
      var _0x5210a8 = sprite[SPRITE.ZOMBIE_HUNGER];
      ctxDrawImage(ctx, _0x5210a8, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    } else {
      var _0x5210a8 = get_image_effect(this.skin, sprite[SPRITE.BODY][this.skin][0], __EFFECT_HUNGER__);
      ctxDrawImage(ctx, _0x5210a8, _0x5210a8.width / 4, _0x5210a8.height / 4, -_0x5210a8.width / 2, -_0x5210a8.height / 2);
    }
    ctx.globalAlpha = 1;
  }
  draw_player_clothe(this.clothe);
  if (_0x1464fd === 1) {
    if (this.action & STATE.ATTACK) {
      _0x3e8c84 += this.attack.v * 15;
    }
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 - scale * 26, -shadow.height / 2 + (31 + _0x5a4632 + _0x3e8c84) * scale);
    if (_0x51c90f >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(_0x51c90f, _0x4ac84a, -_0x4ac84a.width / 4 - scale * 26, -_0x4ac84a.height / 4 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    } else if (_0x51c90f !== SPRITE.GLOVES_HOOD) {
      draw_image_transition_hd_2(_0x51c90f, this.skin, _0x4ac84a, -_0x4ac84a.width / 4 - scale * 26, -_0x4ac84a.height / 4 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    } else {
      draw_image_transition(_0x51c90f, _0x4ac84a, -_0x4ac84a.width / 2 - scale * 26, -_0x4ac84a.height / 2 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    }
    draw_image_transition(SPRITE.HAND_SHADOW, shadow, -shadow.width / 2 + scale * 26, -shadow.height / 2 + (31 + _0x5a4632 + _0x3e8c84) * scale);
    if (_0x51c90f >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(_0x51c90f, _0x4ac84a, -_0x4ac84a.width / 4 + scale * 26, -_0x4ac84a.height / 4 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    } else if (_0x51c90f !== SPRITE.GLOVES_HOOD) {
      draw_image_transition_hd_2(_0x51c90f, this.skin, _0x4ac84a, -_0x4ac84a.width / 4 + scale * 26, -_0x4ac84a.height / 4 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    } else {
      draw_image_transition(_0x51c90f, _0x4ac84a, -_0x4ac84a.width / 2 + scale * 26, -_0x4ac84a.height / 2 + (27 + _0x5a4632 + _0x3e8c84) * scale);
    }
    draw_player_right_stuff_after(this.right, 0, _0x5a4632 + _0x3e8c84);
  }
  ctx.restore();
  if (this.clothe !== SPRITE.HOOD && this.clothe !== SPRITE.WINTER_HOOD) {
    if (this.dist_winter > 0) {
      if (!this.player.label_winter) {
        this.player.label_winter = create_text(scale, this.player.nickname, 20, "#187484", "#000", 2, null, null, scale * 300);
      }
      var _0x5210a8 = this.player.label_winter;
    } else {
      if (!this.player.label) {
        this.player.label = create_text(scale, this.player.nickname, 20, "#FFF", "#000", 2, null, null, scale * 300);
      }
      var _0x5210a8 = this.player.label;
    }
    if (world.day == SPRITE.NIGHT) {
      ctx.globalAlpha = 0.5;
    }
    var _0x3e8c84 = Math.floor(-_0x5210a8.width / 2);
    var _0x5a4632 = Math.floor(-_0x5210a8.height / 2 - scale * 70);
    ctxDrawImage(ctx, _0x5210a8, _0x3e8c84, _0x5a4632);
    if (this.player.level > 0) {
      var _0x299db1 = _0x3e8c84 + _0x5210a8.width + 5;
      _0x5210a8 = sprite[SPRITE.VERIFIED];
      if (PLAYER_LEVEL[this.player.level] === undefined) {
        PLAYER_LEVEL[this.player.level] = create_text(scale, "[" + this.player.level + "]", 20, "#F9E8A2", "#000", 2, null, null, scale * 50);
      }
      ctxDrawImage(ctx, PLAYER_LEVEL[this.player.level], _0x299db1, _0x5a4632);
    }
    ctx.globalAlpha = 1;
  } else {
    var _0x5a4632 = Math.floor(scale * -70);
    var _0x3e8c84 = Math.floor(sprite[SPRITE.ICON_MEMBER].width / 1.5);
  }
  if (user.in_team(this.pid)) {
    if (this.pid == user.team[0]) {
      var _0x5210a8 = sprite[SPRITE.ICON_LEADER];
    } else {
      var _0x5210a8 = sprite[SPRITE.ICON_MEMBER];
    }
    ctxDrawImage(ctx, _0x5210a8, _0x3e8c84 - _0x5210a8.width - 5, _0x5a4632 - 6);
  }
  ctx.restore();
}
function draw_alert_ghost() {
  if (this.enabled && this.delay >= 0) {
    var _0xbf3d44 = new Date().getTime();
    var _0x16035f = _0xbf3d44 - this.delay;
    var _0x2169b4 = _0x16035f % 1000 / 1000;
    if (_0x2169b4 > 0.5) {
      _0x2169b4 = 1 - (_0x2169b4 - 0.5) * 2;
    } else {
      _0x2169b4 *= 2;
    }
    _0x16035f = Math.floor(_0x16035f / 1000);
    if (_0x16035f < WORLD.GHOST_DELAY) {
      _0x16035f = WORLD.GHOST_DELAY - _0x16035f;
      if (!this.label) {
        this.label = create_text(scale, " seconds before you die", 40, "#660000", null, null, null, null, null, "#000", 10);
      }
      if (this.now != _0x16035f || !this.sec) {
        this.now = _0x16035f;
        this.sec = create_text(scale, "" + _0x16035f, 40, "#660000", null, null, null, null, null, "#000", 10);
      }
      ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, scale * 100);
      ctx.globalAlpha = _0x2169b4;
      ctxDrawImage(ctx, this.sec, (canw - this.label.width) / 2 - this.sec.width + scale * 15, scale * 100);
      ctx.globalAlpha = 1;
    }
  }
}
function draw_welcome_message() {
  if (this.message !== undefined) {
    var _0x257339 = user.inv.can_select.length > 0 ? -95 : 0;
    ctxDrawImage(ctx, this.message, 0, canh - this.message.height + _0x257339);
  }
}
;
function draw_alert(_0xae5251, _0x51869c) {
  if (this.text) {
    if (!this.timeout.o) {
      ctx.globalAlpha = 1;
    } else {
      ctx.globalAlpha = 1 - this.timeout.v;
    }
    if (!this.label) {
      this.label = create_text(scale, this.text, 40, _0xae5251, null, null, null, null, null, _0x51869c, 10);
    }
    ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, scale * 50);
    ctx.globalAlpha = 1;
    if (this.timeout.update() && this.timeout.o == false) {
      this.text = this.list.shift();
      this.label = null;
    }
  }
}
function draw_chat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.text.length > 0) {
    for (var _0xba865d = 0; _0xba865d < this.text.length && _0xba865d < 2; _0xba865d++) {
      if (!this.label[_0xba865d]) {
        this.label[_0xba865d] = create_message(scale, this.text[_0xba865d]);
        this.text_effect[_0xba865d] = 0;
        this.text_move[_0xba865d] = 0;
      }
      if (_0xba865d === 1) {
        this.text_move[0] = Utils.ease_in_out_quad(this.text_ease) * 30;
      }
    }
    this.text_effect[0] += delta;
    if (this.text.length > 1) {
      this.text_ease = Math.min(this.text_ease + delta, 1);
      if (this.text_effect[0] > 1 && this.text_ease > 0.5) {
        this.text_effect[1] += delta;
      }
    }
    for (var _0xba865d = 0; _0xba865d < this.text.length && _0xba865d < 2; _0xba865d++) {
      var _0x3bb1c0 = this.text_effect[_0xba865d];
      if (_0x3bb1c0 > 0) {
        if (_0x3bb1c0 < 0.25) {
          ctx.globalAlpha = _0x3bb1c0 * 4;
        } else if (_0x3bb1c0 > 3.75) {
          ctx.globalAlpha = Math.max((4 - _0x3bb1c0) * 4, 0);
        } else {
          ctx.globalAlpha = 1;
        }
        ctxDrawImage(ctx, this.label[_0xba865d], -this.label[_0xba865d].width / 2, -this.text_move[_0xba865d] + -this.label[_0xba865d].height / 2 - scale * 110);
      }
    }
    if (this.text_effect[0] > 4) {
      this.text_effect.shift();
      this.text.shift();
      this.text_move.shift();
      this.label.shift();
      this.text_ease = 0;
    }
  }
  ctx.restore();
}
var __effect = 0;
function draw_objects_effect(_0x3826a3, _0x1801e8, _0x154d7b, _0x4c2765, _0x83580e, _0x14aee6, _0x5a62ae, _0x360e01) {
  if (_0x360e01 === undefined) {
    _0x360e01 = 0;
  }
  for (var _0xf7e501 = _0x5a62ae; _0xf7e501 >= _0x360e01; _0xf7e501--) {
    for (var _0x5a04d1 = _0x3826a3; _0x5a04d1 <= _0x1801e8; _0x5a04d1++) {
      for (var _0x97b553 = _0x154d7b; _0x97b553 <= _0x4c2765; _0x97b553++) {
        var _0x6bc31 = MAP.tiles[_0x5a04d1][_0x97b553];
        if (!_0x6bc31 || !_0x6bc31[_0x14aee6]) {
          continue;
        }
        var _0x2042b1 = _0x6bc31[_0x14aee6][_0xf7e501];
        if (_0x2042b1 === undefined) {
          continue;
        }
        for (var _0x46e3dc = 0; _0x46e3dc < _0x2042b1.length; _0x46e3dc++) {
          var _0x241faf = _0x2042b1[_0x46e3dc];
          var _0x22bc62 = sprite[_0x83580e][world.time][_0xf7e501];
          var _0x4f9ed5 = (__effect + (_0x5a04d1 + _0x97b553) * 3) % 60;
          var _0x409497 = _0x4f9ed5 < 30 ? _0x4f9ed5 / 30 : 1 - (_0x4f9ed5 - 30) / 30;
          var _0x3c3656 = -_0x22bc62.width * (1 + _0x409497 * 0.9 / 30);
          var _0x45153f = -_0x22bc62.height * (1 + _0x409497 * 0.9 / 30);
          _0x4f9ed5 = (__effect + (_0x5a04d1 + _0x97b553) * 7) % 60;
          _0x409497 = _0x4f9ed5 < 30 ? _0x4f9ed5 / 30 : 1 - (_0x4f9ed5 - 30) / 30;
          var _0x5716b4 = ctx.globalAlpha;
          ctx.globalAlpha = (0.9 + _0x409497 * 0.1) * _0x5716b4;
          ctxDrawImage(ctx, _0x22bc62, user.cam.x + _0x241faf.x - _0x3c3656 / 2, user.cam.y + _0x241faf.y - _0x45153f / 2, _0x3c3656, _0x45153f);
          ctx.globalAlpha = _0x5716b4;
        }
      }
    }
  }
}
function draw_breath_objects(_0x14ff9a, _0x1acd55, _0x15cb46, _0x1636c0, _0x52a435, _0x52c5a4, _0x14dbdb, _0x55419b) {
  if (_0x55419b === undefined) {
    _0x55419b = 0;
  }
  world.breath[_0x52a435].update();
  for (var _0x3eb972 = _0x14dbdb; _0x3eb972 >= _0x55419b; _0x3eb972--) {
    for (var _0x5c7e50 = _0x14ff9a; _0x5c7e50 <= _0x1acd55; _0x5c7e50++) {
      for (var _0x338e78 = _0x15cb46; _0x338e78 <= _0x1636c0; _0x338e78++) {
        var _0x2a3974 = MAP.tiles[_0x5c7e50][_0x338e78];
        if (!_0x2a3974 || !_0x2a3974[_0x52c5a4]) {
          continue;
        }
        var _0xaeed9e = _0x2a3974[_0x52c5a4][_0x3eb972];
        if (_0xaeed9e === undefined) {
          continue;
        }
        for (var _0x36cf46 = 0; _0x36cf46 < _0xaeed9e.length; _0x36cf46++) {
          var _0x1c207a = _0xaeed9e[_0x36cf46];
          if (_0x1c207a.update) {
            if (_0x1c207a.hit.update() && _0x1c207a.hit.o == false) {
              _0x1c207a.update = false;
            }
            var _0x4a5564 = (1 - _0x1c207a.hit.v) * delta * 600 * scale;
            var _0x38f22a = Math.cos(_0x1c207a.angle) * _0x4a5564;
            var _0x58248b = Math.sin(_0x1c207a.angle) * _0x4a5564;
          } else {
            var _0x38f22a = 0;
            var _0x58248b = 0;
          }
          ;
          var _0x34a4b7 = sprite[_0x52a435][world.time][_0x3eb972];
          var _0x4cae84 = -_0x34a4b7.width * world.breath[_0x52a435].v;
          var _0x5b135c = -_0x34a4b7.height * world.breath[_0x52a435].v;
          ctxDrawImage(ctx, _0x34a4b7, user.cam.x + _0x1c207a.x - _0x4cae84 / 2 + _0x38f22a, user.cam.y + _0x1c207a.y - _0x5b135c / 2 + _0x58248b, _0x4cae84, _0x5b135c);
        }
      }
    }
  }
}
var randweb = [];
for (var i = 0; i < 100; i++) {
  var r = 1;
  if (Math.random() < 0.25) {
    r = 0;
  }
  randweb.push(r);
}
_scale_object = 1;
function draw_map_objects(_0x1aa745, _0x1c8e3a, _0x4ed96a, _0x3bc9b1, _0x158085, _0x24f406, _0xbecc8a, _0x283455, _0x41a908) {
  if (_0x283455 === undefined) {
    _0x283455 = 0;
  }
  for (var _0x49e3a6 = _0xbecc8a; _0x49e3a6 >= _0x283455; _0x49e3a6--) {
    for (var _0x497023 = _0x1aa745; _0x497023 <= _0x1c8e3a; _0x497023++) {
      for (var _0x206b95 = _0x4ed96a; _0x206b95 <= _0x3bc9b1; _0x206b95++) {
        if (_0x41a908 > 0 && randweb[(_0x497023 + _0x206b95 * _0x41a908) % randweb.length] === 1) {
          continue;
        }
        var _0x107d8e = MAP.tiles[_0x497023][_0x206b95];
        if (_0x107d8e === undefined || _0x107d8e[_0x24f406] === undefined) {
          continue;
        }
        var _0x45c5a6 = _0x107d8e[_0x24f406][_0x49e3a6];
        if (_0x45c5a6 === undefined) {
          continue;
        }
        for (var _0x27ae4b = 0; _0x27ae4b < _0x45c5a6.length; _0x27ae4b++) {
          var _0x220051 = _0x45c5a6[_0x27ae4b];
          if (_0x220051.update) {
            if (_0x220051.hit.update() && _0x220051.hit.o == false) {
              _0x220051.update = false;
            }
            var _0x45b904 = (1 - _0x220051.hit.v) * delta * 600 * scale;
            var _0x51c96b = Math.cos(_0x220051.angle) * _0x45b904;
            var _0x4bd566 = Math.sin(_0x220051.angle) * _0x45b904;
          } else {
            var _0x51c96b = 0;
            var _0x4bd566 = 0;
          }
          ;
          var _0x1706d3 = sprite[_0x158085][world.time][_0x49e3a6];
          ctxDrawImage(ctx, _0x1706d3, user.cam.x + _0x220051.x - _0x1706d3.width / (_scale_object * 2) + _0x51c96b, user.cam.y + _0x220051.y - _0x1706d3.height / (_scale_object * 2) + _0x4bd566, _0x1706d3.width / _scale_object, _0x1706d3.height / _scale_object);
        }
      }
    }
  }
}
function draw_map_decorations(_0x341939, _0x580552, _0xf9a4cf, _0x1d7941, _0x214cbf, _0xc7423a, _0x415389, _0x53e9a4, _0x2d60f1) {
  if (_0x53e9a4 === undefined) {
    _0x53e9a4 = 0;
  }
  for (var _0x478518 = _0x341939; _0x478518 <= _0x580552; _0x478518++) {
    for (var _0x5d27d = _0xf9a4cf; _0x5d27d <= _0x1d7941; _0x5d27d++) {
      var _0x26549c = MAP.tiles[_0x478518][_0x5d27d];
      if (_0x26549c === undefined || _0x26549c[_0xc7423a] === undefined) {
        continue;
      }
      var _0x164ba1 = _0x26549c[_0xc7423a];
      if (_0x164ba1 === undefined) {
        continue;
      }
      if (_0x164ba1.scale === 1) {
        var _0x2d076e = sprite[_0x214cbf][world.time][_0x164ba1._id];
        ctx.save();
        ctx.translate(user.cam.x + _0x164ba1.x, user.cam.y + _0x164ba1.y);
        ctx.rotate(_0x164ba1.angle);
        ctxDrawImage(ctx, _0x2d076e, -_0x2d076e.width / 4, -_0x2d076e.height / 4, _0x2d076e.width / 2, _0x2d076e.height / 2);
        ctx.restore();
      } else if (_0x164ba1.scale === 3) {
        for (var _0x266293 = 0; _0x266293 < _0x164ba1.p.length; _0x266293++) {
          ctx.save();
          ctx.translate(user.cam.x + _0x164ba1.x, user.cam.y + _0x164ba1.y);
          ctx.rotate(_0x164ba1.p[_0x266293].angle);
          var _0x2d076e = sprite[_0x214cbf][world.time][_0x164ba1.p[_0x266293]._id];
          ctxDrawImage(ctx, _0x2d076e, -_0x2d076e.width / 3 + _0x164ba1.p[_0x266293].x, -_0x2d076e.height / 3 + _0x164ba1.p[_0x266293].y, _0x2d076e.width / 1.5, _0x2d076e.height / 1.5);
          ctx.restore();
        }
      } else {
        var _0x2d076e = sprite[_0x214cbf][world.time][_0x164ba1._id];
        ctx.save();
        ctx.translate(user.cam.x + _0x164ba1.x, user.cam.y + _0x164ba1.y);
        ctx.rotate(_0x164ba1.angle);
        ctxDrawImage(ctx, _0x2d076e, -_0x2d076e.width / 2, -_0x2d076e.height / 2, _0x2d076e.width, _0x2d076e.height);
        ctx.restore();
      }
    }
  }
}
function draw_lava_effect(_0x18212e, _0x55f655, _0x1a0ef4, _0x385391, _0x20a581, _0x54135d, _0x1ee503, _0x4fef0d, _0x14b73a) {
  if (_0x4fef0d === undefined) {
    _0x4fef0d = 0;
  }
  for (var _0x36c54d = _0x1ee503; _0x36c54d >= _0x4fef0d; _0x36c54d--) {
    for (var _0x41a6c1 = _0x18212e; _0x41a6c1 <= _0x55f655; _0x41a6c1++) {
      for (var _0x111dbd = _0x1a0ef4; _0x111dbd <= _0x385391; _0x111dbd++) {
        var _0x247011 = MAP.tiles[_0x41a6c1][_0x111dbd];
        if (_0x247011 === undefined || _0x247011[_0x54135d] === undefined) {
          continue;
        }
        var _0x2030c6 = _0x247011[_0x54135d][_0x36c54d];
        if (_0x2030c6 === undefined) {
          continue;
        }
        for (var _0x1b0919 = 0; _0x1b0919 < _0x2030c6.length; _0x1b0919++) {
          var _0x3c188c = _0x2030c6[_0x1b0919];
          if (_0x3c188c.update) {
            if (_0x3c188c.hit.update() && _0x3c188c.hit.o == false) {
              _0x3c188c.update = false;
            }
            var _0x201d6c = (1 - _0x3c188c.hit.v) * delta * 600 * scale;
            var _0x1a8384 = Math.cos(_0x3c188c.angle) * _0x201d6c;
            var _0x51d94c = Math.sin(_0x3c188c.angle) * _0x201d6c;
          } else {
            var _0x1a8384 = 0;
            var _0x51d94c = 0;
          }
          ;
          for (var _0x407a64 = 0; _0x407a64 < _bubble[_0x36c54d].amount; _0x407a64++) {
            if (world.lava[_0x407a64].last !== old_timestamp) {
              world.lava[_0x407a64].update();
              world.lava[_0x407a64].last = old_timestamp;
            }
            var _0x460671 = sprite[SPRITE.LAVA_BUBBLE][world.time][_bubble[_0x36c54d].pos[_0x407a64].t];
            var _0x16b12e = -_0x460671.width * world.lava[_0x407a64].v;
            var _0x2ab351 = -_0x460671.height * world.lava[_0x407a64].v;
            ctxDrawImage(ctx, _0x460671, user.cam.x + _0x3c188c.x - _0x16b12e / 4 + _0x1a8384 + _bubble[_0x36c54d].pos[_0x407a64].x, user.cam.y + _0x3c188c.y - _0x2ab351 / 4 + _0x51d94c + _bubble[_0x36c54d].pos[_0x407a64].y, _0x16b12e / 2, _0x2ab351 / 2);
          }
        }
      }
    }
  }
}
_bubble = [{
  amount: 10,
  pos: [{
    x: -128,
    y: -20,
    t: 0
  }, {
    x: -86,
    y: -4,
    t: 1
  }, {
    x: -60,
    y: -74,
    t: 2
  }, {
    x: -22,
    y: -144,
    t: 0
  }, {
    x: -58,
    y: 86,
    t: 0
  }, {
    x: 3,
    y: -30,
    t: 0
  }, {
    x: 65,
    y: -115,
    t: 1
  }, {
    x: 118,
    y: -50,
    t: 0
  }, {
    x: 73,
    y: 15,
    t: 1
  }, {
    x: 67,
    y: 79,
    t: 0
  }]
}, {
  amount: 5,
  pos: [{
    x: -45,
    y: -26,
    t: 0
  }, {
    x: -45,
    y: 20,
    t: 2
  }, {
    x: 10,
    y: -60,
    t: 1
  }, {
    x: 52,
    y: -17,
    t: 1
  }, {
    x: 14,
    y: 45,
    t: 0
  }]
}, {
  amount: 3,
  pos: [{
    x: -30,
    y: 3,
    t: 2
  }, {
    x: 7,
    y: -38,
    t: 2
  }, {
    x: 37,
    y: 5,
    t: 2
  }]
}, {
  amount: 11,
  pos: [{
    x: -74,
    y: -87,
    t: 2
  }, {
    x: -11,
    y: -10,
    t: 1
  }, {
    x: -99,
    y: 17,
    t: 1
  }, {
    x: -66,
    y: 84,
    t: 0
  }, {
    x: -55,
    y: 123,
    t: 1
  }, {
    x: 10,
    y: 81,
    t: 2
  }, {
    x: 52,
    y: 50,
    t: 0
  }, {
    x: 138,
    y: 9,
    t: 1
  }, {
    x: 104,
    y: -28,
    t: 0
  }, {
    x: 67,
    y: -56,
    t: 2
  }, {
    x: 5,
    y: -112,
    t: 0
  }]
}, {
  amount: 6,
  pos: [{
    x: -33,
    y: -66,
    t: 2
  }, {
    x: -58,
    y: 10,
    t: 0
  }, {
    x: -19,
    y: 44,
    t: 1
  }, {
    x: 44,
    y: 20,
    t: 0
  }, {
    x: 53,
    y: -36,
    t: 2
  }, {
    x: 7,
    y: -62,
    t: 0
  }]
}, {
  amount: 3,
  pos: [{
    x: -19,
    y: -25,
    t: 1
  }, {
    x: -29,
    y: 13,
    t: 2
  }, {
    x: 12,
    y: 12,
    t: 0
  }]
}];
var _js = 0;
var _je = 0;
var _is = 0;
var _ie = 0;
function draw_world() {
  var _0x23e4e2 = _js;
  var _0x29cc2d = _je;
  var _0x1f764d = _is;
  var _0x14fffd = _ie;
  if (ui.quality) {
    draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.LAKE_EDGE, "l", 2);
  }
  if (ui.quality) {
    draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.LAVA_GROUND, "la", 5);
  }
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.MAGMA, "la", 5);
  draw_map_transition(draw_breath_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.LAKE, "l", 2);
  if (ui.quality) {
    draw_map_transition(draw_lava_effect, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.MAGMA, "la", 5);
    draw_map_transition(draw_breath_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.LAKE_DEEP, "l", 2);
  }
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.MARKER, "ma", 3);
  var _0x74c4e2 = world.units[ITEMS.SAND_WORM];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x74c4e2.length; _0x2b6460++) {
    _0x74c4e2[_0x2b6460].draw_ground();
  }
  var _0x5739e1 = world.units[ITEMS.PLAYERS];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x5739e1.length; _0x2b6460++) {
    var _0x3b9452 = _0x5739e1[_0x2b6460];
    for (var _0x1eb8c5 = 0; _0x1eb8c5 < _0x3b9452.swim.length; _0x1eb8c5++) {
      draw_swim(_0x3b9452.swim[_0x1eb8c5]);
    }
  }
  var _0xaee0cc = world.units[ITEMS.BRIDGE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0xaee0cc.length; _0x2b6460++) {
    draw_transition(_0xaee0cc[_0x2b6460], SPRITE.BRIDGE);
    _0xaee0cc[_0x2b6460].draw_life(_0xaee0cc[_0x2b6460].info);
  }
  var _0x147feb = world.units[ITEMS.FURNACE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x147feb.length; _0x2b6460++) {
    if (_0x147feb[_0x2b6460].action == 2) {
      draw_bg_transition(_0x147feb[_0x2b6460]);
    }
  }
  var _0x19e259 = world.units[ITEMS.FIRE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x19e259.length; _0x2b6460++) {
    draw_bg_transition(_0x19e259[_0x2b6460], SPRITE.WOOD_FIRE);
  }
  var _0x3a541e = world.units[ITEMS.RESURRECTION];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3a541e.length; _0x2b6460++) {
    draw_bg_transition(_0x3a541e[_0x2b6460]);
  }
  var _0x53d82f = world.units[ITEMS.EMERALD_MACHINE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x53d82f.length; _0x2b6460++) {
    draw_bg_transition(_0x53d82f[_0x2b6460]);
  }
  var _0x1e249b = world.units[ITEMS.BIG_FIRE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1e249b.length; _0x2b6460++) {
    draw_bg_transition(_0x1e249b[_0x2b6460], SPRITE.BIG_FIRE_WOOD);
  }
  var _0x13e41e = world.units[ITEMS.SIGN];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x13e41e.length; _0x2b6460++) {
    draw_transition(_0x13e41e[_0x2b6460]);
  }
  var _0xcb2ae3 = world.units[ITEMS.PLOT];
  for (var _0x2b6460 = 0; _0x2b6460 < _0xcb2ae3.length; _0x2b6460++) {
    draw_transition(_0xcb2ae3[_0x2b6460], SPRITE.PLOT);
  }
  var _0x554377 = world.units[ITEMS.SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x554377.length; _0x2b6460++) {
    draw_bg_transition(_0x554377[_0x2b6460]);
  }
  var _0x554377 = world.units[ITEMS.TOMATO_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x554377.length; _0x2b6460++) {
    draw_bg_transition(_0x554377[_0x2b6460]);
  }
  var _0x554377 = world.units[ITEMS.SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x554377.length; _0x2b6460++) {
    draw_fg_transition(_0x554377[_0x2b6460]);
  }
  var _0x3313a0 = world.units[ITEMS.CARROT_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3313a0.length; _0x2b6460++) {
    if ((_0x3313a0[_0x2b6460].info & 15) === 0 || _0x3313a0[_0x2b6460].info === 10) {
      draw_transition(_0x3313a0[_0x2b6460]);
    }
  }
  var _0x1248b5 = world.units[ITEMS.WATERMELON_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1248b5.length; _0x2b6460++) {
    if ((_0x1248b5[_0x2b6460].info & 15) === 0 || _0x1248b5[_0x2b6460].info === 10) {
      draw_transition(_0x1248b5[_0x2b6460]);
    }
  }
  var _0x459cf9 = world.units[ITEMS.ALOE_VERA_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x459cf9.length; _0x2b6460++) {
    if ((_0x459cf9[_0x2b6460].info & 15) === 0 || _0x459cf9[_0x2b6460].info === 10) {
      draw_transition(_0x459cf9[_0x2b6460]);
    }
  }
  var _0x1ab17a = world.units[ITEMS.WHEAT_MOB];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1ab17a.length; _0x2b6460++) {
    draw_transition(_0x1ab17a[_0x2b6460], SPRITE.WHEAT_SEED);
  }
  var _0x8c41d5 = world.units[ITEMS.GARLIC_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x8c41d5.length; _0x2b6460++) {
    if ((_0x8c41d5[_0x2b6460].info & 15) === 0 || _0x8c41d5[_0x2b6460].info === 10) {
      draw_transition(_0x8c41d5[_0x2b6460]);
    }
  }
  var _0x2c9107 = world.units[ITEMS.THORNBUSH_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2c9107.length; _0x2b6460++) {
    if ((_0x2c9107[_0x2b6460].info & 15) === 0 || _0x2c9107[_0x2b6460].info === 10) {
      draw_transition(_0x2c9107[_0x2b6460]);
    }
  }
  var _0x3cee02 = world.units[ITEMS.PUMPKIN_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3cee02.length; _0x2b6460++) {
    if ((_0x3cee02[_0x2b6460].info & 15) === 0 || _0x3cee02[_0x2b6460].info === 10) {
      draw_transition(_0x3cee02[_0x2b6460]);
    }
  }
  var _0x1ab17a = world.units[ITEMS.WHEAT_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1ab17a.length; _0x2b6460++) {
    draw_transition(_0x1ab17a[_0x2b6460]);
  }
  var _0x592070 = world.units[ITEMS.CRATE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x592070.length; _0x2b6460++) {
    draw_transition(_0x592070[_0x2b6460], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var _0xfee6d1 = world.units[ITEMS.DEAD_BOX];
  for (var _0x2b6460 = 0; _0x2b6460 < _0xfee6d1.length; _0x2b6460++) {
    draw_transition(_0xfee6d1[_0x2b6460], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var _0x32ddbc = world.units[ITEMS.GIFT];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x32ddbc.length; _0x2b6460++) {
    draw_transition(_0x32ddbc[_0x2b6460], SPRITE.GIFT, SPRITE.HURT_GIFT);
  }
  var _0x856e94 = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info & 1) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info & 1) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.WOOD_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info & 1) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.STONE_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info & 1) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.GOLD_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.DIAMOND_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.AMETHYST_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var _0x856e94 = world.units[ITEMS.REIDITE_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (_0x856e94[_0x2b6460].info) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x1351cd = world.units[ITEMS.RABBIT];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1351cd.length; _0x2b6460++) {
    draw_transition(_0x1351cd[_0x2b6460], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
  }
  var _0x15bfaf = world.units[ITEMS.BED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x15bfaf.length; _0x2b6460++) {
    draw_transition(_0x15bfaf[_0x2b6460], SPRITE.BED);
  }
  var _0x74c4e2 = world.units[ITEMS.SAND_WORM];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x74c4e2.length; _0x2b6460++) {
    draw_transition(_0x74c4e2[_0x2b6460], SPRITE.SAND_WORM, SPRITE.HURT_SAND_WORM);
  }
  var _0x3ed75a = world.units[ITEMS.SPELL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3ed75a.length; _0x2b6460++) {
    if (_0x3ed75a[_0x2b6460].fly === 0) {
      draw_transition(_0x3ed75a[_0x2b6460]);
    }
  }
  var _0x5739e1 = world.units[ITEMS.PLAYERS];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x5739e1.length; _0x2b6460++) {
    var _0x3b9452 = _0x5739e1[_0x2b6460];
    if (_0x5739e1[_0x2b6460].vehicle !== INV.BABY_DRAGON && _0x5739e1[_0x2b6460].vehicle !== INV.BABY_LAVA && _0x5739e1[_0x2b6460].vehicle !== INV.HAWK && _0x5739e1[_0x2b6460].vehicle !== INV.PLANE && _0x5739e1[_0x2b6460].vehicle !== INV.NIMBUS) {
      if (_0x3b9452.tower === 0) {
        if (_0x3b9452.tower_fx > 0.001) {
          _0x3b9452.tower_fx = Utils.lerp(_0x3b9452.tower_fx, 0, 0.018);
          var _0x105ed0 = 1 + Math.min(1, Math.max(_0x3b9452.tower_fx, 0) / 100) * 0.18;
          ctx.save();
          ctx.scale(_0x105ed0, _0x105ed0);
          user.cam.x /= _0x105ed0;
          user.cam.y /= _0x105ed0;
          _0x3b9452.x /= _0x105ed0;
          _0x3b9452.y /= _0x105ed0;
          _0x3b9452.r.x /= _0x105ed0;
          _0x3b9452.r.y /= _0x105ed0;
          _0x3b9452.draw_vehicle();
          _0x3b9452.draw();
          user.cam.x *= _0x105ed0;
          user.cam.y *= _0x105ed0;
          _0x3b9452.x *= _0x105ed0;
          _0x3b9452.y *= _0x105ed0;
          _0x3b9452.r.x *= _0x105ed0;
          _0x3b9452.r.y *= _0x105ed0;
          ctx.restore();
        } else {
          _0x3b9452.fly = 0;
          _0x3b9452.draw_vehicle();
          _0x3b9452.draw();
        }
      }
    } else if (_0x3b9452.speed <= 180) {
      ctx.save();
      var _0x105ed0 = 1 + Math.min(1, Math.max(_0x3b9452.vehicle_fx5 - 30, 0) / 180) * 0.35;
      ctx.scale(_0x105ed0, _0x105ed0);
      user.cam.x /= _0x105ed0;
      user.cam.y /= _0x105ed0;
      _0x3b9452.x /= _0x105ed0;
      _0x3b9452.y /= _0x105ed0;
      _0x3b9452.r.x /= _0x105ed0;
      _0x3b9452.r.y /= _0x105ed0;
      _0x3b9452.fly = 0;
      _0x3b9452.draw_vehicle();
      _0x3b9452.draw();
      user.cam.x *= _0x105ed0;
      user.cam.y *= _0x105ed0;
      _0x3b9452.x *= _0x105ed0;
      _0x3b9452.y *= _0x105ed0;
      _0x3b9452.r.x *= _0x105ed0;
      _0x3b9452.r.y *= _0x105ed0;
      ctx.restore();
    }
  }
  var _0x15bfaf = world.units[ITEMS.BED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x15bfaf.length; _0x2b6460++) {
    draw_transition(_0x15bfaf[_0x2b6460], SPRITE.BED_TOP);
  }
  var _0x23f1b9 = world.units[ITEMS.CRAB];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x23f1b9.length; _0x2b6460++) {
    draw_transition(_0x23f1b9[_0x2b6460]);
  }
  var _0x5eff3e = world.units[ITEMS.FOX];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x5eff3e.length; _0x2b6460++) {
    draw_transition(_0x5eff3e[_0x2b6460], SPRITE.FOX, SPRITE.HURT_FOX);
  }
  var _0x4c798b = world.units[ITEMS.BOAR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x4c798b.length; _0x2b6460++) {
    draw_transition(_0x4c798b[_0x2b6460]);
  }
  var _0x51dcff = world.units[ITEMS.WOLF];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x51dcff.length; _0x2b6460++) {
    draw_transition(_0x51dcff[_0x2b6460], SPRITE.WOLF, SPRITE.HURT_WOLF);
  }
  var _0x12c915 = world.units[ITEMS.BABY_DRAGON];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x12c915.length; _0x2b6460++) {
    draw_transition(_0x12c915[_0x2b6460], SPRITE.BABY_DRAGON, SPRITE.HURT_BABY_DRAGON);
  }
  var _0x339d82 = world.units[ITEMS.BABY_LAVA];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x339d82.length; _0x2b6460++) {
    draw_transition(_0x339d82[_0x2b6460], SPRITE.BABY_LAVA, SPRITE.HURT_BABY_LAVA);
  }
  var _0x3313a0 = world.units[ITEMS.CARROT_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3313a0.length; _0x2b6460++) {
    if ((_0x3313a0[_0x2b6460].info & 15) !== 0 && _0x3313a0[_0x2b6460].info !== 10) {
      draw_transition(_0x3313a0[_0x2b6460]);
    }
  }
  var _0x1248b5 = world.units[ITEMS.WATERMELON_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1248b5.length; _0x2b6460++) {
    if ((_0x1248b5[_0x2b6460].info & 15) !== 0 && _0x1248b5[_0x2b6460].info !== 10) {
      draw_transition(_0x1248b5[_0x2b6460]);
    }
  }
  var _0x459cf9 = world.units[ITEMS.ALOE_VERA_MOB];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x459cf9.length; _0x2b6460++) {
    draw_transition(_0x459cf9[_0x2b6460], SPRITE.ALOE_VERA);
  }
  var _0x459cf9 = world.units[ITEMS.ALOE_VERA_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x459cf9.length; _0x2b6460++) {
    if ((_0x459cf9[_0x2b6460].info & 15) !== 0 && _0x459cf9[_0x2b6460].info !== 10) {
      draw_transition(_0x459cf9[_0x2b6460]);
    }
  }
  var _0x554377 = world.units[ITEMS.TOMATO_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x554377.length; _0x2b6460++) {
    draw_fg_transition(_0x554377[_0x2b6460]);
  }
  var _0x8c41d5 = world.units[ITEMS.GARLIC_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x8c41d5.length; _0x2b6460++) {
    if ((_0x8c41d5[_0x2b6460].info & 15) !== 0 && _0x8c41d5[_0x2b6460].info !== 10) {
      draw_transition(_0x8c41d5[_0x2b6460]);
    }
  }
  var _0x2c9107 = world.units[ITEMS.THORNBUSH_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2c9107.length; _0x2b6460++) {
    if ((_0x2c9107[_0x2b6460].info & 15) !== 0 && _0x2c9107[_0x2b6460].info !== 10) {
      draw_transition(_0x2c9107[_0x2b6460]);
    }
  }
  var _0x3cee02 = world.units[ITEMS.PUMPKIN_SEED];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3cee02.length; _0x2b6460++) {
    if ((_0x3cee02[_0x2b6460].info & 15) !== 0 && _0x3cee02[_0x2b6460].info !== 10) {
      draw_transition(_0x3cee02[_0x2b6460]);
    }
  }
  var _0x78d9e = world.units[ITEMS.TREASURE_CHEST];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x78d9e.length; _0x2b6460++) {
    draw_transition(_0x78d9e[_0x2b6460], SPRITE.TREASURE_CHEST, SPRITE.HURT_TREASURE_CHEST);
  }
  var _0x1090cd = world.units[ITEMS.KRAKEN];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1090cd.length; _0x2b6460++) {
    draw_transition(_0x1090cd[_0x2b6460], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
  }
  var _0x3dcea5 = world.units[ITEMS.PIRANHA];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3dcea5.length; _0x2b6460++) {
    draw_transition(_0x3dcea5[_0x2b6460], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
  }
  var _0x307b4f = world.units[ITEMS.SPIDER];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x307b4f.length; _0x2b6460++) {
    draw_transition(_0x307b4f[_0x2b6460], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
  }
  var _0x52bf35 = world.units[ITEMS.PENGUIN];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x52bf35.length; _0x2b6460++) {
    draw_transition(_0x52bf35[_0x2b6460], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
  }
  var _0x26121f = world.units[ITEMS.BEAR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x26121f.length; _0x2b6460++) {
    draw_transition(_0x26121f[_0x2b6460], SPRITE.BEAR, SPRITE.HURT_BEAR);
  }
  var _0x2fc8a1 = world.units[ITEMS.BABY_MAMMOTH];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2fc8a1.length; _0x2b6460++) {
    draw_transition(_0x2fc8a1[_0x2b6460]);
  }
  var _0x3493c6 = world.units[ITEMS.FLAME];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3493c6.length; _0x2b6460++) {
    draw_transition(_0x3493c6[_0x2b6460], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
  }
  var _0x241179 = world.units[ITEMS.CRAB_BOSS];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x241179.length; _0x2b6460++) {
    draw_transition(_0x241179[_0x2b6460]);
  }
  var _0x11dae0 = world.units[ITEMS.MAMMOTH];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x11dae0.length; _0x2b6460++) {
    draw_transition(_0x11dae0[_0x2b6460], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
  }
  var _0x22d31e = world.units[ITEMS.DRAGON];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x22d31e.length; _0x2b6460++) {
    if (_0x22d31e[_0x2b6460].scale === 1) {
      draw_transition(_0x22d31e[_0x2b6460], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var _0x22d31e = world.units[ITEMS.LAVA_DRAGON];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x22d31e.length; _0x2b6460++) {
    if (_0x22d31e[_0x2b6460].scale === 1) {
      draw_transition(_0x22d31e[_0x2b6460], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    }
  }
  var _0x4395ed = world.units[ITEMS.CHEST];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x4395ed.length; _0x2b6460++) {
    draw_transition(_0x4395ed[_0x2b6460]);
  }
  var _0x2b2396 = world.units[ITEMS.WORKBENCH];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2b2396.length; _0x2b6460++) {
    draw_transition(_0x2b2396[_0x2b6460], SPRITE.WORKBENCH);
  }
  var _0x147feb = world.units[ITEMS.FURNACE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x147feb.length; _0x2b6460++) {
    draw_transition(_0x147feb[_0x2b6460]);
  }
  var _0x1b7db7 = world.units[ITEMS.BREAD_OVEN];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1b7db7.length; _0x2b6460++) {
    draw_transition(_0x1b7db7[_0x2b6460]);
  }
  var _0x856e94 = world.units[ITEMS.WOOD_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_WOOD_CLOSE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.STONE_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_STONE_CLOSE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.GOLD_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_GOLD_CLOSE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.DIAMOND_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_DIAMOND_CLOSE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.AMETHYST_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DOOR_AMETHYST_CLOSE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.REIDITE_DOOR];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.REIDITE_DOOR);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.WOOD_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.STONE_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.GOLD_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.DIAMOND_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.AMETHYST_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x856e94 = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x856e94.length; _0x2b6460++) {
    if (!(_0x856e94[_0x2b6460].info & 1)) {
      draw_transition(_0x856e94[_0x2b6460], SPRITE.REIDITE_DOOR_SPIKE);
    }
    _0x856e94[_0x2b6460].draw_life(_0x856e94[_0x2b6460].info >> 1);
  }
  var _0x679a36 = world.units[ITEMS.WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x679a36 = world.units[ITEMS.STONE_WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.STONE_WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x679a36 = world.units[ITEMS.GOLD_WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.GOLD_WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x679a36 = world.units[ITEMS.DIAMOND_WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.DIAMOND_WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x679a36 = world.units[ITEMS.AMETHYST_WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.AMETHYST_WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x679a36 = world.units[ITEMS.REIDITE_WALL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x679a36.length; _0x2b6460++) {
    draw_transition(_0x679a36[_0x2b6460], SPRITE.REIDITE_WALL);
    _0x679a36[_0x2b6460].draw_life(_0x679a36[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.STONE_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.STONE_SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.GOLD_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.GOLD_SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.DIAMOND_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.DIAMOND_SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.AMETHYST_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.AMETHYST_SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x488f83 = world.units[ITEMS.REIDITE_SPIKE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x488f83.length; _0x2b6460++) {
    draw_transition(_0x488f83[_0x2b6460], SPRITE.REIDITE_SPIKE);
    _0x488f83[_0x2b6460].draw_life(_0x488f83[_0x2b6460].info);
  }
  var _0x204621 = world.units[ITEMS.WELL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x204621.length; _0x2b6460++) {
    var _0x433a35 = _0x204621[_0x2b6460];
    if (_0x433a35.info > 0) {
      draw_transition(_0x433a35, SPRITE.WELL_FULL);
    } else {
      draw_transition(_0x433a35, SPRITE.WELL_EMPTY);
    }
  }
  var _0x405e8a = world.units[ITEMS.TOTEM];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x405e8a.length; _0x2b6460++) {
    draw_transition(_0x405e8a[_0x2b6460], SPRITE.TOTEM);
  }
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.GOLD, "g", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.GOLD_WINTER, "gw", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.DIAMOND, "d", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.DIAMOND_WINTER, "dw", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.PLANT, "p", 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.EMERALD, "m", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.AMETHYST, "a", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.REIDITE, "re", 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.SHADOW_CAVE_STONES, "cs", 3, 3);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.SHADOW_CAVE_STONES, "cs", 2, 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.SHADOW_CAVE_STONES, "cs", 1, 1);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.SHADOW_CAVE_STONES, "cs", 0, 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.CAVE_STONES, "cs", 3, 3);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.CAVE_STONES, "cs", 2, 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.CAVE_STONES, "cs", 1, 1);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.CAVE_STONES, "cs", 0, 0);
  var _0x3189d3 = world.units[ITEMS.FRUIT];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3189d3.length; _0x2b6460++) {
    for (var _0x1eb8c5 = 0; _0x1eb8c5 < _0x3189d3[_0x2b6460].info; _0x1eb8c5++) {
      draw_transition(_0x3189d3[_0x2b6460].fruits[_0x1eb8c5], SPRITE.FRUIT);
    }
  }
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.STONES, "s", 2);
  var _0x141e50 = world.units[ITEMS.EXTRACTOR_MACHINE_STONE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x141e50.length; _0x2b6460++) {
    draw_transition(_0x141e50[_0x2b6460]);
  }
  var _0x141e50 = world.units[ITEMS.EXTRACTOR_MACHINE_GOLD];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x141e50.length; _0x2b6460++) {
    draw_transition(_0x141e50[_0x2b6460]);
  }
  var _0x141e50 = world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x141e50.length; _0x2b6460++) {
    draw_transition(_0x141e50[_0x2b6460]);
  }
  var _0x141e50 = world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x141e50.length; _0x2b6460++) {
    draw_transition(_0x141e50[_0x2b6460]);
  }
  var _0x141e50 = world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x141e50.length; _0x2b6460++) {
    draw_transition(_0x141e50[_0x2b6460]);
  }
  var _0x2e2c14 = world.units[ITEMS.WINDMILL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2e2c14.length; _0x2b6460++) {
    draw_bg_transition(_0x2e2c14[_0x2b6460]);
  }
  var _0x19e259 = world.units[ITEMS.FIRE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x19e259.length; _0x2b6460++) {
    draw_fg_transition(_0x19e259[_0x2b6460]);
  }
  var _0x19e259 = world.units[ITEMS.BIG_FIRE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x19e259.length; _0x2b6460++) {
    draw_fg_transition(_0x19e259[_0x2b6460]);
  }
  var _0x147feb = world.units[ITEMS.FURNACE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x147feb.length; _0x2b6460++) {
    if (_0x147feb[_0x2b6460].action == 2) {
      draw_fg_transition(_0x147feb[_0x2b6460]);
    }
  }
  var _0x1b7db7 = world.units[ITEMS.BREAD_OVEN];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1b7db7.length; _0x2b6460++) {
    draw_fg_transition(_0x1b7db7[_0x2b6460]);
  }
  var _0x3a541e = world.units[ITEMS.RESURRECTION];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3a541e.length; _0x2b6460++) {
    draw_fg_transition(_0x3a541e[_0x2b6460]);
  }
  var _0x53d82f = world.units[ITEMS.EMERALD_MACHINE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x53d82f.length; _0x2b6460++) {
    draw_fg_transition(_0x53d82f[_0x2b6460]);
    _0x53d82f[_0x2b6460].draw_life(_0x53d82f[_0x2b6460].info);
  }
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.CACTUS, "c", 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.TREE, "t", 5, 4);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.FIR, "f", 2, 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.PALM, "plm", 0, 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.TREE_BRANCH, "b", 3, 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.TREE, "t", 3, 2);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.TREE_BRANCH, "b", 1, 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.FIR, "f", 1, 1);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.PALM, "plm", 1, 1);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.TREE, "t", 1, 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.FIR, "f", 0, 0);
  draw_map_transition(draw_map_objects, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.PALM, "plm", 2, 2);
  var _0x2e2c14 = world.units[ITEMS.WINDMILL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2e2c14.length; _0x2b6460++) {
    draw_fg_transition(_0x2e2c14[_0x2b6460]);
  }
  var _0x39d7ae = world.units[ITEMS.WOOD_TOWER];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x39d7ae.length; _0x2b6460++) {
    draw_transition(_0x39d7ae[_0x2b6460], SPRITE.WOOD_TOWER);
  }
  var _0x5739e1 = world.units[ITEMS.PLAYERS];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x5739e1.length; _0x2b6460++) {
    var _0x3b9452 = _0x5739e1[_0x2b6460];
    if (_0x3b9452.tower === 1 && (_0x3b9452.speed < 180 || _0x3b9452.vehicle !== INV.BABY_DRAGON && _0x3b9452.vehicle !== INV.BABY_LAVA && _0x3b9452.vehicle !== INV.NIMBUS && _0x3b9452.vehicle !== INV.HAWK && _0x3b9452.vehicle !== INV.PLANE)) {
      _0x3b9452.tower_fx = Utils.lerp(_0x3b9452.tower_fx, 100, 0.018);
      var _0x105ed0 = 1 + Math.min(1, Math.max(_0x3b9452.tower_fx, 0) / 100) * 0.18;
      ctx.save();
      ctx.scale(_0x105ed0, _0x105ed0);
      user.cam.x /= _0x105ed0;
      user.cam.y /= _0x105ed0;
      _0x3b9452.x /= _0x105ed0;
      _0x3b9452.y /= _0x105ed0;
      _0x3b9452.r.x /= _0x105ed0;
      _0x3b9452.r.y /= _0x105ed0;
      _0x3b9452.draw_vehicle();
      _0x3b9452.draw();
      user.cam.x *= _0x105ed0;
      user.cam.y *= _0x105ed0;
      _0x3b9452.x *= _0x105ed0;
      _0x3b9452.y *= _0x105ed0;
      _0x3b9452.r.x *= _0x105ed0;
      _0x3b9452.r.y *= _0x105ed0;
      ctx.restore();
    }
  }
  var _0xfe8afe = world.units[ITEMS.ROOF];
  for (var _0x2b6460 = 0; _0x2b6460 < _0xfe8afe.length; _0x2b6460++) {
    draw_transition(_0xfe8afe[_0x2b6460], SPRITE.ROOF);
    _0xfe8afe[_0x2b6460].draw_life(_0xfe8afe[_0x2b6460].info);
  }
  var _0x1210cf = world.units[ITEMS.FIREFLY];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x1210cf.length; _0x2b6460++) {
    draw_transition(_0x1210cf[_0x2b6460], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
  }
  var _0x2b0fe7 = world.units[ITEMS.GARLAND];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2b0fe7.length; _0x2b6460++) {
    draw_transition(_0x2b0fe7[_0x2b6460], SPRITE.GARLAND);
  }
  var _0x5739e1 = world.units[ITEMS.PLAYERS];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x5739e1.length; _0x2b6460++) {
    var _0x3b9452 = _0x5739e1[_0x2b6460];
    if ((_0x3b9452.vehicle === INV.BABY_DRAGON || _0x3b9452.vehicle === INV.BABY_LAVA || _0x3b9452.vehicle === INV.NIMBUS || _0x3b9452.vehicle === INV.HAWK || _0x3b9452.vehicle === INV.PLANE) && _0x3b9452.speed > 180) {
      _0x3b9452.fly = 1;
      ctx.save();
      var _0x105ed0 = 1 + Math.min(1, Math.max(_0x3b9452.vehicle_fx5 - 30, 0) / 180) * 0.35;
      ctx.scale(_0x105ed0, _0x105ed0);
      user.cam.x /= _0x105ed0;
      user.cam.y /= _0x105ed0;
      _0x3b9452.x /= _0x105ed0;
      _0x3b9452.y /= _0x105ed0;
      _0x3b9452.r.x /= _0x105ed0;
      _0x3b9452.r.y /= _0x105ed0;
      _0x3b9452.draw_vehicle();
      _0x3b9452.draw();
      user.cam.x *= _0x105ed0;
      user.cam.y *= _0x105ed0;
      _0x3b9452.x *= _0x105ed0;
      _0x3b9452.y *= _0x105ed0;
      _0x3b9452.r.x *= _0x105ed0;
      _0x3b9452.r.y *= _0x105ed0;
      ctx.restore();
    }
  }
  var _0x3ed75a = world.units[ITEMS.SPELL];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x3ed75a.length; _0x2b6460++) {
    if (_0x3ed75a[_0x2b6460].fly === 1) {
      draw_transition(_0x3ed75a[_0x2b6460]);
    }
  }
  var _0x22d31e = world.units[ITEMS.DRAGON];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x22d31e.length; _0x2b6460++) {
    if (_0x22d31e[_0x2b6460].scale > 1) {
      draw_transition(_0x22d31e[_0x2b6460], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var _0x22d31e = world.units[ITEMS.LAVA_DRAGON];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x22d31e.length; _0x2b6460++) {
    if (_0x22d31e[_0x2b6460].scale > 1) {
      draw_transition(_0x22d31e[_0x2b6460], SPRITE.LAVA_DRAGON, SPRITE.HURT_LAVA_DRAGON);
    }
  }
  var _0x32105c = world.units[ITEMS.HAWK];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x32105c.length; _0x2b6460++) {
    draw_transition(_0x32105c[_0x2b6460], SPRITE.HAWK, SPRITE.HURT_HAWK);
  }
  var _0x2f90af = world.units[ITEMS.VULTURE];
  for (var _0x2b6460 = 0; _0x2b6460 < _0x2f90af.length; _0x2b6460++) {
    draw_transition(_0x2f90af[_0x2b6460], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
  }
  __effect += delta * 15;
  if (__effect > 60) {
    __effect -= 60;
  }
  draw_map_transition(draw_objects_effect, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.FOG, "fo", 2);
  draw_map_transition(draw_objects_effect, _0x1f764d, _0x14fffd, _0x23e4e2, _0x29cc2d, SPRITE.FOD, "fod", 2);
}
function draw_bg_transition(_0x50f3f5, _0x16c9cc) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x50f3f5.draw_bg(_0x16c9cc);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x50f3f5.draw_bg(_0x16c9cc);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x50f3f5.draw_bg(_0x16c9cc);
  }
}
function draw_fg_transition(_0x55ea77, _0x37f432) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x55ea77.draw_fg(_0x37f432);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x55ea77.draw_fg(_0x37f432);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x55ea77.draw_fg(_0x37f432);
  }
}
function draw_image_transition_2(_0x38a8db, _0x5b3669, _0x12005d, _0x566321, _0x5d520d) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x38a8db][_0x5b3669][world.time], _0x566321, _0x5d520d);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x38a8db][_0x5b3669][world.time], _0x566321, _0x5d520d);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, _0x12005d, _0x566321, _0x5d520d);
  }
}
function draw_image_transition(_0x577cc4, _0x4f77f1, _0x26056c, _0x18fea7) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x577cc4][world.time], _0x26056c, _0x18fea7);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x577cc4][world.time], _0x26056c, _0x18fea7);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, _0x4f77f1, _0x26056c, _0x18fea7);
  }
}
function draw_image_transition_hd_2(_0x4e6c85, _0x4c31cc, _0x3d8e69, _0x419288, _0x213988) {
  var _0x56d6cc = _0x3d8e69.width;
  var _0x3ea8ec = _0x3d8e69.height;
  var _0x57a5ef = Math.floor(_0x56d6cc / 2);
  var _0x336329 = Math.floor(_0x3ea8ec / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x4e6c85][_0x4c31cc][world.time], 0, 0, _0x56d6cc, _0x3ea8ec, _0x419288, _0x213988, _0x57a5ef, _0x336329);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x4e6c85][_0x4c31cc][world.time], 0, 0, _0x56d6cc, _0x3ea8ec, _0x419288, _0x213988, _0x57a5ef, _0x336329);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, sprite[_0x4e6c85][_0x4c31cc][world.time], 0, 0, _0x56d6cc, _0x3ea8ec, _0x419288, _0x213988, _0x57a5ef, _0x336329);
  }
}
function draw_image_transition_hd(_0x7f82d6, _0x5d15e7, _0x37aeb3, _0x699bef) {
  var _0x39d5f9 = _0x5d15e7.width;
  var _0x1c92ee = _0x5d15e7.height;
  var _0x41fec3 = Math.floor(_0x39d5f9 / 2);
  var _0x4bd129 = Math.floor(_0x1c92ee / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x7f82d6][world.time], 0, 0, _0x39d5f9, _0x1c92ee, _0x37aeb3, _0x699bef, _0x41fec3, _0x4bd129);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x7f82d6][world.time], 0, 0, _0x39d5f9, _0x1c92ee, _0x37aeb3, _0x699bef, _0x41fec3, _0x4bd129);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, _0x5d15e7, 0, 0, _0x39d5f9, _0x1c92ee, _0x37aeb3, _0x699bef, _0x41fec3, _0x4bd129);
  }
}
function draw_swim(_0x2dfb99) {
  ctx.globalAlpha = _0x2dfb99.alpha;
  circle(ctx, _0x2dfb99.x + user.cam.x, _0x2dfb99.y + user.cam.y, _0x2dfb99.r);
  fill_path(ctx, SPRITE.SWIM_COLOR[world.time]);
  ctx.globalAlpha = 1;
}
function draw_foot(_0x3bf4fe) {
  ctx.save();
  ctx.translate(user.cam.x + _0x3bf4fe.x, user.cam.y + _0x3bf4fe.y);
  ctx.rotate(_0x3bf4fe.angle);
  ctx.globalAlpha = _0x3bf4fe.alpha;
  var _0x16d0cd = sprite[_0x3bf4fe.id][world.time];
  ctxDrawImage(ctx, _0x16d0cd, -_0x16d0cd.width / 2, -_0x16d0cd.height / 2);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_imgs_transition(_0x201fda, _0x16c47d, _0x512753, _0x987de, _0x2ef30e) {
  if (world.transition && _0x2ef30e == 1) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x201fda][world.time][_0x16c47d], _0x512753, _0x987de);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x201fda][world.time][_0x16c47d], _0x512753, _0x987de);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctx.globalAlpha = _0x2ef30e;
    ctxDrawImage(ctx, sprite[_0x201fda][world.time][_0x16c47d], _0x512753, _0x987de);
    ctx.globalAlpha = 1;
  }
}
function draw_transition(_0x3957c3, _0x34b5ab, _0x5aa01a) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x3957c3.draw(_0x34b5ab, _0x5aa01a);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x3957c3.draw(_0x34b5ab, _0x5aa01a);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x3957c3.draw(_0x34b5ab, _0x5aa01a);
  }
}
function draw_map_transition(_0x2d34ba, _0x51cb98, _0x4ea399, _0x3eea3a, _0x41be6d, _0x52eaec, _0x2a24e9, _0x405a1c, _0xfb13ae, _0x345af1) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x2d34ba(_0x51cb98, _0x4ea399, _0x3eea3a, _0x41be6d, _0x52eaec, _0x2a24e9, _0x405a1c, _0xfb13ae, _0x345af1);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x2d34ba(_0x51cb98, _0x4ea399, _0x3eea3a, _0x41be6d, _0x52eaec, _0x2a24e9, _0x405a1c, _0xfb13ae, _0x345af1);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x2d34ba(_0x51cb98, _0x4ea399, _0x3eea3a, _0x41be6d, _0x52eaec, _0x2a24e9, _0x405a1c, _0xfb13ae, _0x345af1);
  }
}
function get_color_transition(_0x336da6, _0x22962d, _0x2a36b1, _0x47ea5f, _0x5af97d, _0x38ca83, _0x25c243) {
  var _0x415811 = "#";
  var _0x53439c = Math.floor(_0x47ea5f * _0x25c243 + (1 - _0x25c243) * _0x336da6);
  _0x415811 += _0x53439c < 16 ? "0" + _0x53439c.toString(16) : _0x53439c.toString(16);
  var _0x53439c = Math.floor(_0x5af97d * _0x25c243 + (1 - _0x25c243) * _0x22962d);
  _0x415811 += _0x53439c < 16 ? "0" + _0x53439c.toString(16) : _0x53439c.toString(16);
  var _0x53439c = Math.floor(_0x38ca83 * _0x25c243 + (1 - _0x25c243) * _0x2a36b1);
  _0x415811 += _0x53439c < 16 ? "0" + _0x53439c.toString(16) : _0x53439c.toString(16);
  return _0x415811;
}
function draw_simple_ground() {
  if (world.transition) {
    var _0x1e39ab = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(4, 43, 48, 19, 58, 43, _0x1e39ab);
  } else {
    ctx.fillStyle = SPRITE.GROUND[world.time];
  }
  ctx.fillRect(0, 0, canw, canh);
}
;
function draw_ground() {
  for (var _0x49e5c9 = world.biomes.length - 1; _0x49e5c9 >= 0; _0x49e5c9--) {
    var _0x447c2d = world.biomes[_0x49e5c9];
    if (_0x447c2d.t === world.BIOME_SEA) {
      var _0x97ee82 = world.BIOME[_0x447c2d.t];
      if (-user.cam.x >= _0x447c2d.x1 - 230 - canw && -user.cam.x <= _0x447c2d.x2 + 330 && -user.cam.y >= _0x447c2d.y1 - canh && -user.cam.y <= _0x447c2d.y2 + 100) {
        var _0x4d8b4b = _0x447c2d.x2;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          _0x4d8b4b -= 610;
        }
        var _0x3ae471 = _0x447c2d.x1;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          _0x3ae471 += 610;
        }
        var _0x40a6ef = _0x447c2d.y2;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          _0x40a6ef -= 610;
        }
        var _0x5878b6 = _0x447c2d.y1;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          _0x5878b6 += 610;
        }
        if (world.transition) {
          var _0x14d9c6 = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(_0x97ee82.night[0], _0x97ee82.night[1], _0x97ee82.night[2], _0x97ee82.day[0], _0x97ee82.day[1], _0x97ee82.day[1], _0x14d9c6);
        } else {
          ctx.fillStyle = _0x97ee82._color[world.time];
        }
        var _0x558f89 = Math.max(user.cam.x + _0x3ae471 - 2 - 230, 0);
        var _0xea51ef = Math.max(-user.cam.x + canw - _0x4d8b4b - 330 - 2, 0);
        var _0x53c966 = Math.max(user.cam.y + _0x5878b6 - 2, 0);
        var _0x42759c = Math.max(-user.cam.y + canh - _0x40a6ef - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(_0x558f89, _0x53c966, canw - _0xea51ef - _0x558f89, canh - _0x53c966 - _0x42759c);
      }
    }
  }
  for (var _0x49e5c9 = world.biomes.length - 1; _0x49e5c9 >= 0; _0x49e5c9--) {
    var _0x447c2d = world.biomes[_0x49e5c9];
    if (_0x447c2d.t !== world.BIOME_SEA) {
      var _0x4d8b4b = _0x447c2d.x2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x4d8b4b -= 400;
      }
      var _0x3ae471 = _0x447c2d.x1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x3ae471 += 400;
      }
      var _0x40a6ef = _0x447c2d.y2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x40a6ef -= 300;
      }
      var _0x5878b6 = _0x447c2d.y1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x5878b6 += 300;
      }
      if ((_0x447c2d.v & WORLD.RIGHT) === 0 && -user.cam.x >= _0x4d8b4b - canw + 120 && -user.cam.x <= _0x4d8b4b + 820 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_sand_right(_0x4d8b4b, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[0], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.RIGHT);
        draw_beach_right(_0x4d8b4b, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[0], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.RIGHT);
      }
      if ((_0x447c2d.v & WORLD.LEFT) === 0 && -user.cam.x >= _0x3ae471 - canw - 700 && -user.cam.x <= _0x3ae471 - 20 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_sand_left(_0x3ae471, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[1], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.LEFT);
        draw_beach_left(_0x3ae471, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[1], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.LEFT);
      }
      if ((_0x447c2d.v & WORLD.BOTTOM) === 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x40a6ef - canh - 275 && -user.cam.y <= _0x40a6ef + 490) {
        draw_beach_sand_bottom(_0x40a6ef - 230, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[2], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.BOTTOM);
        draw_beach_bottom(_0x40a6ef - 230, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[2], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.BOTTOM);
      }
      if ((_0x447c2d.v & WORLD.TOP) === 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x5878b6 - canh - 390 && -user.cam.y <= _0x5878b6 + 315) {
        draw_beach_sand_top(_0x5878b6 + 310, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[3], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.TOP);
        draw_beach_top(_0x5878b6 + 310, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[3], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.TOP);
      }
    }
  }
  for (var _0x49e5c9 = world.biomes.length - 1; _0x49e5c9 >= 0; _0x49e5c9--) {
    var _0x447c2d = world.biomes[_0x49e5c9];
    if (_0x447c2d.t !== world.BIOME_SEA) {
      var _0x4d8b4b = _0x447c2d.x2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x4d8b4b -= 400;
      }
      var _0x3ae471 = _0x447c2d.x1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x3ae471 += 400;
      }
      var _0x40a6ef = _0x447c2d.y2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x40a6ef -= 300;
      }
      var _0x5878b6 = _0x447c2d.y1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x5878b6 += 300;
      }
      if ((_0x447c2d.v & WORLD.RIGHT) !== 0 && -user.cam.x >= _0x4d8b4b - canw + 120 && -user.cam.x <= _0x4d8b4b + 820 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_sand_right(_0x4d8b4b, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[0], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.RIGHT);
      }
      if ((_0x447c2d.v & WORLD.LEFT) !== 0 && -user.cam.x >= _0x3ae471 - canw - 700 && -user.cam.x <= _0x3ae471 - 20 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_sand_left(_0x3ae471, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[1], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.LEFT);
      }
      if ((_0x447c2d.v & WORLD.BOTTOM) !== 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x40a6ef - canh - 275 && -user.cam.y <= _0x40a6ef + 490) {
        draw_beach_sand_bottom(_0x40a6ef - 230, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[2], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.BOTTOM);
      }
      if ((_0x447c2d.v & WORLD.TOP) !== 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x5878b6 - canh - 390 && -user.cam.y <= _0x5878b6 + 315) {
        draw_beach_sand_top(_0x5878b6 + 310, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[3], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.TOP);
      }
    }
  }
  for (var _0x49e5c9 = world.biomes.length - 1; _0x49e5c9 >= 0; _0x49e5c9--) {
    var _0x447c2d = world.biomes[_0x49e5c9];
    if (_0x447c2d.t !== world.BIOME_SEA) {
      var _0x97ee82 = world.BIOME[_0x447c2d.t];
      if (-user.cam.x >= _0x447c2d.x1 - 230 - canw && -user.cam.x <= _0x447c2d.x2 + 330 && -user.cam.y >= _0x447c2d.y1 - canh && -user.cam.y <= _0x447c2d.y2 + 100) {
        var _0x4d8b4b = _0x447c2d.x2;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          if ((_0x447c2d.v & WORLD.RIGHT) === 0) {
            _0x4d8b4b -= 414;
          } else {
            _0x4d8b4b -= 610;
          }
        }
        var _0x3ae471 = _0x447c2d.x1;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          if ((_0x447c2d.v & WORLD.LEFT) === 0) {
            _0x3ae471 += 414;
          } else {
            _0x3ae471 += 610;
          }
        }
        var _0x40a6ef = _0x447c2d.y2;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          if ((_0x447c2d.v & WORLD.BOTTOM) === 0) {
            _0x40a6ef -= 414;
          } else {
            _0x40a6ef -= 610;
          }
        }
        var _0x5878b6 = _0x447c2d.y1;
        if (_0x447c2d.t !== world.BIOME_SEA) {
          if ((_0x447c2d.v & WORLD.TOP) === 0) {
            _0x5878b6 += 414;
          } else {
            _0x5878b6 += 610;
          }
        }
        if (world.transition) {
          var _0x14d9c6 = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(_0x97ee82.night[0], _0x97ee82.night[1], _0x97ee82.night[2], _0x97ee82.day[0], _0x97ee82.day[1], _0x97ee82.day[2], _0x14d9c6);
        } else {
          ctx.fillStyle = _0x97ee82._color[world.time];
        }
        var _0x558f89 = Math.max(user.cam.x + _0x3ae471 - 2 - 230, 0);
        var _0xea51ef = Math.max(-user.cam.x + canw - _0x4d8b4b - 330 - 2, 0);
        var _0x53c966 = Math.max(user.cam.y + _0x5878b6 - 2, 0);
        var _0x42759c = Math.max(-user.cam.y + canh - _0x40a6ef - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(_0x558f89, _0x53c966, canw - _0xea51ef - _0x558f89, canh - _0x53c966 - _0x42759c);
      }
    }
  }
  if (ui.quality) {
    draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_TWO, "isl", 2);
    draw_map_transition(draw_breath_objects, _is, _ie, _js, _je, SPRITE.WAVE_ONE, "isl", 2);
  }
  draw_map_transition(draw_map_objects, _is, _ie, _js, _je, SPRITE.ISLAND, "isl", 2);
  if (ui.quality) {
    draw_map_transition(draw_map_decorations, _is, _ie, _js, _je, SPRITE.DECORATION, "de");
  }
  var _0x14aee9 = world.units[ITEMS.PLAYERS];
  for (var _0x49e5c9 = 0; _0x49e5c9 < _0x14aee9.length; _0x49e5c9++) {
    var _0x4bb29c = _0x14aee9[_0x49e5c9];
    for (var _0x8a5935 = 0; _0x8a5935 < _0x4bb29c.foot.length; _0x8a5935++) {
      draw_foot(_0x4bb29c.foot[_0x8a5935]);
    }
  }
  __wave += delta * 40;
  if (__wave > 60) {
    __wave -= 60;
  }
  draw_map_transition(draw_river_tile, _is, _ie, _js, _je, SPRITE.RIVER, "r", 0);
  for (var _0x49e5c9 = 0; _0x49e5c9 < world.biomes.length; _0x49e5c9++) {
    var _0x447c2d = world.biomes[_0x49e5c9];
    if (_0x447c2d.t !== world.BIOME_SEA) {
      var _0x4d8b4b = _0x447c2d.x2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x4d8b4b -= 400;
      }
      var _0x3ae471 = _0x447c2d.x1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x3ae471 += 400;
      }
      var _0x40a6ef = _0x447c2d.y2;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x40a6ef -= 300;
      }
      var _0x5878b6 = _0x447c2d.y1;
      if (_0x447c2d.t !== world.BIOME_SEA) {
        _0x5878b6 += 300;
      }
      if ((_0x447c2d.v & WORLD.RIGHT) > 0 && -user.cam.x >= _0x4d8b4b - canw + 120 && -user.cam.x <= _0x4d8b4b + 820 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_right(_0x4d8b4b, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[0], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.RIGHT);
      }
      if ((_0x447c2d.v & WORLD.LEFT) > 0 && -user.cam.x >= _0x3ae471 - canw - 700 && -user.cam.x <= _0x3ae471 - 20 && -user.cam.y >= _0x5878b6 + 88 - canh && -user.cam.y <= _0x40a6ef + 50) {
        draw_beach_left(_0x3ae471, _0x5878b6 + 88, _0x40a6ef - 88, user.beach[1], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.LEFT);
      }
      if ((_0x447c2d.v & WORLD.BOTTOM) > 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x40a6ef - canh - 275 && -user.cam.y <= _0x40a6ef + 490) {
        draw_beach_bottom(_0x40a6ef - 230, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[2], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.BOTTOM);
      }
      if ((_0x447c2d.v & WORLD.TOP) > 0 && -user.cam.x >= _0x3ae471 - 235 - canw && -user.cam.x <= _0x4d8b4b + 350 && -user.cam.y >= _0x5878b6 - canh - 390 && -user.cam.y <= _0x5878b6 + 315) {
        draw_beach_top(_0x5878b6 + 310, _0x3ae471 - 230, _0x4d8b4b + 230, user.beach[3], world.BIOME[_0x447c2d.t], _0x447c2d.v & WORLD.TOP);
      }
    }
  }
}
;
function draw_ash() {
  var _0x10f899 = user.ash;
  var _0x47f018 = _0x10f899.flakes;
  for (var _0x1d67d2 = 0; _0x1d67d2 < _0x47f018.length; _0x1d67d2++) {
    var _0x549f69 = _0x47f018[_0x1d67d2];
    _0x10f899.update(_0x549f69);
    draw_imgs_transition(SPRITE.ASHES, _0x549f69.id, user.cam.x + _0x549f69.x, user.cam.y + _0x549f69.y, _0x549f69.alpha);
  }
  for (var _0x1d67d2 = 0; _0x1d67d2 < _0x47f018.length; _0x1d67d2++) {
    var _0x549f69 = _0x47f018[_0x1d67d2];
    if (_0x549f69.life <= 0 || _0x549f69.x > -user.cam.x + canw || _0x549f69.x < -user.cam.x || _0x549f69.y > -user.cam.y + canh) {
      _0x47f018.splice(_0x1d67d2, 1);
    }
  }
  var _0x2fce65 = -user.cam.y;
  if (world.dist_lava > -1000) {
    _0x10f899.add(_0x2fce65);
  }
}
function draw_winter() {
  var _0x1ed032 = user.winter;
  if (_0x1ed032.tempest === 0) {
    _0x1ed032.tempest_speed = Math.max(0, _0x1ed032.tempest_speed - delta / 10);
  } else {
    _0x1ed032.tempest_speed = Math.min(1, _0x1ed032.tempest_speed + delta / 10);
  }
  var _0x1e171 = _0x1ed032.flakes;
  for (var _0x46c7f3 = 0; _0x46c7f3 < _0x1e171.length; _0x46c7f3++) {
    var _0x5ccbca = _0x1e171[_0x46c7f3];
    _0x1ed032.update(_0x5ccbca);
    draw_imgs_transition(SPRITE.FLAKES, _0x5ccbca.id, user.cam.x + _0x5ccbca.x, user.cam.y + _0x5ccbca.y, _0x5ccbca.alpha);
  }
  for (var _0x46c7f3 = 0; _0x46c7f3 < _0x1e171.length; _0x46c7f3++) {
    var _0x5ccbca = _0x1e171[_0x46c7f3];
    if (_0x5ccbca.life <= 0 || _0x5ccbca.x > -user.cam.x + canw || _0x5ccbca.x < -user.cam.x || _0x5ccbca.y > -user.cam.y + canh) {
      _0x1e171.splice(_0x46c7f3, 1);
    }
  }
  var _0x1a3e2b = -user.cam.y;
  if (world.dist_winter > -1000) {
    _0x1ed032.add(_0x1a3e2b);
  }
}
function draw_desert() {
  var _0x53068b = user.desert;
  if (_0x53068b.tempest === 0) {
    _0x53068b.tempest_speed = Math.max(0, _0x53068b.tempest_speed - delta / 10);
  } else {
    _0x53068b.tempest_speed = Math.min(1, _0x53068b.tempest_speed + delta / 10);
  }
  var _0x1ace4c = _0x53068b.flakes;
  for (var _0x1e8c6c = 0; _0x1e8c6c < _0x1ace4c.length; _0x1e8c6c++) {
    var _0x53cc23 = _0x1ace4c[_0x1e8c6c];
    _0x53068b.update(_0x53cc23);
    draw_imgs_transition(SPRITE.DESERT, _0x53cc23.id, user.cam.x + _0x53cc23.x, user.cam.y + _0x53cc23.y, _0x53cc23.alpha);
  }
  for (var _0x1e8c6c = 0; _0x1e8c6c < _0x1ace4c.length; _0x1e8c6c++) {
    var _0x53cc23 = _0x1ace4c[_0x1e8c6c];
    if (_0x53cc23.life <= 0 || _0x53cc23.x > -user.cam.x + canw || _0x53cc23.x < -user.cam.x - user.cam.w / 2 || _0x53cc23.y > -user.cam.y + canh) {
      _0x1ace4c.splice(_0x1e8c6c, 1);
    }
  }
  var _0x38d834 = -user.cam.y;
  if (world.dist_desert > -1000) {
    _0x53068b.add(_0x38d834);
  }
}
;
function draw_beach_sand_left(_0x23d695, _0x595b10, _0x38f682, _0x5d9621, _0x2cbc27, _0x290c11) {
  var _0x20f793 = _0x5d9621.w1;
  var _0x5200aa = _0x5d9621.w2;
  var _0x1fdbbc = _0x5d9621.w3;
  var _0x14d405 = user.cam.x + _0x23d695 - 700;
  var _0x278b43 = Math.max(user.cam.y + _0x595b10, 0);
  var _0x1e045e = Math.max(-user.cam.y + canh - _0x38f682 - 100, 0);
  var _0x1ad89d = _0x278b43;
  var _0x51e25d = canh - _0x278b43 - _0x1e045e;
  if (_0x290c11) {
    var _0x1dcc42 = _0x5d9621.t(_0x20f793).x;
  } else {
    var _0x1dcc42 = _0x20f793.r.x;
  }
  var _0x1c7b18 = _0x14d405 + WORLD.LW1SX;
  var _0x14ecd3 = _0x1c7b18;
  var _0x35356b = _0x1ad89d;
  var _0x6c1f06 = _0x1dcc42 + WORLD.W1SX;
  var _0x37f498 = _0x51e25d;
  _0x1c7b18 += _0x1dcc42 + WORLD.W1SX - 2;
  var _0x4ca4c2 = _0x1c7b18;
  if (_0x290c11) {
    var _0x1dcc42 = _0x5d9621.t(_0x5200aa).x;
  } else {
    var _0x1dcc42 = _0x5200aa.r.x;
  }
  var _0x4370d8 = _0x14d405 + WORLD.LW2SX - _0x1c7b18 + _0x1dcc42;
  var _0x58d6d3 = _0x1c7b18;
  var _0x55971a = _0x1ad89d;
  var _0x48c6e4 = _0x4370d8;
  var _0x51ae3f = _0x51e25d;
  _0x1c7b18 += _0x4370d8 - 2;
  var _0x515596 = _0x1c7b18 - 2;
  if (_0x290c11) {
    var _0x1dcc42 = _0x5d9621.t(_0x1fdbbc).x;
  } else {
    var _0x1dcc42 = _0x1fdbbc.r.x;
  }
  _0x4370d8 = _0x14d405 + WORLD.LW3SX - _0x1c7b18 + _0x1dcc42;
  if (_0x515596 < _0x1c7b18 + _0x4370d8 - 3) {
    var _0x2b6699 = true;
    var _0x46c402 = _0x1c7b18;
    var _0x3114d7 = _0x1ad89d;
    var _0x242a0f = _0x4370d8;
    var _0xcef439 = _0x51e25d;
    _0x1c7b18 += _0x4370d8 - 2;
    var _0x4d6156 = _0x1c7b18;
  } else {
    var _0x2b6699 = false;
    _0x1c7b18 = _0x515596;
    var _0x4d6156 = -1;
  }
  _0x4370d8 = _0x14d405 + WORLD.LSANDX - _0x1c7b18;
  if (_0x290c11 > 0 && _0x2cbc27.isSand === 1) {
    if (world.transition) {
      var _0x5c27e8 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, _0x5c27e8);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x1c7b18, _0x1ad89d, _0x4370d8, _0x51e25d);
  } else {
    if (world.transition) {
      var _0x5c27e8 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(_0x2cbc27.night[0], _0x2cbc27.night[1], _0x2cbc27.night[2], _0x2cbc27.day[0], _0x2cbc27.day[1], _0x2cbc27.day[2], _0x5c27e8);
    } else {
      ctx.fillStyle = _0x2cbc27._color[world.time];
    }
    ctx.fillRect(_0x1c7b18, _0x1ad89d, _0x4370d8, _0x51e25d);
  }
}
function draw_beach_left(_0x45d5dd, _0x2d81a7, _0x4b5357, _0x2a4cd0, _0x247f84, _0x2956e0) {
  var _0x46f0d3 = _0x2a4cd0.w1;
  var _0x1675fa = _0x2a4cd0.w2;
  var _0x46d043 = _0x2a4cd0.w3;
  var _0x4dd63c = user.cam.x + _0x45d5dd - 700;
  var _0x355b5c = Math.max(user.cam.y + _0x2d81a7, 0);
  var _0x15f2d9 = Math.max(-user.cam.y + canh - _0x4b5357 - 100, 0);
  var _0x36f4d7 = _0x355b5c;
  var _0x455150 = canh - _0x355b5c - _0x15f2d9;
  if (_0x2956e0) {
    var _0x77edbe = _0x2a4cd0.t(_0x46f0d3);
  } else {
    var _0x77edbe = _0x46f0d3.r;
  }
  var _0x4131b5 = _0x4dd63c + WORLD.LW1SX;
  var _0x89347c = _0x4131b5;
  var _0x59fdc7 = _0x36f4d7;
  var _0x13f7af = _0x77edbe.x + WORLD.W1SX;
  var _0xe0b941 = _0x455150;
  _0x4131b5 += _0x77edbe.x + WORLD.W1SX - 2;
  var _0x57e764 = _0x4131b5;
  if (_0x2956e0) {
    var _0x77edbe = _0x2a4cd0.t(_0x1675fa);
  } else {
    var _0x77edbe = _0x1675fa.r;
  }
  var _0x599e62 = _0x4dd63c + WORLD.LW2SX - _0x4131b5 + _0x77edbe.x;
  var _0x4133e1 = _0x4131b5;
  var _0x5af99b = _0x36f4d7;
  var _0x288f66 = _0x599e62;
  var _0x181370 = _0x455150;
  _0x4131b5 += _0x599e62 - 2;
  var _0x5c568a = _0x4131b5 - 2;
  if (_0x2956e0) {
    var _0x77edbe = _0x2a4cd0.t(_0x46d043);
  } else {
    var _0x77edbe = _0x46d043.r;
  }
  _0x599e62 = _0x4dd63c + WORLD.LW3SX - _0x4131b5 + _0x77edbe.x;
  if (_0x5c568a < _0x4131b5 + _0x599e62 - 3) {
    var _0x2b5045 = true;
    var _0x36b1a2 = _0x4131b5;
    var _0x5f613c = _0x36f4d7;
    var _0x1cca8e = _0x599e62;
    var _0xff3ba1 = _0x455150;
    _0x4131b5 += _0x599e62 - 2;
    var _0x50ecac = _0x4131b5;
  } else {
    var _0x2b5045 = false;
    _0x4131b5 = _0x5c568a;
    var _0x50ecac = -1;
  }
  _0x599e62 = _0x4dd63c + WORLD.LSANDX - _0x4131b5;
  if (world.transition) {
    var _0x591187 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x591187);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x89347c, _0x59fdc7, _0x13f7af, _0xe0b941);
  if (_0x2956e0) {
    if (world.transition) {
      var _0x591187 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x591187);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else if (world.transition) {
    var _0x591187 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x591187);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x4133e1, _0x5af99b, _0x288f66, _0x181370);
  if (_0x2b5045) {
    if (_0x2956e0) {
      if (world.transition) {
        var _0x591187 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, _0x591187);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else if (world.transition) {
      var _0x591187 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x591187);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
    ctx.fillRect(_0x36b1a2, _0x5f613c, _0x1cca8e, _0xff3ba1);
  }
  if (ui.quality && _0x2956e0) {
    _0x2a4cd0.draw_foams_left(_0x5c568a, _0x50ecac, _0x57e764, _0x4dd63c, -user.cam.y + _0x59fdc7, -user.cam.y + _0x59fdc7 + _0xe0b941);
  }
}
;
function draw_beach_sand_top(_0x4daffe, _0x5e7e58, _0x159591, _0x393008, _0x3c62d0, _0x589e02) {
  var _0x535a81 = _0x393008.w1;
  var _0x423583 = _0x393008.w2;
  var _0x4236e7 = _0x393008.w3;
  var _0x3a72cf = user.cam.y + _0x4daffe - 700;
  var _0x2ee86c = Math.max(user.cam.x + _0x5e7e58, 0);
  var _0x4bdca6 = Math.max(-user.cam.x + canw - _0x159591 - 100, 0);
  var _0x364802 = _0x2ee86c;
  var _0x12f5b3 = canw - _0x2ee86c - _0x4bdca6;
  if (_0x589e02) {
    var _0x3e250b = _0x393008.t(_0x535a81).x;
  } else {
    var _0x3e250b = _0x535a81.r.x;
  }
  var _0x4cc827 = _0x3a72cf + WORLD.LW1SX;
  var _0x5ba6a9 = _0x364802;
  var _0x3aca27 = _0x4cc827;
  var _0x38afa8 = _0x3e250b + WORLD.W1SX;
  var _0x432b91 = _0x12f5b3;
  _0x4cc827 += _0x3e250b + WORLD.W1SX - 2;
  var _0x1995d0 = _0x4cc827;
  if (_0x589e02) {
    var _0x3e250b = _0x393008.t(_0x423583).x;
  } else {
    var _0x3e250b = _0x423583.r.x;
  }
  var _0x23b850 = _0x3a72cf + WORLD.LW2SX - _0x4cc827 + _0x3e250b;
  var _0x475abe = _0x4cc827;
  var _0x4256ed = _0x364802;
  var _0x8f71c4 = _0x23b850;
  var _0x556389 = _0x12f5b3;
  _0x4cc827 += _0x23b850 - 2;
  var _0x337f98 = _0x4cc827 - 2;
  if (_0x589e02) {
    var _0x3e250b = _0x393008.t(_0x4236e7).x;
  } else {
    var _0x3e250b = _0x4236e7.r.x;
  }
  _0x23b850 = _0x3a72cf + WORLD.LW3SX - _0x4cc827 + _0x3e250b;
  if (_0x337f98 < _0x4cc827 + _0x23b850 - 3) {
    var _0x10b0ca = true;
    var _0x32ca44 = _0x4cc827;
    var _0x40e4cc = _0x364802;
    var _0x5f06c1 = _0x23b850;
    var _0x41f980 = _0x12f5b3;
    _0x4cc827 += _0x23b850 - 2;
    var _0x43c248 = _0x4cc827;
  } else {
    var _0x10b0ca = false;
    _0x4cc827 = _0x337f98;
    var _0x43c248 = -1;
  }
  _0x23b850 = _0x3a72cf + WORLD.LSANDX - _0x4cc827;
  if (_0x589e02 > 0 && _0x3c62d0.isSand === 1) {
    if (world.transition) {
      var _0x155817 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, _0x155817);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x364802, _0x4cc827, _0x12f5b3, _0x23b850);
  } else {
    if (world.transition) {
      var _0x155817 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(_0x3c62d0.night[0], _0x3c62d0.night[1], _0x3c62d0.night[2], _0x3c62d0.day[0], _0x3c62d0.day[1], _0x3c62d0.day[2], _0x155817);
    } else {
      ctx.fillStyle = _0x3c62d0._color[world.time];
    }
    ctx.fillRect(_0x364802, _0x4cc827, _0x12f5b3, _0x23b850);
  }
}
;
function draw_beach_top(_0x33a9f6, _0x11a70a, _0x4b2e1f, _0x4437af, _0x3d0d29, _0x3708d1) {
  var _0x389214 = _0x4437af.w1;
  var _0x3e8a28 = _0x4437af.w2;
  var _0x44d5df = _0x4437af.w3;
  var _0x45939b = user.cam.y + _0x33a9f6 - 700;
  var _0x14dcae = Math.max(user.cam.x + _0x11a70a, 0);
  var _0x4ca079 = Math.max(-user.cam.x + canw - _0x4b2e1f - 100, 0);
  var _0x6de150 = _0x14dcae;
  var _0x5283e1 = canw - _0x14dcae - _0x4ca079;
  if (_0x3708d1) {
    var _0x4dbf23 = _0x4437af.t(_0x389214);
  } else {
    var _0x4dbf23 = _0x389214.r;
  }
  var _0x41602c = _0x45939b + WORLD.LW1SX;
  var _0x599191 = _0x6de150;
  var _0x428703 = _0x41602c;
  var _0x1106d8 = _0x4dbf23.x + WORLD.W1SX;
  var _0x422e85 = _0x5283e1;
  _0x41602c += _0x4dbf23.x + WORLD.W1SX - 2;
  var _0x516740 = _0x41602c;
  if (_0x3708d1) {
    var _0x4dbf23 = _0x4437af.t(_0x3e8a28);
  } else {
    var _0x4dbf23 = _0x3e8a28.r;
  }
  var _0x4419a0 = _0x45939b + WORLD.LW2SX - _0x41602c + _0x4dbf23.x;
  var _0x5e08fc = _0x41602c;
  var _0x13a77c = _0x6de150;
  var _0x8ad1a5 = _0x4419a0;
  var _0x523e5e = _0x5283e1;
  _0x41602c += _0x4419a0 - 2;
  var _0x41b9aa = _0x41602c - 2;
  if (_0x3708d1) {
    var _0x4dbf23 = _0x4437af.t(_0x44d5df);
  } else {
    var _0x4dbf23 = _0x44d5df.r;
  }
  _0x4419a0 = _0x45939b + WORLD.LW3SX - _0x41602c + _0x4dbf23.x;
  if (_0x41b9aa < _0x41602c + _0x4419a0 - 3) {
    var _0x8ffe61 = true;
    var _0x7b8083 = _0x41602c;
    var _0x18a0f2 = _0x6de150;
    var _0x504724 = _0x4419a0;
    var _0xefb4f0 = _0x5283e1;
    _0x41602c += _0x4419a0 - 2;
    var _0x39751f = _0x41602c;
  } else {
    var _0x8ffe61 = false;
    _0x41602c = _0x41b9aa;
    var _0x39751f = -1;
  }
  _0x4419a0 = _0x45939b + WORLD.LSANDX - _0x41602c;
  if (world.transition) {
    var _0x523147 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x523147);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x599191, _0x428703, _0x422e85, _0x1106d8);
  if (_0x3708d1) {
    if (world.transition) {
      var _0x523147 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x523147);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else if (world.transition) {
    var _0x523147 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x523147);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x13a77c, _0x5e08fc, _0x523e5e, _0x8ad1a5);
  if (_0x8ffe61) {
    if (_0x3708d1) {
      if (world.transition) {
        var _0x523147 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, _0x523147);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else if (world.transition) {
      var _0x523147 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x523147);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
    ctx.fillRect(_0x18a0f2, _0x7b8083, _0xefb4f0, _0x504724);
  }
  if (ui.quality && _0x3708d1) {
    _0x4437af.draw_foams_top(_0x41b9aa, _0x39751f, _0x516740, _0x45939b, -user.cam.x + _0x599191, -user.cam.x + _0x599191 + _0x422e85);
  }
}
;
function draw_beach_sand_right(_0x265e03, _0x3bc8da, _0x27b0f9, _0xda8fb2, _0x384ba2, _0xa97393) {
  var _0x57d923 = _0xda8fb2.w1;
  var _0x331689 = _0xda8fb2.w2;
  var _0x2eed40 = _0xda8fb2.w3;
  var _0x30a0c8 = user.cam.x + _0x265e03 + 820;
  var _0x54d9b6 = Math.max(user.cam.y + _0x3bc8da, 0);
  var _0x21ddae = Math.max(-user.cam.y + canh - _0x27b0f9 - 100, 0);
  var _0x21883a = _0x54d9b6;
  var _0x133309 = canh - _0x54d9b6 - _0x21ddae;
  if (_0xa97393) {
    var _0x20ab58 = _0xda8fb2.t(_0x57d923).x;
  } else {
    var _0x20ab58 = _0x57d923.r.x;
  }
  var _0x238f36 = _0x30a0c8 + WORLD.LW1SX;
  var _0x469f0c = _0x238f36;
  var _0x455231 = _0x21883a;
  var _0x164e31 = -_0x20ab58 + WORLD.W1SX;
  var _0x3f5f77 = _0x133309;
  _0x238f36 += -_0x20ab58 + WORLD.W1SX + 2;
  var _0x124584 = _0x238f36;
  if (_0xa97393) {
    var _0x20ab58 = _0xda8fb2.t(_0x331689).x;
  } else {
    var _0x20ab58 = _0x331689.r.x;
  }
  var _0x1858b9 = _0x30a0c8 - WORLD.LW2SX - _0x238f36 - _0x20ab58;
  var _0x2b18c2 = _0x238f36;
  var _0x460ace = _0x21883a;
  var _0x1c2e9b = _0x1858b9;
  var _0x281592 = _0x133309;
  _0x238f36 += _0x1858b9 + 2;
  var _0x2cabaf = _0x238f36 - 2;
  if (_0xa97393) {
    var _0x20ab58 = _0xda8fb2.t(_0x2eed40).x;
  } else {
    var _0x20ab58 = _0x2eed40.r.x;
  }
  _0x1858b9 = _0x30a0c8 - WORLD.LW3SX - _0x238f36 - _0x20ab58;
  if (_0x2cabaf > _0x238f36 + _0x1858b9) {
    var _0x2b1058 = true;
    var _0x289210 = _0x238f36;
    var _0x2ba6fc = _0x21883a;
    var _0x227933 = _0x1858b9;
    var _0x5042c8 = _0x133309;
    _0x238f36 += _0x1858b9 + 2;
    var _0x31d511 = _0x238f36;
  } else {
    var _0x2b1058 = false;
    _0x238f36 = _0x2cabaf;
    var _0x31d511 = -1;
  }
  _0x1858b9 = _0x30a0c8 - WORLD.LSANDX - _0x238f36;
  if (_0xa97393 > 0 && _0x384ba2.isSand === 1) {
    if (world.transition) {
      var _0x2a847b = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, _0x2a847b);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x238f36, _0x21883a, _0x1858b9, _0x133309);
  } else {
    if (world.transition) {
      var _0x2a847b = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(_0x384ba2.night[0], _0x384ba2.night[1], _0x384ba2.night[2], _0x384ba2.day[0], _0x384ba2.day[1], _0x384ba2.day[2], _0x2a847b);
    } else {
      ctx.fillStyle = _0x384ba2._color[world.time];
    }
    ctx.fillRect(_0x238f36, _0x21883a, _0x1858b9, _0x133309);
  }
}
;
function draw_beach_right(_0x570820, _0x2811b5, _0x59eaa7, _0x3d9291, _0x9b7bd4, _0x480131) {
  var _0x4f31c6 = _0x3d9291.w1;
  var _0x29fc46 = _0x3d9291.w2;
  var _0x3e1fcb = _0x3d9291.w3;
  var _0x1a830c = user.cam.x + _0x570820 + 820;
  var _0x354c88 = Math.max(user.cam.y + _0x2811b5, 0);
  var _0xa6323 = Math.max(-user.cam.y + canh - _0x59eaa7 - 100, 0);
  var _0x495290 = _0x354c88;
  var _0x5b37de = canh - _0x354c88 - _0xa6323;
  if (_0x480131) {
    var _0x3fae91 = _0x3d9291.t(_0x4f31c6);
  } else {
    var _0x3fae91 = _0x4f31c6.r;
  }
  var _0x43a75c = _0x1a830c + WORLD.LW1SX;
  var _0x53c10f = _0x43a75c;
  var _0x32aabd = _0x495290;
  var _0x408bd1 = -_0x3fae91.x + WORLD.W1SX;
  var _0x1bfbf3 = _0x5b37de;
  _0x43a75c += -_0x3fae91.x + WORLD.W1SX + 2;
  var _0x3dab79 = _0x43a75c;
  if (_0x480131) {
    var _0x3fae91 = _0x3d9291.t(_0x29fc46);
  } else {
    var _0x3fae91 = _0x29fc46.r;
  }
  var _0x3b1ead = _0x1a830c - WORLD.LW2SX - _0x43a75c - _0x3fae91.x;
  var _0xd6a343 = _0x43a75c;
  var _0xfe4fdc = _0x495290;
  var _0x4ef1ee = _0x3b1ead;
  var _0x57ae04 = _0x5b37de;
  _0x43a75c += _0x3b1ead + 2;
  var _0x2ed497 = _0x43a75c - 2;
  if (_0x480131) {
    var _0x3fae91 = _0x3d9291.t(_0x3e1fcb);
  } else {
    var _0x3fae91 = _0x3e1fcb.r;
  }
  _0x3b1ead = _0x1a830c - WORLD.LW3SX - _0x43a75c - _0x3fae91.x;
  if (_0x2ed497 > _0x43a75c + _0x3b1ead) {
    var _0x8f1e4b = true;
    var _0x25be0d = _0x43a75c;
    var _0x297937 = _0x495290;
    var _0x156793 = _0x3b1ead;
    var _0x846dd9 = _0x5b37de;
    _0x43a75c += _0x3b1ead + 2;
    var _0x520b32 = _0x43a75c;
  } else {
    var _0x8f1e4b = false;
    _0x43a75c = _0x2ed497;
    var _0x520b32 = -1;
  }
  _0x3b1ead = _0x1a830c - WORLD.LSANDX - _0x43a75c;
  if (world.transition) {
    var _0x3f3220 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x3f3220);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x53c10f, _0x32aabd, _0x408bd1, _0x1bfbf3);
  if (_0x480131) {
    if (world.transition) {
      var _0x3f3220 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x3f3220);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else if (world.transition) {
    var _0x3f3220 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x3f3220);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0xd6a343, _0xfe4fdc, _0x4ef1ee, _0x57ae04);
  if (_0x8f1e4b) {
    if (_0x480131) {
      if (world.transition) {
        var _0x3f3220 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, _0x3f3220);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else if (world.transition) {
      var _0x3f3220 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x3f3220);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
    ctx.fillRect(_0x25be0d, _0x297937, _0x156793, _0x846dd9);
  }
  if (ui.quality && _0x480131) {
    _0x3d9291.draw_foams_right(_0x2ed497, _0x520b32, _0x3dab79, _0x1a830c, -user.cam.y + _0x32aabd, -user.cam.y + _0x32aabd + _0x1bfbf3);
  }
}
;
function draw_beach_sand_bottom(_0x5f216c, _0x4ece7f, _0x188394, _0x274159, _0x9b3601, _0x2281cc) {
  var _0x1eade7 = _0x274159.w1;
  var _0x1c983c = _0x274159.w2;
  var _0x1b799d = _0x274159.w3;
  var _0x360510 = user.cam.y + _0x5f216c + 710;
  var _0x4b1c82 = Math.max(user.cam.x + _0x4ece7f, 0);
  var _0x3c98ae = Math.max(-user.cam.x + canw - _0x188394 - 100, 0);
  var _0x5494ec = _0x4b1c82;
  var _0x31c65c = canw - _0x4b1c82 - _0x3c98ae;
  if (_0x2281cc) {
    var _0x52050e = _0x274159.t(_0x1eade7).x;
  } else {
    var _0x52050e = _0x1eade7.r.x;
  }
  var _0xc0deb6 = _0x360510 + WORLD.LW1SX;
  var _0x209ab4 = _0xc0deb6;
  var _0x2afa38 = _0x5494ec;
  var _0x5394fb = -_0x52050e + WORLD.W1SX;
  var _0xb7f5ef = _0x31c65c;
  _0xc0deb6 += -_0x52050e + WORLD.W1SX + 2;
  var _0x2a5f65 = _0xc0deb6;
  if (_0x2281cc) {
    var _0x52050e = _0x274159.t(_0x1c983c).x;
  } else {
    var _0x52050e = _0x1c983c.r.x;
  }
  var _0x27635c = _0x360510 - WORLD.LW2SX - _0xc0deb6 - _0x52050e;
  var _0x21114d = _0xc0deb6;
  var _0x4f946c = _0x5494ec;
  var _0x2af9c4 = _0x27635c;
  var _0x3cca05 = _0x31c65c;
  _0xc0deb6 += _0x27635c + 2;
  var _0x1b8dcb = _0xc0deb6 - 2;
  if (_0x2281cc) {
    var _0x52050e = _0x274159.t(_0x1b799d).x;
  } else {
    var _0x52050e = _0x1b799d.r.x;
  }
  _0x27635c = _0x360510 - WORLD.LW3SX - _0xc0deb6 - _0x52050e;
  if (_0x1b8dcb > _0xc0deb6 + _0x27635c) {
    var _0x28808f = true;
    var _0x42bb94 = _0xc0deb6;
    var _0x214896 = _0x5494ec;
    var _0x4d6057 = _0x27635c;
    var _0xc97d78 = _0x31c65c;
    _0xc0deb6 += _0x27635c + 2;
    var _0xcb5425 = _0xc0deb6;
  } else {
    var _0x28808f = false;
    _0xc0deb6 = _0x1b8dcb;
    var _0xcb5425 = -1;
  }
  _0x27635c = _0x360510 - WORLD.LSANDX - _0xc0deb6;
  if (_0x2281cc > 0 && _0x9b3601.isSand === 1) {
    if (world.transition) {
      var _0x5d6dad = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 77, 72, 252, 239, 187, _0x5d6dad);
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x5494ec, _0xc0deb6, _0x31c65c, _0x27635c);
  } else {
    if (world.transition) {
      var _0x5d6dad = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(_0x9b3601.night[0], _0x9b3601.night[1], _0x9b3601.night[2], _0x9b3601.day[0], _0x9b3601.day[1], _0x9b3601.day[2], _0x5d6dad);
    } else {
      ctx.fillStyle = _0x9b3601._color[world.time];
    }
    ctx.fillRect(_0x5494ec, _0xc0deb6, _0x31c65c, _0x27635c);
  }
}
;
function draw_beach_bottom(_0x180194, _0x30c19a, _0x17e57a, _0x2af704, _0x2682be, _0x251f58) {
  var _0x135e34 = _0x2af704.w1;
  var _0x3c388d = _0x2af704.w2;
  var _0x406ed5 = _0x2af704.w3;
  var _0x53af7a = user.cam.y + _0x180194 + 710;
  var _0x1c6e1d = Math.max(user.cam.x + _0x30c19a, 0);
  var _0x4b9d88 = Math.max(-user.cam.x + canw - _0x17e57a - 100, 0);
  var _0x57ef3b = _0x1c6e1d;
  var _0xdbbf2a = canw - _0x1c6e1d - _0x4b9d88;
  if (_0x251f58) {
    var _0x208b0f = _0x2af704.t(_0x135e34);
  } else {
    var _0x208b0f = _0x135e34.r;
  }
  var _0x18a618 = _0x53af7a + WORLD.LW1SX;
  var _0x235d87 = _0x18a618;
  var _0x246994 = _0x57ef3b;
  var _0x2a0c63 = -_0x208b0f.x + WORLD.W1SX;
  var _0x4b8ce7 = _0xdbbf2a;
  _0x18a618 += -_0x208b0f.x + WORLD.W1SX + 2;
  var _0x22cca0 = _0x18a618;
  if (_0x251f58) {
    var _0x208b0f = _0x2af704.t(_0x3c388d);
  } else {
    var _0x208b0f = _0x3c388d.r;
  }
  var _0x265ec8 = _0x53af7a - WORLD.LW2SX - _0x18a618 - _0x208b0f.x;
  var _0x4425d5 = _0x18a618;
  var _0x488f82 = _0x57ef3b;
  var _0x512759 = _0x265ec8;
  var _0x1412a3 = _0xdbbf2a;
  _0x18a618 += _0x265ec8 + 2;
  var _0x55a8e3 = _0x18a618 - 2;
  if (_0x251f58) {
    var _0x208b0f = _0x2af704.t(_0x406ed5);
  } else {
    var _0x208b0f = _0x406ed5.r;
  }
  _0x265ec8 = _0x53af7a - WORLD.LW3SX - _0x18a618 - _0x208b0f.x;
  if (_0x55a8e3 > _0x18a618 + _0x265ec8) {
    var _0x521ab9 = true;
    var _0x5f2e31 = _0x18a618;
    var _0x2fb97e = _0x57ef3b;
    var _0x580141 = _0x265ec8;
    var _0x19a9d4 = _0xdbbf2a;
    _0x18a618 += _0x265ec8 + 2;
    var _0x1e74f6 = _0x18a618;
  } else {
    var _0x521ab9 = false;
    _0x18a618 = _0x55a8e3;
    var _0x1e74f6 = -1;
  }
  _0x265ec8 = _0x53af7a - WORLD.LSANDX - _0x18a618;
  if (world.transition) {
    var _0x33d46e = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x33d46e);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x246994, _0x235d87, _0x4b8ce7, _0x2a0c63);
  if (_0x251f58) {
    if (world.transition) {
      var _0x33d46e = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x33d46e);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else if (world.transition) {
    var _0x33d46e = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x33d46e);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x488f82, _0x4425d5, _0x1412a3, _0x512759);
  if (_0x521ab9) {
    if (_0x251f58) {
      if (world.transition) {
        var _0x33d46e = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(17, 94, 96, 169, 214, 211, _0x33d46e);
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else if (world.transition) {
      var _0x33d46e = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x33d46e);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
    ctx.fillRect(_0x2fb97e, _0x5f2e31, _0x19a9d4, _0x580141);
  }
  if (ui.quality && _0x251f58) {
    _0x2af704.draw_foams_bottom(_0x55a8e3, _0x1e74f6, _0x22cca0, _0x53af7a, -user.cam.x + _0x246994, -user.cam.x + _0x246994 + _0x4b8ce7);
  }
}
;
function draw_world_with_effect() {
  ctx.globalAlpha = 1;
  if (world.transition) {
    var _0x46d66a = world.shade.update();
  }
  world.update_dist_from_biomes(-user.cam.x, -user.cam.y);
  _js = Math.max(Math.floor(-user.cam.x / world.dw) - 5, 0);
  _je = Math.min(Math.floor((-user.cam.x + user.cam.w) / world.dw) + 4, world.nw - 1);
  _is = Math.max(Math.floor(-user.cam.y / world.dh) - 3, 0);
  _ie = Math.min(Math.floor((-user.cam.y + user.cam.h) / world.dh) + 3, world.nh - 1);
  draw_ground();
  draw_world();
  if (ui.quality && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR) {
    draw_desert();
    draw_winter();
    draw_ash();
  }
  if (world.transition) {
    if (_0x46d66a) {
      world.transition = false;
      world.shade.v = 0;
      world.shade.o = false;
    }
  }
}
var ANIMATION_STOP = 0;
var ANIMATION_RUN = 1;
var FOCUS_OUT = 0;
var FOCUS_IN = 1;
var ALIGN_CENTER = 0;
var ALIGN_LEFT = 1;
var STYLE_RETRO = 0;
var STYLE_FLAT = 1;
var KEYDOWN = 0;
var KEYPRESS = 1;
var GET_KEY_OUT = 0;
var GET_KEY_IN = 1;
var MOUSE_MOVE = 0;
var MOUSE_DOWN = 1;
var MOUSE_UP = 2;
var BUTTON_OUT = 0;
var BUTTON_IN = 1;
var BUTTON_CLICK = 2;
function gui_disable_antialiasing(_0x52488a) {
  _0x52488a.imageSmoothingEnabled = false;
  _0x52488a.webkitImageSmoothingEnabled = false;
  _0x52488a.mozImageSmoothingEnabled = false;
  _0x52488a.msImageSmoothingEnabled = false;
  _0x52488a.oImageSmoothingEnabled = false;
}
function get_mouse_pos(_0x276d06, _0x594ac4) {
  var _0x5d4bc1 = _0x276d06.getBoundingClientRect();
  return {
    x: _0x594ac4.clientX - _0x5d4bc1.left,
    y: _0x594ac4.clientY - _0x5d4bc1.top
  };
}
function gui_render_text(_0x320ebd, _0x36dc7b, _0x10a33e, _0x3a4680, _0x1173bc, _0x3d5cc0, _0x1ce7b8, _0x5de53b, _0x1e6e0d, _0x441350, _0x10ae1f, _0x3e75c8, _0x1c5a56, _0x27efe5, _0x5d8f7c) {
  if (_0x320ebd.length === 0) {
    _0x320ebd = " ";
  }
  if (_0x1ce7b8 === undefined) {
    _0x1ce7b8 = 0;
  }
  if (_0x5de53b === undefined) {
    _0x5de53b = 0;
  }
  if (_0x1e6e0d === undefined) {
    _0x1e6e0d = 0;
  }
  if (_0x27efe5 === undefined) {
    _0x27efe5 = 0;
  }
  var _0x163f39 = document.createElement("canvas");
  var _0xcebf9 = _0x163f39.getContext("2d");
  _0xcebf9.textBaseline = "middle";
  _0xcebf9.font = (_0x5d8f7c !== undefined ? _0x5d8f7c + " " : "") + _0x3a4680 + "px " + _0x36dc7b;
  if (_0x1173bc !== undefined) {
    _0x1173bc = Math.min(_0xcebf9.measureText(_0x320ebd).width, _0x1173bc);
  } else {
    _0x1173bc = _0xcebf9.measureText(_0x320ebd).width;
  }
  _0x163f39.width = _0x1173bc + _0x1ce7b8;
  _0x163f39.height = _0x3a4680 + _0x5de53b;
  if (_0x3d5cc0 !== undefined) {
    if (_0x10ae1f !== undefined) {
      _0xcebf9.globalAlpha = _0x10ae1f;
    }
    _0xcebf9.fillStyle = _0x3d5cc0;
    if (_0x3e75c8 !== undefined) {
      roundRect(_0xcebf9, _0x1e6e0d + 2, _0x1e6e0d, _0x1173bc + _0x1ce7b8 - _0x1e6e0d * 2 - 4, _0x3a4680 + _0x5de53b - _0x1e6e0d * 2, _0x3e75c8);
      _0xcebf9.fill();
    } else {
      _0xcebf9.fillRect(_0x1e6e0d, _0x1e6e0d, _0x1173bc + _0x1ce7b8 - _0x1e6e0d * 2, _0x3a4680 + _0x5de53b - _0x1e6e0d * 2);
    }
    _0xcebf9.globalAlpha = 1;
    if (_0x1e6e0d !== 0) {
      _0xcebf9.lineWidth = _0x1e6e0d;
      _0xcebf9.strokeStyle = _0x441350;
      _0xcebf9.stroke();
    }
  }
  _0xcebf9.textBaseline = "middle";
  _0xcebf9.font = (_0x5d8f7c !== undefined ? _0x5d8f7c + " " : "") + _0x3a4680 + "px " + _0x36dc7b;
  if (_0x1c5a56 !== undefined) {
    _0xcebf9.strokeStyle = _0x1c5a56;
    _0xcebf9.lineWidth = _0x27efe5;
    _0xcebf9.lineJoin = "miter";
    _0xcebf9.miterLimit = 2;
    _0xcebf9.strokeText(_0x320ebd, Math.floor(_0x1ce7b8 / 2), Math.floor(_0x5de53b / 2) + Math.floor(_0x3a4680 / 2), _0x1173bc);
  }
  _0xcebf9.fillStyle = _0x10a33e;
  _0xcebf9.fillText(_0x320ebd, Math.floor(_0x1ce7b8 / 2), Math.floor(_0x5de53b / 2) + Math.floor(_0x3a4680 / 2), _0x1173bc);
  _0x163f39.w2 = _0x163f39.width / 2;
  _0x163f39.h2 = _0x163f39.height / 2;
  return _0x163f39;
}
;
function gui_create_button(_0xbea30, _0xee5107, _0x5343de, _0x12d04e, _0x304e14, _0x309a9a, _0x39087e, _0x2735b2, _0x1d7c25, _0xa8ae43, _0xf6daf6) {
  if (_0x1d7c25 === undefined) {
    _0x1d7c25 = 0;
  }
  if (_0x2735b2 === undefined) {
    _0x2735b2 = 0;
  }
  if (_0xa8ae43 === undefined) {
    _0xa8ae43 = 0;
  }
  if (_0xf6daf6 === undefined) {
    _0xf6daf6 = 1;
  }
  _0x304e14 = _0x304e14 === 3 ? 3 : _0x304e14 === 1 ? 2 : 1;
  if (_0x309a9a !== 1) {
    _0x309a9a = 0;
  }
  if (_0x12d04e) {
    var _0x3d0f20 = _0x12d04e;
  }
  var _0x307d5f = {
    width: _0xbea30,
    height: _0xee5107,
    img: _0x3d0f20,
    state: BUTTON_OUT,
    translate: {
      x: _0x2735b2,
      y: _0x1d7c25,
      _x: _0x2735b2,
      _y: _0x1d7c25
    },
    enable_breath: _0x309a9a,
    breath: 0,
    callback: _0x39087e,
    position: _0xa8ae43,
    active: _0xf6daf6
  };
  function _0x159d01() {
    return _0x307d5f.img[_0x307d5f.state];
  }
  function _0x5209bc(_0x38a7ae) {
    var _0x5d7423 = _0x307d5f.translate;
    if (_0x307d5f.width === 0 || _0x307d5f.height === 0) {
      _0x307d5f.width = _0x307d5f.img[0].width;
      _0x307d5f.height = _0x307d5f.img[0].height;
    }
    return _0x38a7ae.x > _0x5d7423.x && _0x38a7ae.x < _0x5d7423.x + _0x307d5f.width / _0x304e14 && _0x38a7ae.y > _0x5d7423.y && _0x38a7ae.y < _0x5d7423.y + _0x307d5f.height / _0x304e14;
  }
  function _0x179891(_0x687712, _0x25ded4, _0x4df163) {
    if (_0x5209bc(_0x25ded4)) {
      if (_0x4df163 == MOUSE_DOWN) {
        _0x307d5f.state = BUTTON_CLICK;
      } else if (_0x4df163 == MOUSE_UP) {
        _0x307d5f.state = BUTTON_IN;
      } else if (_0x4df163 == MOUSE_MOVE && _0x307d5f.state != BUTTON_CLICK) {
        _0x307d5f.state = BUTTON_IN;
      }
      return true;
    }
    _0x307d5f.state = BUTTON_OUT;
    return false;
  }
  function _0x309a9a() {
    var _0x4b431c = 0;
    if (_0x307d5f.enable_breath === 1) {
      if (_0x307d5f.state === BUTTON_IN || _0x307d5f.state === BUTTON_CLICK) {
        _0x307d5f.breath = (_0x307d5f.breath + delta * 1000) % 1000;
      } else if (_0x307d5f.breath > 0) {
        _0x307d5f.breath = _0x307d5f.breath > 500 ? _0x307d5f.breath + delta * 1000 : _0x307d5f.breath - delta * 1000;
        if (_0x307d5f.breath < 0 || _0x307d5f.breath > 1000) {
          _0x307d5f.breath = 0;
        }
      }
      _0x4b431c = Utils.ease_in_out_quad(_0x307d5f.breath > 500 ? (1000 - _0x307d5f.breath) / 500 : _0x307d5f.breath / 500) * 0.2;
    }
    return _0x4b431c;
  }
  var _0x454426;
  if (_0x304e14 === 2) {
    _0x454426 = function (_0x5188e1) {
      var _0x53d49c = 1 + _0x309a9a();
      var _0x1c66c9 = _0x159d01();
      var _0x4ed44e = _0x307d5f.width * _0x53d49c / 2;
      var _0x5322ec = _0x307d5f.height * _0x53d49c / 2;
      var _0x59fc87 = (_0x4ed44e - _0x307d5f.width / 2) / 2;
      var _0x399bb5 = (_0x5322ec - _0x307d5f.height / 2) / 2;
      ctxDrawImage(_0x5188e1, _0x1c66c9, _0x307d5f.translate.x - _0x59fc87, _0x307d5f.translate.y - _0x399bb5, _0x4ed44e, _0x5322ec);
    };
  } else if (_0x304e14 === 3) {
    _0x454426 = function (_0x26bab0) {
      var _0x11a905 = _0x159d01();
      var _0x44730b = _0x307d5f.width;
      var _0x28f511 = _0x307d5f.height;
      var _0x3999f4 = (_0x44730b - _0x307d5f.width) / 2;
      var _0x29b517 = (_0x28f511 - _0x307d5f.height) / 2;
      ctxDrawImage(_0x26bab0, _0x11a905, _0x307d5f.translate.x - _0x3999f4, _0x307d5f.translate.y - _0x29b517, _0x44730b, _0x28f511);
    };
    _0x304e14 = 1;
  } else {
    _0x454426 = function (_0x10004d) {
      var _0x36b4e9 = _0x159d01();
      ctxDrawImage(_0x10004d, _0x36b4e9, _0x307d5f.translate.x, _0x307d5f.translate.y);
    };
  }
  return {
    info: _0x307d5f,
    trigger: _0x179891,
    draw: _0x454426,
    in_button: _0x5209bc
  };
}
function gui_create_image_hd(_0x26b284, _0x408159, _0x52f67b, _0x3494e7, _0x4f94b5) {
  var _0x15d205 = {
    x: _0x52f67b,
    y: _0x3494e7,
    _x: _0x52f67b,
    _y: _0x3494e7
  };
  function _0x501598(_0x573409) {
    ctxDrawImage(_0x573409, _0x26b284, _0x15d205.x, _0x15d205.y, _0x26b284.width / 2, _0x26b284.height / 2);
  }
  return {
    translate: _0x15d205,
    draw: _0x501598,
    active: _0x408159,
    position: _0x4f94b5
  };
}
function gui_create_image(_0x227a11) {
  var _0x30ac2a = {
    x: 0,
    y: 0
  };
  function _0x4c6618(_0x53314b) {
    ctxDrawImage(_0x53314b, _0x227a11, _0x30ac2a.x, _0x30ac2a.y);
  }
  return {
    img: _0x227a11,
    translate: _0x30ac2a,
    draw: _0x4c6618
  };
}
function gui_create_animation(_0x43fbcc, _0x274f06) {
  if (_0x274f06 === undefined) {
    _0x274f06 = 0.033;
  }
  var _0x272ee1 = {
    x: 0,
    y: 0
  };
  var _0x530d53 = 0;
  var _0x518ecc = 0;
  function _0x43b35e() {
    _0x518ecc += delta;
    if (_0x518ecc > _0x274f06) {
      _0x530d53 = (_0x530d53 + 1) % _0x43fbcc.length;
      _0x518ecc -= _0x274f06;
    }
    return _0x43fbcc[_0x530d53];
  }
  function _0x14d313(_0x47c53f) {
    ctxDrawImage(_0x47c53f, _0x43b35e(), _0x272ee1.x, _0x272ee1.y);
  }
  return {
    img: _0x43fbcc,
    translate: _0x272ee1,
    draw: _0x14d313
  };
}
function gui_add_breath_effect(_0x36da3a, _0xad8992, _0x4726bb, _0x226014, _0x491730, _0x1eed7b, _0x3f759e) {
  _0x36da3a.end = _0xad8992;
  _0x36da3a.start = _0x4726bb;
  _0x36da3a.speed_start = _0x226014;
  _0x36da3a.speed_end = _0x491730;
  _0x36da3a.width = _0x36da3a.img.width;
  _0x36da3a.height = _0x36da3a.img.height;
  _0x36da3a.scale = (_0xad8992 + _0x4726bb) / 2;
  _0x36da3a.breath = false;
  _0x36da3a.draw = function (_0x473e4e) {
    _0x36da3a.translate.x = canw2 - _0x36da3a.width / 2;
    ctxDrawImage(_0x473e4e, _0x36da3a.img, 0, 0, _0x36da3a.img.width, _0x36da3a.img.height, _0x36da3a.translate.x, _0x36da3a.translate.y, _0x36da3a.width, _0x36da3a.height);
  };
}
function gui_breath_effect(_0x27766d) {
  _0x27766d.scale += _0x27766d.breath ? delta / _0x27766d.speed_start : -delta / _0x27766d.speed_end;
  if (_0x27766d.scale > _0x27766d.end) {
    _0x27766d.breath = false;
  } else if (_0x27766d.scale < _0x27766d.start) {
    _0x27766d.breath = true;
  }
}
var SENDWORD = "send";
var SHOW_ID = Utils.getURLData("id") === "1" ? 1 : 0;
var PASSWORD = Utils.getURLData("password");
var RIVET_API = "https://api.eg.rivet.gg";
var STATE = {
  DELETE: 1,
  HURT: 2,
  COLD: 4,
  HUNGER: 8,
  ATTACK: 16,
  WALK: 32,
  IDLE: 64,
  HEAL: 128,
  WEB: 256
};
var KIT = [{
  price: 1000,
  items: [[2, INV.FIRE], [1, INV.COOKED_MEAT], [8, INV.PLANT], [1, INV.BREAD]]
}, {
  price: 2000,
  items: [[2, INV.BIG_FIRE], [1, INV.PICK_WOOD], [2, INV.COOKED_MEAT], [16, INV.PLANT], [2, INV.BREAD]]
}, {
  price: 4000,
  items: [[3, INV.BIG_FIRE], [1, INV.PICK], [4, INV.COOKED_MEAT], [20, INV.PLANT], [4, INV.BREAD], [1, INV.WORKBENCH], [80, INV.STONE], [140, INV.WOOD]]
}, {
  price: 8000,
  items: [[1, INV.BAG], [4, INV.BIG_FIRE], [1, INV.PICK_GOLD], [6, INV.COOKED_MEAT], [30, INV.PLANT], [6, INV.BREAD], [1, INV.WORKBENCH], [150, INV.STONE], [200, INV.WOOD], [60, INV.GOLD], [2, INV.BOTTLE_FULL]]
}, {
  price: 16000,
  items: [[1, INV.BAG], [1, INV.PICK_DIAMOND], [1, INV.BED], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [2, INV.BIG_FIRE], [1, INV.FURNACE], [15, INV.STONE_WALL], [2, INV.STONE_DOOR], [1, INV.TOTEM], [1, INV.SPANNER], [200, INV.STONE], [300, INV.WOOD]]
}, {
  price: 16000,
  items: [[1, INV.BAG], [1, INV.COAT], [1, INV.SHOVEL_GOLD], [1, INV.PICK_GOLD], [10, INV.CAKE], [4, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.BOOK], [200, INV.STONE], [300, INV.WOOD]]
}, {
  price: 16000,
  items: [[1, INV.BAG], [1, INV.HOOD], [1, INV.HAMMER_GOLD], [3, INV.BANDAGE], [1, 0], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [150, INV.STONE], [200, INV.WOOD], [1, INV.LOCKPICK]]
}, {
  price: 16000,
  items: [[1, INV.BAG], [1, INV.PEASANT], [1, INV.PICK_GOLD], [7, INV.CAKE], [2, INV.BOTTLE_FULL], [4, INV.BIG_FIRE], [2, INV.WINDMILL], [4, INV.BREAD_OVEN], [10, INV.PLOT], [6, INV.WHEAT_SEED], [4, INV.SEED], [1, INV.WATERING_CAN_FULL], [500, INV.WOOD]]
}, {
  price: 16000,
  items: [[1, INV.BAG], [1, INV.PICK_GOLD], [16, INV.FOODFISH_COOKED], [1, INV.BOTTLE_FULL], [6, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.DIVING_MASK], [1, INV.SWORD], [16, INV.BRIDGE], [150, INV.STONE], [200, INV.WOOD]]
}, {
  price: 20000,
  items: [[1, INV.BAG], [1, INV.PICK_GOLD], [1, INV.CAKE], [1, INV.BOTTLE_FULL], [3, INV.BIG_FIRE], [3, INV.BANDAGE], [1, INV.GOLD_HELMET], [1, INV.SWORD_GOLD], [1, INV.DIAMOND_SPEAR], [2, INV.GOLD_SPIKE], [50, INV.STONE], [100, INV.WOOD]]
}];
var CLIENT = {
  VERSION_NUMBER: 52,
  TIMEOUT_TIME: 2000,
  TIMEOUT_NUMBER: 3,
  PING: "[13]",
  PING_DELAY: 60000,
  ROTATE: 0.2,
  ATTACK: 0.2,
  SLOW_ATTACK: 0.58,
  CAM_DELAY: 50,
  MUTE_DELAY: 125000,
  TIMEOUT_SERVER: 600000,
  WAITING_FOR_SERVER: 8000,
  DELAY_CONNECTION_UPDATE: 5,
  LAG_DISTANCE: 200,
  LOOSE_FOCUS: 15,
  TOKEN_LEN: 14,
  TEAM_MANAGE: 0,
  TEAM_SHOW: 1,
  TEAM_LEAVE: 2,
  TEAM_JOIN: 3,
  TEAM_FULL: 4,
  SKIN_MAX: 20,
  ACCESSORY_MAX: 14,
  SYMBOL_MAX: 4
};
function NetworkClient() {
  var _0xc72bea = this;
  this.socket = null;
  this._current_id = 0;
  this.server_list = [];
  this.mode_list = [[], [], [], [], [], [], [], [], []];
  this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
  this.current_mode = 0;
  this.privateServer = 0;
  this.get_rivet_token = async function () {
    if (environment == environments.DEV) {
      let _0xc400f0 = await fetch(DB + "rivet-token");
      return await _0xc400f0.text();
    } else {
      return null;
    }
  };
  this.fetch_server_list = async function () {
    let _0x6accb8 = await this.get_rivet_token();
    let _0x279a36 = {};
    if (_0x6accb8) {
      _0x279a36.Authorization = "Bearer " + _0x6accb8;
    }
    let _0xf6d33f = await fetch(RIVET_API + "/matchmaker/lobbies/list", {
      method: "GET",
      headers: _0x279a36
    });
    if (!_0xf6d33f.ok) {
      console.error("Failed to list lobbies");
      throw "Failed to list lobbies";
    }
    let _0x49fda1 = await _0xf6d33f.json();
    console.log("Lobbies", _0x49fda1);
    this.server_list = [];
    let _0x91c404 = {};
    for (let _0x5ad3f8 of _0x49fda1.game_modes) {
      this.server_list.push({
        a: "Auto Select",
        gm: _0x5ad3f8.game_mode_id,
        m: 100,
        nu: 0,
        auto: true
      });
    }
    for (let _0x424240 of _0x49fda1.lobbies) {
      let _0xb3cb03 = _0x424240.game_mode_id;
      let _0x195a06;
      if (_0xb3cb03 in _0x91c404) {
        _0x195a06 = ++_0x91c404[_0xb3cb03];
      } else {
        _0x195a06 = _0x91c404[_0xb3cb03] = 1;
      }
      let _0x470bc9 = _0x49fda1.regions.find(_0x1e0ee6 => _0x1e0ee6.region_id == _0x424240.region_id);
      this.server_list.push({
        a: _0x470bc9.region_display_name + " " + _0x195a06,
        gm: _0x424240.game_mode_id,
        idx: _0x195a06,
        m: _0x424240.max_players_normal,
        nu: _0x424240.total_player_count,
        id: _0x424240.lobby_id
      });
    }
  };
  this.geolocate_server = function (_0x1b8d84) {
    var _0x215f56 = [];
    for (var _0x1dac6d = 0; _0x1dac6d < _0x1b8d84.length; _0x1dac6d++) {
      if (_0x1b8d84[_0x1dac6d].a.indexOf(TZ) !== -1) {
        _0x215f56.push(_0x1dac6d);
      }
    }
    if (_0x215f56.length === 0) {
      return 0;
    }
    return _0x215f56[Math.floor(Math.random() * _0x215f56.length)];
  };
  this.set_server_list = function (_0x4885dc) {
    var _0x1c92f6 = 0;
    for (var _0x938927 = 0; _0x938927 < _0x4885dc.length; _0x938927++) {
      _0x1c92f6 += _0x4885dc[_0x938927].nu;
    }
    var _0x4e6dcc = document.getElementById("servselect");
    if (client.selected_server[client.current_mode] === -1) {
      client.selected_server[client.current_mode] = _0x4e6dcc.selectedIndex = client.geolocate_server(_0x4885dc);
    } else {
      _0x4e6dcc.selectedIndex = client.selected_server[client.current_mode];
    }
    var _0x1805c4 = "<label for=\"ul-id\"><button type=\"button\" class=\"ng-binding\">" + _0x4885dc[_0x4e6dcc.selectedIndex].a + (_0x4885dc[_0x4e6dcc.selectedIndex].nu > 0 ? " [" + _0x4885dc[_0x4e6dcc.selectedIndex].nu + " " + LANG[TEXT.PLAYERS] + "]" : "") + "</button></label><ul role=\"listbox\" id=\"ul-id\" class=\"md-whiteframe-z1\" name=\"ul-id\"><li role=\"option\" id=\"selectDisabled\">" + LANG[TEXT.CHOOSE] + " (" + this.total_players + ") " + LANG[TEXT.TOTAL_PLAYERS] + "</li>";
    for (var _0x938927 = 0; _0x938927 < _0x4885dc.length; _0x938927++) {
      _0x1805c4 += "<li role=\"option\">" + _0x4885dc[_0x938927].a;
      _0x1805c4 += " [" + _0x4885dc[_0x938927].nu + " " + LANG[TEXT.PLAYERS] + "]";
      _0x1805c4 += "</li>\n";
    }
    _0x1805c4 += "<li role=\"option\" id=\"selectDisabled\">(" + _0x1c92f6 + ") " + LANG[TEXT.TOTAL_MODE] + "</li>";
    _0x1805c4 += "</div>";
    _0x4e6dcc.innerHTML = _0x1805c4;
    $(".md-select").on("click", function () {
      $(this).toggleClass("active");
    });
    $(".md-select ul li").on("click", function () {
      var _0x5b4e42 = $(this).text();
      var _0x5b9634 = -1;
      var _0x4124b5 = client.mode_list[client.current_mode];
      for (var _0x2c5839 = 0; _0x2c5839 < _0x4124b5.length; _0x2c5839++) {
        if (_0x4124b5[_0x2c5839].a + " [" + _0x4124b5[_0x2c5839].nu + " " + LANG[TEXT.PLAYERS] + "]" === _0x5b4e42) {
          _0x5b9634 = _0x2c5839;
          break;
        }
      }
      if (_0x5b9634 === -1) {
        return;
      }
      document.getElementById("servselect").selectedIndex = _0x5b9634;
      client.selected_server[client.current_mode] = _0x5b9634;
      $(".md-select ul li").removeClass("active");
      $(this).addClass("active");
      $(".md-select label button").text(_0x5b4e42);
    });
  };
  this.total_players = 0;
  this.update_server_list = function () {
    this.total_players = 0;
    for (var _0x12285d = 0; _0x12285d < client.server_list.length; _0x12285d++) {
      if (this.server_list[_0x12285d].gm == "experimental") {
        this.mode_list[WORLD.MODE_EXPERIMENTAL].push(this.server_list[_0x12285d]);
      } else if (this.server_list[_0x12285d].gm == "zombies") {
        this.mode_list[WORLD.MODE_ZOMBIES].push(this.server_list[_0x12285d]);
      } else if (this.server_list[_0x12285d].gm == "forest") {
        this.mode_list[WORLD.MODE_LEGACY].push(this.server_list[_0x12285d]);
      } else if (this.server_list[_0x12285d].gm == "battle-royale") {
        this.mode_list[WORLD.MODE_BR].push(this.server_list[_0x12285d]);
      } else if (this.server_list[_0x12285d].gm == "vampires") {
        this.mode_list[WORLD.MODE_VAMPIRES].push(this.server_list[_0x12285d]);
      } else {
        this.mode_list[WORLD.MODE_PVP].push(this.server_list[_0x12285d]);
      }
      this.total_players += this.server_list[_0x12285d].nu;
    }
    for (_0x12285d = 0; _0x12285d < this.mode_list.length; _0x12285d++) {
      if (this.mode_list[_0x12285d].length === 0) {
        this.mode_list[_0x12285d].push({
          a: LANG[TEXT.COMMING_SOON],
          nu: 0,
          i: "127.0.0.1",
          p: 80
        });
      }
    }
    this.set_server_list(this.mode_list[0]);
    this.select_gamemode = function (_0x3bdd57) {
      client.current_mode = _0x3bdd57;
      client.set_server_list(client.mode_list[client.current_mode]);
      client.set_server_list(client.mode_list[client.current_mode]);
      document.getElementById("servselect").selectedIndex = client.current_mode;
    };
  };
  this.timeout_server = 0;
  this.timeout_number = 0;
  this.timeout_handler = null;
  this.timeout = function () {
    _0xc72bea.timeout_number++;
    _0xc72bea.socket.close();
    if (_0xc72bea.timeout_number > CLIENT.TIMEOUT_NUMBER) {
      ___adsvid = 1;
      ui.error_level = CLIENT.ERROR_REFUSED;
      _0xc72bea.new_alert(LANG[TEXT.YOU_CANNOT_JOIN]);
      ui.waiting = false;
      if (user.reconnect.enabled) {
        game.quit(ui.run);
      }
    } else {
      _0xc72bea.connect_timeout();
    }
  };
  this.kick = function (_0x3be33f) {
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    this.new_alert(LANG[TEXT.KICKED] + _0x3be33f);
    game.quit(ui.run);
  };
  this.mute = function () {
    this.new_alert("You speak too much");
  };
  this.already_used_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.KEY_ALREADY]);
    ui.waiting = false;
  };
  this.hide_shop_kit = function () {
    user.shop.open = false;
  };
  this.hide_recipe_book = function () {
    game.show_recipe_book = 0;
  };
  this.hide_clock = function () {
    game.show_clock = 0;
  };
  this.sand_tempest = function (_0x45d963) {
    user.desert.tempest = _0x45d963;
    if (world.dist_desert > -300) {
      if (_0x45d963 === 0) {
        this.new_alert(LANG[TEXT.TEMPEST_OFF]);
      } else {
        this.new_alert(LANG[TEXT.TEMPEST_ON]);
      }
    }
  };
  this.bandage = function (_0xd3890c) {
    user.bandage = _0xd3890c;
  };
  this.blizzard_status = function (_0xf4f340) {
    user.blizzard = _0xf4f340;
  };
  this.blizzard = function (_0x2aa8d6) {
    user.winter.tempest = _0x2aa8d6;
    if (world.dist_winter > -300) {
      if (_0x2aa8d6 === 0) {
        this.new_alert(LANG[TEXT.BLIZZARD_OFF]);
      } else {
        this.new_alert(LANG[TEXT.BLIZZARD_ON]);
      }
    }
  };
  this.explorer_quest = function (_0x24e9e8) {
    if (_0x24e9e8 === 0) {
      document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
    } else if (_0x24e9e8 === 1) {
      document.getElementById("exploreWinter").src = "img/winter-flake-ok.png";
    } else if (_0x24e9e8 === 2) {
      document.getElementById("exploreLava").src = "img/lava-volcano-ok.png";
    } else if (_0x24e9e8 === 3) {
      document.getElementById("exploreDesert").src = "img/desert-cactus-ok.png";
    }
  };
  this.hide_market = function () {
    game.show_market = 0;
  };
  this.hide_quest = function () {
    game.show_quest = 0;
  };
  this.clean_inventory = function () {
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.id = -1;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  };
  this.wrong_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert();
    ui.waiting = false;
  };
  this.commands = function (_0x53b447) {
    for (var _0xf047f = 0; _0xf047f < _0x53b447.length; _0xf047f++) {
      if (typeof _0x53b447[_0xf047f] === "string") {
        _0x53b447[_0xf047f] = Utils.escape_html(_0x53b447[_0xf047f]);
      }
    }
    user.terminal.write_command(_0x53b447[1], _0x53b447[2], _0x53b447[3], _0x53b447[4]);
  };
  this.message = function (_0x470759) {
    this.new_alert(_0x470759);
  };
  this.wrong_password = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.WRONG_PASSWORD]);
    ui.waiting = false;
  };
  this.new_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.NEW_VERSION]);
    ui.waiting = false;
  };
  this.old_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.OLD_VERSION]);
    ui.waiting = false;
  };
  this.get_bag = function () {
    user.inv.update_bag_size(1, 0);
    game.update_inv_buttons();
  };
  this.verified_account = function (_0x2138e8) {
    var _0x45b172 = _0x2138e8[1];
    var _0x56c9ef = world.players[_0x45b172];
    _0x56c9ef.skin = _0x2138e8[2];
    _0x56c9ef.accessory = _0x2138e8[3];
    _0x56c9ef.baglook = _0x2138e8[4];
    _0x56c9ef.book = _0x2138e8[5];
    _0x56c9ef.crate = _0x2138e8[6];
    _0x56c9ef.dead = _0x2138e8[7];
    _0x56c9ef.level = _0x2138e8[8];
    var _0x272c9c = world.fast_units[_0x45b172 * world.max_units];
    if (_0x272c9c) {
      _0x272c9c.skin = _0x2138e8[2];
      _0x272c9c.accessory = _0x2138e8[3];
      _0x272c9c.baglook = _0x2138e8[4];
      _0x272c9c.book = _0x2138e8[5];
    }
  };
  this.build_stop = function (_0x4a584f) {
    if (_0x4a584f === INV.BAG) {
      user.inv.update_bag_size(1, 0);
      game.update_inv_buttons();
    } else {
      this.gather([0, _0x4a584f, 1]);
    }
    user.craft.restart();
  };
  this.recycle_ok = function (_0x1128a2) {
    user.auto_feed.delay = 0;
    user.craft.do_recycle(_0x1128a2);
  };
  this.recycle_stop = function (_0x24e766) {
    var _0x3bcaf8 = RECIPES[_0x24e766].r;
    for (var _0xf7b98d = 0; _0xf7b98d < _0x3bcaf8.length; _0xf7b98d++) {
      if (user.inv.max > user.inv.can_select.length || user.inv.n[_0x3bcaf8[_0xf7b98d][0]] > 0) {
        var _0x8c092 = Math.floor(_0x3bcaf8[_0xf7b98d][1] * 0.8);
        if (!_0x8c092) {
          continue;
        }
        this.gather([0, _0x3bcaf8[_0xf7b98d][0], _0x8c092]);
      }
    }
    user.craft.restart();
  };
  this.build_ok = function (_0x7207e7) {
    user.auto_feed.delay = 0;
    user.craft.do_craft(_0x7207e7);
  };
  this.new_alert = function (_0x349dc4) {
    if (!user.alert.text) {
      user.alert.text = _0x349dc4;
    } else if (_0x349dc4 !== user.alert.text && _0x349dc4 !== user.alert.list[user.alert.list.length - 1]) {
      user.alert.list.push(_0x349dc4);
    }
  };
  this.no_resources = function () {
    this.new_alert(LANG[TEXT.NO_MORE_RESOURCES]);
  };
  this.survive = function () {
    var _0x3a0603;
    if (user.day == 0) {
      _0x3a0603 = LANG[TEXT.SURVIVED_1DAY];
    } else {
      _0x3a0603 = LANG[TEXT.SURVIVED] + (user.day + 1) + LANG[TEXT.DAYS];
    }
    this.new_alert(_0x3a0603);
    user.day++;
  };
  this.fail_restore = function () {
    clearTimeout(_0xc72bea.timeout_handler);
    user.reconnect.enabled = false;
    user.alive = false;
    this.new_alert(LANG[TEXT.DEAD_SAD]);
    game.quit(ui.run);
    this.socket.close();
  };
  this.blocked = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME]);
    ui.waiting = false;
  };
  this.full = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME2]);
    ui.waiting = false;
  };
  this.new_player = function (_0x17adb8) {
    var _0x334e9f = _0x17adb8[1];
    var _0x2557f5 = world.players;
    _0x2557f5[_0x334e9f].nickname = _0x17adb8[2];
    _0x2557f5[_0x334e9f].skin = _0x17adb8[3];
    _0x2557f5[_0x334e9f].accessory = _0x17adb8[4];
    _0x2557f5[_0x334e9f].baglook = _0x17adb8[5];
    _0x2557f5[_0x334e9f].book = _0x17adb8[6];
    _0x2557f5[_0x334e9f].crate = _0x17adb8[7];
    _0x2557f5[_0x334e9f].dead = _0x17adb8[8];
    _0x2557f5[_0x334e9f].level = _0x17adb8[9];
    _0x2557f5[_0x334e9f].score = 0;
    _0x2557f5[_0x334e9f].ldb_label = null;
    _0x2557f5[_0x334e9f].label = null;
    _0x2557f5[_0x334e9f].label_winter = null;
    _0x2557f5[_0x334e9f].alive = true;
    if (SHOW_ID === 1) {
      _0x2557f5[_0x334e9f].nickname += "|" + _0x334e9f;
    }
  };
  this.get_focus = function () {
    this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([11]));
  };
  this.empty_res = function () {
    this.new_alert(LANG[TEXT.EMPTY]);
  };
  this.inv_full = function () {
    this.new_alert(LANG[TEXT.INV_FULL]);
  };
  this.choose_kit = function (_0x36dfa6) {
    this.socket[SENDWORD](WINDOW3[JSONWORD7].stringify([21, _0x36dfa6]));
    user.shop.open = false;
  };
  this.kit_ok = function (_0x59a7f8) {
    var _0x2120da = KIT[_0x59a7f8 - 1].items;
    for (var _0x5ee1f2 = 0; _0x5ee1f2 < _0x2120da.length && user.inv.max > user.inv.can_select.length; _0x5ee1f2++) {
      var _0x3eb350 = _0x2120da[_0x5ee1f2][1];
      var _0x25640e = _0x2120da[_0x5ee1f2][0];
      if (_0x2120da[_0x5ee1f2][1] === INV.BAG) {
        user.inv.update_bag_size(1, 0);
      } else {
        this.gather([0, _0x3eb350, _0x25640e]);
      }
    }
  };
  this.gather = function (_0xf513ff) {
    var _0x1cebdc = _0xf513ff.length;
    var _0x4f79fb = user.inv;
    for (var _0x50dcc0 = 1; _0x50dcc0 < _0x1cebdc; _0x50dcc0 += 2) {
      var _0x2d93d5 = _0xf513ff[_0x50dcc0];
      var _0x263463 = _0xf513ff[_0x50dcc0 + 1];
      for (var _0x59b76f = 0; _0x59b76f < _0x4f79fb.can_select.length; _0x59b76f++) {
        if (_0x4f79fb.can_select[_0x59b76f].id == _0x2d93d5) {
          _0x4f79fb.n[_0x2d93d5] += _0x263463;
          break;
        }
      }
      if (_0x59b76f == _0x4f79fb.can_select.length) {
        _0x4f79fb.n[_0x2d93d5] = _0x263463;
        _0x4f79fb.can_select.push(game.inv_buttons[_0x2d93d5]);
        game.update_inv_buttons();
      }
    }
    user.craft.update();
  };
  this.gauges = function (_0x1c2ffa, _0x36726c, _0x32ca77, _0xdf163c, _0x1ec06f, _0x5c187b, _0x23de46) {
    user.gauges.l = _0x1c2ffa / 100;
    user.gauges.h = _0x36726c / 100;
    user.gauges.c = _0x32ca77 / 100;
    user.gauges.t = _0xdf163c / 100;
    user.gauges.o = _0x1ec06f / 100;
    user.gauges.wa = _0x5c187b / 100;
    user.bandage = _0x23de46;
  };
  this.succeed_quest = function (_0x41fbb9) {
    game.quests.modify(_0x41fbb9, 2);
  };
  this.fail_quest = function (_0x4d7970) {
    game.quests.modify(_0x4d7970, 0);
  };
  this.claimed = function (_0x45a77f) {
    game.quests.modify(_0x45a77f, 3);
  };
  this.gauges_life = function (_0x7c53d2, _0x371918) {
    user.gauges.l = _0x7c53d2 / 100;
    user.bandage = _0x371918;
  };
  this.gauges_water = function (_0x24f51d) {
    user.gauges.t = _0x24f51d / 100;
  };
  this.gauges_food = function (_0x266e94) {
    user.gauges.h = _0x266e94 / 100;
  };
  this.gauges_warm = function (_0x52a22c) {
    user.gauges.wa = _0x52a22c / 100;
  };
  this.gauges_cold = function (_0xb37456) {
    user.gauges.c = _0xb37456 / 100;
  };
  this.get_time = function (_0x74629d) {
    world.time = _0x74629d;
    world.transition = true;
    audio.transition = 1;
  };
  this.change_ground = function () {
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[world.time];
  };
  this.kill_player = function (_0x4a88a3) {
    if (world.mode == WORLD.MODE_HUNGER_GAMES && world.players[_0x4a88a3].nickname !== "spectator") {
      this.new_alert(world.players[_0x4a88a3].nickname + LANG[TEXT.DEAD]);
    }
    world.players[_0x4a88a3].alive = false;
  };
  this.set_cam = function (_0x48fb61) {
    var _0x38677f = new Uint16Array(_0x48fb61);
    player.cam.change(_0x38677f[1], _0x38677f[2]);
  };
  this.recover_focus = function (_0x54ccd7) {
    var _0x4d1e60 = new Uint16Array(_0x54ccd7);
    user.cam.change(_0x4d1e60[1], _0x4d1e60[2]);
  };
  this.hitten_other = function (_0x1f0cdb, _0x51711c) {
    var _0x3a268a = new Uint16Array(_0x51711c);
    var _0x1fc2a6 = (_0x1f0cdb.length - 2) / 4;
    for (var _0x226f67 = 0; _0x226f67 < _0x1fc2a6; _0x226f67++) {
      var _0x2f72b1 = _0x3a268a[1 + _0x226f67 * 2];
      var _0x1a1638 = _0x1f0cdb[4 + _0x226f67 * 4];
      var _0x170799 = (_0x1f0cdb[5 + _0x226f67 * 4] >> 1) / 127 * Math.PI * 2;
      var _0x2b240a = world.fast_units[_0x1a1638 * world.max_units + _0x2f72b1];
      if (_0x2b240a && _0x2b240a.hit) {
        if (audio.loaded && audio.run) {
          audio.hit(_0x1f0cdb[5 + _0x226f67 * 4] & 1, SOUND_BUILD[_0x2b240a.type], _0x2b240a.x, _0x2b240a.y);
        }
        _0x2b240a.hit.angle = _0x170799;
        _0x2b240a.hit.update = _0x170799;
      }
    }
  };
  this.hitten = function (_0x10193d) {
    var _0xe24df4 = new Uint16Array(_0x10193d);
    var _0x256585 = (_0xe24df4.length - 1) / 4;
    for (var _0x3cb136 = 0; _0x3cb136 < _0x256585; _0x3cb136++) {
      var _0x1ffb4b = _0x3cb136 * 4;
      var _0x480375 = _0xe24df4[1 + _0x1ffb4b];
      var _0xc76ed2 = _0xe24df4[2 + _0x1ffb4b];
      var _0x52402f = (_0xe24df4[3 + _0x1ffb4b] >> 1) / 127 * Math.PI * 2;
      var _0x2483ef = _0xe24df4[4 + _0x1ffb4b];
      var _0x58ad98 = MAP.tiles[_0xc76ed2][_0x480375];
      var _0x3596a4;
      switch (_0x2483ef) {
        case 0:
          _0x3596a4 = _0x58ad98.p[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 1:
          _0x3596a4 = _0x58ad98.s[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 2:
          _0x3596a4 = _0x58ad98.s[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 3:
          _0x3596a4 = _0x58ad98.s[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 4:
          _0x3596a4 = _0x58ad98.t[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 5:
          _0x3596a4 = _0x58ad98.t[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 6:
          _0x3596a4 = _0x58ad98.t[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 7:
          _0x3596a4 = _0x58ad98.t[3][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 8:
          _0x3596a4 = _0x58ad98.t[4][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 9:
          _0x3596a4 = _0x58ad98.t[5][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 10:
          _0x3596a4 = _0x58ad98.g[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 11:
          _0x3596a4 = _0x58ad98.g[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 12:
          _0x3596a4 = _0x58ad98.g[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 13:
          _0x3596a4 = _0x58ad98.d[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 14:
          _0x3596a4 = _0x58ad98.d[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 15:
          _0x3596a4 = _0x58ad98.d[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 16:
          _0x3596a4 = _0x58ad98.b[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 17:
          _0x3596a4 = _0x58ad98.b[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 18:
          _0x3596a4 = _0x58ad98.b[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 19:
          _0x3596a4 = _0x58ad98.b[3][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 20:
          _0x3596a4 = _0x58ad98.f[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 21:
          _0x3596a4 = _0x58ad98.f[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 22:
          _0x3596a4 = _0x58ad98.f[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 23:
          _0x3596a4 = _0x58ad98.sw[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 24:
          _0x3596a4 = _0x58ad98.sw[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 25:
          _0x3596a4 = _0x58ad98.sw[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 26:
          _0x3596a4 = _0x58ad98.gw[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 27:
          _0x3596a4 = _0x58ad98.gw[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 28:
          _0x3596a4 = _0x58ad98.gw[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 29:
          _0x3596a4 = _0x58ad98.dw[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 30:
          _0x3596a4 = _0x58ad98.dw[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 31:
          _0x3596a4 = _0x58ad98.dw[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 32:
          _0x3596a4 = _0x58ad98.a[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 33:
          _0x3596a4 = _0x58ad98.a[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 34:
          _0x3596a4 = _0x58ad98.a[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 35:
          _0x3596a4 = _0x58ad98.cs[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 36:
          _0x3596a4 = _0x58ad98.cs[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 37:
          _0x3596a4 = _0x58ad98.cs[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 38:
          _0x3596a4 = _0x58ad98.cs[3][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 40:
          _0x3596a4 = _0x58ad98.plm[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 41:
          _0x3596a4 = _0x58ad98.plm[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 42:
          _0x3596a4 = _0x58ad98.plm[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 50:
          _0x3596a4 = _0x58ad98.re[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 51:
          _0x3596a4 = _0x58ad98.re[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 52:
          _0x3596a4 = _0x58ad98.re[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 55:
          _0x3596a4 = _0x58ad98.c[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 56:
          _0x3596a4 = _0x58ad98.m[0][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 57:
          _0x3596a4 = _0x58ad98.m[1][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
        case 58:
          _0x3596a4 = _0x58ad98.m[2][0];
          _0x3596a4.angle = _0x52402f;
          _0x3596a4.update = true;
          break;
      }
      if (audio.loaded && audio.run && _0x3596a4) {
        audio.hit(_0xe24df4[3 + _0x1ffb4b] & 1, SOUND_NATURE[_0x2483ef], _0x3596a4.x, _0x3596a4.y);
      }
    }
  };
  this.resurrection = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([17, user.resurrection.pid, user.resurrection.iid]));
  };
  this.give_wheat = function (_0xc3bf1f, _0x30858b) {
    this.socket[SENDWORD](WINDOW2[JSONWORD4].stringify([22, _0x30858b, _0xc3bf1f.pid, _0xc3bf1f.iid]));
  };
  this.give_bread_oven = function (_0x2a2b26, _0x3b102a, _0x18c2d8) {
    if (_0x3b102a) {
      this.socket[SENDWORD](WINDOW2[JSONWORD4].stringify([25, _0x3b102a, _0x2a2b26.pid, _0x2a2b26.iid]));
    } else {
      this.socket[SENDWORD](WINDOW2[JSONWORD3].stringify([24, _0x18c2d8, _0x2a2b26.pid, _0x2a2b26.iid]));
    }
  };
  this.take_bread = function (_0xdee1fa) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([26, _0xdee1fa.pid, _0xdee1fa.iid]));
  };
  this.claim_quest_reward = function (_0x4fae33) {
    this.socket[SENDWORD](WINDOW5[JSONWORD8].stringify([27, _0x4fae33]));
  };
  this.give_well = function (_0x5887b4) {
    this.socket[SENDWORD](WINDOW4[JSONWORD2].stringify([30, _0x5887b4.pid, _0x5887b4.iid]));
  };
  this.give_wood_extractor = function (_0x259319, _0x21e311) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([38, _0x21e311, _0x259319.pid, _0x259319.iid, _0x259319.type]));
  };
  this.give_wood = function (_0x230d63, _0x5d6646) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([12, _0x5d6646, _0x230d63.pid, _0x230d63.iid]));
  };
  this.give_item = function (_0x53362d, _0x359c16, _0x8063ee) {
    this.socket[SENDWORD](WINDOW4[JSONWORD4].stringify([8, _0x359c16, _0x8063ee, _0x53362d.pid, _0x53362d.iid]));
  };
  this.take_extractor = function (_0x143d1c) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([37, _0x143d1c.pid, _0x143d1c.iid, _0x143d1c.type]));
  };
  this.take_flour = function (_0x5e33c6) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([23, _0x5e33c6.pid, _0x5e33c6.iid]));
  };
  this.take_chest = function (_0x5ba26e) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([9, _0x5ba26e.pid, _0x5ba26e.iid]));
  };
  this.unlock_chest = function (_0x37e6f9) {
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([15, _0x37e6f9.pid, _0x37e6f9.iid]));
  };
  this.lock_chest = function (_0x1564c7) {
    this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([16, _0x1564c7.iid]));
  };
  this.kick_team = function (_0x330165) {
    _0xc72bea.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([20, user.totem.id, user.team[_0x330165]]));
  };
  this.join_team = function () {
    _0xc72bea.socket[SENDWORD](WINDOW9[JSONWORD9].stringify([18, user.totem.pid, user.totem.id]));
  };
  this.leave_team = function () {
    _0xc72bea.socket[SENDWORD](WINDOW10[JSONWORD10].stringify([19]));
  };
  this.lock_team = function () {
    _0xc72bea.socket[SENDWORD](WINDOW10[JSONWORD8].stringify([35, user.totem.id]));
    if (document.getElementById("lock_team").innerHTML == "LOCK") {
      user.totem.lock = 1;
      document.getElementById("lock_team").innerHTML = "UNLOCK";
    } else {
      user.totem.lock = 0;
      document.getElementById("lock_team").innerHTML = "LOCK";
    }
  };
  this.units = function (_0x51c5af, _0x43ca71, _0x511f01) {
    var _0x5d8360 = new Uint16Array(_0x51c5af);
    if (_0x511f01) {
      world.delete_all_units();
    }
    var _0x7905de = (_0x43ca71.length - 2) / 18;
    for (var _0x327f28 = 0; _0x327f28 < _0x7905de; _0x327f28++) {
      var _0x214300 = 2 + _0x327f28 * 18;
      var _0x3f14b8 = 1 + _0x327f28 * 9;
      var _0x594545 = _0x43ca71[_0x214300];
      var _0x4ad565 = _0x5d8360[_0x3f14b8 + 1];
      var _0x3cf2a0 = _0x5d8360[_0x3f14b8 + 5];
      var _0x3fceb5 = _0x594545 * world.max_units + _0x3cf2a0;
      if (_0x4ad565 & STATE.DELETE) {
        world.delete_units(_0x3fceb5);
        continue;
      }
      var _0x202137 = _0x5d8360[_0x3f14b8 + 2];
      var _0x2055dc = _0x5d8360[_0x3f14b8 + 3];
      var _0x116a2d = _0x5d8360[_0x3f14b8 + 4];
      var _0x217e60 = _0x5d8360[_0x3f14b8 + 6];
      var _0x44b89f = _0x5d8360[_0x3f14b8 + 7];
      var _0x2352e7 = _0x5d8360[_0x3f14b8 + 8];
      var _0x4cf65b = _0x43ca71[_0x214300 + 1] / 255 * Math.PI * 2;
      if (!world.fast_units[_0x3fceb5]) {
        var _0x1cf69d = new Item(_0x202137, _0x594545, _0x3cf2a0, _0x2055dc, _0x116a2d, _0x4cf65b, _0x4ad565, _0x217e60, _0x44b89f, _0x2352e7);
        world.fast_units[_0x3fceb5] = _0x1cf69d;
        world.units[_0x202137].push(_0x1cf69d);
        continue;
      }
      var _0x567a11 = world.fast_units[_0x3fceb5];
      _0x567a11.r.x = _0x2055dc;
      _0x567a11.r.y = _0x116a2d;
      if (_0x594545 != 0 && Utils.dist(_0x567a11, _0x567a11.r) > CLIENT.LAG_DISTANCE) {
        _0x567a11.x = _0x2055dc;
        _0x567a11.y = _0x116a2d;
      }
      if (_0x567a11.id !== user.id || _0x594545 === 0) {
        _0x567a11.nangle = _0x4cf65b;
      }
      _0x567a11.action |= _0x4ad565;
      _0x567a11.info = _0x217e60;
      _0x567a11.speed = _0x44b89f;
      _0x567a11.extra = _0x2352e7;
      if (_0x567a11.update) {
        _0x567a11.update(_0x4ad565);
      }
    }
  };
  this.leaderboard = function (_0x2936ca) {
    this.timeout_server = old_timestamp;
    var _0x2d470a = new Uint16Array(_0x2936ca);
    user.ldb.init(_0x2d470a);
  };
  this.new_recipes = function (_0x4f721c) {
    if (OLD_RECIPES !== undefined) {
      RECIPES = OLD_RECIPES;
    }
    if (_0x4f721c.length > 0) {
      OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
      for (var _0x28f33d = 0; _0x28f33d < _0x4f721c.length; _0x28f33d++) {
        var _0x2785a6 = _0x4f721c[_0x28f33d];
        var _0x47f518 = RECIPES[_0x2785a6.item];
        if (_0x47f518 === undefined) {
          continue;
        }
        _0x47f518.r = _0x2785a6.recipe;
        _0x47f518.w = _0x2785a6.workbench;
        _0x47f518.f = _0x2785a6.fire;
        _0x47f518.o = _0x2785a6.water;
        _0x47f518.e = _0x2785a6.well;
        _0x47f518.time = 1 / _0x2785a6.time;
      }
    }
  };
  this.welcome = function (_0x114a13) {
    if (!_0x114a13 || _0x114a13.length === 0) {
      user.welcome.message = undefined;
    } else {
      user.welcome.message = create_welcome_text(_0x114a13);
    }
  };
  this.chat = function (_0x39ea83) {
    var _0x520719 = world.fast_units[_0x39ea83[1] * world.max_units];
    if (_0x520719) {
      if (world.mode === WORLD.MODE_ZOMBIES && _0x520719.skin === WORLD.ZOMBIE_SKIN) {
        if (!user.zombie) {
          _0x520719.text.push(ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]);
        } else if (Math.random() > 0.5) {
          _0x520719.text.push(_0x39ea83[2] + " ..." + ZOMBIE_GRUMBLE);
        } else {
          _0x520719.text.push(ZOMBIE_GRUMBLE + "... " + _0x39ea83[2]);
        }
      } else {
        _0x520719.text.push(_0x39ea83[2]);
      }
    }
  };
  this.select_craft = function (_0x23e3c8) {
    if (user.inv.max === user.inv.can_select.length && RECIPES[_0x23e3c8].id2 !== INV.BAG && user.inv.find_item(RECIPES[_0x23e3c8].id2) == -1 && !user.inv.free_place(RECIPES[_0x23e3c8].r)) {
      this.inv_full();
      return 0;
    }
    this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([7, _0x23e3c8]));
    return 1;
  };
  this.workbench = function (_0x2dd385) {
    user.craft.set_workbench(_0x2dd385);
  };
  this.well = function (_0x1b2a8d) {
    user.craft.well = _0x1b2a8d;
    user.craft.update();
  };
  this.fire = function (_0x59fa08) {
    user.craft.fire = _0x59fa08;
    user.craft.update();
  };
  this.water = function (_0x187800) {
    user.craft.water = _0x187800;
    user.craft.update();
  };
  this.dont_harvest = function (_0x1934b8) {
    this.new_alert(LANG[TEXT.WRONG_TOOL]);
  };
  this.cancel_craft = function () {
    user.craft.restart();
  };
  this.minimap = function (_0x299e43) {
    game.minimap.players = [];
    var _0x534fd9 = world.fast_units[user.uid];
    var _0x4820e0 = 0;
    for (var _0x4bbdaa = 1; _0x4bbdaa < _0x299e43.length; _0x4bbdaa += 2) {
      var _0x585286 = {
        x: Math.floor(_0x299e43[_0x4bbdaa] * world.w / 250),
        y: Math.floor(_0x299e43[_0x4bbdaa + 1] * world.h / 250)
      };
      if (_0x534fd9 && !_0x4820e0 && !user.spectator && Utils.dist(_0x585286, _0x534fd9) < 250) {
        _0x4820e0 += 1;
        continue;
      }
      game.minimap.players.push(_0x585286);
    }
  };
  this.reborn = function () {
    user.resurrection.open = false;
    user.ghost.enabled = false;
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.sec = null;
    user.ghost.now = -1;
  };
  this.ghost = function (_0x14d263) {
    WORLD.GHOST_DELAY = _0x14d263;
    user.ghost.enabled = true;
    user.ghost.delay = new Date().getTime();
    user.ghost.label = null;
    user.ghost.now = -1;
    var _0x28d441 = [INV.SUPER_HAMMER, INV.DRAGON_HEART, INV.SWORD_WOOD, INV.SWORD, INV.SWORD_GOLD, INV.SWORD_DIAMOND, INV.SWORD_AMETHYST, INV.REIDITE_SWORD, INV.DRAGON_SWORD, INV.LAVA_SWORD, INV.PIRATE_SWORD, INV.SPEAR, INV.WOOD_SPEAR, INV.GOLD_SPEAR, INV.DIAMOND_SPEAR, INV.AMETHYST_SPEAR, INV.REIDITE_SPEAR, INV.DRAGON_SPEAR, INV.LAVA_SPEAR, INV.CRAB_SPEAR, INV.WOOD_BOW, INV.STONE_BOW, INV.GOLD_BOW, INV.DIAMOND_BOW, INV.AMETHYST_BOW, INV.REIDITE_BOW, INV.DRAGON_BOW, INV.WOOD_SHIELD, INV.STONE_SHIELD, INV.GOLD_SHIELD, INV.DIAMOND_SHIELD, INV.AMETHYST_SHIELD, INV.REIDITE_SHIELD, INV.WAND1, INV.WAND2, INV.PICK_WOOD, INV.PICK, INV.PICK_GOLD, INV.PICK_DIAMOND, INV.PICK_AMETHYST, INV.PICK_REIDITE, INV.SPANNER, INV.PITCHFORK, INV.PITCHFORK2];
    for (var _0x258aa1 = 0; _0x258aa1 < _0x28d441.length; _0x258aa1++) {
      var _0x3651e5 = user.inv.find_item(_0x28d441[_0x258aa1]);
      if (_0x3651e5 != -1) {
        user.inv.delete_item(_0x28d441.length[_0x258aa1], _0x3651e5);
      }
    }
    user.craft.restart();
  };
  this.decrease_item2 = function (_0x1091e0, _0x41a4cf, _0x3b4573) {
    this.decrease_item(_0x1091e0, _0x41a4cf * 256 + _0x3b4573);
  };
  this.decrease_item = function (_0x26e9d4, _0x178ddf) {
    user.craft.preview = -1;
    user.inv.decrease(_0x26e9d4, _0x178ddf, user.inv.find_item(_0x26e9d4));
    user.craft.update();
  };
  this.accept_build = function (_0xf05af1) {
    user.craft.preview = -1;
    user.build.wait = true;
    var _0x32adf1 = user.inv.find_item(_0xf05af1);
    user.inv.decrease(_0xf05af1, 1, _0x32adf1);
    if (_0x32adf1 >= 0 && !user.inv.n[_0xf05af1]) {
      user.craft.update();
    }
    if (_0xf05af1 == INV.TOTEM) {
      user.team = [user.id];
    }
  };
  this.cancel_crafting = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([31]));
  };
  this.buy_market = function (_0x17d234) {
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([32, _0x17d234.val, _0x17d234.id]));
  };
  this.update_sign = function (_0x567bbf, _0x3b186f) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([33, _0x567bbf, _0x3b186f]));
  };
  this.send_build = function () {
    var _0x1248e7 = world.fast_units[user.uid];
    if (_0x1248e7) {
      var _0x2777f6 = Math.PI * 2;
      this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([10, user.craft.preview, Math.floor((_0x1248e7.angle + _0x2777f6) % _0x2777f6 * 255 / _0x2777f6), user.craft.mode]));
    }
  };
  this.select_inv = function (_0x51b018, _0x502a12) {
    switch (_0x51b018) {
      case INV.BANDAGE:
      case INV.PLANT:
      case INV.MEAT:
      case INV.COOKED_MEAT:
      case INV.SANDWICH:
      case INV.BOTTLE_FULL:
      case INV.COOKIE:
      case INV.CAKE:
      case INV.ICE:
      case INV.BREAD:
      case INV.PUMPKIN:
      case INV.TOMATO:
      case INV.CACTUS:
      case INV.CARROT:
      case INV.WATERMELON:
      case INV.ALOE_VERA:
      case INV.GARLIC:
      case INV.FOODFISH:
      case INV.FOODFISH_COOKED:
      case INV.CRAB_STICK:
      case INV.CRAB_LOOT:
      case INV.CANDY:
      case INV.SUGAR_CAN:
        user.craft.preview = -1;
        this.socket[SENDWORD](WINDOW4[JSONWORD4].stringify([5, _0x51b018]));
        break;
      case INV.WORKBENCH:
      case INV.SPIKE:
      case INV.SEED:
      case INV.WHEAT_SEED:
      case INV.PUMPKIN_SEED:
      case INV.TOMATO_SEED:
      case INV.CARROT_SEED:
      case INV.GARLIC_SEED:
      case INV.THORNBUSH_SEED:
      case INV.WATERMELON_SEED:
      case INV.ALOE_VERA_SEED:
      case INV.FIRE:
      case INV.WALL:
      case INV.STONE_WALL:
      case INV.GOLD_WALL:
      case INV.DIAMOND_WALL:
      case INV.BIG_FIRE:
      case INV.CHEST:
      case INV.RESURRECTION:
      case INV.EMERALD_MACHINE:
      case INV.WOOD_DOOR:
      case INV.STONE_DOOR:
      case INV.GOLD_DOOR:
      case INV.DIAMOND_DOOR:
      case INV.AMETHYST_DOOR:
      case INV.REIDITE_DOOR:
      case INV.WOOD_DOOR_SPIKE:
      case INV.STONE_DOOR_SPIKE:
      case INV.GOLD_DOOR_SPIKE:
      case INV.DIAMOND_DOOR_SPIKE:
      case INV.AMETHYST_DOOR_SPIKE:
      case INV.REIDITE_DOOR_SPIKE:
      case INV.STONE_SPIKE:
      case INV.GOLD_SPIKE:
      case INV.DIAMOND_SPIKE:
      case INV.FURNACE:
      case INV.AMETHYST_WALL:
      case INV.AMETHYST_SPIKE:
      case INV.REIDITE_WALL:
      case INV.REIDITE_SPIKE:
      case INV.BRIDGE:
      case INV.ROOF:
      case INV.PLOT:
      case INV.WINDMILL:
      case INV.EXTRACTOR_MACHINE_STONE:
      case INV.EXTRACTOR_MACHINE_GOLD:
      case INV.EXTRACTOR_MACHINE_DIAMOND:
      case INV.EXTRACTOR_MACHINE_AMETHYST:
      case INV.EXTRACTOR_MACHINE_REIDITE:
      case INV.BED:
      case INV.GARLAND:
      case INV.WELL:
      case INV.SIGN:
      case INV.BREAD_OVEN:
      case INV.TOTEM:
      case INV.WOOD_TOWER:
        if (!user.zombie) {
          if (user.craft.preview === _0x51b018) {
            user.craft.preview = -1;
          } else {
            user.craft.preview = _0x51b018;
          }
        }
        break;
      case INV.SWORD:
      case INV.SWORD_WOOD:
      case INV.SWORD_GOLD:
      case INV.SWORD_DIAMOND:
      case INV.SWORD_AMETHYST:
      case INV.REIDITE_SWORD:
      case INV.PIRATE_SWORD:
      case INV.DRAGON_SWORD:
      case INV.LAVA_SWORD:
      case INV.WOOD_BOW:
      case INV.STONE_BOW:
      case INV.GOLD_BOW:
      case INV.DIAMOND_BOW:
      case INV.AMETHYST_BOW:
      case INV.REIDITE_BOW:
      case INV.DRAGON_BOW:
      case INV.WAND1:
      case INV.WAND2:
      case INV.WOOD_SPEAR:
      case INV.SPEAR:
      case INV.GOLD_SPEAR:
      case INV.DIAMOND_SPEAR:
      case INV.AMETHYST_SPEAR:
      case INV.AMETHYST_REIDITE:
      case INV.DRAGON_SPEAR:
      case INV.LAVA_SPEAR:
      case INV.REIDITE_SPEAR:
      case INV.CRAB_SPEAR:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x59129e = world.fast_units[user.uid];
          if (_0x59129e && _0x59129e.right === _0x51b018) {
            this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([5, INV.HAND]));
          } else {
            user.weapon.wait = true;
            this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([5, _0x51b018]));
          }
        }
        break;
      case INV.PICK:
      case INV.PICK_WOOD:
      case INV.PICK_GOLD:
      case INV.PICK_DIAMOND:
      case INV.HAMMER:
      case INV.HAMMER_GOLD:
      case INV.HAMMER_DIAMOND:
      case INV.BOOK:
      case INV.HAMMER_AMETHYST:
      case INV.HAMMER_REIDITE:
      case INV.PICK_AMETHYST:
      case INV.PICK_REIDITE:
      case INV.SUPER_HAMMER:
      case INV.SHOVEL:
      case INV.SHOVEL_GOLD:
      case INV.SHOVEL_DIAMOND:
      case INV.SHOVEL_AMETHYST:
      case INV.SPANNER:
      case INV.MACHETE:
      case INV.PITCHFORK:
      case INV.PITCHFORK2:
      case INV.SADDLE:
      case INV.WATERING_CAN_FULL:
      case INV.WOOD_SHIELD:
      case INV.STONE_SHIELD:
      case INV.GOLD_SHIELD:
      case INV.DIAMOND_SHIELD:
      case INV.AMETHYST_SHIELD:
      case INV.REIDITE_SHIELD:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x59129e = world.fast_units[user.uid];
          if (_0x59129e && _0x59129e.right === _0x51b018) {
            this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([5, INV.HAND]));
          } else {
            this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, _0x51b018]));
          }
        }
        break;
      case INV.BOAT:
      case INV.SLED:
      case INV.MOUNT_BOAR:
      case INV.BABY_MAMMOTH:
      case INV.CRAB_BOSS:
      case INV.BABY_DRAGON:
      case INV.BABY_LAVA:
      case INV.HAWK:
      case INV.PLANE:
      case INV.NIMBUS:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x59129e = world.fast_units[user.uid];
          this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, _0x51b018]));
        }
        break;
      case INV.CROWN_GREEN:
      case INV.CROWN_ORANGE:
      case INV.CROWN_BLUE:
      case INV.WOOD_HELMET:
      case INV.STONE_HELMET:
      case INV.GOLD_HELMET:
      case INV.DIAMOND_HELMET:
      case INV.AMETHYST_HELMET:
      case INV.REIDITE_HELMET:
      case INV.DIAMOND_PROTECTION:
      case INV.AMETHYST_PROTECTION:
      case INV.REIDITE_PROTECTION:
      case INV.DRAGON_HELMET:
      case INV.LAVA_HELMET:
      case INV.WITCH:
      case INV.CROWN_CRAB:
      case INV.SUPER_DIVING_SUIT:
        var _0x59129e = world.fast_units[user.uid];
        if (_0x59129e && _0x59129e.clothe !== _0x51b018) {
          user.helmet.wait = true;
        }
        this.socket[SENDWORD](WINDOW4[JSONWORD5].stringify([5, _0x51b018]));
        break;
      case INV.EARMUFFS:
      case INV.HOOD:
      case INV.PEASANT:
      case INV.WINTER_PEASANT:
      case INV.COAT:
      case INV.CAP_SCARF:
      case INV.FUR_HAT:
      case INV.PILOT_HELMET:
      case INV.TURBAN1:
      case INV.TURBAN2:
      case INV.CHRISTMAS_HAT:
      case INV.ELF_HAT:
      case INV.WINTER_HOOD:
      case INV.EXPLORER_HAT:
      case INV.PIRATE_HAT:
      case INV.DIVING_MASK:
        this.socket[SENDWORD](WINDOW9[JSONWORD9].stringify([5, _0x51b018]));
        break;
    }
  };
  this.delete_inv = function (_0x157da1) {
    this.socket[SENDWORD](WINDOW3[JSONWORD1].stringify([6, _0x157da1]));
  };
  this.delete_inv_ok = function (_0x17a691) {
    user.build.wait = true;
    var _0x598465 = user.inv.find_item(_0x17a691);
    user.inv.delete_item(_0x17a691, _0x598465);
    user.craft.update();
  };
  this.recycle_inv = function (_0x396628, _0xc4a740) {
    this.socket[SENDWORD](WINDOW1[JSONWORD7].stringify([29, _0x396628]));
  };
  this.delete_one_inv = function (_0x40d285, _0x5f2508) {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([28, _0x40d285]));
  };
  this.delete_one_inv_ok = function (_0x3d49d3) {
    user.build.wait = true;
    var _0x384244 = user.inv.find_item(_0x3d49d3);
    user.inv.decrease(_0x3d49d3, 1, _0x384244);
    user.craft.update();
  };
  this.delete_single_inv = function (_0x466e2a) {
    var _0x25ea95 = _0x466e2a[1];
    var _0x30f884 = _0x466e2a[2];
    user.build.wait = true;
    var _0x231725 = user.inv.find_item(_0x25ea95);
    user.inv.decrease(_0x25ea95, _0x30f884, _0x231725);
    user.craft.update();
  };
  this.stop_attack = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([14]));
  };
  this.send_attack = function (_0x24154a) {
    var _0x20c576 = Math.PI * 2;
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([4, Math.floor((_0x24154a + _0x20c576) % _0x20c576 * 255 / _0x20c576)]));
  };
  this.send_angle = function (_0x390918) {
    var _0x2dbb3d = Math.PI * 2;
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([3, Math.floor((_0x390918 + _0x2dbb3d) % _0x2dbb3d * 255 / _0x2dbb3d)]));
  };
  this.send_move = function (_0x4c59f0) {
    this.socket[SENDWORD](WINDOW12[JSONWORD12].stringify([2, _0x4c59f0]));
  };
  this.send_command = function (_0x1bf442) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([36, _0x1bf442]));
  };
  this.send_chat = function (_0x3e34de) {
    var _0x1c1c09 = world.fast_units[user.uid];
    if (user.zombie) {
      if (Math.random() > 0.5) {
        _0x1c1c09.text.push(_0x3e34de.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE);
      } else {
        _0x1c1c09.text.push(ZOMBIE_GRUMBLE + "... " + _0x3e34de.substring(0, 25));
      }
    } else {
      _0x1c1c09.text.push(_0x3e34de);
    }
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([0, _0x3e34de]));
  };
  this.move_units = function (_0x5a285c) {
    var _0x1609cf = player.select.units;
    if (_0x1609cf.length == 0) {
      return;
    }
    var _0x4436ae = [2];
    var _0x32b634 = [];
    Utils.sub_vector(_0x5a285c, {
      x: player.cam.rx,
      y: player.cam.ry
    });
    _0x4436ae.push(_0x5a285c.x);
    _0x4436ae.push(_0x5a285c.y);
    for (var _0x434b24 = 0; _0x434b24 < _0x1609cf.length; _0x434b24++) {
      _0x32b634.push(_0x1609cf[_0x434b24].oid);
    }
    _0x4436ae.push(_0x32b634);
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify(_0x4436ae));
  };
  this.cam_delay = 0;
  this.last_cam = {
    i: 0,
    j: 0
  };
  this.update_cam = function () {
    if (old_timestamp - this.cam_delay > CLIENT.CAM_DELAY) {
      this.cam_delay = old_timestamp;
      var _0x19ac14 = user.cam;
      var _0x2b871e = Math.floor(_0x19ac14.x / 100);
      var _0x31a34b = Math.floor(_0x19ac14.y / 100);
      if (this.last_cam.i != _0x2b871e || this.last_cam.j != _0x31a34b) {
        this.socket[SENDWORD](WINDOW8[JSONWORD7].stringify([1, Math.floor(-_0x19ac14.x), Math.floor(-_0x19ac14.y)]));
        this.last_cam.i = _0x2b871e;
        this.last_cam.j = _0x31a34b;
      }
    }
  };
  this.ping_delay = 0;
  this.try_ping = function () {
    if (old_timestamp - this.ping_delay > CLIENT.PING_DELAY) {
      this.ping_delay = old_timestamp;
      this.ping();
    }
  };
  this.lost = function () {
    user.reconnect.enabled = true;
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    this.socket.close();
    client.connect();
  };
  this.join_new_team = function (_0x1b6344) {
    this.new_alert(LANG[TEXT.JOIN_TEAM]);
    for (var _0x1836e4 = 1; _0x1836e4 < _0x1b6344.length; _0x1836e4++) {
      user.team.push(_0x1b6344[_0x1836e4]);
    }
  };
  this.new_member_team = function (_0xd64506) {
    this.new_alert(world.players[_0xd64506].nickname + LANG[TEXT.JOINED_TEAM]);
    user.team.push(_0xd64506);
    var _0x35e397 = document.getElementById("team_box");
    if (game.team_buttons_id != -1 && _0x35e397.style.display == "inline-block") {
      game.team_buttons[game.team_buttons_id].action();
    }
  };
  this.destroy_team = function () {
    this.new_alert(LANG[TEXT.TEAM_DESTROYED]);
    user.totem.wait = true;
    user.team = [];
    document.getElementById("team_box").style.display = "none";
  };
  this.exclude_team = function (_0x48e0f7) {
    if (_0x48e0f7 == user.id) {
      this.new_alert(LANG[TEXT.LEFT_TEAM]);
      user.totem.wait = true;
      user.team = [];
      document.getElementById("team_box").style.display = "none";
    } else {
      this.new_alert(world.players[_0x48e0f7].nickname + LANG[TEXT.LEFT_TEAM2]);
      for (var _0x2da8f0 = 0; _0x2da8f0 < user.team.length; _0x2da8f0++) {
        if (user.team[_0x2da8f0] == _0x48e0f7) {
          user.team.splice(_0x2da8f0, 1);
          break;
        }
      }
      var _0x370be8 = document.getElementById("team_box");
      if (game.team_buttons_id != -1 && _0x370be8.style.display == "inline-block") {
        game.team_buttons[game.team_buttons_id].action();
      }
    }
  };
  this.steal_token = function (_0x34f53d) {
    user.alive = false;
    this.new_alert(LANG[TEXT.TOKEN]);
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    game.quit(ui.run);
    this.socket.close();
  };
  this.killed = function (_0x593762, _0x1884ac) {
    user.alive = false;
    var _0x5275a4 = new Uint16Array(_0x1884ac);
    var _0x3a51dc = new Uint32Array(_0x1884ac);
    user.die.howdie = DIE[_0x593762][Math.floor(Math.random() * DIE[_0x593762].length)];
    user.die.score = Utils.simplify_number(world.players[user.id].score);
    user.die.bank = Utils.simplify_number(_0x3a51dc[1]);
    user.die.kill = _0x5275a4[1];
    this.new_alert(LANG[TEXT.YOU_DEAD]);
    if (this._current_id != this.socket._current_id) {
      return;
    }
    this._current_id++;
    game.quit(scoreboard.run);
    this.socket.close();
    window.aiptag.cmd.display.push(function () {
      window.aipDisplayTag.display("MFN_starve-io_300x250");
    });
  };
  this.ping = function () {
    this.socket[SENDWORD](CLIENT.PING);
  };
  this.check_state = function () {
    if (this.socket.readyState == 3) {
      this.timeout_server -= CLIENT.TIMEOUT_SERVER;
    }
  };
  this.check_pong = function () {
    if (delta > CLIENT.LOOSE_FOCUS) {
      this.timeout_server = old_timestamp;
    }
    if (old_timestamp - this.timeout_server > CLIENT.TIMEOUT_SERVER) {
      this.timeout_server = old_timestamp;
      this.lost();
    }
  };
  this.handshake = function (_0x240c65) {
    ___adsvid++;
    clearTimeout(this.timeout_handler);
    document.getElementById("commandMainBoxName").innerHTML = this.mode_list[this.current_mode][this.selected_server[this.current_mode]].a;
    document.getElementById("exploreForest").src = "img/forest-leaf.png";
    document.getElementById("exploreWinter").src = "img/winter-flake.png";
    document.getElementById("exploreDesert").src = "img/desert-cactus.png";
    document.getElementById("exploreLava").src = "img/lava-volcano.png";
    this.timeout_server = old_timestamp;
    user.gauges.cold.ed = user.gauges.cold.em;
    user.gauges.hunger.ed = user.gauges.hunger.em;
    user.gauges.thirst.ed = user.gauges.thirst.em;
    user.gauges.oxygen.ed = user.gauges.oxygen.em;
    user.gauges.warm.ed = user.gauges.warm.em;
    user.gauges.l = 1;
    user.gauges.c = 1;
    user.gauges.h = 1;
    user.gauges.t = 1;
    user.gauges.o = 1;
    user.gauges.wa = 1;
    user.bigmap = false;
    game.info_box.display = 0;
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.max = WORLD.WITHOUT_BAG;
    user.inv.bonus = 0;
    user.inv.bag = 0;
    user.inv.id = -1;
    game.show_recipe_book = 1;
    game.show_clock = 1;
    game.show_quest = 1;
    game.show_market = 1;
    user.alive = true;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.weapon.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 10, 1);
    user.weapon.wait = false;
    user.helmet.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 5, 1);
    user.helmet.wait = false;
    user.build.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.build.wait = false;
    user.totem.id = -1;
    user.totem.pid = -1;
    user.totem.wait = false;
    user.totem.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1);
    game.minimap.marker.x = -1;
    game.minimap.marker.y = -1;
    game.craft_list.open = false;
    game.minimap.players = [];
    user.show_spectators.enabled = false;
    world.mode = _0x240c65[1];
    if (_0x240c65[20] !== undefined && _0x240c65[21] !== undefined) {
      world.nw = _0x240c65[20];
      world.nh = _0x240c65[21];
      world.w = world.nw * world.dw;
      world.h = world.nh * world.dh;
    }
    world.islands = _0x240c65[22];
    world.custom_map = _0x240c65[23];
    _0xc72bea.welcome(_0x240c65[24]);
    _0xc72bea.new_recipes(_0x240c65[25]);
    user.desert.tempest = _0x240c65[26];
    user.blizzard = 0;
    user.winter.tempest = _0x240c65[27];
    world.generate_world(_0x240c65[19]);
    world.time = _0x240c65[5];
    world.clock.hour = _0x240c65[15];
    world.clock.init = new Date().getTime();
    game.quests.born = _0x240c65[16];
    world.transition = false;
    user.day = _0x240c65[2];
    game.quests.reset();
    user.team = _0x240c65[8];
    world.units[ITEMS.PLAYERS] = [];
    world.units[ITEMS.FRUIT] = [];
    world.units[ITEMS.WORKBENCH] = [];
    world.units[ITEMS.FIRE] = [];
    world.units[ITEMS.BIG_FIRE] = [];
    world.units[ITEMS.SEED] = [];
    world.units[ITEMS.WHEAT_SEED] = [];
    world.units[ITEMS.PUMPKIN_SEED] = [];
    world.units[ITEMS.TOMATO_SEED] = [];
    world.units[ITEMS.CARROT_SEED] = [];
    world.units[ITEMS.GARLIC_SEED] = [];
    world.units[ITEMS.THORNBUSH_SEED] = [];
    world.units[ITEMS.WATERMELON_SEED] = [];
    world.units[ITEMS.ALOE_VERA_SEED] = [];
    world.units[ITEMS.WALL] = [];
    world.units[ITEMS.STONE_WALL] = [];
    world.units[ITEMS.GOLD_WALL] = [];
    world.units[ITEMS.DIAMOND_WALL] = [];
    world.units[ITEMS.WOOD_DOOR] = [];
    world.units[ITEMS.STONE_DOOR] = [];
    world.units[ITEMS.GOLD_DOOR] = [];
    world.units[ITEMS.DIAMOND_DOOR] = [];
    world.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    world.units[ITEMS.STONE_DOOR_SPIKE] = [];
    world.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    world.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    world.units[ITEMS.CHEST] = [];
    world.units[ITEMS.RESURRECTION] = [];
    world.units[ITEMS.EMERALD_MACHINE] = [];
    world.units[ITEMS.SPIKE] = [];
    world.units[ITEMS.STONE_SPIKE] = [];
    world.units[ITEMS.GOLD_SPIKE] = [];
    world.units[ITEMS.DIAMOND_SPIKE] = [];
    world.units[ITEMS.WOLF] = [];
    world.units[ITEMS.BOAR] = [];
    world.units[ITEMS.CRAB_BOSS] = [];
    world.units[ITEMS.BABY_DRAGON] = [];
    world.units[ITEMS.BABY_LAVA] = [];
    world.units[ITEMS.HAWK] = [];
    world.units[ITEMS.TREASURE_CHEST] = [];
    world.units[ITEMS.DEAD_BOX] = [];
    world.units[ITEMS.GIFT] = [];
    world.units[ITEMS.CRATE] = [];
    world.units[ITEMS.BREAD_OVEN] = [];
    world.units[ITEMS.PIRANHA] = [];
    world.units[ITEMS.KRAKEN] = [];
    world.units[ITEMS.CRAB] = [];
    world.units[ITEMS.FOX] = [];
    world.units[ITEMS.BEAR] = [];
    world.units[ITEMS.MAMMOTH] = [];
    world.units[ITEMS.BABY_MAMMOTH] = [];
    world.units[ITEMS.VULTURE] = [];
    world.units[ITEMS.SAND_WORM] = [];
    world.units[ITEMS.DRAGON] = [];
    world.units[ITEMS.LAVA_DRAGON] = [];
    world.units[ITEMS.FLAME] = [];
    world.units[ITEMS.WHEAT_MOB] = [];
    world.units[ITEMS.ALOE_VERA_MOB] = [];
    world.units[ITEMS.PUMPKIN_MOB] = [];
    world.units[ITEMS.GARLIC_MOB] = [];
    world.units[ITEMS.THORNBUSH_MOB] = [];
    world.units[ITEMS.RABBIT] = [];
    world.units[ITEMS.PENGUIN] = [];
    world.units[ITEMS.SPELL] = [];
    world.units[ITEMS.FIREFLY] = [];
    world.units[ITEMS.SPIDER] = [];
    world.units[ITEMS.FURNACE] = [];
    world.units[ITEMS.AMETHYST_WALL] = [];
    world.units[ITEMS.AMETHYST_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR] = [];
    world.units[ITEMS.REIDITE_WALL] = [];
    world.units[ITEMS.REIDITE_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR] = [];
    world.units[ITEMS.TOTEM] = [];
    world.units[ITEMS.WOOD_TOWER] = [];
    world.units[ITEMS.BRIDGE] = [];
    world.units[ITEMS.ROOF] = [];
    world.units[ITEMS.PLOT] = [];
    world.units[ITEMS.WINDMILL] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    world.units[ITEMS.GARLAND] = [];
    world.units[ITEMS.BED] = [];
    world.units[ITEMS.WELL] = [];
    world.units[ITEMS.SIGN] = [];
    world.fast_units = [];
    world.max_units = _0x240c65[7];
    user.id = _0x240c65[9];
    user.uid = user.id * world.max_units;
    if (audio.loaded) {
      audio.players[0].uid = user.uid;
      audio.players[0].free = 0;
    }
    keyboard.clear_directionnal();
    user.cam.change(_0x240c65[3], _0x240c65[10]);
    world.players = [];
    var _0x233372 = world.players;
    for (var _0x4c5c05 = 0; _0x4c5c05 < _0x240c65[11]; _0x4c5c05++) {
      _0x233372.push(new Player());
    }
    for (var _0x4c5c05 = 0, _0x180641 = _0x240c65[4]; _0x4c5c05 < _0x180641.length; _0x4c5c05++) {
      var _0x2439c2 = _0x233372[_0x180641[_0x4c5c05].i];
      _0x2439c2.nickname = _0x180641[_0x4c5c05].n;
      _0x2439c2.skin = _0x180641[_0x4c5c05].s;
      _0x2439c2.accessory = _0x180641[_0x4c5c05].a;
      _0x2439c2.crate = _0x180641[_0x4c5c05].c;
      _0x2439c2.book = _0x180641[_0x4c5c05].b;
      _0x2439c2.dead = _0x180641[_0x4c5c05].d;
      _0x2439c2.baglook = _0x180641[_0x4c5c05].g;
      _0x2439c2.level = _0x180641[_0x4c5c05].l;
      _0x2439c2.score = Utils.restore_number(_0x180641[_0x4c5c05].p);
      _0x2439c2.alive = true;
      if (SHOW_ID === 1) {
        _0x2439c2.nickname += "|" + _0x180641[_0x4c5c05].i;
      }
    }
    user.ldb.sort();
    if (world.mode === WORLD.MODE_HUNGER_GAMES && world.players[user.id].nickname === "spectator") {
      user.spectator = true;
    } else {
      user.spectator = false;
    }
    if (world.mode === WORLD.MODE_ZOMBIES && world.players[user.id].skin === WORLD.ZOMBIE_SKIN) {
      user.zombie = true;
    } else {
      user.zombie = false;
    }
    if (world.mode === WORLD.MODE_VAMPIRES && world.players[user.id].skin === WORLD.VAMPIRE_SKIN) {
      user.vampire = true;
    } else {
      user.vampire = false;
    }
    Cookies.set("starve_token", user.token);
    if (_0x240c65[12] === 0) {
      user.shop.delay = 0;
      game.quests.restore(_0x240c65[17]);
      var _0x42abef = _0x240c65[14];
      if (_0x42abef[INV.BAG]) {
        user.inv.update_bag_size(1, 0);
      }
      for (var _0x4c5c05 = 0; _0x4c5c05 < _0x42abef.length; _0x4c5c05++) {
        if (_0x42abef[_0x4c5c05]) {
          if (_0x4c5c05 == INV.BAG) {
            continue;
          } else if (_0x4c5c05 == INV.HAND) {
            continue;
          } else {
            this.gather([0, _0x4c5c05, _0x42abef[_0x4c5c05]]);
          }
        }
      }
      user.shop.open = false;
    } else {
      if (world.mode === WORLD.MODE_LEGACY) {
        this.gather([0, INV.SANDWORM_JUICE, 1]);
      } else if (world.mode === WORLD.MODE_VAMPIRES) {
        if (user.vampire) {
          this.gather([0, INV.ROOF, 4]);
        } else {
          this.gather([0, INV.GARLIC_SEED, 3]);
        }
      }
      if (world.mode === WORLD.MODE_PVP || world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_LEGACY) {
        user.shop.delay = new Date().getTime();
        user.shop.open = true;
        user.shop.value = _0x240c65[13];
        game.shop.init();
      } else {
        user.shop.delay = 0;
        user.shop.open = false;
        user.shop.value = 0;
      }
      user.token_id = _0x240c65[12].toString();
    }
    user.ghost.enabled = _0x240c65[6];
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.now = -1;
    Cookies.set("starve_token_id", user.token_id);
    if (user.reconnect.enabled) {
      user.reconnect.rotate = 0;
      user.reconnect.enabled = false;
    } else {
      ui.quit(game.run);
      if (ga) {
        ga("send", "event", "Game", "play", "S" + ui.skin + "A" + ui.accessory);
      }
    }
  };
  this.connect = function () {
    this.timeout_number = 0;
    this.connect_timeout();
  };
  this.connect_timeout = async function () {
    console.log("Connect inner");
    let _0x268223 = await this.get_rivet_token();
    let _0x362906 = WORLD.RIVET_GAME_MODES[this.current_mode];
    console.log("Current game mode", _0x362906, this.current_mode);
    let _0x202819 = this.selected_server[this.current_mode];
    let _0x41c23a;
    let _0x584c0a;
    if (_0x202819 == 0) {
      _0x41c23a = RIVET_API + "/matchmaker/lobbies/find";
      _0x584c0a = {
        game_modes: [_0x362906]
      };
    } else {
      console.log("Selecting server", this.server_list, this.selected_server, this.current_mode);
      let _0x5512ae = this.server_list.find(_0x23b3e2 => _0x23b3e2.gm == _0x362906 && _0x23b3e2.idx == _0x202819);
      console.log("Selected server", _0x5512ae);
      _0x41c23a = RIVET_API + "/matchmaker/lobbies/join";
      _0x584c0a = {
        lobby_id: _0x5512ae.id
      };
    }
    let _0x1c4120 = {};
    if (_0x268223) {
      _0x1c4120.Authorization = "Bearer " + _0x268223;
    }
    let _0x518d20 = await fetch(_0x41c23a, {
      method: "POST",
      headers: _0x1c4120,
      body: JSON.stringify(_0x584c0a)
    });
    if (!_0x518d20.ok) {
      alert("Failed to join lobby");
      return;
    }
    let _0x59fc47 = await _0x518d20.json();
    console.log("Lobby", _0x59fc47);
    let _0x46b338 = _0x59fc47.lobby.ports.default;
    let _0x389c17 = _0x46b338.host;
    let _0x5e1b99 = _0x46b338.is_tls;
    let _0x35831d = _0x59fc47.lobby.player.token;
    let _0x43e01c = "ws" + (_0x5e1b99 ? "s" : "") + "://" + _0x389c17 + "?token=" + _0x35831d;
    console.log("Socket address", _0x43e01c);
    this.socket = new window.WebSocket(_0x43e01c);
    this.socket.binaryType = "arraybuffer";
    this.socket._current_id = this._current_id;
    this.socket.onmessage = function (_0x308206) {
      if (this._current_id != _0xc72bea._current_id) {
        return;
      }
      if (typeof _0x308206.data == "string") {
        var _0x4ee94c = JSON.parse(_0x308206.data);
        switch (_0x4ee94c[0]) {
          case 0:
            _0xc72bea.chat(_0x4ee94c);
            break;
          case 1:
            _0xc72bea.kick(_0x4ee94c[1]);
            break;
          case 2:
            _0xc72bea.new_player(_0x4ee94c);
            break;
          case 3:
            _0xc72bea.handshake(_0x4ee94c);
            break;
          case 4:
            _0xc72bea.message(_0x4ee94c[1]);
            break;
          case 5:
            _0xc72bea.commands(_0x4ee94c);
            break;
          case 6:
            _0xc72bea.welcome(_0x4ee94c[1]);
            break;
        }
      } else {
        var _0x331d84 = new Uint8Array(_0x308206.data);
        switch (_0x331d84[0]) {
          case 0:
            _0xc72bea.units(_0x308206.data, _0x331d84, false);
            break;
          case 1:
            _0xc72bea.units(_0x308206.data, _0x331d84, true);
            break;
          case 2:
            _0xc72bea.cancel_craft();
            break;
          case 3:
            _0xc72bea.gather(new Uint16Array(_0x308206.data));
            break;
          case 4:
            _0xc72bea.old_version();
            break;
          case 5:
            _0xc72bea.full();
            break;
          case 6:
            _0xc72bea.dont_harvest();
            break;
          case 7:
            _0xc72bea.hitten(_0x308206.data);
            break;
          case 8:
            _0xc72bea.build_stop(_0x331d84[1]);
            break;
          case 9:
            _0xc72bea.build_ok(_0x331d84[1]);
            break;
          case 10:
            _0xc72bea.inv_full();
            break;
          case 11:
            _0xc72bea.decrease_item(_0x331d84[1], _0x331d84[2]);
            break;
          case 12:
            _0xc72bea.workbench(_0x331d84[1]);
            break;
          case 13:
            _0xc72bea.hitten_other(_0x331d84, _0x308206.data);
            break;
          case 14:
            _0xc72bea.mute();
            break;
          case 15:
            _0xc72bea.kill_player(_0x331d84[1]);
            break;
          case 16:
            _0xc72bea.gauges(_0x331d84[1], _0x331d84[2], _0x331d84[3], _0x331d84[4], _0x331d84[5], _0x331d84[6], _0x331d84[7]);
            break;
          case 17:
            _0xc72bea.recover_focus(_0x308206.data);
            break;
          case 18:
            _0xc72bea.empty_res();
            break;
          case 19:
            _0xc72bea.fire(_0x331d84[1]);
            break;
          case 20:
            _0xc72bea.survive();
            break;
          case 21:
            _0xc72bea.leaderboard(_0x308206.data);
            break;
          case 22:
            _0xc72bea.get_time(_0x331d84[1]);
            break;
          case 23:
            _0xc72bea.set_cam(_0x308206.data);
            break;
          case 24:
            _0xc72bea.accept_build(_0x331d84[1]);
            break;
          case 25:
            _0xc72bea.killed(_0x331d84[1], _0x308206.data);
            break;
          case 26:
            _0xc72bea.minimap(_0x331d84);
            break;
          case 27:
            _0xc72bea.fail_restore();
            break;
          case 28:
            _0xc72bea.ghost(_0x331d84[1]);
            break;
          case 29:
            _0xc72bea.reborn();
            break;
          case 30:
            _0xc72bea.steal_token();
            break;
          case 31:
            _0xc72bea.join_new_team(_0x331d84);
            break;
          case 32:
            _0xc72bea.exclude_team(_0x331d84[1]);
            break;
          case 33:
            _0xc72bea.new_member_team(_0x331d84[1]);
            break;
          case 34:
            _0xc72bea.destroy_team();
            break;
          case 35:
            _0xc72bea.kit_ok(_0x331d84[1]);
            break;
          case 36:
            _0xc72bea.water(_0x331d84[1]);
            break;
          case 37:
            _0xc72bea.gauges_life(_0x331d84[1], _0x331d84[2]);
            break;
          case 38:
            _0xc72bea.gauges_food(_0x331d84[1]);
            break;
          case 39:
            _0xc72bea.gauges_water(_0x331d84[1]);
            break;
          case 40:
            _0xc72bea.get_bag();
            break;
          case 41:
            _0xc72bea.verified_account(_0x331d84);
            break;
          case 42:
            _0xc72bea.succeed_quest(_0x331d84[1]);
            break;
          case 43:
            _0xc72bea.fail_quest(_0x331d84[1]);
            break;
          case 44:
            _0xc72bea.claimed(_0x331d84[1]);
            break;
          case 45:
            _0xc72bea.recycle_ok(_0x331d84[1]);
            break;
          case 46:
            _0xc72bea.recycle_stop(_0x331d84[1]);
            break;
          case 47:
            _0xc72bea.well(_0x331d84[1]);
            break;
          case 48:
            _0xc72bea.no_resources();
            break;
          case 50:
            _0xc72bea.decrease_item2(_0x331d84[1], _0x331d84[2], _0x331d84[3]);
            break;
          case 51:
            _0xc72bea.blocked();
            break;
          case 52:
            _0xc72bea.delete_inv_ok(_0x331d84[1]);
            break;
          case 53:
            _0xc72bea.delete_one_inv_ok(_0x331d84[1]);
            break;
          case 54:
            _0xc72bea.account_ok();
            break;
          case 55:
            _0xc72bea.gauges_warm(_0x331d84[1]);
            break;
          case 56:
            _0xc72bea.gauges_cold(_0x331d84[1]);
            break;
          case 57:
            _0xc72bea.new_version();
            break;
          case 58:
            _0xc72bea.wrong_password();
            break;
          case 59:
            _0xc72bea.clean_inventory();
            break;
          case 60:
            _0xc72bea.hide_shop_kit();
            break;
          case 61:
            user.cam.forcedDelay = 0.2;
            user.cam.delay = 3;
            break;
          case 62:
            _0xc72bea.delete_single_inv(new Uint16Array(_0x308206.data));
            break;
          case 63:
            _0xc72bea.hide_clock();
            break;
          case 64:
            _0xc72bea.hide_recipe_book();
            break;
          case 65:
            _0xc72bea.hide_quest();
            break;
          case 66:
            _0xc72bea.hide_market();
            break;
          case 67:
            _0xc72bea.explorer_quest(_0x331d84[1]);
            break;
          case 68:
            _0xc72bea.sand_tempest(_0x331d84[1]);
            break;
          case 69:
            _0xc72bea.blizzard(_0x331d84[1]);
            break;
          case 70:
            _0xc72bea.blizzard_status(_0x331d84[1]);
            break;
          case 71:
            _0xc72bea.bandage(_0x331d84[1]);
            break;
        }
      }
    };
    this.socket.onopen = function () {
      clearTimeout(_0xc72bea.timeout_handler);
      user.newToken = user.newToken || Utils.getURLData("token");
      Utils.get_recaptcha_token().then(_0x30550a => {
        _0xc72bea.socket[SENDWORD](WINDOW10[JSONWORD9].stringify([ui.nickname.input.value, screen.width + 200, screen.height + 200, CLIENT.VERSION_NUMBER, user.token, user.token_id, user.reconnect.enabled ? 1 : 0, ui.skin, ui.accessory, ui.bag, ui.book, ui.crate, ui.dead, userId === undefined ? 0 : userId, userToken === undefined ? 0 : userToken.substring(userToken.length - 50), PASSWORD, user.newToken, _0x30550a]));
        user.newToken = undefined;
        _0xc72bea.timeout_handler = setTimeout(_0xc72bea.timeout, CLIENT.TIMEOUT_TIME);
      });
    };
  };
}
var WORLD = {
  DAY: 480000,
  WITHOUT_BAG: 10,
  WITH_BAG: 16,
  BAG_SIZE: 6,
  GHOST_DELAY: 60,
  TOP: 1,
  BOTTOM: 2,
  LEFT: 4,
  RIGHT: 8,
  ROTATE: 10,
  DIST_CHEST: 100,
  DIST_FURNACE: 100,
  DIST_WINDMILL: 100,
  DIST_WELL: 100,
  DIST_BREAD_OVEN: 100,
  DIST_SIGN: 100,
  DIST_TOTEM: 100,
  DIST_SIGN: 100,
  DIST_RESURRECTION: 100,
  DIST_EXTRACTOR_MACHINE: 100,
  MODE_PVP: 0,
  MODE_HUNGER_GAMES: 1,
  MODE_ZOMBIES: 2,
  MODE_VAMPIRES: 3,
  MODE_LEGACY: 4,
  MODE_BR: 5,
  MODE_COMMUNITY: 6,
  MODE_EXPERIMENTAL: 7,
  RIVET_GAME_MODES: {
    0: "normal",
    2: "zombies",
    3: "vampires",
    4: "forest",
    7: "experimental"
  },
  ZOMBIE_SKIN: 0,
  VAMPIRE_SKIN: 0,
  ROBOT_SKIN: 30,
  GHOST: 2,
  GHOST_DELAY: 60000,
  WT1SY: 0,
  LWT1SY: 0,
  WT1EY: 50,
  WT2SY: 0,
  LWT2SY: 40,
  WT2EY: 39,
  LWT2: 830,
  FLOAM_X: 25,
  FLOAM_Y: 8,
  W1SX: 0,
  LW1SX: 0,
  W1EX: 200,
  W2SX: 0,
  LW2SX: 250,
  W2EX: 150,
  W3SX: 0,
  LW3SX: 350,
  W3EX: 100,
  LSANDX: 700,
  SEED: 39879
};
var SLOW_DOWN = [];
for (var i = 0; i < 500; i++) {
  SLOW_DOWN[i] = 0;
}
SLOW_DOWN[SPRITE.SUPER_DIVING_SUIT] = 1;
SLOW_DOWN[SPRITE.SWORD_WOOD] = 1;
SLOW_DOWN[SPRITE.SWORD] = 1;
SLOW_DOWN[SPRITE.SWORD_GOLD] = 1;
SLOW_DOWN[SPRITE.SWORD_DIAMOND] = 1;
SLOW_DOWN[SPRITE.SWORD_AMETHYST] = 1;
SLOW_DOWN[SPRITE.REIDITE_SWORD] = 1;
SLOW_DOWN[SPRITE.PIRATE_SWORD] = 1;
SLOW_DOWN[SPRITE.DRAGON_SWORD] = 1;
SLOW_DOWN[SPRITE.LAVA_SWORD] = 1;
SLOW_DOWN[SPRITE.SPEAR] = 1;
SLOW_DOWN[SPRITE.GOLD_SPEAR] = 1;
SLOW_DOWN[SPRITE.DIAMOND_SPEAR] = 1;
SLOW_DOWN[SPRITE.AMETHYST_SPEAR] = 1;
SLOW_DOWN[SPRITE.REIDITE_SPEAR] = 1;
SLOW_DOWN[SPRITE.DRAGON_SPEAR] = 1;
SLOW_DOWN[SPRITE.LAVA_SPEAR] = 1;
SLOW_DOWN[SPRITE.WOOD_SPEAR] = 1;
SLOW_DOWN[SPRITE.CRAB_SPEAR] = 1;
var QUESTS = [{
  time: 2880000
}, {
  time: 1440000
}, {
  time: 1920000
}, {
  time: 1440000
}, {
  time: 2880000
}, {
  time: 2400000
}, {
  time: 2400000
}, {
  time: 4800000
}, {
  time: 2880000
}, {
  time: 3360000
}, {
  time: 2880000
}, {
  time: 3840000
}, {
  time: 3360000
}];
var ITEMS = {
  PLAYERS: 0,
  FIRE: 1,
  WORKBENCH: 2,
  SEED: 3,
  WALL: 4,
  SPIKE: 5,
  BIG_FIRE: 6,
  STONE_WALL: 7,
  GOLD_WALL: 8,
  DIAMOND_WALL: 9,
  WOOD_DOOR: 10,
  CHEST: 11,
  STONE_SPIKE: 12,
  GOLD_SPIKE: 13,
  DIAMOND_SPIKE: 14,
  STONE_DOOR: 15,
  GOLD_DOOR: 16,
  DIAMOND_DOOR: 17,
  FURNACE: 18,
  AMETHYST_WALL: 19,
  AMETHYST_SPIKE: 20,
  AMETHYST_DOOR: 21,
  RESURRECTION: 22,
  EMERALD_MACHINE: 23,
  EXTRACTOR_MACHINE_STONE: 24,
  EXTRACTOR_MACHINE_GOLD: 25,
  EXTRACTOR_MACHINE_DIAMOND: 26,
  EXTRACTOR_MACHINE_AMETHYST: 27,
  EXTRACTOR_MACHINE_REIDITE: 28,
  TOTEM: 29,
  BRIDGE: 30,
  WHEAT_SEED: 31,
  WINDMILL: 32,
  PLOT: 33,
  BREAD_OVEN: 34,
  WELL: 35,
  SIGN: 36,
  PUMPKIN_SEED: 37,
  ROOF: 38,
  GARLIC_SEED: 39,
  THORNBUSH_SEED: 40,
  BED: 41,
  GARLAND: 42,
  TOMATO_SEED: 43,
  CARROT_SEED: 44,
  WOOD_DOOR_SPIKE: 45,
  STONE_DOOR_SPIKE: 46,
  GOLD_DOOR_SPIKE: 47,
  DIAMOND_DOOR_SPIKE: 48,
  AMETHYST_DOOR_SPIKE: 49,
  REIDITE_WALL: 50,
  REIDITE_DOOR: 51,
  REIDITE_SPIKE: 52,
  REIDITE_DOOR_SPIKE: 53,
  WATERMELON_SEED: 54,
  ALOE_VERA_SEED: 55,
  WOOD_TOWER: 56,
  WOLF: 60,
  SPIDER: 61,
  FOX: 62,
  BEAR: 63,
  DRAGON: 64,
  PIRANHA: 65,
  KRAKEN: 66,
  CRAB: 67,
  FLAME: 68,
  LAVA_DRAGON: 69,
  BOAR: 70,
  CRAB_BOSS: 71,
  BABY_DRAGON: 72,
  BABY_LAVA: 73,
  HAWK: 74,
  VULTURE: 75,
  SAND_WORM: 76,
  BABY_MAMMOTH: 77,
  MAMMOTH: 78,
  WHEAT_MOB: 79,
  RABBIT: 80,
  TREASURE_CHEST: 81,
  DEAD_BOX: 82,
  PUMPKIN_MOB: 83,
  GARLIC_MOB: 84,
  THORNBUSH_MOB: 85,
  CRATE: 86,
  GIFT: 87,
  PENGUIN: 88,
  ALOE_VERA_MOB: 89,
  FIREFLY: 90,
  SPELL: 91,
  FRUIT: 100
};
var EXTRACTORS = [[ITEMS.EXTRACTOR_MACHINE_STONE, INV.STONE], [ITEMS.EXTRACTOR_MACHINE_GOLD, INV.GOLD], [ITEMS.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND], [ITEMS.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST], [ITEMS.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE]];
function Player() {
  this.nickname = "";
  this.skin = 0;
  this.accessory = 0;
  this.bag = 0;
  this.baglook = 0;
  this.book = 0;
  this.crate = 0;
  this.dead = 0;
  this.level = 0;
  this.label = null;
  this.label_winter = null;
  this.ldb_label = null;
  this.alive = false;
  this.score = 0;
}
function Item(_0x134cc4, _0x54362a, _0x71ff91, _0x394c1a, _0x5e6d13, _0x58f0e0, _0x3af73d, _0x3e6bdb, _0x3e6d62, _0x53420a) {
  this.type = _0x134cc4;
  this.pid = _0x54362a;
  this.id = _0x71ff91;
  this.x = _0x394c1a;
  this.y = _0x5e6d13;
  this.angle = _0x58f0e0;
  this.nangle = _0x58f0e0;
  this.action = _0x3af73d;
  this.info = _0x3e6bdb;
  this.extra = _0x53420a;
  this.r = {
    x: _0x394c1a,
    y: _0x5e6d13
  };
  this.speed = _0x3e6d62;
  if (world) {
    this.uid = _0x54362a * world.max_units + _0x71ff91;
  }
  switch (_0x134cc4) {
    case ITEMS.PLAYERS:
      this.player = world.players[this.pid];
      this.skin = this.player.skin;
      this.baglook = this.player.baglook;
      this.book = this.player.book;
      this.accessory = this.player.accessory;
      this.dist_forest = -1000000;
      this.dist_lava = -1000000;
      this.dist_winter = -1000000;
      this.dist_desert = -1000000;
      this.dist_water = -1000000;
      this.dist_sand = -1000000;
      this.dist_dragon = -1000000;
      this.zombie = world.mode === WORLD.MODE_ZOMBIES && this.skin === WORLD.ZOMBIE_SKIN ? true : false;
      this.vampire = world.mode === WORLD.MODE_VAMPIRES && this.skin === WORLD.VAMPIRE_SKIN ? true : false;
      this.superzombie = this.zombie && this.player.nickname === "  " ? true : false;
      this.foot = [];
      this.tower = 0;
      this.move_effect = true;
      this.id_foot = 0;
      this.fly = 0;
      this.swim = [];
      this.r = {
        x: _0x394c1a,
        y: _0x5e6d13
      };
      this.draw = draw_player;
      this.draw_vehicle = draw_vehicle;
      this.vehicle_fx1 = 0;
      this.vehicle_fx2 = 0;
      this.vehicle_fx3 = 0;
      this.vehicle_fx4 = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.vehicle_fx5 = 0;
      this.tower_fx = 0;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.freeze = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.starve = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.idle = new Utils.LinearAnimation(true, 0, 2.25, -1.5, 3.75, 7.5);
      this.walk = new Utils.LinearAnimation(true, 0, 7.5, -3, 22.5, 33.75);
      this.attack = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 3, 6, 9);
      this.slow_attack = 0;
      this.web = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 1, 3);
      this.move_head = this.superzombie ? new Utils.LinearAnimation(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
      this.angle_init = 0;
      this.text_ease = 0;
      this.text_effect = [];
      this.text_move = [];
      this.text = [];
      this.label = [];
      this.draw_text = draw_chat;
      this.hand = true;
      this.right = -1;
      this.vehicle = -1;
      this.action = STATE.IDLE;
      this.collide = false;
      this.clothe = 0;
      this.ghost = false;
      this.bubbles = [];
      this.bag = 0;
      this.sid = -1;
      this.update = function (_0x3acc33) {
        if (this.info & 32768) {
          this.collide = true;
          this.info = ~32768 & this.info;
        } else {
          this.collide = false;
        }
        if (this.info & 16384) {
          this.info = ~16384 & this.info;
          this.bag = 1;
        } else {
          this.bag = 0;
        }
        this.clothe = Math.floor(this.info / 128);
        this.info -= this.clothe * 128;
        if (this.info === INV.HAND || this.superzombie) {
          this.right = -1;
        } else {
          this.right = this.info;
        }
        this.tower = world.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
        this.vehicle = this.extra & 255;
        if (this.right === WORLD.GHOST) {
          this.ghost = true;
        } else {
          this.ghost = false;
        }
        if (SLOW_DOWN[this.right]) {
          this.weapon = true;
        } else {
          this.weapon = false;
        }
        if (_0x3acc33 & STATE.WEB) {
          this.web.o = false;
          this.web.v = 0.6;
        } else if (_0x3acc33 & STATE.COLD) {
          this.freeze.o = false;
          this.freeze.v = 0.6;
        } else if (_0x3acc33 & STATE.HEAL) {
          this.heal.o = false;
          this.heal.v = 0.6;
        }
        if (_0x3acc33 & STATE.HUNGER) {
          this.starve.o = false;
          this.starve.v = 0.6;
        }
        if (_0x3acc33 & STATE.HURT) {
          this.hit.o = false;
          this.hit.v = 0.6;
        }
        if (_0x3acc33 & STATE.ATTACK) {
          this.slow_attack = CLIENT.SLOW_ATTACK;
          if (audio.run && this.sid !== -1) {
            audio.players[this.sid].swing(SOUND[this.right]);
          }
        }
      };
      this.update();
      break;
    case ITEMS.EMERALD_MACHINE:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_bg = draw_emerald_machine_halo;
      this.draw_fg = draw_emerald_machine;
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.rotate1 = 0;
      this.rotate2 = 0;
      this.draw_life = draw_life;
      break;
    case ITEMS.RESURRECTION:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_bg = draw_resurrection_halo;
      this.draw_fg = draw_resurrection;
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.rotate1 = 0;
      this.rotate2 = 0;
      break;
    case ITEMS.FIRE:
    case ITEMS.BIG_FIRE:
      this.draw_bg = draw_fire_ground;
      this.draw_fg = draw_fire_halo;
      this.fire = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.3, 0.3);
      this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.TOMATO_SEED:
      this.draw_bg = draw_tomato;
      this.draw_fg = draw_tomato_fruit;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.fruits = [];
      for (var _0x75b9b6 = 0; _0x75b9b6 < 3; _0x75b9b6++) {
        this.fruits.push({
          draw: draw_breath_2,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      this.fruits[0].x = this.x - 16.5;
      this.fruits[0].y = this.y - 15.5;
      this.fruits[0].angle = this.angle;
      this.fruits[1].x = this.x + 36;
      this.fruits[1].y = this.y + 17;
      this.fruits[1].angle = this.angle;
      this.fruits[2].x = this.x - 18.5;
      this.fruits[2].y = this.y + 39;
      this.fruits[2].angle = this.angle;
      break;
    case ITEMS.SEED:
      this.draw_bg = draw_seed;
      this.draw_fg = draw_plant;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.fruits = [];
      for (var _0x75b9b6 = 0; _0x75b9b6 < 3; _0x75b9b6++) {
        this.fruits.push({
          draw: draw_breath,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      this.fruits[0].x = this.x - 16.5;
      this.fruits[0].y = this.y - 15.5;
      this.fruits[1].x = this.x - 5.5;
      this.fruits[1].y = this.y + 7.5;
      this.fruits[2].x = this.x + 18;
      this.fruits[2].y = this.y - 5;
      break;
    case ITEMS.BABY_MAMMOTH:
      this.draw = draw_baby_mammoth;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BOAR:
      this.draw = draw_boar;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.CRAB_BOSS:
      this.draw = draw_crab_boss;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.CRAB:
      this.draw = draw_crab;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FLAME:
      this.draw = draw_simple_mobs_hd;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FIREFLY:
      this.draw = draw_simple_mobs;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SPELL:
      this.spell = this.info & 15;
      this.fly = this.extra & 1;
      this.born = 0;
      this.x = this.info;
      this.y = this.extra;
      this.draw = draw_spell;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
      break;
    case ITEMS.RABBIT:
    case ITEMS.WOLF:
    case ITEMS.SPIDER:
    case ITEMS.FOX:
    case ITEMS.BEAR:
    case ITEMS.MAMMOTH:
    case ITEMS.PIRANHA:
    case ITEMS.KRAKEN:
    case ITEMS.PENGUIN:
      this.draw = draw_simple_mobs;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SIGN:
      this.draw = draw_sign;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.BREAD_OVEN:
      this.draw_fg = draw_bread_oven_smog;
      this.draw = draw_bread_oven;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.up = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.1, 0.1);
      this.smog = [];
      break;
    case ITEMS.GIFT:
      this.angle = Math.random() * Math.PI / 2;
    case ITEMS.CRATE:
    case ITEMS.DEAD_BOX:
      this.draw = draw_crate;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.TREASURE_CHEST:
      this.draw = draw_simple_mobs_2;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.LAVA_DRAGON:
      this.scale = 1;
      this.draw = draw_lava_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SAND_WORM:
      this.dig = 0;
      this.ground = [];
      this.groundTimer = 0;
      this.draw_ground = draw_sand_worm_ground;
      this.draw = draw_sand_worm;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.VULTURE:
      this.x = this.info;
      this.y = this.extra;
      this.scale = 1;
      this._alpha = 0;
      this.draw = draw_vulture;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.HAWK:
      this.x = this.info;
      this.y = this.extra;
      this.scale = 1;
      this._alpha = 0;
      this.draw = draw_hawk;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BABY_LAVA:
      this.scale = 1;
      this.draw = draw_baby_lava;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BABY_DRAGON:
      this.scale = 1;
      this.draw = draw_baby_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.DRAGON:
      this.scale = 1;
      this.draw = draw_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FRUIT:
      this.fruits = [];
      for (var _0x75b9b6 = 0; _0x75b9b6 < 5; _0x75b9b6++) {
        this.fruits.push({
          draw: draw_breath,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      switch (this.id % 3) {
        case 0:
          this.fruits[0].x = this.x - 20.5;
          this.fruits[0].y = this.y - 22.5;
          this.fruits[1].x = this.x - 35.5;
          this.fruits[1].y = this.y + 7.5;
          this.fruits[2].x = this.x + 7.5;
          this.fruits[2].y = this.y - 30;
          this.fruits[3].x = this.x + 22.5;
          this.fruits[3].y = this.y;
          this.fruits[4].x = this.x - 7.5;
          this.fruits[4].y = this.y + 14.5;
          break;
        case 1:
          this.fruits[0].x = this.x - 30.5;
          this.fruits[0].y = this.y - 22.5;
          this.fruits[1].x = this.x - 15.5;
          this.fruits[1].y = this.y + 7.5;
          this.fruits[2].x = this.x + 15.5;
          this.fruits[2].y = this.y - 30;
          this.fruits[3].x = this.x + 12.5;
          this.fruits[3].y = this.y + 5;
          this.fruits[4].x = this.x - 40.5;
          this.fruits[4].y = this.y + 14.5;
          break;
        case 2:
          this.fruits[0].x = this.x - 20.5;
          this.fruits[0].y = this.y - 20.5;
          this.fruits[1].x = this.x - 35.5;
          this.fruits[1].y = this.y + 15.5;
          this.fruits[2].x = this.x + 7.5;
          this.fruits[2].y = this.y - 17;
          this.fruits[3].x = this.x + 22.5;
          this.fruits[3].y = this.y + 5;
          this.fruits[4].x = this.x - 7.5;
          this.fruits[4].y = this.y + 1.5;
          break;
      }
      break;
    case ITEMS.WHEAT_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_wheat;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.wind = new Utils.LinearAnimation(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
      break;
    case ITEMS.THORNBUSH_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_thornbush;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.GARLIC_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_garlic;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.CARROT_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_carrot;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.ALOE_VERA_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_aloe_vera;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.WATERMELON_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_watermelon;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.PUMPKIN_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_pumpkin;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.EXTRACTOR_MACHINE_STONE:
      this.draw = draw_extractor_stone;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_GOLD:
      this.draw = draw_extractor_gold;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
      this.draw = draw_extractor_diamond;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
      this.draw = draw_extractor_amethyst;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_REIDITE:
      this.draw = draw_extractor_reidite;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.WINDMILL:
      this.draw_bg = draw_windmill_head;
      this.draw_fg = draw_windmill_wings;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.ROOF:
      this.draw = draw_roof;
      this.j = Math.floor(this.x / 100);
      this.i = Math.floor(this.y / 100);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.opacity = 1;
      this.draw_life = draw_life_small;
      break;
    case ITEMS.GARLAND:
      this.draw = draw_garland;
      this.halo = new Utils.LinearAnimation(false, 1, 1.15, 1, 0.3, 0.3);
      this.color = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.PLOT:
    case ITEMS.WORKBENCH:
    case ITEMS.WOOD_TOWER:
    case ITEMS.WELL:
    case ITEMS.TOTEM:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.BRIDGE:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life_small;
      break;
    case ITEMS.WALL:
    case ITEMS.STONE_WALL:
    case ITEMS.GOLD_WALL:
    case ITEMS.DIAMOND_WALL:
    case ITEMS.AMETHYST_WALL:
    case ITEMS.REIDITE_WALL:
    case ITEMS.SPIKE:
    case ITEMS.STONE_SPIKE:
    case ITEMS.GOLD_SPIKE:
    case ITEMS.DIAMOND_SPIKE:
    case ITEMS.AMETHYST_SPIKE:
    case ITEMS.REIDITE_SPIKE:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life;
      break;
    case ITEMS.BED:
      this.draw = draw_bed;
      this.opacity = 1;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      var _0x584d24 = this.angle % (Math.PI / 2);
      if (_0x584d24 < Math.PI / 4) {
        this.angle -= _0x584d24;
      } else {
        this.angle += Math.PI / 2 - _0x584d24;
      }
      break;
    case ITEMS.WHEAT_MOB:
      this.draw = draw_wheat_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.ALOE_VERA_MOB:
      this.draw = draw_aloe_vera_mob;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.PUMPKIN_MOB:
      this.draw = draw_pumpkin_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.GARLIC_MOB:
      this.draw = draw_garlic_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.THORNBUSH_MOB:
      this.draw = draw_thornbush_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.CHEST:
      this.update = function (_0x3d60de) {
        this.lock = this.info & 8192 ? 1 : 0;
        this.info = this.info & 8191;
        this.action = _0x3d60de;
      };
      this.draw = draw_chest;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.lock = 0;
      this.update(this.action);
      break;
    case ITEMS.WOOD_DOOR_SPIKE:
    case ITEMS.STONE_DOOR_SPIKE:
    case ITEMS.GOLD_DOOR_SPIKE:
    case ITEMS.DIAMOND_DOOR_SPIKE:
    case ITEMS.AMETHYST_DOOR_SPIKE:
    case ITEMS.REIDITE_DOOR_SPIKE:
    case ITEMS.WOOD_DOOR:
    case ITEMS.STONE_DOOR:
    case ITEMS.GOLD_DOOR:
    case ITEMS.DIAMOND_DOOR:
    case ITEMS.AMETHYST_DOOR:
    case ITEMS.REIDITE_DOOR:
      this.draw = draw_door;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life;
      break;
    case ITEMS.FURNACE:
      this.draw_bg = draw_furnace_ground;
      this.draw = draw_furnace;
      this.draw_fg = draw_furnace_halo;
      this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.02, 0.02);
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.04, 0.04);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.update = function (_0x40dfa9) {
        this.action = _0x40dfa9;
      };
      break;
  }
}
function World(_0x2fb455) {
  this.mode = WORLD.MODE_PVP;
  this.max_units = _0x2fb455;
  this.custom_map = 0;
  this.islands = 6;
  this.players = [];
  this.units = [];
  this.units[ITEMS.PLAYERS] = [];
  this.units[ITEMS.FRUIT] = [];
  this.units[ITEMS.RABBIT] = [];
  this.units[ITEMS.WOLF] = [];
  this.units[ITEMS.CRAB] = [];
  this.units[ITEMS.BOAR] = [];
  this.units[ITEMS.BABY_MAMMOTH] = [];
  this.units[ITEMS.CRAB_BOSS] = [];
  this.units[ITEMS.BABY_DRAGON] = [];
  this.units[ITEMS.BABY_LAVA] = [];
  this.units[ITEMS.HAWK] = [];
  this.units[ITEMS.PIRANHA] = [];
  this.units[ITEMS.KRAKEN] = [];
  this.units[ITEMS.FOX] = [];
  this.units[ITEMS.PENGUIN] = [];
  this.units[ITEMS.SPELL] = [];
  this.units[ITEMS.FIREFLY] = [];
  this.units[ITEMS.BEAR] = [];
  this.units[ITEMS.MAMMOTH] = [];
  this.units[ITEMS.DRAGON] = [];
  this.units[ITEMS.LAVA_DRAGON] = [];
  this.units[ITEMS.FLAME] = [];
  this.units[ITEMS.WHEAT_MOB] = [];
  this.units[ITEMS.ALOE_VERA_MOB] = [];
  this.units[ITEMS.PUMPKIN_MOB] = [];
  this.units[ITEMS.GARLIC_MOB] = [];
  this.units[ITEMS.THORNBUSH_MOB] = [];
  this.units[ITEMS.TREASURE_CHEST] = [];
  this.units[ITEMS.DEAD_BOX] = [];
  this.units[ITEMS.CRATE] = [];
  this.units[ITEMS.BREAD_OVEN] = [];
  this.units[ITEMS.SIGN] = [];
  this.units[ITEMS.SPIDER] = [];
  this.units[ITEMS.WORKBENCH] = [];
  this.units[ITEMS.FIRE] = [];
  this.units[ITEMS.BIG_FIRE] = [];
  this.units[ITEMS.SEED] = [];
  this.units[ITEMS.SPIKE] = [];
  this.units[ITEMS.STONE_SPIKE] = [];
  this.units[ITEMS.GOLD_SPIKE] = [];
  this.units[ITEMS.DIAMOND_SPIKE] = [];
  this.units[ITEMS.AMETHYST_SPIKE] = [];
  this.units[ITEMS.REIDITE_SPIKE] = [];
  this.units[ITEMS.WALL] = [];
  this.units[ITEMS.STONE_WALL] = [];
  this.units[ITEMS.GOLD_WALL] = [];
  this.units[ITEMS.DIAMOND_WALL] = [];
  this.units[ITEMS.AMETHYST_WALL] = [];
  this.units[ITEMS.REIDITE_WALL] = [];
  this.units[ITEMS.BED] = [];
  this.units[ITEMS.WOOD_DOOR] = [];
  this.units[ITEMS.STONE_DOOR] = [];
  this.units[ITEMS.GOLD_DOOR] = [];
  this.units[ITEMS.DIAMOND_DOOR] = [];
  this.units[ITEMS.AMETHYST_DOOR] = [];
  this.units[ITEMS.REIDITE_DOOR] = [];
  this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
  this.units[ITEMS.STONE_DOOR_SPIKE] = [];
  this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
  this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
  this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
  this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
  this.units[ITEMS.FURNACE] = [];
  this.units[ITEMS.TOTEM] = [];
  this.units[ITEMS.WOOD_TOWER] = [];
  this.units[ITEMS.CHEST] = [];
  this.units[ITEMS.RESURRECTION] = [];
  this.units[ITEMS.EMERALD_MACHINE] = [];
  this.units[ITEMS.BRIDGE] = [];
  this.units[ITEMS.ROOF] = [];
  this.units[ITEMS.PLOT] = [];
  this.units[ITEMS.WHEAT_SEED] = [];
  this.units[ITEMS.ALOE_VERA_SEED] = [];
  this.units[ITEMS.PUMPKIN_SEED] = [];
  this.units[ITEMS.TOMATO_SEED] = [];
  this.units[ITEMS.CARROT_SEED] = [];
  this.units[ITEMS.WATERMELON_SEED] = [];
  this.units[ITEMS.GARLIC_SEED] = [];
  this.units[ITEMS.THORNBUSH_SEED] = [];
  this.units[ITEMS.WINDMILL] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
  this.units[ITEMS.WELL] = [];
  this.units[ITEMS.GIFT] = [];
  this.units[ITEMS.GARLAND] = [];
  this.fast_units = [];
  this.nw = 260;
  this.nh = 260;
  this.dw = 100;
  this.dh = 100;
  this.w = this.nw * this.dw;
  this.h = this.nh * this.dh;
  this.RNG = new RNG.Random();
  this.biomes = [];
  this.shade = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  this.transition = false;
  this.BIOME = [];
  this.BIOME_FOREST = 0;
  this.BIOME_WINTER = 1;
  this.BIOME_LAVA = 2;
  this.BIOME_DRAGON = 3;
  this.BIOME_SEA = 4;
  this.BIOME_DESERT = 10;
  this.BIOME[this.BIOME_FOREST] = {
    isSand: 1,
    day: [19, 58, 43],
    night: [4, 43, 48],
    _color: ["#133a2b", "#042b30"]
  };
  this.BIOME[this.BIOME_SEA] = {
    isSand: 0,
    day: [11, 106, 132],
    night: [9, 55, 63],
    _color: ["#0B6A84", "#09373F"]
  };
  this.BIOME[this.BIOME_WINTER] = {
    isSand: 0,
    day: [235, 242, 240],
    night: [19, 97, 103],
    _color: ["#EBF2F0", "#136167"]
  };
  this.BIOME[this.BIOME_LAVA] = {
    isSand: 0,
    day: [45, 32, 23],
    night: [3, 28, 30],
    _color: ["#2D2017", "#031C1E"]
  };
  this.BIOME[this.BIOME_DRAGON] = {
    isSand: 0,
    day: [74, 74, 74],
    night: [24, 61, 60],
    _color: ["#4A4A4A", "#183D3C"]
  };
  this.BIOME[this.BIOME_DESERT] = {
    isSand: 0,
    day: [235, 216, 166],
    night: [9, 61, 56],
    _color: ["#EBD8A6", "#093D38"]
  };
  this.Biome = function (_0x239997, _0x3aef58, _0x3c3589, _0x398308, _0x1730f6, _0x192741) {
    this.x1 = _0x3aef58 * 100;
    this.y1 = _0x3c3589 * 100;
    this.w = _0x398308 * 100;
    this.h = _0x1730f6 * 100;
    this.x2 = (_0x3aef58 + _0x398308) * 100;
    this.y2 = (_0x3c3589 + _0x1730f6) * 100;
    this.t = _0x239997;
    if (_0x192741 === undefined) {
      this.v = 15;
    } else {
      this.v = _0x192741;
    }
  };
  function _0x5530aa(_0xecde16, _0x5112f6, _0x544b0a, _0x32df15, _0x6cb4ee) {
    var _0xc717f1 = _0x5112f6 + Math.floor(world.RNG.get() * _0x32df15);
    var _0x2733d7 = _0x544b0a + Math.floor(world.RNG.get() * _0x32df15);
    var _0x2a038e = 10 + Math.floor(world.RNG.get() * (world.nw - _0xc717f1 - 20));
    var _0x416a6d = 10 + Math.floor(world.RNG.get() * (world.nh - _0x2733d7 - 20));
    var _0x3bfb12 = _0x2a038e + _0xc717f1;
    var _0x4fcb74 = _0x416a6d + _0x2733d7;
    for (var _0x3f96c2 = 0; _0x3f96c2 < world.biomes.length; _0x3f96c2++) {
      var _0x1e0872 = world.biomes[_0x3f96c2];
      if (Utils.intersect_aabb(_0x2a038e, _0x3bfb12, _0x416a6d, _0x4fcb74, _0x1e0872.x1 / 100 - _0x6cb4ee, _0x1e0872.x2 / 100 + _0x6cb4ee, _0x1e0872.y1 / 100 - _0x6cb4ee, _0x1e0872.y2 / 100 + _0x6cb4ee) === 1) {
        return 0;
      }
    }
    world.biomes.push(new world.Biome(_0xecde16, _0x2a038e, _0x416a6d, _0xc717f1, _0x2733d7, 15));
    return 1;
  }
  ;
  function _0x1d89b1(_0x2945ef, _0x15df47, _0x586627) {
    var _0x4dca28 = 0;
    var _0x3ea4ee = _0x15df47;
    for (var _0x18d71d = _0x586627; _0x18d71d < world.nh; _0x18d71d++) {
      for (var _0x5bc8a8 = _0x15df47; _0x5bc8a8 < world.nw; _0x5bc8a8++) {
        if (_0x18d71d === _0x586627) {
          _0x3ea4ee = Math.max(_0x5bc8a8, _0x3ea4ee);
        }
        if (_0x5bc8a8 > _0x3ea4ee) {
          break;
        }
        if (_0x2945ef[_0x18d71d][_0x5bc8a8] === 1) {
          break;
        }
        _0x2945ef[_0x18d71d][_0x5bc8a8] = 1;
      }
      if (_0x5bc8a8 < _0x3ea4ee) {
        break;
      }
    }
    world.biomes.push(new world.Biome(world.BIOME_SEA, _0x15df47, _0x586627, _0x3ea4ee - _0x15df47 + 1, _0x18d71d - _0x586627, 15));
  }
  ;
  function _0x1376cf(_0x3a5ad8, _0x374b58, _0x172d3d, _0xdc871a, _0x2dee89) {
    for (var _0x1fb481 = 0; _0x1fb481 < _0x2dee89; _0x1fb481++) {
      if (_0x5530aa(_0x3a5ad8, _0x374b58, _0x172d3d, _0xdc871a, 8) === 1) {
        break;
      }
    }
    if (_0x1fb481 === _0x2dee89) {
      return 0;
    }
    return 1;
  }
  ;
  this.MAX_DIST = -1000000;
  this.dist_winter = this.MAX_DIST;
  this.dist_desert = this.MAX_DIST;
  this.dist_lava = this.MAX_DIST;
  this.dist_forest = this.MAX_DIST;
  this.dist_water = this.MAX_DIST;
  this.dist_dragon = this.MAX_DIST;
  this.dist_from_biomes = function (_0xbc9aac) {
    var _0x3798bb = _0xbc9aac.r.x;
    var _0x22057a = _0xbc9aac.r.y;
    var _0x4e860a = Math.floor(_0x22057a / 100);
    var _0x337453 = Math.floor(_0x3798bb / 100);
    _0xbc9aac.dist_winter = world.MAX_DIST;
    _0xbc9aac.dist_desert = world.MAX_DIST;
    _0xbc9aac.dist_lava = world.MAX_DIST;
    _0xbc9aac.dist_forest = world.MAX_DIST;
    _0xbc9aac.dist_dragon = world.MAX_DIST;
    _0xbc9aac.dist_sand = world.MAX_DIST;
    for (var _0x4e2f95 = 0; world.biomes[_0x4e2f95].t !== world.BIOME_SEA; _0x4e2f95++) {
      if (world.biomes[_0x4e2f95].t === world.BIOME_FOREST) {
        var _0x1ff3cf = world.dist_from_biome(_0x4e2f95, _0x3798bb, _0x22057a);
        _0xbc9aac.dist_forest = Math.max(_0xbc9aac.dist_forest, _0x1ff3cf);
        if (_0x1ff3cf > 0 && world.dist_from_sand(_0x4e2f95, _0x3798bb, _0x22057a) === 1) {
          _0xbc9aac.dist_sand = 1;
        }
      } else if (world.biomes[_0x4e2f95].t === world.BIOME_WINTER) {
        _0xbc9aac.dist_winter = Math.max(_0xbc9aac.dist_winter, world.dist_from_biome(_0x4e2f95, _0x3798bb, _0x22057a));
      } else if (world.biomes[_0x4e2f95].t === world.BIOME_DESERT) {
        _0xbc9aac.dist_desert = Math.max(_0xbc9aac.dist_desert, world.dist_from_biome(_0x4e2f95, _0x3798bb, _0x22057a));
      } else if (world.biomes[_0x4e2f95].t === world.BIOME_LAVA) {
        _0xbc9aac.dist_lava = Math.max(_0xbc9aac.dist_lava, world.dist_from_biome(_0x4e2f95, _0x3798bb, _0x22057a));
      } else if (world.biomes[_0x4e2f95].t === world.BIOME_DRAGON) {
        _0xbc9aac.dist_dragon = Math.max(_0xbc9aac.dist_dragon, world.dist_from_biome(_0x4e2f95, _0x3798bb, _0x22057a));
      }
    }
    if (MAP.tiles[_0x4e860a][_0x337453].iblk) {
      _0xbc9aac.dist_sand = 1;
    }
    if (world.find_bridge(_0x337453, _0x4e860a)) {
      _0xbc9aac.dist_water = _0xbc9aac.MAX_DIST;
    } else if (MAP.tiles[_0x4e860a][_0x337453].wtb || _0xbc9aac.dist_winter < 0 && _0xbc9aac.dist_lava < 0 && _0xbc9aac.dist_forest < 0 && _0xbc9aac.dist_sand < 0 && _0xbc9aac.dist_dragon < 0 && _0xbc9aac.dist_desert < 0) {
      _0xbc9aac.dist_water = 1;
    } else {
      _0xbc9aac.dist_water = _0xbc9aac.MAX_DIST;
    }
  };
  this.update_dist_from_biomes = function (_0x6904df, _0x3e541e) {
    world.dist_winter = world.MAX_DIST;
    world.dist_desert = world.MAX_DIST;
    world.dist_lava = world.MAX_DIST;
    world.dist_dragon = world.MAX_DIST;
    world.dist_forest = world.MAX_DIST;
    for (var _0x13973e = 0; world.biomes[_0x13973e].t !== world.BIOME_SEA; _0x13973e++) {
      if (world.biomes[_0x13973e].t === world.BIOME_FOREST) {
        world.dist_forest = Math.max(world.dist_forest, world.dist_from_biome(_0x13973e, _0x6904df, _0x3e541e));
      } else if (world.biomes[_0x13973e].t === world.BIOME_WINTER) {
        world.dist_winter = Math.max(world.dist_winter, world.dist_from_biome(_0x13973e, _0x6904df, _0x3e541e));
      } else if (world.biomes[_0x13973e].t === world.BIOME_DESERT) {
        world.dist_desert = Math.max(world.dist_desert, world.dist_from_biome(_0x13973e, _0x6904df, _0x3e541e));
      } else if (world.biomes[_0x13973e].t === world.BIOME_LAVA) {
        world.dist_lava = Math.max(world.dist_lava, world.dist_from_biome(_0x13973e, _0x6904df, _0x3e541e));
      } else if (world.biomes[_0x13973e].t === world.BIOME_DRAGON) {
        world.dist_dragon = Math.max(world.dist_dragon, world.dist_from_biome(_0x13973e, _0x6904df, _0x3e541e));
      }
    }
    if (world.dist_winter < 0 && world.dist_dragon < 0 && world.dist_forest < 0 && world.dist_dragon < 0 && world.dist_desert < 0) {
      world.dist_water = 1;
    } else {
      world.dist_water = world.MAX_DIST;
    }
  };
  this.dist_from_sand = function (_0x507d9c, _0x57e312, _0x269a14) {
    var _0x587ccd = world.biomes[_0x507d9c];
    var _0xe939d1 = 0;
    x1 = _0x587ccd.x1 + 30 + ((_0x587ccd.v & WORLD.LEFT) === 0 ? 150 : 0);
    var _0x52ca73 = _0x57e312 - x1;
    if ((_0x587ccd.v & WORLD.LEFT) > 0 && _0x52ca73 > 0 && _0x52ca73 < 320) {
      _0xe939d1 = 1;
    }
    y1 = _0x587ccd.y1 + 250 + ((_0x587ccd.v & WORLD.TOP) === 0 ? 150 : 0);
    _0x52ca73 = _0x269a14 - y1;
    if ((_0x587ccd.v & WORLD.TOP) > 0 && _0x52ca73 > 0 && _0x52ca73 < 320) {
      _0xe939d1 = 1;
    }
    x2 = _0x587ccd.x2 + 80 + ((_0x587ccd.v & WORLD.RIGHT) === 0 ? -200 : 0);
    _0x52ca73 = x2 - _0x57e312;
    if ((_0x587ccd.v & WORLD.RIGHT) > 0 && _0x52ca73 > 0 && _0x52ca73 < 320) {
      _0xe939d1 = 1;
    }
    y2 = _0x587ccd.y2 - 200 + ((_0x587ccd.v & WORLD.BOTTOM) === 0 ? -200 : 0);
    _0x52ca73 = y2 - _0x269a14;
    if ((_0x587ccd.v & WORLD.BOTTOM) > 0 && _0x52ca73 > 0 && _0x52ca73 < 320) {
      _0xe939d1 = 1;
    }
    if (_0x57e312 >= x1 && _0x57e312 <= x2 && _0x269a14 >= y1 && _0x269a14 <= y2) {
      return _0xe939d1;
    }
    return 0;
  };
  this.dist_from_biome = function (_0x26c62c, _0x588ce8, _0x1dab89) {
    var _0x303459 = world.biomes[_0x26c62c];
    x1 = _0x303459.x1 + 30;
    y1 = _0x303459.y1 + 250;
    x2 = _0x303459.x2 + 80;
    y2 = _0x303459.y2 - 200;
    if (_0x588ce8 >= x1 && _0x588ce8 <= x2 && _0x1dab89 >= y1 && _0x1dab89 <= y2) {
      return Math.min(_0x588ce8 - x1, x2 - _0x588ce8, _0x1dab89 - y1, y2 - _0x1dab89);
    }
    var _0x55a812 = -1000000;
    if (_0x588ce8 - x1 < 0) {
      _0x55a812 = Math.max(_0x55a812, _0x588ce8 - x1);
    } else if (x2 - _0x588ce8 < 0) {
      _0x55a812 = Math.max(_0x55a812, x2 - _0x588ce8);
    }
    distY = -1000000;
    if (_0x1dab89 < y1 || _0x1dab89 > y2) {
      if (_0x1dab89 - y1 < 0) {
        distY = Math.max(distY, _0x1dab89 - y1);
      } else {
        distY = Math.max(distY, y2 - _0x1dab89);
      }
      if (_0x55a812 !== -1000000 && distY !== -1000000) {
        _0x55a812 = Math.min(_0x55a812, distY);
      } else {
        _0x55a812 = distY;
      }
    }
    return _0x55a812;
  };
  function _0x3b3a52(_0x1fb9b0, _0x272846) {
    var _0x1d833e = world.biomes[_0x272846];
    for (var _0x587594 = 0, _0x5e9e0c = 0; _0x587594 < _0x1fb9b0 && _0x5e9e0c < 10000; _0x5e9e0c++) {
      var _0x313a81 = _0x1d833e.y1 + world.RNG.get() * _0x1d833e.h;
      var _0x587c66 = _0x1d833e.x1 + world.RNG.get() * _0x1d833e.w;
      var _0x5c2423 = Math.floor(_0x313a81 / 100);
      var _0x2c2b55 = Math.floor(_0x587c66 / 100);
      var _0x53b60b = world.dist_from_biome(_0x272846, _0x2c2b55 * 100 + 50, _0x5c2423 * 100 + 50);
      if (_0x53b60b < 600) {
        continue;
      }
      var _0x260a8a = 1;
      for (var _0x238056 = _0x5c2423 - 4; _0x260a8a === 1 && _0x238056 <= _0x5c2423 + 4; _0x238056++) {
        for (var _0x303cdd = _0x2c2b55 - 4; _0x260a8a === 1 && _0x303cdd <= _0x2c2b55 + 4; _0x303cdd++) {
          if (MAP.tiles[_0x238056][_0x303cdd] !== undefined) {
            _0x260a8a = 0;
          }
        }
      }
      if (_0x260a8a === 0) {
        continue;
      }
      _0x287da8(_0x5c2423, _0x2c2b55, "la", _0x587594 % 6, 0);
      _0x587594++;
    }
  }
  function _0x562dac(_0x3bc95d, _0x545046, _0x38c055, _0x51bdce, _0x175134, _0x5c9950, _0xdcd974, _0x1bf248) {
    var _0x2bcb21 = Math.floor(_0xdcd974 / 2);
    var _0x461a1c = Math.max(1, Math.floor(_0xdcd974 / 2));
    var _0x28acc4 = Math.floor(_0x1bf248 / 2);
    var _0xe0ef4f = Math.max(1, Math.floor(_0x1bf248 / 2));
    for (var _0x210a90 = 0; _0x210a90 < _0x38c055; _0x210a90++) {
      for (var _0x4f7fe8 = _0x3bc95d - _0x28acc4; _0x4f7fe8 < _0x3bc95d + _0xe0ef4f; _0x4f7fe8++) {
        for (var _0x597d60 = _0x545046 - _0x2bcb21; _0x597d60 < _0x545046 + _0x461a1c; _0x597d60++) {
          if (_0x287da8(_0x4f7fe8, _0x597d60, "wtb", 0, 1) === 1) {
            _0x5c9950.push([_0x4f7fe8, _0x597d60, 1]);
          }
        }
      }
      _0x3bc95d += _0x51bdce;
      _0x545046 += _0x175134;
    }
  }
  ;
  function _0x460fc7(_0x154735, _0x47e71f) {
    var _0x18b97d = world.biomes[_0x154735];
    var _0x11d0cb = Math.floor(_0x18b97d.y1 / 100);
    var _0x2c42ba = Math.floor(_0x18b97d.x1 / 100);
    var _0x3724c5 = Math.floor(_0x18b97d.h / 100);
    var _0x5d9088 = Math.floor(_0x18b97d.w / 100);
    var _0x2dabcf = _0x11d0cb + Math.floor(_0x3724c5 / 2);
    var _0x3fb7e2 = _0x2c42ba + Math.floor(_0x5d9088 / 2);
    for (var _0x3c97dd = 0; _0x3c97dd < 3; _0x3c97dd++) {
      var _0x101e2a = Math.floor(_0x2dabcf - 3 + world.RNG.get() * 6);
      var _0x1d5492 = Math.floor(_0x3fb7e2 - 3 + world.RNG.get() * 6);
      _0x287da8(_0x101e2a, _0x1d5492, "plm", _0x3c97dd, 1);
    }
    for (var _0x3c97dd = 0; _0x3c97dd < 80; _0x3c97dd++) {
      var _0x101e2a = Math.floor(_0x2dabcf - 3 + world.RNG.get() * 6);
      var _0x1d5492 = Math.floor(_0x3fb7e2 - 3 + world.RNG.get() * 6);
      if (_0x287da8(_0x101e2a, _0x1d5492, "wtb", 0, 1) === 1) {
        _0x47e71f.push([_0x101e2a, _0x1d5492, 0]);
      }
    }
  }
  ;
  function _0x444e6c(_0x523cd3, _0x4e0534) {
    var _0x359fb3 = world.biomes[_0x523cd3];
    var _0x18ceb9 = Math.floor(_0x359fb3.y1 / 100);
    var _0x26f0c1 = Math.floor(_0x359fb3.x1 / 100);
    var _0x5012ee = Math.floor(_0x359fb3.h / 100);
    var _0x32d676 = Math.floor(_0x359fb3.w / 100);
    var _0x2cedf1 = _0x18ceb9 + _0x5012ee;
    var _0x6d9615 = _0x26f0c1 + _0x32d676;
    var _0x5622ec = 2;
    var _0x5d694b = _0x5012ee;
    var _0x4760b7 = _0x18ceb9;
    var _0x5a9ca6 = _0x26f0c1 + 10 + Math.floor((_0x32d676 - 20) * world.RNG.get());
    for (var _0x2bff5c = _0x5a9ca6 - 4; _0x2bff5c < _0x5a9ca6 + 4; _0x2bff5c++) {
      _0x287da8(_0x18ceb9 - 1, _0x2bff5c, "wtb", 0, 1);
    }
    while (_0x5d694b > 0) {
      if (_0x5622ec === 2) {
        for (var _0x516abe = 10; _0x516abe > 1; _0x516abe--) {
          _0x562dac(_0x4760b7, _0x5a9ca6, 1, 1, 0, _0x4e0534, _0x516abe, 1);
          _0x5d694b -= 1;
          _0x4760b7 += 1;
        }
        _0x5622ec = 0;
        continue;
      }
      if (_0x5d694b < 10) {
        for (var _0x516abe = 1; _0x5d694b > 0; _0x516abe++) {
          _0x562dac(_0x4760b7, _0x5a9ca6, 1, 1, 0, _0x4e0534, _0x516abe, 1);
          _0x5d694b -= 1;
          _0x4760b7 += 1;
        }
        continue;
      }
      if (_0x5622ec === 1) {
        var _0x37bf78 = Math.min(_0x5d694b, Math.floor(1 + world.RNG.get() * 4));
        var _0x32d676 = 1 + Math.floor(world.RNG.get() * 4);
        _0x562dac(_0x4760b7, _0x5a9ca6, _0x37bf78, 1, 0, _0x4e0534, _0x32d676, _0x32d676);
        _0x5622ec = 0;
        _0x5d694b -= _0x37bf78;
        _0x4760b7 += _0x37bf78;
        continue;
      }
      _0x5622ec = 1;
      var _0x4c7988 = Math.floor(1 + world.RNG.get() * 2);
      var _0x5aa924 = 1 + Math.floor(world.RNG.get() * 4);
      if (_0x5a9ca6 < _0x26f0c1 + 16) {
        _0x562dac(_0x4760b7, _0x5a9ca6, _0x4c7988, 0, 1, _0x4e0534, _0x5aa924, _0x5aa924);
        _0x5a9ca6 += _0x4c7988;
      } else if (_0x5a9ca6 > _0x6d9615 - 16) {
        _0x562dac(_0x4760b7, _0x5a9ca6, _0x4c7988, 0, -1, _0x4e0534, _0x5aa924, _0x5aa924);
        _0x5a9ca6 -= _0x4c7988;
      } else if (world.RNG.get() > 0.5) {
        _0x562dac(_0x4760b7, _0x5a9ca6, _0x4c7988, 0, 1, _0x4e0534, _0x5aa924, _0x5aa924);
        _0x5a9ca6 += _0x4c7988;
      } else {
        _0x562dac(_0x4760b7, _0x5a9ca6, _0x4c7988, 0, -1, _0x4e0534, _0x5aa924, _0x5aa924);
        _0x5a9ca6 -= _0x4c7988;
      }
    }
    for (var _0x2bff5c = _0x5a9ca6 - 1; _0x2bff5c < _0x5a9ca6 + 2; _0x2bff5c++) {
      _0x287da8(_0x4760b7, _0x2bff5c, "wtb", 0, 1);
    }
  }
  function _0x2f4638(_0x1e6e9a, _0x5dce95) {
    for (var _0x333e67 = 0; _0x333e67 < _0x5dce95.length; _0x333e67++) {
      var _0x519bce = _0x5dce95[_0x333e67][0];
      var _0x48127 = _0x5dce95[_0x333e67][1];
      var _0x106981 = _0x5dce95[_0x333e67][2];
      _0x3c4638(_0x519bce, _0x48127, _0x1e6e9a, _0x106981);
    }
  }
  ;
  this.add_island = function (_0x520185, _0x132bd6, _0x59adf1) {
    var _0x57ad77 = _0x59adf1;
    var _0x35cbbc = _0x132bd6;
    _0x287da8(_0x57ad77, _0x35cbbc, "isl", _0x520185, 1);
    for (var _0x3a19be = 0; _0x3a19be < 4; _0x3a19be++) {
      for (var _0x3069c = 0; _0x3069c < 3; _0x3069c++) {
        _0x287da8(_0x57ad77 - _0x3069c, _0x35cbbc - _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3069c, _0x35cbbc - _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3069c, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 - _0x3069c, _0x35cbbc + _0x3a19be, "iblk", 0);
      }
    }
    if (_0x520185 === 0) {
      for (var _0x3a19be = 0; _0x3a19be < 2; _0x3a19be++) {
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc + 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc + 4, "iblk", 0);
      }
      for (var _0x3a19be = 0; _0x3a19be < 3; _0x3a19be++) {
        _0x287da8(_0x57ad77 - 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 - 3, _0x35cbbc - _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc - _0x3a19be, "iblk", 0);
      }
      _0x287da8(_0x57ad77 - 2, _0x35cbbc - 4, "iblk", 0);
      _0x287da8(_0x57ad77 - 3, _0x35cbbc - 3, "iblk", 0);
      _0x287da8(_0x57ad77 + 2, _0x35cbbc + 4, "iblk", 0);
      _0x287da8(_0x57ad77 + 3, _0x35cbbc + 3, "iblk", 0);
    } else if (_0x520185 === 1) {
      for (var _0x3a19be = 0; _0x3a19be < 3; _0x3a19be++) {
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc + 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc + 4, "iblk", 0);
      }
      for (var _0x3a19be = 0; _0x3a19be < 4; _0x3a19be++) {
        _0x287da8(_0x57ad77 - 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 - 3, _0x35cbbc - _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc - _0x3a19be, "iblk", 0);
      }
    } else if (_0x520185 === 2) {
      for (var _0x3a19be = 0; _0x3a19be < 2; _0x3a19be++) {
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc - 4, "iblk", 0);
        _0x287da8(_0x57ad77 - _0x3a19be, _0x35cbbc + 4, "iblk", 0);
        _0x287da8(_0x57ad77 + _0x3a19be, _0x35cbbc + 4, "iblk", 0);
      }
      for (var _0x3a19be = 0; _0x3a19be < 3; _0x3a19be++) {
        _0x287da8(_0x57ad77 - 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc + _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 - 3, _0x35cbbc - _0x3a19be, "iblk", 0);
        _0x287da8(_0x57ad77 + 3, _0x35cbbc - _0x3a19be, "iblk", 0);
      }
    }
  };
  this.add_islands = function (_0x501f0f) {
    for (var _0x36d8ed = 0; _0x36d8ed < world.biomes.length && _0x501f0f > 0; _0x36d8ed++) {
      var _0x31ed6e = world.biomes[_0x36d8ed];
      if (_0x31ed6e.t !== world.BIOME_SEA) {
        continue;
      }
      if (_0x31ed6e.w > 1800 && _0x31ed6e.h > 1000) {
        var _0x1ec996 = Math.floor((_0x31ed6e.x1 + _0x31ed6e.w / 2) / 100);
        var _0x1de3fc = Math.floor((_0x31ed6e.y1 + _0x31ed6e.h / 2) / 100);
        world.add_island(_0x501f0f % 3, _0x1ec996, _0x1de3fc);
        for (var _0x1ef475 = 0; _0x1ef475 < 3; _0x1ef475++) {
          var _0x2f98f4 = _0x1de3fc - 2 + Math.floor(world.RNG.get() * 4);
          var _0x5b7b00 = _0x1ec996 - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[_0x2f98f4][_0x5b7b00].s === undefined) {
            _0x287da8(_0x2f98f4, _0x5b7b00, "plm", _0x1ef475);
          }
          var _0x2f98f4 = _0x1de3fc - 2 + Math.floor(world.RNG.get() * 4);
          var _0x5b7b00 = _0x1ec996 - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[_0x2f98f4][_0x5b7b00].plm === undefined) {
            _0x287da8(_0x2f98f4, _0x5b7b00, "s", _0x1ef475);
          }
        }
        var _0x2f98f4 = _0x1de3fc - 2 + Math.floor(world.RNG.get() * 4);
        var _0x5b7b00 = _0x1ec996 - 3 + Math.floor(world.RNG.get() * 6);
        if (MAP.tiles[_0x2f98f4][_0x5b7b00].plm === undefined && MAP.tiles[_0x2f98f4][_0x5b7b00].s === undefined) {
          _0x287da8(_0x2f98f4, _0x5b7b00, "p", 0, 1);
        }
        _0x501f0f--;
      }
    }
  };
  this.generate_world = function (_0x34f4ca) {
    world.RNG.init(_0x34f4ca);
    var _0x2827a6 = 0;
    while (1) {
      _0x2827a6++;
      if (_0x2827a6 > 10000) {
        return;
      }
      world.biomes = [];
      if (world.custom_map === 0 && (world.mode === WORLD.MODE_VAMPIRES || world.mode === WORLD.MODE_EXPERIMENTAL || world.mode === WORLD.MODE_PVP)) {
        world.custom_map = ___MAP___;
      }
      if (world.mode === WORLD.MODE_ZOMBIES) {
        world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 80, 80, 15));
      } else if (world.mode === WORLD.MODE_LEGACY) {
        world.biomes.push(new world.Biome(world.BIOME_FOREST, 2, 2, 150, 150, 15));
      } else if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
        for (var _0x3f4a1b = 0; _0x3f4a1b < world.custom_map.length; _0x3f4a1b++) {
          var _0x11f54f = world.custom_map[_0x3f4a1b];
          if (_0x11f54f[0] === 0) {
            var _0x63567d = WORLD.BIOME_FOREST;
            switch (_0x11f54f[1]) {
              case "FOREST":
                _0x63567d = world.BIOME_FOREST;
                break;
              case "WINTER":
                _0x63567d = world.BIOME_WINTER;
                break;
              case "DESERT":
                _0x63567d = world.BIOME_DESERT;
                break;
              case "LAVA":
                _0x63567d = world.BIOME_LAVA;
                break;
              case "DRAGON":
                _0x63567d = world.BIOME_DRAGON;
                break;
            }
            world.biomes.push(new world.Biome(_0x63567d, _0x11f54f[2], _0x11f54f[3], _0x11f54f[4], _0x11f54f[5], _0x11f54f[6], _0x11f54f[7]));
            continue;
          } else {
            break;
          }
        }
      } else if (world.custom_map !== 0) {
        for (var _0x3f4a1b = 0; _0x3f4a1b < world.custom_map.length; _0x3f4a1b++) {
          var _0x13a49e = world.custom_map[_0x3f4a1b];
          var _0x63567d = WORLD.BIOME_FOREST;
          switch (_0x13a49e[0]) {
            case "FOREST":
              _0x63567d = world.BIOME_FOREST;
              break;
            case "WINTER":
              _0x63567d = world.BIOME_WINTER;
              break;
            case "DESERT":
              _0x63567d = world.BIOME_DESERT;
              break;
            case "LAVA":
              _0x63567d = world.BIOME_LAVA;
              break;
            case "DRAGON":
              _0x63567d = world.BIOME_DRAGON;
              break;
          }
          if (_0x1376cf(_0x63567d, _0x13a49e[1], _0x13a49e[2], 0, (_0x3f4a1b + 1) * 10) === 0) {
            break;
          }
        }
        if (_0x3f4a1b !== world.custom_map.length) {
          continue;
        }
      }
      break;
    }
    render_minimap();
    var _0x36a4f7 = [];
    for (var _0x5f0ff1 = 0; _0x5f0ff1 < world.nh; _0x5f0ff1++) {
      _0x36a4f7[_0x5f0ff1] = new Array(world.nw);
      for (var _0x285537 = 0; _0x285537 < world.nw; _0x285537++) {
        _0x36a4f7[_0x5f0ff1][_0x285537] = 0;
      }
    }
    for (var _0x5f0ff1 = 0; _0x5f0ff1 < world.biomes.length; _0x5f0ff1++) {
      var _0x13a49e = world.biomes[_0x5f0ff1];
      var _0x5598b6 = _0x13a49e.x2 / 100;
      var _0x3ffb69 = _0x13a49e.y2 / 100;
      for (var _0x2aaa63 = _0x13a49e.x1 / 100; _0x2aaa63 <= _0x5598b6; _0x2aaa63++) {
        for (var _0x231969 = _0x13a49e.y1 / 100; _0x231969 <= _0x3ffb69; _0x231969++) {
          _0x36a4f7[_0x231969][_0x2aaa63] = 1;
        }
      }
    }
    for (var _0x231969 = 0; _0x231969 < world.nh; _0x231969++) {
      for (var _0x2aaa63 = 0; _0x2aaa63 < world.nw; _0x2aaa63++) {
        if (_0x36a4f7[_0x231969][_0x2aaa63] === 0) {
          _0x1d89b1(_0x36a4f7, _0x2aaa63, _0x231969);
        }
      }
    }
    MAP = {
      w: world.nw,
      h: world.nh,
      tiles: []
    };
    for (var _0x5f0ff1 = 0; _0x5f0ff1 < world.nh; _0x5f0ff1++) {
      MAP.tiles[_0x5f0ff1] = [];
    }
    if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
      for (var _0x3f4a1b = 0; _0x3f4a1b < world.custom_map.length; _0x3f4a1b++) {
        var _0x11f54f = world.custom_map[_0x3f4a1b];
        if (_0x11f54f[1] === "isl") {
          world.add_island(_0x11f54f[2], _0x11f54f[3], _0x11f54f[4]);
        }
      }
    } else {
      world.add_islands(world.islands);
    }
    if (world.custom_map !== 0 && world.custom_map.length > 0 && world.custom_map[0].length > 3) {
      var _0x3390c5 = [];
      for (var _0x3f4a1b = 0; _0x3f4a1b < world.custom_map.length; _0x3f4a1b++) {
        var _0x11f54f = world.custom_map[_0x3f4a1b];
        if (_0x11f54f[0] !== 1) {
          continue;
        }
        if (_0x11f54f[1] === "r") {
          _0x287da8(_0x11f54f[3], _0x11f54f[2], "wtb", 0, 1);
          _0x3390c5.push([_0x11f54f[3], _0x11f54f[2], _0x11f54f[4]]);
        } else {
          _0x287da8(_0x11f54f[4], _0x11f54f[3], _0x11f54f[1], _0x11f54f[2], _0x11f54f[5]);
        }
      }
      _0x2f4638(0, _0x3390c5);
      _0x3390c5 = [];
    } else {
      for (var _0x5f0ff1 = 0; _0x5f0ff1 < world.biomes.length; _0x5f0ff1++) {
        var _0x13a49e = world.biomes[_0x5f0ff1];
        if (world.mode === WORLD.MODE_LEGACY) {
          if (_0x13a49e.t === world.BIOME_FOREST) {
            _0x20a148(_0x5f0ff1, _0x13a49e.w / 10000);
          }
        } else {
          if (_0x13a49e.t === world.BIOME_FOREST) {
            _0xa8cc4a(_0x5f0ff1, _0x13a49e.w / 10000);
          }
          if (_0x13a49e.t === world.BIOME_LAVA) {
            _0x746b49(_0x5f0ff1, _0x13a49e.w / 10000);
          }
          if (_0x13a49e.t === world.BIOME_WINTER) {
            _0x371a1e(_0x5f0ff1, _0x13a49e.w / 10000);
          }
          if (_0x13a49e.t === world.BIOME_DESERT) {
            _0x51a96c(_0x5f0ff1, _0x13a49e.w / 10000);
          }
          if (_0x13a49e.t === world.BIOME_DRAGON) {
            _0x15da9b(_0x5f0ff1);
          }
        }
      }
    }
    render_all_resources_minimap();
    world.map_wrapper(MAP);
  };
  function _0x15da9b(_0x56953e) {
    for (var _0x4fc300 = 0; _0x4fc300 < 3; _0x4fc300++) {
      _0x4eee0e(_0x56953e, "s", _0x4fc300, 15);
    }
    for (var _0x4fc300 = 0; _0x4fc300 < 3; _0x4fc300++) {
      _0x4eee0e(_0x56953e, "a", _0x4fc300, 1);
    }
    for (var _0x4fc300 = 0; _0x4fc300 < 3; _0x4fc300++) {
      _0x4eee0e(_0x56953e, "d", _0x4fc300, 1);
    }
    _0x11cf0c(_0x56953e);
  }
  ;
  function _0x371a1e(_0x4b2a65, _0x5ceb4b) {
    for (var _0x390df7 = 0; _0x390df7 < 3; _0x390df7++) {
      _0x4eee0e(_0x4b2a65, "s", _0x390df7, Math.floor(_0x5ceb4b * 18));
    }
    for (var _0x390df7 = 0; _0x390df7 < 3; _0x390df7++) {
      _0x4eee0e(_0x4b2a65, "f", _0x390df7, Math.floor(_0x5ceb4b * 24));
    }
    for (var _0x390df7 = 0; _0x390df7 < 3; _0x390df7++) {
      _0x4eee0e(_0x4b2a65, "d", _0x390df7, Math.max(1, Math.floor(_0x5ceb4b * 2)), 0.3);
    }
    for (var _0x390df7 = 0; _0x390df7 < 3; _0x390df7++) {
      _0x4eee0e(_0x4b2a65, "g", _0x390df7, Math.floor(_0x5ceb4b * 6));
    }
    _0x11cf0c(_0x4b2a65);
  }
  function _0x51a96c(_0x357e8e, _0x4ed58e) {
    for (var _0x345fbd = 0; _0x345fbd < 3; _0x345fbd++) {
      _0x4eee0e(_0x357e8e, "s", _0x345fbd, Math.floor(_0x4ed58e * 12));
    }
    for (var _0x345fbd = 0; _0x345fbd < 3; _0x345fbd++) {
      _0x4eee0e(_0x357e8e, "m", _0x345fbd, Math.max(1, Math.floor(_0x4ed58e * 1)), 0.2);
    }
    _0x4eee0e(_0x357e8e, "c", 0, Math.floor(_0x4ed58e * 36));
    var _0x45a9a1 = [];
    _0x460fc7(_0x357e8e, _0x45a9a1);
    _0x2f4638(_0x357e8e, _0x45a9a1);
    _0x45a9a1 = [];
  }
  ;
  function _0x746b49(_0x4e8d48, _0x3602ba) {
    _0x3b3a52(_0x3602ba * 80, _0x4e8d48);
    for (var _0x23dc99 = 0; _0x23dc99 < 3; _0x23dc99++) {
      _0x4eee0e(_0x4e8d48, "s", _0x23dc99, Math.floor(_0x3602ba * 12));
    }
    for (var _0x23dc99 = 0; _0x23dc99 < 3; _0x23dc99++) {
      _0x4eee0e(_0x4e8d48, "g", _0x23dc99, Math.floor(_0x3602ba * 6));
    }
    for (var _0x23dc99 = 0; _0x23dc99 < 3; _0x23dc99++) {
      _0x4eee0e(_0x4e8d48, "re", _0x23dc99, Math.max(1, Math.floor(_0x3602ba * 1)), 0.2);
    }
    for (var _0x23dc99 = 0; _0x23dc99 < 3; _0x23dc99++) {
      _0x4eee0e(_0x4e8d48, "a", _0x23dc99, Math.max(1, Math.floor(_0x3602ba * 2)));
    }
    _0x11cf0c(_0x4e8d48);
  }
  function _0x20a148(_0x1b0f20, _0xfceda4) {
    for (var _0x1c542c = 0; _0x1c542c < 6; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "t", _0x1c542c, Math.floor(_0xfceda4 * 80));
    }
    for (var _0x1c542c = 0; _0x1c542c < 4; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "b", _0x1c542c, Math.floor(_0xfceda4 * 80));
    }
    for (var _0x1c542c = 0; _0x1c542c < 3; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "s", _0x1c542c, Math.floor(_0xfceda4 * 50));
    }
    var _0x37e923 = [];
    for (var _0x1c542c = 0; _0x1c542c < 6; _0x1c542c++) {
      _0x444e6c(_0x1b0f20, _0x37e923);
    }
    _0x2f4638(_0x1b0f20, _0x37e923);
    _0x37e923 = [];
    _0x4eee0e(_0x1b0f20, "p", 0, Math.floor(_0xfceda4 * 28));
    for (var _0x1c542c = 0; _0x1c542c < 3; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "g", _0x1c542c, Math.floor(_0xfceda4 * 7));
    }
    for (var _0x1c542c = 0; _0x1c542c < 3; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "d", _0x1c542c, Math.floor(_0xfceda4 * 2));
    }
    for (var _0x1c542c = 0; _0x1c542c < 3; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "a", _0x1c542c, Math.floor(_0xfceda4 * 1));
    }
    for (var _0x1c542c = 0; _0x1c542c < 3; _0x1c542c++) {
      _0x4eee0e(_0x1b0f20, "m", _0x1c542c, Math.floor(_0xfceda4 * 1));
    }
    _0x4eee0e(_0x1b0f20, "a", 0, Math.floor(_0xfceda4 * 1));
    _0x11cf0c(_0x1b0f20);
  }
  function _0xa8cc4a(_0x9f141, _0x382225) {
    for (var _0x34f8fe = 0; _0x34f8fe < 6; _0x34f8fe++) {
      _0x4eee0e(_0x9f141, "t", _0x34f8fe, Math.floor(_0x382225 * 20));
    }
    for (var _0x34f8fe = 0; _0x34f8fe < 4; _0x34f8fe++) {
      _0x4eee0e(_0x9f141, "b", _0x34f8fe, Math.floor(_0x382225 * 20));
    }
    for (var _0x34f8fe = 0; _0x34f8fe < 3; _0x34f8fe++) {
      _0x4eee0e(_0x9f141, "s", _0x34f8fe, Math.floor(_0x382225 * 20));
    }
    var _0x4a011a = [];
    _0x444e6c(_0x9f141, _0x4a011a);
    _0x2f4638(_0x9f141, _0x4a011a);
    _0x4a011a = [];
    _0x4eee0e(_0x9f141, "p", 0, Math.floor(_0x382225 * 24));
    for (var _0x34f8fe = 0; _0x34f8fe < 3; _0x34f8fe++) {
      _0x4eee0e(_0x9f141, "g", _0x34f8fe, Math.floor(_0x382225 * 5));
    }
    if (world.mode === WORLD.MODE_ZOMBIES) {
      for (var _0x34f8fe = 0; _0x34f8fe < 3; _0x34f8fe++) {
        _0x4eee0e(_0x9f141, "d", _0x34f8fe, Math.floor(_0x382225 * 3));
      }
      for (var _0x34f8fe = 0; _0x34f8fe < 3; _0x34f8fe++) {
        _0x4eee0e(_0x9f141, "a", _0x34f8fe, Math.floor(_0x382225 * 2));
      }
    }
    _0x11cf0c(_0x9f141);
  }
  function _0x11cf0c(_0x24e2d2) {
    var _0x27bcfc = world.biomes[_0x24e2d2];
    _0x287da8(-3 + Math.floor(_0x27bcfc.y2 / 100), -1 + Math.floor(_0x27bcfc.x2 / 100), "s", 0, 0);
    _0x287da8(3 + Math.floor(_0x27bcfc.y1 / 100), -1 + Math.floor(_0x27bcfc.x2 / 100), "s", 0, 0);
    _0x287da8(-3 + Math.floor(_0x27bcfc.y2 / 100), 1 + Math.floor(_0x27bcfc.x1 / 100), "s", 0, 0);
    _0x287da8(3 + Math.floor(_0x27bcfc.y1 / 100), 1 + Math.floor(_0x27bcfc.x1 / 100), "s", 0, 0);
  }
  ;
  function _0x4eee0e(_0x3cd38b, _0x571bf5, _0x59af62, _0x26f727, _0x287833) {
    var _0x989887 = world.biomes[_0x3cd38b];
    var _0x3d6c8a = Math.floor(_0x989887.x1 / 100);
    var _0x54ac4f = Math.floor(_0x989887.y1 / 100);
    var _0x4e16cc = Math.floor(_0x989887.w / 100);
    var _0x13834d = Math.floor(_0x989887.h / 100);
    if (_0x287833 !== undefined) {
      _0x287833 = 1 - _0x287833;
      _0x3d6c8a += Math.floor(_0x4e16cc * _0x287833 / 2);
      _0x54ac4f += Math.floor(_0x13834d * _0x287833 / 2);
      _0x4e16cc -= Math.floor(_0x4e16cc * _0x287833);
      _0x13834d -= Math.floor(_0x13834d * _0x287833);
    }
    var _0xbd3937 = MAP.tiles;
    for (var _0x5962a3 = 0, _0x5f2763 = 0; _0x5962a3 < _0x26f727; _0x5f2763++) {
      if (_0x5f2763 > 50000) {
        break;
      }
      var _0x577557 = _0x54ac4f + Math.floor(world.RNG.get() * _0x13834d);
      var _0x592279 = _0x3d6c8a + Math.floor(world.RNG.get() * _0x4e16cc);
      var _0xfc586a = world.dist_from_biome(_0x3cd38b, _0x592279 * 100 + 50, _0x577557 * 100 + 50);
      if (_0xfc586a < 400) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557][_0x592279 + 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557][_0x592279 - 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 + 1][_0x592279];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 - 1][_0x592279];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 + 1][_0x592279 - 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 - 1][_0x592279 + 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 + 1][_0x592279 + 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      var _0x5cb3f6 = _0xbd3937[_0x577557 - 1][_0x592279 - 1];
      if (_0x5cb3f6 !== undefined && _0x5cb3f6[_0x571bf5] !== undefined && _0x5cb3f6[_0x571bf5][_0x59af62] !== undefined) {
        continue;
      }
      if (_0xbd3937[_0x577557][_0x592279] === undefined) {
        _0x287da8(_0x577557, _0x592279, _0x571bf5, _0x59af62, 1);
        _0x5962a3++;
      }
    }
  }
  ;
  function _0x2c60f6(_0x68940f, _0x50d5b1) {
    return _0x68940f >= 0 && _0x50d5b1 >= 0 && _0x68940f < world.nh && _0x50d5b1 < world.nw;
  }
  ;
  function _0x3c4638(_0x388ffc, _0x14b5de, _0x4bb88e, _0x2e7aa4) {
    if (!_0x2c60f6(_0x388ffc, _0x14b5de)) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[_0x388ffc][_0x14b5de] === undefined) {
      tiles[_0x388ffc][_0x14b5de] = {};
    }
    if (tiles[_0x388ffc][_0x14b5de].r !== undefined) {
      return;
    }
    var _0xfe10ae = 0;
    if (_0x2c60f6(_0x388ffc - 1, _0x14b5de) && tiles[_0x388ffc - 1][_0x14b5de] !== undefined && tiles[_0x388ffc - 1][_0x14b5de].wtb !== undefined) {
      _0xfe10ae += 2;
    }
    if (_0x2c60f6(_0x388ffc, _0x14b5de - 1) && tiles[_0x388ffc][_0x14b5de - 1] !== undefined && tiles[_0x388ffc][_0x14b5de - 1].wtb !== undefined) {
      _0xfe10ae += 8;
    }
    if (_0x2c60f6(_0x388ffc, _0x14b5de + 1) && tiles[_0x388ffc][_0x14b5de + 1] !== undefined && tiles[_0x388ffc][_0x14b5de + 1].wtb !== undefined) {
      _0xfe10ae += 16;
    }
    if (_0x2c60f6(_0x388ffc + 1, _0x14b5de) && tiles[_0x388ffc + 1][_0x14b5de] !== undefined && tiles[_0x388ffc + 1][_0x14b5de].wtb !== undefined) {
      _0xfe10ae += 64;
    }
    if (_0x2c60f6(_0x388ffc - 1, _0x14b5de - 1) && (_0xfe10ae & 10) === 10 && tiles[_0x388ffc - 1][_0x14b5de - 1] !== undefined && tiles[_0x388ffc - 1][_0x14b5de - 1].wtb !== undefined) {
      _0xfe10ae += 1;
    }
    if (_0x2c60f6(_0x388ffc - 1, _0x14b5de + 1) && (_0xfe10ae & 18) === 18 && tiles[_0x388ffc - 1][_0x14b5de + 1] !== undefined && tiles[_0x388ffc - 1][_0x14b5de + 1].wtb !== undefined) {
      _0xfe10ae += 4;
    }
    if (_0x2c60f6(_0x388ffc + 1, _0x14b5de - 1) && (_0xfe10ae & 72) === 72 && tiles[_0x388ffc + 1][_0x14b5de - 1] !== undefined && tiles[_0x388ffc + 1][_0x14b5de - 1].wtb !== undefined) {
      _0xfe10ae += 32;
    }
    if (_0x2c60f6(_0x388ffc + 1, _0x14b5de + 1) && (_0xfe10ae & 80) === 80 && tiles[_0x388ffc + 1][_0x14b5de + 1] !== undefined && tiles[_0x388ffc + 1][_0x14b5de + 1].wtb !== undefined) {
      _0xfe10ae += 128;
    }
    tiles[_0x388ffc][_0x14b5de].r = {};
    tiles[_0x388ffc][_0x14b5de].r.river = _0xfe10ae;
    tiles[_0x388ffc][_0x14b5de].r.current = _0x2e7aa4;
    tiles[_0x388ffc][_0x14b5de].r.dist = world.dist_from_biome(_0x4bb88e, _0x14b5de * 100 + 50, _0x388ffc * 100 + 50) - 400;
    tiles[_0x388ffc][_0x14b5de].r.x = _0x14b5de * 100 + 50;
    tiles[_0x388ffc][_0x14b5de].r.y = _0x388ffc * 100 + 50;
  }
  ;
  function _0x287da8(_0x5d8416, _0x58ea94, _0x38618d, _0x269a04, _0x54a3f3) {
    if (_0x5d8416 < 0 || _0x58ea94 < 0 || _0x5d8416 >= world.nh || _0x58ea94 >= world.nw) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[_0x5d8416][_0x58ea94] === undefined) {
      tiles[_0x5d8416][_0x58ea94] = {};
    }
    if (tiles[_0x5d8416][_0x58ea94][_0x38618d] !== undefined) {
      return 0;
    }
    tiles[_0x5d8416][_0x58ea94][_0x38618d] = [];
    tiles[_0x5d8416][_0x58ea94][_0x38618d][_0x269a04] = [{
      x: _0x58ea94 * 100 + 50,
      y: _0x5d8416 * 100 + 50
    }];
    if (_0x54a3f3 === 1) {
      add_resource_minimap(_0x38618d, _0x269a04, _0x5d8416, _0x58ea94);
    }
    return 1;
  }
  ;
  this.render_single_resource = _0x287da8;
  function _0x35c11c(_0x319f9a, _0x5d464b, _0x27356c) {
    if (_0x319f9a[_0x5d464b]) {
      for (k = 0; k < _0x319f9a[_0x5d464b].length; k++) {
        if (!_0x319f9a[_0x5d464b][k]) {
          continue;
        }
        for (l = 0; l < _0x319f9a[_0x5d464b][k].length; l++) {
          _0x319f9a[_0x5d464b][k][l].hit = _0x27356c;
          _0x319f9a[_0x5d464b][k][l].update = false;
          _0x319f9a[_0x5d464b][k][l].time = 0;
          _0x319f9a[_0x5d464b][k][l].angle = 0;
        }
      }
    }
  }
  this.map_wrapper = function (_0x30f879) {
    for (var _0x1b8d93 = 0; _0x1b8d93 < this.nh; _0x1b8d93++) {
      for (var _0x1456f2 = 0; _0x1456f2 < this.nw; _0x1456f2++) {
        if (!_0x30f879.tiles[_0x1b8d93]) {
          _0x30f879.tiles[_0x1b8d93] = [];
        }
        if (!_0x30f879.tiles[_0x1b8d93][_0x1456f2]) {
          _0x30f879.tiles[_0x1b8d93][_0x1456f2] = [];
          continue;
        }
        var _0x142b64 = _0x30f879.tiles[_0x1b8d93][_0x1456f2];
        if (_0x142b64.de && _0x142b64.de.length > 0) {
          for (var _0x38bae8 = 0; _0x38bae8 < _0x142b64.de.length; _0x38bae8++) {
            if (_0x142b64.de[_0x38bae8] && _0x142b64.de[_0x38bae8].length > 0) {
              _0x142b64.de = _0x142b64.de[_0x38bae8][0];
              if (_0x38bae8 >= 41 && _0x38bae8 <= 49) {
                _0x142b64.de.scale = 3;
                var _0x5ecfbc = Math.floor(Math.random() * 3 + 1);
                _0x142b64.de.p = [];
                for (var _0x433a61 = 0; _0x433a61 < _0x5ecfbc; _0x433a61++) {
                  _0x142b64.de.p.push({
                    x: Math.random() * 120 - 60,
                    y: Math.random() * 120 - 60,
                    angle: Math.random() * Math.PI * 2,
                    _id: 41 + Math.floor(Math.random() * 9)
                  });
                }
              } else if (_0x38bae8 >= 19 && _0x38bae8 <= 26) {
                _0x142b64.de.scale = 3;
                var _0x5ecfbc = Math.floor(Math.random() * 3 + 1);
                _0x142b64.de.p = [];
                for (var _0x433a61 = 0; _0x433a61 < _0x5ecfbc; _0x433a61++) {
                  _0x142b64.de.p.push({
                    x: Math.random() * 120 - 60,
                    y: Math.random() * 120 - 60,
                    angle: Math.random() * Math.PI * 2,
                    _id: 19 + Math.floor(Math.random() * 8)
                  });
                }
              } else if (_0x38bae8 <= 15 || _0x38bae8 >= 27 && _0x38bae8 <= 40) {
                _0x142b64.de.angle = 0;
                _0x142b64.de.scale = 2;
                _0x142b64.de._id = _0x38bae8;
              } else {
                _0x142b64.de.angle = Math.random() * Math.PI * 2;
                _0x142b64.de.scale = 1;
                _0x142b64.de._id = _0x38bae8;
              }
            }
          }
        }
        _0x35c11c(_0x142b64, "p", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "t", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "s", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "g", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "d", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "b", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "f", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "sw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "gw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "dw", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "a", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "cs", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "plm", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "re", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "c", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
        _0x35c11c(_0x142b64, "m", new Utils.LinearAnimation(false, 1, 1, 0, 10, 10));
      }
    }
  };
  this.time = SPRITE.DAY;
  this.clock = {
    translate: {
      x: 0,
      y: 0
    },
    init: 0,
    hour: 0,
    now: 0
  };
  this.delete_all_units = function () {
    this.fast_units = [];
    this.units[ITEMS.PLAYERS] = [];
    this.units[ITEMS.WORKBENCH] = [];
    this.units[ITEMS.FIRE] = [];
    this.units[ITEMS.BIG_FIRE] = [];
    this.units[ITEMS.SEED] = [];
    this.units[ITEMS.SPIKE] = [];
    this.units[ITEMS.STONE_SPIKE] = [];
    this.units[ITEMS.GOLD_SPIKE] = [];
    this.units[ITEMS.DIAMOND_SPIKE] = [];
    this.units[ITEMS.AMETHYST_SPIKE] = [];
    this.units[ITEMS.REIDITE_SPIKE] = [];
    this.units[ITEMS.BRIDGE] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.ROOF] = [];
    this.units[ITEMS.PLOT] = [];
    this.units[ITEMS.WHEAT_SEED] = [];
    this.units[ITEMS.ALOE_VERA_SEED] = [];
    this.units[ITEMS.PUMPKIN_SEED] = [];
    this.units[ITEMS.TOMATO_SEED] = [];
    this.units[ITEMS.CARROT_SEED] = [];
    this.units[ITEMS.WATERMELON_SEED] = [];
    this.units[ITEMS.GARLIC_SEED] = [];
    this.units[ITEMS.THORNBUSH_SEED] = [];
    this.units[ITEMS.WINDMILL] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    this.units[ITEMS.WELL] = [];
    this.units[ITEMS.WALL] = [];
    this.units[ITEMS.STONE_WALL] = [];
    this.units[ITEMS.GOLD_WALL] = [];
    this.units[ITEMS.DIAMOND_WALL] = [];
    this.units[ITEMS.AMETHYST_WALL] = [];
    this.units[ITEMS.REIDITE_WALL] = [];
    this.units[ITEMS.BED] = [];
    this.units[ITEMS.WOOD_DOOR] = [];
    this.units[ITEMS.STONE_DOOR] = [];
    this.units[ITEMS.GOLD_DOOR] = [];
    this.units[ITEMS.DIAMOND_DOOR] = [];
    this.units[ITEMS.AMETHYST_DOOR] = [];
    this.units[ITEMS.REIDITE_DOOR] = [];
    this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    this.units[ITEMS.STONE_DOOR_SPIKE] = [];
    this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    this.units[ITEMS.FURNACE] = [];
    this.units[ITEMS.TOTEM] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.CHEST] = [];
    this.units[ITEMS.RESURRECTION] = [];
    this.units[ITEMS.EMERALD_MACHINE] = [];
    this.units[ITEMS.FRUIT] = [];
    this.units[ITEMS.RABBIT] = [];
    this.units[ITEMS.WOLF] = [];
    this.units[ITEMS.CRAB] = [];
    this.units[ITEMS.BOAR] = [];
    this.units[ITEMS.BABY_MAMMOTH] = [];
    this.units[ITEMS.CRAB_BOSS] = [];
    this.units[ITEMS.BABY_DRAGON] = [];
    this.units[ITEMS.BABY_LAVA] = [];
    this.units[ITEMS.HAWK] = [];
    this.units[ITEMS.PIRANHA] = [];
    this.units[ITEMS.KRAKEN] = [];
    this.units[ITEMS.FOX] = [];
    this.units[ITEMS.PENGUIN] = [];
    this.units[ITEMS.SPELL] = [];
    this.units[ITEMS.FIREFLY] = [];
    this.units[ITEMS.BEAR] = [];
    this.units[ITEMS.MAMMOTH] = [];
    this.units[ITEMS.VULTURE] = [];
    this.units[ITEMS.SAND_WORM] = [];
    this.units[ITEMS.DRAGON] = [];
    this.units[ITEMS.LAVA_DRAGON] = [];
    this.units[ITEMS.FLAME] = [];
    this.units[ITEMS.WHEAT_MOB] = [];
    this.units[ITEMS.ALOE_VERA_MOB] = [];
    this.units[ITEMS.PUMPKIN_MOB] = [];
    this.units[ITEMS.GARLIC_MOB] = [];
    this.units[ITEMS.THORNBUSH_MOB] = [];
    this.units[ITEMS.TREASURE_CHEST] = [];
    this.units[ITEMS.DEAD_BOX] = [];
    this.units[ITEMS.CRATE] = [];
    this.units[ITEMS.BREAD_OVEN] = [];
    this.units[ITEMS.SIGN] = [];
    this.units[ITEMS.SPIDER] = [];
    this.units[ITEMS.GIFT] = [];
    this.units[ITEMS.GARLAND] = [];
    return;
  };
  this.delete_units = function (_0x40c21b) {
    if (!this.fast_units[_0x40c21b]) {
      return;
    }
    type = this.fast_units[_0x40c21b].type;
    this.fast_units[_0x40c21b] = null;
    var _0x374609 = this.units[type];
    for (var _0x54537b = 0; _0x54537b < _0x374609.length; _0x54537b++) {
      if (_0x374609[_0x54537b].uid == _0x40c21b) {
        _0x374609.splice(_0x54537b, 1);
        return;
      }
    }
    return;
  };
  this.find_tower = function (_0x24b625, _0x51e633) {
    for (var _0x552a7c = 0; _0x552a7c < this.units[ITEMS.WOOD_TOWER].length; _0x552a7c++) {
      var _0x4b0795 = this.units[ITEMS.WOOD_TOWER][_0x552a7c];
      if (Math.floor(_0x4b0795.x / 100) === _0x51e633 && Math.floor(_0x4b0795.y / 100) === _0x24b625) {
        return 1;
      }
    }
    return 0;
  };
  this.find_bridge = function (_0x5aaeaf, _0x406acd) {
    for (var _0x4fc121 = 0; _0x4fc121 < this.units[ITEMS.BRIDGE].length; _0x4fc121++) {
      var _0x173493 = this.units[ITEMS.BRIDGE][_0x4fc121];
      if (Math.floor(_0x173493.x / 100) == _0x5aaeaf && Math.floor(_0x173493.y / 100) == _0x406acd) {
        return true;
      }
    }
    return false;
  };
  this.move_units = function (_0x574fbc) {
    for (var _0x12df26 = 0; _0x12df26 < _0x574fbc.length; _0x12df26++) {
      b = _0x574fbc[_0x12df26];
      if (b.angle != b.nangle) {
        var _0xfbca00 = Math.PI * 2;
        b.angle = (b.angle + _0xfbca00) % _0xfbca00;
        b.nangle = (b.nangle + _0xfbca00) % _0xfbca00;
        if (b.angle != b.nangle) {
          var _0x5f2462 = b.nangle - b.angle;
          var _0x2b8a4d = Math.abs(_0x5f2462);
          if (_0x2b8a4d > Math.PI) {
            _0x2b8a4d = Math.PI * 2 - _0x2b8a4d;
          }
          var _0x3ea4bb = _0x2b8a4d / Math.PI * 3 * WORLD.ROTATE * delta;
          if (_0x5f2462 > Math.PI) {
            b.angle -= _0x3ea4bb;
          } else if (_0x5f2462 < -Math.PI) {
            b.angle += _0x3ea4bb;
          } else if (_0x5f2462 < 0) {
            b.angle -= _0x3ea4bb;
          } else {
            b.angle += _0x3ea4bb;
          }
          b.angle = (b.angle + _0xfbca00) % _0xfbca00;
          if (Math.abs(b.angle - b.nangle) < _0x3ea4bb) {
            b.angle = b.nangle;
          }
        }
      }
      var _0xb6dc28 = Math.floor(b.r.y / 100);
      var _0x3f2784 = Math.floor(b.r.x / 100);
      if (b.x != b.r.x || b.y != b.r.y) {
        if (b.action & STATE.IDLE) {
          b.action -= STATE.IDLE;
        }
        b.action |= STATE.WALK;
        var _0x5b461a = Utils.get_std_angle(b, b.r) + Math.PI;
        var _0x4a64f7 = delta * b.speed;
        var _0x254466 = Utils.build_vector(_0x4a64f7, _0x5b461a);
        if (Utils.norm(_0x254466) < Utils.norm(Utils.get_vector(b, b.r))) {
          Utils.add_vector(b, _0x254466);
        } else {
          if (b.action & STATE.WALK) {
            b.action -= STATE.WALK;
          }
          b.action |= STATE.IDLE;
          Utils.copy_vector(b.r, b);
        }
      }
      if (b.ghost) {
        var _0x4add5e = b.bubbles;
        var _0x370ee8 = _0x4add5e.length;
        if (_0x370ee8 === 0 || _0x370ee8 < SPRITE.GHOST_BUBBLES && _0x4add5e[_0x370ee8 - 1].life < 0.95) {
          _0x4add5e.push({
            id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length),
            x: Math.floor(b.x + Math.random() * 80 - 40),
            y: Math.floor(b.y + Math.random() * 80 - 40),
            life: 1
          });
        }
        for (var _0x5ad0a5 = 0; _0x5ad0a5 < _0x370ee8; _0x5ad0a5++) {
          _0x4add5e[_0x5ad0a5].life = Math.max(0, _0x4add5e[_0x5ad0a5].life - delta);
        }
        for (var _0x5ad0a5 = 0; _0x5ad0a5 < _0x370ee8; _0x5ad0a5++) {
          if (_0x4add5e[_0x5ad0a5].life === 0) {
            _0x4add5e.splice(_0x5ad0a5, 1);
            break;
          }
        }
      }
      var _0x1d5582 = 0;
      if (b.move_effect && ui.quality) {
        var _0x55d68d = b.swim;
        var _0x370ee8 = _0x55d68d.length;
        if (b.dist_water > 0 && b.vehicle !== INV.BABY_DRAGON && b.vehicle !== INV.BABY_LAVA && b.vehicle !== INV.PLANE && b.vehicle !== INV.HAWK && b.vehicle !== INV.NIMBUS && !b.ghost) {
          _0x1d5582 = 1;
          if (_0x370ee8 === 0 || Utils.dist(_0x55d68d[_0x370ee8 - 1], b) > SPRITE.SWIM_SPACE) {
            var _0x196d25 = -b.angle;
            var _0x11c73a = Math.sin(_0x196d25) * 45 * scale;
            var _0x5cdd92 = Math.cos(_0x196d25) * 45 * scale;
            _0x55d68d.push({
              x: b.x + _0x11c73a,
              y: b.y + _0x5cdd92,
              r: 8,
              alpha: 0.8
            });
            _0x55d68d.push({
              x: b.x - _0x11c73a,
              y: b.y - _0x5cdd92,
              r: 8,
              alpha: 0.8
            });
            _0x55d68d.push({
              x: b.x,
              y: b.y,
              r: 24,
              alpha: 1
            });
          }
        }
        for (var _0x5ad0a5 = 0; _0x5ad0a5 < _0x370ee8; _0x5ad0a5++) {
          _0x55d68d[_0x5ad0a5].alpha = Math.max(0, _0x55d68d[_0x5ad0a5].alpha - delta / 2.2);
          _0x55d68d[_0x5ad0a5].r += delta * 20;
        }
        if (_0x55d68d.length > 0 && _0x55d68d[0].alpha === 0) {
          _0x55d68d.splice(0, 1);
        }
        var _0x3bd9df = b.foot;
        var _0x370ee8 = _0x3bd9df.length;
        var _0x2390b0 = -1;
        var _0x309189 = Math.max(0, Math.sign(b.dist_sand));
        var _0x2a782f = Math.max(0, Math.sign(b.dist_winter));
        var _0x397f8b = Math.max(0, Math.sign(b.dist_desert));
        var _0x4a1ece = Math.max(0, Math.sign(b.dist_lava));
        var _0x8fcc96 = Math.max(0, Math.sign(b.dist_dragon));
        if (b.dist_sand > 0 || b.dist_desert > 0) {
          var _0x2390b0 = SPRITE.SAND_STEP;
        } else if (b.dist_dragon > 0) {
          var _0x2390b0 = SPRITE.CAVE_STEP;
        } else if (b.dist_winter > 0) {
          var _0x2390b0 = SPRITE.SNOW_STEP;
        } else if (b.dist_lava > 0) {
          var _0x2390b0 = SPRITE.LAVA_STEP;
        }
        if (b.vehicle === INV.MOUNT_BOAR && (_0x309189 | _0x2a782f | _0x4a1ece | _0x8fcc96) === 1) {
          _0x2390b0 = SPRITE.BOAR_STEP;
          var _0x3c128e = b.vehicle_fx2 - Math.PI / 2;
          var _0x215e61 = 15;
          var _0x2546b3 = 11;
          var _0x2e835e = SPRITE.STEP_SPACE;
        } else if (b.vehicle === INV.BABY_MAMMOTH && (_0x309189 | _0x2a782f | _0x4a1ece | _0x8fcc96) === 1) {
          _0x2390b0 = SPRITE.BABY_MAMMOTH_STEP;
          var _0x3c128e = b.vehicle_fx2 - Math.PI / 2;
          var _0x215e61 = 21;
          var _0x2546b3 = 16;
          var _0x2e835e = SPRITE.STEP_SPACE;
        } else if (b.vehicle === INV.CRAB_BOSS && (_0x309189 | _0x2a782f | _0x4a1ece | _0x8fcc96) === 1) {
          _0x2390b0 = SPRITE.CRAB_STEP;
          var _0x3c128e = b.vehicle_fx2 - Math.PI / 2;
          var _0x23aacf = Math.random() * 50;
          var _0x215e61 = 10 + _0x23aacf;
          var _0x2546b3 = 0 + _0x23aacf;
          var _0x2e835e = SPRITE.STEP_SPACE * 0.9;
        } else {
          var _0x3c128e = b.angle;
          var _0x215e61 = 15;
          var _0x2546b3 = 11;
          var _0x2e835e = SPRITE.STEP_SPACE;
        }
        if (b.vehicle === INV.BABY_DRAGON || b.vehicle === INV.BABY_LAVA || b.vehicle === INV.NIMBUS || b.vehicle === INV.HAWK || b.vehicle === INV.PLANE || b.ghost) ;else if (b.vehicle === INV.SLED) {
          if (_0x370ee8 === 0 || Utils.dist(_0x3bd9df[_0x370ee8 - 1], b) > SPRITE.TRAIL_SPACE) {
            _0x3bd9df.push({
              x: b.x,
              y: b.y,
              angle: b.vehicle_fx2,
              alpha: 1,
              id: SPRITE.SLED_WAVE
            });
          }
        } else if (_0x2390b0 != -1 && _0x1d5582 === 0) {
          if (_0x370ee8 === 0 || Utils.dist(_0x3bd9df[_0x370ee8 - 1], b) > _0x2e835e) {
            b.id_foot++;
            if (Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1) {
              if (b.r.x > b.x && b.r.y < b.y || b.r.x < b.x && b.r.y > b.y) {
                if (b.id_foot % 2) {
                  var _0x11c73a = -_0x2546b3 * scale;
                  var _0x5cdd92 = -_0x2546b3 * scale;
                } else {
                  var _0x5cdd92 = _0x2546b3 * scale;
                  var _0x11c73a = _0x2546b3 * scale;
                }
              } else if (b.id_foot % 2) {
                var _0x11c73a = _0x2546b3 * scale;
                var _0x5cdd92 = -_0x2546b3 * scale;
              } else {
                var _0x5cdd92 = _0x2546b3 * scale;
                var _0x11c73a = -_0x2546b3 * scale;
              }
            } else if (b.id_foot % 2) {
              var _0x11c73a = Math.sin(_0x3c128e) * _0x215e61 * scale;
              var _0x5cdd92 = Math.cos(_0x3c128e) * _0x215e61 * scale;
            } else {
              var _0x11c73a = -Math.sin(_0x3c128e) * _0x215e61 * scale;
              var _0x5cdd92 = -Math.cos(_0x3c128e) * _0x215e61 * scale;
            }
            _0x3bd9df.push({
              x: b.x + _0x11c73a,
              y: b.y + _0x5cdd92,
              angle: _0x3c128e + Math.PI / 2,
              alpha: 1,
              id: _0x2390b0
            });
          }
        }
        for (var _0x5ad0a5 = 0; _0x5ad0a5 < _0x370ee8; _0x5ad0a5++) {
          if (_0x3bd9df[_0x5ad0a5].id === SPRITE.SLED_WAVE) {
            _0x3bd9df[_0x5ad0a5].alpha = Math.max(0, _0x3bd9df[_0x5ad0a5].alpha - delta * 1.5);
          } else {
            _0x3bd9df[_0x5ad0a5].alpha = Math.max(0, _0x3bd9df[_0x5ad0a5].alpha - delta / 2.85);
          }
        }
        if (_0x3bd9df.length > 0 && _0x3bd9df[0].alpha === 0) {
          _0x3bd9df.splice(0, 1);
        }
      }
    }
  };
  this.update = function () {
    this.move_units(this.units[ITEMS.PLAYERS]);
    this.move_units(this.units[ITEMS.RABBIT]);
    this.move_units(this.units[ITEMS.WOLF]);
    this.move_units(this.units[ITEMS.CRAB]);
    this.move_units(this.units[ITEMS.BOAR]);
    this.move_units(this.units[ITEMS.BABY_MAMMOTH]);
    this.move_units(this.units[ITEMS.CRAB_BOSS]);
    this.move_units(this.units[ITEMS.BABY_DRAGON]);
    this.move_units(this.units[ITEMS.BABY_LAVA]);
    this.move_units(this.units[ITEMS.HAWK]);
    this.move_units(this.units[ITEMS.SPIDER]);
    this.move_units(this.units[ITEMS.FOX]);
    this.move_units(this.units[ITEMS.PENGUIN]);
    this.move_units(this.units[ITEMS.SPELL]);
    this.move_units(this.units[ITEMS.FIREFLY]);
    this.move_units(this.units[ITEMS.BEAR]);
    this.move_units(this.units[ITEMS.MAMMOTH]);
    this.move_units(this.units[ITEMS.VULTURE]);
    this.move_units(this.units[ITEMS.SAND_WORM]);
    this.move_units(this.units[ITEMS.DRAGON]);
    this.move_units(this.units[ITEMS.FLAME]);
    this.move_units(this.units[ITEMS.PIRANHA]);
    this.move_units(this.units[ITEMS.KRAKEN]);
    this.move_units(this.units[ITEMS.LAVA_DRAGON]);
  };
  this.breath = [];
  this.breath[SPRITE.LAKE] = new Utils.LinearAnimation(false, 1, 1.05, 1, 0.008, 0.008);
  this.breath[SPRITE.LAKE_DEEP] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
  this.breath[SPRITE.WAVE_ONE] = new Utils.LinearAnimation(false, 1, 1.02, 1, 0.008, 0.008);
  this.breath[SPRITE.WAVE_TWO] = new Utils.LinearAnimation(false, 1, 1.08, 1, 0.006, 0.006);
  this.lava = [];
  this.lava[0] = new Utils.LinearAnimation(false, 0.1, 1, 0, 0.6, 0.6);
  this.lava[1] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
  this.lava[2] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
  this.lava[3] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[4] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
  this.lava[5] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[6] = new Utils.LinearAnimation(false, 0.5, 1, 0, 0.6, 0.6);
  this.lava[7] = new Utils.LinearAnimation(false, 0.9, 1, 0, 0.6, 0.6);
  this.lava[8] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
  this.lava[9] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
  this.lava[10] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
  this.lava[11] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
  this.lava[12] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[13] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
  this.lava[14] = new Utils.LinearAnimation(false, 0.7, 1, 0, 0.6, 0.6);
}
function Flakes(_0x4800ed, _0x36edc8, _0x7dcee6, _0x3ac2fb) {
  this.id = _0x4800ed;
  this.speed = (_0x4800ed + 5) * 8;
  this.life = canw / 1366;
  this.x = _0x36edc8;
  this.y = _0x7dcee6;
  this.c = Math.cos(_0x3ac2fb);
  this.s = Math.sin(_0x3ac2fb);
  this.alpha = 0;
}
;
mycyph1 = 1;
function User() {
  this.init = function () {};
  this.resurrection = {
    pid: 1,
    iid: 1,
    open: false
  };
  this.well = {
    pid: 1,
    iid: -1,
    open: false
  };
  this.windmill = {
    amount_wheat: 0,
    amount_flour: 0,
    pid: 1,
    iid: -1,
    open: false
  };
  this.extractor = {
    amount_wood: 0,
    amount_mineral: 0,
    type: 0,
    mineral: 0,
    pid: 1,
    iid: -1,
    open: false
  };
  this.bread_oven = {
    amount_wood: 0,
    amount_bread: 0,
    amount_flour: 0,
    pid: 1,
    iid: -1,
    open: false
  };
  this.sign = {
    iid: -1,
    open: false
  };
  this.furnace = {
    amount: 0,
    pid: 1,
    iid: -1,
    open: false
  };
  this.ghost = {
    enabled: false,
    delay: -1,
    label: false,
    now: -1,
    draw: draw_alert_ghost
  };
  this.chest = {
    id: -1,
    amount: 0,
    pid: 1,
    iid: -1,
    open: false,
    lock: false,
    locked: false,
    lockpick: false,
    padlock: false
  };
  this.alive = true;
  this.reconnect = {
    enabled: false,
    rotate: 0
  };
  this.key = Utils.gup("key", window.location.href);
  var _0x3b02cd = Utils.gup("egg", window.location.href);
  if (_0x3b02cd) {
    ui.skin = parseInt(_0x3b02cd);
  }
  this.beta = window.location.href.indexOf("http://starve.io/beta") === 0 ? 1 : 0;
  if (this.key && this.beta) {
    Cookies.set("starve_beta", this.key);
  } else if (this.beta) {
    this.key = Cookies.get("starve_beta");
  }
  this.token = Cookies.get("starve_token") ? Cookies.get("starve_token") : Utils.generate_token(CLIENT.TOKEN_LEN);
  window.baguette();
  var _0x215345 = window.kot2;
  this.token = _0x215345.substring(0, 6) + this.token.substring(6);
  this.token_id = Cookies.get("starve_token_id") ? Cookies.get("starve_token_id") : "";
  this.id = 0;
  this.uid = 0;
  this.day = 0;
  this.die = {
    howdie: "",
    score: 0,
    bank: 0,
    kill: 0
  };
  this.account = {
    connected: 0,
    last: new Date().getTime()
  };
  this.team = [];
  this.in_team = function (_0x49325a) {
    for (var _0x4fb061 = 0; _0x4fb061 < this.team.length; _0x4fb061++) {
      if (this.team[_0x4fb061] == _0x49325a) {
        return true;
      }
    }
    return false;
  };
  this.shop = {
    delay: 0,
    time: 0,
    value: 0,
    open: false,
    draw: function () {
      if (this.open) {
        var _0x31ef75 = new Date().getTime();
        this.time = Math.floor((_0x31ef75 - this.delay) / 1000);
        if (this.time < 60) {
          game.shop.button.draw(ctx);
        } else {
          document.getElementById("shop_starterkit").style.display = "none";
          this.open = false;
        }
      }
    }
  };
  this.totem = {
    id: -1,
    pid: -1,
    lock: 0,
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 30, 1),
    wait: false
  };
  this.helmet = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 5, 1),
    wait: false
  };
  this.build = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
    wait: false
  };
  this.weapon = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1 / 10, 1),
    wait: false
  };
  this.cam = new Utils.Ease2d(Utils.ease_out_quad, 0, 0.4, 0, 0, canw2, canh2, canw2, canh2);
  this.cam.delay = 0;
  this.cam.forcedDelay = 0;
  this.cam.update = function () {
    if (this.forcedDelay > 0) {
      this.forcedDelay -= delta;
      return;
    }
    var _0x4b6e7f = world.fast_units[user.uid];
    if (_0x4b6e7f) {
      this.delay = 0;
      var _0x3ddadb = Math.max(Math.min(canw2 - _0x4b6e7f.x, -2), -world.w + 2 + canw);
      var _0xdcc617 = Math.max(Math.min(canh2 - _0x4b6e7f.y, -2), -world.h + 2 + canh);
      this.ease({
        x: _0x3ddadb,
        y: _0xdcc617
      });
    } else {
      this.delay += delta;
      if (this.delay > 3) {
        this.delay = 0;
        if (!user.reconnect.enabled) {
          client.get_focus();
        }
      }
    }
  };
  this.cam.w = screen.width;
  this.cam.h = screen.height;
  this.cam.rw = this.cam.w;
  this.cam.rh = this.cam.h;
  this.cam.rx = 0;
  this.cam.ry = 0;
  this.cam.rdw = 0;
  this.cam.rdh = 0;
  this.cam.change = function (_0x3007f8, _0x4f5f8e) {
    this.x = -Math.min(Math.max(-world.dw * 2, _0x3007f8 - world.dw - this.rw / 2), world.w - this.rw);
    this.y = -Math.min(Math.max(-world.dh * 2, _0x4f5f8e - (world.dh + this.rh) / 2), world.h - this.rh + world.dh);
    this.ex = this.x;
    this.ey = this.y;
  };
  this.control = {
    angle: 0,
    timeout: 0,
    previous: 0,
    mouse: 0,
    attack: 0,
    update: function () {
      var _0x42ad59 = world.fast_units[user.uid];
      if (_0x42ad59) {
        var _0x53d4b3 = {
          x: user.cam.x + _0x42ad59.x,
          y: user.cam.y + _0x42ad59.y
        };
      } else {
        var _0x53d4b3 = canm;
      }
      var _0x286eb8 = Utils.get_std_angle(mouse.pos, _0x53d4b3);
      var _0x59300b = false;
      this.mouse += delta;
      if (!mouse.state) {
        if (_0x42ad59 && !(_0x42ad59.action & STATE.ATTACK) && this.mouse > CLIENT.ATTACK) {
          this.attack = 1;
          _0x59300b = true;
          this.mouse = 0;
          client.send_attack(_0x286eb8);
        }
      }
      if (_0x42ad59) {
        _0x42ad59.angle = _0x286eb8;
        _0x42ad59.nangle = _0x286eb8;
      }
      if (!_0x59300b) {
        this.timeout += delta;
        if (this.timeout > CLIENT.ROTATE) {
          this.timeout = 0;
          if (Math.abs(this.angle - _0x286eb8) > 0.005) {
            client.send_angle(_0x286eb8);
            this.angle = _0x286eb8;
          }
        }
      }
      if (user.chat.open) {
        return;
      }
      if (user.terminal.open) {
        return;
      }
      var _0x39f1b7 = false;
      var _0x56b042 = 0;
      var _0x416e9c = keyboard.is_left();
      if (_0x416e9c) {
        _0x56b042 |= 1;
      }
      var _0x3377d6 = keyboard.is_right();
      if (_0x3377d6) {
        _0x56b042 |= 2;
      }
      var _0x2f5fba = keyboard.is_bottom();
      if (_0x2f5fba) {
        _0x56b042 |= 4;
      }
      var _0x2643c1 = keyboard.is_top();
      if (_0x2643c1) {
        _0x56b042 |= 8;
      }
      if (this.previous != _0x56b042) {
        client.send_move(_0x56b042);
      }
      this.previous = _0x56b042;
    }
  };
  this.gauges = {
    c: 1,
    l: 1,
    h: 1,
    t: 1,
    o: 1,
    wa: 1,
    warn_cold: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_life: new Utils.LinearAnimation(true, 0, 1, 0, 2, 2),
    warn_hunger: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_thirst: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_oxygen: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_warm: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    update: function () {
      this.warn_cold.update();
      this.warn_life.update();
      this.warn_hunger.update();
      this.warn_thirst.update();
      this.warn_oxygen.update();
      this.warn_warm.update();
      this.cold.ease(this.c);
      this.life.ease(this.l);
      this.hunger.ease(this.h);
      this.thirst.ease(this.t);
      this.oxygen.ease(this.o);
      this.warm.ease(this.wa);
    }
  };
  this.bigmap = false;
  this.spectator = false;
  this.zombie = false;
  this.vampire = false;
  this.inv = {
    max: WORLD.WITHOUT_BAG,
    bonus: 0,
    bag: 0,
    n: [],
    can_select: [],
    update_bag_size: function (_0x49551b, _0x345d63) {
      if (_0x49551b === 1) {
        this.bag = WORLD.BAG_SIZE;
      }
      this.bonus += _0x345d63;
      this.max = WORLD.WITHOUT_BAG + this.bonus + this.bag;
    },
    drag: {
      item: -1,
      img: null,
      _start: 0,
      _move: 0,
      _x: -1,
      _y: -1,
      move: function (_0x17901e) {
        if (this._start && (_0x17901e.x !== this._x || _0x17901e.y !== this._y)) {
          this._move = 1;
        }
      },
      start: function (_0x379cdf, _0x266019) {
        this._x = _0x266019.x;
        this._y = _0x266019.y;
        this.item = _0x379cdf;
        this.img = user.inv.can_select[_0x379cdf].info.img[2];
        this._start = 1;
      },
      stop: function () {
        this._start = 0;
        this._move = 0;
        this._x = -1;
        this._y = -1;
      },
      release: function () {
        var _0x1b5962 = -1;
        var _0x262481 = user.inv.can_select;
        var _0x3ae2bf = 0;
        if (this._start && this._move) {
          for (var _0x1f3a1f = 0; _0x1f3a1f < _0x262481.length; _0x1f3a1f++) {
            if (_0x262481[_0x1f3a1f].info.state === BUTTON_IN) {
              _0x1b5962 = _0x1f3a1f;
              break;
            }
          }
          if (_0x1b5962 !== -1 && _0x1b5962 !== this.item && _0x262481[this.item]) {
            _0x3ae2bf = 1;
            var _0x5909a0 = _0x262481[_0x1b5962];
            _0x262481[_0x1b5962] = _0x262481[this.item];
            _0x262481[this.item] = _0x5909a0;
            game.update_inv_buttons();
          }
        }
        this.stop();
        return _0x3ae2bf;
      },
      draw: function (_0x5361ba, _0x1bfc5a) {
        if (!this._start || !this._move) {
          return;
        }
        ctxDrawImage(ctx, this.img, Math.floor(_0x5361ba - this.img.width / 2), Math.floor(_0x1bfc5a - this.img.height / 2));
      }
    },
    free_place: function (_0x71f8a3) {
      for (_0x28b64e = 0; _0x28b64e < _0x71f8a3.length; _0x28b64e++) {
        if (this.n[_0x71f8a3[_0x28b64e][0]] == _0x71f8a3[_0x28b64e][1]) {
          return true;
        }
      }
      return false;
    },
    find_item: function (_0x579b2c) {
      for (var _0x35bfa9 = 0; _0x35bfa9 < this.can_select.length; _0x35bfa9++) {
        if (this.can_select[_0x35bfa9].id == _0x579b2c) {
          return _0x35bfa9;
        }
      }
      return -1;
    },
    delete_item: function (_0x285a4e, _0x3ab047) {
      this.n[_0x285a4e] = 0;
      this.can_select.splice(_0x3ab047, 1);
      game.update_inv_buttons();
    },
    decrease: function (_0x36f9c8, _0x65fe8, _0x197924) {
      update = true;
      this.n[_0x36f9c8] = Math.max(0, this.n[_0x36f9c8] - _0x65fe8);
      if (!this.n[_0x36f9c8] && _0x197924 >= 0) {
        this.delete_item(_0x36f9c8, _0x197924);
      }
    }
  };
  this.show_spectators = {
    enabled: false,
    translate: {
      x: 0,
      y: 0
    },
    invert: function () {
      if (world.mode != WORLD.MODE_HUNGER_GAMES || user.spectator) {
        return;
      }
      user.show_spectators.enabled = !user.show_spectators.enabled;
      if (user.show_spectators.enabled) {
        game.options.spectator_agree.display = "inline-block";
      } else {
        game.options.spectator_agree.display = "none";
      }
    }
  };
  game.options.spectator_agree.display = "none";
  this.auto_feed = {
    enabled: false,
    translate: {
      x: 0,
      y: 0
    },
    delay: 0,
    invert: function () {
      user.auto_feed.enabled = !user.auto_feed.enabled;
      if (user.auto_feed.enabled) {
        game.options.feed_agree.display = "inline-block";
      } else {
        game.options.feed_agree.display = "none";
      }
    },
    update: function () {
      if (!this.enabled || user.craft.id >= 0 || game.safe_delete.open) {
        return;
      }
      this.delay += delta;
      if (this.delay > 2) {
        this.delay = 0;
        if (user.gauges.h < 0.35) {
          if (user.inv.n[INV.PLANT]) {
            client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT));
          } else if (user.inv.n[INV.GARLIC]) {
            client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC));
          } else if (user.inv.n[INV.CRAB_STICK]) {
            client.select_inv(INV.CRAB_STICK, user.inv.find_item(INV.CRAB_STICK));
          } else if (user.inv.n[INV.PUMPKIN]) {
            client.select_inv(INV.PUMPKIN, user.inv.find_item(INV.PUMPKIN));
          } else if (user.inv.n[INV.TOMATO]) {
            client.select_inv(INV.TOMATO, user.inv.find_item(INV.TOMATO));
          } else if (user.inv.n[INV.CARROT]) {
            client.select_inv(INV.CARROT, user.inv.find_item(INV.CARROT));
          } else if (user.inv.n[INV.WATERMELON]) {
            client.select_inv(INV.WATERMELON, user.inv.find_item(INV.WATERMELON));
          } else if (user.inv.n[INV.BREAD]) {
            client.select_inv(INV.BREAD, user.inv.find_item(INV.BREAD));
          } else if (user.inv.n[INV.COOKED_MEAT]) {
            client.select_inv(INV.COOKED_MEAT, user.inv.find_item(INV.COOKED_MEAT));
          } else if (user.inv.n[INV.FOODFISH_COOKED]) {
            client.select_inv(INV.FOODFISH_COOKED, user.inv.find_item(INV.FOODFISH_COOKED));
          } else if (user.inv.n[INV.COOKIE]) {
            client.select_inv(INV.COOKIE, user.inv.find_item(INV.COOKIE));
          } else if (user.inv.n[INV.SANDWICH]) {
            client.select_inv(INV.SANDWICH, user.inv.find_item(INV.SANDWICH));
          } else if (user.inv.n[INV.CAKE]) {
            client.select_inv(INV.CAKE, user.inv.find_item(INV.CAKE));
          } else if (user.inv.n[INV.CRAB_LOOT]) {
            client.select_inv(INV.CRAB_LOOT, user.inv.find_item(INV.CRAB_LOOT));
          }
        } else if (user.gauges.t < 0.35) {
          if (user.inv.n[INV.BOTTLE_FULL]) {
            client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL));
          }
        }
      }
    }
  };
  game.options.feed_agree.display = "none";
  this.craft = {
    id: -1,
    id2: -1,
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
    crafting: false,
    preview: -1,
    mode: 0,
    label: [],
    can_craft: [],
    workbench: false,
    fire: false,
    water: false,
    well: false,
    change_mode: function () {
      this.mode = this.mode === 0 ? 1 : 0;
    },
    set_workbench: function (_0x4c19c5) {
      this.workbench = _0x4c19c5;
      var _0x2f3e51 = game.safe_delete;
      if (_0x2f3e51.open) {
        _0x2f3e51.del(_0x2f3e51.button);
      }
      this.update();
    },
    do_recycle: function (_0x547db2) {
      var _0x3a7362 = RECIPES[_0x547db2];
      this.id = _0x547db2;
      this.crafting = true;
      var _0x3d7299 = world.fast_units[user.uid];
      this.timeout.max_speed = _0x3a7362.time * 8;
      this.id2 = _0x3a7362.id2;
    },
    do_craft: function (_0x5be625) {
      var _0x5bef3e = RECIPES[_0x5be625];
      this.id = _0x5be625;
      this.crafting = true;
      var _0xc10d9c = world.fast_units[user.uid];
      if (_0xc10d9c && _0xc10d9c.right == INV.BOOK) {
        this.timeout.max_speed = _0x5bef3e.time * 3;
      } else {
        this.timeout.max_speed = _0x5bef3e.time;
      }
      this.id2 = _0x5bef3e.id2;
      for (var _0x5d7dfc = 0; _0x5d7dfc < _0x5bef3e.r.length; _0x5d7dfc++) {
        var _0x541b8d = _0x5bef3e.r[_0x5d7dfc];
        user.inv.decrease(_0x541b8d[0], _0x541b8d[1], user.inv.find_item(_0x541b8d[0]));
      }
      game.update_inv_buttons();
    },
    update: function () {
      this.can_craft = [];
      if (game.info_box.craft === 1) {
        game.info_box.display = 0;
      }
      for (var _0x58f522 in RECIPES) {
        var _0x18c88f = RECIPES[_0x58f522];
        var _0x291b3b = true;
        if (!_0x18c88f.r) {
          continue;
        }
        for (var _0x2ba455 = 0; _0x2ba455 < _0x18c88f.r.length; _0x2ba455++) {
          if (user.inv.max >= WORLD.WITH_BAG && _0x18c88f.id === CRAFT.BAG) {
            _0x291b3b = false;
            break;
          }
          if (_0x18c88f.w > this.workbench || _0x18c88f.f > this.fire || _0x18c88f.o > this.water || _0x18c88f.e > this.well) {
            _0x291b3b = false;
            break;
          }
          var _0x328e13 = _0x18c88f.r[_0x2ba455];
          if (!user.inv.n[_0x328e13[0]] || user.inv.n[_0x328e13[0]] < _0x328e13[1]) {
            _0x291b3b = false;
            break;
          }
        }
        if (_0x291b3b) {
          this.can_craft.push(game.craft_buttons[_0x18c88f.id]);
        }
      }
      game.update_craft_buttons();
      game.update_chest_buttons();
      game.update_furnace_button();
      game.update_windmill_button();
      game.update_extractor_button();
      game.update_bread_oven_button();
      game.sign.update_button();
    },
    restart: function () {
      this.id = -1;
      this.crafting = false;
      this.timeout.v = 0;
      this.timeout.o = false;
      this.update();
    }
  };
  this.welcome = {
    message: undefined,
    draw: draw_welcome_message
  };
  this.alert = {
    timeout: new Utils.LinearAnimation(false, 1, 1, 0, 4, 0.3),
    text: "",
    label: null,
    draw: draw_alert,
    list: []
  };
  this.ldb = {
    can: document.createElement("canvas"),
    ids: [],
    update: true,
    translate: {
      x: 0,
      y: 0
    },
    sort: function () {
      var _0x34d006 = [];
      var _0xa8d412 = world.players;
      for (var _0x5df5b3 = 0; _0x5df5b3 < _0xa8d412.length; _0x5df5b3++) {
        if (_0xa8d412[_0x5df5b3].alive) {
          _0x34d006.push({
            id: _0x5df5b3,
            s: _0xa8d412[_0x5df5b3].score
          });
        }
      }
      _0x34d006.sort(function (_0x461b90, _0x4daef2) {
        return _0x4daef2.s - _0x461b90.s;
      });
      this.ids = [];
      for (var _0x5df5b3 = 0; _0x5df5b3 < _0x34d006.length && _0x5df5b3 < 10; _0x5df5b3++) {
        this.ids.push(_0x34d006[_0x5df5b3].id);
      }
      this.update = true;
    },
    init: function (_0x115dbe) {
      var _0x58bb39 = world.players;
      for (var _0x5f4fb0 = 0; _0x5f4fb0 < _0x58bb39.length; _0x5f4fb0++) {
        _0x58bb39[_0x5f4fb0].score = 0;
      }
      _0x58bb39[user.id].score = Utils.restore_number(_0x115dbe[1]);
      this.ids = [];
      for (var _0x5f4fb0 = 2; _0x5f4fb0 < _0x115dbe.length; _0x5f4fb0 += 2) {
        this.ids.push(_0x115dbe[_0x5f4fb0]);
        _0x58bb39[_0x115dbe[_0x5f4fb0]].score = Utils.restore_number(_0x115dbe[_0x5f4fb0 + 1]);
      }
      this.update = true;
    }
  };
  this.ldb.can.width = scale * 180;
  this.ldb.can.height = scale * 300;
  this.ldb.ctx = this.ldb.can.getContext("2d");
  this.terminal = {
    open: false,
    input: document.getElementById("commandInput"),
    contentBox: document.getElementById("commandsBox"),
    style: document.getElementById("commandMainBox").style,
    _print: function (_0x91508) {
      this.contentBox.innerHTML += _0x91508;
    },
    update: function () {
      this.style.left = Math.floor(canw / 2 - 300) + "px";
      this.style.top = Math.floor(canh / 2 - 250) + "px";
    },
    _clean: function () {
      this.contentBox.innerHTML = "";
    },
    quit: function () {
      this.open = false;
      this.style.display = "none";
    },
    create_array: function (_0x4ce286) {
      var _0x4f44b2 = "<table class=\"tableList\">";
      for (var _0xb33ebf = 0; _0xb33ebf < _0x4ce286.length; _0xb33ebf++) {
        if (_0xb33ebf % 3 === 0) {
          _0x4f44b2 += "<tr>";
        }
        _0x4f44b2 += "<td class=\"tableList\">" + _0x4ce286[_0xb33ebf] + "</td>";
        if ((_0xb33ebf + 1) % 3 === 0 || _0xb33ebf + 1 === _0x4ce286.length) {
          _0x4f44b2 += "</tr>";
        }
      }
      _0x4f44b2 += "</table>";
      return _0x4f44b2;
    },
    write_command: function (_0x5be854, _0x2fbab8, _0x1474bb, _0x409e3d) {
      _0x5be854 = !_0x5be854 ? "" : _0x5be854;
      _0x2fbab8 = !_0x2fbab8 ? "" : _0x2fbab8;
      _0x1474bb = !_0x1474bb ? "" : _0x1474bb;
      _0x409e3d = !_0x409e3d ? "" : _0x409e3d;
      var _0x1220ed = "<div class=commandWritten>" + _0x5be854;
      if (_0x2fbab8) {
        _0x1220ed += "<div class=commandValidated>";
      } else {
        _0x1220ed += "<div class=commandUnknown>";
      }
      _0x1220ed += _0x1474bb + "</div>" + _0x409e3d + "</div>";
      this._print(_0x1220ed);
      this.scroll_down();
    },
    scroll_down: function () {
      this.contentBox.scrollTop = this.contentBox.scrollHeight;
      return;
    },
    commands: function (_0x17c3f1) {
      switch (_0x17c3f1) {
        case "clean":
          this._clean();
          return true;
          break;
        case "list":
          var _0x351638 = "";
          var _0x2d271c = world.players;
          for (var _0x2efa32 = 0; _0x2efa32 < _0x2d271c.length; _0x2efa32++) {
            var _0x376949 = _0x2d271c[_0x2efa32];
            if (_0x376949.alive) {
              _0x351638 += _0x376949.nickname + " <span style=\"color:green\">#" + _0x2efa32 + "</span><br />";
            }
          }
          this.write_command("list", 1, "List all connected players", _0x351638);
          return true;
          break;
        case "weapon-list":
          this.write_command("Weapons", 1, "List all weapons in the game", this.create_array(["sword_wood", "sword", "sword_gold", "sword_diamond", "sword_amethyst", "sword_reidite", "dragon_sword", "lava_sword", "sword_pirate", "wood_spear", "spear", "gold_spear", "diamond_spear", "amethyst_spear", "reidite_spear", "dragon_spear", "lava_spear", "crab_spear", "wood_bow", "wood_arrow"]));
          return true;
          break;
        case "tool-list":
          this.write_command("Tools", 1, "List all tools in the game", this.create_array(["pick_wood", "pick", "pick_gold", "pick_diamond", "pick_amethyst", "pick_reidite", "hammer", "hammer_gold", "hammer_diamond", "hammer_amethyst", "hammer_reidite", "super_hammer", "shovel", "shovel_gold", "shovel_diamond", "shovel_amethyst", "pitchfork", "pitchfork2", "spanner", "book"]));
          return true;
          break;
        case "survival-list":
          this.write_command("Survival Items", 1, "List all survival items in the game", this.create_array(["fire", "workbench", "bandage", "big_fire", "furnace", "paper", "blue_cord", "lock", "lockpick", "totem", "resurrection", "bridge", "bottle_full", "bottle_empty", "watering_can", "watering_can_full", "windmill", "plot", "bread_oven", "chest", "bucket_empty", "bucket_full", "well", "sign", "roof", "bed", "boat", "sled", "boar", "saddle", "emerald_machine", "extractor_stone", "extractor_gold", "extractor_diamond", "extractor_amethyst", "extractor_reidite_button"]));
          return true;
          break;
        case "resource-list":
          this.write_command("Resources", 1, "List all resources in the game", this.create_array(["wood", "stone", "gold", "diamond", "amethyst", "reidite", "fur", "fur_wolf", "fur_winter", "cord", "scales", "penguin_feather", "flame", "sand", "ground", "ice", "dragon_heart", "lava_heart", "kraken_skin", "special_fur", "special_fur_2", "gemme_green", "gemme_orange", "gemme_blue", "dragon_cube", "dragon_orb", "lava_cube", "lava_orb", "fur_boar", "pitchfork_part", "pilot_glasses", "fur_mammoth"]));
          return true;
          break;
        case "food-list":
          this.write_command("Food", 1, "List all food in the game", this.create_array(["plant", "seed", "meat", "cooked_meat", "flour", "wheat_seed", "cookies", "wild_wheat", "cake", "fish", "cooked_fish", "bread", "sandwich", "pumpkin_seed", "pumpkin", "garlic_seed", "garlic", "thornbush_seed", "thornbush", "crab_stick", "claw", "carrot_seed", "carrot", "tomato_seed", "tomato", "watermelon_seed", "watermelon", "aloe_vera_seed", "aloe_vera", "cactus"]));
          return true;
          break;
        case "hat-list":
          this.write_command("Hats", 1, "List all hats in the game", this.create_array(["earmuffs", "coat", "scarf", "fur_hat", "warm_protection", "warm_protection2", "warm_protection3", "explorer_hat", "pirate_hat", "wood_helmet", "stone_helmet", "gold_helmet", "diamond_helmet", "amethyst_helmet", "reidite_helmet", "dragon_helmet", "lava_helmet", "crab_helmet", "diving_mask", "super_diving_suit", "crown_green", "crown_orange", "crown_blue", "hood", "peasant", "winter_hood", "winter_peasant", "bag", "turban1", "turban2", "pilot_hat"]));
          return true;
          break;
        case "building-list":
          this.write_command("Buildings", 1, "List all buildings in the game", this.create_array(["wall", "stone_wall", "gold_wall", "diamond_wall", "amethyst_wall", "reidite_wall", "spike", "stone_spike", "gold_spike", "diamond_spike", "amethyst_spike", "reidite_spike", "wood_door", "stone_door", "gold_door", "diamond_door", "amethyst_door", "reidite_door", "wood_spike_door", "stone_spike_door", "gold_spike_door", "diamond_spike_door", "amethyst_spike_door", "reidite_spike_door"]));
          return true;
          break;
        case "biome-list":
          this.write_command("Biomes list", 1, "List all available biomes in the game", this.create_array(["forest", "winter", "lava", "sea", "beach", "island", "dragon"]));
          return true;
          break;
        case "help-config":
          this.write_command("Help Configuration", 1, "Learn how to build your customized map", "<div class=\"specialCommandBox\">To get the current map configuration, and modify it, copy the result of <span class=\"commandSynthax\">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class=\"commandSynthax\">set-config</span></br>To modify the map, modify \"important\" section (at the end)<div class=\"infoCommand\">The minimum size of the map is 50x50.</div>\"custom_map\" is used to change the biomes and is written like this :<div class=\"commandSynthax\" style=\"font-size:17px;\">\"custom_map\":[[\"biome\",width,height],...,[\"biome\",width,height]]</div>Biomes are <span class=\"commandSynthax\">\"forest\"</span>, <span class=\"commandSynthax\">\"lava\"</span>, <span class=\"commandSynthax\">\"winter\"</span>, and <span class=\"commandSynthax\">\"dragon\"</span>.");
          return true;
          break;
        case "pos":
          var _0x2d271c = world.units[ITEMS.PLAYERS];
          for (var _0x2efa32 = 0; _0x2efa32 < _0x2d271c.length; _0x2efa32++) {
            var _0x5a6a98 = _0x2d271c[_0x2efa32];
            if (_0x5a6a98.pid === user.id) {
              this.write_command("pos", 1, "Your position is " + Math.floor(_0x5a6a98.x / 100) + ":" + Math.floor(_0x5a6a98.y / 100));
              return true;
            }
          }
          break;
        case "help-admin":
          this.write_command("help-admin", 1, "List all available commands for admin only", this.create_array(["restart", "m | message", "mt | message-to", "w | welcome", "name", "password", "k | kick", "b | ban", "tp | teleport", "tpa | teleport-all", "tpt | teleport-to", "pos", "heal", "cancel-craft", "da | disable-attack", "pvp | disable-pvp", "dgs | disable-gather-score", "drs | disable-resource", "dms | disable-mob-safety", "ds | disable-shop", "dn | disable-nickname", "dch | disable-chat", "dq | disable-quest", "dd | disable-drop", "ddc | disable-drop-crate", "db | disable-crate", "dwg | disable-warm-gauge", "dk | disable-kit", "dc | disable-craft", "dr | disable-recycling", "disable-clock", "disable-recipes-book", "disable-market", "sb | spawn-building", "fsb | force-spawn-building", "sch | spawn-chest", "spawn-area", "spawn-area-team", "cl | clean-position", "cba | clean-building-all", "ci | clean-inventory", "cia | clean-inventory-all", "harvest", "gs | give-score", "gsa | give-score-all", "rs | reset-score", "rk | reset-kill", "gm | godmode", "instant-craft", "ka | kill-animals", "g | give", "ga | give-to-all", "ri | remove-item", "ria | remove-item-all", "spawn-location", "tm | team-mode", "default-nickname", "mm | murder-mode", "br | battle-royale", "help-config", "gc | get-config", "sc | set-config", "reset-config", "save-config", "reset-event-time"]));
          return true;
          break;
        case "help":
          this.write_command("help", 1, "List all available commands", this.create_array(["clean", "list", "pos", "help-admin", "help", "weapon-list", "tool-list", "survival-list", "resource-list", "food-list", "hat-list", "building-list", "biome-list"]));
          return true;
          break;
      }
      return false;
    },
    _open: function () {
      if (!this.open) {
        this.open = true;
        this.style.display = "inline-block";
        this.input.focus();
      }
    },
    _send: function () {
      var _0xc10daf = this.input.value;
      if (_0xc10daf && _0xc10daf.length > 0) {
        if (!this.commands(_0xc10daf)) {
          client.send_command(this.input.value);
        }
        this.input.value = "";
      }
    }
  };
  this.chat = {
    open: false,
    input: document.getElementById("chat_input"),
    style: document.getElementById("chat_block").style,
    update: function () {
      this.style.left = Math.floor(canw / 2 - 150) + "px";
      this.style.top = Math.floor(canh / 2 + 80) + "px";
    },
    quit: function () {
      this.open = false;
      this.style.display = "none";
      this.input.value = "";
    },
    prefix: "!",
    cmd: {
      hud: function (_0x228312) {
        if (_0x228312 === "off") {
          var _0x1bb9b3 = "Enter \"!hud\" without the quotes to restore the HUD";
          if (!user.alert.text) {
            user.alert.text = _0x1bb9b3;
          } else {
            user.alert.list.push(_0x1bb9b3);
          }
          game.show_ui = 0;
        } else {
          game.show_ui = 1;
        }
      }
    },
    commands: function (_0x4285d3) {
      if (_0x4285d3.charAt(0) == this.prefix) {
        var _0x16e351 = "";
        var _0xc8ba9b = "";
        for (var _0x1a3195 = 1; _0x1a3195 < _0x4285d3.length && _0x4285d3.charAt(_0x1a3195) != " "; _0x1a3195++) {
          _0x16e351 += _0x4285d3.charAt(_0x1a3195);
        }
        _0x1a3195++;
        for (; _0x1a3195 < _0x4285d3.length; _0x1a3195++) {
          _0xc8ba9b += _0x4285d3.charAt(_0x1a3195);
        }
        var _0x49e969 = this.cmd[_0x16e351];
        if (_0x49e969) {
          _0x49e969(_0xc8ba9b);
        }
        return true;
      } else {
        return false;
      }
    },
    run: function () {
      if (!this.open) {
        this.open = true;
        this.style.display = "inline-block";
        this.input.focus();
      } else {
        this.open = false;
        this.style.display = "none";
        var _0x11e175 = this.input.value;
        if (_0x11e175) {
          if (!this.commands(_0x11e175)) {
            client.send_chat(this.input.value);
          }
          this.input.value = "";
        }
      }
    }
  };
  this.ash = {
    flakes: [],
    update: function (_0x3d0025) {
      _0x3d0025.y += delta * 80 * _0x3d0025.s;
      _0x3d0025.x += delta * 80 * _0x3d0025.c;
      _0x3d0025.life -= delta / 6;
      if (_0x3d0025.life > 0.2) {
        _0x3d0025.alpha = Math.min(_0x3d0025.alpha + delta * 3, 1);
      } else {
        _0x3d0025.alpha = Math.max(_0x3d0025.alpha - delta * 1, 0);
      }
    },
    add: function (_0x476f81) {
      var _0x1366e4 = Math.floor(Math.min(SPRITE.ASHES_NUMBER * (canw / 1366), SPRITE.ASHES_NUMBER + 10) * Math.max(Math.min(world.dist_lava + 1000, 3000) / 3000, 0));
      if (this.flakes.length < _0x1366e4) {
        var _0x4133e4 = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
        var _0x56fde6 = -user.cam.x + Math.floor(Math.random() * user.cam.w);
        var _0x542278 = -user.cam.y + Math.floor(Math.random() * user.cam.h);
        var _0x32030f = Math.random(Math.PI);
        this.flakes.push(new Flakes(_0x4133e4, _0x56fde6, _0x542278, _0x32030f));
      }
    }
  };
  this.blizzard = 0;
  this.bandage = 0;
  this.desert = {
    flakes: [],
    tempest: 0,
    tempest_speed: 0,
    update: function (_0x4baa2f) {
      _0x4baa2f.y += delta * (200 + this.tempest_speed * 800) * _0x4baa2f.s;
      _0x4baa2f.x += delta * (200 + this.tempest_speed * 800) * _0x4baa2f.c;
      _0x4baa2f.life -= delta / 6;
      if (_0x4baa2f.life > 0.2) {
        _0x4baa2f.alpha = Math.min(_0x4baa2f.alpha + delta * 3, 1);
      } else {
        _0x4baa2f.alpha = Math.max(_0x4baa2f.alpha - delta * 1, 0);
      }
    },
    add: function (_0x59e253) {
      var _0x5b71ca = Math.floor(Math.min((this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER * (canw / 1366), (this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER + 10) * Math.max(Math.min(world.dist_desert + 1000, 3000) / 3000, 0));
      if (this.flakes.length < _0x5b71ca) {
        var _0x2d8f11 = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
        var _0x497035 = -user.cam.x + Math.floor(Math.random() * user.cam.w);
        var _0x404dfb = -user.cam.y + Math.floor(Math.random() * user.cam.h);
        var _0x373908 = Math.random(Math.PI);
        if (user.desert.tempest !== 0) {
          _0x497035 -= user.cam.w / 2;
        }
        this.flakes.push(new Flakes(_0x2d8f11, _0x497035, _0x404dfb, _0x373908));
      }
    }
  };
  this.winter = {
    flakes: [],
    tempest: 0,
    tempest_speed: 0,
    update: function (_0x891f58) {
      if (keyboard.is_bottom()) {
        _0x891f58.y += delta * _0x891f58.speed * (5.5 + this.tempest_speed * 10);
      } else {
        _0x891f58.y += delta * _0x891f58.speed * (5 + this.tempest_speed * 10);
      }
      _0x891f58.life -= delta / 2;
      if (keyboard.is_left()) {
        _0x891f58.x += delta * (100 + this.tempest_speed * 400);
      } else if (keyboard.is_right()) {
        _0x891f58.x -= delta * (130 - this.tempest_speed * 400);
      } else {
        _0x891f58.x -= delta * (30 - this.tempest_speed * 400);
      }
      if (_0x891f58.life > 0.2) {
        _0x891f58.alpha = Math.min(_0x891f58.alpha + delta * 3, 1);
      } else {
        _0x891f58.alpha = Math.max(_0x891f58.alpha - delta * 5, 0);
      }
    },
    add: function (_0x5b3b5e) {
      var _0x22dc16 = Math.floor(Math.min((this.tempest_speed * 1.5 + 0.5) * SPRITE.FLAKES_NUMBER * (canw / 1366), (this.tempest_speed * 1.5 + 0.5) * SPRITE.FLAKES_NUMBER + 10) * Math.max(Math.min(world.dist_winter + 1000, 3000) / 3000, 0));
      if (this.flakes.length < _0x22dc16) {
        var _0x4aa562 = Math.floor(Math.random() * SPRITE.FLAKES_SIZES);
        var _0x2c864c = -user.cam.x + Math.floor(Math.random() * user.cam.w);
        var _0x487de9 = -user.cam.y + Math.floor(Math.random() * 400 * scale - scale * 200);
        this.flakes.push(new Flakes(_0x4aa562, _0x2c864c, _0x487de9, 0));
      }
    }
  };
  function _0x34034d() {
    this.seed = 1;
    this.seed2 = 2;
    this.seed3 = 3;
    this.seedv = 1;
    this.seedv2 = 2;
    this.seedv3 = 3;
    this.new_seed = function (_0x53a8f8) {
      this.seed = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed2 = function (_0x499661) {
      this.seed2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed3 = function (_0x50fd62) {
      this.seed3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv = function (_0x4369a7) {
      this.seedv = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv2 = function (_0x2bf962) {
      this.seedv2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv3 = function (_0x5b6a02) {
      this.seedv3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.draw_foam_vert = function (_0x22d184, _0xf3d63f, _0x4b1fa5, _0x3d6e5a, _0x3116d8, _0x46191f, _0x2889f7) {
      for (var _0x4a36e7 = 1; _0x4a36e7 < _0x2889f7;) {
        var _0x3c46c1 = _0x4a36e7 * _0x4b1fa5 % RAND_SIZE;
        var _0x14b2a2 = RANDOM[_0x3c46c1];
        if (_0x14b2a2 < 0.1) {
          _0x2f4c2a += 50;
          _0x4a36e7 += 50;
          continue;
        }
        var _0x2f4c2a = Math.floor(_0x14b2a2 * _0x3d6e5a + _0x3116d8);
        if (_0x4a36e7 > _0x46191f && _0x4a36e7 < _0x2889f7) {
          var _0x34efd4 = Math.random() > 0.5 ? delta * -10 : delta * 10;
          var _0x589751 = _0x2f4c2a * _0xf3d63f;
          this.bxv[_0x3c46c1] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bxv[_0x3c46c1] + _0x34efd4));
          this.byv[_0x3c46c1] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.byv[_0x3c46c1] + _0x34efd4));
          if (_0x589751 > 0) {
            ctx.beginPath();
            ctx.arc(_0x4a36e7 + user.cam.x + this.byv[_0x3c46c1], _0x22d184 + this.bxv[_0x3c46c1] - WORLD.FLOAM_X * 0.8, _0x589751, 0, Math.PI * 2);
            if (world.transition) {
              var _0x4e9eea = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, _0x4e9eea);
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        _0x4a36e7 += _0x2f4c2a * 2;
      }
    };
    this.draw_foam = function (_0x3aa7c2, _0x83ecb6, _0x17e34c, _0x84a91f, _0x18ffd4, _0x39e703, _0x566b45) {
      for (var _0x319798 = 1; _0x319798 < _0x566b45;) {
        var _0xcf878a = _0x319798 * _0x17e34c % RAND_SIZE;
        var _0x4e7a34 = RANDOM[_0xcf878a];
        if (_0x4e7a34 < 0.1) {
          _0x4004db += 50;
          _0x319798 += 50;
          continue;
        }
        var _0x4004db = Math.floor(_0x4e7a34 * _0x84a91f + _0x18ffd4);
        if (_0x319798 > _0x39e703 && _0x319798 < _0x566b45) {
          var _0x27e644 = Math.random() > 0.5 ? delta * -10 : delta * 10;
          var _0x1406c3 = _0x4004db * _0x83ecb6;
          this.bx[_0xcf878a] = Math.max(-WORLD.FLOAM_X, Math.min(WORLD.FLOAM_X, this.bx[_0xcf878a] + _0x27e644));
          this.by[_0xcf878a] = Math.max(-WORLD.FLOAM_Y, Math.min(WORLD.FLOAM_Y, this.by[_0xcf878a] + _0x27e644));
          if (_0x1406c3 > 0) {
            ctx.beginPath();
            ctx.arc(_0x3aa7c2 + this.bx[_0xcf878a] - WORLD.FLOAM_X * 0.8, _0x319798 + user.cam.y + this.by[_0xcf878a], _0x1406c3, 0, Math.PI * 2);
            if (world.transition) {
              var _0x21c97f = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(83, 156, 160, 236, 247, 249, _0x21c97f);
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        _0x319798 += _0x4004db * 2;
      }
    };
    this.draw_foams_bottom = function (_0x16b377, _0x407999, _0x46b199, _0x3e9d47, _0x3ed5bc, _0x2a79e3) {
      _0x3ed5bc -= 30;
      _0x2a79e3 += 30;
      var _0x783333 = -((_0x46b199 - WORLD.LW1SX - _0x3e9d47 - 2) / WORLD.W1EX);
      if (_0x783333 === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x783333);
      this.draw_foam_vert(_0x46b199, _0x783333, this.seed3, 18, 16, _0x3ed5bc, _0x2a79e3);
      ctx.globalAlpha = 1;
      var _0x783333 = -((_0x16b377 - WORLD.LW2SX - _0x3e9d47 + 500) / WORLD.W2EX);
      if (_0x783333 === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x783333);
      this.draw_foam_vert(_0x16b377, _0x783333, this.seed, 12, 10, _0x3ed5bc, _0x2a79e3);
      ctx.globalAlpha = 1;
      if (_0x407999 === -1) {
        return;
      }
      var _0x783333 = -((_0x407999 - WORLD.LW3SX - _0x3e9d47 + 698) / WORLD.W3EX);
      if (_0x783333 <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x783333);
      this.draw_foam_vert(_0x407999, _0x783333, this.seed2, 6, 6, _0x3ed5bc, _0x2a79e3);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_top = function (_0xf8c9cd, _0x27623f, _0x15d7bf, _0x54b685, _0x4a0f32, _0x52cbe1) {
      _0x4a0f32 -= 30;
      _0x52cbe1 += 30;
      var _0x22fa4a = -((-_0x15d7bf + WORLD.LW1SX + _0x54b685 + 2) / WORLD.W1EX);
      if (_0x22fa4a === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x22fa4a);
      this.draw_foam_vert(_0x15d7bf, _0x22fa4a, this.seed3, 18, 16, _0x4a0f32, _0x52cbe1);
      ctx.globalAlpha = 1;
      var _0x22fa4a = -((-_0xf8c9cd + WORLD.LW2SX + _0x54b685) / WORLD.W2EX);
      if (_0x22fa4a === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x22fa4a);
      this.draw_foam_vert(_0xf8c9cd, _0x22fa4a, this.seed, 12, 10, _0x4a0f32, _0x52cbe1);
      ctx.globalAlpha = 1;
      if (_0x27623f === -1) {
        return;
      }
      var _0x22fa4a = -((-_0x27623f + WORLD.LW3SX + _0x54b685) / WORLD.W3EX);
      if (_0x22fa4a <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x22fa4a);
      this.draw_foam_vert(_0x27623f, _0x22fa4a, this.seed2, 6, 6, _0x4a0f32, _0x52cbe1);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_left = function (_0x5ae0e8, _0x2ab08b, _0x4a81c8, _0x310333, _0x57cf99, _0x51b854) {
      _0x57cf99 -= 30;
      _0x51b854 += 30;
      var _0x5db394 = -((-_0x4a81c8 + WORLD.LW1SX + _0x310333 + 2) / WORLD.W1EX);
      if (_0x5db394 === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x5db394);
      this.draw_foam(_0x4a81c8, _0x5db394, this.seed3, 18, 16, _0x57cf99, _0x51b854);
      ctx.globalAlpha = 1;
      var _0x5db394 = -((-_0x5ae0e8 + WORLD.LW2SX + _0x310333) / WORLD.W2EX);
      if (_0x5db394 === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x5db394);
      this.draw_foam(_0x5ae0e8, _0x5db394, this.seed, 12, 10, _0x57cf99, _0x51b854);
      ctx.globalAlpha = 1;
      if (_0x2ab08b === -1) {
        return;
      }
      var _0x5db394 = -((-_0x2ab08b + WORLD.LW3SX + _0x310333) / WORLD.W3EX);
      if (_0x5db394 <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x5db394);
      this.draw_foam(_0x2ab08b, _0x5db394, this.seed2, 6, 6, _0x57cf99, _0x51b854);
      ctx.globalAlpha = 1;
    };
    this.draw_foams_right = function (_0x54855d, _0x181deb, _0x364b31, _0xc4cb70, _0x49ea6b, _0x564141) {
      _0x49ea6b -= 30;
      _0x564141 += 30;
      var _0x8f796 = -((_0x364b31 - WORLD.LW1SX - _0xc4cb70 - 2) / WORLD.W1EX);
      if (_0x8f796 === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x8f796);
      this.draw_foam(_0x364b31, _0x8f796, this.seed3, 18, 16, _0x49ea6b, _0x564141);
      ctx.globalAlpha = 1;
      var _0x8f796 = -((_0x54855d - WORLD.LW2SX - _0xc4cb70 + 500) / WORLD.W2EX);
      if (_0x8f796 === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x8f796);
      this.draw_foam(_0x54855d, _0x8f796, this.seed, 12, 10, _0x49ea6b, _0x564141);
      ctx.globalAlpha = 1;
      if (_0x181deb === -1) {
        return;
      }
      var _0x8f796 = -((_0x181deb - WORLD.LW3SX - _0xc4cb70 + 698) / WORLD.W3EX);
      if (_0x8f796 <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x8f796);
      this.draw_foam(_0x181deb, _0x8f796, this.seed2, 6, 6, _0x49ea6b, _0x564141);
      ctx.globalAlpha = 1;
    };
    this.w1 = {
      r: new Utils.Ease(Utils.ease_out_cubic, 0, 10, WORLD.W1SX, WORLD.W1SX, WORLD.W1EX),
      l: new Utils.Ease(Utils.ease_in_out_cubic, 0, 10, WORLD.W1EX, WORLD.W1EX, WORLD.W1SX)
    };
    this.w2 = {
      r: new Utils.Ease(Utils.ease_out_quart, 0, 10, WORLD.W2SX, WORLD.W2SX, WORLD.W2EX),
      l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W2EX, WORLD.W2EX, WORLD.W2SX)
    };
    this.w3 = {
      r: new Utils.Ease(Utils.ease_out_quint, 0, 10, WORLD.W3SX, WORLD.W3SX, WORLD.W3EX),
      l: new Utils.Ease(Utils.ease_in_out_quad, 0, 10, WORLD.W3EX, WORLD.W3EX, WORLD.W3SX)
    };
    this.t_ = function (_0x4b71a2) {
      var _0x32b99c;
      if (_0x4b71a2.r.x === _0x4b71a2.r.ex) {
        if (_0x4b71a2.l.x === _0x4b71a2.l.ex) {
          _0x32b99c = _0x4b71a2.r;
        } else {
          _0x32b99c = _0x4b71a2.l;
        }
      } else {
        _0x32b99c = _0x4b71a2.r;
      }
      return _0x32b99c;
    };
    this.t = function (_0x47c014) {
      var _0x238d5f;
      if (_0x47c014.r.x === _0x47c014.r.ex) {
        if (_0x47c014.l.x === _0x47c014.l.ex) {
          _0x47c014.r.restart();
          _0x47c014.l.restart();
          _0x238d5f = _0x47c014.r;
        } else {
          _0x238d5f = _0x47c014.l;
        }
      } else {
        _0x238d5f = _0x47c014.r;
      }
      _0x238d5f.ease(_0x238d5f.ex);
      return _0x238d5f;
    };
    this.bx = [];
    this.by = [];
    this.bxv = [];
    this.byv = [];
    this.init = function () {
      for (var _0x3cfe7b = 0; _0x3cfe7b < RAND_SIZE; _0x3cfe7b++) {
        this.bx[_0x3cfe7b] = Math.floor(RANDOM[_0x3cfe7b] * WORLD.FLOAM_X);
        this.by[_0x3cfe7b] = Math.floor(RANDOM[_0x3cfe7b] * WORLD.FLOAM_Y);
        this.bxv[_0x3cfe7b] = Math.floor(RANDOM[_0x3cfe7b] * WORLD.FLOAM_X);
        this.byv[_0x3cfe7b] = Math.floor(RANDOM[_0x3cfe7b] * WORLD.FLOAM_Y);
      }
      this.w1.r.x = this.w1.r.ex;
      this.w2.r.ed = 3.5;
      this.w3.r.ed = 2;
    };
    this.init();
  }
  ;
  this.beach = [];
  for (var _0x28b64e = 0; _0x28b64e < 4; _0x28b64e++) {
    this.beach.push(new _0x34034d());
  }
}
function get__e() {
  var _0x4f4a21 = Math.random();
  return "e";
}
function get__S() {
  var _0x4ce752 = Math.random();
  return "S";
}
function get__t() {
  var _0x55b7d0 = Math.random();
  return "t";
}
function get__d() {
  var _0xc65965 = Math.random();
  return "d";
}
function get__o() {
  var _0x135a2d = Math.random();
  return "o";
}
function get__r() {
  var _0x5ce2a8 = Math.random();
  return "r";
}
function get__a() {
  var _0x310181 = Math.random();
  return "a";
}
function get__w() {
  var _0x26aad3 = Math.random();
  return "w";
}
function get__I() {
  var _0x109c19 = Math.random();
  return "I";
}
function get__k() {
  var _0x36971f = Math.random();
  return "k";
}
function get__W() {
  var _0x13a64f = Math.random();
  return "W";
}
function get__a() {
  var _0x444f14 = Math.random();
  return "a";
}
function get__s() {
  var _0x2f8660 = Math.random();
  return "s";
}
function get__n() {
  var _0x54c303 = Math.random();
  return "n";
}
function get__p() {
  var _0x368780 = Math.random();
  return "p";
}
function get__2() {
  var _0x5295d5 = Math.random();
  return "2";
}
function get__g() {
  var _0x2bcd53 = Math.random();
  return "g";
}
function get__m() {
  var _0x4f2152 = Math.random();
  return "m";
}
function get__b() {
  var _0x3fe1a1 = Math.random();
  return "b";
}
function get__o() {
  var _0x54d899 = Math.random();
  return "o";
}
function get__t() {
  var _0x1c0baf = Math.random();
  return "t";
}
function get__y() {
  var _0x597d95 = Math.random();
  return "y";
}
function get__c() {
  var _0x4a003f = Math.random();
  return "c";
}
function get__p() {
  var _0x190dec = Math.random();
  return "p";
}
function get__i() {
  var _0x4bb3fd = Math.random();
  return "i";
}
function get__v() {
  var _0x2b1f5b = Math.random();
  return "v";
}
function get__C() {
  var _0x2bb3bb = Math.random();
  return "C";
}
function get__R() {
  var _0x7ba593 = Math.random();
  return "R";
}
function get__x() {
  var _0x147c0a = Math.random();
  return "x";
}
function get__D() {
  var _0x5c6057 = Math.random();
  return "D";
}
function fixNative() {
  var _0x4f5669 = get__n() + get__a() + get__t() + get__i();
  var _0x63e5cb = get__W() + get__e() + get__b() + get__S() + get__o() + get__c() + get__k() + get__e() + get__t();
  if (window[_0x63e5cb].toString().indexOf(_0x4f5669) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var _0x1a3f14 = get__s() + get__e() + get__n() + get__d();
  var _0x552c13 = get__p() + get__r() + get__o() + get__t() + get__o() + get__t() + get__y() + get__p() + get__e();
  if (window[_0x63e5cb][_0x552c13][_0x1a3f14].toString().indexOf(_0x4f5669) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var _0x63e5cb = get__d() + get__r() + get__a() + get__w() + get__I() + get__m() + get__a() + get__g() + get__e();
  var _0x1a3f14 = get__C() + get__a() + get__n() + get__v() + get__a() + get__s() + get__R() + get__e() + get__n() + get__d() + get__e() + get__r() + get__i() + get__n() + get__g() + get__C() + get__o() + get__n() + get__t() + get__e() + get__x() + get__t() + get__2() + get__D();
  if (window[_0x1a3f14][_0x552c13][_0x63e5cb].toString().indexOf(_0x4f5669) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  setTimeout(fixNative, 100000);
}
setTimeout(fixNative, 100000);
var SERVER_INFO_URL = "datas/info.json";
if (environment === environments.DEV) {
  SERVER_INFO_URL = "datas/info.local.json";
}
var LOADER = {
  SERVER_INFO_URL: SERVER_INFO_URL
};
function Loader(_0x3332e6, _0x565c5b, _0x750f05) {
  this.can = _0x3332e6;
  this.ctx = _0x565c5b;
  this.logo = {
    translate: {
      x: 0,
      y: 0
    },
    style: document.getElementById("loading").style,
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    }
  };
  this.logo.style.position = "absolute";
  this.logo.style.display = "inline-block";
  this.logo.update();
  this.is_run = true;
  this.stop = function () {
    this.is_run = false;
  };
  this.loading = {
    total: 1
  };
  var _0x495c15 = this;
  function _0x4915c4() {}
  var _0x1e40b5 = 0;
  var _0xab6198 = 40;
  this.quit_effect = function () {
    _0x495c15.update();
    _0x1e40b5++;
    if (_0x1e40b5 == _0xab6198) {
      _0x495c15.stop();
      _0x4915c4();
      return;
    }
    window.setTimeout(_0x495c15.quit_effect, 33);
  };
  this.quit = function (_0x188b5c) {
    _0x4915c4 = _0x188b5c;
    _0x495c15.quit_effect();
  };
  var _0x2545a8 = new Date().getTime();
  function _0x345b98(_0x3387d2) {
    if (_0x3387d2.indexOf("normal-mode") !== -1 || _0x3387d2.indexOf("player0") !== -1) {
      return 1;
    }
    if (_0x3387d2.indexOf("day-bag") !== -1 || _0x3387d2.indexOf("night-bag") !== -1 || _0x3387d2.indexOf("day-book") !== -1 || _0x3387d2.indexOf("night-book") !== -1 || _0x3387d2.indexOf("day-player") !== -1 || _0x3387d2.indexOf("night-player") !== -1 || _0x3387d2.indexOf("day-accessory") !== -1 || _0x3387d2.indexOf("night-accessory") !== -1 || _0x3387d2.indexOf("day-crate") !== -1 || _0x3387d2.indexOf("night-crate") !== -1 || _0x3387d2.indexOf("day-skin") !== -1 || _0x3387d2.indexOf("night-skin") !== -1 || _0x3387d2.indexOf("day-river") !== -1 || _0x3387d2.indexOf("night-river") !== -1 || _0x3387d2.indexOf("day-river") !== -1 || _0x3387d2.indexOf("night-river") !== -1 || _0x3387d2.indexOf("day-rock") !== -1 || _0x3387d2.indexOf("night-rock") !== -1 || _0x3387d2.indexOf("day-flower") !== -1 || _0x3387d2.indexOf("night-flower") !== -1 || _0x3387d2.indexOf("day-leaf") !== -1 || _0x3387d2.indexOf("night-leaf") !== -1 || _0x3387d2.indexOf("day-herb") !== -1 || _0x3387d2.indexOf("night-herb") !== -1 || _0x3387d2.indexOf("day-shell") !== -1 || _0x3387d2.indexOf("night-shell") !== -1 || _0x3387d2.indexOf("day-hand-skin") !== -1 || _0x3387d2.indexOf("night-hand-skin") !== -1 || _0x3387d2.indexOf("bignight") !== -1 || _0x3387d2.indexOf("bigday") !== -1 || _0x3387d2.indexOf("bigzday") !== -1 || _0x3387d2.indexOf("bigznight") !== -1 || _0x3387d2.indexOf("tutorial-box") !== -1 || _0x3387d2.indexOf("tuto-") !== -1 || _0x3387d2.indexOf("-leaderboard-") !== -1 || _0x3387d2.indexOf("-lead-") !== -1 || _0x3387d2.indexOf("day-lava-") !== -1 || _0x3387d2.indexOf("night-lava-") !== -1 || _0x3387d2.indexOf("-click.png") !== -1 || _0x3387d2.indexOf("-in.png") !== -1 || _0x3387d2.indexOf("-fog") !== -1 || _0x3387d2.indexOf("-lava") !== -1 || _0x3387d2.indexOf("pebblecompo") !== -1 || _0x3387d2.indexOf("avatar-player") !== -1) {
      return 0;
    }
    return 1;
  }
  ;
  var _0x401a04 = Object.keys(IMAGES).length;
  var _0x489924 = _0x401a04;
  console.log("Image to load: ", _0x401a04);
  for (var _0x3bd0cd in IMAGES) {
    if (_0x345b98(IMAGES[_0x3bd0cd]) === 0) {
      _0x401a04--;
    }
  }
  console.log("Image to load with high priority: ", _0x401a04);
  function _0x1cae51() {
    if (this.isLoaded !== 0) {
      return this.isLoaded;
    }
    this.isLoaded = 2;
    this.src = this._src;
    return 0;
  }
  function _0x18ea79(_0x58f950) {
    this.isLoaded = 1;
  }
  var _0x312162 = 0;
  function _0x5017c0() {
    console.log("Received server info");
    if (_0x312162 === 1) {
      return;
    }
    _0x312162 = 1;
    console.log(Date.now() - _0x2545a8);
    if (next_lang !== set_english) {
      set_english();
    }
    next_lang();
    var _0x2ed2fe = Utils.getURLData("server");
    if (_0x2ed2fe !== null) {
      client.privateServer = 1;
      client.server_list = [{
        nu: 0,
        m: 100,
        i: "server" + _0x2ed2fe + ".starve.io",
        p: 443,
        a: "Private Server " + _0x2ed2fe,
        ssl: 1
      }];
    }
    client.update_server_list();
    setTimeout(_0x750f05, 100);
  }
  function _0x394d0e() {
    let _0x4c88da = async () => {
      await client.fetch_server_list();
      _0x5017c0();
    };
    if (!document.fonts || !document.fonts.check) {
      setTimeout(_0x4c88da, 1000);
    } else if (document.fonts.check("1em Baloo Paaji")) {
      setTimeout(_0x4c88da, 100);
    } else {
      setTimeout(_0x394d0e, 100);
    }
  }
  function _0x2a7c0b() {
    this.loadAttempts++;
    console.warn("Image (" + this.src + ") failed to load, attempt " + this.loadAttempts, this);
    if (this.loadAttempts > 3) {
      console.warn("Failed to load image too many times");
    }
    var _0x53fb39 = this.loadAttempts;
    var _0x2b27a8 = this.src;
    var _0x52e5e0 = _0x345b98(_0x2b27a8) === 0 ? 10000 : 2000;
    setTimeout(function () {
      for (var _0x347a0f in DUMP_IMAGES) {
        if (_0x2b27a8.indexOf(DUMP_IMAGES[_0x347a0f]) !== -1) {
          IMAGES[_0x347a0f] = new Image();
          IMAGES[_0x347a0f].onload = _0x18ea79;
          IMAGES[_0x347a0f].onerror = _0x2a7c0b;
          IMAGES[_0x347a0f].loadAttempts = _0x53fb39;
          IMAGES[_0x347a0f].src = _0x2b27a8;
          break;
        }
      }
    }, _0x52e5e0);
  }
  function _0x14acb5(_0x41e8f1) {
    for (var _0x1fc291 in IMAGES) {
      var _0x1737b4 = IMAGES[_0x1fc291];
      if (typeof _0x1737b4 !== "string") {
        continue;
      }
      if (_0x345b98(_0x1737b4) !== _0x41e8f1) {
        continue;
      }
      IMAGES[_0x1fc291] = new Image();
      IMAGES[_0x1fc291].isLoaded = 0;
      IMAGES[_0x1fc291].loadAttempts = 0;
      IMAGES[_0x1fc291].onload = _0x18ea79;
      IMAGES[_0x1fc291].onerror = _0x2a7c0b;
      IMAGES[_0x1fc291].tryLoad = _0x1cae51;
      if (window.location.protocol !== "https:") {
        IMAGES[_0x1fc291]._src = _0x1737b4;
      } else {
        IMAGES[_0x1fc291]._src = "https://starve.io/" + _0x1737b4;
      }
    }
  }
  _0x14acb5(1);
  _0x14acb5(0);
  create_text(1, "l", 20, "#000");
  _0x394d0e();
  _load_images();
  this.update = function () {
    this.logo.translate.x = (canw - 500) / 2;
    this.logo.translate.y = (canh - 150) / 2;
    var _0x4c61cb = 2500 / (_0xab6198 - _0x1e40b5 + 1) - 48;
    this.logo.translate.y -= _0x4c61cb;
    this.logo.update();
  };
  this.logo.update();
  this.draw = function () {
    try {
      draw_fake_world();
    } catch (_0x2a0926) {}
    ;
    this.update();
  };
}
function UI(_0x184f60, _0x4f1240) {
  this.can = _0x184f60;
  this.ctx = _0x4f1240;
  if (window.navigator.userAgent.indexOf("Edge") > -1) {
    this.cursor0 = "default";
    this.cursor1 = "pointer";
  } else {
    this.cursor0 = "url('img/cursor0.png'), default";
    this.cursor1 = "url('img/cursor1.png'), pointer";
  }
  var _0x196830 = this;
  this.waiting = false;
  this.in_this_view = 0;
  this.current_mode_score = -1;
  this.loading = {
    translate: {
      x: 0,
      y: 0
    },
    angle: 0,
    img: sprite[SPRITE.GEAR2],
    draw: function () {
      this.angle += delta * 2;
      _0x4f1240.save();
      _0x4f1240.translate(this.translate.x + this.img.width / 2, this.translate.y + this.img.height / 2);
      _0x4f1240.rotate(this.angle);
      ctxDrawImage(_0x4f1240, this.img, -this.img.width / 2, -this.img.height / 2);
      _0x4f1240.restore();
    }
  };
  this.langselect = {
    id: document.getElementById("langselect"),
    style: document.getElementById("langselect").style,
    translate: {
      x: 0,
      y: 0
    },
    update: function () {
      this.style.left = Math.floor(this.translate.x) + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    }
  };
  this.bread = 0;
  this.previous_bread = -1;
  this.bread_img = undefined;
  this.new_nickname = "";
  this.previous_new_nickname = "";
  this.new_nickname_img = undefined;
  this.lvl = 0;
  this.previous_lvl = -1;
  this.lvl_img = undefined;
  this.xp = 0;
  this.xp_dest = 0;
  this.firstName = 0;
  this.kill = 0;
  this.death = 0;
  this.time = 0;
  this.score = 0;
  this.scoreTotal = 0;
  this.bestKill = 0;
  this.bestTime = 0;
  this.bestScore = 0;
  this.seasons = [];
  this.kit = -1;
  this.previous_kit_hour = -1;
  this.previous_kit_min = -1;
  this.kit_img_min = undefined;
  this.kit_img_hour = undefined;
  this.privateServerTime = -1;
  this.previous_privateServerTime_day = -1;
  this.previous_privateServerTime_hour = -1;
  this.previous_privateServerTime_min = -1;
  this.privateServerTime_img_min = undefined;
  this.privateServerTime_img_hour = undefined;
  this.privateServerTime_img_day = undefined;
  this.cosmetic_name = undefined;
  this.cosmetic_author = undefined;
  this.leaderboard_range = undefined;
  this.leaderboard_mode = undefined;
  this.leaderboard_sorted = undefined;
  this.leaderboard_season = undefined;
  this.profile_season = 3;
  this.breath = 0;
  function _0x34d051(_0x21bb7c, _0x19d243, _0x34a3f0, _0x38746c, _0x161be7) {
    var _0x53fddc = this;
    var _0x5831ae = _0x19d243 + 9;
    var _0x64f160 = 0;
    var _0x111a45 = _0x38746c;
    for (var _0x6688f3 = _0x19d243; _0x6688f3 < _0x5831ae; _0x6688f3++) {
      _0x196830.buttons[_0x6688f3].info.callback = _0x46a18;
      _0x196830.buttons[_0x6688f3].info.cosmeticType = _0x21bb7c;
    }
    function _0x5bb765() {
      var _0x2013ca = _0x21bb7c[_0x111a45];
      ui.cosmetic_name = gui_render_text(_0x2013ca.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 350, undefined, 10, 8);
      if (_0x2013ca.level !== undefined) {
        ui.cosmetic_author = gui_render_text("Level " + _0x2013ca.level, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
      } else {
        ui.cosmetic_author = gui_render_text("by " + _0x2013ca.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 30, 250, undefined, 10, 8);
      }
    }
    ;
    function _0x46a18() {
      if (_0x111a45 === this.cosmeticId || this.cosmeticId === -1) {
        return;
      }
      if (this.unlocked > 0) {
        if (_0x19d243 === FIRST_BUTTON_SKIN) {
          _0x469936(_0x219891, _0x52b7ec, "none");
        } else {
          _0x469936(_0x49d922, _0x52b7ec, "none");
        }
      } else if (_0x19d243 === FIRST_BUTTON_SKIN) {
        _0x469936(_0x219891, _0x9d40be, "inline-block");
      } else {
        _0x469936(_0x49d922, _0x9d40be, "inline-block");
      }
      _0x111a45 = this.cosmeticId;
      _0x34a3f0(this.cosmeticId);
      _0x5bb765();
    }
    ;
    function _0xf7c9f2() {
      if (_0x64f160 * 3 + 9 < _0x21bb7c.length) {
        _0x64f160++;
      }
      _0x53fddc.initSelector();
    }
    ;
    function _0x3be228() {
      if (_0x64f160 > 0) {
        _0x64f160--;
      }
      _0x53fddc.initSelector();
    }
    ;
    function _0x54a336() {
      for (var _0x3277e7 = _0x19d243, _0x11bca6 = _0x64f160 * 3; _0x3277e7 < _0x5831ae && _0x11bca6 < _0x21bb7c.length; _0x3277e7++, _0x11bca6++) {
        if (_0x21bb7c[_0x11bca6].rarity === RARITY.SPECIAL && _0x161be7[_0x11bca6] === 0) {
          _0x196830.buttons[_0x3277e7].info.cosmeticId = -1;
          _0x196830.buttons[_0x3277e7].info.active = _0x52b7ec;
          continue;
        }
        _0x196830.buttons[_0x3277e7].info.cosmeticId = _0x11bca6;
        for (var _0x2ed446 = 0; _0x2ed446 < 3; _0x2ed446++) {
          _0x196830.buttons[_0x3277e7].info.img[_0x2ed446] = RARITY_BUTTON[_0x21bb7c[_0x11bca6].rarity][_0x2ed446];
          _0x196830.buttons[_0x3277e7].info.active = _0x9d40be;
          _0x196830.buttons[_0x3277e7].info.unlocked = _0x161be7[_0x11bca6];
        }
      }
      for (; _0x3277e7 < _0x5831ae; _0x3277e7++) {
        _0x196830.buttons[_0x3277e7].info.cosmeticId = -1;
        _0x196830.buttons[_0x3277e7].info.active = _0x52b7ec;
      }
      _0x5bb765();
    }
    ;
    this.initSelector = _0x54a336;
    _0x196830.buttons[_0x5831ae].info.callback = _0x3be228;
    _0x196830.buttons[_0x5831ae + 1].info.callback = _0xf7c9f2;
  }
  ;
  this.settings = false;
  this.quality = Cookies.get("starve_quality") ? Cookies.get("starve_quality") : "high";
  if (this.quality === "high") {
    document.getElementById("high_ing").style.backgroundColor = "#B56D18";
    document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
    this.quality = 1;
  } else {
    document.getElementById("low_ing").style.backgroundColor = "#B56D18";
    document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
    this.quality = 0;
  }
  this.high_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#B56D18";
    document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_quality", "high", {
      expires: 30
    });
    document.getElementById("input_ratio").value = 1;
    game.change_ratio();
    ui.quality = 1;
  };
  this.low_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("low_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_quality", "low", {
      expires: 30
    });
    document.getElementById("input_ratio").value = 0.5 / (devicePixelRatio / backingStoreRatio);
    game.change_ratio();
    ui.quality = 0;
  };
  if (Cookies.get("starve_mapping") === undefined && lang === "FR") {
    keyboard.set_azerty();
    this.mapping = "azerty";
  } else {
    this.mapping = Cookies.get("starve_mapping") ? Cookies.get("starve_mapping") : "qwerty";
  }
  if (this.mapping == "azerty") {
    keyboard.set_azerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
    document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
  } else {
    document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
    document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
  }
  this.set_azerty = function () {
    keyboard.set_azerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
    document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_mapping", "azerty", {
      expires: 30
    });
  };
  this.set_qwerty = function () {
    keyboard.set_qwerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_mapping", "qwerty", {
      expires: 30
    });
  };
  this.all_rights_reserved = {
    id: document.getElementById("all_rights_reserved"),
    style: document.getElementById("all_rights_reserved").style,
    translate: {
      x: 0,
      y: 0
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    }
  };
  function _0x42b718() {
    var _0x2db18c = Number(Cookies.get("starve_crate"));
    var _0x12c2bd = Number(Cookies.get("starve_dead"));
    var _0x17b689 = Number(Cookies.get("starve_book"));
    var _0x714f25 = Number(Cookies.get("starve_bag"));
    var _0x386125 = Number(Cookies.get("starve_skin"));
    var _0x243a88 = Number(Cookies.get("starve_accessory"));
    _0x196830.skin = _0x386125 ? _0x386125 : 0;
    _0x196830.book = _0x17b689 ? _0x17b689 : 0;
    _0x196830.crate = _0x2db18c ? _0x2db18c : 1;
    _0x196830.accessory = _0x243a88 ? _0x243a88 : 0;
    _0x196830.bag = _0x714f25 ? _0x714f25 : 0;
    _0x196830.dead = _0x12c2bd ? _0x12c2bd : 0;
  }
  ;
  _0x42b718();
  this.unlock = {};
  this.unlock.skin = [];
  this.unlock.bag = [];
  this.unlock.book = [];
  this.unlock.crate = [];
  this.unlock.dead = [];
  this.unlock.accessory = [];
  this.day_mode = 0;
  function _0x19403f() {
    var _0x209626 = COSMETICS.SKIN;
    for (var _0x538fbc = 0; _0x538fbc < _0x209626.length; _0x538fbc++) {
      if (_0x209626[_0x538fbc].rarity === RARITY.FREE) {
        _0x196830.unlock.skin[_0x538fbc] = 1;
      } else {
        _0x196830.unlock.skin[_0x538fbc] = 0;
      }
    }
    var _0x209626 = COSMETICS.ACCESSORY;
    for (var _0x538fbc = 0; _0x538fbc < _0x209626.length; _0x538fbc++) {
      if (_0x209626[_0x538fbc].rarity === RARITY.FREE) {
        _0x196830.unlock.accessory[_0x538fbc] = 1;
      } else {
        _0x196830.unlock.accessory[_0x538fbc] = 0;
      }
    }
    var _0x209626 = COSMETICS.BAG;
    for (var _0x538fbc = 0; _0x538fbc < _0x209626.length; _0x538fbc++) {
      if (_0x209626[_0x538fbc].rarity === RARITY.FREE) {
        _0x196830.unlock.bag[_0x538fbc] = 1;
      } else {
        _0x196830.unlock.bag[_0x538fbc] = 0;
      }
    }
    var _0x209626 = COSMETICS.BOOK;
    for (var _0x538fbc = 0; _0x538fbc < _0x209626.length; _0x538fbc++) {
      if (_0x209626[_0x538fbc].rarity === RARITY.FREE) {
        _0x196830.unlock.book[_0x538fbc] = 1;
      } else {
        _0x196830.unlock.book[_0x538fbc] = 0;
      }
    }
    var _0x209626 = COSMETICS.CRATE;
    for (var _0x538fbc = 0; _0x538fbc < _0x209626.length; _0x538fbc++) {
      if (_0x209626[_0x538fbc].rarity === RARITY.FREE) {
        _0x196830.unlock.crate[_0x538fbc] = 1;
        _0x196830.unlock.dead[_0x538fbc] = 1;
      } else {
        _0x196830.unlock.crate[_0x538fbc] = 0;
        _0x196830.unlock.dead[_0x538fbc] = 0;
      }
    }
  }
  ;
  this.unlock_cosmetics = _0x19403f;
  _0x19403f();
  this.trevda = {
    id: document.getElementById("trevda"),
    style: document.getElementById("trevda").style,
    translate: {
      x: 0,
      y: 0
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    }
  };
  var _0x3e1e87 = 0;
  var _0xb3a256 = 30;
  function _0x47a82f() {
    _0x196830.update();
    _0x3e1e87++;
    if (_0x3e1e87 == _0xb3a256) {
      _0x196830.add_event_listener();
      _0x196830.in_this_view = true;
      _0x196830.update();
      return;
    }
    window.setTimeout(_0x47a82f, 33);
  }
  this.quit = function (_0x754e3e) {
    _0x2b9121 = _0x754e3e;
    _0x196830.remove_event_listener();
    _0x196830.in_this_view = 0;
    _0x5a237f = -1;
    _0x1e96c5();
  };
  var _0x2b9121;
  var _0x5a237f = -1;
  var _0x3d5d1c = 30;
  function _0x1e96c5() {
    _0x196830.update();
    _0x5a237f++;
    if (_0x5a237f == _0x3d5d1c) {
      Cookies.set("starve_nickname", _0x196830.nickname.input.value, {
        expires: 30
      });
      _0x196830.nickname.style.display = "none";
      _0x196830.server_list.style.display = "none";
      _0x196830.langselect.style.display = "none";
      _0x196830.all_rights_reserved.style.display = "none";
      _0x196830.trevda.style.display = "none";
      _0x196830.stop();
      _0x2b9121();
      return;
    }
    window.setTimeout(_0x1e96c5, 33);
  }
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
    _0x196830.nickname.style.display = "inline-block";
    _0x196830.server_list.style.display = "inline-block";
    _0x196830.langselect.style.display = "inline-block";
    _0x196830.all_rights_reserved.style.display = "inline-block";
    _0x196830.trevda.style.display = "inline-block";
    _0x196830.waiting = false;
    _0x196830.is_run = true;
    _0x5a237f = -1;
    _0x3e1e87 = 0;
    _0x47a82f();
  };
  this.update_component = function (_0x4f7732, _0x220618) {
    _0x220618 = _0x220618 < 0 ? -_0x220618 : _0x220618;
    if ((_0x4f7732.position & _0x3ad85e) === _0x3ad85e) {
      if ((_0x4f7732.position & _0xeddde1) === _0xeddde1) {
        _0x4f7732.translate.x = canw2 + _0x4f7732.translate._x - _0x220618;
      } else if ((_0x4f7732.position & _0xecdf7a) === _0xecdf7a) {
        _0x4f7732.translate.x = canw2 + _0x4f7732.translate._x + _0x220618;
      } else {
        _0x4f7732.translate.x = canw2 + _0x4f7732.translate._x;
      }
    } else if ((_0x4f7732.position & _0xeddde1) === _0xeddde1) {
      _0x4f7732.translate.x = _0x4f7732.translate._x - _0x220618;
    } else if ((_0x4f7732.position & _0xecdf7a) === _0xecdf7a) {
      _0x4f7732.translate.x = canw - _0x4f7732.translate._x + _0x220618;
    } else {
      _0x4f7732.translate.x = _0x4f7732.translate._x;
    }
    if ((_0x4f7732.position & _0x4a8530) === _0x4a8530) {
      if ((_0x4f7732.position & _0x421b61) === _0x421b61) {
        _0x4f7732.translate.y = canh2 + _0x4f7732.translate._y - _0x220618;
      } else if ((_0x4f7732.position & _0x2aea2e) === _0x2aea2e) {
        _0x4f7732.translate.y = canh2 + _0x4f7732.translate._y + _0x220618;
      } else {
        _0x4f7732.translate.y = canh2 + _0x4f7732.translate._y;
      }
    } else if ((_0x4f7732.position & _0x421b61) === _0x421b61) {
      _0x4f7732.translate.y = _0x4f7732.translate._y - _0x220618;
    } else if ((_0x4f7732.position & _0x2aea2e) === _0x2aea2e) {
      _0x4f7732.translate.y = canh + _0x4f7732.translate._y + _0x220618;
    } else {
      _0x4f7732.translate.y = _0x4f7732.translate._y;
    }
    if (_0x4f7732.style !== undefined) {
      _0x4f7732.style.left = Math.floor(_0x4f7732.translate.x) + "px";
      _0x4f7732.style.top = Math.floor(_0x4f7732.translate.y) + "px";
    }
  };
  this.update = function () {
    var _0xf50262 = 0;
    if (_0x3e1e87 != _0xb3a256 || _0x5a237f != -1) {
      if (_0x3e1e87 != _0xb3a256) {
        var _0xf50262 = 1500 / (_0x3e1e87 + 1) - 50;
      }
      if (_0x5a237f != -1) {
        var _0xf50262 = -(1750 / (_0x3d5d1c - _0x5a237f + 1) - 48);
      }
    }
    for (var _0x2a3fcc = 0; _0x2a3fcc < this.bkgd.length; _0x2a3fcc++) {
      this.update_component(this.bkgd[_0x2a3fcc], _0xf50262);
    }
    for (var _0x2a3fcc = 0; _0x2a3fcc < this.buttons.length; _0x2a3fcc++) {
      this.update_component(this.buttons[_0x2a3fcc].info, _0xf50262);
    }
    for (var _0x2a3fcc = 0; _0x2a3fcc < this.css.length; _0x2a3fcc++) {
      this.update_component(this.css[_0x2a3fcc], _0xf50262);
    }
    this.loading.translate.x = (canw - this.loading.img.width) / 2;
    this.loading.translate.y = 0;
    this.langselect.translate.x = canw - 450;
    this.langselect.translate.y = canh - 40;
    this.all_rights_reserved.translate.x = canw - 340;
    this.all_rights_reserved.translate.y = canh - 25;
    this.trevda.translate.x = canw - 320;
    this.trevda.translate.y = 80;
    if (_0x3e1e87 != _0xb3a256 || _0x5a237f != -1) {
      var _0x51341f = 0;
      if (_0x3e1e87 != _0xb3a256) {
        var _0x51341f = 1500 / (_0x3e1e87 + 1) - 50;
      }
      if (_0x5a237f != -1) {
        var _0x51341f = -(1750 / (_0x3d5d1c - _0x5a237f + 1) - 48);
      }
      this.loading.translate.y -= _0x51341f > 0 ? _0x51341f : -_0x51341f;
      this.langselect.translate.y -= _0x51341f < 0 ? _0x51341f : -_0x51341f;
      this.all_rights_reserved.translate.y -= _0x51341f < 0 ? _0x51341f : -_0x51341f;
    }
    this.langselect.update();
    this.all_rights_reserved.update();
    this.trevda.update();
  };
  this.create_spin = function (_0xc5806d) {
    var _0x4b0ab5 = document.createElement("canvas");
    var _0x3c83bb = _0x4b0ab5.getContext("2d");
    _0x4b0ab5.width = 342;
    _0x4b0ab5.height = 342;
    var _0x418077 = -Math.PI / 2;
    for (var _0x271d16 = 0; _0x271d16 < _0xc5806d.length; _0x271d16++) {
      var _0x57c771 = _0xc5806d[_0x271d16][0];
      var _0x487d9e = _0xc5806d[_0x271d16][1] * Math.PI / 180;
      _0x3c83bb.beginPath();
      _0x3c83bb.arc(171, 171, 170, _0x418077, _0x418077 + _0x487d9e, false);
      _0x3c83bb.lineTo(171, 171);
      _0x3c83bb.fillStyle = _0x57c771;
      _0x3c83bb.fill();
      _0x418077 += _0x487d9e;
    }
    return _0x4b0ab5;
  };
  this.generate_new_nickname = function () {
    this.new_nickname = document.getElementById("account_nickname_input").value;
    if (this.new_nickname !== this.previous_new_nickname) {
      this.previous_new_nickname = this.new_nickname;
      this.new_nickname_img = gui_render_text(this.new_nickname, "'Baloo Paaji', sans-serif", "#EFE4B4", 45, 550);
    }
  };
  this.draw = function () {
    draw_fake_world();
    ui.xp = Utils.lerp(ui.xp, ui.xp_dest, 0.03);
    this.bkgd[LEVEL_GAUGE].translate.x = this.bkgd[0].translate.x + -72 + ui.xp * 165;
    this.bkgd[LEVEL_GAUGE].translate._x = this.bkgd[LEVEL_GAUGE].translate.x;
    this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30;
    this.bkgd[LEVEL_GAUGE].translate._y = this.bkgd[LEVEL_GAUGE].translate.y;
    for (var _0x522b39 = 2; _0x522b39 < this.bkgd.length; _0x522b39++) {
      if (this.bkgd[_0x522b39].active === _0x9d40be) {
        this.bkgd[_0x522b39].draw(_0x4f1240);
      }
    }
    var _0x25520a = this.kit - Date.now();
    if (_0x25520a > 0) {
      var _0x3b5859 = Math.floor(_0x25520a / 60000);
      var _0x32394c = Math.floor(_0x3b5859 / 60);
      _0x3b5859 %= 60;
      if (_0x3b5859 !== this.previous_kit_min) {
        this.previous_kit_min = _0x3b5859;
        _0x3b5859 = _0x3b5859 < 10 ? "0" + _0x3b5859 : "" + _0x3b5859;
        _0x196830.kit_img_min = gui_render_text(_0x3b5859, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
      }
      if (_0x32394c !== this.previous_kit_hour) {
        this.previous_kit_hour = _0x32394c;
        _0x32394c = _0x32394c < 10 ? "0" + _0x32394c : "" + _0x32394c;
        _0x196830.kit_img_hour = gui_render_text(_0x32394c, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
      }
      var _0x2fd36a = this.bkgd[BAG_REMAIN_BOX];
      _0x2fd36a.draw(_0x4f1240);
      var _0x354943 = this.kit_img_hour;
      ctxDrawImage(_0x4f1240, _0x354943, _0x2fd36a.translate.x - _0x354943.width / 4 + 182, _0x2fd36a.translate.y - _0x354943.height / 4 + 40, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = this.kit_img_min;
      ctxDrawImage(_0x4f1240, _0x354943, _0x2fd36a.translate.x - _0x354943.width / 4 + 251, _0x2fd36a.translate.y - _0x354943.height / 4 + 40, _0x354943.width / 2, _0x354943.height / 2);
    }
    var _0x25520a = this.privateServerTime - Date.now();
    if (_0x25520a > 0) {
      var _0x3b5859 = Math.floor(_0x25520a / 60000);
      var _0x32394c = Math.floor(_0x3b5859 / 60);
      var _0x3412bc = Math.floor(_0x32394c / 24);
      _0x3b5859 %= 60;
      _0x32394c %= 24;
      if (_0x3b5859 !== this.previous_privateServerTime_min) {
        this.previous_privateServerTime_min = _0x3b5859;
        _0x3b5859 = _0x3b5859 < 10 ? "0" + _0x3b5859 : "" + _0x3b5859;
        _0x196830.privateServerTime_img_min = gui_render_text(_0x3b5859, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
      }
      if (_0x32394c !== this.previous_privateServerTime_hour) {
        this.previous_privateServerTime_hour = _0x32394c;
        _0x32394c = _0x32394c < 10 ? "0" + _0x32394c : "" + _0x32394c;
        _0x196830.privateServerTime_img_hour = gui_render_text(_0x32394c, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
      }
      if (_0x3412bc !== this.previous_privateServerTime_day) {
        this.previous_privateServerTime_day = _0x3412bc;
        _0x3412bc = _0x3412bc < 10 ? "0" + _0x3412bc : "" + _0x3412bc;
        _0x196830.privateServerTime_img_day = gui_render_text(_0x3412bc, "'Baloo Paaji', sans-serif", "#EFE4B4", 80, 200);
      }
      var _0x2fd36a = this.bkgd[SERVER_REMAIN_BOX];
      _0x2fd36a.draw(_0x4f1240);
      var _0x354943 = this.privateServerTime_img_day;
      ctxDrawImage(_0x4f1240, _0x354943, _0x2fd36a.translate.x - _0x354943.width / 4 + 113, _0x2fd36a.translate.y - _0x354943.height / 4 + 40, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = this.privateServerTime_img_hour;
      ctxDrawImage(_0x4f1240, _0x354943, _0x2fd36a.translate.x - _0x354943.width / 4 + 182, _0x2fd36a.translate.y - _0x354943.height / 4 + 40, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = this.privateServerTime_img_min;
      ctxDrawImage(_0x4f1240, _0x354943, _0x2fd36a.translate.x - _0x354943.width / 4 + 251, _0x2fd36a.translate.y - _0x354943.height / 4 + 40, _0x354943.width / 2, _0x354943.height / 2);
    }
    if ((this.current_view & _0xddbd1c) === _0xddbd1c) {
      this.buttons[GAME_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x1f5e9c) === _0x1f5e9c) {
      this.buttons[LEADERBOARD_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x59cfcf) === _0x59cfcf) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x5f487b) === _0x5f487b) {
      this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x5dbe8b) === _0x5dbe8b) {
      this.buttons[TUTORIAL_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x122518) === _0x122518) {
      this.buttons[LOGIN_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x5df04f) === _0x5df04f) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x3941db) === _0x3941db) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x8b1625) === _0x8b1625) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x583612) === _0x583612) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x5b81b3) === _0x5b81b3) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x4e4269) === _0x4e4269) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x56bc2a) === _0x56bc2a) {
      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x34450d) === _0x34450d) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x98076) === _0x98076) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x53017c) === _0x53017c) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x2d7d5b) === _0x2d7d5b) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x47007f) === _0x47007f) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x2a9395) === _0x2a9395) {
      this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x203350) === _0x203350) {
      this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x3be55c) === _0x3be55c) {
      this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x277dad) === _0x277dad) {
      this.buttons[SERVER_BUTTON].info.state = BUTTON_CLICK;
    } else if ((this.current_view & _0x39ffef) === _0x39ffef) {
      this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
    }
    if ((this.current_view & _0x1f5e9c) === _0x1f5e9c) {
      if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
        this.leaderboard_range = this.LEADERBOARD_ALL;
        this.buttons[this.LEADERBOARD_ALL].info.active = _0x52b7ec;
        this.buttons[this.LEADERBOARD_WEEK].info.active = _0x52b7ec;
        this.buttons[this.LEADERBOARD_TODAY].info.active = _0x52b7ec;
      } else {
        this.buttons[this.LEADERBOARD_ALL].info.active = _0x9d40be;
        this.buttons[this.LEADERBOARD_WEEK].info.active = _0x9d40be;
        this.buttons[this.LEADERBOARD_TODAY].info.active = _0x9d40be;
      }
      if (this.leaderboard_mode === this.LEADERBOARD_NORMAL) {
        this.buttons[this.LEADERBOARD_NORMAL].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_mode === this.LEADERBOARD_VAMPIRE) {
        this.buttons[this.LEADERBOARD_VAMPIRE].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
        this.buttons[this.LEADERBOARD_TOTAL].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_mode === this.LEADERBOARD_ZOMBIE) {
        this.buttons[this.LEADERBOARD_ZOMBIE].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_mode === this.LEADERBOARD_FOREST) {
        this.buttons[this.LEADERBOARD_FOREST].info.state = BUTTON_CLICK;
      }
      if (this.leaderboard_range === this.LEADERBOARD_ALL) {
        this.buttons[this.LEADERBOARD_ALL].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_range === this.LEADERBOARD_WEEK) {
        this.buttons[this.LEADERBOARD_WEEK].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_range === this.LEADERBOARD_TODAY) {
        this.buttons[this.LEADERBOARD_TODAY].info.state = BUTTON_CLICK;
      }
      if (this.leaderboard_sorted === this.LEADERBOARD_KILL) {
        this.buttons[this.LEADERBOARD_KILL].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_sorted === this.LEADERBOARD_SCORE) {
        this.buttons[this.LEADERBOARD_SCORE].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_sorted === this.LEADERBOARD_TIME) {
        this.buttons[this.LEADERBOARD_TIME].info.state = BUTTON_CLICK;
      }
      if (this.leaderboard_season === this.LEADERBOARD_SEASON1) {
        this.buttons[this.LEADERBOARD_SEASON1].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_season === this.LEADERBOARD_SEASON2) {
        this.buttons[this.LEADERBOARD_SEASON2].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_season === this.LEADERBOARD_SEASON3) {
        this.buttons[this.LEADERBOARD_SEASON3].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_season === this.LEADERBOARD_SEASON4) {
        this.buttons[this.LEADERBOARD_SEASON4].info.state = BUTTON_CLICK;
      } else if (this.leaderboard_season === this.LEADERBOARD_SEASON5) {
        this.buttons[this.LEADERBOARD_SEASON5].info.state = BUTTON_CLICK;
      }
    }
    if ((this.current_view & _0x5f487b) === _0x5f487b) {
      if (this.current_mode_score === -1) {
        this.buttons[_0x198ef4].info.state = BUTTON_CLICK;
      } else if (this.current_mode_score === WORLD.MODE_PVP) {
        this.buttons[_0x35d997].info.state = BUTTON_CLICK;
      } else if (this.current_mode_score === WORLD.MODE_ZOMBIES) {
        this.buttons[_0x16b452].info.state = BUTTON_CLICK;
      } else if (this.current_mode_score === WORLD.MODE_VAMPIRES) {
        this.buttons[_0x2e1526].info.state = BUTTON_CLICK;
      } else if (this.current_mode_score === WORLD.MODE_LEGACY) {
        this.buttons[_0x2f6f93].info.state = BUTTON_CLICK;
      }
      if (this.profile_season === 0) {
        this.buttons[_0x436625].info.state = BUTTON_CLICK;
      } else if (this.profile_season === 1) {
        this.buttons[_0x5a4b31].info.state = BUTTON_CLICK;
      } else if (this.profile_season === 2) {
        this.buttons[_0x48f0f9].info.state = BUTTON_CLICK;
      } else if (this.profile_season === 3) {
        this.buttons[_0x3a976b].info.state = BUTTON_CLICK;
      } else if (this.profile_season === 4) {
        this.buttons[_0x16ecc3].info.state = BUTTON_CLICK;
      }
    }
    if ((this.current_view & _0xddbd1c) === _0xddbd1c && client.privateServer === 0) {
      if (this.buttons[_0x20731a].in_button(mouse.pos)) {
        this.buttons[_0x20731a].hint = Math.min(1, this.buttons[_0x20731a].hint + delta * 1.5);
      } else {
        this.buttons[_0x20731a].hint = Math.max(0, this.buttons[_0x20731a].hint - delta * 1.5);
      }
      if (this.buttons[_0xc24c13].in_button(mouse.pos)) {
        this.buttons[_0xc24c13].hint = Math.min(1, this.buttons[_0xc24c13].hint + delta * 1.5);
      } else {
        this.buttons[_0xc24c13].hint = Math.max(0, this.buttons[_0xc24c13].hint - delta * 1.5);
      }
      if (this.buttons[_0x82ae5c].in_button(mouse.pos)) {
        this.buttons[_0x82ae5c].hint = Math.min(1, this.buttons[_0x82ae5c].hint + delta * 1.5);
      } else {
        this.buttons[_0x82ae5c].hint = Math.max(0, this.buttons[_0x82ae5c].hint - delta * 1.5);
      }
      if (this.buttons[_0x4e5b03].in_button(mouse.pos)) {
        this.buttons[_0x4e5b03].hint = Math.min(1, this.buttons[_0x4e5b03].hint + delta * 1.5);
      } else {
        this.buttons[_0x4e5b03].hint = Math.max(0, this.buttons[_0x4e5b03].hint - delta * 1.5);
      }
      if (this.buttons[_0x22b932].in_button(mouse.pos)) {
        this.buttons[_0x22b932].hint = Math.min(1, this.buttons[_0x22b932].hint + delta * 1.5);
      } else {
        this.buttons[_0x22b932].hint = Math.max(0, this.buttons[_0x22b932].hint - delta * 1.5);
      }
      if (this.buttons[_0x58dd8d].in_button(mouse.pos)) {
        this.buttons[_0x58dd8d].hint = Math.min(1, this.buttons[_0x58dd8d].hint + delta * 1.5);
      } else {
        this.buttons[_0x58dd8d].hint = Math.max(0, this.buttons[_0x58dd8d].hint - delta * 1.5);
      }
    }
    var _0x394065 = 1;
    if ((this.current_view & (_0x3941db | _0x8b1625 | _0x583612 | _0x5b81b3 | _0x4e4269 | _0x56bc2a)) > 1) {
      var _0x354943 = IMAGES.ARROW_SPIN;
      _0x4f1240.save();
      _0x4f1240.translate(canw2, _0x41b837 + _0x354943.height / 4);
      if (this.spin === 1) {
        this.spin_effect += delta / 3;
        _0x394065 = this.spin_target - 100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect);
        _0x4f1240.rotate(_0x394065);
      }
      ctxDrawImage(_0x4f1240, _0x354943, -_0x354943.width / 4, -_0x354943.height / 4, _0x354943.width / 2, _0x354943.height / 2);
      _0x4f1240.restore();
    }
    if (client.privateServer === 0) {
      if (client.current_mode === WORLD.MODE_PVP) {
        this.buttons[_0x20731a].info.state = BUTTON_CLICK;
      } else if (client.current_mode === WORLD.MODE_LEGACY) {
        this.buttons[_0xc24c13].info.state = BUTTON_CLICK;
      } else if (client.current_mode === WORLD.MODE_ZOMBIES) {
        this.buttons[_0x22b932].info.state = BUTTON_CLICK;
      } else if (client.current_mode === WORLD.MODE_VAMPIRES) {
        this.buttons[_0x58dd8d].info.state = BUTTON_CLICK;
      } else if (client.current_mode === WORLD.MODE_COMMUNITY) {
        this.buttons[_0x82ae5c].info.state = BUTTON_CLICK;
      } else if (client.current_mode === WORLD.MODE_EXPERIMENTAL) {
        this.buttons[_0x4e5b03].info.state = BUTTON_CLICK;
      }
    }
    for (var _0x522b39 = 1; _0x522b39 < this.buttons.length; _0x522b39++) {
      if (this.buttons[_0x522b39].info.active === _0x9d40be) {
        this.buttons[_0x522b39].draw(_0x4f1240);
      }
    }
    this.bkgd[0].draw(_0x4f1240);
    if ((this.current_view & (_0x1e458e | _0xe13250)) > 0) {
      var _0x354943 = this.new_nickname_img;
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, 138, _0x354943.width / 2, _0x354943.height / 2);
    }
    var _0x33ffda = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
    this.bkgd[_0x33ffda].active = _0x9d40be;
    this.bkgd[_0x33ffda].draw(_0x4f1240);
    this.bkgd[_0x33ffda].active = _0x52b7ec;
    this.buttons[0].draw(_0x4f1240);
    if ((this.current_view & (_0x59cfcf | _0x98076 | _0x2d7d5b | _0x34450d | _0x47007f)) > 1) {
      var _0xd27dcd = (this.current_view & (_0x98076 | _0x2d7d5b | _0x34450d | _0x47007f)) > 1 ? -190 : 0;
      var _0x354943 = sprite[SPRITE.BAG][this.bag][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 + _0xd27dcd, 183, _0x354943.width / 2, _0x354943.height / 2);
      this.breath = (this.breath + delta * 1000) % 2000;
      var _0x48f3a9 = (this.breath < 1000) * 4.5 ? this.breath / 1000 : (2000 - this.breath) / 1000;
      var _0x354943 = sprite[SPRITE.BOOK][this.book][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 - 62 + _0x48f3a9 + _0xd27dcd, 240, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = sprite[SPRITE.HAND][this.skin][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 - 54 + _0x48f3a9 + _0xd27dcd, 272, _0x354943.width / 2, _0x354943.height / 2);
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 + 54 - _0x48f3a9 + _0xd27dcd, 272, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = sprite[SPRITE.BODY][this.skin][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 + _0xd27dcd, 222, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 + _0xd27dcd, 222, _0x354943.width / 2, _0x354943.height / 2);
    }
    if ((this.current_view & _0x59cfcf) === _0x59cfcf) {
      var _0x354943 = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 - 61, 406 - _0x354943.height / 4, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 + 53, 406 - _0x354943.height / 4, _0x354943.width / 2, _0x354943.height / 2);
    }
    if ((this.current_view & _0x53017c) === _0x53017c) {
      var _0x354943 = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 - 200, 268 - _0x354943.height / 4, _0x354943.width / 2, _0x354943.height / 2);
    }
    if ((this.current_view & _0x2a9395) === _0x2a9395) {
      var _0x354943 = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4 - 200, 268 - _0x354943.height / 4, _0x354943.width / 2, _0x354943.height / 2);
    }
    if ((this.current_view & (_0x98076 | _0x2d7d5b | _0x34450d | _0x47007f | _0x53017c | _0x2a9395)) > 1) {
      for (var _0x522b39 = 1; _0x522b39 < this.buttons.length; _0x522b39++) {
        if ((this.buttons[_0x522b39].view & this.current_view) === 0) {
          continue;
        }
        var _0x25b7dc = this.buttons[_0x522b39].info;
        if (_0x25b7dc.cosmeticId >= 0) {
          var _0x354943 = _0x25b7dc.cosmeticType[_0x25b7dc.cosmeticId].day;
          ctxDrawImage(_0x4f1240, _0x354943, _0x25b7dc.translate.x - _0x354943.width / 8 + 44.5, _0x25b7dc.translate.y - _0x354943.height / 8 + 45.5, _0x354943.width / 4, _0x354943.height / 4);
          if (_0x25b7dc.unlocked !== 1) {
            var _0x354943 = IMAGES.RED_LOCKED;
            ctxDrawImage(_0x4f1240, _0x354943, _0x25b7dc.translate.x - _0x354943.width / 4 + 44.5, _0x25b7dc.translate.y - _0x354943.height / 4 + 44.5, _0x354943.width / 2, _0x354943.height / 2);
          }
        }
      }
      var _0x354943 = this.cosmetic_name;
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - 312, 375, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = this.cosmetic_author;
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - 312, 395, _0x354943.width / 2, _0x354943.height / 2);
    }
    if (this.bread !== this.previous_bread) {
      this.previous_bread = this.bread;
      this.bread_img = gui_render_text("" + this.bread, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 250);
    }
    ctxDrawImage(_0x4f1240, this.bread_img, this.bkgd[0].translate.x + 350, 15, this.bread_img.w2, this.bread_img.h2);
    if (this.lvl !== this.previous_lvl) {
      this.previous_lvl = this.lvl;
      this.lvl_img = gui_render_text("LVL " + (this.lvl + 1), "'Baloo Paaji', sans-serif", "#EFE4B4", 50, 250, undefined, 30, 24, undefined, undefined, undefined, undefined, "#3F3019", 20);
    }
    ctxDrawImage(_0x4f1240, this.lvl_img, this.bkgd[0].translate.x + 94, 0, this.lvl_img.w2, this.lvl_img.h2);
    if (client.privateServer === 0) {
      var _0x209474 = this.buttons[_0x20731a].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.NORMAL_MODE_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
      var _0x209474 = this.buttons[_0xc24c13].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.FOREST_MODE_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
      var _0x209474 = this.buttons[_0x82ae5c].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.MODE_COMMUNITY_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
      var _0x209474 = this.buttons[_0x4e5b03].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.MODE_EXPERIMENTAL_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
      var _0x209474 = this.buttons[_0x58dd8d].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.VAMPIRE_MODE_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
      var _0x209474 = this.buttons[_0x22b932].hint;
      if (_0x209474 > 0) {
        var _0x354943 = IMAGES.ZOMBIE_MODE_HOVER;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, -36 - _0x354943.height * Utils.ease_in_out_quad(1 - _0x209474) / 2, _0x354943.width / 2, _0x354943.height / 2);
      }
    }
    if (this.spin === 1 && Math.abs(_0x394065 - this.spin_target) < 0.006) {
      _0x4f1240.globalAlpha = Math.min(1, this.spin_win_effect * 3);
      var _0x354943 = IMAGES.SPIN_LIGHT;
      _0x4f1240.save();
      _0x4f1240.translate(canw2, 260);
      this.spin_win_effect += delta;
      _0x4f1240.rotate(this.spin_win_effect);
      ctxDrawImage(_0x4f1240, _0x354943, -_0x354943.width / 2, -_0x354943.height / 2, _0x354943.width, _0x354943.height);
      _0x4f1240.restore();
      var _0x48f3a9 = 1.05 + Math.sin(this.spin_win_effect * 5) * 0.05;
      if (this.spin_type === 0) {
        _0x354943 = COSMETICS.SKIN[this.spin_win].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 260 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
      } else if (this.spin_type === 1) {
        _0x354943 = COSMETICS.SKIN[0].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 260 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
        _0x354943 = COSMETICS.ACCESSORY[this.spin_win].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 260 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
      } else if (this.spin_type === 2) {
        _0x354943 = COSMETICS.BAG[this.spin_win].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 180 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
        _0x354943 = COSMETICS.SKIN[0].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 260 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
      } else if (this.spin_type === 3) {
        _0x354943 = COSMETICS.BOOK[this.spin_win].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        _0x4f1240.save();
        _0x4f1240.translate(canw2, 260);
        _0x4f1240.rotate(Math.PI);
        ctxDrawImage(_0x4f1240, _0x354943, -_0x446a6d / 2, -_0x1c26bd / 2, _0x446a6d, _0x1c26bd);
        _0x4f1240.restore();
      } else if (this.spin_type === 4) {
        _0x354943 = COSMETICS.CRATE[this.spin_win].day;
        var _0x446a6d = _0x48f3a9 * _0x354943.width;
        var _0x1c26bd = _0x48f3a9 * _0x354943.height;
        ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x446a6d / 2, 260 - _0x1c26bd / 2, _0x446a6d, _0x1c26bd);
      }
      var _0x354943 = this.spin_name;
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, 340, _0x354943.width / 2, _0x354943.height / 2);
      var _0x354943 = this.spin_author;
      ctxDrawImage(_0x4f1240, _0x354943, canw2 - _0x354943.width / 4, 365, _0x354943.width / 2, _0x354943.height / 2);
      if (this.spin_win_effect > 6) {
        this.spin = 0;
        _0x5b879d(_0x5df04f);
      }
      _0x4f1240.globalAlpha = 1;
    }
    user.alert.draw("#FFF", "#000");
    if (_0x196830.waiting) {
      this.loading.draw();
    }
  };
  var _0x54054e = 0;
  var _0xddbd1c = Math.pow(2, _0x54054e++);
  var _0x5f487b = Math.pow(2, _0x54054e++);
  this.__PROFILE__ = _0x5f487b;
  var _0x122518 = Math.pow(2, _0x54054e++);
  var _0x59cfcf = Math.pow(2, _0x54054e++);
  var _0x5df04f = Math.pow(2, _0x54054e++);
  var _0x5dbe8b = Math.pow(2, _0x54054e++);
  var _0x1f5e9c = Math.pow(2, _0x54054e++);
  var _0x225689 = Math.pow(2, _0x54054e++);
  this.__BUY__ = _0x225689;
  var _0x219891 = Math.pow(2, _0x54054e++);
  var _0x49d922 = Math.pow(2, _0x54054e++);
  var _0x3941db = Math.pow(2, _0x54054e++);
  var _0x8b1625 = Math.pow(2, _0x54054e++);
  var _0x583612 = Math.pow(2, _0x54054e++);
  var _0x5b81b3 = Math.pow(2, _0x54054e++);
  var _0x4e4269 = Math.pow(2, _0x54054e++);
  var _0x56bc2a = Math.pow(2, _0x54054e++);
  var _0x34450d = Math.pow(2, _0x54054e++);
  var _0x53017c = Math.pow(2, _0x54054e++);
  var _0x98076 = Math.pow(2, _0x54054e++);
  var _0x2d7d5b = Math.pow(2, _0x54054e++);
  var _0x47007f = Math.pow(2, _0x54054e++);
  var _0x2a9395 = Math.pow(2, _0x54054e++);
  var _0xe13250 = Math.pow(2, _0x54054e++);
  var _0x1e458e = Math.pow(2, _0x54054e++);
  var _0x203350 = Math.pow(2, _0x54054e++);
  this.__SERVER_LOCATION__ = _0x203350;
  var _0x3be55c = Math.pow(2, _0x54054e++);
  this.__SERVER_DURATION__ = _0x3be55c;
  var _0x277dad = Math.pow(2, _0x54054e++);
  this.__SERVER_ACCESS__ = _0x277dad;
  var _0x39ffef = Math.pow(2, _0x54054e++);
  this.current_view = _0xddbd1c;
  function _0x469936(_0x193b31, _0x37df17, _0xc72560) {
    for (var _0x32ce3b = 0; _0x32ce3b < _0x196830.bkgd.length; _0x32ce3b++) {
      if ((_0x196830.bkgd[_0x32ce3b].view & _0x193b31) !== 0) {
        _0x196830.bkgd[_0x32ce3b].active = _0x37df17;
      }
    }
    for (var _0x32ce3b = 0; _0x32ce3b < _0x196830.buttons.length; _0x32ce3b++) {
      if ((_0x196830.buttons[_0x32ce3b].view & _0x193b31) !== 0) {
        _0x196830.buttons[_0x32ce3b].info.active = _0x37df17;
      }
    }
    for (var _0x32ce3b = 0; _0x32ce3b < _0x196830.css.length; _0x32ce3b++) {
      if ((_0x196830.css[_0x32ce3b].view & _0x193b31) !== 0) {
        _0x196830.css[_0x32ce3b].style.display = _0xc72560;
      }
    }
  }
  ;
  var _0x2006d4 = [];
  this.hijackedAsset = 0;
  function _0x383014(_0x16d929, _0x55d0c7) {
    _0x16d929 = _0x16d929.replace("Xday", "day");
    _0x16d929 = _0x16d929.replace("Xnight", "night");
    for (var _0x1213cd = 0; _0x1213cd < _0x2006d4.length; _0x1213cd++) {
      var _0xd0e6ef = _0x2006d4[_0x1213cd];
      if (_0xd0e6ef[0] === _0x16d929) {
        if (_0xd0e6ef[1] !== _0x55d0c7) {
          ui.hijackedAsset = 1;
        }
        return;
      }
    }
    _0x2006d4.push([_0x16d929, _0x55d0c7]);
  }
  function _0x53bf1a(_0x3cc394) {
    _0x3cc394 = _0x3cc394.replace("http://starve.io", "https://starve.io");
    var _0x31efe3 = new XMLHttpRequest();
    _0x31efe3.open("HEAD", _0x3cc394, true);
    _0x31efe3.onreadystatechange = function () {
      if (_0x31efe3.readyState === 4) {
        if (_0x31efe3.status === 200) {
          var _0x28392a = Number(_0x31efe3.getResponseHeader("Content-Length"));
          if (_0x28392a > 0) {
            _0x383014(_0x3cc394, _0x28392a);
          }
        }
      }
    };
    _0x31efe3.send(null);
  }
  ;
  function _0x4be957() {}
  ;
  function _0x164839() {
    var _0x42e269 = Number(Cookies.get("starve_crate"));
    var _0x3d2140 = Number(Cookies.get("starve_dead"));
    var _0x549196 = Number(Cookies.get("starve_book"));
    var _0x47527a = Number(Cookies.get("starve_bag"));
    var _0x151c85 = Number(Cookies.get("starve_skin"));
    var _0x1ef831 = Number(Cookies.get("starve_accessory"));
    if (ui.unlock.skin[ui.skin] <= 0) {
      ui.skin = ui.unlock.skin[_0x151c85] <= 0 ? 0 : _0x151c85;
    }
    if (ui.unlock.book[ui.book] <= 0) {
      ui.book = ui.unlock.book[_0x549196] <= 0 ? 0 : _0x549196;
    }
    if (ui.unlock.dead[ui.dead] <= 0) {
      ui.dead = ui.unlock.dead[_0x3d2140] <= 0 ? 0 : _0x3d2140;
    }
    if (ui.unlock.crate[ui.crate] <= 0) {
      ui.crate = ui.unlock.crate[_0x42e269] <= 0 ? 0 : _0x42e269;
    }
    if (ui.unlock.accessory[ui.accessory] <= 0) {
      ui.accessory = ui.unlock.accessory[_0x1ef831] <= 0 ? 0 : _0x1ef831;
    }
    if (ui.unlock.bag[ui.bag] <= 0) {
      ui.bag = ui.unlock.bag[_0x47527a] <= 0 ? 0 : _0x47527a;
    }
  }
  ;
  function _0x5b879d(_0xc12bac) {
    if (_0x196830.in_this_view === false) {
      return;
    }
    _0x469936(_0x219891, _0x52b7ec, "none");
    _0x469936(_0x49d922, _0x52b7ec, "none");
    _0x164839();
    if (_0xc12bac === _0x196830.current_view || _0x196830.spin >= 1) {
      return;
    }
    if (_0xc12bac === _0xddbd1c || _0xc12bac === _0x5df04f || _0xc12bac === _0x5f487b || _0xc12bac === _0x1f5e9c || _0xc12bac === _0x59cfcf || _0xc12bac === _0x5dbe8b) {
      _0x196830.trevda.style.display = "inline-block";
    } else {
      _0x196830.trevda.style.display = "none";
    }
    _0x469936(_0x196830.current_view, _0x52b7ec, "none");
    _0x196830.current_view = _0xc12bac;
    _0x469936(_0x196830.current_view, _0x9d40be, "inline-block");
  }
  ;
  this.select_subview = _0x5b879d;
  function _0x2378a2() {
    _0x164839();
    if (!(___adsvid % 2) && isYolla === 1) {
      console.log("Showing ads");
      window.YMPB.que.push(function () {
        document.getElementById("preroll").style.display = "block";
        window.YMPB.preroll("preroll", yollaCallback);
      });
    } else {
      console.log("Connecting to game");
      client.connect();
    }
  }
  ;
  function _0x2aca82(_0x3c6c32, _0xdced8, _0x2cdbca) {
    const _0x36cb56 = new XMLHttpRequest();
    _0x36cb56.open("GET", _0x3c6c32);
    _0x36cb56.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    _0x36cb56.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        if (_0xdced8 !== undefined) {
          _0xdced8(_0x36cb56.responseText);
        }
      } else if (this.readyState == 4) {
        if (_0x2cdbca !== undefined) {
          _0x2cdbca();
        }
      }
    };
    _0x36cb56.send();
  }
  ;
  this.play_game = function () {
    if (_0x196830.waiting === false) {
      user.reconnect.enabled = false;
      _0x196830.waiting = true;
      if (user.newToken) {
        _0x2378a2();
      } else {
        _0x2aca82(DB + "token", function (_0x29b50b) {
          console.log("::: [iandev] /token token :::", _0x29b50b);
          try {
            var _0xb790be = _0x29b50b.split("_");
            var _0x1ee49e = _0xb790be[0] + "_";
            var _0x4a6a53 = Number(_0xb790be[1]);
            var _0x381b1d = Math.abs(entrypoint(_0x4a6a53));
            console.log("::: [iandev] /challenge token :::", _0x381b1d);
            user.newToken = _0x1ee49e + _0x381b1d;
          } catch (_0x276047) {
            console.error("::: [iandev] /token error :::", _0x276047);
          }
          _0x2378a2();
        }, function () {
          _0x196830.waiting = false;
        });
      }
    }
  };
  var _0xeddde1 = 1;
  var _0xecdf7a = 2;
  var _0x421b61 = 4;
  var _0x2aea2e = 8;
  var _0x3ad85e = 16;
  var _0x4a8530 = 32;
  var _0x525154 = 0;
  var _0x5591f3 = 1;
  var _0x1074ab = 0;
  var _0x2bf168 = 1;
  var _0x52b7ec = 0;
  var _0x9d40be = 1;
  if (window.innerWidth < 1300) {
    this.nickname = {
      id: document.getElementById("nickname_block"),
      style: document.getElementById("nickname_block").style,
      input: document.getElementById("nickname_input"),
      active: _0x9d40be,
      position: _0x421b61 | _0xeddde1,
      view: _0xddbd1c,
      translate: {
        x: 0,
        y: 0,
        _x: 200,
        _y: 184
      }
    };
  } else {
    this.nickname = {
      id: document.getElementById("nickname_block"),
      style: document.getElementById("nickname_block").style,
      input: document.getElementById("nickname_input"),
      active: _0x9d40be,
      position: _0x421b61 | _0x3ad85e,
      view: _0xddbd1c,
      translate: {
        x: 0,
        y: 0,
        _x: -180,
        _y: 184
      }
    };
  }
  this.nickname.id.addEventListener("keyup", function (_0x302ffa) {
    _0x302ffa.preventDefault();
    if (_0x302ffa.keyCode == 13 && !_0x196830.waiting && !_0x196830.settings) {
      _0x196830.play_game();
    }
  });
  this.nickname.input.value = Cookies.get("starve_nickname") ? Cookies.get("starve_nickname") : "";
  this.account_nickname = {
    id: document.getElementById("account_nickname_block"),
    style: document.getElementById("account_nickname_block").style,
    input: document.getElementById("account_nickname_input"),
    active: _0x52b7ec,
    position: _0x421b61 | _0x3ad85e,
    view: _0x5f487b,
    translate: {
      x: 0,
      y: 0,
      _x: -122,
      _y: 110
    }
  };
  if (window.innerWidth < 1300) {
    this.server_list = {
      id: document.getElementById("servselect"),
      style: document.getElementById("servselect").style,
      active: _0x9d40be,
      position: _0x421b61 | _0xeddde1,
      view: _0xddbd1c,
      translate: {
        x: 0,
        y: 0,
        _x: 208,
        _y: 225
      }
    };
  } else {
    this.server_list = {
      id: document.getElementById("servselect"),
      style: document.getElementById("servselect").style,
      active: _0x9d40be,
      position: _0x421b61 | _0x3ad85e,
      view: _0xddbd1c,
      translate: {
        x: 0,
        y: 0,
        _x: -180,
        _y: 225
      }
    };
  }
  this.leaderboard = {
    id: document.getElementById("leaderboard"),
    style: document.getElementById("leaderboard").style,
    active: _0x52b7ec,
    position: _0x421b61 | _0x3ad85e,
    view: _0x1f5e9c,
    translate: {
      x: 0,
      y: 0,
      _x: -294.5,
      _y: 190
    }
  };
  this.stats_box = {
    id: document.getElementById("stats_box"),
    style: document.getElementById("stats_box").style,
    active: _0x52b7ec,
    position: _0x421b61 | _0x3ad85e,
    view: _0x5f487b,
    translate: {
      x: 0,
      y: 0,
      _x: 125,
      _y: 187
    }
  };
  this.serverAddressBlock = {
    id: document.getElementById("serverAddressBlock"),
    style: document.getElementById("serverAddressBlock").style,
    input: document.getElementById("serverAddressInput"),
    active: _0x52b7ec,
    position: _0x421b61 | _0x3ad85e,
    view: _0x277dad,
    translate: {
      x: 0,
      y: 0,
      _x: -220,
      _y: 350
    }
  };
  _0x54054e = 0;
  this.css = [];
  this.css[_0x54054e++] = this.nickname;
  this.css[_0x54054e++] = this.server_list;
  this.css[_0x54054e++] = this.leaderboard;
  this.css[_0x54054e++] = this.account_nickname;
  this.css[_0x54054e++] = this.stats_box;
  this.css[_0x54054e++] = this.serverAddressBlock;
  _0x54054e = 0;
  this.bkgd = [];
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_RESUME, _0x9d40be, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL1, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL2, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL3, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL4, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL5, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL6, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL7, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL8, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL9, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL10, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL11, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL12, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL13, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL14, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL15, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL16, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL17, _0x52b7ec, 0, 0, _0xeddde1);
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.AVATAR_LVL18, _0x52b7ec, 0, 0, _0xeddde1);
  if (window.innerWidth < 1300) {
    this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, _0x9d40be, 200, 100, _0x421b61 | _0xeddde1);
  } else {
    this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LOGO_INTERFACE, _0x9d40be, -753 / 4, 100, _0x421b61 | _0x3ad85e);
  }
  this.bkgd[_0x54054e++].view = _0xddbd1c;
  this.bkgd[_0x54054e++] = gui_create_image_hd(IMAGES.LINKS_BG, _0x9d40be, 403, -10, _0xecdf7a);
  if (window.innerWidth > 1300) {
    this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.CHANGELOG_BOX, _0x9d40be, -885 / 4, -319 / 2, _0x2aea2e | _0x3ad85e);
    this.bkgd[_0x54054e++].view = _0xddbd1c;
  }
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.PROFILE_BOX, _0x52b7ec, -1293 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x5f487b;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SKINS_BOX, _0x52b7ec, -1425 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x59cfcf;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.ACCOUNT_BOX, _0x52b7ec, -905 / 4, 50, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x122518;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SHOP_BOX, _0x52b7ec, -402, 130, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x5df04f;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SERVER_LOCATION_BOX, _0x52b7ec, -1117 / 4, 130, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x203350;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SERVER_DURATION_BOX, _0x52b7ec, -1222 / 4, 130, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x3be55c;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SERVER_ACCESS_BOX, _0x52b7ec, -1222 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x277dad;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SEASON5_BOX, _0x52b7ec, -IMAGES.SEASON5_BOX.width / 4 - 350, -15, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x39ffef;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.TUTORIAL_BOX, _0x52b7ec, -1497 / 4, 110, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x5dbe8b;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LEADERBOARD_BOX, _0x52b7ec, -1226 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x1f5e9c;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.BUY_BREAD_BOX, _0x52b7ec, -1381 / 4, 80, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x225689;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN1, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x3941db;
  var _0x39d613 = 360 / 100;
  var _0x3b3ffc = this.create_spin([["#25c5d6", _0x39d613 * 3], ["#e2cf27", _0x39d613 * 10], ["#afac98", _0x39d613 * 30], ["#d88e23", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x3941db;
  this.play_spin = function (_0x4711d4, _0x453e85, _0x2911e5) {
    _0x196830.spin = 1;
    _0x196830.spin_effect = 0;
    _0x196830.spin_win_effect = 0;
    _0x196830.spin_target = _0x4711d4;
    _0x196830.spin_type = _0x453e85;
    var _0x32ad96;
    var _0x2af6f3 = 0;
    if (_0x453e85 === 0) {
      for (_0x2af6f3 = 0; _0x2af6f3 < COSMETICS.SKIN.length; _0x2af6f3++) {
        if (_0x2911e5 === COSMETICS.SKIN[_0x2af6f3].id) {
          break;
        }
      }
      _0x32ad96 = COSMETICS.SKIN[_0x2af6f3];
      _0x196830.unlock.skin[_0x2af6f3] = 1;
    } else if (_0x453e85 === 1) {
      for (_0x2af6f3 = 0; _0x2af6f3 < COSMETICS.ACCESSORY.length; _0x2af6f3++) {
        if (_0x2911e5 === COSMETICS.ACCESSORY[_0x2af6f3].id) {
          break;
        }
      }
      _0x32ad96 = COSMETICS.ACCESSORY[_0x2af6f3];
      _0x196830.unlock.accessory[_0x2af6f3] = 1;
    } else if (_0x453e85 === 2) {
      for (_0x2af6f3 = 0; _0x2af6f3 < COSMETICS.BAG.length; _0x2af6f3++) {
        if (_0x2911e5 === COSMETICS.BAG[_0x2af6f3].id) {
          break;
        }
      }
      _0x32ad96 = COSMETICS.BAG[_0x2af6f3];
      _0x196830.unlock.bag[_0x2af6f3] = 1;
    } else if (_0x453e85 === 3) {
      for (_0x2af6f3 = 0; _0x2af6f3 < COSMETICS.BOOK.length; _0x2af6f3++) {
        if (_0x2911e5 === COSMETICS.BOOK[_0x2af6f3].id) {
          break;
        }
      }
      _0x32ad96 = COSMETICS.BOOK[_0x2af6f3];
      _0x196830.unlock.book[_0x2af6f3] = 1;
    } else if (_0x453e85 === 4) {
      for (_0x2af6f3 = 0; _0x2af6f3 < COSMETICS.CRATE.length; _0x2af6f3++) {
        if (_0x2911e5 === COSMETICS.CRATE[_0x2af6f3].id) {
          break;
        }
      }
      _0x32ad96 = COSMETICS.CRATE[_0x2af6f3];
      _0x196830.unlock.crate[_0x2af6f3] = 1;
      _0x196830.unlock.dead[_0x2af6f3] = 1;
    }
    _0x196830.spin_win = _0x2af6f3;
    _0x196830.spin_author = gui_render_text("by " + _0x32ad96.author, "'Baloo Paaji', sans-serif", "#EFE4B4", 40, 500, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 24);
    _0x196830.spin_name = gui_render_text(_0x32ad96.name, "'Baloo Paaji', sans-serif", "#EFE4B4", 60, 600, undefined, 30, 24, undefined, undefined, undefined, undefined, "#000000", 20);
  };
  this.spin = 0;
  this.spin_effect = 0;
  this.spin_target = 0;
  this.spin_type = 0;
  this.spin_win_effect = 0;
  this.spin_author = undefined;
  this.spin_name = undefined;
  var _0x41b837 = 197;
  var _0x37d90b = -65;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN2, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x4e4269;
  var _0x3b3ffc = this.create_spin([["#d45ce5", _0x39d613 * 3], ["#25c5d6", _0x39d613 * 10], ["#e2cf27", _0x39d613 * 30], ["#afac98", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x4e4269;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN3, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x583612;
  var _0x3b3ffc = this.create_spin([["#d33a2a", _0x39d613 * 3], ["#d45ce5", _0x39d613 * 10], ["#25c5d6", _0x39d613 * 30], ["#e2cf27", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x583612;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN4, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x5b81b3;
  var _0x3b3ffc = this.create_spin([["#25c5d6", _0x39d613 * 3], ["#e2cf27", _0x39d613 * 10], ["#afac98", _0x39d613 * 30], ["#d88e23", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x5b81b3;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN5, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x8b1625;
  var _0x3b3ffc = this.create_spin([["#d45ce5", _0x39d613 * 3], ["#25c5d6", _0x39d613 * 10], ["#e2cf27", _0x39d613 * 30], ["#afac98", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x8b1625;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.SPIN6, _0x52b7ec, -1542 / 4, 150, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x56bc2a;
  var _0x3b3ffc = this.create_spin([["#d33a2a", _0x39d613 * 3], ["#d45ce5", _0x39d613 * 10], ["#25c5d6", _0x39d613 * 30], ["#e2cf27", _0x39d613 * 57]]);
  this.bkgd[_0x54054e] = gui_create_image_hd(_0x3b3ffc, _0x52b7ec, -_0x3b3ffc.width / 4, 178, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x56bc2a;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.CUSTOM_SKIN_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x34450d;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.ACCESSORIES_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x47007f;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.BAG_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x98076;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.BOOK_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x2d7d5b;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.CRATE_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x53017c;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LOOT_BOX, _0x52b7ec, -1366 / 4, 100, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x2a9395;
  BAG_REMAIN_BOX = _0x54054e++;
  this.bkgd[BAG_REMAIN_BOX] = gui_create_image_hd(IMAGES.BAG_REMAIN_BOX, _0x52b7ec, 484, 0, _0x421b61);
  SERVER_REMAIN_BOX = _0x54054e++;
  this.bkgd[SERVER_REMAIN_BOX] = gui_create_image_hd(IMAGES.SERVER_REMAIN_BOX, _0x52b7ec, 812.5, 0, _0x421b61);
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LOCKED_CUSTOM_ALERT, _0x52b7ec, -758 / 4, -5, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x49d922;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.LOCKED_SKIN_ALERT, _0x52b7ec, -758 / 4, -5, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x219891;
  LEVEL_GAUGE = _0x54054e++;
  this.bkgd[LEVEL_GAUGE] = gui_create_image_hd(IMAGES.GAUGE, _0x9d40be, 93, 30, _0x421b61);
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME1_BOX, _0x52b7ec, -173, 110, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0xe13250;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.CHANGE_NICKNAME0_BOX, _0x52b7ec, -173, 110, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e++].view = _0x1e458e;
  var _0x4d4204 = window.innerWidth < 1300 ? 500 : 310;
  this.bkgd[_0x54054e] = gui_create_image_hd(IMAGES.MOBILE_BOXAD, _0x9d40be, -153, _0x4d4204, _0x421b61 | _0x3ad85e);
  this.bkgd[_0x54054e].view = _0xddbd1c;
  _0x54054e = 0;
  this.buttons = [];
  this.buttons[_0x54054e] = gui_create_button(50, 57, "", [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      _0x5b879d(_0x225689);
    } else {
      _0x5b879d(_0x122518);
    }
  }, 320, 0, _0xeddde1, _0x9d40be);
  _0x54054e++;
  if (window.innerWidth < 1300) {
    this.buttons[_0x54054e] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], _0x5591f3, _0x1074ab, this.play_game, 462, 235, _0x421b61 | _0xeddde1, _0x9d40be);
  } else {
    this.buttons[_0x54054e] = gui_create_button(202, 97, "", [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK], _0x5591f3, _0x1074ab, this.play_game, 74, 235, _0x421b61 | _0x3ad85e, _0x9d40be);
  }
  this.buttons[_0x54054e].view = _0xddbd1c;
  _0x54054e++;
  this.buttons[_0x54054e] = gui_create_button(120, 40, "", [IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE], _0x525154, _0x1074ab, () => window.open("https://apps.apple.com/us/app/id1538497844", "_blank"), -137, _0x4d4204 + 200, _0x421b61 | _0x3ad85e, _0x9d40be);
  this.buttons[_0x54054e].view = _0xddbd1c;
  _0x54054e++;
  this.buttons[_0x54054e] = gui_create_button(135, 40, "", [IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE], _0x525154, _0x1074ab, () => window.open("https://play.google.com/store/apps/details?id=com.addictinggames.starveio", "_blank"), 2, _0x4d4204 + 200, _0x421b61 | _0x3ad85e, _0x9d40be);
  this.buttons[_0x54054e].view = _0xddbd1c;
  _0x54054e++;
  if (window.innerWidth > 1300) {
    this.buttons[_0x54054e] = gui_create_button(355, 168, "", [IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT, IMAGES.CHANGELOG_BUTTON_OUT], _0x5591f3, _0x1074ab, function () {
      window.open("./changelog.html", "_blank");
    }, -195, -115, _0x2aea2e | _0x3ad85e, _0x9d40be);
    this.buttons[_0x54054e++].view = _0xddbd1c;
    this.buttons[_0x54054e] = gui_create_button(355, 168, "", [IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT, IMAGES.DEVASTIO_BUTTON_OUT], _0x5591f3, _0x1074ab, function () {
      window.open("https://devast.io", "_blank");
    }, 20, -115, _0x2aea2e | _0x3ad85e, _0x9d40be);
    this.buttons[_0x54054e++].view = _0xddbd1c;
  }
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.MERCH_BUTTON_OUT, IMAGES.MERCH_BUTTON_IN, IMAGES.MERCH_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://shop.addictinggames.com/", "_blank");
  }, 380, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.DISCORD_BUTTON_OUT, IMAGES.DISCORD_BUTTON_IN, IMAGES.DISCORD_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://discord.gg/starveio", "_blank");
  }, 330, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.REDDIT_BUTTON_OUT, IMAGES.REDDIT_BUTTON_IN, IMAGES.REDDIT_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://reddit.com/r/starveio", "_blank");
  }, 280, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://starveiopro.wikia.com/wiki/", "_blank");
  }, 230, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.FACEBOOK_BUTTON_OUT, IMAGES.FACEBOOK_BUTTON_IN, IMAGES.FACEBOOK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/", "_blank");
  }, 155, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.TWITTER_BUTTON_OUT, IMAGES.TWITTER_BUTTON_IN, IMAGES.TWITTER_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://twitter.com/lapamauve", "_blank");
  }, 105, 10, _0xecdf7a, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(80, 80, "", [IMAGES.YOUTUBE_BUTTON_OUT, IMAGES.YOUTUBE_BUTTON_IN, IMAGES.YOUTUBE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://youtube.com/c/lapamauve", "_blank");
  }, 55, 10, _0xecdf7a, _0x9d40be);
  LEADERBOARD_BUTTON = _0x54054e++;
  this.buttons[LEADERBOARD_BUTTON] = gui_create_button(232, 142, "", [IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT, IMAGES.ICONS_BOTTOM_BG_BUTTON_IN, IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x1f5e9c);
    getLeaderboard(ui.LEADERBOARD_ALL, ui.LEADERBOARD_TOTAL, ui.LEADERBOARD_SCORE, ui.LEADERBOARD_SEASON5);
  }, -5, 573, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0x1f5e9c);
  }, -5, 566, _0xeddde1, _0x9d40be);
  TUTORIAL_BUTTON = _0x54054e++;
  this.buttons[TUTORIAL_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5dbe8b);
  }, -5, 494, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0x5dbe8b);
  }, -5, 494, _0xeddde1, _0x9d40be);
  SERVER_BUTTON = _0x54054e++;
  this.buttons[SERVER_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      if (ui.privateServerTime - Date.now() > 0) {
        _0x5b879d(_0x277dad);
      }
    } else {
      _0x5b879d(_0x122518);
    }
  }, -5, 415, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON, IMAGES.SERVER_ACCESS_ICON], _0x5591f3, _0x2bf168, function () {
    if (_0x196830.isUserLogged()) {
      if (ui.privateServerTime - Date.now() > 0) {
        _0x5b879d(_0x277dad);
      }
    } else {
      _0x5b879d(_0x122518);
    }
  }, -5, 415, _0xeddde1, _0x9d40be);
  SHOP_BUTTON = _0x54054e++;
  this.buttons[SHOP_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, -5, 336, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0x5df04f);
  }, -5, 336, _0xeddde1, _0x9d40be);
  COSMETICS_BUTTON = _0x54054e++;
  this.buttons[COSMETICS_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -5, 257, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0x59cfcf);
  }, -5, 257, _0xeddde1, _0x9d40be);
  GAME_BUTTON = _0x54054e++;
  this.buttons[GAME_BUTTON] = gui_create_button(236, 165, "", [IMAGES.ICONS_BG_BUTTON_OUT, IMAGES.ICONS_BG_BUTTON_IN, IMAGES.ICONS_BG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0xddbd1c);
  }, -5, 178, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++] = gui_create_button(236, 165, "", [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0xddbd1c);
  }, -5, 178, _0xeddde1, _0x9d40be);
  LOGIN_BUTTON = _0x54054e++;
  this.LOGIN_BUTTON = LOGIN_BUTTON;
  this.buttons[LOGIN_BUTTON] = gui_create_button(324, 222, "", [IMAGES.LOGIN_BUTTON_OUT, IMAGES.LOGIN_BUTTON_IN, IMAGES.LOGIN_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x122518);
  }, 0, 70, _0xeddde1, _0x9d40be);
  PROFILE_BUTTON = _0x54054e++;
  PROFILE_BUTTON_2 = _0x54054e++;
  this.PROFILE_BUTTON = PROFILE_BUTTON;
  this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2;
  this.buttons[PROFILE_BUTTON] = gui_create_button(324, 222, "", [IMAGES.PROFILE_BUTTON_OUT, IMAGES.PROFILE_BUTTON_IN, IMAGES.PROFILE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5f487b);
    _0x16a678(-1);
  }, 0, 70, _0xeddde1, _0x52b7ec);
  this.buttons[PROFILE_BUTTON_2] = gui_create_button(324, 222, "", [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON], _0x5591f3, _0x2bf168, function () {
    _0x5b879d(_0x5f487b);
    _0x16a678(-1);
  }, 0, 70, _0xeddde1, _0x52b7ec);
  if (client.privateServer === 0) {
    var _0x20731a = _0x54054e++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x20731a] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_PVP);
      }, 150, 300, _0xeddde1 | _0x421b61, _0x9d40be);
    } else {
      this.buttons[_0x20731a] = gui_create_button(266, 176, "", [IMAGES.NORMAL_MODE_OUT, IMAGES.NORMAL_MODE_IN, IMAGES.NORMAL_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_PVP);
      }, -340, 100, _0x3ad85e | _0x421b61, _0x9d40be);
    }
    this.buttons[_0x20731a].view = _0xddbd1c;
    this.buttons[_0x20731a].hint = 0;
    var _0xc24c13 = _0x54054e++;
    if (window.innerWidth < 1300) {
      this.buttons[_0xc24c13] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_LEGACY);
      }, 150, 400, _0xeddde1 | _0x421b61, _0x9d40be);
    } else {
      this.buttons[_0xc24c13] = gui_create_button(266, 176, "", [IMAGES.FOREST_MODE_OUT, IMAGES.FOREST_MODE_IN, IMAGES.FOREST_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_LEGACY);
      }, -340, 200, _0x3ad85e | _0x421b61, _0x9d40be);
    }
    this.buttons[_0xc24c13].view = _0xddbd1c;
    this.buttons[_0xc24c13].hint = 0;
    var _0x82ae5c = _0x54054e++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x82ae5c] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_COMMUNITY);
      }, 450, 300, _0xeddde1 | _0x421b61, _0x9d40be);
    } else {
      this.buttons[_0x82ae5c] = gui_create_button(266, 176, "", [IMAGES.MODE_COMMUNITY_OUT, IMAGES.MODE_COMMUNITY_IN, IMAGES.MODE_COMMUNITY_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_COMMUNITY);
      }, -340, 300, _0x3ad85e | _0x421b61, _0x9d40be);
    }
    this.buttons[_0x82ae5c].view = _0xddbd1c;
    this.buttons[_0x82ae5c].hint = 0;
    var _0x22b932 = _0x54054e++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x22b932] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_ZOMBIES);
      }, 300, 300, _0xeddde1 | _0x421b61, _0x9d40be);
    } else {
      this.buttons[_0x22b932] = gui_create_button(266, 176, "", [IMAGES.ZOMBIE_MODE_OUT, IMAGES.ZOMBIE_MODE_IN, IMAGES.ZOMBIE_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_ZOMBIES);
      }, 204, 100, _0x3ad85e | _0x421b61, _0x9d40be);
    }
    this.buttons[_0x22b932].view = _0xddbd1c;
    this.buttons[_0x22b932].hint = 0;
    var _0x58dd8d = _0x54054e++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x58dd8d] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_VAMPIRES);
      }, 300, 400, _0xeddde1 | _0x421b61, _0x9d40be);
    } else {
      this.buttons[_0x58dd8d] = gui_create_button(266, 176, "", [IMAGES.VAMPIRE_MODE_OUT, IMAGES.VAMPIRE_MODE_IN, IMAGES.VAMPIRE_MODE_CLICK], _0x5591f3, _0x1074ab, function () {
        client.select_gamemode(WORLD.MODE_VAMPIRES);
      }, 204, 200, _0x3ad85e | _0x421b61, _0x9d40be);
    }
    this.buttons[_0x58dd8d].view = _0xddbd1c;
    this.buttons[_0x58dd8d].hint = 0;
    var _0x4e5b03 = _0x54054e++;
    this.buttons[_0x4e5b03] = gui_create_button(266, 176, "", [IMAGES.MODE_EXPERIMENTAL_OUT, IMAGES.MODE_EXPERIMENTAL_IN, IMAGES.MODE_EXPERIMENTAL_CLICK], _0x5591f3, _0x1074ab, function () {
      client.select_gamemode(WORLD.MODE_EXPERIMENTAL);
    }, window.innerWidth < 1300 ? 450 : 204, window.innerWidth < 1300 ? 400 : 300, (window.innerWidth < 1300 ? _0xeddde1 : _0x3ad85e) | _0x421b61, _0x9d40be);
    this.buttons[_0x4e5b03].view = _0xddbd1c;
    this.buttons[_0x4e5b03].hint = 0;
  }
  this.buttons[_0x54054e] = gui_create_button(87, 78, "", [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK], _0x5591f3, _0x1074ab, function () {
    ui.generate_new_nickname();
    if (ui.firstName === 0) {
      _0x5b879d(_0x1e458e);
    } else {
      _0x5b879d(_0xe13250);
    }
  }, 127, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  this.buttons[_0x54054e] = gui_create_button(87, 78, "", [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK], _0x5591f3, _0x1074ab, function () {
    logout();
  }, 255, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  this.buttons[_0x54054e] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0xddbd1c);
  }, 189, 118, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x122518;
  this.buttons[_0x54054e] = gui_create_button(497, 72, "", [IMAGES.LOGIN_GOOGLE_OUT, IMAGES.LOGIN_GOOGLE_IN, IMAGES.LOGIN_GOOGLE_CLICK], _0x5591f3, _0x1074ab, function () {
    loginWithGoogle();
  }, -130, 390, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x122518;
  this.buttons[_0x54054e] = gui_create_button(497, 72, "", [IMAGES.LOGIN_FACEBOOK_OUT, IMAGES.LOGIN_FACEBOOK_IN, IMAGES.LOGIN_FACEBOOK_CLICK], _0x5591f3, _0x1074ab, function () {
    logWithFacebook();
  }, -130, 430, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x122518;
  __LEVEL_FACTOR__ = 20000;
  function _0x5d6ec1(_0x3c0167) {
    var _0x38183d = ui.level_formula(_0x3c0167);
    var _0x2f3047 = _0x38183d * _0x38183d * __LEVEL_FACTOR__;
    var _0x6495a9 = (_0x38183d + 1) * (_0x38183d + 1) * __LEVEL_FACTOR__ - _0x2f3047;
    _0x3c0167 -= _0x2f3047;
    return _0x3c0167 / _0x6495a9;
  }
  ;
  this.xp_formula = _0x5d6ec1;
  function _0x918e99(_0x43c739) {
    return Math.floor(Math.sqrt(_0x43c739 / __LEVEL_FACTOR__));
  }
  ;
  this.level_formula = _0x918e99;
  this.update_score = function (_0x2a1c93) {
    ui.lvl = ui.level_formula(_0x2a1c93);
    ui.xp_dest = ui.xp_formula(_0x2a1c93);
    ui.xp = 0;
    ui.score = _0x2a1c93;
  };
  function _0x16a678(_0x1e4322, _0x56e453) {
    if (_0x56e453 !== undefined) {
      ui.profile_season = _0x56e453;
      var _0x488971 = ui.seasons[_0x56e453];
      ui.score = _0x488971.score;
      ui.kill = _0x488971.kill;
      ui.death = _0x488971.death;
      ui.time = _0x488971.time;
      ui.bestScore = _0x488971.bestScore;
      ui.bestKill = _0x488971.bestKill;
      ui.bestTime = _0x488971.bestTime;
      ui.scoreTotal = _0x488971.scoreTotal;
    }
    if (_0x1e4322 === undefined) {
      _0x1e4322 = ui.current_mode_score;
    }
    ui.current_mode_score = _0x1e4322;
    if (_0x1e4322 >= 0) {
      document.getElementById("stats_box_time").innerHTML = ui.bestTime[_0x1e4322];
      document.getElementById("stats_box_kill").innerHTML = ui.bestKill[_0x1e4322];
      document.getElementById("stats_box_score").innerHTML = ui.bestScore[_0x1e4322];
    } else {
      var _0x3ba2a2 = 0;
      for (var _0x47962d = 0; _0x47962d < ui.kill.length; _0x47962d++) {
        _0x3ba2a2 += ui.kill[_0x47962d];
      }
      var _0x3ca3fe = 0;
      for (var _0x47962d = 0; _0x47962d < ui.time.length; _0x47962d++) {
        _0x3ca3fe += ui.time[_0x47962d];
      }
      document.getElementById("stats_box_time").innerHTML = _0x3ca3fe;
      document.getElementById("stats_box_kill").innerHTML = _0x3ba2a2;
      document.getElementById("stats_box_score").innerHTML = ui.score;
    }
  }
  ;
  this.login_restore_data = function (_0x4d6ea6) {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1;
    _0x42b718();
    if (_0x4d6ea6.name.indexOf("Starver#") === -1) {
      document.getElementById("account_nickname_input").value = window.decodeURIComponent(window.escape(window.atob(_0x4d6ea6.name)));
    } else {
      document.getElementById("account_nickname_input").value = _0x4d6ea6.name;
    }
    ui.bread = _0x4d6ea6.bread;
    var _0x4960a6 = _0x4d6ea6.seasons;
    var _0x1fc5e5 = _0x4960a6[_0x4960a6.length - 1];
    ui.seasons = _0x4960a6;
    _0x196830.update_score(_0x1fc5e5.score);
    ui.score = _0x1fc5e5.score;
    ui.kill = _0x1fc5e5.kill;
    ui.death = _0x1fc5e5.death;
    ui.time = _0x1fc5e5.time;
    ui.bestScore = _0x1fc5e5.bestScore;
    ui.bestKill = _0x1fc5e5.bestKill;
    ui.bestTime = _0x1fc5e5.bestTime;
    ui.scoreTotal = _0x1fc5e5.scoreTotal;
    ui.firstName = _0x4d6ea6.firstName;
    document.getElementById("serverAddressInput").value = "https://starve.io/?server=" + _0x4d6ea6.privateServer;
    if (ui.firstName === undefined) {
      ui.firstName = 0;
    }
    ui.privateServerTime = Date.now() + _0x4d6ea6.privateServerTime;
    if (Number(_0x4d6ea6.privateServerTime) > 0) {
      ui.privateServerTime = Date.now() + Number(_0x4d6ea6.privateServerTime);
    }
    ui.kit = Date.now() + _0x4d6ea6.kit;
    if (Number(_0x4d6ea6.kit) > 0) {
      ui.kit = Date.now() + Number(_0x4d6ea6.kit);
    }
    var _0x3160d4 = COSMETICS.SKIN;
    for (var _0x5b4ae5 = 0; _0x5b4ae5 < _0x4d6ea6.skins.length; _0x5b4ae5++) {
      var _0x42cb75 = _0x4d6ea6.skins[_0x5b4ae5];
      if (_0x42cb75 > 0) {
        for (var _0x3dfa89 = 0; _0x3dfa89 < _0x3160d4.length; _0x3dfa89++) {
          if (_0x3160d4[_0x3dfa89].id === _0x5b4ae5) {
            _0x196830.unlock.skin[_0x3dfa89] = 1;
          }
        }
      }
    }
    var _0x3160d4 = COSMETICS.ACCESSORY;
    for (var _0x5b4ae5 = 0; _0x5b4ae5 < _0x4d6ea6.accessories.length; _0x5b4ae5++) {
      var _0x42cb75 = _0x4d6ea6.accessories[_0x5b4ae5];
      if (_0x42cb75 > 0) {
        for (var _0x3dfa89 = 0; _0x3dfa89 < _0x3160d4.length; _0x3dfa89++) {
          if (_0x3160d4[_0x3dfa89].id === _0x5b4ae5) {
            _0x196830.unlock.accessory[_0x3dfa89] = 1;
          }
        }
      }
    }
    var _0x3160d4 = COSMETICS.BOOK;
    for (var _0x5b4ae5 = 0; _0x5b4ae5 < _0x4d6ea6.books.length; _0x5b4ae5++) {
      var _0x42cb75 = _0x4d6ea6.books[_0x5b4ae5];
      if (_0x42cb75 > 0) {
        for (var _0x3dfa89 = 0; _0x3dfa89 < _0x3160d4.length; _0x3dfa89++) {
          if (_0x3160d4[_0x3dfa89].id === _0x5b4ae5) {
            _0x196830.unlock.book[_0x3dfa89] = 1;
          }
        }
      }
    }
    var _0x3160d4 = COSMETICS.BAG;
    for (var _0x5b4ae5 = 0; _0x5b4ae5 < _0x4d6ea6.bags.length; _0x5b4ae5++) {
      var _0x42cb75 = _0x4d6ea6.bags[_0x5b4ae5];
      if (_0x42cb75 > 0) {
        for (var _0x3dfa89 = 0; _0x3dfa89 < _0x3160d4.length; _0x3dfa89++) {
          if (_0x3160d4[_0x3dfa89].id === _0x5b4ae5) {
            _0x196830.unlock.bag[_0x3dfa89] = 1;
          }
        }
      }
    }
    var _0x3160d4 = COSMETICS.CRATE;
    for (var _0x5b4ae5 = 0; _0x5b4ae5 < _0x4d6ea6.crates.length; _0x5b4ae5++) {
      var _0x42cb75 = _0x4d6ea6.crates[_0x5b4ae5];
      if (_0x42cb75 > 0) {
        for (var _0x3dfa89 = 0; _0x3dfa89 < _0x3160d4.length; _0x3dfa89++) {
          if (_0x3160d4[_0x3dfa89].id === _0x5b4ae5) {
            _0x196830.unlock.crate[_0x3dfa89] = 1;
            _0x196830.unlock.dead[_0x3dfa89] = 1;
          }
        }
      }
    }
  };
  this.login_after = function () {
    window.onUserLogin = function () {
      _0x5b879d(_0xddbd1c);
      getUserDetails(_0x196830.login_restore_data);
    };
    if (userAlreadyLoggedIn === 1) {
      window.onUserLogin();
    }
  };
  window.onUserLogout = function () {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0;
    _0x5b879d(_0xddbd1c);
  };
  this.isUserLogged = function () {
    return ui.buttons[ui.PROFILE_BUTTON].info.active;
  };
  this.buttons[_0x54054e] = gui_create_button(461, 105, "", [IMAGES.GET_MORE_BUTTON_OUT, IMAGES.GET_MORE_BUTTON_IN, IMAGES.GET_MORE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      _0x5b879d(_0x225689);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -100, 80, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(157, 158, "", [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("https://starveiopro.wikia.com/wiki/", "_blank");
  }, -35, 125, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5dbe8b;
  this.buttons[_0x54054e] = gui_create_button(66, 73, "", [IMAGES.TUTO_PREVIOUS_OUT, IMAGES.TUTO_PREVIOUS_IN, IMAGES.TUTO_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -68, 340, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5dbe8b;
  this.buttons[_0x54054e] = gui_create_button(66, 73, "", [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, -30, 340, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5dbe8b;
  this.buttons[_0x54054e] = gui_create_button(97, 66, "", [IMAGES.LVL_LEADERBOARD_OUT, IMAGES.LVL_LEADERBOARD_IN, IMAGES.LVL_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, undefined, -14, 151, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_KILL = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(135, 66, "", [IMAGES.KILL_LEADERBOARD_OUT, IMAGES.KILL_LEADERBOARD_IN, IMAGES.KILL_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_KILL);
  }, 37.5, 151, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_TIME = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(160, 66, "", [IMAGES.TIME_LEADERBOARD_OUT, IMAGES.TIME_LEADERBOARD_IN, IMAGES.TIME_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_TIME);
  }, 107.5, 151, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SCORE = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(207, 66, "", [IMAGES.SCORE_LEADERBOARD_OUT, IMAGES.SCORE_LEADERBOARD_IN, IMAGES.SCORE_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, ui.LEADERBOARD_SCORE);
  }, 190.5, 151, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_TODAY = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(144, 66, "", [IMAGES.TODAY_LEADERBOARD_OUT, IMAGES.TODAY_LEADERBOARD_IN, IMAGES.TODAY_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(ui.LEADERBOARD_TODAY);
  }, 103.5, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_WEEK = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(124, 66, "", [IMAGES.WEEK_LEADERBOARD_OUT, IMAGES.WEEK_LEADERBOARD_IN, IMAGES.WEEK_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(ui.LEADERBOARD_WEEK);
  }, 177.5, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_ALL = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(104, 66, "", [IMAGES.ALL_LEADERBOARD_OUT, IMAGES.ALL_LEADERBOARD_IN, IMAGES.ALL_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(ui.LEADERBOARD_ALL);
  }, 242, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SEASON1 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(183, 66, "", [IMAGES.SEASON1_LEADERBOARD_OUT, IMAGES.SEASON1_LEADERBOARD_IN, IMAGES.SEASON1_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON1);
  }, -290, 521, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SEASON2 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(183, 66, "", [IMAGES.SEASON2_LEADERBOARD_OUT, IMAGES.SEASON2_LEADERBOARD_IN, IMAGES.SEASON2_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON2);
  }, -185, 521, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SEASON3 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(183, 66, "", [IMAGES.SEASON3_LEADERBOARD_OUT, IMAGES.SEASON3_LEADERBOARD_IN, IMAGES.SEASON3_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON3);
  }, -80, 521, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SEASON4 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(183, 66, "", [IMAGES.SEASON4_LEADERBOARD_OUT, IMAGES.SEASON4_LEADERBOARD_IN, IMAGES.SEASON4_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON4);
  }, 25, 521, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_SEASON5 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(183, 66, "", [IMAGES.SEASON5_LEADERBOARD_OUT, IMAGES.SEASON5_LEADERBOARD_IN, IMAGES.SEASON5_LEADERBOARD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON5);
  }, 130, 521, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.buttons[_0x54054e] = gui_create_button(232, 352, "", [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(300);
  }, -330, 135, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(232, 352, "", [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(600);
  }, -195, 135, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(243, 374, "", [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(2600);
  }, -60, 130, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(232, 352, "", [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(7000);
  }, 78, 135, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(243, 374, "", [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(20000);
  }, 213, 130, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(58, 64, "", [IMAGES.CLOSE_BUTTON_OUT, IMAGES.CLOSE_BUTTON_IN, IMAGES.CLOSE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 300, 88, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x225689;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x34450d);
    _0x23fae7.initSelector();
  }, -315, 185, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.ACCESSORY_BUTTON_OUT, IMAGES.ACCESSORY_BUTTON_IN, IMAGES.ACCESSORY_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x47007f);
    _0x1aba0a.initSelector();
  }, -315, 321, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x98076);
    _0x497561.initSelector();
  }, 153, 185, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x2d7d5b);
    _0x1b32f4.initSelector();
  }, 153, 321, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.CRATE_BUTTON_OUT, IMAGES.CRATE_BUTTON_IN, IMAGES.CRATE_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x53017c);
    _0x547a0e.initSelector();
  }, 153, 463, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(323, 112, "", [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x2a9395);
    _0x45046e.initSelector();
  }, -315, 463, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x59cfcf;
  this.buttons[_0x54054e] = gui_create_button(327, 117, "", [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x39ffef);
  }, 155, 70, _0xeddde1, _0x9d40be);
  this.buttons[_0x54054e++].view = _0xddbd1c;
  this.buttons[_0x54054e] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x469936(_0x219891, _0x52b7ec, "none");
    _0x5b879d(_0x5df04f);
  }, 10, 40, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x219891;
  this.buttons[_0x54054e] = gui_create_button(130, 129, "", [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x469936(_0x49d922, _0x52b7ec, "none");
    _0x5b879d(_0x5df04f);
  }, 10, 40, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x49d922;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 200, 140, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Atlanta");
  }, -265, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Dallas");
  }, -130, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Fremont");
  }, 5, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Newark");
  }, 140, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("London");
  }, -265, 365, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Frankfurt");
  }, -130, 365, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Singapore");
  }, 5, 365, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Tokyo");
  }, 140, 365, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Toronto");
  }, -265, 430, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(253, 110, "", [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK], _0x5591f3, _0x1074ab, function () {
    regionPreference("Mumbai");
  }, -130, 430, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x203350;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x203350);
  }, 230, 140, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3be55c;
  this.buttons[_0x54054e] = gui_create_button(230, 352, "", [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(350);
  }, -280, 240, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3be55c;
  this.buttons[_0x54054e] = gui_create_button(230, 352, "", [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(700);
  }, -130, 240, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3be55c;
  this.buttons[_0x54054e] = gui_create_button(230, 352, "", [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(1400);
  }, 20, 240, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3be55c;
  this.buttons[_0x54054e] = gui_create_button(230, 352, "", [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK], _0x5591f3, _0x1074ab, function () {
    openXsolla(3000);
  }, 170, 240, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3be55c;
  this.buttons[_0x54054e] = gui_create_button(105, 119, "", [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK], _0x5591f3, _0x1074ab, function () {
    document.getElementById("serverAddressInput").select();
    document.execCommand("copy");
  }, 170, 310, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x277dad;
  this.buttons[_0x54054e] = gui_create_button(105, 119, "", [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK], _0x5591f3, _0x1074ab, function () {
    rebootServer();
  }, 235, 310, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x277dad;
  this.buttons[_0x54054e] = gui_create_button(204, 115, "", [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("./commands.html", "_blank");
  }, -265, 490, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x277dad;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x3941db);
  }, -210, 170, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5b81b3);
  }, 70, 170, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x8b1625);
  }, 70, 204, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x4e4269);
  }, -210, 204, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x56bc2a);
  }, 70, 238, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buyKit(0, 300);
    } else {
      _0x5b879d(_0x122518);
    }
  }, 307, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x583612);
  }, -210, 238, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(145, 69, "", [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buyKit(1, 600);
    } else {
      _0x5b879d(_0x122518);
    }
  }, 307, 239, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  this.buttons[_0x54054e] = gui_create_button(192, 101, "", [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    buyNameChanger();
  }, -100, 250, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1e458e;
  this.buttons[_0x54054e] = gui_create_button(192, 104, "", [IMAGES.YES_300_BUTTON_OUT, IMAGES.YES_300_BUTTON_IN, IMAGES.YES_300_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    buyNameChanger();
  }, -100, 239, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0xe13250;
  this.buttons[_0x54054e] = gui_create_button(192, 101, "", [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5f487b);
  }, 10, 250, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1e458e;
  this.buttons[_0x54054e] = gui_create_button(192, 104, "", [IMAGES.NO_THANKS_BUTTON_OUT, IMAGES.NO_THANKS_BUTTON_IN, IMAGES.NO_THANKS_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5f487b);
  }, 10, 239, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0xe13250;
  RARITY_BUTTON = [];
  RARITY_BUTTON[RARITY.FREE] = [IMAGES.FREE_ITEM_OUT, IMAGES.FREE_ITEM_IN, IMAGES.FREE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.WOOD] = [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK];
  RARITY_BUTTON[RARITY.STONE] = [IMAGES.STONE_ITEM_OUT, IMAGES.STONE_ITEM_IN, IMAGES.STONE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.GOLD] = [IMAGES.GOLD_ITEM_OUT, IMAGES.GOLD_ITEM_IN, IMAGES.GOLD_ITEM_CLICK];
  RARITY_BUTTON[RARITY.DIAMOND] = [IMAGES.DIAMOND_ITEM_OUT, IMAGES.DIAMOND_ITEM_IN, IMAGES.DIAMOND_ITEM_CLICK];
  RARITY_BUTTON[RARITY.AMETHYST] = [IMAGES.AMETHYST_ITEM_OUT, IMAGES.AMETHYST_ITEM_IN, IMAGES.AMETHYST_ITEM_CLICK];
  RARITY_BUTTON[RARITY.REIDITE] = [IMAGES.REIDITE_ITEM_OUT, IMAGES.REIDITE_ITEM_IN, IMAGES.REIDITE_ITEM_CLICK];
  RARITY_BUTTON[RARITY.LEVEL] = [IMAGES.LEVEL_ITEM_OUT, IMAGES.LEVEL_ITEM_IN, IMAGES.LEVEL_ITEM_CLICK];
  RARITY_BUTTON[RARITY.SPECIAL] = [IMAGES.SPECIAL_ITEM_OUT, IMAGES.SPECIAL_ITEM_IN, IMAGES.SPECIAL_ITEM_CLICK];
  FIRST_BUTTON_SKIN = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x34450d;
  FIRST_BUTTON_ACCESSORY = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x47007f;
  FIRST_BUTTON_LOOT = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2a9395;
  FIRST_BUTTON_BAG = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x98076;
  FIRST_BUTTON_BOOK = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x2d7d5b;
  FIRST_BUTTON_CRATE = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, -29, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 65, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 205, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 300, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(178, 182, "", [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK], _0x5591f3, _0x1074ab, undefined, 159, 395, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_PREVIOUS_OUT, IMAGES.SKIN_PREVIOUS_IN, IMAGES.SKIN_PREVIOUS_CLICK], _0x5591f3, _0x1074ab, undefined, -61, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(39, 122, "", [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK], _0x5591f3, _0x1074ab, undefined, 260, 315, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x59cfcf);
  }, -320, 470, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x53017c;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_1_OUT, IMAGES.SPIN_BUTTON_1_IN, IMAGES.SPIN_BUTTON_1_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(3, 50);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5b81b3;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5b81b3;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_2_OUT, IMAGES.SPIN_BUTTON_2_IN, IMAGES.SPIN_BUTTON_2_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(0, 100);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3941db;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x3941db;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_3_OUT, IMAGES.SPIN_BUTTON_3_IN, IMAGES.SPIN_BUTTON_3_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(4, 150);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x8b1625;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x8b1625;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(1, 300);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x4e4269;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x4e4269;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_5_OUT, IMAGES.SPIN_BUTTON_5_IN, IMAGES.SPIN_BUTTON_5_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(2, 600);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x583612;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x583612;
  this.buttons[_0x54054e] = gui_create_button(260, 260, "", [IMAGES.SPIN_BUTTON_4_OUT, IMAGES.SPIN_BUTTON_4_IN, IMAGES.SPIN_BUTTON_4_CLICK], _0x5591f3, _0x1074ab, function () {
    if (_0x196830.isUserLogged()) {
      buySpin(5, 300);
    } else {
      _0x5b879d(_0x122518);
    }
  }, -65, 197, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x56bc2a;
  this.buttons[_0x54054e] = gui_create_button(115, 73, "", [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x5b879d(_0x5df04f);
  }, 309, 180, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x56bc2a;
  var _0x436625 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(205, 67, "", [IMAGES.SEASON1_PROFILE_OUT, IMAGES.SEASON1_PROFILE_IN, IMAGES.SEASON1_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(undefined, 0);
  }, -305, 125, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x5a4b31 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(205, 67, "", [IMAGES.SEASON2_PROFILE_OUT, IMAGES.SEASON2_PROFILE_IN, IMAGES.SEASON2_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(undefined, 1);
  }, -305, 170, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x48f0f9 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(205, 67, "", [IMAGES.SEASON3_PROFILE_OUT, IMAGES.SEASON3_PROFILE_IN, IMAGES.SEASON3_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(undefined, 2);
  }, -305, 215, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x3a976b = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(205, 67, "", [IMAGES.SEASON4_PROFILE_OUT, IMAGES.SEASON4_PROFILE_IN, IMAGES.SEASON4_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(undefined, 3);
  }, -305, 260, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x16ecc3 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(205, 67, "", [IMAGES.SEASON5_PROFILE_OUT, IMAGES.SEASON5_PROFILE_IN, IMAGES.SEASON5_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(undefined, 3);
  }, -305, 305, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x198ef4 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(460, 73, "", [IMAGES.TOTAL_PROFILE_OUT, IMAGES.TOTAL_PROFILE_IN, IMAGES.TOTAL_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(-1);
  }, -180, 170, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x35d997 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(222, 68, "", [IMAGES.NORMAL_PROFILE_OUT, IMAGES.NORMAL_PROFILE_IN, IMAGES.NORMAL_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(WORLD.MODE_PVP);
  }, -180, 215, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x2f6f93 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(222, 68, "", [IMAGES.FOREST_PROFILE_OUT, IMAGES.FOREST_PROFILE_IN, IMAGES.FOREST_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(WORLD.MODE_LEGACY);
  }, -180, 260, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x16b452 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(222, 68, "", [IMAGES.ZOMBIE_PROFILE_OUT, IMAGES.ZOMBIE_PROFILE_IN, IMAGES.ZOMBIE_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(WORLD.MODE_ZOMBIES);
  }, -60, 215, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  var _0x2e1526 = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(222, 68, "", [IMAGES.VAMPIRE_PROFILE_OUT, IMAGES.VAMPIRE_PROFILE_IN, IMAGES.VAMPIRE_PROFILE_CLICK], _0x5591f3, _0x1074ab, function () {
    _0x16a678(WORLD.MODE_VAMPIRES);
  }, -60, 260, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5f487b;
  this.LEADERBOARD_TOTAL = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(143, 66, "", [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_TOTAL);
  }, -298, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_NORMAL = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(104, 66, "", [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_NORMAL);
  }, -223, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_FOREST = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(110, 66, "", [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_FOREST);
  }, -168, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_ZOMBIE = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(88, 66, "", [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_ZOMBIE);
  }, -110, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.LEADERBOARD_VAMPIRE = _0x54054e;
  this.buttons[_0x54054e] = gui_create_button(88, 66, "", [IMAGES.VAMPIRE_LEAD_OUT, IMAGES.VAMPIRE_LEAD_IN, IMAGES.VAMPIRE_LEAD_CLICK], _0x5591f3, _0x1074ab, function () {
    getLeaderboard(undefined, ui.LEADERBOARD_VAMPIRE);
  }, -63, 110, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x1f5e9c;
  this.buttons[_0x54054e] = gui_create_button(86, 44, "", [IMAGES.TERMS_BUTTON_OUT, IMAGES.TERMS_BUTTON_IN, IMAGES.TERMS_BUTTON_CLICK], _0x5591f3, _0x1074ab, function () {
    window.open("./terms.html", "_blank");
  }, 349, 290, _0x3ad85e | _0x421b61, _0x52b7ec);
  this.buttons[_0x54054e++].view = _0x5df04f;
  var _0x23fae7 = new _0x34d051(COSMETICS.SKIN, FIRST_BUTTON_SKIN, function (_0x5ad3bd) {
    ui.skin = _0x5ad3bd;
    if (ui.unlock.skin[_0x5ad3bd] === 1) {
      Cookies.set("starve_skin", "" + _0x5ad3bd, {
        expires: 30
      });
    }
  }, this.skin, this.unlock.skin);
  var _0x497561 = new _0x34d051(COSMETICS.BAG, FIRST_BUTTON_BAG, function (_0x1d32bd) {
    ui.bag = _0x1d32bd;
    if (ui.unlock.bag[_0x1d32bd] === 1) {
      Cookies.set("starve_bag", "" + _0x1d32bd, {
        expires: 30
      });
    }
  }, this.bag, this.unlock.bag);
  var _0x1b32f4 = new _0x34d051(COSMETICS.BOOK, FIRST_BUTTON_BOOK, function (_0xdf6f27) {
    ui.book = _0xdf6f27;
    if (ui.unlock.book[_0xdf6f27] === 1) {
      Cookies.set("starve_book", "" + _0xdf6f27, {
        expires: 30
      });
    }
  }, this.book, this.unlock.book);
  var _0x547a0e = new _0x34d051(COSMETICS.CRATE, FIRST_BUTTON_CRATE, function (_0x303a96) {
    ui.dead = _0x303a96;
    if (ui.unlock.dead[_0x303a96] === 1) {
      Cookies.set("starve_dead", "" + _0x303a96, {
        expires: 30
      });
    }
  }, this.dead, this.unlock.dead);
  var _0x45046e = new _0x34d051(COSMETICS.CRATE, FIRST_BUTTON_LOOT, function (_0x3e87b2) {
    ui.crate = _0x3e87b2;
    if (ui.unlock.crate[_0x3e87b2] === 1) {
      Cookies.set("starve_crate", "" + _0x3e87b2, {
        expires: 30
      });
    }
  }, this.crate, this.unlock.crate);
  var _0x1aba0a = new _0x34d051(COSMETICS.ACCESSORY, FIRST_BUTTON_ACCESSORY, function (_0x51dbba) {
    ui.accessory = _0x51dbba;
    if (ui.unlock.accessory[_0x51dbba] === 1) {
      Cookies.set("starve_accessory", "" + _0x51dbba, {
        expires: 30
      });
    }
  }, this.accessory, this.unlock.accessory);
  this.trigger_mousedown = function (_0x4b4857) {
    mouse.pos = get_mouse_pos(_0x196830.can, _0x4b4857);
    for (var _0x577b51 = 0; _0x577b51 < _0x196830.buttons.length; _0x577b51++) {
      if (_0x196830.buttons[_0x577b51].info.active === _0x9d40be) {
        _0x196830.buttons[_0x577b51].trigger(_0x196830.can, mouse.pos, MOUSE_DOWN);
      }
    }
  };
  this.trigger_mouseup = function (_0x43f6c8) {
    mouse.pos = get_mouse_pos(_0x196830.can, _0x43f6c8);
    for (var _0x3dc6bb = 0; _0x3dc6bb < _0x196830.buttons.length; _0x3dc6bb++) {
      var _0x31ec9d = _0x196830.buttons[_0x3dc6bb];
      if (_0x31ec9d.info.active === _0x9d40be) {
        if (_0x31ec9d.trigger(_0x196830.can, mouse.pos, MOUSE_UP)) {
          _0x31ec9d.info.callback();
          return;
        }
      }
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (_0x300b69) {
    mouse.pos = get_mouse_pos(_0x196830.can, _0x300b69);
    var _0x387a54 = false;
    for (var _0xf60f85 = 0; _0xf60f85 < _0x196830.buttons.length; _0xf60f85++) {
      if (_0x196830.buttons[_0xf60f85].info.active === _0x9d40be) {
        _0x387a54 |= _0x196830.buttons[_0xf60f85].trigger(_0x196830.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (_0x196830.current_cursor !== _0x387a54) {
      _0x196830.current_cursor = _0x387a54;
      if (_0x387a54) {
        _0x184f60.style.cursor = _0x196830.cursor1;
      } else {
        _0x184f60.style.cursor = _0x196830.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
  };
}
function Game(_0x256f70, _0x3da1b1) {
  var _0x2ee466 = this;
  this.can = _0x256f70;
  this.ctx = _0x3da1b1;
  if (window.navigator.userAgent.indexOf("Edge") > -1) {
    this.cursor0 = "default";
    this.cursor1 = "pointer";
  } else {
    this.cursor0 = "url('img/cursor0.png'), default";
    this.cursor1 = "url('img/cursor1.png'), pointer";
  }
  this.show_ui = 1;
  this.show_clock = 1;
  this.show_recipe_book = 1;
  this.show_quest = 1;
  this.team_box = {
    id: document.getElementById("team_box"),
    style: document.getElementById("team_box").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 125) + "px";
      this.style.top = "110px";
    }
  };
  this.audio = {
    button_on: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]),
    button_off: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF])
  };
  this.sign = {
    open: false,
    breads: 0,
    symbol: document.getElementById("sign_object"),
    symbol_id: 0,
    id: document.getElementById("sign_window"),
    style: document.getElementById("sign_window").style,
    button: gui_create_button(60, 60, "", sprite[SPRITE.SIGN_BUTTON]),
    update_button: function () {
      var _0x4ca2af = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + sprite[SPRITE.INV_WOOD][0].width) + 35);
      this.button.info.translate.x = _0x4ca2af;
      this.button.info.translate.y = 22;
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 150) + "px";
      this.style.top = Math.floor(canh2 - 115) + "px";
    },
    quit: function () {
      game.sign.style.display = "none";
      game.sign.open = false;
    },
    select: function () {
      game.sign.open = !game.sign.open;
      if (game.sign.open) {
        game.sign.style.display = "inline-block";
      } else {
        game.sign.style.display = "none";
      }
    },
    ok: function () {
      client.update_sign(user.sign.iid, game.sign.symbol_id);
      game.sign.select();
    },
    up: function () {
      game.sign.symbol_id = game.sign.symbol_id === 0 ? CLIENT.SYMBOL_MAX - 1 : game.sign.symbol_id - 1;
      game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
    },
    down: function () {
      game.sign.symbol_id = (game.sign.symbol_id + 1) % CLIENT.SYMBOL_MAX;
      game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
    }
  };
  document.getElementById("quit_sign").addEventListener("mouseup", this.sign.select, false);
  document.getElementById("ok_sign").addEventListener("mouseup", this.sign.ok, false);
  document.getElementById("sign_up").addEventListener("mouseup", this.sign.up, false);
  document.getElementById("sign_down").addEventListener("mouseup", this.sign.down, false);
  this.market = {
    open: false,
    id: document.getElementById("shop_market"),
    style: document.getElementById("shop_market").style,
    items: [{
      id: 0,
      name: "wood",
      val: 1,
      b: 1,
      a: 3,
      img_item: SPRITE.INV_WOOD
    }, {
      id: 1,
      name: "stone",
      val: 1,
      b: 1,
      a: 4,
      img_item: SPRITE.INV_STONE
    }, {
      id: 2,
      name: "gold",
      val: 1,
      b: 1,
      a: 6,
      img_item: SPRITE.INV_GOLD
    }, {
      id: 3,
      name: "diamond",
      val: 4,
      b: 4,
      a: 1,
      img_item: SPRITE.INV_DIAMOND
    }, {
      id: 4,
      name: "amethyst",
      val: 8,
      b: 8,
      a: 1,
      img_item: SPRITE.INV_AMETHYST
    }, {
      id: 5,
      name: "reidite",
      val: 16,
      b: 16,
      a: 1,
      img_item: SPRITE.INV_REIDITE
    }, {
      id: 6,
      name: "pumpkin_seed",
      val: 10,
      b: 10,
      a: 1,
      img_item: SPRITE.INV_PUMPKIN_SEED
    }, {
      id: 7,
      name: "carrot_seed",
      val: 16,
      b: 16,
      a: 1,
      img_item: SPRITE.INV_CARROT_SEED
    }, {
      id: 8,
      name: "tomato_seed",
      val: 20,
      b: 20,
      a: 1,
      img_item: SPRITE.INV_TOMATO_SEED
    }, {
      id: 9,
      name: "thornbush_seed",
      val: 30,
      b: 30,
      a: 1,
      img_item: SPRITE.INV_THORNBUSH_SEED
    }, {
      id: 10,
      name: "garlic_seed",
      val: 40,
      b: 40,
      a: 1,
      img_item: SPRITE.INV_GARLIC_SEED
    }, {
      id: 11,
      name: "watermelon_seed",
      val: 60,
      b: 60,
      a: 1,
      img_item: SPRITE.INV_WATERMELON_SEED
    }],
    button: gui_create_button(60, 60, "", sprite[SPRITE.MARKET_BUTTON]),
    update: function () {
      this.style.left = Math.floor(canw2 - 450) + "px";
      this.style.top = Math.floor(canh2 - 270) + "px";
    },
    select: function () {
      game.market.open = !game.market.open;
      if (game.market.open) {
        game.market.style.display = "inline-block";
      } else {
        game.market.style.display = "none";
      }
    },
    quit: function () {
      game.market.style.display = "none";
      game.market.open = false;
    },
    buy: function () {
      client.buy_market(this.itemMarket);
    },
    change: function () {
      var _0x57b33f = this.id;
      if (this.itemMarket.a === 1) {
        var _0x55cc5f = Math.floor(Number(this.value) * this.itemMarket.b);
        this.itemMarket.val = _0x55cc5f;
        document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = _0x55cc5f + "";
      } else {
        var _0x55cc5f = Math.floor(Number(this.value) / this.itemMarket.a);
        this.itemMarket.val = _0x55cc5f;
        document.getElementById(this.itemMarket.name + "_trad_number").innerHTML = _0x55cc5f + "";
      }
    }
  };
  document.getElementById("quit_market").addEventListener("mouseup", this.market.quit, false);
  var _0x496895 = [["mouseup", this.market.buy, "buy_"], ["click", this.market.change, ""], ["change", this.market.change, ""], ["keypress", this.market.keypress, ""]];
  for (var _0xe79132 = 0; _0xe79132 < this.market.items.length; _0xe79132++) {
    var _0x42c80b = this.market.items[_0xe79132];
    document.getElementById(_0x42c80b.name + "_market").src = sprite[_0x42c80b.img_item][0]._src === undefined ? sprite[_0x42c80b.img_item][0].src : sprite[_0x42c80b.img_item][0]._src;
    if (_0x42c80b.a === 1) {
      document.getElementById(_0x42c80b.name + "_trad_number").innerHTML = _0x42c80b.b;
      document.getElementById(_0x42c80b.name + "_number").value = 1;
      document.getElementById(_0x42c80b.name + "_number").step = 1;
      document.getElementById(_0x42c80b.name + "_number").min = 1;
      document.getElementById(_0x42c80b.name + "_number").max = Math.floor(255 / _0x42c80b.b);
    } else {
      document.getElementById(_0x42c80b.name + "_trad_number").innerHTML = 1;
      document.getElementById(_0x42c80b.name + "_number").value = _0x42c80b.a;
      document.getElementById(_0x42c80b.name + "_number").step = _0x42c80b.a;
      document.getElementById(_0x42c80b.name + "_number").min = _0x42c80b.a;
    }
    document.getElementById("buy_" + _0x42c80b.name + "_number").itemMarket = _0x42c80b;
    document.getElementById(_0x42c80b.name + "_number").itemMarket = _0x42c80b;
    for (var _0x2fae52 = 0; _0x2fae52 < _0x496895.length; _0x2fae52++) {
      document.getElementById(_0x496895[_0x2fae52][2] + _0x42c80b.name + "_number").addEventListener(_0x496895[_0x2fae52][0], _0x496895[_0x2fae52][1], false);
    }
  }
  $("[type='number']").keypress(function (_0x107144) {
    _0x107144.preventDefault();
  });
  this.options = {
    open: false,
    id: document.getElementById("option_in_game"),
    style: document.getElementById("option_in_game").style,
    agree: document.getElementById("agree_ing").style,
    cancel_agree: document.getElementById("cancel_agree_ing").style,
    quests_agree: document.getElementById("quest_agree_ing").style,
    spectator_agree: document.getElementById("spectator_agree_ing").style,
    feed_agree: document.getElementById("auto_feed_agree_ing").style,
    info_box_agree: document.getElementById("info_agree_ing").style,
    aliasing_agree: document.getElementById("pixelated_agree_ing").style,
    button: gui_create_button(60, 60, "", sprite[SPRITE.OPTION_BUTTON]),
    select_options: function () {
      game.options.open = !game.options.open;
      if (game.options.open) {
        game.options.style.display = "inline-block";
      } else {
        game.options.style.display = "none";
      }
    },
    azerty: function () {
      ui.set_azerty();
    },
    qwerty: function () {
      ui.set_qwerty();
    },
    high: function () {
      ui.high_quality();
    },
    low: function () {
      ui.low_quality();
    },
    checkbox: function () {
      game.safe_delete.checkbox();
    },
    cancel_checkbox: function () {
      game.safe_cancel.checkbox();
    },
    quest_checkbox: function () {
      game.quests.checkbox();
    },
    spectator_checkbox: function () {
      user.show_spectators.invert();
    },
    feed_checkbox: function () {
      user.auto_feed.invert();
    },
    quit: function () {
      game.options.style.display = "none";
      game.options.open = false;
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 170) + "px";
    }
  };
  document.getElementById("azerty_ing").addEventListener("mouseup", this.options.azerty, false);
  document.getElementById("qwerty_ing").addEventListener("mouseup", this.options.qwerty, false);
  document.getElementById("low_ing").addEventListener("mouseup", this.options.low, false);
  document.getElementById("high_ing").addEventListener("mouseup", this.options.high, false);
  document.getElementById("quit_opt").addEventListener("mouseup", this.options.quit, false);
  document.getElementById("case_agree_opt").addEventListener("mouseup", this.options.checkbox, false);
  document.getElementById("quest_case_agree_opt").addEventListener("mouseup", this.options.quest_checkbox, false);
  document.getElementById("cancel_case_agree_opt").addEventListener("mouseup", this.options.cancel_checkbox, false);
  document.getElementById("spectator_case_agree_opt").addEventListener("mouseup", this.options.spectator_checkbox, false);
  document.getElementById("auto_feed_case_agree_opt").addEventListener("mouseup", this.options.feed_checkbox, false);
  this.safe_cancel = {
    open: false,
    activated: Cookies.get("starve_cancel") ? Cookies.get("starve_cancel") === "0" ? 0 : 1 : 1,
    id: document.getElementById("cancel_sure_delete"),
    style: document.getElementById("cancel_sure_delete").style,
    agree: document.getElementById("cancel_agree").style,
    button: 0,
    i: 0,
    quit: function () {
      game.safe_cancel.style.display = "none";
      game.safe_cancel.open = false;
    },
    yes: function () {
      if (user.craft.crafting) {
        client.cancel_crafting();
      }
      game.safe_cancel.quit();
    },
    checkbox: function () {
      if (!game.safe_cancel.activated) {
        Cookies.set("starve_cancel", "1");
        game.safe_cancel.agree.display = "none";
        game.options.cancel_agree.display = "inline-block";
      } else {
        Cookies.set("starve_cancel", "0");
        game.safe_cancel.agree.display = "inline-block";
        game.options.cancel_agree.display = "none";
      }
      game.safe_cancel.activated = !game.safe_cancel.activated;
    },
    del: function () {
      if (!this.activated) {
        this.yes();
      } else {
        this.style.display = "inline-block";
        this.open = true;
      }
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 130) + "px";
    }
  };
  this.safe_cancel.id.oncontextmenu = function () {
    return false;
  };
  this.safe_cancel.agree.display = "none";
  if (this.safe_cancel.activated) {
    this.options.cancel_agree.display = "inline-block";
  } else {
    this.options.cancel_agree.display = "none";
  }
  document.getElementById("cancel_yes_delete").addEventListener("mouseup", this.safe_cancel.yes, false);
  document.getElementById("cancel_no_delete").addEventListener("mouseup", this.safe_cancel.quit, false);
  document.getElementById("cancel_case_agree").addEventListener("mouseup", this.safe_cancel.checkbox, false);
  document.addEventListener("cancel_sure_delete", function (_0x283e41) {
    _0x283e41.preventDefault();
  }, false);
  this.aliasing = {
    activated: Cookies.get("starve_aliasing") ? Cookies.get("starve_aliasing") === "0" ? 0 : 1 : 1,
    set_aliasing: function (_0x278772) {
      if (_0x278772) {
        document.getElementById("game_canvas").style.imageRendering = "pixelated";
      } else {
        document.getElementById("game_canvas").style.imageRendering = "auto";
      }
    },
    checkbox: function () {
      if (game.aliasing.activated === 0) {
        Cookies.set("starve_aliasing", "1");
        game.aliasing.set_aliasing(1);
        game.options.aliasing_agree.display = "inline-block";
      } else {
        Cookies.set("starve_aliasing", "0");
        game.aliasing.set_aliasing(0);
        game.options.aliasing_agree.display = "none";
      }
      game.aliasing.activated = (game.aliasing.activated + 1) % 2;
    }
  };
  if (this.aliasing.activated === 1) {
    this.options.aliasing_agree.display = "inline-block";
  } else {
    this.aliasing.set_aliasing(0);
    this.options.aliasing_agree.display = "none";
  }
  document.getElementById("pixelated_case_agree_opt").addEventListener("mouseup", this.aliasing.checkbox, false);
  this.info_box = {
    activated: Cookies.get("starve_info_box") ? Cookies.get("starve_info_box") === "0" ? 0 : 1 : 1,
    display: 0,
    x: 0,
    y: 0,
    id: 0,
    craft: 0,
    checkbox: function () {
      if (game.info_box.activated === 0) {
        Cookies.set("starve_info_box", "1");
        game.options.info_box_agree.display = "inline-block";
      } else {
        Cookies.set("starve_info_box", "0");
        game.options.info_box_agree.display = "none";
      }
      game.info_box.activated = (game.info_box.activated + 1) % 2;
    },
    trigger: function (_0x193bd4, _0x1aedb3, _0x27c394) {
      if (_0x193bd4 && this.activated) {
        this.display = 1;
        if (_0x27c394 === 0) {
          this.id = _0x1aedb3.id;
        } else {
          this.id = RECIPES[_0x1aedb3.id].id2;
        }
        this.x = _0x1aedb3.info.translate.x + 80;
        this.y = _0x1aedb3.info.translate.y;
        this.craft = _0x27c394;
      }
      return _0x193bd4;
    }
  };
  if (this.info_box.activated === 1) {
    this.options.info_box_agree.display = "inline-block";
  } else {
    this.options.info_box_agree.display = "none";
  }
  document.getElementById("info_case_agree_opt").addEventListener("mouseup", this.info_box.checkbox, false);
  if (Cookies.get("starve_scale")) {
    ratio_opt = Number(Cookies.get("starve_scale"));
    document.getElementById("input_ratio").value = ratio_opt;
    ratio_opt *= devicePixelRatio / backingStoreRatio;
    resize_canvas();
  }
  this.change_ratio = function () {
    Cookies.set("starve_scale", "" + document.getElementById("input_ratio").value);
    ratio_opt = document.getElementById("input_ratio").value * (devicePixelRatio / backingStoreRatio);
    resize_canvas();
  };
  document.getElementById("input_ratio").addEventListener("input", this.change_ratio, false);
  this.safe_delete = {
    open: false,
    activated: Cookies.get("starve_safe") ? Cookies.get("starve_safe") === "0" ? 0 : 1 : 1,
    id: document.getElementById("sure_delete"),
    style: document.getElementById("sure_delete").style,
    agree: document.getElementById("agree").style,
    button: 0,
    i: 0,
    quit: function () {
      game.safe_delete.style.display = "none";
      game.safe_delete.open = false;
    },
    all: function () {
      if (!user.build.wait) {
        if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
          client.delete_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    recycle: function () {
      if (user.craft.workbench && !user.build.wait) {
        if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
          client.recycle_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    one: function () {
      if (!user.build.wait) {
        if (user.craft.preview < 0 && user.craft.id < 0 && !user.ghost.enabled) {
          client.delete_one_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    checkbox: function () {
      if (!game.safe_delete.activated) {
        Cookies.set("starve_safe", "1");
        game.safe_delete.agree.display = "none";
        game.options.agree.display = "inline-block";
      } else {
        Cookies.set("starve_safe", "0");
        game.safe_delete.agree.display = "inline-block";
        game.options.agree.display = "none";
      }
      game.safe_delete.activated = !game.safe_delete.activated;
    },
    del: function (_0x4a4cf0) {
      this.button = _0x4a4cf0;
      document.getElementById("item_to_del").src = sprite[INV_INFOS[_0x4a4cf0].img][0]._src === undefined ? sprite[INV_INFOS[_0x4a4cf0].img][0].src : sprite[INV_INFOS[_0x4a4cf0].img][0]._src;
      if (INV_INFOS[_0x4a4cf0].recycle && !user.zombie && user.craft.workbench) {
        document.getElementById("recycle_delete").style.display = "inline-block";
      } else {
        document.getElementById("recycle_delete").style.display = "none";
      }
      if (!this.activated) {
        this.all();
      } else {
        this.style.display = "inline-block";
        this.open = true;
      }
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 175) + "px";
    }
  };
  this.safe_delete.agree.display = "none";
  if (this.safe_delete.activated) {
    this.options.agree.display = "inline-block";
  } else {
    this.options.agree.display = "none";
  }
  document.getElementById("one_delete").addEventListener("mouseup", this.safe_delete.one, false);
  document.getElementById("yes_delete").addEventListener("mouseup", this.safe_delete.all, false);
  document.getElementById("recycle_delete").addEventListener("mouseup", this.safe_delete.recycle, false);
  document.getElementById("no_delete").addEventListener("mouseup", this.safe_delete.quit, false);
  document.getElementById("case_agree").addEventListener("mouseup", this.safe_delete.checkbox, false);
  this.shop = {
    open: false,
    kit: -1,
    button: gui_create_button(60, 60, "", sprite[SPRITE.SHOP]),
    id: document.getElementById("shop_starterkit"),
    style: document.getElementById("shop_starterkit").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 300) + "px";
      this.style.top = Math.floor(canh2 - 215) + "px";
    },
    quit: function () {
      game.shop.open = false;
      game.shop.style.display = "none";
    },
    select: function () {
      game.shop.open = !game.shop.open;
      if (!game.shop.open) {
        game.shop.style.display = "none";
      } else {
        game.shop.style.display = "inline-block";
      }
    },
    buy: function () {
      if (game.shop.kit >= 0) {
        client.choose_kit(game.shop.kit);
        game.shop.quit();
        if (ga) {
          ga("send", "event", "Game", "kit", "" + game.shop.kit);
        }
      }
    },
    init: function () {
      var _0x578705 = user.shop.value;
      document.getElementById("points_bank").innerHTML = Utils.simplify_number(_0x578705) + " points";
      for (var _0x53e117 = 0; _0x53e117 < KIT.length; _0x53e117++) {
        if (KIT[_0x53e117].price > _0x578705) {
          document.getElementById("starter" + (_0x53e117 + 1)).style.opacity = "0.4";
        } else {
          document.getElementById("starter" + (_0x53e117 + 1)).style.opacity = "1";
        }
      }
      for (_0x53e117 = 1; _0x53e117 < 13; _0x53e117++) {
        document.getElementById("inv_shop" + _0x53e117).src = "./img/empty-shop.png";
        document.getElementById("amount_shop" + _0x53e117).innerHTML = "";
      }
      document.getElementById("buy_kit").style.opacity = "0.2";
    },
    get_starter: function () {
      if (this.id.length > 8) {
        var _0x175a2d = Number(this.id.charAt(7) + this.id.charAt(8));
      } else {
        var _0x175a2d = Number(this.id.charAt(7));
      }
      var _0x1c4fc3 = KIT[_0x175a2d - 1];
      if (user.shop.value >= _0x1c4fc3.price) {
        game.shop.kit = _0x175a2d;
        document.getElementById("buy_kit").style.opacity = "1";
      } else {
        game.shop.kit = -1;
        document.getElementById("buy_kit").style.opacity = "0.2";
      }
      _0x1c4fc3 = _0x1c4fc3.items;
      for (var _0x499418 = 1, _0x15a7d1 = 1; _0x499418 < _0x1c4fc3.length + 1; _0x499418++) {
        if (_0x1c4fc3[_0x499418 - 1][1] === INV.BAG) {
          continue;
        }
        document.getElementById("inv_shop" + _0x15a7d1).style.display = "inline-block";
        document.getElementById("inv_shop" + _0x15a7d1).src = sprite[INV_INFOS[_0x1c4fc3[_0x499418 - 1][1]].img][0]._src === undefined ? sprite[INV_INFOS[_0x1c4fc3[_0x499418 - 1][1]].img][0].src : sprite[INV_INFOS[_0x1c4fc3[_0x499418 - 1][1]].img][0]._src;
        document.getElementById("amount_shop" + _0x15a7d1).innerHTML = "" + _0x1c4fc3[_0x499418 - 1][0];
        _0x15a7d1++;
      }
      for (; _0x15a7d1 < 13; _0x15a7d1++) {
        document.getElementById("inv_shop" + _0x15a7d1).src = "./img/empty-shop.png";
        document.getElementById("amount_shop" + _0x15a7d1).innerHTML = "";
      }
    }
  };
  document.getElementById("quit3").addEventListener("mouseup", this.shop.quit, false);
  document.getElementById("buy_kit").addEventListener("mouseup", this.shop.buy, false);
  for (var _0x2fae52 = 1; _0x2fae52 < 11; _0x2fae52++) {
    document.getElementById("starter" + _0x2fae52).addEventListener("mouseup", this.shop.get_starter, false);
  }
  this.quests = {
    open: false,
    activated: Cookies.get("starve_quests") ? Cookies.get("starve_quests") === "1" ? 1 : 0 : 0,
    button: gui_create_button(60, 60, "", sprite[SPRITE.QUEST_BUTTON]),
    id: document.getElementById("chronoquest"),
    style: document.getElementById("chronoquest").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 420) + "px";
      this.style.top = Math.floor(canh2 - 270) + "px";
    },
    quit: function () {
      game.quests.style.display = "none";
      game.quests.open = false;
    },
    select: function () {
      game.quests.open = !game.quests.open;
      if (!game.quests.open) {
        game.quests.style.display = "none";
      } else {
        game.quests.style.display = "inline-block";
      }
    },
    list: [],
    reset: function () {
      for (var _0x1ad12e = 0; _0x1ad12e < QUESTS.length; _0x1ad12e++) {
        this.list[_0x1ad12e] = 1;
        document.getElementById("timeremain_" + _0x1ad12e).style.display = "inline-block";
        document.getElementById("time_finished_" + _0x1ad12e).style.display = "none";
        document.getElementById("claim_reward_" + _0x1ad12e).style.display = "none";
      }
    },
    timer: 0,
    born: 0,
    update_chrono: function () {
      if (!game.quests.open) {
        return;
      }
      var _0x97192e = new Date().getTime();
      if (_0x97192e - this.timer < 1000) {
        return;
      }
      this.timer = _0x97192e;
      for (var _0x3641ce = 0; _0x3641ce < QUESTS.length; _0x3641ce++) {
        if (!game.quests.list[_0x3641ce]) {
          continue;
        }
        var _0x76ae54 = QUESTS[_0x3641ce].time - (_0x97192e - world.clock.init + game.quests.born);
        if (_0x76ae54 > 960000) {
          document.getElementById("timeremain_" + _0x3641ce).innerHTML = Math.floor(_0x76ae54 / 480000) + " days";
        } else if (_0x76ae54 > 480000) {
          document.getElementById("timeremain_" + _0x3641ce).innerHTML = Math.floor(_0x76ae54 / 480000) + " day";
        } else if (_0x76ae54 > 60000) {
          document.getElementById("timeremain_" + _0x3641ce).innerHTML = Math.floor(_0x76ae54 / 60000) + " min";
        } else {
          document.getElementById("timeremain_" + _0x3641ce).innerHTML = Math.floor(_0x76ae54 / 1000) + " sec";
        }
      }
    },
    restore: function (_0x26216f) {
      for (var _0x5cb31a = 0; _0x5cb31a < _0x26216f.length; _0x5cb31a++) {
        if (_0x26216f[_0x5cb31a] != 1) {
          game.quests.modify_simple(_0x5cb31a, _0x26216f[_0x5cb31a]);
        }
      }
    },
    modify_simple: function (_0x3368ea, _0x3c334e) {
      if (_0x3c334e === 3 && (_0x3368ea === 11 || _0x3368ea === 12)) {
        user.inv.update_bag_size(0, 1);
        game.update_inv_buttons();
      }
      document.getElementById("timeremain_" + _0x3368ea).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
      if (_0x3c334e > 1) {
        document.getElementById("time_finished_" + _0x3368ea).innerHTML = "SUCCEED";
        document.getElementById("timeremain_" + _0x3368ea).style.display = "none";
      } else if (_0x3c334e === 0) {
        document.getElementById("time_finished_" + _0x3368ea).innerHTML = "FAILED";
        document.getElementById("timeremain_" + _0x3368ea).style.display = "none";
      }
      if (_0x3c334e === 2) {
        document.getElementById("claim_reward_" + _0x3368ea).style.display = "inline-block";
      } else {
        document.getElementById("claim_reward_" + _0x3368ea).style.display = "none";
      }
      document.getElementById("time_finished_" + _0x3368ea).style.display = "inline";
      game.quests.list[_0x3368ea] = 0;
    },
    modify: function (_0x50522b, _0x1fd65a) {
      game.quests.modify_simple(_0x50522b, _0x1fd65a);
      if (game.quests.activated) {
        game.quests.open = true;
        game.quests.style.display = "inline-block";
      }
    },
    checkbox: function () {
      if (!game.quests.activated) {
        Cookies.set("starve_quests", "1");
        game.options.quests_agree.display = "inline-block";
      } else {
        Cookies.set("starve_quests", "0");
        game.options.quests_agree.display = "none";
      }
      game.quests.activated = !game.quests.activated;
    },
    claim: function () {
      var _0x2e7f94 = Number(this.id.charAt(13));
      var _0x7d9f90 = Number(this.id.charAt(14));
      if (this.id.charAt(14) !== "" && _0x7d9f90 >= 0 && _0x7d9f90 <= 9) {
        _0x2e7f94 = _0x2e7f94 * 10 + _0x7d9f90;
      }
      client.claim_quest_reward(_0x2e7f94);
    }
  };
  if (this.quests.activated) {
    this.options.quests_agree.display = "inline-block";
  } else {
    this.options.quests_agree.display = "none";
  }
  document.getElementById("quit_chronoquest").addEventListener("mouseup", this.quests.quit, false);
  for (var _0x2fae52 = 0; _0x2fae52 < QUESTS.length; _0x2fae52++) {
    document.getElementById("claim_reward_" + _0x2fae52).addEventListener("mouseup", this.quests.claim, false);
  }
  this.craft_list = {
    open: false,
    button: gui_create_button(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]),
    list: {
      id: document.getElementById("recipe_craft"),
      style: document.getElementById("recipe_craft").style,
      recipes: [],
      category: 0,
      update: function () {
        this.style.left = Math.floor(canw2 - 335) + "px";
        this.style.top = Math.floor(canh2 - 215) + "px";
      },
      quit: function () {
        document.getElementById("recipe_craft").style.display = "none";
        game.craft_list.open = false;
      },
      previous: function () {
        document.getElementById("recipe_craft").style.display = "none";
        document.getElementById("home_craft").style.display = "inline-block";
      },
      get_recipe: function (_0x5a9f9d) {
        var _0x5eea0d = this.recipes[_0x5a9f9d];
        if (_0x5eea0d.o) {
          document.getElementById("watercraft").style.display = "inline-block";
        } else {
          document.getElementById("watercraft").style.display = "none";
        }
        if (_0x5eea0d.f) {
          document.getElementById("firecraft").style.display = "inline-block";
        } else {
          document.getElementById("firecraft").style.display = "none";
        }
        if (_0x5eea0d.w) {
          document.getElementById("workcraft").style.display = "inline-block";
        } else {
          document.getElementById("workcraft").style.display = "none";
        }
        if (_0x5eea0d.e) {
          document.getElementById("wellcraft").style.display = "inline-block";
        } else {
          document.getElementById("wellcraft").style.display = "none";
        }
        var _0x5eea0d = _0x5eea0d.r;
        for (var _0x5a9f9d = 0, _0x198125 = 1; _0x5a9f9d < _0x5eea0d.length; _0x5a9f9d++) {
          document.getElementById("inv" + _0x198125).style.display = "inline-block";
          document.getElementById("inv" + _0x198125).src = sprite[INV_INFOS[_0x5eea0d[_0x5a9f9d][0]].img][0]._src === undefined ? sprite[INV_INFOS[_0x5eea0d[_0x5a9f9d][0]].img][0].src : sprite[INV_INFOS[_0x5eea0d[_0x5a9f9d][0]].img][0]._src;
          document.getElementById("numb" + _0x198125).innerHTML = "" + _0x5eea0d[_0x5a9f9d][1];
          _0x198125++;
        }
        for (; _0x198125 < 6; _0x198125++) {
          document.getElementById("inv" + _0x198125).style.display = "none";
          document.getElementById("numb" + _0x198125).innerHTML = "";
        }
      },
      select: function (_0x121a2c) {
        this.category = _0x121a2c;
        document.getElementById("home_craft").style.display = "none";
        document.getElementById("workcraft").style.display = "none";
        document.getElementById("firecraft").style.display = "none";
        document.getElementById("watercraft").style.display = "none";
        document.getElementById("wellcraft").style.display = "none";
        document.getElementById("recipe_craft").style.display = "inline-block";
        document.getElementById("inv1").style.display = "none";
        document.getElementById("inv2").style.display = "none";
        document.getElementById("inv3").style.display = "none";
        document.getElementById("inv4").style.display = "none";
        document.getElementById("inv5").style.display = "none";
        document.getElementById("numb1").innerHTML = "";
        document.getElementById("numb2").innerHTML = "";
        document.getElementById("numb3").innerHTML = "";
        document.getElementById("numb4").innerHTML = "";
        document.getElementById("numb5").innerHTML = "";
        for (var _0x15184c = 0, _0xba1b95 = 0; _0x15184c < RECIPES.length; _0x15184c++) {
          var _0x492e2f = RECIPES[_0x15184c];
          if (_0x121a2c === _0x492e2f.t) {
            this.recipes[_0xba1b95] = _0x492e2f;
            _0xba1b95++;
            document.getElementById("img_" + _0xba1b95).style.display = "inline-block";
            document.getElementById("img_" + _0xba1b95).src = sprite[INV_INFOS[_0x492e2f.id2].img][0]._src === undefined ? sprite[INV_INFOS[_0x492e2f.id2].img][0].src : sprite[INV_INFOS[_0x492e2f.id2].img][0]._src;
          }
        }
        for (_0xba1b95++; _0xba1b95 < 49; _0xba1b95++) {
          document.getElementById("img_" + _0xba1b95).style.display = "none";
        }
      }
    },
    home: {
      id: document.getElementById("home_craft"),
      style: document.getElementById("home_craft").style,
      update: function () {
        this.style.left = Math.floor(canw2 - 285) + "px";
        this.style.top = Math.floor(canh2 - 170) + "px";
      },
      quit: function () {
        document.getElementById("home_craft").style.display = "none";
        game.craft_list.open = false;
      }
    },
    select_book: function () {
      this.open = !this.open;
      if (!this.open) {
        document.getElementById("home_craft").style.display = "none";
        document.getElementById("recipe_craft").style.display = "none";
      } else {
        document.getElementById("home_craft").style.display = "inline-block";
      }
    }
  };
  document.getElementById("quit").addEventListener("mouseup", this.craft_list.home.quit, false);
  document.getElementById("quitmenu").addEventListener("mouseup", this.craft_list.list.quit, false);
  document.getElementById("backhome").addEventListener("mouseup", this.craft_list.list.previous, false);
  document.getElementById("hatcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.CLOTHES);
  }, false);
  document.getElementById("weaponcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.WEAPONS);
  }, false);
  document.getElementById("toolcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.TOOLS);
  }, false);
  document.getElementById("foodcategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.FOODS);
  }, false);
  document.getElementById("placeablecategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.UTILS);
  }, false);
  document.getElementById("constructioncategory").addEventListener("mouseup", function () {
    game.craft_list.list.select(CATEGORY.BASES);
  }, false);
  document.getElementById("img_1").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(0);
  }, false);
  document.getElementById("img_2").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(1);
  }, false);
  document.getElementById("img_3").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(2);
  }, false);
  document.getElementById("img_4").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(3);
  }, false);
  document.getElementById("img_5").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(4);
  }, false);
  document.getElementById("img_6").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(5);
  }, false);
  document.getElementById("img_7").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(6);
  }, false);
  document.getElementById("img_8").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(7);
  }, false);
  document.getElementById("img_9").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(8);
  }, false);
  document.getElementById("img_10").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(9);
  }, false);
  document.getElementById("img_11").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(10);
  }, false);
  document.getElementById("img_12").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(11);
  }, false);
  document.getElementById("img_13").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(12);
  }, false);
  document.getElementById("img_14").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(13);
  }, false);
  document.getElementById("img_15").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(14);
  }, false);
  document.getElementById("img_16").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(15);
  }, false);
  document.getElementById("img_17").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(16);
  }, false);
  document.getElementById("img_18").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(17);
  }, false);
  document.getElementById("img_19").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(18);
  }, false);
  document.getElementById("img_20").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(19);
  }, false);
  document.getElementById("img_21").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(20);
  }, false);
  document.getElementById("img_22").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(21);
  }, false);
  document.getElementById("img_23").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(22);
  }, false);
  document.getElementById("img_24").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(23);
  }, false);
  document.getElementById("img_25").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(24);
  }, false);
  document.getElementById("img_26").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(25);
  }, false);
  document.getElementById("img_27").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(26);
  }, false);
  document.getElementById("img_28").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(27);
  }, false);
  document.getElementById("img_29").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(28);
  }, false);
  document.getElementById("img_30").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(29);
  }, false);
  document.getElementById("img_31").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(30);
  }, false);
  document.getElementById("img_32").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(31);
  }, false);
  document.getElementById("img_33").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(32);
  }, false);
  document.getElementById("img_34").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(33);
  }, false);
  document.getElementById("img_35").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(34);
  }, false);
  document.getElementById("img_36").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(35);
  }, false);
  document.getElementById("img_37").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(36);
  }, false);
  document.getElementById("img_38").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(37);
  }, false);
  document.getElementById("img_39").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(38);
  }, false);
  document.getElementById("img_40").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(39);
  }, false);
  document.getElementById("img_41").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(40);
  }, false);
  document.getElementById("img_42").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(41);
  }, false);
  document.getElementById("img_43").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(42);
  }, false);
  document.getElementById("img_44").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(43);
  }, false);
  document.getElementById("img_45").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(44);
  }, false);
  document.getElementById("img_46").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(45);
  }, false);
  document.getElementById("img_47").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(46);
  }, false);
  document.getElementById("img_48").addEventListener("mousedown", function () {
    game.craft_list.list.get_recipe(47);
  }, false);
  this.minimap = {
    translate: {
      x: 0,
      y: 0
    },
    marker: {
      x: -1,
      y: -1
    },
    players: [],
    focus: function (_0x533296) {
      var _0x3671e1 = this.translate.y + (user.inv.can_select.length > 0 ? -120 : -50);
      if (_0x533296.x > this.translate.x && _0x533296.x < this.translate.x + 193 && _0x533296.y > _0x3671e1 && _0x533296.y < _0x3671e1 + 193) {
        this.marker.x = _0x533296.x - this.translate.x;
        this.marker.y = _0x533296.y - _0x3671e1;
      }
    }
  };
  this.leaderboard = {
    translate: {
      x: 0,
      y: 0
    },
    img: sprite[SPRITE.LEADERBOARD],
    can: document.createElement("canvas")
  };
  this.leaderboard.can.width = this.leaderboard.img.width;
  this.leaderboard.can.height = this.leaderboard.img.height;
  this.leaderboard.ctx = this.leaderboard.can.getContext("2d");
  this.gauges = {
    translate: {
      x: 0,
      y: 0
    },
    img: sprite[SPRITE.GAUGES],
    draw: draw_gauges,
    y: 0
  };
  this.leave_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + world.players[user.team[0]].nickname + "</div";
    for (var _0x16f9b6 = 1; _0x16f9b6 < user.team.length; _0x16f9b6++) {
      div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + world.players[user.team[_0x16f9b6]].nickname + "</div></div>";
    }
    div.innerHTML += "<div id=\"leave\" style=\"display:inline-block;\">LEAVE</div></div>";
    div.style.display = "inline-block";
    document.getElementById("leave").addEventListener("click", client.leave_team, false);
  };
  this.show_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + world.players[user.team[0]].nickname + "</div";
    for (var _0x3206c4 = 1; _0x3206c4 < user.team.length; _0x3206c4++) {
      div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + world.players[user.team[_0x3206c4]].nickname + "</div></div>";
    }
    div.innerHTML += "</div>";
    div.style.display = "inline-block";
  };
  this.manage_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML += "<div id=\"leader\"><img src=\"./img/leaderlogo.png\" style=\"width:25px;margin-right:5px;\" ></img>" + world.players[user.team[0]].nickname + "</div";
    for (var _0x480e67 = 1; _0x480e67 < user.team.length; _0x480e67++) {
      div.innerHTML += "<div class=\"nicknames\"> <div style=\"display:inline-block;padding-top:7px;\">" + world.players[user.team[_0x480e67]].nickname + "</div><div class=\"eject_member\" id=\"eject_member" + _0x480e67 + "\"><img src=\"./img/close-team.png\" style=\"width:20px;padding:5px;\"></img></div>";
    }
    if (user.totem.lock === 0) {
      div.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">LOCK</div></div>";
    } else {
      div.innerHTML += "<div id=\"lock_team\" style=\"display:inline-block;\">UNLOCK</div></div>";
    }
    document.getElementById("lock_team").addEventListener("click", client.lock_team, false);
    div.style.display = "inline-block";
    for (var _0x480e67 = 1; _0x480e67 < user.team.length; _0x480e67++) {
      switch (_0x480e67) {
        case 1:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(1);
          }, false);
          break;
        case 2:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(2);
          }, false);
          break;
        case 3:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(3);
          }, false);
          break;
        case 4:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(4);
          }, false);
          break;
        case 5:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(5);
          }, false);
          break;
        case 6:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(6);
          }, false);
          break;
        case 7:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(7);
          }, false);
          break;
        case 8:
          document.getElementById("eject_member" + _0x480e67).addEventListener("click", function () {
            client.kick_team(8);
          }, false);
          break;
      }
    }
  };
  this.team_buttons = [];
  this.team_buttons[CLIENT.TEAM_LEAVE] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
    action: this.leave_team
  };
  this.team_buttons[CLIENT.TEAM_JOIN] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
    action: client.join_team
  };
  this.team_buttons[CLIENT.TEAM_MANAGE] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]),
    action: this.manage_team
  };
  this.team_buttons[CLIENT.TEAM_SHOW] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]),
    action: this.show_team
  };
  this.team_buttons[CLIENT.TEAM_FULL] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]),
    action: function () {}
  };
  this.team_buttons_id = -1;
  this.bread_oven_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_WOOD]);
  this.bread_oven_bread_button = gui_create_button(60, 60, "", sprite[SPRITE.BREAD_OVEN_BREAD]);
  this.bread_oven_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
  this.windmill_wheat_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_WHEAT_SEED]);
  this.windmill_flour_button = gui_create_button(60, 60, "", sprite[SPRITE.WINDMILL_FLOUR]);
  this.extractor_wood_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD]);
  this.extractor_stone_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE]);
  this.extractor_gold_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD]);
  this.extractor_diamond_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND]);
  this.extractor_amethyst_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST]);
  this.extractor_reidite_button = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE]);
  this.furnace_button = gui_create_button(60, 60, "", sprite[SPRITE.FURNACE_BUTTON]);
  this.chest_padlock = gui_create_button(60, 60, "", sprite[SPRITE.PADLOCK]);
  this.chest_lockpick = gui_create_button(60, 60, "", sprite[SPRITE.KEY]);
  this.chest_locked = gui_create_button(60, 60, "", sprite[SPRITE.LOCKED]);
  this.resurrection = gui_create_button(120, 120, "", sprite[SPRITE.DRAGON_HEART]);
  this.resurrection.info.translate.x = 10;
  this.resurrection.info.translate.y = 10;
  this.chest_buttons = [];
  this.chest_buttons[INV.SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD], 3);
  this.chest_buttons[INV.SWORD].id = INV.SWORD;
  this.chest_buttons[INV.PICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK], 3);
  this.chest_buttons[INV.PICK].id = INV.PICK;
  this.chest_buttons[INV.STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE], 3);
  this.chest_buttons[INV.STONE].id = INV.STONE;
  this.chest_buttons[INV.WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD], 3);
  this.chest_buttons[INV.WOOD].id = INV.WOOD;
  this.chest_buttons[INV.PLANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANT], 3);
  this.chest_buttons[INV.PLANT].id = INV.PLANT;
  this.chest_buttons[INV.CACTUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CACTUS], 3);
  this.chest_buttons[INV.CACTUS].id = INV.CACTUS;
  this.chest_buttons[INV.GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD], 3);
  this.chest_buttons[INV.GOLD].id = INV.GOLD;
  this.chest_buttons[INV.DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND], 3);
  this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.chest_buttons[INV.PICK_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_GOLD], 3);
  this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.chest_buttons[INV.PICK_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_DIAMOND], 3);
  this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.chest_buttons[INV.SWORD_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_GOLD], 3);
  this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.chest_buttons[INV.SWORD_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_WOOD], 3);
  this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.chest_buttons[INV.SWORD_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_DIAMOND], 3);
  this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.chest_buttons[INV.FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIRE], 3);
  this.chest_buttons[INV.FIRE].id = INV.FIRE;
  this.chest_buttons[INV.WORKBENCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WORKBENCH], 3);
  this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.chest_buttons[INV.SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SEED], 3);
  this.chest_buttons[INV.SEED].id = INV.SEED;
  this.chest_buttons[INV.WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WALL], 3);
  this.chest_buttons[INV.WALL].id = INV.WALL;
  this.chest_buttons[INV.SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPIKE], 3);
  this.chest_buttons[INV.SPIKE].id = INV.SPIKE;
  this.chest_buttons[INV.PICK_WOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_WOOD], 3);
  this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.chest_buttons[INV.COOKED_MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKED_MEAT], 3);
  this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.chest_buttons[INV.MEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MEAT], 3);
  this.chest_buttons[INV.MEAT].id = INV.MEAT;
  this.chest_buttons[INV.BIG_FIRE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BIG_FIRE], 3);
  this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.chest_buttons[INV.BANDAGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BANDAGE], 3);
  this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.chest_buttons[INV.CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CORD], 3);
  this.chest_buttons[INV.CORD].id = INV.CORD;
  this.chest_buttons[INV.STONE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_WALL], 3);
  this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.chest_buttons[INV.GOLD_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_WALL], 3);
  this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.chest_buttons[INV.DIAMOND_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_WALL], 3);
  this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.chest_buttons[INV.WOOD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE], 3);
  this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.chest_buttons[INV.CHEST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHEST], 3);
  this.chest_buttons[INV.CHEST].id = INV.CHEST;
  this.chest_buttons[INV.STONE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SPIKE], 3);
  this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.chest_buttons[INV.GOLD_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPIKE], 3);
  this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.chest_buttons[INV.DIAMOND_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPIKE], 3);
  this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.chest_buttons[INV.FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR], 3);
  this.chest_buttons[INV.FUR].id = INV.FUR;
  this.chest_buttons[INV.FUR_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_BOAR], 3);
  this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.chest_buttons[INV.FUR_WOLF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WOLF], 3);
  this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.chest_buttons[INV.PENGUIN_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PENGUIN_FEATHER], 3);
  this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.chest_buttons[INV.HAWK_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK_FEATHER], 3);
  this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.chest_buttons[INV.VULTURE_FEATHER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_VULTURE_FEATHER], 3);
  this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.chest_buttons[INV.EMERALD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD], 3);
  this.chest_buttons[INV.EMERALD].id = INV.EMERALD;
  this.chest_buttons[INV.EARMUFFS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EARMUFFS], 3);
  this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.chest_buttons[INV.STONE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_STONE_CLOSE], 3);
  this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.chest_buttons[INV.GOLD_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE], 3);
  this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.chest_buttons[INV.DIAMOND_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE], 3);
  this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.chest_buttons[INV.COAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COAT], 3);
  this.chest_buttons[INV.COAT].id = INV.COAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPEAR], 3);
  this.chest_buttons[INV.SPEAR].id = INV.SPEAR;
  this.chest_buttons[INV.GOLD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SPEAR], 3);
  this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.chest_buttons[INV.DIAMOND_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SPEAR], 3);
  this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.FURNACE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FURNACE], 3);
  this.chest_buttons[INV.FURNACE].id = INV.FURNACE;
  this.chest_buttons[INV.EXPLORER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXPLORER_HAT], 3);
  this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.chest_buttons[INV.PIRATE_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_HAT], 3);
  this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.chest_buttons[INV.FLOWER_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOWER_HAT], 3);
  this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.chest_buttons[INV.FUR_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_HAT], 3);
  this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.chest_buttons[INV.TURBAN1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN1], 3);
  this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.chest_buttons[INV.TURBAN2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TURBAN2], 3);
  this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.chest_buttons[INV.WOOD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_ARROW], 3);
  this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.chest_buttons[INV.WOOD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_BOW], 3);
  this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.chest_buttons[INV.WOOD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SHIELD], 3);
  this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.chest_buttons[INV.STONE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_ARROW], 3);
  this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.chest_buttons[INV.STONE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_BOW], 3);
  this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.chest_buttons[INV.STONE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_SHIELD], 3);
  this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.chest_buttons[INV.GOLD_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_ARROW], 3);
  this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.chest_buttons[INV.GOLD_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_BOW], 3);
  this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.chest_buttons[INV.GOLD_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_SHIELD], 3);
  this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.chest_buttons[INV.DIAMOND_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_ARROW], 3);
  this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.chest_buttons[INV.DIAMOND_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_BOW], 3);
  this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.chest_buttons[INV.DIAMOND_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_SHIELD], 3);
  this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.chest_buttons[INV.AMETHYST_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_ARROW], 3);
  this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.chest_buttons[INV.AMETHYST_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_BOW], 3);
  this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.chest_buttons[INV.AMETHYST_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SHIELD], 3);
  this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.chest_buttons[INV.REIDITE_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_ARROW], 3);
  this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.chest_buttons[INV.REIDITE_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_BOW], 3);
  this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.chest_buttons[INV.REIDITE_SHIELD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SHIELD], 3);
  this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.chest_buttons[INV.DRAGON_ARROW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ARROW], 3);
  this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.chest_buttons[INV.DRAGON_BOW] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_BOW], 3);
  this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.chest_buttons[INV.WOOD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_HELMET], 3);
  this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.chest_buttons[INV.STONE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_HELMET], 3);
  this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.chest_buttons[INV.GOLD_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_HELMET], 3);
  this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.chest_buttons[INV.DIAMOND_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_HELMET], 3);
  this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.chest_buttons[INV.BOOK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOOK], 3);
  this.chest_buttons[INV.BOOK].id = INV.BOOK;
  this.chest_buttons[INV.PAPER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PAPER], 3);
  this.chest_buttons[INV.PAPER].id = INV.PAPER;
  this.chest_buttons[INV.BAG] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BAG], 3);
  this.chest_buttons[INV.BAG].id = INV.BAG;
  this.chest_buttons[INV.AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST], 3);
  this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.chest_buttons[INV.SWORD_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SWORD_AMETHYST], 3);
  this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.chest_buttons[INV.PIRATE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PIRATE_SWORD], 3);
  this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.chest_buttons[INV.PICK_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_AMETHYST], 3);
  this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.chest_buttons[INV.PICK_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PICK_REIDITE], 3);
  this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.chest_buttons[INV.AMETHYST_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPEAR], 3);
  this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.chest_buttons[INV.HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER], 3);
  this.chest_buttons[INV.HAMMER].id = INV.HAMMER;
  this.chest_buttons[INV.HAMMER_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_GOLD], 3);
  this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.chest_buttons[INV.HAMMER_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_DIAMOND], 3);
  this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.chest_buttons[INV.HAMMER_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_AMETHYST], 3);
  this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.chest_buttons[INV.HAMMER_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAMMER_REIDITE], 3);
  this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.chest_buttons[INV.AMETHYST_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_WALL], 3);
  this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.chest_buttons[INV.AMETHYST_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_SPIKE], 3);
  this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE], 3);
  this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.chest_buttons[INV.CAP_SCARF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAP_SCARF], 3);
  this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.chest_buttons[INV.FUR_WINTER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_WINTER], 3);
  this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.chest_buttons[INV.FUR_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FUR_MAMMOTH], 3);
  this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.chest_buttons[INV.BLUE_CORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BLUE_CORD], 3);
  this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.chest_buttons[INV.LOCK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCK], 3);
  this.chest_buttons[INV.LOCK].id = INV.LOCK;
  this.chest_buttons[INV.DRAGON_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HEART], 3);
  this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.chest_buttons[INV.RESURRECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_RESURRECTION], 3);
  this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.chest_buttons[INV.LOCKPICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LOCKPICK], 3);
  this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.chest_buttons[INV.TOTEM] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOTEM], 3);
  this.chest_buttons[INV.TOTEM].id = INV.TOTEM;
  this.chest_buttons[INV.AMETHYST_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_HELMET], 3);
  this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.chest_buttons[INV.SUPER_HAMMER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_HAMMER], 3);
  this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.chest_buttons[INV.BRIDGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BRIDGE], 3);
  this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.chest_buttons[INV.WOOD_TOWER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_TOWER], 3);
  this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.chest_buttons[INV.BOAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOAT], 3);
  this.chest_buttons[INV.BOAT].id = INV.BOAT;
  this.chest_buttons[INV.SLED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SLED], 3);
  this.chest_buttons[INV.SLED].id = INV.SLED;
  this.chest_buttons[INV.PLANE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLANE], 3);
  this.chest_buttons[INV.PLANE].id = INV.PLANE;
  this.chest_buttons[INV.SADDLE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SADDLE], 3);
  this.chest_buttons[INV.SADDLE].id = INV.SADDLE;
  this.chest_buttons[INV.MOUNT_BOAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MOUNT_BOAR], 3);
  this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.chest_buttons[INV.BABY_DRAGON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_DRAGON], 3);
  this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.chest_buttons[INV.BABY_MAMMOTH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_MAMMOTH], 3);
  this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.chest_buttons[INV.BABY_LAVA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BABY_LAVA], 3);
  this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.chest_buttons[INV.HAWK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HAWK], 3);
  this.chest_buttons[INV.HAWK].id = INV.HAWK;
  this.chest_buttons[INV.CRAB_BOSS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_BOSS], 3);
  this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.chest_buttons[INV.SAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SAND], 3);
  this.chest_buttons[INV.SAND].id = INV.SAND;
  this.chest_buttons[INV.BOTTLE_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_FULL], 3);
  this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.chest_buttons[INV.BOTTLE_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BOTTLE_EMPTY], 3);
  this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.chest_buttons[INV.SHOVEL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL], 3);
  this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.chest_buttons[INV.SHOVEL_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_GOLD], 3);
  this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.chest_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_DIAMOND], 3);
  this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.chest_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SHOVEL_AMETHYST], 3);
  this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.chest_buttons[INV.SPANNER] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPANNER], 3);
  this.chest_buttons[INV.SPANNER].id = INV.SPANNER;
  this.chest_buttons[INV.KRAKEN_SKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_KRAKEN_SKIN], 3);
  this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.chest_buttons[INV.WATERING_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN], 3);
  this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.chest_buttons[INV.FLOUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLOUR], 3);
  this.chest_buttons[INV.FLOUR].id = INV.FLOUR;
  this.chest_buttons[INV.WHEAT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WHEAT_SEED], 3);
  this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.chest_buttons[INV.COOKIE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_COOKIE], 3);
  this.chest_buttons[INV.COOKIE].id = INV.COOKIE;
  this.chest_buttons[INV.WILD_WHEAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WILD_WHEAT], 3);
  this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.chest_buttons[INV.WINDMILL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINDMILL], 3);
  this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.chest_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUPER_DIVING_SUIT], 3);
  this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.chest_buttons[INV.DIVING_MASK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIVING_MASK], 3);
  this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.chest_buttons[INV.WATERING_CAN_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERING_CAN_FULL], 3);
  this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.chest_buttons[INV.CAKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CAKE], 3);
  this.chest_buttons[INV.CAKE].id = INV.CAKE;
  this.chest_buttons[INV.BREAD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD], 3);
  this.chest_buttons[INV.BREAD].id = INV.BREAD;
  this.chest_buttons[INV.FOODFISH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH], 3);
  this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.chest_buttons[INV.FOODFISH_COOKED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FOODFISH_COOKED], 3);
  this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.chest_buttons[INV.SCALES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SCALES], 3);
  this.chest_buttons[INV.SCALES].id = INV.SCALES;
  this.chest_buttons[INV.GROUND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GROUND], 3);
  this.chest_buttons[INV.GROUND].id = INV.GROUND;
  this.chest_buttons[INV.PLOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PLOT], 3);
  this.chest_buttons[INV.PLOT].id = INV.PLOT;
  this.chest_buttons[INV.ICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ICE], 3);
  this.chest_buttons[INV.ICE].id = INV.ICE;
  this.chest_buttons[INV.BREAD_OVEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BREAD_OVEN], 3);
  this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.chest_buttons[INV.SANDWICH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWICH], 3);
  this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.chest_buttons[INV.DRAGON_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_HELMET], 3);
  this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.chest_buttons[INV.DRAGON_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SWORD], 3);
  this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.chest_buttons[INV.DRAGON_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_ORB], 3);
  this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.chest_buttons[INV.DRAGON_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_CUBE], 3);
  this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.LAVA_CUBE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_CUBE], 3);
  this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.chest_buttons[INV.CROWN_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_GREEN], 3);
  this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.chest_buttons[INV.GEMME_GREEN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_GREEN], 3);
  this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.chest_buttons[INV.GEMME_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_ORANGE], 3);
  this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.chest_buttons[INV.CROWN_ORANGE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_ORANGE], 3);
  this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.chest_buttons[INV.GEMME_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GEMME_BLUE], 3);
  this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.chest_buttons[INV.CROWN_BLUE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_BLUE], 3);
  this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.chest_buttons[INV.HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_HOOD], 3);
  this.chest_buttons[INV.HOOD].id = INV.HOOD;
  this.chest_buttons[INV.PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PEASANT], 3);
  this.chest_buttons[INV.PEASANT].id = INV.PEASANT;
  this.chest_buttons[INV.SPECIAL_FUR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR], 3);
  this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.chest_buttons[INV.SPECIAL_FUR_2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SPECIAL_FUR_2], 3);
  this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.chest_buttons[INV.WINTER_PEASANT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_PEASANT], 3);
  this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.chest_buttons[INV.WINTER_HOOD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WINTER_HOOD], 3);
  this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.chest_buttons[INV.BUCKET_FULL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_FULL], 3);
  this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.chest_buttons[INV.BUCKET_EMPTY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BUCKET_EMPTY], 3);
  this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.chest_buttons[INV.WELL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WELL], 3);
  this.chest_buttons[INV.WELL].id = INV.WELL;
  this.chest_buttons[INV.SIGN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SIGN], 3);
  this.chest_buttons[INV.SIGN].id = INV.SIGN;
  this.chest_buttons[INV.PUMPKIN_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN_SEED], 3);
  this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.chest_buttons[INV.PUMPKIN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PUMPKIN], 3);
  this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.chest_buttons[INV.ROOF] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ROOF], 3);
  this.chest_buttons[INV.ROOF].id = INV.ROOF;
  this.chest_buttons[INV.GARLIC_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC_SEED], 3);
  this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.chest_buttons[INV.GARLIC] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLIC], 3);
  this.chest_buttons[INV.GARLIC].id = INV.GARLIC;
  this.chest_buttons[INV.THORNBUSH_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH_SEED], 3);
  this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.chest_buttons[INV.THORNBUSH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_THORNBUSH], 3);
  this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.chest_buttons[INV.TOMATO_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO_SEED], 3);
  this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.chest_buttons[INV.TOMATO] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_TOMATO], 3);
  this.chest_buttons[INV.TOMATO].id = INV.TOMATO;
  this.chest_buttons[INV.CARROT_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT_SEED], 3);
  this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.chest_buttons[INV.CARROT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CARROT], 3);
  this.chest_buttons[INV.CARROT].id = INV.CARROT;
  this.chest_buttons[INV.WATERMELON_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON_SEED], 3);
  this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.chest_buttons[INV.WATERMELON] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WATERMELON], 3);
  this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.chest_buttons[INV.ALOE_VERA_SEED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA_SEED], 3);
  this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.chest_buttons[INV.ALOE_VERA] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ALOE_VERA], 3);
  this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.chest_buttons[INV.CHRISTMAS_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CHRISTMAS_HAT], 3);
  this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.chest_buttons[INV.ELF_HAT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_ELF_HAT], 3);
  this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_SPEAR], 3);
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DRAGON_SPEAR], 3);
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.CRAB_STICK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_STICK], 3);
  this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.chest_buttons[INV.CRAB_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_SPEAR], 3);
  this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.chest_buttons[INV.CRAB_LOOT] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CRAB_LOOT], 3);
  this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.chest_buttons[INV.BED] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_BED], 3);
  this.chest_buttons[INV.BED].id = INV.BED;
  this.chest_buttons[INV.CROWN_CRAB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CROWN_CRAB], 3);
  this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.chest_buttons[INV.GARLAND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GARLAND], 3);
  this.chest_buttons[INV.GARLAND].id = INV.GARLAND;
  this.chest_buttons[INV.SUGAR_CAN] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SUGAR_CAN], 3);
  this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.chest_buttons[INV.CANDY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_CANDY], 3);
  this.chest_buttons[INV.CANDY].id = INV.CANDY;
  this.plus_buttons = [];
  for (var _0x2fae52 = 0; _0x2fae52 < 250; _0x2fae52++) {
    this.plus_buttons[_0x2fae52] = gui_create_button(0, 0, "", sprite[SPRITE.CHEST_PLUS]);
  }
  this.inv_buttons = [];
  this.inv_buttons[INV.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD], 3);
  this.inv_buttons[INV.SWORD].id = INV.SWORD;
  this.inv_buttons[INV.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK], 3);
  this.inv_buttons[INV.PICK].id = INV.PICK;
  this.inv_buttons[INV.STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE], 3);
  this.inv_buttons[INV.STONE].id = INV.STONE;
  this.inv_buttons[INV.STONE].info.img[2] = this.inv_buttons[INV.STONE].info.img[0];
  this.inv_buttons[INV.WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD], 3);
  this.inv_buttons[INV.WOOD].id = INV.WOOD;
  this.inv_buttons[INV.WOOD].info.img[2] = this.inv_buttons[INV.WOOD].info.img[0];
  this.inv_buttons[INV.PLANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANT], 3);
  this.inv_buttons[INV.PLANT].id = INV.PLANT;
  this.inv_buttons[INV.CACTUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CACTUS], 3);
  this.inv_buttons[INV.CACTUS].id = INV.CACTUS;
  this.inv_buttons[INV.GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD], 3);
  this.inv_buttons[INV.GOLD].id = INV.GOLD;
  this.inv_buttons[INV.GOLD].info.img[2] = this.inv_buttons[INV.GOLD].info.img[0];
  this.inv_buttons[INV.DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND], 3);
  this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.inv_buttons[INV.DIAMOND].info.img[2] = this.inv_buttons[INV.DIAMOND].info.img[0];
  this.inv_buttons[INV.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_GOLD], 3);
  this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.inv_buttons[INV.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_DIAMOND], 3);
  this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.inv_buttons[INV.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_GOLD], 3);
  this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.inv_buttons[INV.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_WOOD], 3);
  this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.inv_buttons[INV.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_DIAMOND], 3);
  this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.inv_buttons[INV.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIRE], 3);
  this.inv_buttons[INV.FIRE].id = INV.FIRE;
  this.inv_buttons[INV.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WORK], 3);
  this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.inv_buttons[INV.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SEED], 3);
  this.inv_buttons[INV.SEED].id = INV.SEED;
  this.inv_buttons[INV.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WALL], 3);
  this.inv_buttons[INV.WALL].id = INV.WALL;
  this.inv_buttons[INV.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPIKE], 3);
  this.inv_buttons[INV.SPIKE].id = INV.SPIKE;
  this.inv_buttons[INV.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_WOOD], 3);
  this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.inv_buttons[INV.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKED_MEAT], 3);
  this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.inv_buttons[INV.MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MEAT], 3);
  this.inv_buttons[INV.MEAT].id = INV.MEAT;
  this.inv_buttons[INV.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BIG_FIRE], 3);
  this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.inv_buttons[INV.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BANDAGE], 3);
  this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.inv_buttons[INV.CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CORD], 3);
  this.inv_buttons[INV.CORD].id = INV.CORD;
  this.inv_buttons[INV.CORD].info.img[2] = this.inv_buttons[INV.CORD].info.img[0];
  this.inv_buttons[INV.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_WALL], 3);
  this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.inv_buttons[INV.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_WALL], 3);
  this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.inv_buttons[INV.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_WALL], 3);
  this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.inv_buttons[INV.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_WOOD_CLOSE], 3);
  this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.inv_buttons[INV.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHEST], 3);
  this.inv_buttons[INV.CHEST].id = INV.CHEST;
  this.inv_buttons[INV.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SPIKE], 3);
  this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.inv_buttons[INV.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPIKE], 3);
  this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.inv_buttons[INV.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPIKE], 3);
  this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_STONE_CLOSE], 3);
  this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.inv_buttons[INV.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_GOLD_CLOSE], 3);
  this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.inv_buttons[INV.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE], 3);
  this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.inv_buttons[INV.FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR], 3);
  this.inv_buttons[INV.FUR].id = INV.FUR;
  this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0];
  this.inv_buttons[INV.FUR_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_BOAR], 3);
  this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.inv_buttons[INV.FUR_BOAR].info.img[2] = this.inv_buttons[INV.FUR_BOAR].info.img[0];
  this.inv_buttons[INV.FUR_WOLF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WOLF], 3);
  this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.inv_buttons[INV.FUR_WOLF].info.img[2] = this.inv_buttons[INV.FUR_WOLF].info.img[0];
  this.inv_buttons[INV.PENGUIN_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PENGUIN_FEATHER], 3);
  this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.inv_buttons[INV.HAWK_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK_FEATHER], 3);
  this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.inv_buttons[INV.VULTURE_FEATHER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_VULTURE_FEATHER], 3);
  this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.inv_buttons[INV.EMERALD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD], 3);
  this.inv_buttons[INV.EMERALD].id = INV.EMERALD;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EARMUFFS], 3);
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COAT], 3);
  this.inv_buttons[INV.COAT].id = INV.COAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPEAR], 3);
  this.inv_buttons[INV.SPEAR].id = INV.SPEAR;
  this.inv_buttons[INV.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SPEAR], 3);
  this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.inv_buttons[INV.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SPEAR], 3);
  this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FURNACE], 3);
  this.inv_buttons[INV.FURNACE].id = INV.FURNACE;
  this.inv_buttons[INV.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXPLORER_HAT], 3);
  this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.inv_buttons[INV.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_HAT], 3);
  this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.inv_buttons[INV.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOWER_HAT], 3);
  this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.inv_buttons[INV.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_HAT], 3);
  this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.inv_buttons[INV.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN1], 3);
  this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.inv_buttons[INV.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TURBAN2], 3);
  this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.inv_buttons[INV.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_BOW], 3);
  this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.inv_buttons[INV.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_ARROW], 3);
  this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.inv_buttons[INV.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SHIELD], 3);
  this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.inv_buttons[INV.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_BOW], 3);
  this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.inv_buttons[INV.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_ARROW], 3);
  this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.inv_buttons[INV.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_SHIELD], 3);
  this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.inv_buttons[INV.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_BOW], 3);
  this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.inv_buttons[INV.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_ARROW], 3);
  this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.inv_buttons[INV.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_SHIELD], 3);
  this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.inv_buttons[INV.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_BOW], 3);
  this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.inv_buttons[INV.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_ARROW], 3);
  this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.inv_buttons[INV.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_SHIELD], 3);
  this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.inv_buttons[INV.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_BOW], 3);
  this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.inv_buttons[INV.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_ARROW], 3);
  this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.inv_buttons[INV.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SHIELD], 3);
  this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.inv_buttons[INV.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_BOW], 3);
  this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.inv_buttons[INV.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_ARROW], 3);
  this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.inv_buttons[INV.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SHIELD], 3);
  this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.inv_buttons[INV.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_BOW], 3);
  this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.inv_buttons[INV.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ARROW], 3);
  this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.inv_buttons[INV.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_HELMET], 3);
  this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.inv_buttons[INV.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_HELMET], 3);
  this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.inv_buttons[INV.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_HELMET], 3);
  this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.inv_buttons[INV.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_HELMET], 3);
  this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.inv_buttons[INV.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOOK], 3);
  this.inv_buttons[INV.BOOK].id = INV.BOOK;
  this.inv_buttons[INV.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PAPER], 3);
  this.inv_buttons[INV.PAPER].id = INV.PAPER;
  this.inv_buttons[INV.PAPER].info.img[2] = this.inv_buttons[INV.PAPER].info.img[0];
  this.inv_buttons[INV.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BAG], 3);
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST], 3);
  this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.inv_buttons[INV.AMETHYST].info.img[2] = this.inv_buttons[INV.AMETHYST].info.img[0];
  this.inv_buttons[INV.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SWORD_AMETHYST], 3);
  this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.inv_buttons[INV.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PIRATE_SWORD], 3);
  this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.inv_buttons[INV.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_AMETHYST], 3);
  this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.inv_buttons[INV.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PICK_REIDITE], 3);
  this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.inv_buttons[INV.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPEAR], 3);
  this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.inv_buttons[INV.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER], 3);
  this.inv_buttons[INV.HAMMER].id = INV.HAMMER;
  this.inv_buttons[INV.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_GOLD], 3);
  this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.inv_buttons[INV.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_DIAMOND], 3);
  this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.inv_buttons[INV.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_AMETHYST], 3);
  this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.inv_buttons[INV.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAMMER_REIDITE], 3);
  this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.inv_buttons[INV.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_WALL], 3);
  this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.inv_buttons[INV.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_SPIKE], 3);
  this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE], 3);
  this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.inv_buttons[INV.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAP_SCARF], 3);
  this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.inv_buttons[INV.FUR_WINTER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_WINTER], 3);
  this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.inv_buttons[INV.FUR_WINTER].info.img[2] = this.inv_buttons[INV.FUR_WINTER].info.img[0];
  this.inv_buttons[INV.FUR_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FUR_MAMMOTH], 3);
  this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] = this.inv_buttons[INV.FUR_MAMMOTH].info.img[0];
  this.inv_buttons[INV.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BLUE_CORD], 3);
  this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.inv_buttons[INV.BLUE_CORD].info.img[2] = this.inv_buttons[INV.BLUE_CORD].info.img[0];
  this.inv_buttons[INV.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCK], 3);
  this.inv_buttons[INV.LOCK].id = INV.LOCK;
  this.inv_buttons[INV.LOCK].info.img[2] = this.inv_buttons[INV.LOCK].info.img[0];
  this.inv_buttons[INV.DRAGON_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HEART], 3);
  this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_RESURRECTION], 3);
  this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.inv_buttons[INV.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LOCKPICK], 3);
  this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.inv_buttons[INV.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOTEM], 3);
  this.inv_buttons[INV.TOTEM].id = INV.TOTEM;
  this.inv_buttons[INV.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_HELMET], 3);
  this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.inv_buttons[INV.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_HAMMER], 3);
  this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.inv_buttons[INV.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BRIDGE], 3);
  this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.inv_buttons[INV.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_TOWER], 3);
  this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.inv_buttons[INV.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOAT], 3);
  this.inv_buttons[INV.BOAT].id = INV.BOAT;
  this.inv_buttons[INV.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SLED], 3);
  this.inv_buttons[INV.SLED].id = INV.SLED;
  this.inv_buttons[INV.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLANE], 3);
  this.inv_buttons[INV.PLANE].id = INV.PLANE;
  this.inv_buttons[INV.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SADDLE], 3);
  this.inv_buttons[INV.SADDLE].id = INV.SADDLE;
  this.inv_buttons[INV.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MOUNT_BOAR], 3);
  this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.inv_buttons[INV.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_BOSS], 3);
  this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.inv_buttons[INV.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_DRAGON], 3);
  this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.inv_buttons[INV.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_MAMMOTH], 3);
  this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.inv_buttons[INV.BABY_LAVA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BABY_LAVA], 3);
  this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.inv_buttons[INV.HAWK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HAWK], 3);
  this.inv_buttons[INV.HAWK].id = INV.HAWK;
  this.inv_buttons[INV.SAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SAND], 3);
  this.inv_buttons[INV.SAND].id = INV.SAND;
  this.inv_buttons[INV.SAND].info.img[2] = this.inv_buttons[INV.SAND].info.img[0];
  this.inv_buttons[INV.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_FULL], 3);
  this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.inv_buttons[INV.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BOTTLE_EMPTY], 3);
  this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.inv_buttons[INV.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL], 3);
  this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.inv_buttons[INV.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_GOLD], 3);
  this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.inv_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_DIAMOND], 3);
  this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.inv_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SHOVEL_AMETHYST], 3);
  this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.inv_buttons[INV.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPANNER], 3);
  this.inv_buttons[INV.SPANNER].id = INV.SPANNER;
  this.inv_buttons[INV.KRAKEN_SKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_KRAKEN_SKIN], 3);
  this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] = this.inv_buttons[INV.KRAKEN_SKIN].info.img[0];
  this.inv_buttons[INV.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN], 3);
  this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.inv_buttons[INV.FLOUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLOUR], 3);
  this.inv_buttons[INV.FLOUR].id = INV.FLOUR;
  this.inv_buttons[INV.FLOUR].info.img[2] = this.inv_buttons[INV.FLOUR].info.img[0];
  this.inv_buttons[INV.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WHEAT_SEED], 3);
  this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.inv_buttons[INV.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_COOKIE], 3);
  this.inv_buttons[INV.COOKIE].id = INV.COOKIE;
  this.inv_buttons[INV.WILD_WHEAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WILD_WHEAT], 3);
  this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.inv_buttons[INV.WILD_WHEAT].info.img[2] = this.inv_buttons[INV.WILD_WHEAT].info.img[0];
  this.inv_buttons[INV.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINDMILL], 3);
  this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.inv_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUPER_DIVING_SUIT], 3);
  this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.inv_buttons[INV.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIVING_MASK], 3);
  this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.inv_buttons[INV.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERING_CAN_FULL], 3);
  this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.inv_buttons[INV.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CAKE], 3);
  this.inv_buttons[INV.CAKE].id = INV.CAKE;
  this.inv_buttons[INV.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD], 3);
  this.inv_buttons[INV.BREAD].id = INV.BREAD;
  this.inv_buttons[INV.FOODFISH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH], 3);
  this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.inv_buttons[INV.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FOODFISH_COOKED], 3);
  this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.inv_buttons[INV.SCALES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SCALES], 3);
  this.inv_buttons[INV.SCALES].id = INV.SCALES;
  this.inv_buttons[INV.SCALES].info.img[2] = this.inv_buttons[INV.SCALES].info.img[0];
  this.inv_buttons[INV.GROUND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GROUND], 3);
  this.inv_buttons[INV.GROUND].id = INV.GROUND;
  this.inv_buttons[INV.GROUND].info.img[2] = this.inv_buttons[INV.GROUND].info.img[0];
  this.inv_buttons[INV.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PLOT], 3);
  this.inv_buttons[INV.PLOT].id = INV.PLOT;
  this.inv_buttons[INV.ICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ICE], 3);
  this.inv_buttons[INV.ICE].id = INV.ICE;
  this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0];
  this.inv_buttons[INV.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BREAD_OVEN], 3);
  this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.inv_buttons[INV.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWICH], 3);
  this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.inv_buttons[INV.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_HELMET], 3);
  this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.inv_buttons[INV.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
  this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.inv_buttons[INV.DRAGON_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_ORB], 3);
  this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.inv_buttons[INV.DRAGON_ORB].info.img[2] = this.inv_buttons[INV.DRAGON_ORB].info.img[0];
  this.inv_buttons[INV.DRAGON_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_CUBE], 3);
  this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.inv_buttons[INV.DRAGON_CUBE].info.img[2] = this.inv_buttons[INV.DRAGON_CUBE].info.img[0];
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB].info.img[2] = this.inv_buttons[INV.LAVA_ORB].info.img[0];
  this.inv_buttons[INV.LAVA_CUBE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_CUBE], 3);
  this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.inv_buttons[INV.LAVA_CUBE].info.img[2] = this.inv_buttons[INV.LAVA_CUBE].info.img[0];
  this.inv_buttons[INV.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_GREEN], 3);
  this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.inv_buttons[INV.GEMME_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_GREEN], 3);
  this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.inv_buttons[INV.GEMME_GREEN].info.img[2] = this.inv_buttons[INV.GEMME_GREEN].info.img[0];
  this.inv_buttons[INV.GEMME_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_ORANGE], 3);
  this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.inv_buttons[INV.GEMME_ORANGE].info.img[2] = this.inv_buttons[INV.GEMME_ORANGE].info.img[0];
  this.inv_buttons[INV.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_ORANGE], 3);
  this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.inv_buttons[INV.GEMME_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GEMME_BLUE], 3);
  this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.inv_buttons[INV.GEMME_BLUE].info.img[2] = this.inv_buttons[INV.GEMME_BLUE].info.img[0];
  this.inv_buttons[INV.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_BLUE], 3);
  this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.inv_buttons[INV.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_HOOD], 3);
  this.inv_buttons[INV.HOOD].id = INV.HOOD;
  this.inv_buttons[INV.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PEASANT], 3);
  this.inv_buttons[INV.PEASANT].id = INV.PEASANT;
  this.inv_buttons[INV.SPECIAL_FUR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR], 3);
  this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.inv_buttons[INV.SPECIAL_FUR_2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SPECIAL_FUR_2], 3);
  this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.inv_buttons[INV.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_PEASANT], 3);
  this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.inv_buttons[INV.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WINTER_HOOD], 3);
  this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.inv_buttons[INV.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_FULL], 3);
  this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.inv_buttons[INV.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BUCKET_EMPTY], 3);
  this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.inv_buttons[INV.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WELL], 3);
  this.inv_buttons[INV.WELL].id = INV.WELL;
  this.inv_buttons[INV.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SIGN], 3);
  this.inv_buttons[INV.SIGN].id = INV.SIGN;
  this.inv_buttons[INV.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN_SEED], 3);
  this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.inv_buttons[INV.PUMPKIN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PUMPKIN], 3);
  this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.inv_buttons[INV.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC_SEED], 3);
  this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.inv_buttons[INV.GARLIC] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLIC], 3);
  this.inv_buttons[INV.GARLIC].id = INV.GARLIC;
  this.inv_buttons[INV.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ROOF], 3);
  this.inv_buttons[INV.ROOF].id = INV.ROOF;
  this.inv_buttons[INV.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH_SEED], 3);
  this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.inv_buttons[INV.THORNBUSH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_THORNBUSH], 3);
  this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.inv_buttons[INV.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT_SEED], 3);
  this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.inv_buttons[INV.CARROT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CARROT], 3);
  this.inv_buttons[INV.CARROT].id = INV.CARROT;
  this.inv_buttons[INV.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO_SEED], 3);
  this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.inv_buttons[INV.TOMATO] = gui_create_button(60, 60, "", sprite[SPRITE.INV_TOMATO], 3);
  this.inv_buttons[INV.TOMATO].id = INV.TOMATO;
  this.inv_buttons[INV.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON_SEED], 3);
  this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.inv_buttons[INV.WATERMELON] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WATERMELON], 3);
  this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.inv_buttons[INV.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA_SEED], 3);
  this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.inv_buttons[INV.ALOE_VERA] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ALOE_VERA], 3);
  this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.inv_buttons[INV.CHRISTMAS_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CHRISTMAS_HAT], 3);
  this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.inv_buttons[INV.ELF_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_ELF_HAT], 3);
  this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_SPEAR], 3);
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SPEAR], 3);
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.CRAB_STICK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_STICK], 3);
  this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.inv_buttons[INV.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_SPEAR], 3);
  this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.inv_buttons[INV.CRAB_LOOT] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CRAB_LOOT], 3);
  this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.inv_buttons[INV.BED] = gui_create_button(60, 60, "", sprite[SPRITE.INV_BED], 3);
  this.inv_buttons[INV.BED].id = INV.BED;
  this.inv_buttons[INV.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CROWN_CRAB], 3);
  this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.inv_buttons[INV.GARLAND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GARLAND], 3);
  this.inv_buttons[INV.GARLAND].id = INV.GARLAND;
  this.inv_buttons[INV.CANDY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_CANDY], 3);
  this.inv_buttons[INV.CANDY].id = INV.CANDY;
  this.inv_buttons[INV.SUGAR_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SUGAR_CAN], 3);
  this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.craft_buttons = [];
  this.craft_buttons[CRAFT.SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD], 3);
  this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD;
  this.craft_buttons[CRAFT.PICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK], 3);
  this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK;
  this.craft_buttons[CRAFT.FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIRE], 3);
  this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE;
  this.craft_buttons[CRAFT.WORKBENCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WORK], 3);
  this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH;
  this.craft_buttons[CRAFT.WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WALL], 3);
  this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL;
  this.craft_buttons[CRAFT.SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPIKE], 3);
  this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE;
  this.craft_buttons[CRAFT.SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SEED], 3);
  this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED;
  this.craft_buttons[CRAFT.PICK_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_GOLD], 3);
  this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD;
  this.craft_buttons[CRAFT.PICK_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_DIAMOND], 3);
  this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND;
  this.craft_buttons[CRAFT.SWORD_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_GOLD], 3);
  this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD;
  this.craft_buttons[CRAFT.SWORD_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_WOOD], 3);
  this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD;
  this.craft_buttons[CRAFT.SWORD_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_DIAMOND], 3);
  this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND;
  this.craft_buttons[CRAFT.PICK_WOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_WOOD], 3);
  this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD;
  this.craft_buttons[CRAFT.COOKED_MEAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKED_MEAT], 3);
  this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT;
  this.craft_buttons[CRAFT.BIG_FIRE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BIG_FIRE], 3);
  this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE;
  this.craft_buttons[CRAFT.BANDAGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BANDAGE], 3);
  this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE;
  this.craft_buttons[CRAFT.STONE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_WALL], 3);
  this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL;
  this.craft_buttons[CRAFT.GOLD_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_WALL], 3);
  this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL;
  this.craft_buttons[CRAFT.DIAMOND_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_WALL], 3);
  this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL;
  this.craft_buttons[CRAFT.WOOD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE], 3);
  this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR;
  this.craft_buttons[CRAFT.CHEST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CHEST], 3);
  this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST;
  this.craft_buttons[CRAFT.STONE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SPIKE], 3);
  this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE;
  this.craft_buttons[CRAFT.GOLD_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPIKE], 3);
  this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPIKE], 3);
  this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.STONE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE], 3);
  this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR;
  this.craft_buttons[CRAFT.GOLD_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE], 3);
  this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR;
  this.craft_buttons[CRAFT.DIAMOND_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE], 3);
  this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EARMUFFS], 3);
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.COAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COAT], 3);
  this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPEAR], 3);
  this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR;
  this.craft_buttons[CRAFT.GOLD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SPEAR], 3);
  this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR;
  this.craft_buttons[CRAFT.DIAMOND_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SPEAR], 3);
  this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.FURNACE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FURNACE], 3);
  this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE;
  this.craft_buttons[CRAFT.EXPLORER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXPLORER_HAT], 3);
  this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT;
  this.craft_buttons[CRAFT.PIRATE_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_HAT], 3);
  this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT;
  this.craft_buttons[CRAFT.FLOWER_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FLOWER_HAT], 3);
  this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT;
  this.craft_buttons[CRAFT.FUR_HAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FUR_HAT], 3);
  this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT;
  this.craft_buttons[CRAFT.TURBAN1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN1], 3);
  this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1;
  this.craft_buttons[CRAFT.TURBAN2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TURBAN2], 3);
  this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2;
  this.craft_buttons[CRAFT.WOOD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_BOW], 3);
  this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW;
  this.craft_buttons[CRAFT.WOOD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_ARROW], 3);
  this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW;
  this.craft_buttons[CRAFT.WOOD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SHIELD], 3);
  this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD;
  this.craft_buttons[CRAFT.STONE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_BOW], 3);
  this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW;
  this.craft_buttons[CRAFT.STONE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_ARROW], 3);
  this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW;
  this.craft_buttons[CRAFT.STONE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_SHIELD], 3);
  this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD;
  this.craft_buttons[CRAFT.GOLD_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_BOW], 3);
  this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW;
  this.craft_buttons[CRAFT.GOLD_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_ARROW], 3);
  this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW;
  this.craft_buttons[CRAFT.GOLD_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_SHIELD], 3);
  this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD;
  this.craft_buttons[CRAFT.DIAMOND_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_BOW], 3);
  this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW;
  this.craft_buttons[CRAFT.DIAMOND_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_ARROW], 3);
  this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW;
  this.craft_buttons[CRAFT.DIAMOND_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_SHIELD], 3);
  this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD;
  this.craft_buttons[CRAFT.AMETHYST_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_BOW], 3);
  this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW;
  this.craft_buttons[CRAFT.AMETHYST_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_ARROW], 3);
  this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW;
  this.craft_buttons[CRAFT.AMETHYST_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SHIELD], 3);
  this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD;
  this.craft_buttons[CRAFT.REIDITE_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_BOW], 3);
  this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW;
  this.craft_buttons[CRAFT.REIDITE_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_ARROW], 3);
  this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW;
  this.craft_buttons[CRAFT.REIDITE_SHIELD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SHIELD], 3);
  this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD;
  this.craft_buttons[CRAFT.DRAGON_BOW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_BOW], 3);
  this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW;
  this.craft_buttons[CRAFT.DRAGON_ARROW] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_ARROW], 3);
  this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW;
  this.craft_buttons[CRAFT.WOOD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_HELMET], 3);
  this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET;
  this.craft_buttons[CRAFT.STONE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_HELMET], 3);
  this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET;
  this.craft_buttons[CRAFT.GOLD_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_HELMET], 3);
  this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET;
  this.craft_buttons[CRAFT.DIAMOND_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_HELMET], 3);
  this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET;
  this.craft_buttons[CRAFT.BOOK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOOK], 3);
  this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK;
  this.craft_buttons[CRAFT.PAPER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PAPER], 3);
  this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BAG], 3);
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.SWORD_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SWORD_AMETHYST], 3);
  this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST;
  this.craft_buttons[CRAFT.PIRATE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PIRATE_SWORD], 3);
  this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD;
  this.craft_buttons[CRAFT.PICK_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_AMETHYST], 3);
  this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST;
  this.craft_buttons[CRAFT.PICK_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PICK_REIDITE], 3);
  this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPEAR], 3);
  this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR;
  this.craft_buttons[CRAFT.HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER], 3);
  this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER;
  this.craft_buttons[CRAFT.HAMMER_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_GOLD], 3);
  this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD;
  this.craft_buttons[CRAFT.HAMMER_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_DIAMOND], 3);
  this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND;
  this.craft_buttons[CRAFT.HAMMER_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_AMETHYST], 3);
  this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST;
  this.craft_buttons[CRAFT.HAMMER_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HAMMER_REIDITE], 3);
  this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_WALL], 3);
  this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL;
  this.craft_buttons[CRAFT.AMETHYST_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_SPIKE], 3);
  this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE], 3);
  this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR;
  this.craft_buttons[CRAFT.CAP_SCARF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAP_SCARF], 3);
  this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF;
  this.craft_buttons[CRAFT.BLUE_CORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BLUE_CORD], 3);
  this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD;
  this.craft_buttons[CRAFT.LOCK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCK], 3);
  this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK;
  this.craft_buttons[CRAFT.RESURRECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_RESURRECTION], 3);
  this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION;
  this.craft_buttons[CRAFT.LOCKPICK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LOCKPICK], 3);
  this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK;
  this.craft_buttons[CRAFT.TOTEM] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOTEM], 3);
  this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM;
  this.craft_buttons[CRAFT.AMETHYST_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_HELMET], 3);
  this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET;
  this.craft_buttons[CRAFT.SUPER_HAMMER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_HAMMER], 3);
  this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER;
  this.craft_buttons[CRAFT.BRIDGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BRIDGE], 3);
  this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE;
  this.craft_buttons[CRAFT.WOOD_TOWER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_TOWER], 3);
  this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER;
  this.craft_buttons[CRAFT.BOAT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOAT], 3);
  this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT;
  this.craft_buttons[CRAFT.SLED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SLED], 3);
  this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED;
  this.craft_buttons[CRAFT.PLANE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLANE], 3);
  this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE;
  this.craft_buttons[CRAFT.SADDLE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SADDLE], 3);
  this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE;
  this.craft_buttons[CRAFT.MOUNT_BOAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MOUNT_BOAR], 3);
  this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR;
  this.craft_buttons[CRAFT.BABY_DRAGON] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_DRAGON], 3);
  this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON;
  this.craft_buttons[CRAFT.BABY_MAMMOTH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BABY_MAMMOTH], 3);
  this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH;
  this.craft_buttons[CRAFT.CRAB_BOSS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_BOSS], 3);
  this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS;
  this.craft_buttons[CRAFT.BOTTLE_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_EMPTY], 3);
  this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY;
  this.craft_buttons[CRAFT.BOTTLE_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL;
  this.craft_buttons[CRAFT.BOTTLE_FULL_2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2;
  this.craft_buttons[CRAFT.BOTTLE_FULL_3] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BOTTLE_FULL], 3);
  this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3;
  this.craft_buttons[CRAFT.SHOVEL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL], 3);
  this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL;
  this.craft_buttons[CRAFT.SHOVEL_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_GOLD], 3);
  this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD;
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_DIAMOND], 3);
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND;
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SHOVEL_AMETHYST], 3);
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST;
  this.craft_buttons[CRAFT.SPANNER] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SPANNER], 3);
  this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER;
  this.craft_buttons[CRAFT.WATERING_CAN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN], 3);
  this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN;
  this.craft_buttons[CRAFT.WHEAT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WHEAT_SEED], 3);
  this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED;
  this.craft_buttons[CRAFT.COOKIE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_COOKIE], 3);
  this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE;
  this.craft_buttons[CRAFT.WINDMILL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINDMILL], 3);
  this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL;
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT], 3);
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT;
  this.craft_buttons[CRAFT.DIVING_MASK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIVING_MASK], 3);
  this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK;
  this.craft_buttons[CRAFT.WATERING_CAN_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERING_CAN_FULL], 3);
  this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL;
  this.craft_buttons[CRAFT.CAKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CAKE], 3);
  this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE;
  this.craft_buttons[CRAFT.BREAD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD], 3);
  this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD;
  this.craft_buttons[CRAFT.FOODFISH_COOKED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FOODFISH_COOKED], 3);
  this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED;
  this.craft_buttons[CRAFT.PLOT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PLOT], 3);
  this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT;
  this.craft_buttons[CRAFT.BREAD_OVEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BREAD_OVEN], 3);
  this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN;
  this.craft_buttons[CRAFT.SANDWICH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SANDWICH], 3);
  this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH;
  this.craft_buttons[CRAFT.DRAGON_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_HELMET], 3);
  this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET;
  this.craft_buttons[CRAFT.DRAGON_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DRAGON_SWORD], 3);
  this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD;
  this.craft_buttons[CRAFT.CROWN_GREEN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_GREEN], 3);
  this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN;
  this.craft_buttons[CRAFT.CROWN_ORANGE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_ORANGE], 3);
  this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE;
  this.craft_buttons[CRAFT.CROWN_BLUE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_BLUE], 3);
  this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE;
  this.craft_buttons[CRAFT.HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_HOOD], 3);
  this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD;
  this.craft_buttons[CRAFT.PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PEASANT], 3);
  this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT;
  this.craft_buttons[CRAFT.WINTER_PEASANT] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_PEASANT], 3);
  this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT;
  this.craft_buttons[CRAFT.WINTER_HOOD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WINTER_HOOD], 3);
  this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD;
  this.craft_buttons[CRAFT.BUCKET_FULL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_FULL], 3);
  this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL;
  this.craft_buttons[CRAFT.BUCKET_EMPTY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BUCKET_EMPTY], 3);
  this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY;
  this.craft_buttons[CRAFT.WELL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WELL], 3);
  this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL;
  this.craft_buttons[CRAFT.SIGN] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_SIGN], 3);
  this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN;
  this.craft_buttons[CRAFT.PUMPKIN_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PUMPKIN_SEED], 3);
  this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED;
  this.craft_buttons[CRAFT.GARLIC_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GARLIC_SEED], 3);
  this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED;
  this.craft_buttons[CRAFT.ROOF] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ROOF], 3);
  this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF;
  this.craft_buttons[CRAFT.THORNBUSH_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_THORNBUSH_SEED], 3);
  this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED;
  this.craft_buttons[CRAFT.TOMATO_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_TOMATO_SEED], 3);
  this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED;
  this.craft_buttons[CRAFT.CARROT_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CARROT_SEED], 3);
  this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED;
  this.craft_buttons[CRAFT.WATERMELON_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WATERMELON_SEED], 3);
  this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED;
  this.craft_buttons[CRAFT.ALOE_VERA_SEED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_ALOE_VERA_SEED], 3);
  this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_SPEAR], 3);
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DRAGON_SPEAR], 3);
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.CRAB_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CRAB_SPEAR], 3);
  this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR;
  this.craft_buttons[CRAFT.BED] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_BED], 3);
  this.craft_buttons[CRAFT.BED].id = CRAFT.BED;
  this.craft_buttons[CRAFT.CROWN_CRAB] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_CROWN_CRAB], 3);
  this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB;
  this.chest_buttons[INV.PITCHFORK] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK], 3);
  this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.inv_buttons[INV.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK], 3);
  this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.craft_buttons[CRAFT.PITCHFORK] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK], 3);
  this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK;
  this.chest_buttons[INV.PITCHFORK2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK2], 3);
  this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.inv_buttons[INV.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK2], 3);
  this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.craft_buttons[CRAFT.PITCHFORK2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PITCHFORK2], 3);
  this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2;
  this.chest_buttons[INV.MACHETE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_MACHETE], 3);
  this.chest_buttons[INV.MACHETE].id = INV.MACHETE;
  this.inv_buttons[INV.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_MACHETE], 3);
  this.inv_buttons[INV.MACHETE].id = INV.MACHETE;
  this.craft_buttons[CRAFT.MACHETE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_MACHETE], 3);
  this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE;
  this.chest_buttons[INV.PILOT_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_HELMET], 3);
  this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.inv_buttons[INV.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_HELMET], 3);
  this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.craft_buttons[CRAFT.PILOT_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_PILOT_HELMET], 3);
  this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET;
  this.chest_buttons[INV.PITCHFORK_PART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PITCHFORK_PART], 3);
  this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.inv_buttons[INV.PITCHFORK_PART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PITCHFORK_PART], 3);
  this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.chest_buttons[INV.SANDWORM_JUICE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_SANDWORM_JUICE], 3);
  this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.inv_buttons[INV.SANDWORM_JUICE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_SANDWORM_JUICE], 3);
  this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.chest_buttons[INV.PILOT_GLASSES] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_PILOT_GLASSES], 3);
  this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.inv_buttons[INV.PILOT_GLASSES] = gui_create_button(60, 60, "", sprite[SPRITE.INV_PILOT_GLASSES], 3);
  this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.chest_buttons[INV.EMERALD_MACHINE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EMERALD_MACHINE], 3);
  this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.inv_buttons[INV.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EMERALD_MACHINE], 3);
  this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.craft_buttons[CRAFT.EMERALD_MACHINE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EMERALD_MACHINE], 3);
  this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE;
  this.chest_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE], 3);
  this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.inv_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WOOD_DOOR_SPIKE], 3);
  this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE;
  this.chest_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_STONE_DOOR_SPIKE], 3);
  this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.inv_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_STONE_DOOR_SPIKE], 3);
  this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE;
  this.chest_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE], 3);
  this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.inv_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_GOLD_DOOR_SPIKE], 3);
  this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE;
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE], 3);
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE], 3);
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE], 3);
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE], 3);
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE], 3);
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR_SPIKE], 3);
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE], 3);
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_WALL] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_WALL], 3);
  this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.inv_buttons[INV.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_WALL], 3);
  this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.craft_buttons[CRAFT.REIDITE_WALL] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_WALL], 3);
  this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL;
  this.chest_buttons[INV.REIDITE_SPIKE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPIKE], 3);
  this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.inv_buttons[INV.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPIKE], 3);
  this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_SPIKE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPIKE], 3);
  this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_DOOR], 3);
  this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.inv_buttons[INV.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_DOOR], 3);
  this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.craft_buttons[CRAFT.REIDITE_DOOR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_DOOR], 3);
  this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id = INV.EXTRACTOR_MACHINE_STONE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id = CRAFT.EXTRACTOR_MACHINE_STONE;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id = CRAFT.EXTRACTOR_MACHINE_GOLD;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id = INV.EXTRACTOR_MACHINE_DIAMOND;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id = CRAFT.EXTRACTOR_MACHINE_DIAMOND;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id = INV.EXTRACTOR_MACHINE_AMETHYST;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id = CRAFT.EXTRACTOR_MACHINE_AMETHYST;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE], 3);
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE], 3);
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id = INV.EXTRACTOR_MACHINE_REIDITE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE], 3);
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id = CRAFT.EXTRACTOR_MACHINE_REIDITE;
  this.chest_buttons[INV.FLAME] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FLAME], 3);
  this.chest_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FLAME], 3);
  this.inv_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME].info.img[2] = this.inv_buttons[INV.FLAME].info.img[0];
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HEART], 3);
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HEART], 3);
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART].info.img[2] = this.inv_buttons[INV.LAVA_HEART].info.img[0];
  this.chest_buttons[INV.REIDITE] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE], 3);
  this.chest_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE], 3);
  this.inv_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE].info.img[2] = this.inv_buttons[INV.REIDITE].info.img[0];
  this.chest_buttons[INV.REIDITE_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SWORD], 3);
  this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.inv_buttons[INV.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SWORD], 3);
  this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.craft_buttons[CRAFT.REIDITE_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SWORD], 3);
  this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD;
  this.chest_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_DIAMOND_PROTECTION], 3);
  this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.inv_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_DIAMOND_PROTECTION], 3);
  this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_DIAMOND_PROTECTION], 3);
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION;
  this.chest_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_AMETHYST_PROTECTION], 3);
  this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.inv_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_AMETHYST_PROTECTION], 3);
  this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_AMETHYST_PROTECTION], 3);
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION;
  this.chest_buttons[INV.REIDITE_PROTECTION] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_PROTECTION], 3);
  this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.inv_buttons[INV.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_PROTECTION], 3);
  this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.craft_buttons[CRAFT.REIDITE_PROTECTION] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_PROTECTION], 3);
  this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION;
  this.chest_buttons[INV.LAVA_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_HELMET], 3);
  this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.inv_buttons[INV.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_HELMET], 3);
  this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.craft_buttons[CRAFT.LAVA_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_HELMET], 3);
  this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET;
  this.chest_buttons[INV.WITCH] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WITCH], 3);
  this.chest_buttons[INV.WITCH].id = INV.WITCH;
  this.inv_buttons[INV.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WITCH], 3);
  this.inv_buttons[INV.WITCH].id = INV.WITCH;
  this.craft_buttons[CRAFT.WITCH] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WITCH], 3);
  this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH;
  this.chest_buttons[INV.WAND1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND1], 3);
  this.chest_buttons[INV.WAND1].id = INV.WAND1;
  this.inv_buttons[INV.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND1], 3);
  this.inv_buttons[INV.WAND1].id = INV.WAND1;
  this.craft_buttons[CRAFT.WAND1] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND1], 3);
  this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1;
  this.chest_buttons[INV.WAND2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_WAND2], 3);
  this.chest_buttons[INV.WAND2].id = INV.WAND2;
  this.inv_buttons[INV.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_WAND2], 3);
  this.inv_buttons[INV.WAND2].id = INV.WAND2;
  this.craft_buttons[CRAFT.WAND2] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_WAND2], 3);
  this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2;
  this.chest_buttons[INV.NIMBUS] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_NIMBUS], 3);
  this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.inv_buttons[INV.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.INV_NIMBUS], 3);
  this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.craft_buttons[CRAFT.NIMBUS] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_NIMBUS], 3);
  this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS;
  this.chest_buttons[INV.FIREFLY] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_FIREFLY], 3);
  this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.inv_buttons[INV.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.INV_FIREFLY], 3);
  this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.craft_buttons[CRAFT.FIREFLY] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_FIREFLY], 3);
  this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY;
  this.chest_buttons[INV.REIDITE_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_SPEAR], 3);
  this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.inv_buttons[INV.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_SPEAR], 3);
  this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.craft_buttons[CRAFT.REIDITE_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_SPEAR], 3);
  this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR;
  this.chest_buttons[INV.REIDITE_HELMET] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_REIDITE_HELMET], 3);
  this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.inv_buttons[INV.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.INV_REIDITE_HELMET], 3);
  this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.craft_buttons[CRAFT.REIDITE_HELMET] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_REIDITE_HELMET], 3);
  this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET;
  this.chest_buttons[INV.LAVA_SPEAR] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SPEAR], 3);
  this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SPEAR], 3);
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.craft_buttons[CRAFT.LAVA_SPEAR] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SPEAR], 3);
  this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR;
  this.chest_buttons[INV.LAVA_SWORD] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_SWORD], 3);
  this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_SWORD], 3);
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.craft_buttons[CRAFT.LAVA_SWORD] = gui_create_button(60, 60, "", sprite[SPRITE.CRAFT_LAVA_SWORD], 3);
  this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_LAVA_ORB], 3);
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(60, 60, "", sprite[SPRITE.INV_LAVA_ORB], 3);
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.EGG0] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG0], 3);
  this.chest_buttons[INV.EGG0].id = INV.EGG0;
  this.inv_buttons[INV.EGG0] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG0], 3);
  this.inv_buttons[INV.EGG0].id = INV.EGG0;
  this.chest_buttons[INV.EGG1] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG1], 3);
  this.chest_buttons[INV.EGG1].id = INV.EGG1;
  this.inv_buttons[INV.EGG1] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG1], 3);
  this.inv_buttons[INV.EGG1].id = INV.EGG1;
  this.chest_buttons[INV.EGG2] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG2], 3);
  this.chest_buttons[INV.EGG2].id = INV.EGG2;
  this.inv_buttons[INV.EGG2] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG2], 3);
  this.inv_buttons[INV.EGG2].id = INV.EGG2;
  this.chest_buttons[INV.EGG3] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG3], 3);
  this.chest_buttons[INV.EGG3].id = INV.EGG3;
  this.inv_buttons[INV.EGG3] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG3], 3);
  this.inv_buttons[INV.EGG3].id = INV.EGG3;
  this.chest_buttons[INV.EGG4] = gui_create_button(68, 68, "", sprite[SPRITE.CHEST_EGG4], 3);
  this.chest_buttons[INV.EGG4].id = INV.EGG4;
  this.inv_buttons[INV.EGG4] = gui_create_button(60, 60, "", sprite[SPRITE.INV_EGG4], 3);
  this.inv_buttons[INV.EGG4].id = INV.EGG4;
  this.update_craft_buttons = function () {
    var _0x547e58 = user.craft.can_craft;
    var _0x974e42 = 10;
    var _0x5a9cc0 = 10;
    for (var _0x6ab4f9 = 0; _0x6ab4f9 < _0x547e58.length; _0x6ab4f9++) {
      if (_0x6ab4f9 > 0 && !(_0x6ab4f9 % 4)) {
        _0x974e42 += _0x547e58[0].info.width + 10;
        _0x5a9cc0 = 10;
      }
      _0x547e58[_0x6ab4f9].info.translate.x = _0x974e42;
      _0x547e58[_0x6ab4f9].info.translate.y = _0x5a9cc0;
      _0x5a9cc0 += 10 + _0x547e58[_0x6ab4f9].info.height;
    }
  };
  this.update_chest_buttons = function () {
    var _0x42a4f6 = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.chest_buttons[0].info.img[0].width) + 35);
    for (var _0x3fdb4d = 0; _0x3fdb4d < this.chest_buttons.length; _0x3fdb4d++) {
      if (!this.chest_buttons[_0x3fdb4d]) {
        continue;
      }
      this.chest_buttons[_0x3fdb4d].info.translate.x = _0x42a4f6;
      this.chest_buttons[_0x3fdb4d].info.translate.y = 22;
    }
    this.chest_lockpick.info.translate.x = _0x42a4f6 + 17;
    this.chest_lockpick.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
    this.chest_locked.info.translate.x = _0x42a4f6 + 17;
    this.chest_locked.info.translate.y = 30;
    this.chest_padlock.info.translate.x = _0x42a4f6 + 17;
    this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
  };
  this.update_team_buttons = function () {
    var _0x410c75 = Math.floor((canw - sprite[SPRITE.TEAM_BUTTON][0].width) / 2);
    for (var _0x2b46a = 0; _0x2b46a < this.team_buttons.length; _0x2b46a++) {
      this.team_buttons[_0x2b46a].button.info.translate.x = _0x410c75;
      this.team_buttons[_0x2b46a].button.info.translate.y = -13;
    }
  };
  this.update_bread_oven_button = function () {
    var _0xffc42a = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.bread_oven_wood_button.info.img[0].width) + 35);
    this.bread_oven_wood_button.info.translate.x = _0xffc42a;
    this.bread_oven_wood_button.info.translate.y = 33;
    this.bread_oven_flour_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_flour_button.info.translate.y = 137;
    this.bread_oven_bread_button.info.translate.x = this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_bread_button.info.translate.y = 240;
  };
  this.update_extractor_button = function () {
    var _0x568221 = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.extractor_wood_button.info.img[0].width) + 35);
    this.extractor_wood_button.info.translate.x = _0x568221;
    this.extractor_wood_button.info.translate.y = 36;
    _0x568221 += 83;
    this.extractor_stone_button.info.translate.x = _0x568221;
    this.extractor_stone_button.info.translate.y = 36;
    this.extractor_gold_button.info.translate.x = _0x568221;
    this.extractor_gold_button.info.translate.y = 36;
    this.extractor_diamond_button.info.translate.x = _0x568221;
    this.extractor_diamond_button.info.translate.y = 36;
    this.extractor_amethyst_button.info.translate.x = _0x568221;
    this.extractor_amethyst_button.info.translate.y = 36;
    this.extractor_reidite_button.info.translate.x = _0x568221;
    this.extractor_reidite_button.info.translate.y = 36;
  };
  this.update_windmill_button = function () {
    var _0xfb467f = 12 + Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.windmill_wheat_button.info.img[0].width) + 35);
    this.windmill_wheat_button.info.translate.x = _0xfb467f;
    this.windmill_wheat_button.info.translate.y = 36;
    _0xfb467f += 83;
    this.windmill_flour_button.info.translate.x = _0xfb467f;
    this.windmill_flour_button.info.translate.y = 36;
  };
  this.update_furnace_button = function () {
    var _0x2e309d = Math.floor(Math.floor((3 + user.craft.can_craft.length) / 4) * (10 + this.furnace_button.info.img[0].width) + 35);
    this.furnace_button.info.translate.x = _0x2e309d;
    this.furnace_button.info.translate.y = 22;
  };
  this.update_inv_buttons = function () {
    var _0x26ad78 = user.inv.can_select;
    if (_0x26ad78.length > 0) {
      var _0x2ecb8b = Math.floor((canw - (_0x26ad78[0].info.width + 5) * user.inv.max) / 2);
    }
    for (var _0x4690cc = 0; _0x4690cc < _0x26ad78.length; _0x4690cc++) {
      _0x26ad78[_0x4690cc].info.translate.x = _0x2ecb8b + (_0x26ad78[_0x4690cc].info.width + 5) * _0x4690cc;
      _0x26ad78[_0x4690cc].info.translate.y = canh - _0x26ad78[_0x4690cc].info.width - 10;
      this.plus_buttons[_0x26ad78[_0x4690cc].id].info.translate.x = _0x26ad78[_0x4690cc].info.translate.x + 13;
      this.plus_buttons[_0x26ad78[_0x4690cc].id].info.translate.y = _0x26ad78[_0x4690cc].info.translate.y - this.plus_buttons[_0x26ad78[_0x4690cc].id].info.img[0].height - 6;
    }
  };
  var _0x38b60c = 0;
  var _0xb6e83a = 30;
  function _0x15d501() {
    _0x2ee466.update();
    _0x38b60c++;
    if (_0x38b60c == _0xb6e83a) {
      _0x2ee466.add_event_listener();
      _0x2ee466.update();
      return;
    }
    window.setTimeout(_0x15d501, 33);
  }
  this.quit = function (_0xe4b31a) {
    if (user.chat.open) {
      user.chat.quit();
    }
    if (user.terminal.open) {
      user.terminal.quit();
    }
    document.getElementById("team_box").style.display = "none";
    _0x2ee466.market.style.display = "none";
    _0x2ee466.market.open = false;
    _0x2ee466.sign.style.display = "none";
    _0x2ee466.sign.open = false;
    document.getElementById("shop_starterkit").style.display = "none";
    document.getElementById("home_craft").style.display = "none";
    document.getElementById("recipe_craft").style.display = "none";
    _0x2ee466.craft_list.open = false;
    document.getElementById("option_in_game").style.display = "none";
    _0x2ee466.options.open = false;
    document.getElementById("sure_delete").style.display = "none";
    _0x2ee466.safe_delete.open = false;
    document.getElementById("cancel_sure_delete").style.display = "none";
    _0x2ee466.safe_cancel.open = false;
    document.getElementById("chronoquest").style.display = "none";
    _0x2ee466.quests.open = false;
    _0xb01618 = _0xe4b31a;
    _0x2ee466.remove_event_listener();
    _0x2ee466.can.style.cursor = _0x2ee466.cursor0;
    audio.quit();
    _0x3efb38 = -1;
    _0xadf943();
    refreshAds();
  };
  var _0xb01618;
  var _0x3efb38 = -1;
  var _0x20e070 = 30;
  function _0xadf943() {
    _0x2ee466.update();
    _0x3efb38++;
    if (_0x3efb38 == _0x20e070) {
      _0x2ee466.stop();
      _0xb01618();
      return;
    }
    window.setTimeout(_0xadf943, 33);
  }
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    client.change_ground();
    _0x2ee466.is_run = true;
    _0x3efb38 = -1;
    _0x38b60c = 0;
    _0x15d501();
  };
  this.update = function () {
    this.leaderboard.translate.x = canw - this.leaderboard.img.width - 10;
    this.leaderboard.translate.y = 5;
    world.clock.translate.x = this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width - 85;
    world.clock.translate.y = 10;
    this.craft_list.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width - 10;
    this.craft_list.button.info.translate.y = 10;
    this.quests.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width - 20;
    this.quests.button.info.translate.y = this.craft_list.button.info.translate.y + sprite[SPRITE.RECIPE_BUTTON][0].height + 5;
    this.options.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.options.button.info.translate.y = this.quests.button.info.translate.y + sprite[SPRITE.OPTION_BUTTON][0].height + 18;
    this.audio.button_on.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_on.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.audio.button_off.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_off.info.translate.y = this.options.button.info.translate.y + sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.market.button.info.translate.x = this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width - 20;
    this.market.button.info.translate.y = this.audio.button_on.info.translate.y + sprite[SPRITE.MARKET_BUTTON][0].height;
    user.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85;
    user.auto_feed.translate.y = 100;
    user.show_spectators.translate.x = this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width - 85;
    user.show_spectators.translate.y = user.auto_feed.translate.y + 10 + sprite[SPRITE.AUTO_FEED].height;
    this.minimap.translate.y = canh - 3 - 193;
    this.minimap.translate.x = canw - 3 - 193;
    this.gauges.translate.x = 5;
    this.gauges.translate.y = canh - this.gauges.img.height - 5;
    this.shop.button.info.translate.x = canw2 - 91 / 2;
    this.shop.button.info.translate.y = 50;
    this.update_craft_buttons();
    this.update_inv_buttons();
    this.update_chest_buttons();
    this.update_furnace_button();
    this.update_windmill_button();
    this.update_extractor_button();
    this.update_bread_oven_button();
    this.update_team_buttons();
    this.sign.update_button();
    draw_team_buttons();
    user.chat.update();
    user.terminal.update();
    this.team_box.update();
    this.craft_list.home.update();
    this.craft_list.list.update();
    this.safe_delete.update();
    this.safe_cancel.update();
    this.quests.update();
    this.shop.update();
    this.options.update();
    this.market.update();
    this.sign.update();
    var _0x407de7 = 0;
    if (_0x38b60c != _0xb6e83a) {
      var _0x407de7 = 1500 / (_0x38b60c + 1) - 50;
    }
    if (_0x3efb38 != -1) {
      var _0x407de7 = -(1500 / (_0x20e070 - _0x3efb38 + 1) - 48);
    }
    this.shop.button.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.leaderboard.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    user.auto_feed.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    user.show_spectators.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.craft_list.button.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.quests.button.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.options.button.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.market.button.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.audio.button_on.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.audio.button_off.info.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    world.clock.translate.y -= _0x407de7 > 0 ? _0x407de7 : -_0x407de7;
    this.gauges.translate.y -= _0x407de7 < 0 ? _0x407de7 : -_0x407de7;
    this.minimap.translate.y -= _0x407de7 < 0 ? _0x407de7 : -_0x407de7;
  };
  this.draw_UI = function () {
    if (!user.ghost.enabled && this.show_ui && !user.zombie) {
      draw_ui_crafting();
    }
    draw_ui_gear();
    draw_ui_chat();
    if (this.show_ui) {
      draw_minimap();
      if (this.show_recipe_book === 1) {
        this.craft_list.button.draw(_0x3da1b1);
      }
      if (world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && this.show_quest === 1) {
        this.quests.button.draw(_0x3da1b1);
      }
      this.options.button.draw(_0x3da1b1);
      if (this.show_market === 1) {
        this.market.button.draw(_0x3da1b1);
      }
      if (audio.run) {
        this.audio.button_on.draw(_0x3da1b1);
      } else {
        this.audio.button_off.draw(_0x3da1b1);
      }
      draw_leaderboard();
      draw_status();
      this.gauges.draw();
      draw_weapon_switch_delay();
      draw_helmet_switch_delay();
      draw_build_delay();
      draw_totem_delay();
      draw_ui_inventory();
      draw_chest_inventory();
      draw_furnace_inventory();
      draw_well_inventory();
      draw_windmill_inventory();
      draw_extractor_inventory();
      draw_bread_oven_inventory();
      draw_sign_button();
      draw_team_buttons();
      draw_info_box();
    }
    if (user.ghost.enabled) {
      draw_resurrection_inventory();
    }
    draw_bigmap();
    if (this.show_ui && this.show_clock === 1) {
      draw_clock();
    }
    user.welcome.draw();
    user.alert.draw("#FFF", "#000");
    if (this.show_ui) {
      user.ghost.draw();
      user.shop.draw();
      user.inv.drag.draw(mouse.pos.x, mouse.pos.y);
    }
    draw_reconnect();
  };
  this.update_scene = function () {
    user.cam.update();
    user.gauges.update();
    if (!user.reconnect.enabled && user.alive) {
      user.control.update();
      user.auto_feed.update();
    }
    world.update();
    this.quests.update_chrono();
  };
  this.draw_scene = function () {
    draw_world_with_effect();
  };
  this.update_connection = function () {
    client.check_state();
    client.check_pong();
    client.try_ping();
    client.update_cam();
  };
  this.draw = function () {
    if (!user.reconnect.enabled && user.alive) {
      this.update_connection();
    }
    audio.scheduler();
    this.update_scene();
    if (ui.hijackedAsset === 1) {
      var _0x538653 = IMAGES.CHEATING_BOX;
      ctxDrawImage(_0x3da1b1, _0x538653, canw2 - _0x538653.width / 4, canh2 - _0x538653.height / 4, _0x538653.width / 2, _0x538653.height / 2);
      return;
    }
    this.draw_scene();
    this.draw_UI();
  };
  this.trigger_keyup = function (_0x407d13) {
    if (user.chat.open && _0x407d13.keyCode === 27) {
      user.chat.quit();
    } else if (user.terminal.open && _0x407d13.keyCode === 27) {
      user.terminal.quit();
    } else if (!user.chat.open && !user.terminal.open && _0x407d13.keyCode == 79 && _0x3efb38 == -1) {
      user.terminal._open();
    } else if (_0x407d13.keyCode == 13 && _0x3efb38 == -1) {
      if (user.terminal.open) {
        user.terminal._send();
      } else {
        user.chat.run();
      }
    } else if (!user.chat.open && !user.terminal.open) {
      if (_0x407d13.keyCode === 82) {
        user.auto_feed.invert();
      } else if (_0x407d13.keyCode === 80 && world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator) {
        user.show_spectators.invert();
      } else if (_0x407d13.keyCode >= 49 && _0x407d13.keyCode <= 57) {
        if (user.craft.id < 0) {
          var _0x4a7a41 = _0x407d13.keyCode - 49;
          var _0x361a2e = user.inv.can_select[_0x4a7a41];
          if (_0x361a2e) {
            client.select_inv(_0x361a2e.id, _0x4a7a41);
          }
        }
      } else if (_0x407d13.keyCode == 89) {
        user.bigmap = !user.bigmap;
      } else if (_0x407d13.keyCode == 71) {
        user.craft.change_mode();
      }
    }
    keyboard.up(_0x407d13);
  };
  this.trigger_keydown = function (_0x20a342) {
    keyboard.down(_0x20a342);
    if (_0x20a342.keyCode == 8 && !user.chat.open && !user.terminal.open) {
      _0x20a342.preventDefault();
    }
  };
  this.trigger_mousedown = function (_0x5c618f) {
    mouse.pos = get_mouse_pos(_0x2ee466.can, _0x5c618f);
    var _0x2f1a74 = false;
    if (user.craft.preview < 0) {
      _0x2ee466.minimap.focus(mouse.pos);
    }
    var _0x2ba997 = user.chest;
    if (user.craft.id < 0 && _0x2ba997.id >= 0) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        _0x2f1a74 |= _0x2ee466.chest_buttons[user.chest.id].trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      }
    }
    var _0x2ad7e5 = user.windmill;
    if (_0x2ad7e5.open && _0x2ad7e5.amount_flour > 0) {
      _0x2f1a74 |= _0x2ee466.windmill_flour_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    var _0x5867d0 = user.extractor;
    if (_0x5867d0.open && _0x5867d0.amount_mineral > 0) {
      _0x2f1a74 |= _0x2ee466.extractor_stone_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      _0x2f1a74 |= _0x2ee466.extractor_gold_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      _0x2f1a74 |= _0x2ee466.extractor_diamond_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      _0x2f1a74 |= _0x2ee466.extractor_amethyst_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      _0x2f1a74 |= _0x2ee466.extractor_reidite_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    var _0x38fdb1 = user.bread_oven;
    if (_0x38fdb1.open && _0x38fdb1.amount_bread > 0) {
      _0x2f1a74 |= _0x2ee466.bread_oven_bread_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.sign.open) {
      _0x2f1a74 |= _0x2ee466.sign.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        _0x2f1a74 |= _0x2ee466.chest_padlock.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.chest.lockpick) {
      _0x2f1a74 |= _0x2ee466.chest_lockpick.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.id < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open && !_0x2ee466.market.open) {
      var _0x3a4af5 = user.inv.can_select;
      for (var _0x27758c = 0; _0x27758c < _0x3a4af5.length; _0x27758c++) {
        var _0x3d5075 = _0x3a4af5[_0x27758c].trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
        _0x2f1a74 |= _0x3d5075;
        if (_0x3d5075) {
          user.inv.drag.start(_0x27758c, mouse.pos);
        }
        if (_0x2ba997.open && (_0x2ba997.id < 0 || _0x2ba997.id == _0x3a4af5[_0x27758c].id) || user.furnace.open && _0x3a4af5[_0x27758c].id === INV.WOOD || user.well.open && _0x3a4af5[_0x27758c].id === INV.BUCKET_FULL || user.bread_oven.open && (_0x3a4af5[_0x27758c].id === INV.WOOD || _0x3a4af5[_0x27758c].id === INV.FLOUR) || user.windmill.open && _0x3a4af5[_0x27758c].id === INV.WILD_WHEAT || user.extractor.open && _0x3a4af5[_0x27758c].id === INV.WOOD) {
          _0x2f1a74 |= _0x2ee466.plus_buttons[_0x3a4af5[_0x27758c].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
        }
      }
    }
    if (user.resurrection.open) {
      _0x2f1a74 |= _0x2ee466.resurrection.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (_0x2ee466.team_buttons_id != -1) {
      _0x2f1a74 |= _0x2ee466.team_buttons[_0x2ee466.team_buttons_id].button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      if (_0x2f1a74) {
        var _0x315e08 = true;
      }
    } else {
      var _0x315e08 = false;
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !_0x315e08 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.market.open && !user.zombie) {
      var _0x3a4af5 = user.craft.can_craft;
      for (var _0x27758c = 0; _0x27758c < _0x3a4af5.length; _0x27758c++) {
        _0x2f1a74 |= _0x3a4af5[_0x27758c].trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      _0x2f1a74 |= _0x2ee466.shop.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      _0x2f1a74 |= _0x2ee466.craft_list.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      _0x2f1a74 |= _0x2ee466.options.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open) {
      _0x2f1a74 |= _0x2ee466.market.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open && !_0x2ee466.market.open) {
      if (audio.run) {
        _0x2f1a74 |= _0x2ee466.audio.button_on.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      } else {
        _0x2f1a74 |= _0x2ee466.audio.button_off.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.market.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR) {
      _0x2f1a74 |= _0x2ee466.quests.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_DOWN);
    }
    if (!_0x2f1a74 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open && !_0x2ee466.sign.open) {
      if (user.craft.preview >= 0) {
        client.send_build();
      } else if (!_0x315e08) {
        mouse.down();
      }
    }
  };
  this.trigger_mouseup = function (_0x3158e3) {
    mouse.pos = get_mouse_pos(_0x2ee466.can, _0x3158e3);
    mouse.up();
    if (user.inv.drag.release()) {
      return;
    }
    var _0x533d9d = user.chest;
    var _0x1112b1 = user.furnace;
    var _0x54e391 = user.well;
    var _0x2124a9 = user.windmill;
    var _0x529c44 = user.extractor;
    var _0x5da29c = user.bread_oven;
    if (user.control.attack) {
      user.control.attack = 0;
      client.stop_attack();
    }
    if (_0x2ee466.team_buttons_id != -1) {
      var _0x29a6c0 = _0x2ee466.team_buttons[_0x2ee466.team_buttons_id].button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      var _0x174f4d = document.getElementById("team_box").style;
      if (_0x29a6c0 && _0x174f4d.display == "inline-block") {
        _0x174f4d.display = "none";
        return;
      } else if (_0x29a6c0) {
        _0x2ee466.team_buttons[_0x2ee466.team_buttons_id].action();
      }
    }
    if (user.craft.id < 0 && _0x533d9d.id >= 0 && !_0x2ee466.safe_delete.open) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        var _0x29a6c0 = _0x2ee466.chest_buttons[user.chest.id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (_0x29a6c0) {
          client.take_chest(_0x533d9d);
        }
      }
    }
    var _0x2124a9 = user.windmill;
    if (_0x2124a9.open && _0x2124a9.amount_flour > 0 && !_0x2ee466.safe_delete.open) {
      var _0x29a6c0 = _0x2ee466.windmill_flour_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        client.take_flour(_0x2124a9);
      }
    }
    var _0x529c44 = user.extractor;
    if (_0x529c44.open && _0x529c44.amount_mineral > 0 && !_0x2ee466.safe_delete.open) {
      switch (_0x529c44.type) {
        case ITEMS.EXTRACTOR_MACHINE_STONE:
          var _0x29a6c0 = _0x2ee466.extractor_stone_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
          if (_0x29a6c0) {
            client.take_extractor(_0x529c44);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_GOLD:
          var _0x29a6c0 = _0x2ee466.extractor_gold_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
          if (_0x29a6c0) {
            client.take_extractor(_0x529c44);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
          var _0x29a6c0 = _0x2ee466.extractor_diamond_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
          if (_0x29a6c0) {
            client.take_extractor(_0x529c44);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
          var _0x29a6c0 = _0x2ee466.extractor_amethyst_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
          if (_0x29a6c0) {
            client.take_extractor(_0x529c44);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_REIDITE:
          var _0x29a6c0 = _0x2ee466.extractor_reidite_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
          if (_0x29a6c0) {
            client.take_extractor(_0x529c44);
          }
          break;
      }
    }
    var _0x5da29c = user.bread_oven;
    if (_0x5da29c.open && _0x5da29c.amount_bread > 0 && !_0x2ee466.safe_delete.open) {
      var _0x29a6c0 = _0x2ee466.bread_oven_bread_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        client.take_bread(_0x5da29c);
      }
    }
    if (user.sign.open && !_0x2ee466.safe_delete.open) {
      var _0x29a6c0 = _0x2ee466.sign.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        _0x2ee466.sign.select();
      }
    }
    if (!user.chest.lock && !_0x2ee466.safe_delete.open) {
      if (user.chest.padlock) {
        _0x29a6c0 = _0x2ee466.chest_padlock.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (_0x29a6c0) {
          client.lock_chest(_0x533d9d);
        }
      }
    }
    if (user.chest.lockpick && !_0x2ee466.safe_delete.open) {
      _0x29a6c0 = _0x2ee466.chest_lockpick.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        client.unlock_chest(_0x533d9d);
        if (ga) {
          ga("send", "event", "Game", "lockpick");
        }
      }
    }
    if (user.resurrection.open) {
      var _0x29a6c0 = _0x2ee466.resurrection.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        client.resurrection();
        if (ga) {
          ga("send", "event", "Game", "resurrection");
        }
      }
    }
    if (user.craft.id < 0 && !user.ghost.enabled && !_0x2ee466.safe_delete.open) {
      var _0x2bce52 = user.inv.can_select;
      for (var _0x583be6 = 0; _0x583be6 < _0x2bce52.length; _0x583be6++) {
        var _0x29a6c0 = _0x2bce52[_0x583be6].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (!_0x29a6c0) {
          if (_0x533d9d.open && (_0x533d9d.id < 0 || _0x533d9d.id === _0x2bce52[_0x583be6].id)) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              client.give_item(_0x533d9d, _0x2bce52[_0x583be6].id, _0x3158e3.shiftKey ? 10 : 1);
            }
          } else if (_0x54e391.open && _0x2bce52[_0x583be6].id === INV.BUCKET_FULL) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              client.give_well(_0x54e391);
            }
          } else if (_0x1112b1.open && _0x2bce52[_0x583be6].id === INV.WOOD) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              client.give_wood(_0x1112b1, _0x3158e3.shiftKey ? 10 : 1);
            }
          } else if (_0x2124a9.open && _0x2bce52[_0x583be6].id === INV.WILD_WHEAT) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              client.give_wheat(_0x2124a9, _0x3158e3.shiftKey ? 10 : 1);
            }
          } else if (_0x529c44.open && _0x2bce52[_0x583be6].id === INV.WOOD) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              client.give_wood_extractor(_0x529c44, _0x3158e3.shiftKey ? 10 : 1);
            }
          } else if (_0x5da29c.open && (_0x2bce52[_0x583be6].id === INV.WOOD || _0x2bce52[_0x583be6].id === INV.FLOUR)) {
            var _0x29a6c0 = _0x2ee466.plus_buttons[_0x2bce52[_0x583be6].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
            if (_0x29a6c0 && user.craft.preview < 0) {
              if (_0x2bce52[_0x583be6].id === INV.WOOD) {
                client.give_bread_oven(_0x5da29c, _0x3158e3.shiftKey ? 10 : 1, 0);
              } else {
                client.give_bread_oven(_0x5da29c, 0, _0x3158e3.shiftKey ? 10 : 1);
              }
            }
          }
          continue;
        } else if (_0x3158e3.which == 1 && !_0x3158e3.shiftKey) {
          client.select_inv(_0x2bce52[_0x583be6].id, _0x583be6);
        } else if ((_0x3158e3.which == 1 && _0x3158e3.shiftKey || _0x3158e3.which == 3) && user.craft.preview < 0) {
          _0x2ee466.safe_delete.del(_0x2bce52[_0x583be6].id);
        }
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !_0x2ee466.safe_delete.open && !user.zombie) {
      var _0x2bce52 = user.craft.can_craft;
      for (var _0x583be6 = 0; _0x583be6 < _0x2bce52.length; _0x583be6++) {
        var _0x29a6c0 = _0x2bce52[_0x583be6].trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (!_0x29a6c0) {
          continue;
        }
        ret = client.select_craft(_0x2bce52[_0x583be6].id);
        if (ret && ga) {
          ga("send", "event", "Game", "craft", INV_INFOS[RECIPES[_0x2bce52[_0x583be6].id].id2].name);
        }
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !_0x2ee466.market.open && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open) {
      var _0x29a6c0 = _0x2ee466.shop.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      if (_0x29a6c0) {
        game.shop.select();
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.market.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open) {
      if (audio.run) {
        var _0x29a6c0 = _0x2ee466.audio.button_on.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (_0x29a6c0) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound on");
          }
        }
      } else {
        var _0x29a6c0 = _0x2ee466.audio.button_off.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
        if (_0x29a6c0) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound off");
          }
        }
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      var _0x29a6c0 = _0x2ee466.options.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        _0x2ee466.options.select_options();
        if (ga) {
          ga("send", "event", "Game", "options");
        }
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open && _0x2ee466.show_market === 1) {
      var _0x29a6c0 = _0x2ee466.market.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        _0x2ee466.market.select();
        if (ga) {
          ga("send", "event", "Game", "market");
        }
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.safe_delete.open && !_0x2ee466.market.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && _0x2ee466.show_recipe_book === 1) {
      var _0x29a6c0 = _0x2ee466.craft_list.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        _0x2ee466.craft_list.select_book();
        if (ga) {
          ga("send", "event", "Game", "recipe");
        }
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.market.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR && _0x2ee466.show_quest === 1) {
      var _0x29a6c0 = _0x2ee466.quests.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_UP);
      if (_0x29a6c0) {
        _0x2ee466.quests.select();
        if (ga) {
          ga("send", "event", "Game", "quests");
        }
      }
    }
    if (user.craft.crafting && _0x3158e3.which == 3) {
      _0x2ee466.safe_cancel.del();
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (_0x3a60ab) {
    mouse.pos = get_mouse_pos(_0x2ee466.can, _0x3a60ab);
    var _0x281227 = false;
    game.info_box.display = 0;
    user.inv.drag.move(mouse.pos);
    if (_0x2ee466.team_buttons_id != -1) {
      _0x281227 |= _0x2ee466.team_buttons[_0x2ee466.team_buttons_id].button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    var _0x4a21e2 = user.windmill;
    if (_0x4a21e2.open && _0x4a21e2.amount_flour > 0) {
      _0x281227 |= _0x2ee466.windmill_flour_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    var _0x174c8b = user.extractor;
    if (_0x174c8b.open && _0x174c8b.amount_mineral > 0) {
      _0x281227 |= _0x2ee466.extractor_stone_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      _0x281227 |= _0x2ee466.extractor_gold_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      _0x281227 |= _0x2ee466.extractor_diamond_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      _0x281227 |= _0x2ee466.extractor_amethyst_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      _0x281227 |= _0x2ee466.extractor_reidite_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    var _0x580072 = user.bread_oven;
    if (_0x580072.open && _0x580072.amount_bread > 0) {
      _0x281227 |= _0x2ee466.bread_oven_bread_button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.sign.open) {
      _0x281227 |= _0x2ee466.sign.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    var _0x34bfb1 = user.chest;
    if (user.craft.id < 0 && _0x34bfb1.id >= 0 && !user.ghost.enabled) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        _0x281227 |= _0x2ee466.chest_buttons[_0x34bfb1.id].trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.resurrection.open) {
      _0x281227 |= _0x2ee466.resurrection.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (!user.chest.lock && !user.ghost.enabled) {
      if (user.chest.padlock) {
        _0x281227 |= _0x2ee466.chest_padlock.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.chest.lockpick && !user.ghost.enabled) {
      _0x281227 |= _0x2ee466.chest_lockpick.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.id < 0 && !user.ghost.enabled) {
      var _0x2a33c7 = user.inv.can_select;
      for (var _0x5d91b0 = 0; _0x5d91b0 < _0x2a33c7.length; _0x5d91b0++) {
        var _0x49db42 = _0x2a33c7[_0x5d91b0].trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
        _0x281227 |= game.info_box.trigger(_0x49db42, _0x2a33c7[_0x5d91b0], 0);
        if (_0x34bfb1.open && (_0x34bfb1.id < 0 || _0x34bfb1.id == _0x2a33c7[_0x5d91b0].id) || user.furnace.open && _0x2a33c7[_0x5d91b0].id == INV.WOOD || user.well.open && _0x2a33c7[_0x5d91b0].id === INV.BUCKET_FULL || user.bread_oven.open && (_0x2a33c7[_0x5d91b0].id == INV.WOOD || _0x2a33c7[_0x5d91b0].id == INV.FLOUR) || user.windmill.open && _0x2a33c7[_0x5d91b0].id == INV.WILD_WHEAT || user.extractor.open && _0x2a33c7[_0x5d91b0].id == INV.WOOD) {
          _0x281227 |= _0x2ee466.plus_buttons[_0x2a33c7[_0x5d91b0].id].trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
        }
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && !user.ghost.enabled && !user.zombie) {
      var _0x2a33c7 = user.craft.can_craft;
      for (var _0x5d91b0 = 0; _0x5d91b0 < _0x2a33c7.length; _0x5d91b0++) {
        var _0x49db42 = false;
        _0x49db42 = _0x2a33c7[_0x5d91b0].trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
        _0x281227 |= game.info_box.trigger(_0x49db42, _0x2a33c7[_0x5d91b0], 1);
      }
    }
    if (user.craft.id < 0 && user.craft.preview < 0 && user.shop.open && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      _0x281227 |= _0x2ee466.shop.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open && _0x2ee466.show_recipe_book === 1) {
      _0x281227 |= _0x2ee466.craft_list.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.market.open) {
      _0x281227 |= _0x2ee466.options.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open && _0x2ee466.show_market === 1) {
      _0x281227 |= _0x2ee466.market.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.quests.open && !_0x2ee466.options.open && !_0x2ee466.market.open) {
      if (audio.run) {
        _0x281227 |= _0x2ee466.audio.button_on.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      } else {
        _0x281227 |= _0x2ee466.audio.button_off.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.craft.preview < 0 && !_0x2ee466.craft_list.open && !_0x2ee466.safe_delete.open && !_0x2ee466.options.open && !_0x2ee466.safe_cancel.open && !_0x2ee466.market.open && world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_B && _0x2ee466.show_quest === 1) {
      _0x281227 |= _0x2ee466.quests.button.trigger(_0x2ee466.can, mouse.pos, MOUSE_MOVE);
    }
    if (_0x2ee466.current_cursor !== _0x281227) {
      _0x2ee466.current_cursor = _0x281227;
      if (_0x281227) {
        _0x256f70.style.cursor = _0x2ee466.cursor1;
      } else {
        _0x256f70.style.cursor = _0x2ee466.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
    window.addEventListener("keyup", this.trigger_keyup, false);
    window.addEventListener("keydown", this.trigger_keydown, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
    window.removeEventListener("keyup", this.trigger_keyup, false);
    window.removeEventListener("keydown", this.trigger_keydown, false);
  };
}
function open_twitter() {
  Utils.open_in_new_box("https://twitter.com/intent/tweet?text=I%20survived%20" + user.day + "%20days%20with%20" + user.die.score + "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io");
}
function open_facebook() {
  Utils.open_in_new_box("https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0");
}
function Scoreboard(_0x5b8e60, _0x441477) {
  this.can = _0x5b8e60;
  this.ctx = _0x441477;
  var _0x4036e8 = this;
  this.enable_interface = false;
  this.sb = {
    id: document.getElementById("scoreboard"),
    style: document.getElementById("scoreboard").style,
    height: 0,
    translate: {
      x: 0,
      y: 0
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = this.translate.y + "px";
    },
    init: function () {
      this.id.innerHTML = "<div style=\"position:absolute;\"> <img src=\"./img/scoreboard.png\"style=\"width:250px;transform:translate(125px, -80px);\"> </img> </div><div><div id=\"whokilled\">" + user.die.howdie + "</div></div><div class=\"deco\" style=\"margin-top:35px;\"></div><div class=\"deco\"></div><div><div class=\"stats\"> " + LANG[TEXT.DAYS_SURVIVED] + " : " + user.day + "</div><div class=\"stats\"> " + LANG[TEXT.KILL] + " : " + user.die.kill + "</div></div><div id=\"flexDisplay\"><div id=\"score\"> " + LANG[TEXT.SCORE] + " : " + user.die.score + "</div><div id=\"breadWon\"><span id=\"breadWonInner\">0</span><img src=\"./img/golden-bread.png\" style=\"width:50px;margin-left:-25px;transform: translate(37px, 8px);\"></img></div></div><div><div id=\"points\"> " + user.die.bank + " " + LANG[TEXT.POINTS] + "</div></div><div id=\"shop_points\">" + LANG[TEXT.KIT_NEXT] + "</div><div style=\"display:inline-block;\"><div class=\"social\" id=\"tttwitter\">" + LANG[TEXT.TWITTER] + "</div><div class=\"social\" id=\"fffacebook\">" + LANG[TEXT.FACEBOOK] + "</div></div><div id=\"bbback\">" + LANG[TEXT.BACK_TO_THE_GAME] + "</div>";
      this.style.display = "inline-block";
      document.getElementById("tttwitter").addEventListener("mouseup", open_twitter, false);
      document.getElementById("bbback").addEventListener("mouseup", function () {
        scoreboard.quit(ui.run);
      }, false);
      document.getElementById("fffacebook").addEventListener("mouseup", open_facebook, false);
      this.height = Math.floor(this.id.clientHeight / 2);
      getBreadAndScore();
    }
  };
  var _0x112a38 = 0;
  var _0x8b1933 = 30;
  function _0x4ba002() {
    _0x4036e8.update();
    _0x112a38++;
    if (_0x112a38 == _0x8b1933) {
      _0x4036e8.update();
      return;
    }
    window.setTimeout(_0x4ba002, 33);
  }
  this.quit = function (_0x295ec2) {
    if (_0x4036e8.enable_interface === true) {
      _0x4036e8.enable_interface = false;
      _0x3dae5c = _0x295ec2;
      _0x34b046 = -1;
      _0x53f986();
      refreshAds();
    }
  };
  var _0x3dae5c;
  var _0x34b046 = -1;
  var _0x547191 = 30;
  function _0x53f986() {
    _0x4036e8.update();
    _0x34b046++;
    if (_0x34b046 == _0x547191) {
      _0x4036e8.stop();
      _0x4036e8.sb.style.display = "none";
      _0x3dae5c();
      return;
    }
    window.setTimeout(_0x53f986, 33);
  }
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor = SPRITE.GROUND[fake_world.time];
    _0x4036e8.sb.init();
    ui.trevda.style.display = "inline-block";
    _0x4036e8.is_run = true;
    _0x4036e8.enable_interface = true;
    _0x34b046 = -1;
    _0x112a38 = 0;
    _0x4ba002();
  };
  this.update = function () {
    this.sb.translate.x = Math.floor(canw2 - 275);
    this.sb.translate.y = Math.floor(canh2 - this.sb.height - 28);
    ui.trevda.translate.x = this.sb.translate.x - 350;
    ui.trevda.translate.y = this.sb.translate.y + 0;
    ui.trevda.update();
    if (_0x112a38 != _0x8b1933 || _0x34b046 != -1) {
      var _0x3c091f = 0;
      if (_0x112a38 != _0x8b1933) {
        var _0x3c091f = 1500 / (_0x112a38 + 1) - 50;
      }
      if (_0x34b046 != -1) {
        var _0x3c091f = -(1750 / (_0x547191 - _0x34b046 + 1) - 48);
      }
      this.sb.translate.y -= _0x3c091f;
    }
    this.sb.update();
  };
  this.draw = function () {
    draw_fake_world();
    user.alert.draw("#FFF", "#000");
  };
}
(function () {
  'use strict';

  function _0x549c68() {
    this.init();
  }
  _0x549c68.prototype = {
    init: function () {
      var _0x1732ee = this || _0x2c4f06;
      _0x1732ee._counter = 1000;
      _0x1732ee._codecs = {};
      _0x1732ee._howls = [];
      _0x1732ee._muted = false;
      _0x1732ee._volume = 1;
      _0x1732ee._canPlayEvent = "canplaythrough";
      _0x1732ee._navigator = typeof window != "undefined" && window.navigator ? window.navigator : null;
      _0x1732ee.masterGain = null;
      _0x1732ee.noAudio = false;
      _0x1732ee.usingWebAudio = true;
      _0x1732ee.autoSuspend = true;
      _0x1732ee.ctx = null;
      _0x1732ee.mobileAutoEnable = true;
      _0x1732ee._setup();
      return _0x1732ee;
    },
    volume: function (_0x3d8728) {
      var _0x46e427 = this || _0x2c4f06;
      _0x3d8728 = parseFloat(_0x3d8728);
      if (!_0x46e427.ctx) {
        _0x462746();
      }
      if (_0x3d8728 !== undefined && _0x3d8728 >= 0 && _0x3d8728 <= 1) {
        _0x46e427._volume = _0x3d8728;
        if (_0x46e427._muted) {
          return _0x46e427;
        }
        if (_0x46e427.usingWebAudio) {
          _0x46e427.masterGain.gain.value = _0x3d8728;
        }
        for (var _0x56b27f = 0; _0x56b27f < _0x46e427._howls.length; _0x56b27f++) {
          if (!_0x46e427._howls[_0x56b27f]._webAudio) {
            for (var _0x490733 = _0x46e427._howls[_0x56b27f]._getSoundIds(), _0x4ba193 = 0; _0x4ba193 < _0x490733.length; _0x4ba193++) {
              var _0x2f3d91 = _0x46e427._howls[_0x56b27f]._soundById(_0x490733[_0x4ba193]);
              if (_0x2f3d91 && _0x2f3d91._node) {
                _0x2f3d91._node.volume = _0x2f3d91._volume * _0x3d8728;
              }
            }
          }
        }
        return _0x46e427;
      }
      return _0x46e427._volume;
    },
    mute: function (_0x4b46b9) {
      var _0x1c021d = this || _0x2c4f06;
      if (!_0x1c021d.ctx) {
        _0x462746();
      }
      _0x1c021d._muted = _0x4b46b9;
      if (_0x1c021d.usingWebAudio) {
        _0x1c021d.masterGain.gain.value = _0x4b46b9 ? 0 : _0x1c021d._volume;
      }
      for (var _0x213d6f = 0; _0x213d6f < _0x1c021d._howls.length; _0x213d6f++) {
        if (!_0x1c021d._howls[_0x213d6f]._webAudio) {
          for (var _0x185cdf = _0x1c021d._howls[_0x213d6f]._getSoundIds(), _0x2d815b = 0; _0x2d815b < _0x185cdf.length; _0x2d815b++) {
            var _0x59f180 = _0x1c021d._howls[_0x213d6f]._soundById(_0x185cdf[_0x2d815b]);
            if (_0x59f180 && _0x59f180._node) {
              _0x59f180._node.muted = !!_0x4b46b9 || _0x59f180._muted;
            }
          }
        }
      }
      return _0x1c021d;
    },
    unload: function () {
      for (var _0x385518 = this || _0x2c4f06, _0x396235 = _0x385518._howls.length - 1; _0x396235 >= 0; _0x396235--) {
        _0x385518._howls[_0x396235].unload();
      }
      if (_0x385518.usingWebAudio && _0x385518.ctx && _0x385518.ctx.close !== undefined) {
        _0x385518.ctx.close();
        _0x385518.ctx = null;
        _0x462746();
      }
      return _0x385518;
    },
    codecs: function (_0x40f1fa) {
      return (this || _0x2c4f06)._codecs[_0x40f1fa.replace(/^x-/, "")];
    },
    _setup: function () {
      var _0x1e4257 = this || _0x2c4f06;
      _0x1e4257.state = _0x1e4257.ctx ? _0x1e4257.ctx.state || "running" : "running";
      _0x1e4257._autoSuspend();
      if (!_0x1e4257.usingWebAudio) {
        if (typeof Audio != "undefined") {
          try {
            var _0x36c811 = new Audio();
            if (_0x36c811.oncanplaythrough === undefined) {
              _0x1e4257._canPlayEvent = "canplay";
            }
          } catch (_0x2916f7) {
            _0x1e4257.noAudio = true;
          }
        } else {
          _0x1e4257.noAudio = true;
        }
      }
      try {
        var _0x36c811 = new Audio();
        if (_0x36c811.muted) {
          _0x1e4257.noAudio = true;
        }
      } catch (_0x9aaee5) {}
      if (!_0x1e4257.noAudio) {
        _0x1e4257._setupCodecs();
      }
      return _0x1e4257;
    },
    _setupCodecs: function () {
      var _0x5c6999 = this || _0x2c4f06;
      var _0x29c65b = null;
      try {
        _0x29c65b = typeof Audio != "undefined" ? new Audio() : null;
      } catch (_0x5ddf17) {
        return _0x5c6999;
      }
      if (!_0x29c65b || typeof _0x29c65b.canPlayType != "function") {
        return _0x5c6999;
      }
      var _0x2ab9c1 = _0x29c65b.canPlayType("audio/mpeg;").replace(/^no$/, "");
      var _0x6f8f9f = _0x5c6999._navigator && _0x5c6999._navigator.userAgent.match(/OPR\/([0-6].)/g);
      var _0x2bf649 = _0x6f8f9f && parseInt(_0x6f8f9f[0].split("/")[1], 10) < 33;
      _0x5c6999._codecs = {
        mp3: !_0x2bf649 && (!!_0x2ab9c1 || !!_0x29c65b.canPlayType("audio/mp3;").replace(/^no$/, "")),
        mpeg: !!_0x2ab9c1,
        opus: !!_0x29c65b.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
        ogg: !!_0x29c65b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
        oga: !!_0x29c65b.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
        wav: !!_0x29c65b.canPlayType("audio/wav; codecs=\"1\"").replace(/^no$/, ""),
        aac: !!_0x29c65b.canPlayType("audio/aac;").replace(/^no$/, ""),
        caf: !!_0x29c65b.canPlayType("audio/x-caf;").replace(/^no$/, ""),
        m4a: !!(_0x29c65b.canPlayType("audio/x-m4a;") || _0x29c65b.canPlayType("audio/m4a;") || _0x29c65b.canPlayType("audio/aac;")).replace(/^no$/, ""),
        mp4: !!(_0x29c65b.canPlayType("audio/x-mp4;") || _0x29c65b.canPlayType("audio/mp4;") || _0x29c65b.canPlayType("audio/aac;")).replace(/^no$/, ""),
        weba: !!_0x29c65b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
        webm: !!_0x29c65b.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, ""),
        dolby: !!_0x29c65b.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
        flac: !!(_0x29c65b.canPlayType("audio/x-flac;") || _0x29c65b.canPlayType("audio/flac;")).replace(/^no$/, "")
      };
      return _0x5c6999;
    },
    _enableMobileAudio: function () {
      var _0x476b23 = this || _0x2c4f06;
      var _0x5b0d33 = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(_0x476b23._navigator && _0x476b23._navigator.userAgent);
      var _0x537fae = !!("ontouchend" in window) || !!_0x476b23._navigator && _0x476b23._navigator.maxTouchPoints > 0 || !!_0x476b23._navigator && _0x476b23._navigator.msMaxTouchPoints > 0;
      if (!_0x476b23._mobileEnabled && _0x476b23.ctx && (_0x5b0d33 || _0x537fae)) {
        _0x476b23._mobileEnabled = false;
        if (!_0x476b23._mobileUnloaded && _0x476b23.ctx.sampleRate !== 44100) {
          _0x476b23._mobileUnloaded = true;
          _0x476b23.unload();
        }
        _0x476b23._scratchBuffer = _0x476b23.ctx.createBuffer(1, 1, 22050);
        function _0x182cbe() {
          _0x2c4f06._autoResume();
          var _0x1c36e7 = _0x476b23.ctx.createBufferSource();
          _0x1c36e7.buffer = _0x476b23._scratchBuffer;
          _0x1c36e7.connect(_0x476b23.ctx.destination);
          if (_0x1c36e7.start === undefined) {
            _0x1c36e7.noteOn(0);
          } else {
            _0x1c36e7.start(0);
          }
          if (typeof _0x476b23.ctx.resume == "function") {
            _0x476b23.ctx.resume();
          }
          _0x1c36e7.onended = function () {
            _0x1c36e7.disconnect(0);
            _0x476b23._mobileEnabled = true;
            _0x476b23.mobileAutoEnable = false;
            document.removeEventListener("touchend", _0x182cbe, true);
          };
        }
        document.addEventListener("touchend", _0x182cbe, true);
        return _0x476b23;
      }
    },
    _autoSuspend: function () {
      var _0x19b175 = this;
      if (_0x19b175.autoSuspend && _0x19b175.ctx && _0x19b175.ctx.suspend !== undefined && _0x2c4f06.usingWebAudio) {
        for (var _0x2f9a02 = 0; _0x2f9a02 < _0x19b175._howls.length; _0x2f9a02++) {
          if (_0x19b175._howls[_0x2f9a02]._webAudio) {
            for (var _0x2c9e46 = 0; _0x2c9e46 < _0x19b175._howls[_0x2f9a02]._sounds.length; _0x2c9e46++) {
              if (!_0x19b175._howls[_0x2f9a02]._sounds[_0x2c9e46]._paused) {
                return _0x19b175;
              }
            }
          }
        }
        if (_0x19b175._suspendTimer) {
          clearTimeout(_0x19b175._suspendTimer);
        }
        _0x19b175._suspendTimer = setTimeout(function () {
          if (_0x19b175.autoSuspend) {
            _0x19b175._suspendTimer = null;
            _0x19b175.state = "suspending";
            _0x19b175.ctx.suspend().then(function () {
              _0x19b175.state = "suspended";
              if (_0x19b175._resumeAfterSuspend) {
                delete _0x19b175._resumeAfterSuspend;
                _0x19b175._autoResume();
              }
            });
          }
        }, 30000);
        return _0x19b175;
      }
    },
    _autoResume: function () {
      var _0x3d19a2 = this;
      if (_0x3d19a2.ctx && _0x3d19a2.ctx.resume !== undefined && _0x2c4f06.usingWebAudio) {
        if (_0x3d19a2.state === "running" && _0x3d19a2._suspendTimer) {
          clearTimeout(_0x3d19a2._suspendTimer);
          _0x3d19a2._suspendTimer = null;
        } else if (_0x3d19a2.state === "suspended") {
          _0x3d19a2.ctx.resume().then(function () {
            _0x3d19a2.state = "running";
            for (var _0x734243 = 0; _0x734243 < _0x3d19a2._howls.length; _0x734243++) {
              _0x3d19a2._howls[_0x734243]._emit("resume");
            }
          });
          if (_0x3d19a2._suspendTimer) {
            clearTimeout(_0x3d19a2._suspendTimer);
            _0x3d19a2._suspendTimer = null;
          }
        } else if (_0x3d19a2.state === "suspending") {
          _0x3d19a2._resumeAfterSuspend = true;
        }
        return _0x3d19a2;
      }
    }
  };
  var _0x2c4f06 = new _0x549c68();
  function _0x30ff0b(_0x28b321) {
    var _0x2eb435 = this;
    if (!_0x28b321.src || _0x28b321.src.length === 0) {
      console.error("An array of source files must be passed with any new Howl.");
      return;
    }
    _0x2eb435.init(_0x28b321);
  }
  _0x30ff0b.prototype = {
    init: function (_0x584586) {
      var _0x35a931 = this;
      if (!_0x2c4f06.ctx) {
        _0x462746();
      }
      _0x35a931._autoplay = _0x584586.autoplay || false;
      _0x35a931._format = typeof _0x584586.format != "string" ? _0x584586.format : [_0x584586.format];
      _0x35a931._html5 = _0x584586.html5 || false;
      _0x35a931._muted = _0x584586.mute || false;
      _0x35a931._loop = _0x584586.loop || false;
      _0x35a931._pool = _0x584586.pool || 5;
      _0x35a931._preload = typeof _0x584586.preload != "boolean" || _0x584586.preload;
      _0x35a931._rate = _0x584586.rate || 1;
      _0x35a931._sprite = _0x584586.sprite || {};
      _0x35a931._src = typeof _0x584586.src != "string" ? _0x584586.src : [_0x584586.src];
      _0x35a931._volume = _0x584586.volume !== undefined ? _0x584586.volume : 1;
      _0x35a931._duration = 0;
      _0x35a931._state = "unloaded";
      _0x35a931._sounds = [];
      _0x35a931._endTimers = {};
      _0x35a931._queue = [];
      _0x35a931._onend = _0x584586.onend ? [{
        fn: _0x584586.onend
      }] : [];
      _0x35a931._onfade = _0x584586.onfade ? [{
        fn: _0x584586.onfade
      }] : [];
      _0x35a931._onload = _0x584586.onload ? [{
        fn: _0x584586.onload
      }] : [];
      _0x35a931._onloaderror = _0x584586.onloaderror ? [{
        fn: _0x584586.onloaderror
      }] : [];
      _0x35a931._onpause = _0x584586.onpause ? [{
        fn: _0x584586.onpause
      }] : [];
      _0x35a931._onplay = _0x584586.onplay ? [{
        fn: _0x584586.onplay
      }] : [];
      _0x35a931._onstop = _0x584586.onstop ? [{
        fn: _0x584586.onstop
      }] : [];
      _0x35a931._onmute = _0x584586.onmute ? [{
        fn: _0x584586.onmute
      }] : [];
      _0x35a931._onvolume = _0x584586.onvolume ? [{
        fn: _0x584586.onvolume
      }] : [];
      _0x35a931._onrate = _0x584586.onrate ? [{
        fn: _0x584586.onrate
      }] : [];
      _0x35a931._onseek = _0x584586.onseek ? [{
        fn: _0x584586.onseek
      }] : [];
      _0x35a931._onresume = [];
      _0x35a931._webAudio = _0x2c4f06.usingWebAudio && !_0x35a931._html5;
      if (_0x2c4f06.ctx !== undefined && _0x2c4f06.ctx && _0x2c4f06.mobileAutoEnable) {
        _0x2c4f06._enableMobileAudio();
      }
      _0x2c4f06._howls.push(_0x35a931);
      if (_0x35a931._autoplay) {
        _0x35a931._queue.push({
          event: "play",
          action: function () {
            _0x35a931.play();
          }
        });
      }
      if (_0x35a931._preload) {
        _0x35a931.load();
      }
      return _0x35a931;
    },
    load: function () {
      var _0x1315f0 = this;
      var _0x2c172c = null;
      if (_0x2c4f06.noAudio) {
        _0x1315f0._emit("loaderror", null, "No audio support.");
        return;
      }
      if (typeof _0x1315f0._src == "string") {
        _0x1315f0._src = [_0x1315f0._src];
      }
      for (var _0x28b442 = 0; _0x28b442 < _0x1315f0._src.length; _0x28b442++) {
        var _0x1200ef;
        var _0x442bde;
        if (_0x1315f0._format && _0x1315f0._format[_0x28b442]) {
          _0x1200ef = _0x1315f0._format[_0x28b442];
        } else {
          if (typeof (_0x442bde = _0x1315f0._src[_0x28b442]) != "string") {
            _0x1315f0._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
            continue;
          }
          _0x1200ef = /^data:audio\/([^;,]+);/i.exec(_0x442bde);
          _0x1200ef ||= /\.([^.]+)$/.exec(_0x442bde.split("?", 1)[0]);
          _0x1200ef &&= _0x1200ef[1].toLowerCase();
        }
        if (!_0x1200ef) {
          console.warn("No file extension was found. Consider using the \"format\" property or specify an extension.");
        }
        if (_0x1200ef && _0x2c4f06.codecs(_0x1200ef)) {
          _0x2c172c = _0x1315f0._src[_0x28b442];
          break;
        }
      }
      if (_0x2c172c) {
        _0x1315f0._src = _0x2c172c;
        _0x1315f0._state = "loading";
        if (window.location.protocol === "https:" && _0x2c172c.slice(0, 5) === "http:") {
          _0x1315f0._html5 = true;
          _0x1315f0._webAudio = false;
        }
        new _0x26ab7b(_0x1315f0);
        if (_0x1315f0._webAudio) {
          _0x34408e(_0x1315f0);
        }
        return _0x1315f0;
      } else {
        _0x1315f0._emit("loaderror", null, "No codec support for selected audio sources.");
        return;
      }
    },
    play: function (_0x5272aa, _0x314bbd) {
      var _0x1e2e9f = this;
      var _0x2e2844 = null;
      if (typeof _0x5272aa == "number") {
        _0x2e2844 = _0x5272aa;
        _0x5272aa = null;
      } else {
        if (typeof _0x5272aa == "string" && _0x1e2e9f._state === "loaded" && !_0x1e2e9f._sprite[_0x5272aa]) {
          return null;
        }
        if (_0x5272aa === undefined) {
          _0x5272aa = "__default";
          for (var _0x904e33 = 0, _0x36fbc9 = 0; _0x36fbc9 < _0x1e2e9f._sounds.length; _0x36fbc9++) {
            if (_0x1e2e9f._sounds[_0x36fbc9]._paused && !_0x1e2e9f._sounds[_0x36fbc9]._ended) {
              _0x904e33++;
              _0x2e2844 = _0x1e2e9f._sounds[_0x36fbc9]._id;
            }
          }
          if (_0x904e33 === 1) {
            _0x5272aa = null;
          } else {
            _0x2e2844 = null;
          }
        }
      }
      var _0x786532 = _0x2e2844 ? _0x1e2e9f._soundById(_0x2e2844) : _0x1e2e9f._inactiveSound();
      if (!_0x786532) {
        return null;
      }
      if (_0x2e2844 && !_0x5272aa) {
        _0x5272aa = _0x786532._sprite || "__default";
      }
      if (_0x1e2e9f._state !== "loaded") {
        _0x786532._sprite = _0x5272aa;
        _0x786532._ended = false;
        var _0x964a14 = _0x786532._id;
        _0x1e2e9f._queue.push({
          event: "play",
          action: function () {
            _0x1e2e9f.play(_0x964a14);
          }
        });
        return _0x964a14;
      }
      if (_0x2e2844 && !_0x786532._paused) {
        if (!_0x314bbd) {
          setTimeout(function () {
            _0x1e2e9f._emit("play", _0x786532._id);
          }, 0);
        }
        return _0x786532._id;
      }
      if (_0x1e2e9f._webAudio) {
        _0x2c4f06._autoResume();
      }
      var _0x1e4e52 = Math.max(0, _0x786532._seek > 0 ? _0x786532._seek : _0x1e2e9f._sprite[_0x5272aa][0] / 1000);
      var _0x50917a = Math.max(0, (_0x1e2e9f._sprite[_0x5272aa][0] + _0x1e2e9f._sprite[_0x5272aa][1]) / 1000 - _0x1e4e52);
      var _0x283958 = _0x50917a * 1000 / Math.abs(_0x786532._rate);
      _0x786532._paused = false;
      _0x786532._ended = false;
      _0x786532._sprite = _0x5272aa;
      _0x786532._seek = _0x1e4e52;
      _0x786532._start = _0x1e2e9f._sprite[_0x5272aa][0] / 1000;
      _0x786532._stop = (_0x1e2e9f._sprite[_0x5272aa][0] + _0x1e2e9f._sprite[_0x5272aa][1]) / 1000;
      _0x786532._loop = !!_0x786532._loop || !!_0x1e2e9f._sprite[_0x5272aa][2];
      var _0x58bf14 = _0x786532._node;
      if (_0x1e2e9f._webAudio) {
        function _0x2ceb23() {
          _0x1e2e9f._refreshBuffer(_0x786532);
          var _0x1328f9 = _0x786532._muted || _0x1e2e9f._muted ? 0 : _0x786532._volume;
          _0x58bf14.gain.setValueAtTime(_0x1328f9, _0x2c4f06.ctx.currentTime);
          _0x786532._playStart = _0x2c4f06.ctx.currentTime;
          if (_0x58bf14.bufferSource.start === undefined) {
            if (_0x786532._loop) {
              _0x58bf14.bufferSource.noteGrainOn(0, _0x1e4e52, 86400);
            } else {
              _0x58bf14.bufferSource.noteGrainOn(0, _0x1e4e52, _0x50917a);
            }
          } else if (_0x786532._loop) {
            _0x58bf14.bufferSource.start(0, _0x1e4e52, 86400);
          } else {
            _0x58bf14.bufferSource.start(0, _0x1e4e52, _0x50917a);
          }
          if (_0x283958 !== Infinity) {
            _0x1e2e9f._endTimers[_0x786532._id] = setTimeout(_0x1e2e9f._ended.bind(_0x1e2e9f, _0x786532), _0x283958);
          }
          if (!_0x314bbd) {
            setTimeout(function () {
              _0x1e2e9f._emit("play", _0x786532._id);
            }, 0);
          }
        }
        var _0x542dab = _0x2c4f06.state === "running";
        if (_0x1e2e9f._state === "loaded" && _0x542dab) {
          _0x2ceb23();
        } else {
          var _0x18286a = _0x542dab || _0x1e2e9f._state !== "loaded" ? "load" : "resume";
          _0x1e2e9f.once(_0x18286a, _0x2ceb23, _0x542dab ? _0x786532._id : null);
          _0x1e2e9f._clearTimer(_0x786532._id);
        }
      } else {
        function _0x5dcc4c() {
          _0x58bf14.currentTime = _0x1e4e52;
          _0x58bf14.muted = _0x786532._muted || _0x1e2e9f._muted || _0x2c4f06._muted || _0x58bf14.muted;
          _0x58bf14.volume = _0x786532._volume * _0x2c4f06.volume();
          _0x58bf14.playbackRate = _0x786532._rate;
          _0x58bf14.play();
          if (_0x283958 !== Infinity) {
            _0x1e2e9f._endTimers[_0x786532._id] = setTimeout(_0x1e2e9f._ended.bind(_0x1e2e9f, _0x786532), _0x283958);
          }
          if (!_0x314bbd) {
            _0x1e2e9f._emit("play", _0x786532._id);
          }
        }
        var _0x8f42d5 = _0x1e2e9f._state === "loaded" && (window && window.ejecta || !_0x58bf14.readyState && _0x2c4f06._navigator.isCocoonJS);
        if (_0x58bf14.readyState === 4 || _0x8f42d5) {
          _0x5dcc4c();
        } else {
          function _0x44df7c() {
            _0x5dcc4c();
            _0x58bf14.removeEventListener(_0x2c4f06._canPlayEvent, _0x44df7c, false);
          }
          _0x58bf14.addEventListener(_0x2c4f06._canPlayEvent, _0x44df7c, false);
          _0x1e2e9f._clearTimer(_0x786532._id);
        }
      }
      return _0x786532._id;
    },
    pause: function (_0x37236f) {
      var _0x398ad4 = this;
      if (_0x398ad4._state !== "loaded") {
        _0x398ad4._queue.push({
          event: "pause",
          action: function () {
            _0x398ad4.pause(_0x37236f);
          }
        });
        return _0x398ad4;
      }
      for (var _0x258a42 = _0x398ad4._getSoundIds(_0x37236f), _0x28f4cb = 0; _0x28f4cb < _0x258a42.length; _0x28f4cb++) {
        _0x398ad4._clearTimer(_0x258a42[_0x28f4cb]);
        var _0x1b9159 = _0x398ad4._soundById(_0x258a42[_0x28f4cb]);
        if (_0x1b9159 && !_0x1b9159._paused && (_0x1b9159._seek = _0x398ad4.seek(_0x258a42[_0x28f4cb]), _0x1b9159._rateSeek = 0, _0x1b9159._paused = true, _0x398ad4._stopFade(_0x258a42[_0x28f4cb]), _0x1b9159._node)) {
          if (_0x398ad4._webAudio) {
            if (!_0x1b9159._node.bufferSource) {
              continue;
            }
            if (_0x1b9159._node.bufferSource.stop === undefined) {
              _0x1b9159._node.bufferSource.noteOff(0);
            } else {
              _0x1b9159._node.bufferSource.stop(0);
            }
            _0x398ad4._cleanBuffer(_0x1b9159._node);
          } else if (!isNaN(_0x1b9159._node.duration) || _0x1b9159._node.duration === Infinity) {
            _0x1b9159._node.pause();
          }
        }
        if (!arguments[1]) {
          _0x398ad4._emit("pause", _0x1b9159 ? _0x1b9159._id : null);
        }
      }
      return _0x398ad4;
    },
    stop: function (_0x22d2d3, _0x33da5b) {
      var _0x2a14dd = this;
      if (_0x2a14dd._state !== "loaded") {
        _0x2a14dd._queue.push({
          event: "stop",
          action: function () {
            _0x2a14dd.stop(_0x22d2d3);
          }
        });
        return _0x2a14dd;
      }
      for (var _0x1cdb76 = _0x2a14dd._getSoundIds(_0x22d2d3), _0x15c659 = 0; _0x15c659 < _0x1cdb76.length; _0x15c659++) {
        _0x2a14dd._clearTimer(_0x1cdb76[_0x15c659]);
        var _0x395b20 = _0x2a14dd._soundById(_0x1cdb76[_0x15c659]);
        if (_0x395b20) {
          _0x395b20._seek = _0x395b20._start || 0;
          _0x395b20._rateSeek = 0;
          _0x395b20._paused = true;
          _0x395b20._ended = true;
          _0x2a14dd._stopFade(_0x1cdb76[_0x15c659]);
          if (_0x395b20._node) {
            if (_0x2a14dd._webAudio) {
              if (_0x395b20._node.bufferSource) {
                if (_0x395b20._node.bufferSource.stop === undefined) {
                  _0x395b20._node.bufferSource.noteOff(0);
                } else {
                  _0x395b20._node.bufferSource.stop(0);
                }
                _0x2a14dd._cleanBuffer(_0x395b20._node);
              }
            } else if (!isNaN(_0x395b20._node.duration) || _0x395b20._node.duration === Infinity) {
              _0x395b20._node.currentTime = _0x395b20._start || 0;
              _0x395b20._node.pause();
            }
          }
          if (!_0x33da5b) {
            _0x2a14dd._emit("stop", _0x395b20._id);
          }
        }
      }
      return _0x2a14dd;
    },
    mute: function (_0xdd39fb, _0x898e33) {
      var _0x5b661e = this;
      if (_0x5b661e._state !== "loaded") {
        _0x5b661e._queue.push({
          event: "mute",
          action: function () {
            _0x5b661e.mute(_0xdd39fb, _0x898e33);
          }
        });
        return _0x5b661e;
      }
      if (_0x898e33 === undefined) {
        if (typeof _0xdd39fb != "boolean") {
          return _0x5b661e._muted;
        }
        _0x5b661e._muted = _0xdd39fb;
      }
      for (var _0x268f0e = _0x5b661e._getSoundIds(_0x898e33), _0x18e5e1 = 0; _0x18e5e1 < _0x268f0e.length; _0x18e5e1++) {
        var _0x5b241c = _0x5b661e._soundById(_0x268f0e[_0x18e5e1]);
        if (_0x5b241c) {
          _0x5b241c._muted = _0xdd39fb;
          if (_0x5b661e._webAudio && _0x5b241c._node) {
            _0x5b241c._node.gain.setValueAtTime(_0xdd39fb ? 0 : _0x5b241c._volume, _0x2c4f06.ctx.currentTime);
          } else if (_0x5b241c._node) {
            _0x5b241c._node.muted = !!_0x2c4f06._muted || _0xdd39fb;
          }
          _0x5b661e._emit("mute", _0x5b241c._id);
        }
      }
      return _0x5b661e;
    },
    volume: function () {
      var _0x1a0a1d;
      var _0x2de314;
      var _0x17e4ca = this;
      var _0x248883 = arguments;
      if (_0x248883.length === 0) {
        return _0x17e4ca._volume;
      }
      if (_0x248883.length === 1 || _0x248883.length === 2 && _0x248883[1] === undefined) {
        if (_0x17e4ca._getSoundIds().indexOf(_0x248883[0]) >= 0) {
          _0x2de314 = parseInt(_0x248883[0], 10);
        } else {
          _0x1a0a1d = parseFloat(_0x248883[0]);
        }
      } else if (_0x248883.length >= 2) {
        _0x1a0a1d = parseFloat(_0x248883[0]);
        _0x2de314 = parseInt(_0x248883[1], 10);
      }
      var _0x46c28c;
      if (_0x1a0a1d === undefined || _0x1a0a1d < 0 || _0x1a0a1d > 1) {
        _0x46c28c = _0x2de314 ? _0x17e4ca._soundById(_0x2de314) : _0x17e4ca._sounds[0];
        if (_0x46c28c) {
          return _0x46c28c._volume;
        } else {
          return 0;
        }
      }
      if (_0x17e4ca._state !== "loaded") {
        _0x17e4ca._queue.push({
          event: "volume",
          action: function () {
            _0x17e4ca.volume.apply(_0x17e4ca, _0x248883);
          }
        });
        return _0x17e4ca;
      }
      if (_0x2de314 === undefined) {
        _0x17e4ca._volume = _0x1a0a1d;
      }
      _0x2de314 = _0x17e4ca._getSoundIds(_0x2de314);
      for (var _0x575c73 = 0; _0x575c73 < _0x2de314.length; _0x575c73++) {
        if (_0x46c28c = _0x17e4ca._soundById(_0x2de314[_0x575c73])) {
          _0x46c28c._volume = _0x1a0a1d;
          if (!_0x248883[2]) {
            _0x17e4ca._stopFade(_0x2de314[_0x575c73]);
          }
          if (_0x17e4ca._webAudio && _0x46c28c._node && !_0x46c28c._muted) {
            _0x46c28c._node.gain.setValueAtTime(_0x1a0a1d, _0x2c4f06.ctx.currentTime);
          } else if (_0x46c28c._node && !_0x46c28c._muted) {
            _0x46c28c._node.volume = _0x1a0a1d * _0x2c4f06.volume();
          }
          _0x17e4ca._emit("volume", _0x46c28c._id);
        }
      }
      return _0x17e4ca;
    },
    fade: function (_0x57abca, _0x342667, _0x234fa8, _0x67ef9) {
      var _0x507f29 = this;
      var _0x11721d = Math.abs(_0x57abca - _0x342667);
      var _0x29bce7 = _0x57abca > _0x342667 ? "out" : "in";
      var _0x4ac208 = _0x11721d / 0.01;
      var _0x84886d = _0x4ac208 > 0 ? _0x234fa8 / _0x4ac208 : _0x234fa8;
      if (_0x84886d < 4) {
        _0x4ac208 = Math.ceil(_0x4ac208 / (4 / _0x84886d));
        _0x84886d = 4;
      }
      if (_0x507f29._state !== "loaded") {
        _0x507f29._queue.push({
          event: "fade",
          action: function () {
            _0x507f29.fade(_0x57abca, _0x342667, _0x234fa8, _0x67ef9);
          }
        });
        return _0x507f29;
      }
      _0x507f29.volume(_0x57abca, _0x67ef9);
      for (var _0x2e1d66 = _0x507f29._getSoundIds(_0x67ef9), _0x5b52aa = 0; _0x5b52aa < _0x2e1d66.length; _0x5b52aa++) {
        var _0x52ed50 = _0x507f29._soundById(_0x2e1d66[_0x5b52aa]);
        if (_0x52ed50) {
          if (!_0x67ef9) {
            _0x507f29._stopFade(_0x2e1d66[_0x5b52aa]);
          }
          if (_0x507f29._webAudio && !_0x52ed50._muted) {
            var _0x31b06b = _0x2c4f06.ctx.currentTime;
            var _0x49ecc7 = _0x31b06b + _0x234fa8 / 1000;
            _0x52ed50._volume = _0x57abca;
            _0x52ed50._node.gain.setValueAtTime(_0x57abca, _0x31b06b);
            _0x52ed50._node.gain.linearRampToValueAtTime(_0x342667, _0x49ecc7);
          }
          var _0x388298 = _0x57abca;
          _0x52ed50._interval = setInterval(function (_0x1ec63d, _0x497d43) {
            if (_0x4ac208 > 0) {
              _0x388298 += _0x29bce7 === "in" ? 0.01 : -0.01;
            }
            _0x388298 = Math.max(0, _0x388298);
            _0x388298 = Math.min(1, _0x388298);
            _0x388298 = Math.round(_0x388298 * 100) / 100;
            if (_0x507f29._webAudio) {
              if (_0x67ef9 === undefined) {
                _0x507f29._volume = _0x388298;
              }
              _0x497d43._volume = _0x388298;
            } else {
              _0x507f29.volume(_0x388298, _0x1ec63d, true);
            }
            if (_0x342667 < _0x57abca && _0x388298 <= _0x342667 || _0x342667 > _0x57abca && _0x388298 >= _0x342667) {
              clearInterval(_0x497d43._interval);
              _0x497d43._interval = null;
              _0x507f29.volume(_0x342667, _0x1ec63d);
              _0x507f29._emit("fade", _0x1ec63d);
            }
          }.bind(_0x507f29, _0x2e1d66[_0x5b52aa], _0x52ed50), _0x84886d);
        }
      }
      return _0x507f29;
    },
    _stopFade: function (_0x15fcf9) {
      var _0x25188b = this;
      var _0x320f74 = _0x25188b._soundById(_0x15fcf9);
      if (_0x320f74 && _0x320f74._interval) {
        if (_0x25188b._webAudio) {
          _0x320f74._node.gain.cancelScheduledValues(_0x2c4f06.ctx.currentTime);
        }
        clearInterval(_0x320f74._interval);
        _0x320f74._interval = null;
        _0x25188b._emit("fade", _0x15fcf9);
      }
      return _0x25188b;
    },
    loop: function () {
      var _0x3efb52;
      var _0x425142;
      var _0x20d9a8;
      var _0x24e33a = this;
      var _0x3c7386 = arguments;
      if (_0x3c7386.length === 0) {
        return _0x24e33a._loop;
      }
      if (_0x3c7386.length === 1) {
        if (typeof _0x3c7386[0] != "boolean") {
          return !!(_0x20d9a8 = _0x24e33a._soundById(parseInt(_0x3c7386[0], 10))) && _0x20d9a8._loop;
        }
        _0x3efb52 = _0x3c7386[0];
        _0x24e33a._loop = _0x3efb52;
      } else if (_0x3c7386.length === 2) {
        _0x3efb52 = _0x3c7386[0];
        _0x425142 = parseInt(_0x3c7386[1], 10);
      }
      for (var _0x3ddf10 = _0x24e33a._getSoundIds(_0x425142), _0x45bd53 = 0; _0x45bd53 < _0x3ddf10.length; _0x45bd53++) {
        if (_0x20d9a8 = _0x24e33a._soundById(_0x3ddf10[_0x45bd53])) {
          _0x20d9a8._loop = _0x3efb52;
          if (_0x24e33a._webAudio && _0x20d9a8._node && _0x20d9a8._node.bufferSource) {
            _0x20d9a8._node.bufferSource.loop = _0x3efb52;
            if (_0x3efb52) {
              _0x20d9a8._node.bufferSource.loopStart = _0x20d9a8._start || 0;
              _0x20d9a8._node.bufferSource.loopEnd = _0x20d9a8._stop;
            }
          }
        }
      }
      return _0x24e33a;
    },
    rate: function () {
      var _0x397146;
      var _0x1a2ab9;
      var _0x521c5d = this;
      var _0x3f5bc6 = arguments;
      if (_0x3f5bc6.length === 0) {
        _0x1a2ab9 = _0x521c5d._sounds[0]._id;
      } else if (_0x3f5bc6.length === 1) {
        var _0x557550 = _0x521c5d._getSoundIds();
        var _0x29ccc4 = _0x557550.indexOf(_0x3f5bc6[0]);
        if (_0x29ccc4 >= 0) {
          _0x1a2ab9 = parseInt(_0x3f5bc6[0], 10);
        } else {
          _0x397146 = parseFloat(_0x3f5bc6[0]);
        }
      } else if (_0x3f5bc6.length === 2) {
        _0x397146 = parseFloat(_0x3f5bc6[0]);
        _0x1a2ab9 = parseInt(_0x3f5bc6[1], 10);
      }
      var _0x450af5;
      if (typeof _0x397146 != "number") {
        _0x450af5 = _0x521c5d._soundById(_0x1a2ab9);
        if (_0x450af5) {
          return _0x450af5._rate;
        } else {
          return _0x521c5d._rate;
        }
      }
      if (_0x521c5d._state !== "loaded") {
        _0x521c5d._queue.push({
          event: "rate",
          action: function () {
            _0x521c5d.rate.apply(_0x521c5d, _0x3f5bc6);
          }
        });
        return _0x521c5d;
      }
      if (_0x1a2ab9 === undefined) {
        _0x521c5d._rate = _0x397146;
      }
      _0x1a2ab9 = _0x521c5d._getSoundIds(_0x1a2ab9);
      for (var _0x49954a = 0; _0x49954a < _0x1a2ab9.length; _0x49954a++) {
        if (_0x450af5 = _0x521c5d._soundById(_0x1a2ab9[_0x49954a])) {
          _0x450af5._rateSeek = _0x521c5d.seek(_0x1a2ab9[_0x49954a]);
          _0x450af5._playStart = _0x521c5d._webAudio ? _0x2c4f06.ctx.currentTime : _0x450af5._playStart;
          _0x450af5._rate = _0x397146;
          if (_0x521c5d._webAudio && _0x450af5._node && _0x450af5._node.bufferSource) {
            _0x450af5._node.bufferSource.playbackRate.value = _0x397146;
          } else if (_0x450af5._node) {
            _0x450af5._node.playbackRate = _0x397146;
          }
          var _0x57d214 = _0x521c5d.seek(_0x1a2ab9[_0x49954a]);
          var _0x293195 = (_0x521c5d._sprite[_0x450af5._sprite][0] + _0x521c5d._sprite[_0x450af5._sprite][1]) / 1000 - _0x57d214;
          var _0x543028 = _0x293195 * 1000 / Math.abs(_0x450af5._rate);
          if (!!_0x521c5d._endTimers[_0x1a2ab9[_0x49954a]] || !_0x450af5._paused) {
            _0x521c5d._clearTimer(_0x1a2ab9[_0x49954a]);
            _0x521c5d._endTimers[_0x1a2ab9[_0x49954a]] = setTimeout(_0x521c5d._ended.bind(_0x521c5d, _0x450af5), _0x543028);
          }
          _0x521c5d._emit("rate", _0x450af5._id);
        }
      }
      return _0x521c5d;
    },
    seek: function () {
      var _0xd44fde;
      var _0x12c820;
      var _0x5b3a31 = this;
      var _0x12091c = arguments;
      if (_0x12091c.length === 0) {
        _0x12c820 = _0x5b3a31._sounds[0]._id;
      } else if (_0x12091c.length === 1) {
        var _0x2157ac = _0x5b3a31._getSoundIds();
        var _0x33c6d8 = _0x2157ac.indexOf(_0x12091c[0]);
        if (_0x33c6d8 >= 0) {
          _0x12c820 = parseInt(_0x12091c[0], 10);
        } else {
          _0x12c820 = _0x5b3a31._sounds[0]._id;
          _0xd44fde = parseFloat(_0x12091c[0]);
        }
      } else if (_0x12091c.length === 2) {
        _0xd44fde = parseFloat(_0x12091c[0]);
        _0x12c820 = parseInt(_0x12091c[1], 10);
      }
      if (_0x12c820 === undefined) {
        return _0x5b3a31;
      }
      if (_0x5b3a31._state !== "loaded") {
        _0x5b3a31._queue.push({
          event: "seek",
          action: function () {
            _0x5b3a31.seek.apply(_0x5b3a31, _0x12091c);
          }
        });
        return _0x5b3a31;
      }
      var _0x41c266 = _0x5b3a31._soundById(_0x12c820);
      if (_0x41c266) {
        if (typeof _0xd44fde != "number" || _0xd44fde < 0) {
          if (_0x5b3a31._webAudio) {
            var _0x23a817 = _0x5b3a31.playing(_0x12c820) ? _0x2c4f06.ctx.currentTime - _0x41c266._playStart : 0;
            var _0x433037 = _0x41c266._rateSeek ? _0x41c266._rateSeek - _0x41c266._seek : 0;
            return _0x41c266._seek + (_0x433037 + _0x23a817 * Math.abs(_0x41c266._rate));
          }
          return _0x41c266._node.currentTime;
        }
        var _0x2aecfa = _0x5b3a31.playing(_0x12c820);
        if (_0x2aecfa) {
          _0x5b3a31.pause(_0x12c820, true);
        }
        _0x41c266._seek = _0xd44fde;
        _0x41c266._ended = false;
        _0x5b3a31._clearTimer(_0x12c820);
        if (_0x2aecfa) {
          _0x5b3a31.play(_0x12c820, true);
        }
        if (!_0x5b3a31._webAudio && _0x41c266._node) {
          _0x41c266._node.currentTime = _0xd44fde;
        }
        _0x5b3a31._emit("seek", _0x12c820);
      }
      return _0x5b3a31;
    },
    playing: function (_0x15cf11) {
      var _0x372a43 = this;
      if (typeof _0x15cf11 == "number") {
        var _0x5d3832 = _0x372a43._soundById(_0x15cf11);
        return !!_0x5d3832 && !_0x5d3832._paused;
      }
      for (var _0x38b3a5 = 0; _0x38b3a5 < _0x372a43._sounds.length; _0x38b3a5++) {
        if (!_0x372a43._sounds[_0x38b3a5]._paused) {
          return true;
        }
      }
      return false;
    },
    duration: function (_0x5e97f3) {
      var _0x38a319 = this;
      var _0x172cdd = _0x38a319._duration;
      var _0x1d5e7a = _0x38a319._soundById(_0x5e97f3);
      if (_0x1d5e7a) {
        _0x172cdd = _0x38a319._sprite[_0x1d5e7a._sprite][1] / 1000;
      }
      return _0x172cdd;
    },
    state: function () {
      return this._state;
    },
    unload: function () {
      for (var _0x4c08cc = this, _0x35fc86 = _0x4c08cc._sounds, _0x534c03 = 0; _0x534c03 < _0x35fc86.length; _0x534c03++) {
        if (!_0x35fc86[_0x534c03]._paused) {
          _0x4c08cc.stop(_0x35fc86[_0x534c03]._id);
        }
        if (!_0x4c08cc._webAudio) {
          if (!/MSIE |Trident\//.test(_0x2c4f06._navigator && _0x2c4f06._navigator.userAgent)) {
            _0x35fc86[_0x534c03]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA";
          }
          _0x35fc86[_0x534c03]._node.removeEventListener("error", _0x35fc86[_0x534c03]._errorFn, false);
          _0x35fc86[_0x534c03]._node.removeEventListener(_0x2c4f06._canPlayEvent, _0x35fc86[_0x534c03]._loadFn, false);
        }
        delete _0x35fc86[_0x534c03]._node;
        _0x4c08cc._clearTimer(_0x35fc86[_0x534c03]._id);
        var _0x56d865 = _0x2c4f06._howls.indexOf(_0x4c08cc);
        if (_0x56d865 >= 0) {
          _0x2c4f06._howls.splice(_0x56d865, 1);
        }
      }
      var _0x39e69c = true;
      for (_0x534c03 = 0; _0x534c03 < _0x2c4f06._howls.length; _0x534c03++) {
        if (_0x2c4f06._howls[_0x534c03]._src === _0x4c08cc._src) {
          _0x39e69c = false;
          break;
        }
      }
      if (_0x4d93b4 && _0x39e69c) {
        delete _0x4d93b4[_0x4c08cc._src];
      }
      _0x2c4f06.noAudio = false;
      _0x4c08cc._state = "unloaded";
      _0x4c08cc._sounds = [];
      _0x4c08cc = null;
      return null;
    },
    on: function (_0x506b41, _0x316136, _0x48e82a, _0x485754) {
      var _0x2d910f = this;
      var _0x22ea59 = _0x2d910f["_on" + _0x506b41];
      if (typeof _0x316136 == "function") {
        _0x22ea59.push(_0x485754 ? {
          id: _0x48e82a,
          fn: _0x316136,
          once: _0x485754
        } : {
          id: _0x48e82a,
          fn: _0x316136
        });
      }
      return _0x2d910f;
    },
    off: function (_0x479d58, _0x12e630, _0xf4f67a) {
      var _0x415b0a = this;
      var _0x1f0aaa = _0x415b0a["_on" + _0x479d58];
      var _0x1a743a = 0;
      if (typeof _0x12e630 == "number") {
        _0xf4f67a = _0x12e630;
        _0x12e630 = null;
      }
      if (_0x12e630 || _0xf4f67a) {
        for (_0x1a743a = 0; _0x1a743a < _0x1f0aaa.length; _0x1a743a++) {
          var _0xd46d87 = _0xf4f67a === _0x1f0aaa[_0x1a743a].id;
          if (_0x12e630 === _0x1f0aaa[_0x1a743a].fn && _0xd46d87 || !_0x12e630 && _0xd46d87) {
            _0x1f0aaa.splice(_0x1a743a, 1);
            break;
          }
        }
      } else if (_0x479d58) {
        _0x415b0a["_on" + _0x479d58] = [];
      } else {
        var _0x2fffb9 = Object.keys(_0x415b0a);
        for (_0x1a743a = 0; _0x1a743a < _0x2fffb9.length; _0x1a743a++) {
          if (_0x2fffb9[_0x1a743a].indexOf("_on") === 0 && Array.isArray(_0x415b0a[_0x2fffb9[_0x1a743a]])) {
            _0x415b0a[_0x2fffb9[_0x1a743a]] = [];
          }
        }
      }
      return _0x415b0a;
    },
    once: function (_0x1856f3, _0x251a6b, _0x552ad6) {
      var _0x46e355 = this;
      _0x46e355.on(_0x1856f3, _0x251a6b, _0x552ad6, 1);
      return _0x46e355;
    },
    _emit: function (_0x311c7c, _0x43561, _0x587357) {
      for (var _0x27f7e1 = this, _0x3b0623 = _0x27f7e1["_on" + _0x311c7c], _0x256641 = _0x3b0623.length - 1; _0x256641 >= 0; _0x256641--) {
        if (!_0x3b0623[_0x256641].id || _0x3b0623[_0x256641].id === _0x43561 || _0x311c7c === "load") {
          setTimeout(function (_0xbbbc51) {
            _0xbbbc51.call(this, _0x43561, _0x587357);
          }.bind(_0x27f7e1, _0x3b0623[_0x256641].fn), 0);
          if (_0x3b0623[_0x256641].once) {
            _0x27f7e1.off(_0x311c7c, _0x3b0623[_0x256641].fn, _0x3b0623[_0x256641].id);
          }
        }
      }
      return _0x27f7e1;
    },
    _loadQueue: function () {
      var _0x1dff52 = this;
      if (_0x1dff52._queue.length > 0) {
        var _0x154134 = _0x1dff52._queue[0];
        _0x1dff52.once(_0x154134.event, function () {
          _0x1dff52._queue.shift();
          _0x1dff52._loadQueue();
        });
        _0x154134.action();
      }
      return _0x1dff52;
    },
    _ended: function (_0x38f824) {
      var _0x205958 = this;
      var _0x51fcf8 = _0x38f824._sprite;
      if (!_0x205958._webAudio && _0x205958._node && !_0x205958._node.ended) {
        setTimeout(_0x205958._ended.bind(_0x205958, _0x38f824), 100);
        return _0x205958;
      }
      var _0x2a90f8 = !!_0x38f824._loop || !!_0x205958._sprite[_0x51fcf8][2];
      _0x205958._emit("end", _0x38f824._id);
      if (!_0x205958._webAudio && _0x2a90f8) {
        _0x205958.stop(_0x38f824._id, true).play(_0x38f824._id);
      }
      if (_0x205958._webAudio && _0x2a90f8) {
        _0x205958._emit("play", _0x38f824._id);
        _0x38f824._seek = _0x38f824._start || 0;
        _0x38f824._rateSeek = 0;
        _0x38f824._playStart = _0x2c4f06.ctx.currentTime;
        var _0x530ff6 = (_0x38f824._stop - _0x38f824._start) * 1000 / Math.abs(_0x38f824._rate);
        _0x205958._endTimers[_0x38f824._id] = setTimeout(_0x205958._ended.bind(_0x205958, _0x38f824), _0x530ff6);
      }
      if (_0x205958._webAudio && !_0x2a90f8) {
        _0x38f824._paused = true;
        _0x38f824._ended = true;
        _0x38f824._seek = _0x38f824._start || 0;
        _0x38f824._rateSeek = 0;
        _0x205958._clearTimer(_0x38f824._id);
        _0x205958._cleanBuffer(_0x38f824._node);
        _0x2c4f06._autoSuspend();
      }
      if (!_0x205958._webAudio && !_0x2a90f8) {
        _0x205958.stop(_0x38f824._id);
      }
      return _0x205958;
    },
    _clearTimer: function (_0x3ec7d5) {
      var _0x627491 = this;
      if (_0x627491._endTimers[_0x3ec7d5]) {
        clearTimeout(_0x627491._endTimers[_0x3ec7d5]);
        delete _0x627491._endTimers[_0x3ec7d5];
      }
      return _0x627491;
    },
    _soundById: function (_0x137232) {
      for (var _0x333481 = this, _0x4caccc = 0; _0x4caccc < _0x333481._sounds.length; _0x4caccc++) {
        if (_0x137232 === _0x333481._sounds[_0x4caccc]._id) {
          return _0x333481._sounds[_0x4caccc];
        }
      }
      return null;
    },
    _inactiveSound: function () {
      var _0x482423 = this;
      _0x482423._drain();
      for (var _0x1f8fb0 = 0; _0x1f8fb0 < _0x482423._sounds.length; _0x1f8fb0++) {
        if (_0x482423._sounds[_0x1f8fb0]._ended) {
          return _0x482423._sounds[_0x1f8fb0].reset();
        }
      }
      return new _0x26ab7b(_0x482423);
    },
    _drain: function () {
      var _0xbd77d6 = this;
      var _0x47af20 = _0xbd77d6._pool;
      var _0x16d5fc = 0;
      var _0x1e155c = 0;
      if (_0xbd77d6._sounds.length >= _0x47af20) {
        for (_0x1e155c = 0; _0x1e155c < _0xbd77d6._sounds.length; _0x1e155c++) {
          if (_0xbd77d6._sounds[_0x1e155c]._ended) {
            _0x16d5fc++;
          }
        }
        for (_0x1e155c = _0xbd77d6._sounds.length - 1; _0x1e155c >= 0; _0x1e155c--) {
          if (_0x16d5fc <= _0x47af20) {
            return;
          }
          if (_0xbd77d6._sounds[_0x1e155c]._ended) {
            if (_0xbd77d6._webAudio && _0xbd77d6._sounds[_0x1e155c]._node) {
              _0xbd77d6._sounds[_0x1e155c]._node.disconnect(0);
            }
            _0xbd77d6._sounds.splice(_0x1e155c, 1);
            _0x16d5fc--;
          }
        }
      }
    },
    _getSoundIds: function (_0x31d5b1) {
      var _0x57c17b = this;
      if (_0x31d5b1 === undefined) {
        for (var _0x51ff3c = [], _0x192267 = 0; _0x192267 < _0x57c17b._sounds.length; _0x192267++) {
          _0x51ff3c.push(_0x57c17b._sounds[_0x192267]._id);
        }
        return _0x51ff3c;
      }
      return [_0x31d5b1];
    },
    _refreshBuffer: function (_0x1a628f) {
      var _0x15bfd3 = this;
      _0x1a628f._node.bufferSource = _0x2c4f06.ctx.createBufferSource();
      _0x1a628f._node.bufferSource.buffer = _0x4d93b4[_0x15bfd3._src];
      if (_0x1a628f._panner) {
        _0x1a628f._node.bufferSource.connect(_0x1a628f._panner);
      } else {
        _0x1a628f._node.bufferSource.connect(_0x1a628f._node);
      }
      _0x1a628f._node.bufferSource.loop = _0x1a628f._loop;
      if (_0x1a628f._loop) {
        _0x1a628f._node.bufferSource.loopStart = _0x1a628f._start || 0;
        _0x1a628f._node.bufferSource.loopEnd = _0x1a628f._stop;
      }
      _0x1a628f._node.bufferSource.playbackRate.value = _0x1a628f._rate;
      return _0x15bfd3;
    },
    _cleanBuffer: function (_0x57a95c) {
      var _0x4925df = this;
      if (_0x4925df._scratchBuffer) {
        _0x57a95c.bufferSource.onended = null;
        _0x57a95c.bufferSource.disconnect(0);
        try {
          _0x57a95c.bufferSource.buffer = _0x4925df._scratchBuffer;
        } catch (_0x88988b) {}
      }
      _0x57a95c.bufferSource = null;
      return _0x4925df;
    }
  };
  function _0x26ab7b(_0x17fdc2) {
    this._parent = _0x17fdc2;
    this.init();
  }
  _0x26ab7b.prototype = {
    init: function () {
      var _0x9f965d = this;
      var _0xa7cd38 = _0x9f965d._parent;
      _0x9f965d._muted = _0xa7cd38._muted;
      _0x9f965d._loop = _0xa7cd38._loop;
      _0x9f965d._volume = _0xa7cd38._volume;
      _0x9f965d._rate = _0xa7cd38._rate;
      _0x9f965d._seek = 0;
      _0x9f965d._paused = true;
      _0x9f965d._ended = true;
      _0x9f965d._sprite = "__default";
      _0x9f965d._id = ++_0x2c4f06._counter;
      _0xa7cd38._sounds.push(_0x9f965d);
      _0x9f965d.create();
      return _0x9f965d;
    },
    create: function () {
      var _0x244565 = this;
      var _0x5845bd = _0x244565._parent;
      var _0x38bf5d = _0x2c4f06._muted || _0x244565._muted || _0x244565._parent._muted ? 0 : _0x244565._volume;
      if (_0x5845bd._webAudio) {
        _0x244565._node = _0x2c4f06.ctx.createGain === undefined ? _0x2c4f06.ctx.createGainNode() : _0x2c4f06.ctx.createGain();
        _0x244565._node.gain.setValueAtTime(_0x38bf5d, _0x2c4f06.ctx.currentTime);
        _0x244565._node.paused = true;
        _0x244565._node.connect(_0x2c4f06.masterGain);
      } else {
        _0x244565._node = new Audio();
        _0x244565._errorFn = _0x244565._errorListener.bind(_0x244565);
        _0x244565._node.addEventListener("error", _0x244565._errorFn, false);
        _0x244565._loadFn = _0x244565._loadListener.bind(_0x244565);
        _0x244565._node.addEventListener(_0x2c4f06._canPlayEvent, _0x244565._loadFn, false);
        _0x244565._node.src = _0x5845bd._src;
        _0x244565._node.preload = "auto";
        _0x244565._node.volume = _0x38bf5d * _0x2c4f06.volume();
        _0x244565._node.load();
      }
      return _0x244565;
    },
    reset: function () {
      var _0x59aa70 = this;
      var _0x4225ae = _0x59aa70._parent;
      _0x59aa70._muted = _0x4225ae._muted;
      _0x59aa70._loop = _0x4225ae._loop;
      _0x59aa70._volume = _0x4225ae._volume;
      _0x59aa70._rate = _0x4225ae._rate;
      _0x59aa70._seek = 0;
      _0x59aa70._rateSeek = 0;
      _0x59aa70._paused = true;
      _0x59aa70._ended = true;
      _0x59aa70._sprite = "__default";
      _0x59aa70._id = ++_0x2c4f06._counter;
      return _0x59aa70;
    },
    _errorListener: function () {
      var _0x1e678e = this;
      _0x1e678e._parent._emit("loaderror", _0x1e678e._id, _0x1e678e._node.error ? _0x1e678e._node.error.code : 0);
      _0x1e678e._node.removeEventListener("error", _0x1e678e._errorFn, false);
    },
    _loadListener: function () {
      var _0x1ec1d3 = this;
      var _0x4206a8 = _0x1ec1d3._parent;
      _0x4206a8._duration = Math.ceil(_0x1ec1d3._node.duration * 10) / 10;
      if (Object.keys(_0x4206a8._sprite).length === 0) {
        _0x4206a8._sprite = {
          __default: [0, _0x4206a8._duration * 1000]
        };
      }
      if (_0x4206a8._state !== "loaded") {
        _0x4206a8._state = "loaded";
        _0x4206a8._emit("load");
        _0x4206a8._loadQueue();
      }
      _0x1ec1d3._node.removeEventListener(_0x2c4f06._canPlayEvent, _0x1ec1d3._loadFn, false);
    }
  };
  var _0x4d93b4 = {};
  function _0x34408e(_0xafcb3b) {
    var _0x4f2356 = _0xafcb3b._src;
    if (_0x4d93b4[_0x4f2356]) {
      _0xafcb3b._duration = _0x4d93b4[_0x4f2356].duration;
      _0x412626(_0xafcb3b);
      return;
    }
    if (/^data:[^;]+;base64,/.test(_0x4f2356)) {
      for (var _0x438042 = atob(_0x4f2356.split(",")[1]), _0x15b8f7 = new Uint8Array(_0x438042.length), _0x4e8a44 = 0; _0x4e8a44 < _0x438042.length; ++_0x4e8a44) {
        _0x15b8f7[_0x4e8a44] = _0x438042.charCodeAt(_0x4e8a44);
      }
      _0x6b8edf(_0x15b8f7.buffer, _0xafcb3b);
    } else {
      var _0x4d2d21 = new XMLHttpRequest();
      _0x4d2d21.open("GET", _0x4f2356, true);
      _0x4d2d21.responseType = "arraybuffer";
      _0x4d2d21.onload = function () {
        var _0x112e04 = (_0x4d2d21.status + "")[0];
        if (_0x112e04 !== "0" && _0x112e04 !== "2" && _0x112e04 !== "3") {
          _0xafcb3b._emit("loaderror", null, "Failed loading audio file with status: " + _0x4d2d21.status + ".");
          return;
        }
        _0x6b8edf(_0x4d2d21.response, _0xafcb3b);
      };
      _0x4d2d21.onerror = function () {
        if (_0xafcb3b._webAudio) {
          _0xafcb3b._html5 = true;
          _0xafcb3b._webAudio = false;
          _0xafcb3b._sounds = [];
          delete _0x4d93b4[_0x4f2356];
          _0xafcb3b.load();
        }
      };
      _0x125221(_0x4d2d21);
    }
  }
  function _0x125221(_0x157263) {
    try {
      _0x157263.send();
    } catch (_0x2779a0) {
      _0x157263.onerror();
    }
  }
  function _0x6b8edf(_0x2a6c03, _0x7b25a6) {
    _0x2c4f06.ctx.decodeAudioData(_0x2a6c03, function (_0x447451) {
      if (_0x447451 && _0x7b25a6._sounds.length > 0) {
        _0x4d93b4[_0x7b25a6._src] = _0x447451;
        _0x412626(_0x7b25a6, _0x447451);
      }
    }, function () {
      _0x7b25a6._emit("loaderror", null, "Decoding audio data failed.");
    });
  }
  function _0x412626(_0x16f44c, _0x2b1d7d) {
    if (_0x2b1d7d && !_0x16f44c._duration) {
      _0x16f44c._duration = _0x2b1d7d.duration;
    }
    if (Object.keys(_0x16f44c._sprite).length === 0) {
      _0x16f44c._sprite = {
        __default: [0, _0x16f44c._duration * 1000]
      };
    }
    if (_0x16f44c._state !== "loaded") {
      _0x16f44c._state = "loaded";
      _0x16f44c._emit("load");
      _0x16f44c._loadQueue();
    }
  }
  function _0x462746() {
    try {
      if (typeof AudioContext != "undefined") {
        _0x2c4f06.ctx = new AudioContext();
      } else if (typeof webkitAudioContext != "undefined") {
        _0x2c4f06.ctx = new webkitAudioContext();
      } else {
        _0x2c4f06.usingWebAudio = false;
      }
    } catch (_0x56b04b) {
      _0x2c4f06.usingWebAudio = false;
    }
    var _0x1aa3ed = /iP(hone|od|ad)/.test(_0x2c4f06._navigator && _0x2c4f06._navigator.platform);
    var _0x3c1467 = _0x2c4f06._navigator && _0x2c4f06._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var _0x4d63b3 = _0x3c1467 ? parseInt(_0x3c1467[1], 10) : null;
    if (_0x1aa3ed && _0x4d63b3 && _0x4d63b3 < 9) {
      var _0x643377 = /safari/.test(_0x2c4f06._navigator && _0x2c4f06._navigator.userAgent.toLowerCase());
      if (_0x2c4f06._navigator && _0x2c4f06._navigator.standalone && !_0x643377 || _0x2c4f06._navigator && !_0x2c4f06._navigator.standalone && !_0x643377) {
        _0x2c4f06.usingWebAudio = false;
      }
    }
    if (_0x2c4f06.usingWebAudio) {
      _0x2c4f06.masterGain = _0x2c4f06.ctx.createGain === undefined ? _0x2c4f06.ctx.createGainNode() : _0x2c4f06.ctx.createGain();
      _0x2c4f06.masterGain.gain.value = _0x2c4f06._muted ? 0 : 1;
      _0x2c4f06.masterGain.connect(_0x2c4f06.ctx.destination);
    }
    _0x2c4f06._setup();
  }
  if (typeof define == "function" && define.amd) {
    define([], function () {
      return {
        Howler: _0x2c4f06,
        Howl: _0x30ff0b
      };
    });
  }
  if (typeof exports != "undefined") {
    exports.Howler = _0x2c4f06;
    exports.Howl = _0x30ff0b;
  }
  if (typeof window != "undefined") {
    window.HowlerGlobal = _0x549c68;
    window.Howler = _0x2c4f06;
    window.Howl = _0x30ff0b;
    window.Sound = _0x26ab7b;
  } else if (typeof global != "undefined") {
    global.HowlerGlobal = _0x549c68;
    global.Howler = _0x2c4f06;
    global.Howl = _0x30ff0b;
    global.Sound = _0x26ab7b;
  }
})();
(function () {
  'use strict';

  HowlerGlobal.prototype._pos = [0, 0, 0];
  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];
  HowlerGlobal.prototype.stereo = function (_0x2ede2a) {
    var _0x18cf2d = this;
    if (!_0x18cf2d.ctx || !_0x18cf2d.ctx.listener) {
      return _0x18cf2d;
    }
    for (var _0x34ae09 = _0x18cf2d._howls.length - 1; _0x34ae09 >= 0; _0x34ae09--) {
      _0x18cf2d._howls[_0x34ae09].stereo(_0x2ede2a);
    }
    return _0x18cf2d;
  };
  HowlerGlobal.prototype.pos = function (_0x236976, _0x59eb45, _0x3dd31d) {
    var _0x232cad = this;
    if (_0x232cad.ctx && _0x232cad.ctx.listener) {
      _0x59eb45 = typeof _0x59eb45 != "number" ? _0x232cad._pos[1] : _0x59eb45;
      _0x3dd31d = typeof _0x3dd31d != "number" ? _0x232cad._pos[2] : _0x3dd31d;
      if (typeof _0x236976 != "number") {
        return _0x232cad._pos;
      } else {
        _0x232cad._pos = [_0x236976, _0x59eb45, _0x3dd31d];
        _0x232cad.ctx.listener.setPosition(_0x232cad._pos[0], _0x232cad._pos[1], _0x232cad._pos[2]);
        return _0x232cad;
      }
    } else {
      return _0x232cad;
    }
  };
  HowlerGlobal.prototype.orientation = function (_0x5eb1e6, _0x1f5ec0, _0x564268, _0x107f6e, _0x1b4f79, _0x15f710) {
    var _0x3c8297 = this;
    if (!_0x3c8297.ctx || !_0x3c8297.ctx.listener) {
      return _0x3c8297;
    }
    var _0x38f662 = _0x3c8297._orientation;
    _0x1f5ec0 = typeof _0x1f5ec0 != "number" ? _0x38f662[1] : _0x1f5ec0;
    _0x564268 = typeof _0x564268 != "number" ? _0x38f662[2] : _0x564268;
    _0x107f6e = typeof _0x107f6e != "number" ? _0x38f662[3] : _0x107f6e;
    _0x1b4f79 = typeof _0x1b4f79 != "number" ? _0x38f662[4] : _0x1b4f79;
    _0x15f710 = typeof _0x15f710 != "number" ? _0x38f662[5] : _0x15f710;
    if (typeof _0x5eb1e6 != "number") {
      return _0x38f662;
    } else {
      _0x3c8297._orientation = [_0x5eb1e6, _0x1f5ec0, _0x564268, _0x107f6e, _0x1b4f79, _0x15f710];
      _0x3c8297.ctx.listener.setOrientation(_0x5eb1e6, _0x1f5ec0, _0x564268, _0x107f6e, _0x1b4f79, _0x15f710);
      return _0x3c8297;
    }
  };
  Howl.prototype.init = function (_0x118f53) {
    return function (_0x177ac6) {
      var _0x16c6c7 = this;
      _0x16c6c7._orientation = _0x177ac6.orientation || [1, 0, 0];
      _0x16c6c7._stereo = _0x177ac6.stereo || null;
      _0x16c6c7._pos = _0x177ac6.pos || null;
      _0x16c6c7._pannerAttr = {
        coneInnerAngle: _0x177ac6.coneInnerAngle !== undefined ? _0x177ac6.coneInnerAngle : 360,
        coneOuterAngle: _0x177ac6.coneOuterAngle !== undefined ? _0x177ac6.coneOuterAngle : 360,
        coneOuterGain: _0x177ac6.coneOuterGain !== undefined ? _0x177ac6.coneOuterGain : 0,
        distanceModel: _0x177ac6.distanceModel !== undefined ? _0x177ac6.distanceModel : "inverse",
        maxDistance: _0x177ac6.maxDistance !== undefined ? _0x177ac6.maxDistance : 10000,
        panningModel: _0x177ac6.panningModel !== undefined ? _0x177ac6.panningModel : "HRTF",
        refDistance: _0x177ac6.refDistance !== undefined ? _0x177ac6.refDistance : 1,
        rolloffFactor: _0x177ac6.rolloffFactor !== undefined ? _0x177ac6.rolloffFactor : 1
      };
      _0x16c6c7._onstereo = _0x177ac6.onstereo ? [{
        fn: _0x177ac6.onstereo
      }] : [];
      _0x16c6c7._onpos = _0x177ac6.onpos ? [{
        fn: _0x177ac6.onpos
      }] : [];
      _0x16c6c7._onorientation = _0x177ac6.onorientation ? [{
        fn: _0x177ac6.onorientation
      }] : [];
      return _0x118f53.call(this, _0x177ac6);
    };
  }(Howl.prototype.init);
  Howl.prototype.stereo = function (_0x5718eb, _0x202903) {
    var _0x493c66 = this;
    if (!_0x493c66._webAudio) {
      return _0x493c66;
    }
    if (_0x493c66._state !== "loaded") {
      _0x493c66._queue.push({
        event: "stereo",
        action: function () {
          _0x493c66.stereo(_0x5718eb, _0x202903);
        }
      });
      return _0x493c66;
    }
    var _0x1beb95 = Howler.ctx.createStereoPanner === undefined ? "spatial" : "stereo";
    if (_0x202903 === undefined) {
      if (typeof _0x5718eb != "number") {
        return _0x493c66._stereo;
      }
      _0x493c66._stereo = _0x5718eb;
      _0x493c66._pos = [_0x5718eb, 0, 0];
    }
    for (var _0x97f962 = _0x493c66._getSoundIds(_0x202903), _0x532469 = 0; _0x532469 < _0x97f962.length; _0x532469++) {
      var _0x47efc1 = _0x493c66._soundById(_0x97f962[_0x532469]);
      if (_0x47efc1) {
        if (typeof _0x5718eb != "number") {
          return _0x47efc1._stereo;
        }
        _0x47efc1._stereo = _0x5718eb;
        _0x47efc1._pos = [_0x5718eb, 0, 0];
        if (_0x47efc1._node) {
          _0x47efc1._pannerAttr.panningModel = "equalpower";
          if (!_0x47efc1._panner || !_0x47efc1._panner.pan) {
            _0xf747d0(_0x47efc1, _0x1beb95);
          }
          if (_0x1beb95 === "spatial") {
            _0x47efc1._panner.setPosition(_0x5718eb, 0, 0);
          } else {
            _0x47efc1._panner.pan.value = _0x5718eb;
          }
        }
        _0x493c66._emit("stereo", _0x47efc1._id);
      }
    }
    return _0x493c66;
  };
  Howl.prototype.pos = function (_0x5369cf, _0x3314f7, _0x13af55, _0x2117f2) {
    var _0x25ac5b = this;
    if (!_0x25ac5b._webAudio) {
      return _0x25ac5b;
    }
    if (_0x25ac5b._state !== "loaded") {
      _0x25ac5b._queue.push({
        event: "pos",
        action: function () {
          _0x25ac5b.pos(_0x5369cf, _0x3314f7, _0x13af55, _0x2117f2);
        }
      });
      return _0x25ac5b;
    }
    _0x3314f7 = typeof _0x3314f7 != "number" ? 0 : _0x3314f7;
    _0x13af55 = typeof _0x13af55 != "number" ? -0.5 : _0x13af55;
    if (_0x2117f2 === undefined) {
      if (typeof _0x5369cf != "number") {
        return _0x25ac5b._pos;
      }
      _0x25ac5b._pos = [_0x5369cf, _0x3314f7, _0x13af55];
    }
    for (var _0xe515b5 = _0x25ac5b._getSoundIds(_0x2117f2), _0x5a7645 = 0; _0x5a7645 < _0xe515b5.length; _0x5a7645++) {
      var _0x116748 = _0x25ac5b._soundById(_0xe515b5[_0x5a7645]);
      if (_0x116748) {
        if (typeof _0x5369cf != "number") {
          return _0x116748._pos;
        }
        _0x116748._pos = [_0x5369cf, _0x3314f7, _0x13af55];
        if (_0x116748._node) {
          if (!_0x116748._panner || !!_0x116748._panner.pan) {
            _0xf747d0(_0x116748, "spatial");
          }
          _0x116748._panner.setPosition(_0x5369cf, _0x3314f7, _0x13af55);
        }
        _0x25ac5b._emit("pos", _0x116748._id);
      }
    }
    return _0x25ac5b;
  };
  Howl.prototype.orientation = function (_0x188d6f, _0x5d9990, _0x212bd5, _0x3ee3eb) {
    var _0x44ec90 = this;
    if (!_0x44ec90._webAudio) {
      return _0x44ec90;
    }
    if (_0x44ec90._state !== "loaded") {
      _0x44ec90._queue.push({
        event: "orientation",
        action: function () {
          _0x44ec90.orientation(_0x188d6f, _0x5d9990, _0x212bd5, _0x3ee3eb);
        }
      });
      return _0x44ec90;
    }
    _0x5d9990 = typeof _0x5d9990 != "number" ? _0x44ec90._orientation[1] : _0x5d9990;
    _0x212bd5 = typeof _0x212bd5 != "number" ? _0x44ec90._orientation[2] : _0x212bd5;
    if (_0x3ee3eb === undefined) {
      if (typeof _0x188d6f != "number") {
        return _0x44ec90._orientation;
      }
      _0x44ec90._orientation = [_0x188d6f, _0x5d9990, _0x212bd5];
    }
    for (var _0x6a65bf = _0x44ec90._getSoundIds(_0x3ee3eb), _0x53e0a8 = 0; _0x53e0a8 < _0x6a65bf.length; _0x53e0a8++) {
      var _0x508d2f = _0x44ec90._soundById(_0x6a65bf[_0x53e0a8]);
      if (_0x508d2f) {
        if (typeof _0x188d6f != "number") {
          return _0x508d2f._orientation;
        }
        _0x508d2f._orientation = [_0x188d6f, _0x5d9990, _0x212bd5];
        if (_0x508d2f._node) {
          if (!_0x508d2f._panner) {
            _0x508d2f._pos ||= _0x44ec90._pos || [0, 0, -0.5];
            _0xf747d0(_0x508d2f, "spatial");
          }
          _0x508d2f._panner.setOrientation(_0x188d6f, _0x5d9990, _0x212bd5);
        }
        _0x44ec90._emit("orientation", _0x508d2f._id);
      }
    }
    return _0x44ec90;
  };
  Howl.prototype.pannerAttr = function () {
    var _0x1df635;
    var _0x99e6c;
    var _0xa03dd6;
    var _0x56a020 = this;
    var _0x1326bc = arguments;
    if (!_0x56a020._webAudio) {
      return _0x56a020;
    }
    if (_0x1326bc.length === 0) {
      return _0x56a020._pannerAttr;
    }
    if (_0x1326bc.length === 1) {
      if (typeof _0x1326bc[0] != "object") {
        _0xa03dd6 = _0x56a020._soundById(parseInt(_0x1326bc[0], 10));
        if (_0xa03dd6) {
          return _0xa03dd6._pannerAttr;
        } else {
          return _0x56a020._pannerAttr;
        }
      }
      _0x1df635 = _0x1326bc[0];
      if (_0x99e6c === undefined) {
        _0x56a020._pannerAttr = {
          coneInnerAngle: _0x1df635.coneInnerAngle !== undefined ? _0x1df635.coneInnerAngle : _0x56a020._coneInnerAngle,
          coneOuterAngle: _0x1df635.coneOuterAngle !== undefined ? _0x1df635.coneOuterAngle : _0x56a020._coneOuterAngle,
          coneOuterGain: _0x1df635.coneOuterGain !== undefined ? _0x1df635.coneOuterGain : _0x56a020._coneOuterGain,
          distanceModel: _0x1df635.distanceModel !== undefined ? _0x1df635.distanceModel : _0x56a020._distanceModel,
          maxDistance: _0x1df635.maxDistance !== undefined ? _0x1df635.maxDistance : _0x56a020._maxDistance,
          panningModel: _0x1df635.panningModel !== undefined ? _0x1df635.panningModel : _0x56a020._panningModel,
          refDistance: _0x1df635.refDistance !== undefined ? _0x1df635.refDistance : _0x56a020._refDistance,
          rolloffFactor: _0x1df635.rolloffFactor !== undefined ? _0x1df635.rolloffFactor : _0x56a020._rolloffFactor
        };
      }
    } else if (_0x1326bc.length === 2) {
      _0x1df635 = _0x1326bc[0];
      _0x99e6c = parseInt(_0x1326bc[1], 10);
    }
    for (var _0x57756c = _0x56a020._getSoundIds(_0x99e6c), _0x3372de = 0; _0x3372de < _0x57756c.length; _0x3372de++) {
      if (_0xa03dd6 = _0x56a020._soundById(_0x57756c[_0x3372de])) {
        var _0x32693c = _0xa03dd6._pannerAttr;
        _0x32693c = {
          coneInnerAngle: _0x1df635.coneInnerAngle !== undefined ? _0x1df635.coneInnerAngle : _0x32693c.coneInnerAngle,
          coneOuterAngle: _0x1df635.coneOuterAngle !== undefined ? _0x1df635.coneOuterAngle : _0x32693c.coneOuterAngle,
          coneOuterGain: _0x1df635.coneOuterGain !== undefined ? _0x1df635.coneOuterGain : _0x32693c.coneOuterGain,
          distanceModel: _0x1df635.distanceModel !== undefined ? _0x1df635.distanceModel : _0x32693c.distanceModel,
          maxDistance: _0x1df635.maxDistance !== undefined ? _0x1df635.maxDistance : _0x32693c.maxDistance,
          panningModel: _0x1df635.panningModel !== undefined ? _0x1df635.panningModel : _0x32693c.panningModel,
          refDistance: _0x1df635.refDistance !== undefined ? _0x1df635.refDistance : _0x32693c.refDistance,
          rolloffFactor: _0x1df635.rolloffFactor !== undefined ? _0x1df635.rolloffFactor : _0x32693c.rolloffFactor
        };
        var _0x2f058a = _0xa03dd6._panner;
        if (_0x2f058a) {
          _0x2f058a.coneInnerAngle = _0x32693c.coneInnerAngle;
          _0x2f058a.coneOuterAngle = _0x32693c.coneOuterAngle;
          _0x2f058a.coneOuterGain = _0x32693c.coneOuterGain;
          _0x2f058a.distanceModel = _0x32693c.distanceModel;
          _0x2f058a.maxDistance = _0x32693c.maxDistance;
          _0x2f058a.panningModel = _0x32693c.panningModel;
          _0x2f058a.refDistance = _0x32693c.refDistance;
          _0x2f058a.rolloffFactor = _0x32693c.rolloffFactor;
        } else {
          _0xa03dd6._pos ||= _0x56a020._pos || [0, 0, -0.5];
          _0xf747d0(_0xa03dd6, "spatial");
        }
      }
    }
    return _0x56a020;
  };
  Sound.prototype.init = function (_0x5914f0) {
    return function () {
      var _0x3ad8be = this;
      var _0x3aef86 = _0x3ad8be._parent;
      _0x3ad8be._orientation = _0x3aef86._orientation;
      _0x3ad8be._stereo = _0x3aef86._stereo;
      _0x3ad8be._pos = _0x3aef86._pos;
      _0x3ad8be._pannerAttr = _0x3aef86._pannerAttr;
      _0x5914f0.call(this);
      if (_0x3ad8be._stereo) {
        _0x3aef86.stereo(_0x3ad8be._stereo);
      } else if (_0x3ad8be._pos) {
        _0x3aef86.pos(_0x3ad8be._pos[0], _0x3ad8be._pos[1], _0x3ad8be._pos[2], _0x3ad8be._id);
      }
    };
  }(Sound.prototype.init);
  Sound.prototype.reset = function (_0x7d3990) {
    return function () {
      var _0x3ecd1c = this;
      var _0x44d7ac = _0x3ecd1c._parent;
      _0x3ecd1c._orientation = _0x44d7ac._orientation;
      _0x3ecd1c._pos = _0x44d7ac._pos;
      _0x3ecd1c._pannerAttr = _0x44d7ac._pannerAttr;
      return _0x7d3990.call(this);
    };
  }(Sound.prototype.reset);
  function _0xf747d0(_0x4f470a, _0x21ab00) {
    _0x21ab00 = _0x21ab00 || "spatial";
    if (_0x21ab00 === "spatial") {
      _0x4f470a._panner = Howler.ctx.createPanner();
      _0x4f470a._panner.coneInnerAngle = _0x4f470a._pannerAttr.coneInnerAngle;
      _0x4f470a._panner.coneOuterAngle = _0x4f470a._pannerAttr.coneOuterAngle;
      _0x4f470a._panner.coneOuterGain = _0x4f470a._pannerAttr.coneOuterGain;
      _0x4f470a._panner.distanceModel = _0x4f470a._pannerAttr.distanceModel;
      _0x4f470a._panner.maxDistance = _0x4f470a._pannerAttr.maxDistance;
      _0x4f470a._panner.panningModel = _0x4f470a._pannerAttr.panningModel;
      _0x4f470a._panner.refDistance = _0x4f470a._pannerAttr.refDistance;
      _0x4f470a._panner.rolloffFactor = _0x4f470a._pannerAttr.rolloffFactor;
      _0x4f470a._panner.setPosition(_0x4f470a._pos[0], _0x4f470a._pos[1], _0x4f470a._pos[2]);
      _0x4f470a._panner.setOrientation(_0x4f470a._orientation[0], _0x4f470a._orientation[1], _0x4f470a._orientation[2]);
    } else {
      _0x4f470a._panner = Howler.ctx.createStereoPanner();
      _0x4f470a._panner.pan.value = _0x4f470a._stereo;
    }
    _0x4f470a._panner.connect(_0x4f470a._node);
    if (!_0x4f470a._paused) {
      _0x4f470a._parent.pause(_0x4f470a._id, true).play(_0x4f470a._id);
    }
  }
})();
var VOLUME = {
  AMB: 1,
  FX: 1
};
var CONST_AUDIO = {
  SEA_DELAY: 12,
  SEA_FADE: 5000,
  FOREST_DELAY: 12,
  FOREST_FADE: 5000,
  SNOW_DELAY: 12,
  SNOW_FADE: 5000,
  TRANSITION: 3000,
  DISABLE_EFFECT: 460000,
  PLAYERS: 8,
  ITEMS: 6,
  HAND: 1,
  MISC: 2,
  SHOVEL: 3
};
var SOUND = [];
SOUND[-1] = CONST_AUDIO.HAND;
SOUND[INV.BOOK] = CONST_AUDIO.HAND;
SOUND[INV.WATERING_CAN_FULL] = CONST_AUDIO.HAND;
SOUND[INV.WRENCH] = CONST_AUDIO.MISC;
SOUND[INV.PICK_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.PICK] = CONST_AUDIO.MISC;
SOUND[INV.PICK_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.PICK_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.PICK_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.PICK_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.PIRATE_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.CRAB_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.WOOD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.GOLD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DIAMOND_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.SUPER_HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK2] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK] = CONST_AUDIO.MISC;
SOUND[INV.SHOVEL] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_GOLD] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_DIAMOND] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_AMETHYST] = CONST_AUDIO.SHOVEL;
SOUND_NATURE = [];
SOUND_NATURE[0] = 0;
SOUND_NATURE[1] = 1;
SOUND_NATURE[2] = 1;
SOUND_NATURE[3] = 1;
SOUND_NATURE[4] = 0;
SOUND_NATURE[5] = 0;
SOUND_NATURE[6] = 0;
SOUND_NATURE[7] = 0;
SOUND_NATURE[8] = 0;
SOUND_NATURE[9] = 0;
SOUND_NATURE[10] = 1;
SOUND_NATURE[11] = 1;
SOUND_NATURE[12] = 1;
SOUND_NATURE[13] = 1;
SOUND_NATURE[14] = 1;
SOUND_NATURE[15] = 1;
SOUND_NATURE[16] = 0;
SOUND_NATURE[17] = 0;
SOUND_NATURE[18] = 0;
SOUND_NATURE[19] = 0;
SOUND_NATURE[20] = 0;
SOUND_NATURE[21] = 0;
SOUND_NATURE[22] = 0;
SOUND_NATURE[23] = 1;
SOUND_NATURE[24] = 1;
SOUND_NATURE[25] = 1;
SOUND_NATURE[26] = 1;
SOUND_NATURE[27] = 1;
SOUND_NATURE[28] = 1;
SOUND_NATURE[29] = 1;
SOUND_NATURE[30] = 1;
SOUND_NATURE[31] = 1;
SOUND_NATURE[32] = 1;
SOUND_NATURE[33] = 1;
SOUND_NATURE[34] = 1;
SOUND_NATURE[35] = 1;
SOUND_NATURE[36] = 1;
SOUND_NATURE[37] = 1;
SOUND_NATURE[38] = 1;
SOUND_NATURE[40] = 0;
SOUND_NATURE[41] = 0;
SOUND_NATURE[42] = 0;
SOUND_NATURE[50] = 1;
SOUND_NATURE[51] = 1;
SOUND_NATURE[52] = 1;
SOUND_NATURE[55] = 0;
SOUND_NATURE[56] = 0;
SOUND_NATURE[57] = 0;
SOUND_NATURE[58] = 0;
SOUND_BUILD = [];
SOUND_BUILD[ITEMS.PLANT] = 0;
SOUND_BUILD[ITEMS.FIRE] = 0;
SOUND_BUILD[ITEMS.TOTEM] = 0;
SOUND_BUILD[ITEMS.BIG_FIRE] = 0;
SOUND_BUILD[ITEMS.SEED] = -1;
SOUND_BUILD[ITEMS.WHEAT_SEED] = -1;
SOUND_BUILD[ITEMS.WORKBENCH] = 0;
SOUND_BUILD[ITEMS.WALL] = 0;
SOUND_BUILD[ITEMS.BRIDGE] = 0;
SOUND_BUILD[ITEMS.PLOT] = 0;
SOUND_BUILD[ITEMS.WINDMILL] = 1;
SOUND_BUILD[ITEMS.WELL] = 1;
SOUND_BUILD[ITEMS.STONE_WALL] = 1;
SOUND_BUILD[ITEMS.GOLD_WALL] = 1;
SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1;
SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1;
SOUND_BUILD[ITEMS.REIDITE_WALL] = 1;
SOUND_BUILD[ITEMS.SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.FURNACE] = 1;
SOUND_BUILD[ITEMS.RESURRECTION] = 1;
SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1;
SOUND_BUILD[ITEMS.CHEST] = 0;
SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
var AUDIO = {
  DIG: {
    sound: null,
    path: ["audio/ambience.mp3"],
    sprite: {
      d0: [90086, 300, false],
      d1: [90391, 300, false],
      d2: [90684, 300, false]
    },
    sample: {
      d0: CONST_AUDIO.PLAYERS,
      d1: CONST_AUDIO.PLAYERS,
      d2: CONST_AUDIO.PLAYERS
    }
  },
  PUNCH: {
    sound: null,
    path: ["audio/ambience.mp3"],
    sprite: {
      p0: [89303, 300, false],
      p1: [89549, 300, false],
      p2: [89815, 300, false]
    },
    sample: {
      p0: CONST_AUDIO.PLAYERS,
      p1: CONST_AUDIO.PLAYERS,
      p2: CONST_AUDIO.PLAYERS
    }
  },
  WEAPON: {
    sound: null,
    path: ["audio/ambience.mp3"],
    sprite: {
      w0: [88195, 300, false],
      w1: [88473, 300, false],
      w2: [88751, 300, false],
      w3: [89025, 300, false]
    },
    sample: {
      w0: CONST_AUDIO.PLAYERS,
      w1: CONST_AUDIO.PLAYERS,
      w2: CONST_AUDIO.PLAYERS,
      w3: CONST_AUDIO.PLAYERS
    }
  },
  AMBIENCE: {
    sound: null,
    path: ["audio/ambience.mp3"],
    sprite: {
      cook: [100, 2800, true],
      seaday: [3100, 8800, true],
      seanight: [19882, 8301, true],
      forestday: [32604, 21890, true],
      forestnight: [54524, 11393, true],
      snowday: [66961, 21223, true],
      snownight: [66961, 21223, true],
      fire: [12356, 6965, true],
      swim: [28380, 1797, true],
      sand: [30562, 655, true],
      walk: [31658, 813, true],
      snow: [66014, 925, true],
      hwood: [91022, 400, false],
      hand: [91431, 400, false],
      hstone: [92249, 500, false]
    },
    sample: {
      cook: 1,
      seaday: 1,
      seanight: 1,
      forestday: 1,
      forestnight: 1,
      snowday: 1,
      snownight: 1,
      fire: CONST_AUDIO.PLAYERS,
      swim: CONST_AUDIO.PLAYERS,
      sand: CONST_AUDIO.PLAYERS,
      walk: CONST_AUDIO.PLAYERS,
      snow: CONST_AUDIO.PLAYERS,
      hwood: CONST_AUDIO.ITEMS,
      hand: CONST_AUDIO.ITEMS,
      hstone: CONST_AUDIO.ITEMS
    }
  }
};
function SoundArea(_0x21a5d0, _0x3d28d0, _0x167c0e, _0xe3245a, _0x2ca376, _0x262d86, _0x229036, _0x314f56, _0x16bf92, _0x2a42e4, _0x33048f) {
  this.r = 1;
  this.delay = _0x21a5d0;
  this.max_delay = _0x21a5d0;
  this.night = _0x3d28d0;
  this.day = _0x167c0e;
  this.fade = _0xe3245a;
  this.r_base = _0x2ca376;
  this.r_seed = _0x262d86;
  this.player = _0x229036;
  this.transition_delay = _0x314f56;
  this.source = _0x16bf92;
  this.source.lx = _0x16bf92.x + _0x16bf92.w;
  this.source.by = _0x16bf92.y + _0x16bf92.h;
  this.outside_box = _0x2a42e4;
  this.inside_box = _0x33048f;
  this.inside = 0;
  this.hackish = {
    d: 5,
    m: 5
  };
  this.effect = function () {
    this.delay -= delta;
    if (this.delay < 0) {
      this.delay = this.max_delay;
      var _0x1dce31 = AUDIO.AMBIENCE.sound.playing(this.night);
      var _0x57d2e7 = AUDIO.AMBIENCE.sound.playing(this.day);
      if (_0x1dce31 && !_0x57d2e7) {
        var _0x1d1266 = this.player.volume(this.night) * VOLUME.AMB;
        var _0x538f8f = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
        this.player.fade(_0x1d1266, _0x538f8f, this.fade, this.night);
      } else if (!_0x1dce31 && _0x57d2e7) {
        var _0x1d1266 = this.player.volume(this.day) * VOLUME.AMB;
        var _0x538f8f = (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
        this.player.fade(_0x1d1266, _0x538f8f, this.fade, this.day);
      }
    }
  };
  this.transition = function () {
    this.delay = this.max_delay;
    this.hackish.d = this.hackish.m;
    if (world.time) {
      this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.night);
      this.player.play(this.night);
      if (this.player.playing(this.day)) {
        var _0x429e70 = this.player.volume(this.day) * VOLUME.AMB;
        this.player.fade(_0x429e70, 0, this.transition_delay, this.day);
      }
    } else {
      this.player.fade(0, this.r_base * VOLUME.AMB, this.transition_delay, this.day);
      this.player.play(this.day);
      if (this.player.playing(this.night)) {
        var _0x429e70 = this.player.volume(this.night) * VOLUME.AMB;
        this.player.fade(_0x429e70, 0, this.transition_delay, this.night);
      }
    }
  };
  this.check = function (_0x527683) {
    if (this.inside) {
      if (!Utils.inside_box(_0x527683, this.outside_box)) {
        this.inside = 0;
        if (this.player.playing(this.night)) {
          var _0x199341 = this.player.volume(this.night) * VOLUME.AMB;
          this.player.fade(_0x199341, 0, this.transition_delay, this.night);
        }
        if (this.player.playing(this.day)) {
          var _0x199341 = this.player.volume(this.day) * VOLUME.AMB;
          this.player.fade(_0x199341, 0, this.transition_delay, this.day);
        }
      } else if (!audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
        if (world.time) {
          if (!this.player.playing(this.night)) {
            this.hackish.d -= delta;
            if (this.hackish.d < 0) {
              this.transition();
            }
          }
        } else if (!this.player.playing(this.day)) {
          this.hackish.d -= delta;
          if (this.hackish.d < 0) {
            this.transition();
          }
        }
      }
    } else if (Utils.inside_box(_0x527683, this.inside_box)) {
      this.inside = 1;
      if (!audio.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
        this.transition();
      }
    }
  };
  this.update = function (_0x123eac, _0x558298) {
    var _0x197675;
    var _0x1fea94;
    if (_0x123eac.x < this.source.x) {
      _0x197675 = audio.get_x(this.source.x);
    } else if (_0x123eac.x > this.source.lx) {
      _0x197675 = audio.get_x(this.source.lx);
    } else {
      _0x197675 = _0x558298.x;
    }
    if (_0x123eac.y < this.source.y) {
      _0x1fea94 = audio.get_y(this.source.y);
    } else if (_0x123eac.y > this.source.by) {
      _0x1fea94 = audio.get_y(this.source.by);
    } else {
      _0x1fea94 = _0x558298.y;
    }
    this.player.pos(_0x197675, _0x1fea94, -0.5, this.night);
    this.player.pos(_0x197675, _0x1fea94, -0.5, this.day);
  };
}
SOUND_PLAYER = {
  DELAY_SWIM: 0.4,
  DELAY_SAND: 0.2,
  DELAY_WALK: 0.2,
  DELAY_SNOW: 0.2,
  FADE_SWIM: 300,
  FADE_SAND: 100,
  FADE_WALK: 100,
  FADE_SNOW: 100,
  WALK: 0,
  SWIM: 1,
  SAND: 2,
  SNOW: 3,
  FACTOR: 4,
  FACTOR2: 2
};
function SoundPlayerEffect(_0x22b3ba, _0x40e115, _0x35ba8e) {
  this.mom = _0x22b3ba;
  this.c = 0;
  this.player = _0x40e115;
  this.ids = _0x35ba8e;
  this.max = _0x35ba8e.length;
  this.play = function () {
    this.c = (this.c + 1) % this.max;
    var _0x21835b = this.ids[this.c];
    this.mom.update_pos(this.player, _0x21835b);
    this.player.play(_0x21835b);
  };
}
function SoundPlayer(_0xa62b47) {
  this.free = 1;
  this.uid = 0;
  this.mode = -1;
  this.swim = audio.sample.swim[_0xa62b47];
  this.sand = audio.sample.sand[_0xa62b47];
  this.walk = audio.sample.walk[_0xa62b47];
  this.snow = audio.sample.snow[_0xa62b47];
  this.punch = new SoundPlayerEffect(this, AUDIO.PUNCH.sound, audio.samples.punch[_0xa62b47]);
  this.weapon = new SoundPlayerEffect(this, AUDIO.WEAPON.sound, audio.samples.weapon[_0xa62b47]);
  this.dig = new SoundPlayerEffect(this, AUDIO.DIG.sound, audio.samples.dig[_0xa62b47]);
  this.sid = _0xa62b47;
  this.x = 0;
  this.y = 0;
  this.move = 0;
  this.delay = SOUND_PLAYER.DELAY;
  this.pos = {
    x: 0,
    y: 0
  };
  this.ambience = AUDIO.AMBIENCE.sound;
  this.swing = function (_0x34ae8c) {
    if (_0x34ae8c === CONST_AUDIO.HAND) {
      this.punch.play();
    } else if (_0x34ae8c === CONST_AUDIO.MISC) {
      this.weapon.play();
    } else if (_0x34ae8c === CONST_AUDIO.SHOVEL) {
      this.dig.play();
    }
  };
  this.detect_position = function (_0x20dfd2) {
    if (_0x20dfd2.dist_sand > 0) {
      return SOUND_PLAYER.SAND;
    } else if (_0x20dfd2.dist_water > 0) {
      return SOUND_PLAYER.SWIM;
    } else if (_0x20dfd2.dist_winter > 0 || _0x20dfd2.dist_lava > 0) {
      return SOUND_PLAYER.SNOW;
    } else {
      return SOUND_PLAYER.WALK;
    }
  };
  this.init = function (_0x185212) {
    this.free = 0;
    this.uid = _0x185212;
    var _0x43fe15 = world.fast_units[_0x185212];
    _0x43fe15.sid = this.sid;
    this.mode = this.detect_position(_0x43fe15);
    this.pos.x = _0x43fe15.x;
    this.pos.y = _0x43fe15.y;
  };
  this.clean = function () {
    this.free = 1;
    this.mode = -1;
    this.ambience.stop(this.swim);
    this.ambience.stop(this.sand);
    this.ambience.stop(this.walk);
    this.ambience.stop(this.snow);
  };
  this.fade = function (_0x2ce55b, _0x5e019c) {
    var _0x5489b9 = this.ambience.volume(_0x2ce55b) * VOLUME.FX;
    this.ambience.fade(_0x5489b9, 0, _0x5e019c, _0x2ce55b);
  };
  this.update_pos = function (_0x59a5c4, _0x35ddd9) {
    if (this.move && this.sid) {
      _0x59a5c4.pos(this.x, this.y, -0.5, _0x35ddd9);
    }
  };
  this.effect = function (_0x18c364, _0x2ef130, _0x4c7a79, _0x29f272, _0x16a638, _0x33247d, _0x18a956) {
    this.delay = _0x33247d;
    if (_0x29f272 && this.mode === _0x16a638) {
      var _0x2440b4 = this.ambience.volume(_0x18c364) * VOLUME.FX;
      if (this.move) {
        var _0x39b811 = (Math.random() * _0x4c7a79 + _0x2ef130) * VOLUME.FX;
        this.ambience.fade(_0x2440b4, _0x39b811, _0x18a956, _0x18c364);
      } else {
        this.ambience.fade(_0x2440b4, 0, _0x18a956, _0x18c364);
      }
    } else if (this.mode != _0x16a638 && this.move) {
      this.ambience.fade(0, (_0x2ef130 + _0x4c7a79) * VOLUME.FX, _0x18a956, _0x18c364);
    } else if (this.move) {
      var _0x2440b4 = this.ambience.volume(_0x18c364) * VOLUME.FX;
      var _0x39b811 = (Math.random() * _0x4c7a79 + _0x2ef130) * VOLUME.FX;
      this.ambience.fade(_0x2440b4, _0x39b811, _0x18a956, _0x18c364);
    }
    this.update_pos(this.ambience, _0x18c364);
    this.ambience.play(_0x18c364);
  };
  this.update = function () {
    var _0x8032ac = world.fast_units[this.uid];
    this.delay -= delta;
    if (this.delay > 0) {
      return;
    }
    var _0x149db7 = 0;
    if (_0x8032ac.x != this.pos.x || _0x8032ac.y != this.pos.y) {
      if (!this.move) {
        _0x149db7 = 1;
        this.move = 1;
      }
      this.x = audio.get_x_ext(_0x8032ac.x, SOUND_PLAYER.FACTOR2);
      this.y = audio.get_y_ext(_0x8032ac.y, SOUND_PLAYER.FACTOR2);
    } else if (this.move) {
      _0x149db7 = 1;
      this.move = 0;
    }
    this.pos.x = _0x8032ac.x;
    this.pos.y = _0x8032ac.y;
    mode = this.detect_position(_0x8032ac);
    if (mode != this.mode) {
      if (this.mode === SOUND_PLAYER.SWIM) {
        this.fade(this.swim, SOUND_PLAYER.FADE_SWIM);
      } else if (this.mode === SOUND_PLAYER.SAND) {
        this.fade(this.sand, SOUND_PLAYER.FADE_SAND);
      } else if (this.mode === SOUND_PLAYER.WALK) {
        this.fade(this.walk, SOUND_PLAYER.FADE_WALK);
      } else if (this.mode === SOUND_PLAYER.SNOW) {
        this.fade(this.snow, SOUND_PLAYER.FADE_SNOW);
      }
    }
    if (mode === SOUND_PLAYER.SWIM) {
      this.effect(this.swim, 0.08, 0.3, _0x149db7, mode, SOUND_PLAYER.DELAY_SWIM, SOUND_PLAYER.FADE_SWIM);
    } else if (mode === SOUND_PLAYER.SAND) {
      this.effect(this.sand, 0.2, 0.3, _0x149db7, mode, SOUND_PLAYER.DELAY_SAND, SOUND_PLAYER.FADE_SAND);
    } else if (mode === SOUND_PLAYER.WALK) {
      this.effect(this.walk, 0.3, 0.6, _0x149db7, mode, SOUND_PLAYER.DELAY_WALK, SOUND_PLAYER.FADE_WALK);
    } else if (mode === SOUND_PLAYER.SNOW) {
      this.effect(this.snow, 0.1, 0.25, _0x149db7, mode, SOUND_PLAYER.DELAY_SNOW, SOUND_PLAYER.FADE_SNOW);
    }
    this.mode = mode;
  };
  this.check = function () {
    var _0x21e37a = world.fast_units[this.uid];
    if (!_0x21e37a) {
      this.clean(_0x21e37a);
      return false;
    }
    return true;
  };
}
function MyAudio() {
  this.run = 0;
  this.loaded = 0;
  this.transition = 0;
  this.get_x = function (_0x10253b) {
    return _0x10253b / world.w * 100;
  };
  this.get_y = function (_0x5beee2) {
    return _0x5beee2 / world.h * 100;
  };
  this.get_x_ext = function (_0x1e8f60, _0x3d9ca8) {
    _0x1e8f60 = this.get_x(_0x1e8f60) - this.ltr.x;
    return this.ltr.x + _0x3d9ca8 * _0x1e8f60;
  };
  this.get_y_ext = function (_0x794c6, _0x1bba7b) {
    _0x794c6 = Math.abs(this.get_y(_0x794c6) - this.ltr.y);
    return this.ltr.y + _0x1bba7b * _0x794c6;
  };
  this.sample = {};
  this.samples = {};
  this.player = {};
  this.play_sample = function (_0x5baf34, _0x5a6a34, _0x2be0e5, _0x47f0a7) {
    for (var _0x57658f = 0; _0x57658f < _0x5a6a34.length; _0x57658f++) {
      var _0x4f6165 = _0x5a6a34[_0x57658f];
      if (_0x5baf34.playing(_0x4f6165)) {
        continue;
      }
      _0x5baf34.pos(_0x2be0e5, _0x47f0a7, -0.5, _0x4f6165);
      _0x5baf34.play(_0x4f6165);
      return true;
    }
    return false;
  };
  this.hit = function (_0x421956, _0x2fe4df, _0x14eeab, _0x39442d) {
    _0x14eeab = this.get_x_ext(_0x14eeab, SOUND_PLAYER.FACTOR);
    _0x39442d = this.get_y_ext(_0x39442d, SOUND_PLAYER.FACTOR);
    console.log("HIT", _0x421956, _0x2fe4df, _0x14eeab, _0x39442d, SOUND_PLAYER.FACTOR);
    if (!_0x421956) {
      this.play_sample(this.player.hand, this.sample.hand, _0x14eeab, _0x39442d);
    } else if (_0x2fe4df === 1) {
      this.play_sample(this.player.hstone, this.sample.hstone, _0x14eeab, _0x39442d);
    } else if (_0x2fe4df === 0) {
      this.play_sample(this.player.hwood, this.sample.hwood, _0x14eeab, _0x39442d);
    }
  };
  this.ltr = {
    x: 0,
    y: 0
  };
  this.oldp = {
    x: 0,
    y: 0
  };
  this.area = {};
  this.players = [];
  this.ambience = function (_0xad4612, _0x461c22) {
    for (var _0x4c2a0a in this.area) {
      var _0x1edc3c = this.area[_0x4c2a0a];
      _0x1edc3c.check(_0xad4612);
      if (_0x1edc3c.inside) {
        if (world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
          _0x1edc3c.effect();
        }
        if (_0x461c22) {
          _0x1edc3c.update(_0xad4612, this.ltr);
        }
        if (this.transition) {
          _0x1edc3c.transition();
        }
      }
    }
    if (this.transition) {
      this.transition = 0;
    }
  };
  this.hook_players = function () {
    var _0x1267a0 = [];
    for (var _0x54387c = 0; _0x54387c < this.players.length; _0x54387c++) {
      var _0x212500 = this.players[_0x54387c];
      if (_0x212500.free) {
        _0x1267a0.push(_0x54387c);
      } else if (!_0x212500.free && !world.fast_units[_0x212500.uid]) {
        _0x212500.clean();
        _0x1267a0.push(_0x54387c);
      }
    }
    var _0xcd3c3c = world.units[ITEMS.PLAYERS];
    for (var _0x54387c = 0, _0x13b846 = 0; _0x54387c < _0xcd3c3c.length && _0x13b846 < _0x1267a0.length; _0x54387c++) {
      var _0x212500 = _0xcd3c3c[_0x54387c];
      if (world.mode == WORLD.MODE_HUNGER_GAMES && world.players[_0x212500.id].nickname === "spectator" || _0x212500.sid !== -1 || _0x212500.uid === user.uid) {
        continue;
      }
      this.players[_0x1267a0[_0x13b846]].init(_0x212500.uid);
      _0x13b846++;
    }
  };
  this.players_effect = function () {
    this.hook_players();
    for (var _0x5d7779 = 0; _0x5d7779 < this.players.length; _0x5d7779++) {
      var _0x19f5c0 = this.players[_0x5d7779];
      if (_0x19f5c0.free || !_0x19f5c0.check()) {
        continue;
      }
      _0x19f5c0.update();
    }
  };
  this.update_listener = function (_0x5b6a00) {
    if (this.oldp.x === _0x5b6a00.x && this.oldp.y === _0x5b6a00.y) {
      return 0;
    }
    this.oldp.x = _0x5b6a00.x;
    this.oldp.y = _0x5b6a00.y;
    this.ltr.x = this.get_x(_0x5b6a00.x);
    this.ltr.y = this.get_y(_0x5b6a00.y);
    Howler.pos(this.ltr.x, this.ltr.y, 0);
    return 1;
  };
  this.scheduler = function () {
    if (!this.run || !this.loaded) {
      return;
    }
    var _0x140d39 = world.fast_units[user.uid];
    if (!_0x140d39) {
      return;
    }
    _0x140d39.sid = 0;
    var _0x4b19e7 = this.update_listener(_0x140d39);
    if (world.mode !== WORLD.MODE_ZOMBIES && world.mode !== WORLD.MODE_LEGACY && world.mode !== WORLD.MODE_BR) {
      this.ambience(_0x140d39, _0x4b19e7);
    }
    this.players_effect();
  };
  this.load_sound = function () {
    var _0x3e8cca = null;
    for (var _0x5cabff in AUDIO) {
      var _0xec54fd = AUDIO[_0x5cabff];
      if (typeof _0xec54fd === "object" && _0xec54fd.path) {
        _0xec54fd.sound = new Howl({
          src: _0xec54fd.path,
          volume: 0,
          sprite: _0xec54fd.sprite
        });
      }
      for (var _0x257f8b in _0xec54fd.sample) {
        var _0x52d431 = _0xec54fd.sample[_0x257f8b];
        var _0x20c7ba = [];
        console.log(_0x257f8b);
        for (var _0x5dfdd3 = 0; _0x5dfdd3 < _0x52d431; _0x5dfdd3++) {
          var _0x49cae5 = _0xec54fd.sound.play(_0x257f8b);
          _0xec54fd.sound.stop(_0x49cae5);
          _0xec54fd.sound.on("fade", function (_0x52d10c) {
            if (!this.volume(_0x52d10c)) {
              console.log(_0x52d10c, "OUT");
              this.stop(_0x52d10c);
            }
          }, _0x49cae5);
          _0x20c7ba.push(_0x49cae5);
        }
        if (_0x20c7ba.length > 1) {
          audio.sample[_0x257f8b] = _0x20c7ba;
        } else {
          audio.sample[_0x257f8b] = _0x20c7ba[0];
        }
        audio.player[_0x257f8b] = _0xec54fd.sound;
      }
    }
  };
  this.volume_sample = function (_0x59ea74, _0x21e468, _0x3560fc) {
    for (var _0x135c37 = 0; _0x135c37 < _0x59ea74.length; _0x135c37++) {
      _0x21e468.volume(_0x3560fc, _0x59ea74[_0x135c37]);
    }
  };
  this.organize_samples = function (_0xb9bcca, _0x1ba1f4, _0x4a8657, _0x9999a5, _0x482d7c, _0x2fc452) {
    var _0xde8a28 = _0xb9bcca;
    for (var _0x134ed7 = 0; _0x134ed7 < _0x4a8657; _0x134ed7++) {
      var _0x1e07fb = _0xde8a28[_0x134ed7] = [];
      for (j = 0; j < _0x9999a5; j++) {
        _0x1e07fb[j] = audio.sample[_0x482d7c + j][_0x134ed7];
        _0x1ba1f4.sound.volume(_0x2fc452, _0x1e07fb[j]);
      }
    }
  };
  this.init = function () {
    audio.load_sound();
    audio.samples.punch = [];
    audio.samples.weapon = [];
    audio.samples.dig = [];
    audio.organize_samples(audio.samples.punch, AUDIO.PUNCH, CONST_AUDIO.PLAYERS, 3, "p", 0.15);
    audio.organize_samples(audio.samples.weapon, AUDIO.WEAPON, CONST_AUDIO.PLAYERS, 4, "w", 0.15);
    audio.organize_samples(audio.samples.dig, AUDIO.DIG, CONST_AUDIO.PLAYERS, 3, "d", 0.09);
    audio.volume_sample(audio.sample.hand, audio.player.hand, 0.15);
    audio.volume_sample(audio.sample.hwood, audio.player.hwood, 0.2);
    audio.volume_sample(audio.sample.hstone, audio.player.hstone, 1);
    audio.area.sea = new SoundArea(CONST_AUDIO.SEA_DELAY, this.sample.seanight, this.sample.seaday, CONST_AUDIO.SEA_FADE, 0.05, 0.4, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
      x: SPRITE.SEE_BIOME_X,
      y: SPRITE.WINTER_BIOME_Y,
      w: world.w,
      h: world.h
    }, {
      x: SPRITE.SEE_BIOME_X - 2300,
      y: SPRITE.WINTER_BIOME_Y - 4000,
      w: world.w,
      h: world.h
    }, {
      x: SPRITE.SEE_BIOME_X - 1500,
      y: SPRITE.WINTER_BIOME_Y - 2000,
      w: world.w,
      h: world.h
    });
    audio.area.forest = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.forestnight, this.sample.forestday, CONST_AUDIO.FOREST_FADE, 0.03, 0.25, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
      x: 0,
      y: SPRITE.WINTER_BIOME_Y + 800,
      w: SPRITE.SEE_BIOME_X - 2300,
      h: world.h
    }, {
      x: -100,
      y: SPRITE.WINTER_BIOME_Y - 300,
      w: SPRITE.SEE_BIOME_X - 100,
      h: world.h
    }, {
      x: -100,
      y: SPRITE.WINTER_BIOME_Y + 400,
      w: SPRITE.SEE_BIOME_X - 1400,
      h: world.h
    });
    audio.area.snow = new SoundArea(CONST_AUDIO.FOREST_DELAY, this.sample.snownight, this.sample.snowday, CONST_AUDIO.SNOW_FADE, 0.01, 0.22, AUDIO.AMBIENCE.sound, CONST_AUDIO.TRANSITION, {
      x: -100,
      y: -100,
      w: world.w + 200,
      h: SPRITE.WINTER_BIOME_Y - 1000
    }, {
      x: -100,
      y: -100,
      w: world.w + 200,
      h: SPRITE.WINTER_BIOME_Y + 600
    }, {
      x: -100,
      y: -100,
      w: world.w + 200,
      h: SPRITE.WINTER_BIOME_Y + 100
    });
    for (var _0x4b2cc2 = 0; _0x4b2cc2 < CONST_AUDIO.PLAYERS; _0x4b2cc2++) {
      audio.players[_0x4b2cc2] = new SoundPlayer(_0x4b2cc2);
    }
    audio.players[0].init(user.uid);
    audio.loaded = 1;
  };
  this.launch = function () {
    if (!this.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
      this.transition = 1;
    }
  };
  this.quit = function () {
    if (!this.run || !this.loaded) {
      return;
    }
    for (var _0x49c9a2 in audio.sample) {
      var _0x436432 = audio.sample[_0x49c9a2];
      if (typeof _0x436432 === "object") {
        for (var _0x1c83bf = 0; _0x1c83bf < _0x436432.length; _0x1c83bf++) {
          audio.player[_0x49c9a2].stop(_0x436432[_0x1c83bf]);
        }
      } else {
        audio.player[_0x49c9a2].stop(_0x436432);
      }
    }
    for (var _0x1c83bf = 0; _0x1c83bf < audio.players.length; _0x1c83bf++) {
      audio.players[_0x1c83bf].clean();
    }
  };
  this.select = function () {
    if (!audio.run) {
      if (!audio.loaded) {
        audio.init();
      }
      audio.players[0].uid = user.uid;
      audio.players[0].free = 0;
      audio.launch();
    } else {
      audio.quit();
    }
    audio.run = !audio.run;
  };
}
mobile = 0;
document.getElementById("version").innerHTML = "" + CLIENT.VERSION_NUMBER + ".3";
var MAP = [];
var fake_world = {
  time: Math.floor(Math.random() * 2),
  items: []
};
init_fake_world();
client = new NetworkClient();
var ui;
var game = {
  is_run: false
};
var world;
var user;
var scoreboard;
var audio = new MyAudio();
var keyboard = new Keyboard();
var mouse = new Mouse();
var delta = 0;
var old_timestamp = 0;
var fps = {
  img: false,
  counter: 0,
  delay: 0,
  cycle: 60,
  display: true
};
var loader = new Loader(can, ctx, function () {
  create_images();
  game = new Game(can, ctx);
  ui = new UI(can, ctx);
  ui.login_after();
  scoreboard = new Scoreboard(can, ctx);
  world = new World();
  user = new User();
  loader.quit(function () {
    loader.logo.style.display = "none";
    ui.run();
  });
});
function draw(_0x4f9580) {
  window.requestAnimationFrame(draw);
  delta = (_0x4f9580 - old_timestamp) / 1000;
  old_timestamp = _0x4f9580;
  delta = delta > 1 ? 1 : delta;
  if (game.is_run) {
    game.draw();
  } else {
    ctx.clearRect(0, 0, canw, canh);
    if (loader.is_run) {
      loader.draw();
    } else if (ui.is_run) {
      ui.draw();
    } else if (scoreboard.is_run) {
      scoreboard.draw();
    }
  }
}
window.onbeforeunload = function () {
  if (game.is_run) {
    return "Are you sure you want quit starve.io ;-; ?";
  }
};
resize_canvas();
draw(0);
if (!window.YMPB) {
  window.YMPB = window.YMPB || {};
  isYolla = 0;
} else {
  isYolla = 1;
}
window.YMPB.que = window.YMPB.que || [];
window.aiptag = window.aiptag || {};
window.aiptag.consented = true;
window.aiptag.cmd = window.aiptag.cmd || [];
window.aiptag.cmd.display = window.aiptag.cmd.display || [];
window.aiptag.cmd.player = window.aiptag.cmd.player || [];
function refreshAds() {
  window.YMPB.refresh();
}
function yollaCallback() {
  document.getElementById("preroll").style.display = "none";
  client.connect();
}
function fun() {
  adplayer = new aipPlayer({
    AD_WIDTH: 960,
    AD_HEIGHT: 540,
    AD_FULLSCREEN: true,
    AD_CENTERPLAYER: true,
    LOADING_TEXT: "loading advertisement",
    PREROLL_ELEM: function () {
      return document.getElementById("preroll");
    },
    AIP_COMPLETE: function () {
      client.connect();
    },
    AIP_REMOVE: function () {}
  });
}
window.aiptag.cmd.player.push(fun);
var ___adsvid = 0;
function check_ads() {
  xhttp.open("GET", "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929", true);
  xhttp.send();
}
;
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function () {
  if (this.readyState === 4 && this.status === 0) {}
};
var DB = "https://token.starve.io/";
if (environment === environments.DEV) {
  var DB = "http://localhost:3002/";
}
var __GOOGLE_LOGIN__ = 0;
var __FACEBOOK_LOGIN__ = 1;
var userLoginType = undefined;
var userToken = undefined;
var userId = undefined;
var userData = undefined;
var userAlreadyLoggedIn = 0;
window.onUserLogin = function () {
  userAlreadyLoggedIn = 1;
};
function loginWithGoogle() {
  window.gapi.auth2.getAuthInstance().signIn();
}
var ip = undefined;
var xsolla_options = {
  access_token: "ACCESS_TOKEN"
};
var s = document.createElement("script");
s.type = "text/javascript";
s.async = true;
s.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
s.addEventListener("load", function (_0x471847) {
  window.XPayStationWidget.init(xsolla_options);
  window.XPayStationWidget.on("status-done", claimBread);
}, false);
var head = document.getElementsByTagName("head")[0];
head.appendChild(s);
window.fbAsyncInit = function () {
  login();
  console.log("fb async init called");
};
(function (_0x25fcba, _0x36a4c3, _0x514f8f) {
  var _0x3a18b1;
  var _0x3b35b0 = _0x25fcba.getElementsByTagName(_0x36a4c3)[0];
  if (_0x25fcba.getElementById(_0x514f8f)) {
    return;
  }
  _0x3a18b1 = _0x25fcba.createElement(_0x36a4c3);
  _0x3a18b1.id = _0x514f8f;
  _0x3a18b1.src = "https://connect.facebook.net/en_US/sdk.js";
  _0x3b35b0.parentNode.insertBefore(_0x3a18b1, _0x3b35b0);
})(document, "script", "facebook-jssdk");
function logWithFacebook() {
  window.FB.login(function (_0x377a2c) {
    if (_0x377a2c.authResponse) {
      window.FB.api("/me", function (_0x576df7) {
        userLoginType = __FACEBOOK_LOGIN__;
        userToken = window.FB.getAuthResponse().accessToken;
        login();
        window.onUserLogin(userId);
      });
    } else {}
  });
}
var auth2 = undefined;
var googleUser = undefined;
function appStart() {
  window.gapi.load("auth2", initSigninV2);
}
function initSigninV2() {
  window.gapi.auth2.init({
    client_id: "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
    scope: "https://www.googleapis.com/auth/userinfo.profile"
  }).then(_0x3a9e24 => {
    auth2 = _0x3a9e24;
    auth2.isSignedIn.listen(signinChanged);
    auth2.currentUser.listen(userChanged);
    const _0xbde790 = auth2.isSignedIn.get();
    if (_0xbde790) {
      auth2.signIn();
    }
    refreshValues();
  });
}
function signinChanged(_0x2ffb1d) {}
function userChanged(_0x54b6f4) {
  login();
  if (userToken === undefined && googleUser !== undefined) {
    userToken = googleUser.getAuthResponse().id_token;
    console.log("::: iandev userToken :::", userToken);
    if (userToken !== undefined) {
      userLoginType = __GOOGLE_LOGIN__;
      window.onUserLogin(userId);
    }
  }
  if (_0x54b6f4 !== undefined && _0x54b6f4.isSignedIn() === true) {
    googleUser = _0x54b6f4;
    window.onUserLogin(_0x54b6f4.id);
  }
}
function refreshValues() {
  if (auth2) {
    googleUser = auth2.currentUser.get();
  }
}
window.onload = function () {
  appStart();
};
function logout() {
  if (userLoginType === __FACEBOOK_LOGIN__ && window.FB.getUserID()) {
    window.FB.logout();
  }
  if (userLoginType === __GOOGLE_LOGIN__ && googleUser !== undefined) {
    window.gapi.auth2.getAuthInstance().signOut();
    googleUser = undefined;
  }
  userId = undefined;
  userToken = undefined;
  userLoginType = undefined;
  ui.kit = 0;
  ui.bread = 0;
  ui.score = 0;
  ui.unlock_cosmetics();
  onUserLogout();
}
function login() {
  window.FB.init({
    appId: "642017356260407",
    cookie: true,
    xfbml: true,
    version: "v15.0"
  });
  if (userId !== undefined) {
    return;
  }
  getUserId();
  if (!userId) {
    return;
  }
}
function getUserId() {
  try {
    if (window.FB) {
      if (window.FB.getUserID()) {
        userId = window.FB.getUserID();
        if (userToken === undefined) {
          window.FB.getLoginStatus(function () {
            userLoginType = __FACEBOOK_LOGIN__;
            userToken = window.FB.getAuthResponse().accessToken;
            window.onUserLogin(userId);
          });
        }
      }
    }
  } catch (_0x1ebd32) {}
  try {
    userId = googleUser.getBasicProfile().getId();
  } catch (_0x59b7b8) {}
}
function openXsolla(_0x58f4d5) {
  if (!userId) {
    return;
  }
  var _0x52a843 = new XMLHttpRequest();
  _0x52a843.open("GET", DB + "xsolla?userid=" + userId + "&item=" + _0x58f4d5);
  _0x52a843.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x52a843.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x52a843.responseText !== "0") {
        xsolla_options.access_token = _0x52a843.responseText;
        window.XPayStationWidget.init(xsolla_options);
        window.XPayStationWidget.open();
      }
    }
  };
  _0x52a843.send();
}
function getUserDetails(_0x5c8f2c) {
  var _0xf92889 = new XMLHttpRequest();
  _0xf92889.open("GET", DB + "login?token=" + userToken + "&type=" + userLoginType);
  _0xf92889.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0xf92889.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0xf92889.responseText !== "0") {
        _0x5c8f2c(JSON.parse(_0xf92889.responseText));
      }
    }
  };
  _0xf92889.send();
}
function rebootServer() {
  var _0x420304 = new XMLHttpRequest();
  _0x420304.open("GET", DB + "rebootServer?token=" + userToken + "&userid=" + userId);
  _0x420304.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x420304.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0x420304.responseText !== "0") {
        location.href = document.getElementById("serverAddressInput").value;
      }
    }
  };
  _0x420304.send();
}
function regionPreference(_0x2ddde7) {
  var _0x4e6688 = new XMLHttpRequest();
  _0x4e6688.open("GET", DB + "setRegion?token=" + userToken + "&userid=" + userId + "&region=" + _0x2ddde7);
  _0x4e6688.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x4e6688.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0x4e6688.responseText !== "0") {
        ui.select_subview(ui.__SERVER_DURATION__);
      } else {
        ui.select_subview(ui.__GAME__);
      }
    }
  };
  _0x4e6688.send();
}
function buySpin(_0x187336, _0x53c1a1) {
  if (ui.spin > 0) {
    return;
  }
  if (ui.bread < _0x53c1a1) {
    ui.select_subview(ui.__BUY__);
    return;
  }
  ui.spin = 2;
  ui.spin_effect = 0;
  ui.spin_target = 100;
  var _0x7af295 = new XMLHttpRequest();
  _0x7af295.open("GET", DB + "buySpin?token=" + userToken + "&userid=" + userId + "&spin=" + _0x187336);
  _0x7af295.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x7af295.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x7af295.responseText !== "0") {
        var _0x1385ef = JSON.parse(_0x7af295.responseText);
        ui.play_spin(_0x1385ef.rand * Math.PI * 2, _0x1385ef.type, _0x1385ef.id);
        ui.bread -= _0x53c1a1;
      } else {
        ui.spin = 0;
      }
    }
  };
  _0x7af295.send();
}
function buyNameChanger() {
  if (ui.bread < 300 && ui.firstName > 0) {
    return;
  }
  var _0x3fda17 = document.getElementById("account_nickname_input").value.trim();
  document.getElementById("account_nickname_input").value = _0x3fda17;
  if (_0x3fda17.length < 1 || _0x3fda17.length > 20) {
    return;
  }
  var _0x30f042 = new XMLHttpRequest();
  _0x30f042.open("GET", DB + "changeNickname?token=" + userToken + "&userid=" + userId + "&nickname=" + encodeURIComponent(_0x3fda17));
  _0x30f042.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x30f042.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x30f042.responseText !== "0") {
        var _0xcea59c = Number(_0x30f042.responseText);
        if (_0xcea59c > 0) {
          ui.bread -= _0xcea59c;
        }
        ui.firstName = 1;
        ui.select_subview(ui.__PROFILE__);
      }
    }
  };
  _0x30f042.send();
}
function buyKit(_0x25e5be, _0x1fbac6) {
  if (ui.bread < _0x1fbac6) {
    ui.select_subview(ui.__BUY__);
    return;
  }
  var _0x5b637c = new XMLHttpRequest();
  _0x5b637c.open("GET", DB + "buyKit?token=" + userToken + "&userid=" + userId + "&kit=" + _0x25e5be);
  _0x5b637c.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x5b637c.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x5b637c.responseText !== "0") {
        var _0x2d84e8 = JSON.parse(_0x5b637c.responseText);
        ui.bread -= _0x1fbac6;
        ui.kit = Date.now() + Number(_0x2d84e8);
      }
    }
  };
  _0x5b637c.send();
}
function claimBread() {
  var _0x68eef5 = new XMLHttpRequest();
  _0x68eef5.open("GET", DB + "claimBread?userid=" + userId);
  _0x68eef5.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x68eef5.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x68eef5.responseText !== "0") {
        var _0x5c7ea3 = Number(_0x68eef5.responseText);
        if (!isNaN(_0x5c7ea3)) {
          ui.bread = _0x5c7ea3;
        }
      }
    }
  };
  _0x68eef5.send();
}
function getBreadAndScore() {
  var _0x32fee5 = new XMLHttpRequest();
  _0x32fee5.open("GET", DB + "getBreadAndScore?userid=" + userId);
  _0x32fee5.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x32fee5.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x32fee5.responseText !== "0") {
        var _0x23886e = JSON.parse(_0x32fee5.responseText);
        var _0x295d34 = _0x23886e.b - ui.bread;
        ui.bread = _0x23886e.b;
        ui.score = _0x23886e.s;
        ui.lvl = ui.level_formula(ui.score);
        ui.xp_dest = ui.xp_formula(ui.score);
        ui.xp = 0;
        document.getElementById("breadWonInner").innerHTML = "" + _0x295d34;
      }
    }
  };
  _0x32fee5.send();
}
function sendCheat() {
  xhr.open("GET", DB + "getScore?userid=" + userId);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  xhr.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (xhr.responseText !== "0") {
        var _0x16c1a7 = JSON.parse(xhr.responseText);
      }
    }
  };
  xhr.send();
}
function getLeaderboard(_0x3f845e, _0x274c38, _0x50fe53, _0x377212) {
  _0x3f845e = _0x3f845e === undefined ? ui.leaderboard_range : _0x3f845e;
  _0x274c38 = _0x274c38 === undefined ? ui.leaderboard_mode : _0x274c38;
  _0x50fe53 = _0x50fe53 === undefined ? ui.leaderboard_sorted : _0x50fe53;
  _0x377212 = _0x377212 === undefined ? ui.leaderboard_season : _0x377212;
  if (_0x3f845e === ui.leaderboard_range && _0x274c38 === ui.leaderboard_mode && _0x50fe53 === ui.leaderboard_sorted && _0x377212 === ui.leaderboard_season) {
    return;
  }
  ui.leaderboard_range = _0x3f845e;
  ui.leaderboard_mode = _0x274c38;
  ui.leaderboard_sorted = _0x50fe53;
  ui.leaderboard_season = _0x377212;
  if (ui.LEADERBOARD_SEASON1 === _0x377212) {
    _0x377212 = "0";
  } else if (ui.LEADERBOARD_SEASON2 === _0x377212) {
    _0x377212 = "1";
  } else if (ui.LEADERBOARD_SEASON3 === _0x377212) {
    _0x377212 = "2";
  } else if (ui.LEADERBOARD_SEASON4 === _0x377212) {
    _0x377212 = "3";
  }
  if (ui.LEADERBOARD_TOTAL === _0x274c38) {
    _0x274c38 = "total";
  } else if (ui.LEADERBOARD_NORMAL === _0x274c38) {
    _0x274c38 = "normal";
  } else if (ui.LEADERBOARD_ZOMBIE === _0x274c38) {
    _0x274c38 = "zombie";
  } else if (ui.LEADERBOARD_VAMPIRE === _0x274c38) {
    _0x274c38 = "vampire";
  } else if (ui.LEADERBOARD_FOREST === _0x274c38) {
    _0x274c38 = "forest";
  }
  if (ui.LEADERBOARD_ALL === _0x3f845e) {
    _0x3f845e = "all";
  }
  if (ui.LEADERBOARD_WEEK === _0x3f845e) {
    _0x3f845e = "week";
  }
  if (ui.LEADERBOARD_TODAY === _0x3f845e) {
    _0x3f845e = "today";
  }
  if (ui.LEADERBOARD_KILL === _0x50fe53) {
    _0x50fe53 = "kill";
  } else if (ui.LEADERBOARD_SCORE === _0x50fe53) {
    _0x50fe53 = "score";
  } else if (ui.LEADERBOARD_TIME === _0x50fe53) {
    _0x50fe53 = "time";
  }
  var _0x4b13c9 = new XMLHttpRequest();
  _0x4b13c9.open("GET", DB + "leaderboard?range=" + _0x3f845e + "&mode=" + _0x274c38 + "&sort=" + _0x50fe53 + "&season=" + _0x377212);
  _0x4b13c9.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  _0x4b13c9.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x4b13c9.responseText !== "0") {
        var _0xdba49e = JSON.parse(_0x4b13c9.responseText);
        var _0x2eff5f = "";
        for (var _0x30b942 = 0; _0x30b942 < _0xdba49e.length; _0x30b942++) {
          line = _0xdba49e[_0x30b942];
          var _0x34365b = line[1];
          if (_0x34365b.indexOf("Starver#") === -1) {
            _0x34365b = window.decodeURIComponent(window.escape(window.atob(_0x34365b)));
          }
          _0x2eff5f += "<div class=\"lineLeaderboard\">";
          _0x2eff5f += "<div class=\"rank\">";
          _0x2eff5f += _0x30b942 + 1 + "";
          _0x2eff5f += "</div>";
          _0x2eff5f += "<div class=\"name\">";
          _0x2eff5f += _0x34365b;
          _0x2eff5f += "</div>";
          _0x2eff5f += "<div class=\"lvl\">";
          _0x2eff5f += ui.level_formula(line[6]) + 1 + "";
          _0x2eff5f += "</div>";
          _0x2eff5f += "<div class=\"kills\">";
          _0x2eff5f += line[5] + "";
          _0x2eff5f += "</div>";
          _0x2eff5f += "<div class=\"time\">";
          _0x2eff5f += line[4] + "";
          _0x2eff5f += "</div>";
          _0x2eff5f += "<div class=\"score\">";
          _0x2eff5f += line[3] + "";
          _0x2eff5f += "</div>";
          _0x2eff5f += "</div>";
        }
        document.getElementById("leaderboard").innerHTML = _0x2eff5f;
      }
    }
  };
  _0x4b13c9.send();
}
